// Code generated by generate-marshals. DO NOT EDIT.

package avs

import "strings"

// XMLString returns the XML string representation of Activity
func (e Activity) XMLString() string {
	switch e {
	case Activity_ACTIVITY_AFRAID:
		return "AFRAID"
	case Activity_ACTIVITY_ANGST:
		return "ANGST"
	case Activity_ACTIVITY_BBQ:
		return "BBQ"
	case Activity_ACTIVITY_BIBLESTUDY:
		return "BIBLESTUDY"
	case Activity_ACTIVITY_BIRTHDAYPARTY:
		return "BIRTHDAYPARTY"
	case Activity_ACTIVITY_BREAKDOWN:
		return "BREAKDOWN"
	case Activity_ACTIVITY_BREAKUP:
		return "BREAKUP"
	case Activity_ACTIVITY_BREATHE:
		return "BREATHE"
	case Activity_ACTIVITY_CELEBRATION:
		return "CELEBRATION"
	case Activity_ACTIVITY_CRY:
		return "CRY"
	case Activity_ACTIVITY_DANCE:
		return "DANCE"
	case Activity_ACTIVITY_DATING:
		return "DATING"
	case Activity_ACTIVITY_DAYDREAM:
		return "DAYDREAM"
	case Activity_ACTIVITY_DEFEAT:
		return "DEFEAT"
	case Activity_ACTIVITY_DINNER:
		return "DINNER"
	case Activity_ACTIVITY_DRINK:
		return "DRINK"
	case Activity_ACTIVITY_DRIVE:
		return "DRIVE"
	case Activity_ACTIVITY_EAT:
		return "EAT"
	case Activity_ACTIVITY_FIGHT:
		return "FIGHT"
	case Activity_ACTIVITY_FLIRT:
		return "FLIRT"
	case Activity_ACTIVITY_FOCUS:
		return "FOCUS"
	case Activity_ACTIVITY_FUNERAL:
		return "FUNERAL"
	case Activity_ACTIVITY_HANGOUT:
		return "HANGOUT"
	case Activity_ACTIVITY_HONEYMOON:
		return "HONEYMOON"
	case Activity_ACTIVITY_JUMP:
		return "JUMP"
	case Activity_ACTIVITY_KARAOKE:
		return "KARAOKE"
	case Activity_ACTIVITY_LAZY:
		return "LAZY"
	case Activity_ACTIVITY_LEAVE:
		return "LEAVE"
	case Activity_ACTIVITY_MAKINGLOVE:
		return "MAKINGLOVE"
	case Activity_ACTIVITY_MEDITATION:
		return "MEDITATION"
	case Activity_ACTIVITY_MOURNING:
		return "MOURNING"
	case Activity_ACTIVITY_PARTY:
		return "PARTY"
	case Activity_ACTIVITY_PRAYER:
		return "PRAYER"
	case Activity_ACTIVITY_REGRET:
		return "REGRET"
	case Activity_ACTIVITY_RELAX:
		return "RELAX"
	case Activity_ACTIVITY_ROADTRIP:
		return "ROADTRIP"
	case Activity_ACTIVITY_RUN:
		return "RUN"
	case Activity_ACTIVITY_TRAVEL:
		return "TRAVEL"
	case Activity_ACTIVITY_USERDEFINED:
		return "USERDEFINED"
	case Activity_ACTIVITY_VICTORY:
		return "VICTORY"
	case Activity_ACTIVITY_WAIT:
		return "WAIT"
	case Activity_ACTIVITY_WAKING:
		return "WAKING"
	case Activity_ACTIVITY_WALK:
		return "WALK"
	case Activity_ACTIVITY_WEDDING:
		return "WEDDING"
	case Activity_ACTIVITY_WISH:
		return "WISH"
	case Activity_ACTIVITY_WORK:
		return "WORK"
	case Activity_ACTIVITY_WORKOUT:
		return "WORKOUT"
	case Activity_ACTIVITY_WORSHIP:
		return "WORSHIP"
	case Activity_ACTIVITY_YOGA:
		return "YOGA"
	default:
		return ""
	}
}

// ParseActivityString parses a string value to Activity enum (case-insensitive)
func ParseActivityString(s string) (Activity, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "AFRAID":
		return Activity_ACTIVITY_AFRAID, true
	case "ANGST":
		return Activity_ACTIVITY_ANGST, true
	case "BBQ":
		return Activity_ACTIVITY_BBQ, true
	case "BIBLESTUDY":
		return Activity_ACTIVITY_BIBLESTUDY, true
	case "BIRTHDAYPARTY":
		return Activity_ACTIVITY_BIRTHDAYPARTY, true
	case "BREAKDOWN":
		return Activity_ACTIVITY_BREAKDOWN, true
	case "BREAKUP":
		return Activity_ACTIVITY_BREAKUP, true
	case "BREATHE":
		return Activity_ACTIVITY_BREATHE, true
	case "CELEBRATION":
		return Activity_ACTIVITY_CELEBRATION, true
	case "CRY":
		return Activity_ACTIVITY_CRY, true
	case "DANCE":
		return Activity_ACTIVITY_DANCE, true
	case "DATING":
		return Activity_ACTIVITY_DATING, true
	case "DAYDREAM":
		return Activity_ACTIVITY_DAYDREAM, true
	case "DEFEAT":
		return Activity_ACTIVITY_DEFEAT, true
	case "DINNER":
		return Activity_ACTIVITY_DINNER, true
	case "DRINK":
		return Activity_ACTIVITY_DRINK, true
	case "DRIVE":
		return Activity_ACTIVITY_DRIVE, true
	case "EAT":
		return Activity_ACTIVITY_EAT, true
	case "FIGHT":
		return Activity_ACTIVITY_FIGHT, true
	case "FLIRT":
		return Activity_ACTIVITY_FLIRT, true
	case "FOCUS":
		return Activity_ACTIVITY_FOCUS, true
	case "FUNERAL":
		return Activity_ACTIVITY_FUNERAL, true
	case "HANGOUT":
		return Activity_ACTIVITY_HANGOUT, true
	case "HONEYMOON":
		return Activity_ACTIVITY_HONEYMOON, true
	case "JUMP":
		return Activity_ACTIVITY_JUMP, true
	case "KARAOKE":
		return Activity_ACTIVITY_KARAOKE, true
	case "LAZY":
		return Activity_ACTIVITY_LAZY, true
	case "LEAVE":
		return Activity_ACTIVITY_LEAVE, true
	case "MAKINGLOVE":
		return Activity_ACTIVITY_MAKINGLOVE, true
	case "MEDITATION":
		return Activity_ACTIVITY_MEDITATION, true
	case "MOURNING":
		return Activity_ACTIVITY_MOURNING, true
	case "PARTY":
		return Activity_ACTIVITY_PARTY, true
	case "PRAYER":
		return Activity_ACTIVITY_PRAYER, true
	case "REGRET":
		return Activity_ACTIVITY_REGRET, true
	case "RELAX":
		return Activity_ACTIVITY_RELAX, true
	case "ROADTRIP":
		return Activity_ACTIVITY_ROADTRIP, true
	case "RUN":
		return Activity_ACTIVITY_RUN, true
	case "TRAVEL":
		return Activity_ACTIVITY_TRAVEL, true
	case "USERDEFINED":
		return Activity_ACTIVITY_USERDEFINED, true
	case "VICTORY":
		return Activity_ACTIVITY_VICTORY, true
	case "WAIT":
		return Activity_ACTIVITY_WAIT, true
	case "WAKING":
		return Activity_ACTIVITY_WAKING, true
	case "WALK":
		return Activity_ACTIVITY_WALK, true
	case "WEDDING":
		return Activity_ACTIVITY_WEDDING, true
	case "WISH":
		return Activity_ACTIVITY_WISH, true
	case "WORK":
		return Activity_ACTIVITY_WORK, true
	case "WORKOUT":
		return Activity_ACTIVITY_WORKOUT, true
	case "WORSHIP":
		return Activity_ACTIVITY_WORSHIP, true
	case "YOGA":
		return Activity_ACTIVITY_YOGA, true
	default:
		return Activity(0), false
	}
}

// XMLString returns the XML string representation of AdditionalContributorRole
func (e AdditionalContributorRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAdditionalContributorRoleString parses a string value to AdditionalContributorRole enum (case-insensitive)
func ParseAdditionalContributorRoleString(s string) (AdditionalContributorRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AdditionalContributorRole(0), false
	}
}

// XMLString returns the XML string representation of AdditionalRightsClaimStatus
func (e AdditionalRightsClaimStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAdditionalRightsClaimStatusString parses a string value to AdditionalRightsClaimStatus enum (case-insensitive)
func ParseAdditionalRightsClaimStatusString(s string) (AdditionalRightsClaimStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AdditionalRightsClaimStatus(0), false
	}
}

// XMLString returns the XML string representation of AdditionalTitleType
func (e AdditionalTitleType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAdditionalTitleTypeString parses a string value to AdditionalTitleType enum (case-insensitive)
func ParseAdditionalTitleTypeString(s string) (AdditionalTitleType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AdditionalTitleType(0), false
	}
}

// XMLString returns the XML string representation of AdditionalVideoType
func (e AdditionalVideoType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAdditionalVideoTypeString parses a string value to AdditionalVideoType enum (case-insensitive)
func ParseAdditionalVideoTypeString(s string) (AdditionalVideoType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AdditionalVideoType(0), false
	}
}

// XMLString returns the XML string representation of AdministratingRecordCompanyRole
func (e AdministratingRecordCompanyRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAdministratingRecordCompanyRoleString parses a string value to AdministratingRecordCompanyRole enum (case-insensitive)
func ParseAdministratingRecordCompanyRoleString(s string) (AdministratingRecordCompanyRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AdministratingRecordCompanyRole(0), false
	}
}

// XMLString returns the XML string representation of AffiliationType
func (e AffiliationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAffiliationTypeString parses a string value to AffiliationType enum (case-insensitive)
func ParseAffiliationTypeString(s string) (AffiliationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AffiliationType(0), false
	}
}

// XMLString returns the XML string representation of AllIsoTerritoryCode
func (e AllIsoTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAllIsoTerritoryCodeString parses a string value to AllIsoTerritoryCode enum (case-insensitive)
func ParseAllIsoTerritoryCodeString(s string) (AllIsoTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AllIsoTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of AllTerritoryCode
func (e AllTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAllTerritoryCodeString parses a string value to AllTerritoryCode enum (case-insensitive)
func ParseAllTerritoryCodeString(s string) (AllTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AllTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of AllTerritoryCodeNoWorldwide
func (e AllTerritoryCodeNoWorldwide) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAllTerritoryCodeNoWorldwideString parses a string value to AllTerritoryCodeNoWorldwide enum (case-insensitive)
func ParseAllTerritoryCodeNoWorldwideString(s string) (AllTerritoryCodeNoWorldwide, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AllTerritoryCodeNoWorldwide(0), false
	}
}

// XMLString returns the XML string representation of ArAcknowledgementStatus
func (e ArAcknowledgementStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseArAcknowledgementStatusString parses a string value to ArAcknowledgementStatus enum (case-insensitive)
func ParseArAcknowledgementStatusString(s string) (ArAcknowledgementStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ArAcknowledgementStatus(0), false
	}
}

// XMLString returns the XML string representation of ArActionType
func (e ArActionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseArActionTypeString parses a string value to ArActionType enum (case-insensitive)
func ParseArActionTypeString(s string) (ArActionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ArActionType(0), false
	}
}

// XMLString returns the XML string representation of ArtistRole
func (e ArtistRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseArtistRoleString parses a string value to ArtistRole enum (case-insensitive)
func ParseArtistRoleString(s string) (ArtistRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ArtistRole(0), false
	}
}

// XMLString returns the XML string representation of ArtistType
func (e ArtistType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseArtistTypeString parses a string value to ArtistType enum (case-insensitive)
func ParseArtistTypeString(s string) (ArtistType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ArtistType(0), false
	}
}

// XMLString returns the XML string representation of AspectRatioType
func (e AspectRatioType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAspectRatioTypeString parses a string value to AspectRatioType enum (case-insensitive)
func ParseAspectRatioTypeString(s string) (AspectRatioType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AspectRatioType(0), false
	}
}

// XMLString returns the XML string representation of AsserterType
func (e AsserterType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAsserterTypeString parses a string value to AsserterType enum (case-insensitive)
func ParseAsserterTypeString(s string) (AsserterType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AsserterType(0), false
	}
}

// XMLString returns the XML string representation of AssertionStatus
func (e AssertionStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAssertionStatusString parses a string value to AssertionStatus enum (case-insensitive)
func ParseAssertionStatusString(s string) (AssertionStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AssertionStatus(0), false
	}
}

// XMLString returns the XML string representation of AudioCodecType
func (e AudioCodecType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAudioCodecTypeString parses a string value to AudioCodecType enum (case-insensitive)
func ParseAudioCodecTypeString(s string) (AudioCodecType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AudioCodecType(0), false
	}
}

// XMLString returns the XML string representation of AudioVisualType
func (e AudioVisualType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseAudioVisualTypeString parses a string value to AudioVisualType enum (case-insensitive)
func ParseAudioVisualTypeString(s string) (AudioVisualType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return AudioVisualType(0), false
	}
}

// XMLString returns the XML string representation of BasisForRevenueAllocation
func (e BasisForRevenueAllocation) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseBasisForRevenueAllocationString parses a string value to BasisForRevenueAllocation enum (case-insensitive)
func ParseBasisForRevenueAllocationString(s string) (BasisForRevenueAllocation, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return BasisForRevenueAllocation(0), false
	}
}

// XMLString returns the XML string representation of BinaryDataType
func (e BinaryDataType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseBinaryDataTypeString parses a string value to BinaryDataType enum (case-insensitive)
func ParseBinaryDataTypeString(s string) (BinaryDataType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return BinaryDataType(0), false
	}
}

// XMLString returns the XML string representation of Blockchain
func (e Blockchain) XMLString() string {
	switch e {
	case Blockchain_BLOCKCHAIN_ETHEREUM:
		return "ETHEREUM"
	case Blockchain_BLOCKCHAIN_USERDEFINED:
		return "USERDEFINED"
	default:
		return ""
	}
}

// ParseBlockchainString parses a string value to Blockchain enum (case-insensitive)
func ParseBlockchainString(s string) (Blockchain, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "ETHEREUM":
		return Blockchain_BLOCKCHAIN_ETHEREUM, true
	case "USERDEFINED":
		return Blockchain_BLOCKCHAIN_USERDEFINED, true
	default:
		return Blockchain(0), false
	}
}

// XMLString returns the XML string representation of BusinessMusicalWorkContributorRole
func (e BusinessMusicalWorkContributorRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseBusinessMusicalWorkContributorRoleString parses a string value to BusinessMusicalWorkContributorRole enum (case-insensitive)
func ParseBusinessMusicalWorkContributorRoleString(s string) (BusinessMusicalWorkContributorRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return BusinessMusicalWorkContributorRole(0), false
	}
}

// XMLString returns the XML string representation of CarrierType
func (e CarrierType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCarrierTypeString parses a string value to CarrierType enum (case-insensitive)
func ParseCarrierTypeString(s string) (CarrierType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CarrierType(0), false
	}
}

// XMLString returns the XML string representation of CatalogTransferAcknowledgementStatus
func (e CatalogTransferAcknowledgementStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCatalogTransferAcknowledgementStatusString parses a string value to CatalogTransferAcknowledgementStatus enum (case-insensitive)
func ParseCatalogTransferAcknowledgementStatusString(s string) (CatalogTransferAcknowledgementStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CatalogTransferAcknowledgementStatus(0), false
	}
}

// XMLString returns the XML string representation of CatalogTransferStatus
func (e CatalogTransferStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCatalogTransferStatusString parses a string value to CatalogTransferStatus enum (case-insensitive)
func ParseCatalogTransferStatusString(s string) (CatalogTransferStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CatalogTransferStatus(0), false
	}
}

// XMLString returns the XML string representation of CatalogTransferType
func (e CatalogTransferType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCatalogTransferTypeString parses a string value to CatalogTransferType enum (case-insensitive)
func ParseCatalogTransferTypeString(s string) (CatalogTransferType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CatalogTransferType(0), false
	}
}

// XMLString returns the XML string representation of CdProtectionType
func (e CdProtectionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCdProtectionTypeString parses a string value to CdProtectionType enum (case-insensitive)
func ParseCdProtectionTypeString(s string) (CdProtectionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CdProtectionType(0), false
	}
}

// XMLString returns the XML string representation of CharacterType
func (e CharacterType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCharacterTypeString parses a string value to CharacterType enum (case-insensitive)
func ParseCharacterTypeString(s string) (CharacterType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CharacterType(0), false
	}
}

// XMLString returns the XML string representation of ClaimBasis
func (e ClaimBasis) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseClaimBasisString parses a string value to ClaimBasis enum (case-insensitive)
func ParseClaimBasisString(s string) (ClaimBasis, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ClaimBasis(0), false
	}
}

// XMLString returns the XML string representation of ClaimImpact
func (e ClaimImpact) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseClaimImpactString parses a string value to ClaimImpact enum (case-insensitive)
func ParseClaimImpactString(s string) (ClaimImpact, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ClaimImpact(0), false
	}
}

// XMLString returns the XML string representation of ClaimStatus
func (e ClaimStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseClaimStatusString parses a string value to ClaimStatus enum (case-insensitive)
func ParseClaimStatusString(s string) (ClaimStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ClaimStatus(0), false
	}
}

// XMLString returns the XML string representation of ClassifiedGenre
func (e ClassifiedGenre) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseClassifiedGenreString parses a string value to ClassifiedGenre enum (case-insensitive)
func ParseClassifiedGenreString(s string) (ClassifiedGenre, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ClassifiedGenre(0), false
	}
}

// XMLString returns the XML string representation of ClipType
func (e ClipType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseClipTypeString parses a string value to ClipType enum (case-insensitive)
func ParseClipTypeString(s string) (ClipType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ClipType(0), false
	}
}

// XMLString returns the XML string representation of CodingType
func (e CodingType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCodingTypeString parses a string value to CodingType enum (case-insensitive)
func ParseCodingTypeString(s string) (CodingType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CodingType(0), false
	}
}

// XMLString returns the XML string representation of CollectionMandateType
func (e CollectionMandateType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCollectionMandateTypeString parses a string value to CollectionMandateType enum (case-insensitive)
func ParseCollectionMandateTypeString(s string) (CollectionMandateType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CollectionMandateType(0), false
	}
}

// XMLString returns the XML string representation of CommentaryNoteType
func (e CommentaryNoteType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCommentaryNoteTypeString parses a string value to CommentaryNoteType enum (case-insensitive)
func ParseCommentaryNoteTypeString(s string) (CommentaryNoteType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CommentaryNoteType(0), false
	}
}

// XMLString returns the XML string representation of CommercialModelType
func (e CommercialModelType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCommercialModelTypeString parses a string value to CommercialModelType enum (case-insensitive)
func ParseCommercialModelTypeString(s string) (CommercialModelType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CommercialModelType(0), false
	}
}

// XMLString returns the XML string representation of CommercialModelTypeERN
func (e CommercialModelTypeERN) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCommercialModelTypeERNString parses a string value to CommercialModelTypeERN enum (case-insensitive)
func ParseCommercialModelTypeERNString(s string) (CommercialModelTypeERN, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CommercialModelTypeERN(0), false
	}
}

// XMLString returns the XML string representation of CommercialModelTypeMWNL
func (e CommercialModelTypeMWNL) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCommercialModelTypeMWNLString parses a string value to CommercialModelTypeMWNL enum (case-insensitive)
func ParseCommercialModelTypeMWNLString(s string) (CommercialModelTypeMWNL, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CommercialModelTypeMWNL(0), false
	}
}

// XMLString returns the XML string representation of CompilationType
func (e CompilationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCompilationTypeString parses a string value to CompilationType enum (case-insensitive)
func ParseCompilationTypeString(s string) (CompilationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CompilationType(0), false
	}
}

// XMLString returns the XML string representation of CompositeMusicalWorkType
func (e CompositeMusicalWorkType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCompositeMusicalWorkTypeString parses a string value to CompositeMusicalWorkType enum (case-insensitive)
func ParseCompositeMusicalWorkTypeString(s string) (CompositeMusicalWorkType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CompositeMusicalWorkType(0), false
	}
}

// XMLString returns the XML string representation of Confidentiality
func (e Confidentiality) XMLString() string {
	switch e {
	case Confidentiality_CONFIDENTIALITY_DONOTSHARE:
		return "DONOTSHARE"
	case Confidentiality_CONFIDENTIALITY_MAYBESHARED:
		return "MAYBESHARED"
	default:
		return ""
	}
}

// ParseConfidentialityString parses a string value to Confidentiality enum (case-insensitive)
func ParseConfidentialityString(s string) (Confidentiality, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "DONOTSHARE":
		return Confidentiality_CONFIDENTIALITY_DONOTSHARE, true
	case "MAYBESHARED":
		return Confidentiality_CONFIDENTIALITY_MAYBESHARED, true
	default:
		return Confidentiality(0), false
	}
}

// XMLString returns the XML string representation of ConsumerEngagementAnomalyType
func (e ConsumerEngagementAnomalyType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseConsumerEngagementAnomalyTypeString parses a string value to ConsumerEngagementAnomalyType enum (case-insensitive)
func ParseConsumerEngagementAnomalyTypeString(s string) (ConsumerEngagementAnomalyType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ConsumerEngagementAnomalyType(0), false
	}
}

// XMLString returns the XML string representation of ContainerFormat
func (e ContainerFormat) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseContainerFormatString parses a string value to ContainerFormat enum (case-insensitive)
func ParseContainerFormatString(s string) (ContainerFormat, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ContainerFormat(0), false
	}
}

// XMLString returns the XML string representation of ContainsAI
func (e ContainsAI) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseContainsAIString parses a string value to ContainsAI enum (case-insensitive)
func ParseContainsAIString(s string) (ContainsAI, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ContainsAI(0), false
	}
}

// XMLString returns the XML string representation of ContributorClaimStatus
func (e ContributorClaimStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseContributorClaimStatusString parses a string value to ContributorClaimStatus enum (case-insensitive)
func ParseContributorClaimStatusString(s string) (ContributorClaimStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ContributorClaimStatus(0), false
	}
}

// XMLString returns the XML string representation of ContributorRole
func (e ContributorRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseContributorRoleString parses a string value to ContributorRole enum (case-insensitive)
func ParseContributorRoleString(s string) (ContributorRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ContributorRole(0), false
	}
}

// XMLString returns the XML string representation of ContributorRoleRDR
func (e ContributorRoleRDR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseContributorRoleRDRString parses a string value to ContributorRoleRDR enum (case-insensitive)
func ParseContributorRoleRDRString(s string) (ContributorRoleRDR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ContributorRoleRDR(0), false
	}
}

// XMLString returns the XML string representation of CreationType
func (e CreationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCreationTypeString parses a string value to CreationType enum (case-insensitive)
func ParseCreationTypeString(s string) (CreationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CreationType(0), false
	}
}

// XMLString returns the XML string representation of CreativeMusicalWorkContributorRole
func (e CreativeMusicalWorkContributorRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCreativeMusicalWorkContributorRoleString parses a string value to CreativeMusicalWorkContributorRole enum (case-insensitive)
func ParseCreativeMusicalWorkContributorRoleString(s string) (CreativeMusicalWorkContributorRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CreativeMusicalWorkContributorRole(0), false
	}
}

// XMLString returns the XML string representation of CtProposedActionType
func (e CtProposedActionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCtProposedActionTypeString parses a string value to CtProposedActionType enum (case-insensitive)
func ParseCtProposedActionTypeString(s string) (CtProposedActionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CtProposedActionType(0), false
	}
}

// XMLString returns the XML string representation of CueOrigin
func (e CueOrigin) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCueOriginString parses a string value to CueOrigin enum (case-insensitive)
func ParseCueOriginString(s string) (CueOrigin, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CueOrigin(0), false
	}
}

// XMLString returns the XML string representation of CueSheetType
func (e CueSheetType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCueSheetTypeString parses a string value to CueSheetType enum (case-insensitive)
func ParseCueSheetTypeString(s string) (CueSheetType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CueSheetType(0), false
	}
}

// XMLString returns the XML string representation of CueUseType
func (e CueUseType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCueUseTypeString parses a string value to CueUseType enum (case-insensitive)
func ParseCueUseTypeString(s string) (CueUseType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CueUseType(0), false
	}
}

// XMLString returns the XML string representation of CueUseTypeMWDR
func (e CueUseTypeMWDR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCueUseTypeMWDRString parses a string value to CueUseTypeMWDR enum (case-insensitive)
func ParseCueUseTypeMWDRString(s string) (CueUseTypeMWDR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CueUseTypeMWDR(0), false
	}
}

// XMLString returns the XML string representation of CurrencyCode
func (e CurrencyCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCurrencyCodeString parses a string value to CurrencyCode enum (case-insensitive)
func ParseCurrencyCodeString(s string) (CurrencyCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CurrencyCode(0), false
	}
}

// XMLString returns the XML string representation of CurrentTerritoryCode
func (e CurrentTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseCurrentTerritoryCodeString parses a string value to CurrentTerritoryCode enum (case-insensitive)
func ParseCurrentTerritoryCodeString(s string) (CurrentTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return CurrentTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of DanceStyle
func (e DanceStyle) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDanceStyleString parses a string value to DanceStyle enum (case-insensitive)
func ParseDanceStyleString(s string) (DanceStyle, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DanceStyle(0), false
	}
}

// XMLString returns the XML string representation of DataCarrierFormat
func (e DataCarrierFormat) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDataCarrierFormatString parses a string value to DataCarrierFormat enum (case-insensitive)
func ParseDataCarrierFormatString(s string) (DataCarrierFormat, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DataCarrierFormat(0), false
	}
}

// XMLString returns the XML string representation of DataCarrierType
func (e DataCarrierType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDataCarrierTypeString parses a string value to DataCarrierType enum (case-insensitive)
func ParseDataCarrierTypeString(s string) (DataCarrierType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DataCarrierType(0), false
	}
}

// XMLString returns the XML string representation of DdexTerritoryCode
func (e DdexTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDdexTerritoryCodeString parses a string value to DdexTerritoryCode enum (case-insensitive)
func ParseDdexTerritoryCodeString(s string) (DdexTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DdexTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of DdexTerritoryCodeNoWorldwide
func (e DdexTerritoryCodeNoWorldwide) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDdexTerritoryCodeNoWorldwideString parses a string value to DdexTerritoryCodeNoWorldwide enum (case-insensitive)
func ParseDdexTerritoryCodeNoWorldwideString(s string) (DdexTerritoryCodeNoWorldwide, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DdexTerritoryCodeNoWorldwide(0), false
	}
}

// XMLString returns the XML string representation of DeliveryFileType
func (e DeliveryFileType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDeliveryFileTypeString parses a string value to DeliveryFileType enum (case-insensitive)
func ParseDeliveryFileTypeString(s string) (DeliveryFileType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DeliveryFileType(0), false
	}
}

// XMLString returns the XML string representation of DeprecatedCurrencyCode
func (e DeprecatedCurrencyCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDeprecatedCurrencyCodeString parses a string value to DeprecatedCurrencyCode enum (case-insensitive)
func ParseDeprecatedCurrencyCodeString(s string) (DeprecatedCurrencyCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DeprecatedCurrencyCode(0), false
	}
}

// XMLString returns the XML string representation of DeprecatedIsoTerritoryCode
func (e DeprecatedIsoTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDeprecatedIsoTerritoryCodeString parses a string value to DeprecatedIsoTerritoryCode enum (case-insensitive)
func ParseDeprecatedIsoTerritoryCodeString(s string) (DeprecatedIsoTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DeprecatedIsoTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of DeprecatedReleaseType
func (e DeprecatedReleaseType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDeprecatedReleaseTypeString parses a string value to DeprecatedReleaseType enum (case-insensitive)
func ParseDeprecatedReleaseTypeString(s string) (DeprecatedReleaseType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DeprecatedReleaseType(0), false
	}
}

// XMLString returns the XML string representation of DigitizationMode
func (e DigitizationMode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDigitizationModeString parses a string value to DigitizationMode enum (case-insensitive)
func ParseDigitizationModeString(s string) (DigitizationMode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DigitizationMode(0), false
	}
}

// XMLString returns the XML string representation of DiscrepancyType
func (e DiscrepancyType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDiscrepancyTypeString parses a string value to DiscrepancyType enum (case-insensitive)
func ParseDiscrepancyTypeString(s string) (DiscrepancyType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DiscrepancyType(0), false
	}
}

// XMLString returns the XML string representation of DisplayArtistRole
func (e DisplayArtistRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDisplayArtistRoleString parses a string value to DisplayArtistRole enum (case-insensitive)
func ParseDisplayArtistRoleString(s string) (DisplayArtistRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DisplayArtistRole(0), false
	}
}

// XMLString returns the XML string representation of DisplayArtistRoleRDR
func (e DisplayArtistRoleRDR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDisplayArtistRoleRDRString parses a string value to DisplayArtistRoleRDR enum (case-insensitive)
func ParseDisplayArtistRoleRDRString(s string) (DisplayArtistRoleRDR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DisplayArtistRoleRDR(0), false
	}
}

// XMLString returns the XML string representation of DistributionChannelType
func (e DistributionChannelType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDistributionChannelTypeString parses a string value to DistributionChannelType enum (case-insensitive)
func ParseDistributionChannelTypeString(s string) (DistributionChannelType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DistributionChannelType(0), false
	}
}

// XMLString returns the XML string representation of DistributionClass
func (e DistributionClass) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDistributionClassString parses a string value to DistributionClass enum (case-insensitive)
func ParseDistributionClassString(s string) (DistributionClass, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DistributionClass(0), false
	}
}

// XMLString returns the XML string representation of DocumentTypeLoD
func (e DocumentTypeLoD) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDocumentTypeLoDString parses a string value to DocumentTypeLoD enum (case-insensitive)
func ParseDocumentTypeLoDString(s string) (DocumentTypeLoD, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DocumentTypeLoD(0), false
	}
}

// XMLString returns the XML string representation of DocumentTypeMWL
func (e DocumentTypeMWL) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDocumentTypeMWLString parses a string value to DocumentTypeMWL enum (case-insensitive)
func ParseDocumentTypeMWLString(s string) (DocumentTypeMWL, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DocumentTypeMWL(0), false
	}
}

// XMLString returns the XML string representation of DpidStatus
func (e DpidStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDpidStatusString parses a string value to DpidStatus enum (case-insensitive)
func ParseDpidStatusString(s string) (DpidStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DpidStatus(0), false
	}
}

// XMLString returns the XML string representation of DrmEnforcementType
func (e DrmEnforcementType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseDrmEnforcementTypeString parses a string value to DrmEnforcementType enum (case-insensitive)
func ParseDrmEnforcementTypeString(s string) (DrmEnforcementType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return DrmEnforcementType(0), false
	}
}

// XMLString returns the XML string representation of EditionType
func (e EditionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseEditionTypeString parses a string value to EditionType enum (case-insensitive)
func ParseEditionTypeString(s string) (EditionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return EditionType(0), false
	}
}

// XMLString returns the XML string representation of ElectroOpticalTransferFunctionType
func (e ElectroOpticalTransferFunctionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseElectroOpticalTransferFunctionTypeString parses a string value to ElectroOpticalTransferFunctionType enum (case-insensitive)
func ParseElectroOpticalTransferFunctionTypeString(s string) (ElectroOpticalTransferFunctionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ElectroOpticalTransferFunctionType(0), false
	}
}

// XMLString returns the XML string representation of ElementConfiguration
func (e ElementConfiguration) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseElementConfigurationString parses a string value to ElementConfiguration enum (case-insensitive)
func ParseElementConfigurationString(s string) (ElementConfiguration, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ElementConfiguration(0), false
	}
}

// XMLString returns the XML string representation of ElementDesignation
func (e ElementDesignation) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseElementDesignationString parses a string value to ElementDesignation enum (case-insensitive)
func ParseElementDesignationString(s string) (ElementDesignation, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ElementDesignation(0), false
	}
}

// XMLString returns the XML string representation of EncodingType
func (e EncodingType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseEncodingTypeString parses a string value to EncodingType enum (case-insensitive)
func ParseEncodingTypeString(s string) (EncodingType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return EncodingType(0), false
	}
}

// XMLString returns the XML string representation of EquipmentManufacturer
func (e EquipmentManufacturer) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseEquipmentManufacturerString parses a string value to EquipmentManufacturer enum (case-insensitive)
func ParseEquipmentManufacturerString(s string) (EquipmentManufacturer, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return EquipmentManufacturer(0), false
	}
}

// XMLString returns the XML string representation of EquipmentModel
func (e EquipmentModel) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseEquipmentModelString parses a string value to EquipmentModel enum (case-insensitive)
func ParseEquipmentModelString(s string) (EquipmentModel, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return EquipmentModel(0), false
	}
}

// XMLString returns the XML string representation of EquipmentType
func (e EquipmentType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseEquipmentTypeString parses a string value to EquipmentType enum (case-insensitive)
func ParseEquipmentTypeString(s string) (EquipmentType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return EquipmentType(0), false
	}
}

// XMLString returns the XML string representation of ErnMessageType
func (e ErnMessageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseErnMessageTypeString parses a string value to ErnMessageType enum (case-insensitive)
func ParseErnMessageTypeString(s string) (ErnMessageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ErnMessageType(0), false
	}
}

// XMLString returns the XML string representation of ErnTestMessageType
func (e ErnTestMessageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseErnTestMessageTypeString parses a string value to ErnTestMessageType enum (case-insensitive)
func ParseErnTestMessageTypeString(s string) (ErnTestMessageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ErnTestMessageType(0), false
	}
}

// XMLString returns the XML string representation of ErncFileStatus
func (e ErncFileStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseErncFileStatusString parses a string value to ErncFileStatus enum (case-insensitive)
func ParseErncFileStatusString(s string) (ErncFileStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ErncFileStatus(0), false
	}
}

// XMLString returns the XML string representation of ErncProposedActionType
func (e ErncProposedActionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseErncProposedActionTypeString parses a string value to ErncProposedActionType enum (case-insensitive)
func ParseErncProposedActionTypeString(s string) (ErncProposedActionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ErncProposedActionType(0), false
	}
}

// XMLString returns the XML string representation of ErrorSeverity
func (e ErrorSeverity) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseErrorSeverityString parses a string value to ErrorSeverity enum (case-insensitive)
func ParseErrorSeverityString(s string) (ErrorSeverity, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ErrorSeverity(0), false
	}
}

// XMLString returns the XML string representation of ErrorType
func (e ErrorType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseErrorTypeString parses a string value to ErrorType enum (case-insensitive)
func ParseErrorTypeString(s string) (ErrorType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ErrorType(0), false
	}
}

// XMLString returns the XML string representation of EventType
func (e EventType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseEventTypeString parses a string value to EventType enum (case-insensitive)
func ParseEventTypeString(s string) (EventType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return EventType(0), false
	}
}

// XMLString returns the XML string representation of ExceptionReason
func (e ExceptionReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseExceptionReasonString parses a string value to ExceptionReason enum (case-insensitive)
func ParseExceptionReasonString(s string) (ExceptionReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ExceptionReason(0), false
	}
}

// XMLString returns the XML string representation of ExpressionType
func (e ExpressionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseExpressionTypeString parses a string value to ExpressionType enum (case-insensitive)
func ParseExpressionTypeString(s string) (ExpressionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ExpressionType(0), false
	}
}

// XMLString returns the XML string representation of ExternallyLinkedResourceType
func (e ExternallyLinkedResourceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseExternallyLinkedResourceTypeString parses a string value to ExternallyLinkedResourceType enum (case-insensitive)
func ParseExternallyLinkedResourceTypeString(s string) (ExternallyLinkedResourceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ExternallyLinkedResourceType(0), false
	}
}

// XMLString returns the XML string representation of FileType
func (e FileType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseFileTypeString parses a string value to FileType enum (case-insensitive)
func ParseFileTypeString(s string) (FileType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return FileType(0), false
	}
}

// XMLString returns the XML string representation of FingerprintAlgorithmType
func (e FingerprintAlgorithmType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseFingerprintAlgorithmTypeString parses a string value to FingerprintAlgorithmType enum (case-insensitive)
func ParseFingerprintAlgorithmTypeString(s string) (FingerprintAlgorithmType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return FingerprintAlgorithmType(0), false
	}
}

// XMLString returns the XML string representation of Form
func (e Form) XMLString() string {
	switch e {
	case Form_FORM_ADAGIO:
		return "ADAGIO"
	case Form_FORM_ALLEMANDE:
		return "ALLEMANDE"
	case Form_FORM_ARIA:
		return "ARIA"
	case Form_FORM_ARTSONG:
		return "ARTSONG"
	case Form_FORM_BAGATELLE:
		return "BAGATELLE"
	case Form_FORM_BALLAD:
		return "BALLAD"
	case Form_FORM_BALLADE:
		return "BALLADE"
	case Form_FORM_BALLATA:
		return "BALLATA"
	case Form_FORM_BARCAROLLE:
		return "BARCAROLLE"
	case Form_FORM_BOLERO:
		return "BOLERO"
	case Form_FORM_CANCAN:
		return "CANCAN"
	case Form_FORM_CANON:
		return "CANON"
	case Form_FORM_CANTATA:
		return "CANTATA"
	case Form_FORM_CANZONA:
		return "CANZONA"
	case Form_FORM_CAPRICE:
		return "CAPRICE"
	case Form_FORM_CAROL:
		return "CAROL"
	case Form_FORM_CAVATINA:
		return "CAVATINA"
	case Form_FORM_CHACONNE:
		return "CHACONNE"
	case Form_FORM_CHANSON:
		return "CHANSON"
	case Form_FORM_CONCERTO:
		return "CONCERTO"
	case Form_FORM_COURANTE:
		return "COURANTE"
	case Form_FORM_DANCE:
		return "DANCE"
	case Form_FORM_DIVERTIMENTO:
		return "DIVERTIMENTO"
	case Form_FORM_DUMKA:
		return "DUMKA"
	case Form_FORM_EIGHTBARBLUES:
		return "EIGHTBARBLUES"
	case Form_FORM_ESTAMPIE:
		return "ESTAMPIE"
	case Form_FORM_ETUDE:
		return "ETUDE"
	case Form_FORM_FANFARE:
		return "FANFARE"
	case Form_FORM_FANTASY:
		return "FANTASY"
	case Form_FORM_FUGUE:
		return "FUGUE"
	case Form_FORM_FURIANT:
		return "FURIANT"
	case Form_FORM_GALLIARD:
		return "GALLIARD"
	case Form_FORM_GIGUE:
		return "GIGUE"
	case Form_FORM_HYMN:
		return "HYMN"
	case Form_FORM_IMPROVISATION:
		return "IMPROVISATION"
	case Form_FORM_INTERLUDE:
		return "INTERLUDE"
	case Form_FORM_INTERMEZZO:
		return "INTERMEZZO"
	case Form_FORM_LAUDE:
		return "LAUDE"
	case Form_FORM_LIED:
		return "LIED"
	case Form_FORM_MADRIGAL:
		return "MADRIGAL"
	case Form_FORM_MARCH:
		return "MARCH"
	case Form_FORM_MASS:
		return "MASS"
	case Form_FORM_MAZURKA:
		return "MAZURKA"
	case Form_FORM_MINIMAL:
		return "MINIMAL"
	case Form_FORM_MELODIE:
		return "MELODIE"
	case Form_FORM_MINUET:
		return "MINUET"
	case Form_FORM_MOMENTFORM:
		return "MOMENTFORM"
	case Form_FORM_MOTET:
		return "MOTET"
	case Form_FORM_NOCTURNE:
		return "NOCTURNE"
	case Form_FORM_OVERTURE:
		return "OVERTURE"
	case Form_FORM_PARTITA:
		return "PARTITA"
	case Form_FORM_PASSACAGLIA:
		return "PASSACAGLIA"
	case Form_FORM_PAVANE:
		return "PAVANE"
	case Form_FORM_PERPETUUMMOBILE:
		return "PERPETUUMMOBILE"
	case Form_FORM_POLONAISE:
		return "POLONAISE"
	case Form_FORM_POWERBALLAD:
		return "POWERBALLAD"
	case Form_FORM_PRELUDE:
		return "PRELUDE"
	case Form_FORM_RAG:
		return "RAG"
	case Form_FORM_RAGA:
		return "RAGA"
	case Form_FORM_RHAPSODY:
		return "RHAPSODY"
	case Form_FORM_RHYTHMCHANGES:
		return "RHYTHMCHANGES"
	case Form_FORM_RICERCAR:
		return "RICERCAR"
	case Form_FORM_RONDO:
		return "RONDO"
	case Form_FORM_SALTARELLO:
		return "SALTARELLO"
	case Form_FORM_SARABANDE:
		return "SARABANDE"
	case Form_FORM_SCHERZO:
		return "SCHERZO"
	case Form_FORM_SEQUENCE:
		return "SEQUENCE"
	case Form_FORM_SERENADE:
		return "SERENADE"
	case Form_FORM_SINFONIACONCERTANTE:
		return "SINFONIACONCERTANTE"
	case Form_FORM_SONATA:
		return "SONATA"
	case Form_FORM_SONATINA:
		return "SONATINA"
	case Form_FORM_SUITE:
		return "SUITE"
	case Form_FORM_SYMPHONICPOEM:
		return "SYMPHONICPOEM"
	case Form_FORM_SYMPHONY:
		return "SYMPHONY"
	case Form_FORM_TARANTELLA:
		return "TARANTELLA"
	case Form_FORM_TIENTO:
		return "TIENTO"
	case Form_FORM_TOCCATA:
		return "TOCCATA"
	case Form_FORM_TWELVEBARBLUES:
		return "TWELVEBARBLUES"
	case Form_FORM_USERDEFINED:
		return "USERDEFINED"
	case Form_FORM_VARIATION:
		return "VARIATION"
	case Form_FORM_VERSEONLY:
		return "VERSEONLY"
	case Form_FORM_VOCALISE:
		return "VOCALISE"
	case Form_FORM_WALTZ:
		return "WALTZ"
	default:
		return ""
	}
}

// ParseFormString parses a string value to Form enum (case-insensitive)
func ParseFormString(s string) (Form, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "ADAGIO":
		return Form_FORM_ADAGIO, true
	case "ALLEMANDE":
		return Form_FORM_ALLEMANDE, true
	case "ARIA":
		return Form_FORM_ARIA, true
	case "ARTSONG":
		return Form_FORM_ARTSONG, true
	case "BAGATELLE":
		return Form_FORM_BAGATELLE, true
	case "BALLAD":
		return Form_FORM_BALLAD, true
	case "BALLADE":
		return Form_FORM_BALLADE, true
	case "BALLATA":
		return Form_FORM_BALLATA, true
	case "BARCAROLLE":
		return Form_FORM_BARCAROLLE, true
	case "BOLERO":
		return Form_FORM_BOLERO, true
	case "CANCAN":
		return Form_FORM_CANCAN, true
	case "CANON":
		return Form_FORM_CANON, true
	case "CANTATA":
		return Form_FORM_CANTATA, true
	case "CANZONA":
		return Form_FORM_CANZONA, true
	case "CAPRICE":
		return Form_FORM_CAPRICE, true
	case "CAROL":
		return Form_FORM_CAROL, true
	case "CAVATINA":
		return Form_FORM_CAVATINA, true
	case "CHACONNE":
		return Form_FORM_CHACONNE, true
	case "CHANSON":
		return Form_FORM_CHANSON, true
	case "CONCERTO":
		return Form_FORM_CONCERTO, true
	case "COURANTE":
		return Form_FORM_COURANTE, true
	case "DANCE":
		return Form_FORM_DANCE, true
	case "DIVERTIMENTO":
		return Form_FORM_DIVERTIMENTO, true
	case "DUMKA":
		return Form_FORM_DUMKA, true
	case "EIGHTBARBLUES":
		return Form_FORM_EIGHTBARBLUES, true
	case "ESTAMPIE":
		return Form_FORM_ESTAMPIE, true
	case "ETUDE":
		return Form_FORM_ETUDE, true
	case "FANFARE":
		return Form_FORM_FANFARE, true
	case "FANTASY":
		return Form_FORM_FANTASY, true
	case "FUGUE":
		return Form_FORM_FUGUE, true
	case "FURIANT":
		return Form_FORM_FURIANT, true
	case "GALLIARD":
		return Form_FORM_GALLIARD, true
	case "GIGUE":
		return Form_FORM_GIGUE, true
	case "HYMN":
		return Form_FORM_HYMN, true
	case "IMPROVISATION":
		return Form_FORM_IMPROVISATION, true
	case "INTERLUDE":
		return Form_FORM_INTERLUDE, true
	case "INTERMEZZO":
		return Form_FORM_INTERMEZZO, true
	case "LAUDE":
		return Form_FORM_LAUDE, true
	case "LIED":
		return Form_FORM_LIED, true
	case "MADRIGAL":
		return Form_FORM_MADRIGAL, true
	case "MARCH":
		return Form_FORM_MARCH, true
	case "MASS":
		return Form_FORM_MASS, true
	case "MAZURKA":
		return Form_FORM_MAZURKA, true
	case "MINIMAL":
		return Form_FORM_MINIMAL, true
	case "MELODIE":
		return Form_FORM_MELODIE, true
	case "MINUET":
		return Form_FORM_MINUET, true
	case "MOMENTFORM":
		return Form_FORM_MOMENTFORM, true
	case "MOTET":
		return Form_FORM_MOTET, true
	case "NOCTURNE":
		return Form_FORM_NOCTURNE, true
	case "OVERTURE":
		return Form_FORM_OVERTURE, true
	case "PARTITA":
		return Form_FORM_PARTITA, true
	case "PASSACAGLIA":
		return Form_FORM_PASSACAGLIA, true
	case "PAVANE":
		return Form_FORM_PAVANE, true
	case "PERPETUUMMOBILE":
		return Form_FORM_PERPETUUMMOBILE, true
	case "POLONAISE":
		return Form_FORM_POLONAISE, true
	case "POWERBALLAD":
		return Form_FORM_POWERBALLAD, true
	case "PRELUDE":
		return Form_FORM_PRELUDE, true
	case "RAG":
		return Form_FORM_RAG, true
	case "RAGA":
		return Form_FORM_RAGA, true
	case "RHAPSODY":
		return Form_FORM_RHAPSODY, true
	case "RHYTHMCHANGES":
		return Form_FORM_RHYTHMCHANGES, true
	case "RICERCAR":
		return Form_FORM_RICERCAR, true
	case "RONDO":
		return Form_FORM_RONDO, true
	case "SALTARELLO":
		return Form_FORM_SALTARELLO, true
	case "SARABANDE":
		return Form_FORM_SARABANDE, true
	case "SCHERZO":
		return Form_FORM_SCHERZO, true
	case "SEQUENCE":
		return Form_FORM_SEQUENCE, true
	case "SERENADE":
		return Form_FORM_SERENADE, true
	case "SINFONIACONCERTANTE":
		return Form_FORM_SINFONIACONCERTANTE, true
	case "SONATA":
		return Form_FORM_SONATA, true
	case "SONATINA":
		return Form_FORM_SONATINA, true
	case "SUITE":
		return Form_FORM_SUITE, true
	case "SYMPHONICPOEM":
		return Form_FORM_SYMPHONICPOEM, true
	case "SYMPHONY":
		return Form_FORM_SYMPHONY, true
	case "TARANTELLA":
		return Form_FORM_TARANTELLA, true
	case "TIENTO":
		return Form_FORM_TIENTO, true
	case "TOCCATA":
		return Form_FORM_TOCCATA, true
	case "TWELVEBARBLUES":
		return Form_FORM_TWELVEBARBLUES, true
	case "USERDEFINED":
		return Form_FORM_USERDEFINED, true
	case "VARIATION":
		return Form_FORM_VARIATION, true
	case "VERSEONLY":
		return Form_FORM_VERSEONLY, true
	case "VOCALISE":
		return Form_FORM_VOCALISE, true
	case "WALTZ":
		return Form_FORM_WALTZ, true
	default:
		return Form(0), false
	}
}

// XMLString returns the XML string representation of FrameRate
func (e FrameRate) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseFrameRateString parses a string value to FrameRate enum (case-insensitive)
func ParseFrameRateString(s string) (FrameRate, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return FrameRate(0), false
	}
}

// XMLString returns the XML string representation of Gender
func (e Gender) XMLString() string {
	switch e {
	case Gender_GENDER_ANDROGYNOUS:
		return "ANDROGYNOUS"
	case Gender_GENDER_FEMININE:
		return "FEMININE"
	case Gender_GENDER_MASCULINE:
		return "MASCULINE"
	case Gender_GENDER_UNKNOWN:
		return "UNKNOWN"
	default:
		return ""
	}
}

// ParseGenderString parses a string value to Gender enum (case-insensitive)
func ParseGenderString(s string) (Gender, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "ANDROGYNOUS":
		return Gender_GENDER_ANDROGYNOUS, true
	case "FEMININE":
		return Gender_GENDER_FEMININE, true
	case "MASCULINE":
		return Gender_GENDER_MASCULINE, true
	case "UNKNOWN":
		return Gender_GENDER_UNKNOWN, true
	default:
		return Gender(0), false
	}
}

// XMLString returns the XML string representation of GenderPIE
func (e GenderPIE) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseGenderPIEString parses a string value to GenderPIE enum (case-insensitive)
func ParseGenderPIEString(s string) (GenderPIE, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return GenderPIE(0), false
	}
}

// XMLString returns the XML string representation of GoverningAgreementType
func (e GoverningAgreementType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseGoverningAgreementTypeString parses a string value to GoverningAgreementType enum (case-insensitive)
func ParseGoverningAgreementTypeString(s string) (GoverningAgreementType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return GoverningAgreementType(0), false
	}
}

// XMLString returns the XML string representation of HashSumAlgorithmType
func (e HashSumAlgorithmType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseHashSumAlgorithmTypeString parses a string value to HashSumAlgorithmType enum (case-insensitive)
func ParseHashSumAlgorithmTypeString(s string) (HashSumAlgorithmType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return HashSumAlgorithmType(0), false
	}
}

// XMLString returns the XML string representation of HdrVideoDynamicMetadataType
func (e HdrVideoDynamicMetadataType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseHdrVideoDynamicMetadataTypeString parses a string value to HdrVideoDynamicMetadataType enum (case-insensitive)
func ParseHdrVideoDynamicMetadataTypeString(s string) (HdrVideoDynamicMetadataType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return HdrVideoDynamicMetadataType(0), false
	}
}

// XMLString returns the XML string representation of HdrVideoStaticMetadataType
func (e HdrVideoStaticMetadataType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseHdrVideoStaticMetadataTypeString parses a string value to HdrVideoStaticMetadataType enum (case-insensitive)
func ParseHdrVideoStaticMetadataTypeString(s string) (HdrVideoStaticMetadataType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return HdrVideoStaticMetadataType(0), false
	}
}

// XMLString returns the XML string representation of ImageCodecType
func (e ImageCodecType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseImageCodecTypeString parses a string value to ImageCodecType enum (case-insensitive)
func ParseImageCodecTypeString(s string) (ImageCodecType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ImageCodecType(0), false
	}
}

// XMLString returns the XML string representation of ImageType
func (e ImageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseImageTypeString parses a string value to ImageType enum (case-insensitive)
func ParseImageTypeString(s string) (ImageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ImageType(0), false
	}
}

// XMLString returns the XML string representation of InstrumentManufacturer
func (e InstrumentManufacturer) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseInstrumentManufacturerString parses a string value to InstrumentManufacturer enum (case-insensitive)
func ParseInstrumentManufacturerString(s string) (InstrumentManufacturer, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return InstrumentManufacturer(0), false
	}
}

// XMLString returns the XML string representation of InstrumentModel
func (e InstrumentModel) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseInstrumentModelString parses a string value to InstrumentModel enum (case-insensitive)
func ParseInstrumentModelString(s string) (InstrumentModel, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return InstrumentModel(0), false
	}
}

// XMLString returns the XML string representation of InstrumentType
func (e InstrumentType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseInstrumentTypeString parses a string value to InstrumentType enum (case-insensitive)
func ParseInstrumentTypeString(s string) (InstrumentType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return InstrumentType(0), false
	}
}

// XMLString returns the XML string representation of Intensity
func (e Intensity) XMLString() string {
	switch e {
	case Intensity_INTENSITY_HIGH:
		return "HIGH"
	case Intensity_INTENSITY_LOW:
		return "LOW"
	case Intensity_INTENSITY_MEDIUM:
		return "MEDIUM"
	case Intensity_INTENSITY_USERDEFINED:
		return "USERDEFINED"
	default:
		return ""
	}
}

// ParseIntensityString parses a string value to Intensity enum (case-insensitive)
func ParseIntensityString(s string) (Intensity, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "HIGH":
		return Intensity_INTENSITY_HIGH, true
	case "LOW":
		return Intensity_INTENSITY_LOW, true
	case "MEDIUM":
		return Intensity_INTENSITY_MEDIUM, true
	case "USERDEFINED":
		return Intensity_INTENSITY_USERDEFINED, true
	default:
		return Intensity(0), false
	}
}

// XMLString returns the XML string representation of Iso31661TerritoryCode
func (e Iso31661TerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseIso31661TerritoryCodeString parses a string value to Iso31661TerritoryCode enum (case-insensitive)
func ParseIso31661TerritoryCodeString(s string) (Iso31661TerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return Iso31661TerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of Iso639Part12LanguageCode
func (e Iso639Part12LanguageCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseIso639Part12LanguageCodeString parses a string value to Iso639Part12LanguageCode enum (case-insensitive)
func ParseIso639Part12LanguageCodeString(s string) (Iso639Part12LanguageCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return Iso639Part12LanguageCode(0), false
	}
}

// XMLString returns the XML string representation of Iso639Part3LanguageCode
func (e Iso639Part3LanguageCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseIso639Part3LanguageCodeString parses a string value to Iso639Part3LanguageCode enum (case-insensitive)
func ParseIso639Part3LanguageCodeString(s string) (Iso639Part3LanguageCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return Iso639Part3LanguageCode(0), false
	}
}

// XMLString returns the XML string representation of IsoCurrencyCode
func (e IsoCurrencyCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseIsoCurrencyCodeString parses a string value to IsoCurrencyCode enum (case-insensitive)
func ParseIsoCurrencyCodeString(s string) (IsoCurrencyCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return IsoCurrencyCode(0), false
	}
}

// XMLString returns the XML string representation of IsoLanguageCode
func (e IsoLanguageCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseIsoLanguageCodeString parses a string value to IsoLanguageCode enum (case-insensitive)
func ParseIsoLanguageCodeString(s string) (IsoLanguageCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return IsoLanguageCode(0), false
	}
}

// XMLString returns the XML string representation of IsoTerritoryCode
func (e IsoTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseIsoTerritoryCodeString parses a string value to IsoTerritoryCode enum (case-insensitive)
func ParseIsoTerritoryCodeString(s string) (IsoTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return IsoTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of IswcStatus
func (e IswcStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseIswcStatusString parses a string value to IswcStatus enum (case-insensitive)
func ParseIswcStatusString(s string) (IswcStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return IswcStatus(0), false
	}
}

// XMLString returns the XML string representation of LabelNameType
func (e LabelNameType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLabelNameTypeString parses a string value to LabelNameType enum (case-insensitive)
func ParseLabelNameTypeString(s string) (LabelNameType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LabelNameType(0), false
	}
}

// XMLString returns the XML string representation of LabelType
func (e LabelType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLabelTypeString parses a string value to LabelType enum (case-insensitive)
func ParseLabelTypeString(s string) (LabelType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LabelType(0), false
	}
}

// XMLString returns the XML string representation of LanguageLocalizationType
func (e LanguageLocalizationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLanguageLocalizationTypeString parses a string value to LanguageLocalizationType enum (case-insensitive)
func ParseLanguageLocalizationTypeString(s string) (LanguageLocalizationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LanguageLocalizationType(0), false
	}
}

// XMLString returns the XML string representation of LicenseRecord
func (e LicenseRecord) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLicenseRecordString parses a string value to LicenseRecord enum (case-insensitive)
func ParseLicenseRecordString(s string) (LicenseRecord, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LicenseRecord(0), false
	}
}

// XMLString returns the XML string representation of LicenseRefusalReason
func (e LicenseRefusalReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLicenseRefusalReasonString parses a string value to LicenseRefusalReason enum (case-insensitive)
func ParseLicenseRefusalReasonString(s string) (LicenseRefusalReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LicenseRefusalReason(0), false
	}
}

// XMLString returns the XML string representation of LicenseRejectionReason
func (e LicenseRejectionReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLicenseRejectionReasonString parses a string value to LicenseRejectionReason enum (case-insensitive)
func ParseLicenseRejectionReasonString(s string) (LicenseRejectionReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LicenseRejectionReason(0), false
	}
}

// XMLString returns the XML string representation of LinkAcknowledgementStatus
func (e LinkAcknowledgementStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLinkAcknowledgementStatusString parses a string value to LinkAcknowledgementStatus enum (case-insensitive)
func ParseLinkAcknowledgementStatusString(s string) (LinkAcknowledgementStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LinkAcknowledgementStatus(0), false
	}
}

// XMLString returns the XML string representation of LinkDescription
func (e LinkDescription) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLinkDescriptionString parses a string value to LinkDescription enum (case-insensitive)
func ParseLinkDescriptionString(s string) (LinkDescription, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LinkDescription(0), false
	}
}

// XMLString returns the XML string representation of LyricsType
func (e LyricsType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseLyricsTypeString parses a string value to LyricsType enum (case-insensitive)
func ParseLyricsTypeString(s string) (LyricsType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return LyricsType(0), false
	}
}

// XMLString returns the XML string representation of MeasurementType
func (e MeasurementType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMeasurementTypeString parses a string value to MeasurementType enum (case-insensitive)
func ParseMeasurementTypeString(s string) (MeasurementType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MeasurementType(0), false
	}
}

// XMLString returns the XML string representation of MembershipType
func (e MembershipType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMembershipTypeString parses a string value to MembershipType enum (case-insensitive)
func ParseMembershipTypeString(s string) (MembershipType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MembershipType(0), false
	}
}

// XMLString returns the XML string representation of MessageActionType
func (e MessageActionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMessageActionTypeString parses a string value to MessageActionType enum (case-insensitive)
func ParseMessageActionTypeString(s string) (MessageActionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MessageActionType(0), false
	}
}

// XMLString returns the XML string representation of MessageControlType
func (e MessageControlType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMessageControlTypeString parses a string value to MessageControlType enum (case-insensitive)
func ParseMessageControlTypeString(s string) (MessageControlType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MessageControlType(0), false
	}
}

// XMLString returns the XML string representation of MessagePurpose
func (e MessagePurpose) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMessagePurposeString parses a string value to MessagePurpose enum (case-insensitive)
func ParseMessagePurposeString(s string) (MessagePurpose, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MessagePurpose(0), false
	}
}

// XMLString returns the XML string representation of MessageType
func (e MessageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMessageTypeString parses a string value to MessageType enum (case-insensitive)
func ParseMessageTypeString(s string) (MessageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MessageType(0), false
	}
}

// XMLString returns the XML string representation of MetadataSourceType
func (e MetadataSourceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMetadataSourceTypeString parses a string value to MetadataSourceType enum (case-insensitive)
func ParseMetadataSourceTypeString(s string) (MetadataSourceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MetadataSourceType(0), false
	}
}

// XMLString returns the XML string representation of MissingLinkReason
func (e MissingLinkReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMissingLinkReasonString parses a string value to MissingLinkReason enum (case-insensitive)
func ParseMissingLinkReasonString(s string) (MissingLinkReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MissingLinkReason(0), false
	}
}

// XMLString returns the XML string representation of Mode
func (e Mode) XMLString() string {
	switch e {
	case Mode_MODE_USERDEFINED:
		return "USERDEFINED"
	default:
		return ""
	}
}

// ParseModeString parses a string value to Mode enum (case-insensitive)
func ParseModeString(s string) (Mode, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "USERDEFINED":
		return Mode_MODE_USERDEFINED, true
	default:
		return Mode(0), false
	}
}

// XMLString returns the XML string representation of Mood
func (e Mood) XMLString() string {
	switch e {
	case Mood_MOOD_ANGRY:
		return "ANGRY"
	case Mood_MOOD_ANTICIPATION:
		return "ANTICIPATION"
	case Mood_MOOD_CHILL:
		return "CHILL"
	case Mood_MOOD_CONFIDENT:
		return "CONFIDENT"
	case Mood_MOOD_DARK:
		return "DARK"
	case Mood_MOOD_DISGUST:
		return "DISGUST"
	case Mood_MOOD_DRAMATIC:
		return "DRAMATIC"
	case Mood_MOOD_EMPOWERED:
		return "EMPOWERED"
	case Mood_MOOD_ENERGIZED:
		return "ENERGIZED"
	case Mood_MOOD_EVIL:
		return "EVIL"
	case Mood_MOOD_FEELINGDOWN:
		return "FEELINGDOWN"
	case Mood_MOOD_FEELINGGOOD:
		return "FEELINGGOOD"
	case Mood_MOOD_FREE:
		return "FREE"
	case Mood_MOOD_HAPPY:
		return "HAPPY"
	case Mood_MOOD_HUNGOVER:
		return "HUNGOVER"
	case Mood_MOOD_INSPIRING:
		return "INSPIRING"
	case Mood_MOOD_LOWKEY:
		return "LOWKEY"
	case Mood_MOOD_MELLOW:
		return "MELLOW"
	case Mood_MOOD_MOTIVATED:
		return "MOTIVATED"
	case Mood_MOOD_PEACEFUL:
		return "PEACEFUL"
	case Mood_MOOD_QUIET:
		return "QUIET"
	case Mood_MOOD_RAINYDAY:
		return "RAINYDAY"
	case Mood_MOOD_ROMANTIC:
		return "ROMANTIC"
	case Mood_MOOD_SAD:
		return "SAD"
	case Mood_MOOD_SOULFUL:
		return "SOULFUL"
	case Mood_MOOD_SURPRISE:
		return "SURPRISE"
	case Mood_MOOD_SWAGGER:
		return "SWAGGER"
	case Mood_MOOD_USERDEFINED:
		return "USERDEFINED"
	default:
		return ""
	}
}

// ParseMoodString parses a string value to Mood enum (case-insensitive)
func ParseMoodString(s string) (Mood, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "ANGRY":
		return Mood_MOOD_ANGRY, true
	case "ANTICIPATION":
		return Mood_MOOD_ANTICIPATION, true
	case "CHILL":
		return Mood_MOOD_CHILL, true
	case "CONFIDENT":
		return Mood_MOOD_CONFIDENT, true
	case "DARK":
		return Mood_MOOD_DARK, true
	case "DISGUST":
		return Mood_MOOD_DISGUST, true
	case "DRAMATIC":
		return Mood_MOOD_DRAMATIC, true
	case "EMPOWERED":
		return Mood_MOOD_EMPOWERED, true
	case "ENERGIZED":
		return Mood_MOOD_ENERGIZED, true
	case "EVIL":
		return Mood_MOOD_EVIL, true
	case "FEELINGDOWN":
		return Mood_MOOD_FEELINGDOWN, true
	case "FEELINGGOOD":
		return Mood_MOOD_FEELINGGOOD, true
	case "FREE":
		return Mood_MOOD_FREE, true
	case "HAPPY":
		return Mood_MOOD_HAPPY, true
	case "HUNGOVER":
		return Mood_MOOD_HUNGOVER, true
	case "INSPIRING":
		return Mood_MOOD_INSPIRING, true
	case "LOWKEY":
		return Mood_MOOD_LOWKEY, true
	case "MELLOW":
		return Mood_MOOD_MELLOW, true
	case "MOTIVATED":
		return Mood_MOOD_MOTIVATED, true
	case "PEACEFUL":
		return Mood_MOOD_PEACEFUL, true
	case "QUIET":
		return Mood_MOOD_QUIET, true
	case "RAINYDAY":
		return Mood_MOOD_RAINYDAY, true
	case "ROMANTIC":
		return Mood_MOOD_ROMANTIC, true
	case "SAD":
		return Mood_MOOD_SAD, true
	case "SOULFUL":
		return Mood_MOOD_SOULFUL, true
	case "SURPRISE":
		return Mood_MOOD_SURPRISE, true
	case "SWAGGER":
		return Mood_MOOD_SWAGGER, true
	case "USERDEFINED":
		return Mood_MOOD_USERDEFINED, true
	default:
		return Mood(0), false
	}
}

// XMLString returns the XML string representation of MoodOrThemeType
func (e MoodOrThemeType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMoodOrThemeTypeString parses a string value to MoodOrThemeType enum (case-insensitive)
func ParseMoodOrThemeTypeString(s string) (MoodOrThemeType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MoodOrThemeType(0), false
	}
}

// XMLString returns the XML string representation of MusicalWorkContributorRole
func (e MusicalWorkContributorRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMusicalWorkContributorRoleString parses a string value to MusicalWorkContributorRole enum (case-insensitive)
func ParseMusicalWorkContributorRoleString(s string) (MusicalWorkContributorRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MusicalWorkContributorRole(0), false
	}
}

// XMLString returns the XML string representation of MusicalWorkType
func (e MusicalWorkType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMusicalWorkTypeString parses a string value to MusicalWorkType enum (case-insensitive)
func ParseMusicalWorkTypeString(s string) (MusicalWorkType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MusicalWorkType(0), false
	}
}

// XMLString returns the XML string representation of MwnlFileStatus
func (e MwnlFileStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMwnlFileStatusString parses a string value to MwnlFileStatus enum (case-insensitive)
func ParseMwnlFileStatusString(s string) (MwnlFileStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MwnlFileStatus(0), false
	}
}

// XMLString returns the XML string representation of MwnlProposedActionType
func (e MwnlProposedActionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseMwnlProposedActionTypeString parses a string value to MwnlProposedActionType enum (case-insensitive)
func ParseMwnlProposedActionTypeString(s string) (MwnlProposedActionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return MwnlProposedActionType(0), false
	}
}

// XMLString returns the XML string representation of NewStudioRole
func (e NewStudioRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseNewStudioRoleString parses a string value to NewStudioRole enum (case-insensitive)
func ParseNewStudioRoleString(s string) (NewStudioRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return NewStudioRole(0), false
	}
}

// XMLString returns the XML string representation of NftConfirmationStatus
func (e NftConfirmationStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseNftConfirmationStatusString parses a string value to NftConfirmationStatus enum (case-insensitive)
func ParseNftConfirmationStatusString(s string) (NftConfirmationStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return NftConfirmationStatus(0), false
	}
}

// XMLString returns the XML string representation of OperatingSystemType
func (e OperatingSystemType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseOperatingSystemTypeString parses a string value to OperatingSystemType enum (case-insensitive)
func ParseOperatingSystemTypeString(s string) (OperatingSystemType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return OperatingSystemType(0), false
	}
}

// XMLString returns the XML string representation of OriginalPurpose
func (e OriginalPurpose) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseOriginalPurposeString parses a string value to OriginalPurpose enum (case-insensitive)
func ParseOriginalPurposeString(s string) (OriginalPurpose, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return OriginalPurpose(0), false
	}
}

// XMLString returns the XML string representation of PLineType
func (e PLineType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePLineTypeString parses a string value to PLineType enum (case-insensitive)
func ParsePLineTypeString(s string) (PLineType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PLineType(0), false
	}
}

// XMLString returns the XML string representation of ParentalWarningStandard
func (e ParentalWarningStandard) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseParentalWarningStandardString parses a string value to ParentalWarningStandard enum (case-insensitive)
func ParseParentalWarningStandardString(s string) (ParentalWarningStandard, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ParentalWarningStandard(0), false
	}
}

// XMLString returns the XML string representation of ParentalWarningType
func (e ParentalWarningType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseParentalWarningTypeString parses a string value to ParentalWarningType enum (case-insensitive)
func ParseParentalWarningTypeString(s string) (ParentalWarningType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ParentalWarningType(0), false
	}
}

// XMLString returns the XML string representation of PartyNameFormat
func (e PartyNameFormat) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePartyNameFormatString parses a string value to PartyNameFormat enum (case-insensitive)
func ParsePartyNameFormatString(s string) (PartyNameFormat, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PartyNameFormat(0), false
	}
}

// XMLString returns the XML string representation of PartyNamePurpose
func (e PartyNamePurpose) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePartyNamePurposeString parses a string value to PartyNamePurpose enum (case-insensitive)
func ParsePartyNamePurposeString(s string) (PartyNamePurpose, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PartyNamePurpose(0), false
	}
}

// XMLString returns the XML string representation of PartyNameType
func (e PartyNameType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePartyNameTypeString parses a string value to PartyNameType enum (case-insensitive)
func ParsePartyNameTypeString(s string) (PartyNameType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PartyNameType(0), false
	}
}

// XMLString returns the XML string representation of PartyRelationshipType
func (e PartyRelationshipType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePartyRelationshipTypeString parses a string value to PartyRelationshipType enum (case-insensitive)
func ParsePartyRelationshipTypeString(s string) (PartyRelationshipType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PartyRelationshipType(0), false
	}
}

// XMLString returns the XML string representation of PartyRelationshipTypePIE
func (e PartyRelationshipTypePIE) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePartyRelationshipTypePIEString parses a string value to PartyRelationshipTypePIE enum (case-insensitive)
func ParsePartyRelationshipTypePIEString(s string) (PartyRelationshipTypePIE, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PartyRelationshipTypePIE(0), false
	}
}

// XMLString returns the XML string representation of PartyRole
func (e PartyRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePartyRoleString parses a string value to PartyRole enum (case-insensitive)
func ParsePartyRoleString(s string) (PartyRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PartyRole(0), false
	}
}

// XMLString returns the XML string representation of PartyType
func (e PartyType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePartyTypeString parses a string value to PartyType enum (case-insensitive)
func ParsePartyTypeString(s string) (PartyType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PartyType(0), false
	}
}

// XMLString returns the XML string representation of PendingReason
func (e PendingReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePendingReasonString parses a string value to PendingReason enum (case-insensitive)
func ParsePendingReasonString(s string) (PendingReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PendingReason(0), false
	}
}

// XMLString returns the XML string representation of PercentageType
func (e PercentageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePercentageTypeString parses a string value to PercentageType enum (case-insensitive)
func ParsePercentageTypeString(s string) (PercentageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PercentageType(0), false
	}
}

// XMLString returns the XML string representation of Period
func (e Period) XMLString() string {
	switch e {
	case Period_PERIOD_ANCIENTMUSIC:
		return "ANCIENTMUSIC"
	case Period_PERIOD_ARSANTIQUA:
		return "ARSANTIQUA"
	case Period_PERIOD_ARSNOVA:
		return "ARSNOVA"
	case Period_PERIOD_ARSSUBTILIOR:
		return "ARSSUBTILIOR"
	case Period_PERIOD_BAROQUE:
		return "BAROQUE"
	case Period_PERIOD_CLASSICAL:
		return "CLASSICAL"
	case Period_PERIOD_CONTEMPORARY:
		return "CONTEMPORARY"
	case Period_PERIOD_EARLYROMANTIC:
		return "EARLYROMANTIC"
	case Period_PERIOD_EXPERIMENTAL:
		return "EXPERIMENTAL"
	case Period_PERIOD_GALANTMUSIC:
		return "GALANTMUSIC"
	case Period_PERIOD_HIGHMODERN:
		return "HIGHMODERN"
	case Period_PERIOD_IMPRESSIONISM:
		return "IMPRESSIONISM"
	case Period_PERIOD_LATEROMANTIC:
		return "LATEROMANTIC"
	case Period_PERIOD_MEDIEVAL:
		return "MEDIEVAL"
	case Period_PERIOD_MODERN:
		return "MODERN"
	case Period_PERIOD_NEOCLASSICISM:
		return "NEOCLASSICISM"
	case Period_PERIOD_POSTMODERN:
		return "POSTMODERN"
	case Period_PERIOD_RENAISSANCE:
		return "RENAISSANCE"
	case Period_PERIOD_USERDEFINED:
		return "USERDEFINED"
	default:
		return ""
	}
}

// ParsePeriodString parses a string value to Period enum (case-insensitive)
func ParsePeriodString(s string) (Period, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "ANCIENTMUSIC":
		return Period_PERIOD_ANCIENTMUSIC, true
	case "ARSANTIQUA":
		return Period_PERIOD_ARSANTIQUA, true
	case "ARSNOVA":
		return Period_PERIOD_ARSNOVA, true
	case "ARSSUBTILIOR":
		return Period_PERIOD_ARSSUBTILIOR, true
	case "BAROQUE":
		return Period_PERIOD_BAROQUE, true
	case "CLASSICAL":
		return Period_PERIOD_CLASSICAL, true
	case "CONTEMPORARY":
		return Period_PERIOD_CONTEMPORARY, true
	case "EARLYROMANTIC":
		return Period_PERIOD_EARLYROMANTIC, true
	case "EXPERIMENTAL":
		return Period_PERIOD_EXPERIMENTAL, true
	case "GALANTMUSIC":
		return Period_PERIOD_GALANTMUSIC, true
	case "HIGHMODERN":
		return Period_PERIOD_HIGHMODERN, true
	case "IMPRESSIONISM":
		return Period_PERIOD_IMPRESSIONISM, true
	case "LATEROMANTIC":
		return Period_PERIOD_LATEROMANTIC, true
	case "MEDIEVAL":
		return Period_PERIOD_MEDIEVAL, true
	case "MODERN":
		return Period_PERIOD_MODERN, true
	case "NEOCLASSICISM":
		return Period_PERIOD_NEOCLASSICISM, true
	case "POSTMODERN":
		return Period_PERIOD_POSTMODERN, true
	case "RENAISSANCE":
		return Period_PERIOD_RENAISSANCE, true
	case "USERDEFINED":
		return Period_PERIOD_USERDEFINED, true
	default:
		return Period(0), false
	}
}

// XMLString returns the XML string representation of PhysicalCarrierType
func (e PhysicalCarrierType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePhysicalCarrierTypeString parses a string value to PhysicalCarrierType enum (case-insensitive)
func ParsePhysicalCarrierTypeString(s string) (PhysicalCarrierType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PhysicalCarrierType(0), false
	}
}

// XMLString returns the XML string representation of PriceInformationType
func (e PriceInformationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePriceInformationTypeString parses a string value to PriceInformationType enum (case-insensitive)
func ParsePriceInformationTypeString(s string) (PriceInformationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PriceInformationType(0), false
	}
}

// XMLString returns the XML string representation of PrimaryColorType
func (e PrimaryColorType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParsePrimaryColorTypeString parses a string value to PrimaryColorType enum (case-insensitive)
func ParsePrimaryColorTypeString(s string) (PrimaryColorType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return PrimaryColorType(0), false
	}
}

// XMLString returns the XML string representation of ProductType
func (e ProductType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseProductTypeString parses a string value to ProductType enum (case-insensitive)
func ParseProductTypeString(s string) (ProductType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ProductType(0), false
	}
}

// XMLString returns the XML string representation of ProfileId
func (e ProfileId) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseProfileIdString parses a string value to ProfileId enum (case-insensitive)
func ParseProfileIdString(s string) (ProfileId, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ProfileId(0), false
	}
}

// XMLString returns the XML string representation of ProfileIdCDM
func (e ProfileIdCDM) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseProfileIdCDMString parses a string value to ProfileIdCDM enum (case-insensitive)
func ParseProfileIdCDMString(s string) (ProfileIdCDM, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ProfileIdCDM(0), false
	}
}

// XMLString returns the XML string representation of ProfileIdMWDR
func (e ProfileIdMWDR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseProfileIdMWDRString parses a string value to ProfileIdMWDR enum (case-insensitive)
func ParseProfileIdMWDRString(s string) (ProfileIdMWDR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ProfileIdMWDR(0), false
	}
}

// XMLString returns the XML string representation of ProfileType
func (e ProfileType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseProfileTypeString parses a string value to ProfileType enum (case-insensitive)
func ParseProfileTypeString(s string) (ProfileType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ProfileType(0), false
	}
}

// XMLString returns the XML string representation of Purpose
func (e Purpose) XMLString() string {
	switch e {
	case Purpose_PURPOSE_BACKGROUNDMUSIC:
		return "BACKGROUNDMUSIC"
	case Purpose_PURPOSE_CHANNELTRAILERMUSIC:
		return "CHANNELTRAILERMUSIC"
	case Purpose_PURPOSE_EXTRACT:
		return "EXTRACT"
	case Purpose_PURPOSE_FILMTRAILERMUSIC:
		return "FILMTRAILERMUSIC"
	case Purpose_PURPOSE_FOREGROUNDMUSIC:
		return "FOREGROUNDMUSIC"
	case Purpose_PURPOSE_TRAILERMUSIC:
		return "TRAILERMUSIC"
	case Purpose_PURPOSE_USERDEFINED:
		return "USERDEFINED"
	default:
		return ""
	}
}

// ParsePurposeString parses a string value to Purpose enum (case-insensitive)
func ParsePurposeString(s string) (Purpose, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "BACKGROUNDMUSIC":
		return Purpose_PURPOSE_BACKGROUNDMUSIC, true
	case "CHANNELTRAILERMUSIC":
		return Purpose_PURPOSE_CHANNELTRAILERMUSIC, true
	case "EXTRACT":
		return Purpose_PURPOSE_EXTRACT, true
	case "FILMTRAILERMUSIC":
		return Purpose_PURPOSE_FILMTRAILERMUSIC, true
	case "FOREGROUNDMUSIC":
		return Purpose_PURPOSE_FOREGROUNDMUSIC, true
	case "TRAILERMUSIC":
		return Purpose_PURPOSE_TRAILERMUSIC, true
	case "USERDEFINED":
		return Purpose_PURPOSE_USERDEFINED, true
	default:
		return Purpose(0), false
	}
}

// XMLString returns the XML string representation of RatingAgency
func (e RatingAgency) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRatingAgencyString parses a string value to RatingAgency enum (case-insensitive)
func ParseRatingAgencyString(s string) (RatingAgency, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RatingAgency(0), false
	}
}

// XMLString returns the XML string representation of RatingReason
func (e RatingReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRatingReasonString parses a string value to RatingReason enum (case-insensitive)
func ParseRatingReasonString(s string) (RatingReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RatingReason(0), false
	}
}

// XMLString returns the XML string representation of RdrMessageType
func (e RdrMessageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRdrMessageTypeString parses a string value to RdrMessageType enum (case-insensitive)
func ParseRdrMessageTypeString(s string) (RdrMessageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RdrMessageType(0), false
	}
}

// XMLString returns the XML string representation of RdrcBatchStatus
func (e RdrcBatchStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRdrcBatchStatusString parses a string value to RdrcBatchStatus enum (case-insensitive)
func ParseRdrcBatchStatusString(s string) (RdrcBatchStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RdrcBatchStatus(0), false
	}
}

// XMLString returns the XML string representation of RdrcFileStatus
func (e RdrcFileStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRdrcFileStatusString parses a string value to RdrcFileStatus enum (case-insensitive)
func ParseRdrcFileStatusString(s string) (RdrcFileStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RdrcFileStatus(0), false
	}
}

// XMLString returns the XML string representation of ReasonForNameChange
func (e ReasonForNameChange) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReasonForNameChangeString parses a string value to ReasonForNameChange enum (case-insensitive)
func ParseReasonForNameChangeString(s string) (ReasonForNameChange, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReasonForNameChange(0), false
	}
}

// XMLString returns the XML string representation of RecipientRevenueType
func (e RecipientRevenueType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRecipientRevenueTypeString parses a string value to RecipientRevenueType enum (case-insensitive)
func ParseRecipientRevenueTypeString(s string) (RecipientRevenueType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RecipientRevenueType(0), false
	}
}

// XMLString returns the XML string representation of RecipientRevenueTypeRDR
func (e RecipientRevenueTypeRDR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRecipientRevenueTypeRDRString parses a string value to RecipientRevenueTypeRDR enum (case-insensitive)
func ParseRecipientRevenueTypeRDRString(s string) (RecipientRevenueTypeRDR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RecipientRevenueTypeRDR(0), false
	}
}

// XMLString returns the XML string representation of RecordingFormat
func (e RecordingFormat) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRecordingFormatString parses a string value to RecordingFormat enum (case-insensitive)
func ParseRecordingFormatString(s string) (RecordingFormat, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RecordingFormat(0), false
	}
}

// XMLString returns the XML string representation of RecordingMode
func (e RecordingMode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRecordingModeString parses a string value to RecordingMode enum (case-insensitive)
func ParseRecordingModeString(s string) (RecordingMode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RecordingMode(0), false
	}
}

// XMLString returns the XML string representation of ReferenceCreation
func (e ReferenceCreation) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReferenceCreationString parses a string value to ReferenceCreation enum (case-insensitive)
func ParseReferenceCreationString(s string) (ReferenceCreation, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReferenceCreation(0), false
	}
}

// XMLString returns the XML string representation of ReferenceUnit
func (e ReferenceUnit) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReferenceUnitString parses a string value to ReferenceUnit enum (case-insensitive)
func ParseReferenceUnitString(s string) (ReferenceUnit, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReferenceUnit(0), false
	}
}

// XMLString returns the XML string representation of RegistrationStatus
func (e RegistrationStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRegistrationStatusString parses a string value to RegistrationStatus enum (case-insensitive)
func ParseRegistrationStatusString(s string) (RegistrationStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RegistrationStatus(0), false
	}
}

// XMLString returns the XML string representation of RejectionReason
func (e RejectionReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRejectionReasonString parses a string value to RejectionReason enum (case-insensitive)
func ParseRejectionReasonString(s string) (RejectionReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RejectionReason(0), false
	}
}

// XMLString returns the XML string representation of RelatedResourceType
func (e RelatedResourceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRelatedResourceTypeString parses a string value to RelatedResourceType enum (case-insensitive)
func ParseRelatedResourceTypeString(s string) (RelatedResourceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RelatedResourceType(0), false
	}
}

// XMLString returns the XML string representation of RelationalRelator
func (e RelationalRelator) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRelationalRelatorString parses a string value to RelationalRelator enum (case-insensitive)
func ParseRelationalRelatorString(s string) (RelationalRelator, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RelationalRelator(0), false
	}
}

// XMLString returns the XML string representation of ReleaseProfileVariantVersionId
func (e ReleaseProfileVariantVersionId) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseProfileVariantVersionIdString parses a string value to ReleaseProfileVariantVersionId enum (case-insensitive)
func ParseReleaseProfileVariantVersionIdString(s string) (ReleaseProfileVariantVersionId, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseProfileVariantVersionId(0), false
	}
}

// XMLString returns the XML string representation of ReleaseProfileVersionId
func (e ReleaseProfileVersionId) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseProfileVersionIdString parses a string value to ReleaseProfileVersionId enum (case-insensitive)
func ParseReleaseProfileVersionIdString(s string) (ReleaseProfileVersionId, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseProfileVersionId(0), false
	}
}

// XMLString returns the XML string representation of ReleaseRelationshipType
func (e ReleaseRelationshipType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseRelationshipTypeString parses a string value to ReleaseRelationshipType enum (case-insensitive)
func ParseReleaseRelationshipTypeString(s string) (ReleaseRelationshipType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseRelationshipType(0), false
	}
}

// XMLString returns the XML string representation of ReleaseResourceType
func (e ReleaseResourceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseResourceTypeString parses a string value to ReleaseResourceType enum (case-insensitive)
func ParseReleaseResourceTypeString(s string) (ReleaseResourceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseResourceType(0), false
	}
}

// XMLString returns the XML string representation of ReleaseType
func (e ReleaseType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseTypeString parses a string value to ReleaseType enum (case-insensitive)
func ParseReleaseTypeString(s string) (ReleaseType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseType(0), false
	}
}

// XMLString returns the XML string representation of ReleaseTypeDSR
func (e ReleaseTypeDSR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseTypeDSRString parses a string value to ReleaseTypeDSR enum (case-insensitive)
func ParseReleaseTypeDSRString(s string) (ReleaseTypeDSR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseTypeDSR(0), false
	}
}

// XMLString returns the XML string representation of ReleaseTypeERN4
func (e ReleaseTypeERN4) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseTypeERN4String parses a string value to ReleaseTypeERN4 enum (case-insensitive)
func ParseReleaseTypeERN4String(s string) (ReleaseTypeERN4, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseTypeERN4(0), false
	}
}

// XMLString returns the XML string representation of ReleaseTypeMCNOTIF
func (e ReleaseTypeMCNOTIF) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReleaseTypeMCNOTIFString parses a string value to ReleaseTypeMCNOTIF enum (case-insensitive)
func ParseReleaseTypeMCNOTIFString(s string) (ReleaseTypeMCNOTIF, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReleaseTypeMCNOTIF(0), false
	}
}

// XMLString returns the XML string representation of ReportMessageType
func (e ReportMessageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseReportMessageTypeString parses a string value to ReportMessageType enum (case-insensitive)
func ParseReportMessageTypeString(s string) (ReportMessageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ReportMessageType(0), false
	}
}

// XMLString returns the XML string representation of RequestMessagePurpose
func (e RequestMessagePurpose) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRequestMessagePurposeString parses a string value to RequestMessagePurpose enum (case-insensitive)
func ParseRequestMessagePurposeString(s string) (RequestMessagePurpose, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RequestMessagePurpose(0), false
	}
}

// XMLString returns the XML string representation of RequestReason
func (e RequestReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRequestReasonString parses a string value to RequestReason enum (case-insensitive)
func ParseRequestReasonString(s string) (RequestReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RequestReason(0), false
	}
}

// XMLString returns the XML string representation of ResourceContributorRole
func (e ResourceContributorRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResourceContributorRoleString parses a string value to ResourceContributorRole enum (case-insensitive)
func ParseResourceContributorRoleString(s string) (ResourceContributorRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResourceContributorRole(0), false
	}
}

// XMLString returns the XML string representation of ResourceGroupType
func (e ResourceGroupType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResourceGroupTypeString parses a string value to ResourceGroupType enum (case-insensitive)
func ParseResourceGroupTypeString(s string) (ResourceGroupType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResourceGroupType(0), false
	}
}

// XMLString returns the XML string representation of ResourceRelationshipType
func (e ResourceRelationshipType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResourceRelationshipTypeString parses a string value to ResourceRelationshipType enum (case-insensitive)
func ParseResourceRelationshipTypeString(s string) (ResourceRelationshipType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResourceRelationshipType(0), false
	}
}

// XMLString returns the XML string representation of ResourceType
func (e ResourceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResourceTypeString parses a string value to ResourceType enum (case-insensitive)
func ParseResourceTypeString(s string) (ResourceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResourceType(0), false
	}
}

// XMLString returns the XML string representation of ResourceTypeCustomSet
func (e ResourceTypeCustomSet) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResourceTypeCustomSetString parses a string value to ResourceTypeCustomSet enum (case-insensitive)
func ParseResourceTypeCustomSetString(s string) (ResourceTypeCustomSet, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResourceTypeCustomSet(0), false
	}
}

// XMLString returns the XML string representation of ResourceTypeMCNOTIF
func (e ResourceTypeMCNOTIF) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResourceTypeMCNOTIFString parses a string value to ResourceTypeMCNOTIF enum (case-insensitive)
func ParseResourceTypeMCNOTIFString(s string) (ResourceTypeMCNOTIF, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResourceTypeMCNOTIF(0), false
	}
}

// XMLString returns the XML string representation of ResourceTypeRDR
func (e ResourceTypeRDR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResourceTypeRDRString parses a string value to ResourceTypeRDR enum (case-insensitive)
func ParseResourceTypeRDRString(s string) (ResourceTypeRDR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResourceTypeRDR(0), false
	}
}

// XMLString returns the XML string representation of ResourceWorkRelationshipType
func (e ResourceWorkRelationshipType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResourceWorkRelationshipTypeString parses a string value to ResourceWorkRelationshipType enum (case-insensitive)
func ParseResourceWorkRelationshipTypeString(s string) (ResourceWorkRelationshipType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResourceWorkRelationshipType(0), false
	}
}

// XMLString returns the XML string representation of ResponseType
func (e ResponseType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseResponseTypeString parses a string value to ResponseType enum (case-insensitive)
func ParseResponseTypeString(s string) (ResponseType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ResponseType(0), false
	}
}

// XMLString returns the XML string representation of RevenueAllocationType
func (e RevenueAllocationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRevenueAllocationTypeString parses a string value to RevenueAllocationType enum (case-insensitive)
func ParseRevenueAllocationTypeString(s string) (RevenueAllocationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RevenueAllocationType(0), false
	}
}

// XMLString returns the XML string representation of RevenueSourceType
func (e RevenueSourceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRevenueSourceTypeString parses a string value to RevenueSourceType enum (case-insensitive)
func ParseRevenueSourceTypeString(s string) (RevenueSourceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RevenueSourceType(0), false
	}
}

// XMLString returns the XML string representation of RevocationReason
func (e RevocationReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRevocationReasonString parses a string value to RevocationReason enum (case-insensitive)
func ParseRevocationReasonString(s string) (RevocationReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RevocationReason(0), false
	}
}

// XMLString returns the XML string representation of RhythmStyle
func (e RhythmStyle) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRhythmStyleString parses a string value to RhythmStyle enum (case-insensitive)
func ParseRhythmStyleString(s string) (RhythmStyle, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RhythmStyle(0), false
	}
}

// XMLString returns the XML string representation of RightShareType
func (e RightShareType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightShareTypeString parses a string value to RightShareType enum (case-insensitive)
func ParseRightShareTypeString(s string) (RightShareType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightShareType(0), false
	}
}

// XMLString returns the XML string representation of RightShareTypeMWDR
func (e RightShareTypeMWDR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightShareTypeMWDRString parses a string value to RightShareTypeMWDR enum (case-insensitive)
func ParseRightShareTypeMWDRString(s string) (RightShareTypeMWDR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightShareTypeMWDR(0), false
	}
}

// XMLString returns the XML string representation of RightsClaimPolicyReason
func (e RightsClaimPolicyReason) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsClaimPolicyReasonString parses a string value to RightsClaimPolicyReason enum (case-insensitive)
func ParseRightsClaimPolicyReasonString(s string) (RightsClaimPolicyReason, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsClaimPolicyReason(0), false
	}
}

// XMLString returns the XML string representation of RightsClaimPolicyType
func (e RightsClaimPolicyType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsClaimPolicyTypeString parses a string value to RightsClaimPolicyType enum (case-insensitive)
func ParseRightsClaimPolicyTypeString(s string) (RightsClaimPolicyType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsClaimPolicyType(0), false
	}
}

// XMLString returns the XML string representation of RightsClaimStatus
func (e RightsClaimStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsClaimStatusString parses a string value to RightsClaimStatus enum (case-insensitive)
func ParseRightsClaimStatusString(s string) (RightsClaimStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsClaimStatus(0), false
	}
}

// XMLString returns the XML string representation of RightsControlType
func (e RightsControlType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsControlTypeString parses a string value to RightsControlType enum (case-insensitive)
func ParseRightsControlTypeString(s string) (RightsControlType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsControlType(0), false
	}
}

// XMLString returns the XML string representation of RightsControllerRole
func (e RightsControllerRole) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsControllerRoleString parses a string value to RightsControllerRole enum (case-insensitive)
func ParseRightsControllerRoleString(s string) (RightsControllerRole, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsControllerRole(0), false
	}
}

// XMLString returns the XML string representation of RightsControllerType
func (e RightsControllerType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsControllerTypeString parses a string value to RightsControllerType enum (case-insensitive)
func ParseRightsControllerTypeString(s string) (RightsControllerType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsControllerType(0), false
	}
}

// XMLString returns the XML string representation of RightsCoverage
func (e RightsCoverage) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsCoverageString parses a string value to RightsCoverage enum (case-insensitive)
func ParseRightsCoverageString(s string) (RightsCoverage, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsCoverage(0), false
	}
}

// XMLString returns the XML string representation of RightsCoverageMWDR
func (e RightsCoverageMWDR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsCoverageMWDRString parses a string value to RightsCoverageMWDR enum (case-insensitive)
func ParseRightsCoverageMWDRString(s string) (RightsCoverageMWDR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsCoverageMWDR(0), false
	}
}

// XMLString returns the XML string representation of RightsStatementProfile
func (e RightsStatementProfile) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRightsStatementProfileString parses a string value to RightsStatementProfile enum (case-insensitive)
func ParseRightsStatementProfileString(s string) (RightsStatementProfile, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RightsStatementProfile(0), false
	}
}

// XMLString returns the XML string representation of RinFileStatus
func (e RinFileStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRinFileStatusString parses a string value to RinFileStatus enum (case-insensitive)
func ParseRinFileStatusString(s string) (RinFileStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RinFileStatus(0), false
	}
}

// XMLString returns the XML string representation of RinMessageType
func (e RinMessageType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRinMessageTypeString parses a string value to RinMessageType enum (case-insensitive)
func ParseRinMessageTypeString(s string) (RinMessageType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RinMessageType(0), false
	}
}

// XMLString returns the XML string representation of RinProposedActionType
func (e RinProposedActionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRinProposedActionTypeString parses a string value to RinProposedActionType enum (case-insensitive)
func ParseRinProposedActionTypeString(s string) (RinProposedActionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RinProposedActionType(0), false
	}
}

// XMLString returns the XML string representation of RootChordNote
func (e RootChordNote) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRootChordNoteString parses a string value to RootChordNote enum (case-insensitive)
func ParseRootChordNoteString(s string) (RootChordNote, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RootChordNote(0), false
	}
}

// XMLString returns the XML string representation of RootChordQuality
func (e RootChordQuality) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRootChordQualityString parses a string value to RootChordQuality enum (case-insensitive)
func ParseRootChordQualityString(s string) (RootChordQuality, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RootChordQuality(0), false
	}
}

// XMLString returns the XML string representation of RoyaltyRateCalculationType
func (e RoyaltyRateCalculationType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRoyaltyRateCalculationTypeString parses a string value to RoyaltyRateCalculationType enum (case-insensitive)
func ParseRoyaltyRateCalculationTypeString(s string) (RoyaltyRateCalculationType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RoyaltyRateCalculationType(0), false
	}
}

// XMLString returns the XML string representation of RoyaltyRateType
func (e RoyaltyRateType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseRoyaltyRateTypeString parses a string value to RoyaltyRateType enum (case-insensitive)
func ParseRoyaltyRateTypeString(s string) (RoyaltyRateType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return RoyaltyRateType(0), false
	}
}

// XMLString returns the XML string representation of SessionType
func (e SessionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSessionTypeString parses a string value to SessionType enum (case-insensitive)
func ParseSessionTypeString(s string) (SessionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SessionType(0), false
	}
}

// XMLString returns the XML string representation of SheetMusicCodecType
func (e SheetMusicCodecType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSheetMusicCodecTypeString parses a string value to SheetMusicCodecType enum (case-insensitive)
func ParseSheetMusicCodecTypeString(s string) (SheetMusicCodecType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SheetMusicCodecType(0), false
	}
}

// XMLString returns the XML string representation of SheetMusicType
func (e SheetMusicType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSheetMusicTypeString parses a string value to SheetMusicType enum (case-insensitive)
func ParseSheetMusicTypeString(s string) (SheetMusicType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SheetMusicType(0), false
	}
}

// XMLString returns the XML string representation of SoftwareType
func (e SoftwareType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSoftwareTypeString parses a string value to SoftwareType enum (case-insensitive)
func ParseSoftwareTypeString(s string) (SoftwareType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SoftwareType(0), false
	}
}

// XMLString returns the XML string representation of SoundRecordingType
func (e SoundRecordingType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSoundRecordingTypeString parses a string value to SoundRecordingType enum (case-insensitive)
func ParseSoundRecordingTypeString(s string) (SoundRecordingType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SoundRecordingType(0), false
	}
}

// XMLString returns the XML string representation of SpecialContributorType
func (e SpecialContributorType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSpecialContributorTypeString parses a string value to SpecialContributorType enum (case-insensitive)
func ParseSpecialContributorTypeString(s string) (SpecialContributorType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SpecialContributorType(0), false
	}
}

// XMLString returns the XML string representation of Status
func (e Status) XMLString() string {
	switch e {
	case Status_STATUS_ASSETSNEEDED:
		return "ASSETSNEEDED"
	case Status_STATUS_AWAITINGMATERIALS:
		return "AWAITINGMATERIALS"
	case Status_STATUS_BACKEDUP:
		return "BACKEDUP"
	case Status_STATUS_CANCELED:
		return "CANCELED"
	case Status_STATUS_CLOSED:
		return "CLOSED"
	case Status_STATUS_COMPLETED:
		return "COMPLETED"
	case Status_STATUS_INWORK:
		return "INWORK"
	case Status_STATUS_NOTSTARTED:
		return "NOTSTARTED"
	case Status_STATUS_USERDEFINED:
		return "USERDEFINED"
	case Status_STATUS_VERIFIED:
		return "VERIFIED"
	default:
		return ""
	}
}

// ParseStatusString parses a string value to Status enum (case-insensitive)
func ParseStatusString(s string) (Status, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "ASSETSNEEDED":
		return Status_STATUS_ASSETSNEEDED, true
	case "AWAITINGMATERIALS":
		return Status_STATUS_AWAITINGMATERIALS, true
	case "BACKEDUP":
		return Status_STATUS_BACKEDUP, true
	case "CANCELED":
		return Status_STATUS_CANCELED, true
	case "CLOSED":
		return Status_STATUS_CLOSED, true
	case "COMPLETED":
		return Status_STATUS_COMPLETED, true
	case "INWORK":
		return Status_STATUS_INWORK, true
	case "NOTSTARTED":
		return Status_STATUS_NOTSTARTED, true
	case "USERDEFINED":
		return Status_STATUS_USERDEFINED, true
	case "VERIFIED":
		return Status_STATUS_VERIFIED, true
	default:
		return Status(0), false
	}
}

// XMLString returns the XML string representation of SubGenre
func (e SubGenre) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSubGenreString parses a string value to SubGenre enum (case-insensitive)
func ParseSubGenreString(s string) (SubGenre, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SubGenre(0), false
	}
}

// XMLString returns the XML string representation of SubTitleType
func (e SubTitleType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSubTitleTypeString parses a string value to SubTitleType enum (case-insensitive)
func ParseSubTitleTypeString(s string) (SubTitleType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SubTitleType(0), false
	}
}

// XMLString returns the XML string representation of SummaryType
func (e SummaryType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSummaryTypeString parses a string value to SummaryType enum (case-insensitive)
func ParseSummaryTypeString(s string) (SummaryType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SummaryType(0), false
	}
}

// XMLString returns the XML string representation of SupplyChainStatus
func (e SupplyChainStatus) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseSupplyChainStatusString parses a string value to SupplyChainStatus enum (case-insensitive)
func ParseSupplyChainStatusString(s string) (SupplyChainStatus, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return SupplyChainStatus(0), false
	}
}

// XMLString returns the XML string representation of Tempo
func (e Tempo) XMLString() string {
	switch e {
	case Tempo_TEMPO_ADAGIETTO:
		return "ADAGIETTO"
	case Tempo_TEMPO_ADAGIO:
		return "ADAGIO"
	case Tempo_TEMPO_ADAGISSIMO:
		return "ADAGISSIMO"
	case Tempo_TEMPO_ALLEGRETTO:
		return "ALLEGRETTO"
	case Tempo_TEMPO_ALLEGRISSIMO:
		return "ALLEGRISSIMO"
	case Tempo_TEMPO_ALLEGRO:
		return "ALLEGRO"
	case Tempo_TEMPO_ALLEGROMODERATO:
		return "ALLEGROMODERATO"
	case Tempo_TEMPO_ANDANTE:
		return "ANDANTE"
	case Tempo_TEMPO_ANDANTEMODERATO:
		return "ANDANTEMODERATO"
	case Tempo_TEMPO_ANDANTINO:
		return "ANDANTINO"
	case Tempo_TEMPO_GRAVE:
		return "GRAVE"
	case Tempo_TEMPO_LARGHETTO:
		return "LARGHETTO"
	case Tempo_TEMPO_LARGHISSIMO:
		return "LARGHISSIMO"
	case Tempo_TEMPO_LARGO:
		return "LARGO"
	case Tempo_TEMPO_LENTO:
		return "LENTO"
	case Tempo_TEMPO_MARCIAMODERATO:
		return "MARCIAMODERATO"
	case Tempo_TEMPO_MODERATO:
		return "MODERATO"
	case Tempo_TEMPO_PRESTISSIMO:
		return "PRESTISSIMO"
	case Tempo_TEMPO_PRESTO:
		return "PRESTO"
	case Tempo_TEMPO_USERDEFINED:
		return "USERDEFINED"
	case Tempo_TEMPO_VIVACE:
		return "VIVACE"
	case Tempo_TEMPO_VIVACISSIMO:
		return "VIVACISSIMO"
	default:
		return ""
	}
}

// ParseTempoString parses a string value to Tempo enum (case-insensitive)
func ParseTempoString(s string) (Tempo, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "ADAGIETTO":
		return Tempo_TEMPO_ADAGIETTO, true
	case "ADAGIO":
		return Tempo_TEMPO_ADAGIO, true
	case "ADAGISSIMO":
		return Tempo_TEMPO_ADAGISSIMO, true
	case "ALLEGRETTO":
		return Tempo_TEMPO_ALLEGRETTO, true
	case "ALLEGRISSIMO":
		return Tempo_TEMPO_ALLEGRISSIMO, true
	case "ALLEGRO":
		return Tempo_TEMPO_ALLEGRO, true
	case "ALLEGROMODERATO":
		return Tempo_TEMPO_ALLEGROMODERATO, true
	case "ANDANTE":
		return Tempo_TEMPO_ANDANTE, true
	case "ANDANTEMODERATO":
		return Tempo_TEMPO_ANDANTEMODERATO, true
	case "ANDANTINO":
		return Tempo_TEMPO_ANDANTINO, true
	case "GRAVE":
		return Tempo_TEMPO_GRAVE, true
	case "LARGHETTO":
		return Tempo_TEMPO_LARGHETTO, true
	case "LARGHISSIMO":
		return Tempo_TEMPO_LARGHISSIMO, true
	case "LARGO":
		return Tempo_TEMPO_LARGO, true
	case "LENTO":
		return Tempo_TEMPO_LENTO, true
	case "MARCIAMODERATO":
		return Tempo_TEMPO_MARCIAMODERATO, true
	case "MODERATO":
		return Tempo_TEMPO_MODERATO, true
	case "PRESTISSIMO":
		return Tempo_TEMPO_PRESTISSIMO, true
	case "PRESTO":
		return Tempo_TEMPO_PRESTO, true
	case "USERDEFINED":
		return Tempo_TEMPO_USERDEFINED, true
	case "VIVACE":
		return Tempo_TEMPO_VIVACE, true
	case "VIVACISSIMO":
		return Tempo_TEMPO_VIVACISSIMO, true
	default:
		return Tempo(0), false
	}
}

// XMLString returns the XML string representation of TerritoryCode
func (e TerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTerritoryCodeString parses a string value to TerritoryCode enum (case-insensitive)
func ParseTerritoryCodeString(s string) (TerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of TerritoryCodeType
func (e TerritoryCodeType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTerritoryCodeTypeString parses a string value to TerritoryCodeType enum (case-insensitive)
func ParseTerritoryCodeTypeString(s string) (TerritoryCodeType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TerritoryCodeType(0), false
	}
}

// XMLString returns the XML string representation of TerritoryCodeTypeIncludingDeprecatedCodes
func (e TerritoryCodeTypeIncludingDeprecatedCodes) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTerritoryCodeTypeIncludingDeprecatedCodesString parses a string value to TerritoryCodeTypeIncludingDeprecatedCodes enum (case-insensitive)
func ParseTerritoryCodeTypeIncludingDeprecatedCodesString(s string) (TerritoryCodeTypeIncludingDeprecatedCodes, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TerritoryCodeTypeIncludingDeprecatedCodes(0), false
	}
}

// XMLString returns the XML string representation of TextCodecType
func (e TextCodecType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTextCodecTypeString parses a string value to TextCodecType enum (case-insensitive)
func ParseTextCodecTypeString(s string) (TextCodecType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TextCodecType(0), false
	}
}

// XMLString returns the XML string representation of TextMusicRelationshipType
func (e TextMusicRelationshipType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTextMusicRelationshipTypeString parses a string value to TextMusicRelationshipType enum (case-insensitive)
func ParseTextMusicRelationshipTypeString(s string) (TextMusicRelationshipType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TextMusicRelationshipType(0), false
	}
}

// XMLString returns the XML string representation of TextType
func (e TextType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTextTypeString parses a string value to TextType enum (case-insensitive)
func ParseTextTypeString(s string) (TextType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TextType(0), false
	}
}

// XMLString returns the XML string representation of TextTypeATOM
func (e TextTypeATOM) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTextTypeATOMString parses a string value to TextTypeATOM enum (case-insensitive)
func ParseTextTypeATOMString(s string) (TextTypeATOM, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TextTypeATOM(0), false
	}
}

// XMLString returns the XML string representation of Theme
func (e Theme) XMLString() string {
	switch e {
	case Theme_THEME_ABORTION:
		return "ABORTION"
	case Theme_THEME_ABOVE:
		return "ABOVE"
	case Theme_THEME_ACCUSE:
		return "ACCUSE"
	case Theme_THEME_ACTION:
		return "ACTION"
	case Theme_THEME_ACTIVITIES:
		return "ACTIVITIES"
	case Theme_THEME_ACTOR:
		return "ACTOR"
	case Theme_THEME_ADDICTEDTO:
		return "ADDICTEDTO"
	case Theme_THEME_ADDICTION:
		return "ADDICTION"
	case Theme_THEME_ADOLESCENCE:
		return "ADOLESCENCE"
	case Theme_THEME_ADOPTION:
		return "ADOPTION"
	case Theme_THEME_ADORATION:
		return "ADORATION"
	case Theme_THEME_ADVICE:
		return "ADVICE"
	case Theme_THEME_AFFECTION:
		return "AFFECTION"
	case Theme_THEME_AFGHANISTAN:
		return "AFGHANISTAN"
	case Theme_THEME_AFRAID:
		return "AFRAID"
	case Theme_THEME_AFRICA:
		return "AFRICA"
	case Theme_THEME_AFTERNOON:
		return "AFTERNOON"
	case Theme_THEME_AIR:
		return "AIR"
	case Theme_THEME_AIRPLANES:
		return "AIRPLANES"
	case Theme_THEME_ALABAMA:
		return "ALABAMA"
	case Theme_THEME_ALASKA:
		return "ALASKA"
	case Theme_THEME_ALBANIA:
		return "ALBANIA"
	case Theme_THEME_ALCOHOL:
		return "ALCOHOL"
	case Theme_THEME_ALGERIA:
		return "ALGERIA"
	case Theme_THEME_ALIEN:
		return "ALIEN"
	case Theme_THEME_ALL:
		return "ALL"
	case Theme_THEME_ALLIGATOR:
		return "ALLIGATOR"
	case Theme_THEME_ALONE:
		return "ALONE"
	case Theme_THEME_ALWAYS:
		return "ALWAYS"
	case Theme_THEME_AMBITION:
		return "AMBITION"
	case Theme_THEME_AMBIVALENT:
		return "AMBIVALENT"
	case Theme_THEME_AMMUNITION:
		return "AMMUNITION"
	case Theme_THEME_AMSTERDAM:
		return "AMSTERDAM"
	case Theme_THEME_AMUSEMENTPARKSANDRIDES:
		return "AMUSEMENTPARKSANDRIDES"
	case Theme_THEME_ANDORRA:
		return "ANDORRA"
	case Theme_THEME_ANGEL:
		return "ANGEL"
	case Theme_THEME_ANGER:
		return "ANGER"
	case Theme_THEME_ANGOLA:
		return "ANGOLA"
	case Theme_THEME_ANGST:
		return "ANGST"
	case Theme_THEME_ANIMALS:
		return "ANIMALS"
	case Theme_THEME_ANNIVERSARY:
		return "ANNIVERSARY"
	case Theme_THEME_ANTIDRUG:
		return "ANTIDRUG"
	case Theme_THEME_ANTIGUAANDBARBUDA:
		return "ANTIGUAANDBARBUDA"
	case Theme_THEME_ANXIOUS:
		return "ANXIOUS"
	case Theme_THEME_ANYTHING:
		return "ANYTHING"
	case Theme_THEME_APOLOGIZE:
		return "APOLOGIZE"
	case Theme_THEME_APRIL:
		return "APRIL"
	case Theme_THEME_ARGENTINA:
		return "ARGENTINA"
	case Theme_THEME_ARIZONA:
		return "ARIZONA"
	case Theme_THEME_ARKANSAS:
		return "ARKANSAS"
	case Theme_THEME_ARMAGEDDON:
		return "ARMAGEDDON"
	case Theme_THEME_ARMENIA:
		return "ARMENIA"
	case Theme_THEME_ARMS:
		return "ARMS"
	case Theme_THEME_ART:
		return "ART"
	case Theme_THEME_ASHES:
		return "ASHES"
	case Theme_THEME_ASIA:
		return "ASIA"
	case Theme_THEME_ASSURANCE:
		return "ASSURANCE"
	case Theme_THEME_ASTROLOGY:
		return "ASTROLOGY"
	case Theme_THEME_ASTRONAUT:
		return "ASTRONAUT"
	case Theme_THEME_ATFIRSTSIGHT:
		return "ATFIRSTSIGHT"
	case Theme_THEME_ATLANTA:
		return "ATLANTA"
	case Theme_THEME_ATTITUDE:
		return "ATTITUDE"
	case Theme_THEME_ATTRACTIVE:
		return "ATTRACTIVE"
	case Theme_THEME_AUGUST:
		return "AUGUST"
	case Theme_THEME_AUNT:
		return "AUNT"
	case Theme_THEME_AUSTRALIA:
		return "AUSTRALIA"
	case Theme_THEME_AUSTRIA:
		return "AUSTRIA"
	case Theme_THEME_AUTUMN:
		return "AUTUMN"
	case Theme_THEME_AWARENESS:
		return "AWARENESS"
	case Theme_THEME_AZERBAIJAN:
		return "AZERBAIJAN"
	case Theme_THEME_BABY:
		return "BABY"
	case Theme_THEME_BACK:
		return "BACK"
	case Theme_THEME_BACKTOGETHER:
		return "BACKTOGETHER"
	case Theme_THEME_BAD:
		return "BAD"
	case Theme_THEME_BAHAMAS:
		return "BAHAMAS"
	case Theme_THEME_BAHRAIN:
		return "BAHRAIN"
	case Theme_THEME_BALI:
		return "BALI"
	case Theme_THEME_BALKANS:
		return "BALKANS"
	case Theme_THEME_BALLERINA:
		return "BALLERINA"
	case Theme_THEME_BALTICSTATES:
		return "BALTICSTATES"
	case Theme_THEME_BALTIMORE:
		return "BALTIMORE"
	case Theme_THEME_BANGLADESH:
		return "BANGLADESH"
	case Theme_THEME_BARBADOS:
		return "BARBADOS"
	case Theme_THEME_BARS:
		return "BARS"
	case Theme_THEME_BASEBALL:
		return "BASEBALL"
	case Theme_THEME_BASKETBALL:
		return "BASKETBALL"
	case Theme_THEME_BASS:
		return "BASS"
	case Theme_THEME_BATHROOM:
		return "BATHROOM"
	case Theme_THEME_BATTLEOFTHESEXES:
		return "BATTLEOFTHESEXES"
	case Theme_THEME_BAY:
		return "BAY"
	case Theme_THEME_BEACH:
		return "BEACH"
	case Theme_THEME_BEAR:
		return "BEAR"
	case Theme_THEME_BEATS:
		return "BEATS"
	case Theme_THEME_BEAUTIFUL:
		return "BEAUTIFUL"
	case Theme_THEME_BEAUTY:
		return "BEAUTY"
	case Theme_THEME_BEDROOM:
		return "BEDROOM"
	case Theme_THEME_BEG:
		return "BEG"
	case Theme_THEME_BEGINNING:
		return "BEGINNING"
	case Theme_THEME_BEHIND:
		return "BEHIND"
	case Theme_THEME_BEINGIN:
		return "BEINGIN"
	case Theme_THEME_BELARUS:
		return "BELARUS"
	case Theme_THEME_BELGIUM:
		return "BELGIUM"
	case Theme_THEME_BELIEF:
		return "BELIEF"
	case Theme_THEME_BELIEVE:
		return "BELIEVE"
	case Theme_THEME_BELIZE:
		return "BELIZE"
	case Theme_THEME_BELLS:
		return "BELLS"
	case Theme_THEME_BELLY:
		return "BELLY"
	case Theme_THEME_BELOW:
		return "BELOW"
	case Theme_THEME_BENELUX:
		return "BENELUX"
	case Theme_THEME_BENIN:
		return "BENIN"
	case Theme_THEME_BERLIN:
		return "BERLIN"
	case Theme_THEME_BERMUDA:
		return "BERMUDA"
	case Theme_THEME_BEST:
		return "BEST"
	case Theme_THEME_BETRAY:
		return "BETRAY"
	case Theme_THEME_BEVERAGE:
		return "BEVERAGE"
	case Theme_THEME_BHUTAN:
		return "BHUTAN"
	case Theme_THEME_BICYCLES:
		return "BICYCLES"
	case Theme_THEME_BIG:
		return "BIG"
	case Theme_THEME_BIRD:
		return "BIRD"
	case Theme_THEME_BIRMINGHAM:
		return "BIRMINGHAM"
	case Theme_THEME_BIRTH:
		return "BIRTH"
	case Theme_THEME_BIRTHCONTROL:
		return "BIRTHCONTROL"
	case Theme_THEME_BIRTHDAYPARTY:
		return "BIRTHDAYPARTY"
	case Theme_THEME_BLACK:
		return "BLACK"
	case Theme_THEME_BLAME:
		return "BLAME"
	case Theme_THEME_BLESS:
		return "BLESS"
	case Theme_THEME_BLONDE:
		return "BLONDE"
	case Theme_THEME_BLOOD:
		return "BLOOD"
	case Theme_THEME_BLUE:
		return "BLUE"
	case Theme_THEME_BOARDWALK:
		return "BOARDWALK"
	case Theme_THEME_BODY:
		return "BODY"
	case Theme_THEME_BODYLANGUAGE:
		return "BODYLANGUAGE"
	case Theme_THEME_BODYPARTS:
		return "BODYPARTS"
	case Theme_THEME_BOLIVIA:
		return "BOLIVIA"
	case Theme_THEME_BOOK:
		return "BOOK"
	case Theme_THEME_BORED:
		return "BORED"
	case Theme_THEME_BOSNIAANDHERZEGOVINA:
		return "BOSNIAANDHERZEGOVINA"
	case Theme_THEME_BOSS:
		return "BOSS"
	case Theme_THEME_BOSTON:
		return "BOSTON"
	case Theme_THEME_BOTSWANA:
		return "BOTSWANA"
	case Theme_THEME_BOUNCE:
		return "BOUNCE"
	case Theme_THEME_BOXING:
		return "BOXING"
	case Theme_THEME_BOYS:
		return "BOYS"
	case Theme_THEME_BRAG:
		return "BRAG"
	case Theme_THEME_BRAIN:
		return "BRAIN"
	case Theme_THEME_BRASS:
		return "BRASS"
	case Theme_THEME_BRAZIL:
		return "BRAZIL"
	case Theme_THEME_BREAKDOWN:
		return "BREAKDOWN"
	case Theme_THEME_BREAKUP:
		return "BREAKUP"
	case Theme_THEME_BREATHE:
		return "BREATHE"
	case Theme_THEME_BRIDGE:
		return "BRIDGE"
	case Theme_THEME_BRITAIN:
		return "BRITAIN"
	case Theme_THEME_BRITISHISLES:
		return "BRITISHISLES"
	case Theme_THEME_BROKENHOME:
		return "BROKENHOME"
	case Theme_THEME_BROTHER:
		return "BROTHER"
	case Theme_THEME_BROWN:
		return "BROWN"
	case Theme_THEME_BRUNEI:
		return "BRUNEI"
	case Theme_THEME_BRUNETTE:
		return "BRUNETTE"
	case Theme_THEME_BUDDHA:
		return "BUDDHA"
	case Theme_THEME_BUG:
		return "BUG"
	case Theme_THEME_BUILD:
		return "BUILD"
	case Theme_THEME_BUILDING:
		return "BUILDING"
	case Theme_THEME_BULGARIA:
		return "BULGARIA"
	case Theme_THEME_BURDEN:
		return "BURDEN"
	case Theme_THEME_BURKINAFASO:
		return "BURKINAFASO"
	case Theme_THEME_BURNING:
		return "BURNING"
	case Theme_THEME_BURUNDI:
		return "BURUNDI"
	case Theme_THEME_BUS:
		return "BUS"
	case Theme_THEME_BUSY:
		return "BUSY"
	case Theme_THEME_BUTTERFLY:
		return "BUTTERFLY"
	case Theme_THEME_CALIFORNIA:
		return "CALIFORNIA"
	case Theme_THEME_CALLOUT:
		return "CALLOUT"
	case Theme_THEME_CALMNESS:
		return "CALMNESS"
	case Theme_THEME_CAMBODIA:
		return "CAMBODIA"
	case Theme_THEME_CAMERA:
		return "CAMERA"
	case Theme_THEME_CAMEROON:
		return "CAMEROON"
	case Theme_THEME_CANADA:
		return "CANADA"
	case Theme_THEME_CANDLE:
		return "CANDLE"
	case Theme_THEME_CANDY:
		return "CANDY"
	case Theme_THEME_CANTGETOVER:
		return "CANTGETOVER"
	case Theme_THEME_CANTRESIST:
		return "CANTRESIST"
	case Theme_THEME_CAPEVERDE:
		return "CAPEVERDE"
	case Theme_THEME_CAPITALPUNISHMENT:
		return "CAPITALPUNISHMENT"
	case Theme_THEME_CARDGAME:
		return "CARDGAME"
	case Theme_THEME_CAREFREE:
		return "CAREFREE"
	case Theme_THEME_CARNIVAL:
		return "CARNIVAL"
	case Theme_THEME_CAROLINAS:
		return "CAROLINAS"
	case Theme_THEME_CARRACING:
		return "CARRACING"
	case Theme_THEME_CARS:
		return "CARS"
	case Theme_THEME_CASINO:
		return "CASINO"
	case Theme_THEME_CAT:
		return "CAT"
	case Theme_THEME_CELEBRATION:
		return "CELEBRATION"
	case Theme_THEME_CELEBRITY:
		return "CELEBRITY"
	case Theme_THEME_CELLPHONE:
		return "CELLPHONE"
	case Theme_THEME_CEMETARY:
		return "CEMETARY"
	case Theme_THEME_CENTRALAFRICANREPUBLIC:
		return "CENTRALAFRICANREPUBLIC"
	case Theme_THEME_CENTRALAMERICA:
		return "CENTRALAMERICA"
	case Theme_THEME_CHAD:
		return "CHAD"
	case Theme_THEME_CHALLENGE:
		return "CHALLENGE"
	case Theme_THEME_CHANGE:
		return "CHANGE"
	case Theme_THEME_CHARITY:
		return "CHARITY"
	case Theme_THEME_CHASE:
		return "CHASE"
	case Theme_THEME_CHEERLEADER:
		return "CHEERLEADER"
	case Theme_THEME_CHICAGO:
		return "CHICAGO"
	case Theme_THEME_CHILDREN:
		return "CHILDREN"
	case Theme_THEME_CHILE:
		return "CHILE"
	case Theme_THEME_CHINA:
		return "CHINA"
	case Theme_THEME_CHOICES:
		return "CHOICES"
	case Theme_THEME_CHOOSE:
		return "CHOOSE"
	case Theme_THEME_CHRISTMAS:
		return "CHRISTMAS"
	case Theme_THEME_CHURCH:
		return "CHURCH"
	case Theme_THEME_CINCINNATI:
		return "CINCINNATI"
	case Theme_THEME_CIRCUS:
		return "CIRCUS"
	case Theme_THEME_CITY:
		return "CITY"
	case Theme_THEME_CITYLIFE:
		return "CITYLIFE"
	case Theme_THEME_CIVILRIGHTS:
		return "CIVILRIGHTS"
	case Theme_THEME_CLEAN:
		return "CLEAN"
	case Theme_THEME_CLIFF:
		return "CLIFF"
	case Theme_THEME_CLIMB:
		return "CLIMB"
	case Theme_THEME_CLOSE:
		return "CLOSE"
	case Theme_THEME_CLOTHING:
		return "CLOTHING"
	case Theme_THEME_CLOWN:
		return "CLOWN"
	case Theme_THEME_CLUB:
		return "CLUB"
	case Theme_THEME_COAST:
		return "COAST"
	case Theme_THEME_COLD:
		return "COLD"
	case Theme_THEME_COLOMBIA:
		return "COLOMBIA"
	case Theme_THEME_COLOR:
		return "COLOR"
	case Theme_THEME_COLORADO:
		return "COLORADO"
	case Theme_THEME_COMFORT:
		return "COMFORT"
	case Theme_THEME_COMIC:
		return "COMIC"
	case Theme_THEME_COMINGHOME:
		return "COMINGHOME"
	case Theme_THEME_COMMITMENT:
		return "COMMITMENT"
	case Theme_THEME_COMMUNICATION:
		return "COMMUNICATION"
	case Theme_THEME_COMOROS:
		return "COMOROS"
	case Theme_THEME_COMPASSION:
		return "COMPASSION"
	case Theme_THEME_COMPETITIVE:
		return "COMPETITIVE"
	case Theme_THEME_COMPLAIN:
		return "COMPLAIN"
	case Theme_THEME_COMPLIMENTS:
		return "COMPLIMENTS"
	case Theme_THEME_COMPUTER:
		return "COMPUTER"
	case Theme_THEME_CONFIDENCE:
		return "CONFIDENCE"
	case Theme_THEME_CONFLICT:
		return "CONFLICT"
	case Theme_THEME_CONFUSED:
		return "CONFUSED"
	case Theme_THEME_CONNECTICUT:
		return "CONNECTICUT"
	case Theme_THEME_CONNECTION:
		return "CONNECTION"
	case Theme_THEME_CONSCIOUSNESS:
		return "CONSCIOUSNESS"
	case Theme_THEME_CONSISTENT:
		return "CONSISTENT"
	case Theme_THEME_CONTAINER:
		return "CONTAINER"
	case Theme_THEME_CONTEMPT:
		return "CONTEMPT"
	case Theme_THEME_CONTINENT:
		return "CONTINENT"
	case Theme_THEME_CONVERSATION:
		return "CONVERSATION"
	case Theme_THEME_COOKISLANDS:
		return "COOKISLANDS"
	case Theme_THEME_COOL:
		return "COOL"
	case Theme_THEME_COSMETIC:
		return "COSMETIC"
	case Theme_THEME_COSTARICA:
		return "COSTARICA"
	case Theme_THEME_COUNTRY:
		return "COUNTRY"
	case Theme_THEME_COUNTRYLIFE:
		return "COUNTRYLIFE"
	case Theme_THEME_COUPLE:
		return "COUPLE"
	case Theme_THEME_COURAGE:
		return "COURAGE"
	case Theme_THEME_COUSIN:
		return "COUSIN"
	case Theme_THEME_COW:
		return "COW"
	case Theme_THEME_COWBOYANDCOWGIRL:
		return "COWBOYANDCOWGIRL"
	case Theme_THEME_CRASH:
		return "CRASH"
	case Theme_THEME_CRAVE:
		return "CRAVE"
	case Theme_THEME_CRAZY:
		return "CRAZY"
	case Theme_THEME_CREATE:
		return "CREATE"
	case Theme_THEME_CRIME:
		return "CRIME"
	case Theme_THEME_CRITICIZE:
		return "CRITICIZE"
	case Theme_THEME_CROATIA:
		return "CROATIA"
	case Theme_THEME_CROCODILE:
		return "CROCODILE"
	case Theme_THEME_CRUCIFIXION:
		return "CRUCIFIXION"
	case Theme_THEME_CRUEL:
		return "CRUEL"
	case Theme_THEME_CRUSH:
		return "CRUSH"
	case Theme_THEME_CRY:
		return "CRY"
	case Theme_THEME_CUBA:
		return "CUBA"
	case Theme_THEME_CYPRUS:
		return "CYPRUS"
	case Theme_THEME_CZECHOSLOVAKIA:
		return "CZECHOSLOVAKIA"
	case Theme_THEME_CZECHREPUBLIC:
		return "CZECHREPUBLIC"
	case Theme_THEME_DALLAS:
		return "DALLAS"
	case Theme_THEME_DANCE:
		return "DANCE"
	case Theme_THEME_DANCEPARTY:
		return "DANCEPARTY"
	case Theme_THEME_DANGER:
		return "DANGER"
	case Theme_THEME_DARKNESS:
		return "DARKNESS"
	case Theme_THEME_DATE:
		return "DATE"
	case Theme_THEME_DATING:
		return "DATING"
	case Theme_THEME_DAUGHTER:
		return "DAUGHTER"
	case Theme_THEME_DAWN:
		return "DAWN"
	case Theme_THEME_DAY:
		return "DAY"
	case Theme_THEME_DAYDREAM:
		return "DAYDREAM"
	case Theme_THEME_DAYTIME:
		return "DAYTIME"
	case Theme_THEME_DEATH:
		return "DEATH"
	case Theme_THEME_DECEMBER:
		return "DECEMBER"
	case Theme_THEME_DEEP:
		return "DEEP"
	case Theme_THEME_DEFEAT:
		return "DEFEAT"
	case Theme_THEME_DEFEATED:
		return "DEFEATED"
	case Theme_THEME_DELAWARE:
		return "DELAWARE"
	case Theme_THEME_DEMOCRATICREPUBLICOFTHECONGO:
		return "DEMOCRATICREPUBLICOFTHECONGO"
	case Theme_THEME_DENMARK:
		return "DENMARK"
	case Theme_THEME_DENVER:
		return "DENVER"
	case Theme_THEME_DESERT:
		return "DESERT"
	case Theme_THEME_DESIRE:
		return "DESIRE"
	case Theme_THEME_DESPAIR:
		return "DESPAIR"
	case Theme_THEME_DESPERATE:
		return "DESPERATE"
	case Theme_THEME_DETERMINATION:
		return "DETERMINATION"
	case Theme_THEME_DETROIT:
		return "DETROIT"
	case Theme_THEME_DEVIL:
		return "DEVIL"
	case Theme_THEME_DIFFICULT:
		return "DIFFICULT"
	case Theme_THEME_DINNER:
		return "DINNER"
	case Theme_THEME_DINOSAUR:
		return "DINOSAUR"
	case Theme_THEME_DIRECTION:
		return "DIRECTION"
	case Theme_THEME_DISAPPOINTMENT:
		return "DISAPPOINTMENT"
	case Theme_THEME_DISCOVERY:
		return "DISCOVERY"
	case Theme_THEME_DISEASE:
		return "DISEASE"
	case Theme_THEME_DISSATISFACTION:
		return "DISSATISFACTION"
	case Theme_THEME_DISTANCE:
		return "DISTANCE"
	case Theme_THEME_DIVORCE:
		return "DIVORCE"
	case Theme_THEME_DIZZY:
		return "DIZZY"
	case Theme_THEME_DJIBOUTI:
		return "DJIBOUTI"
	case Theme_THEME_DOCTOR:
		return "DOCTOR"
	case Theme_THEME_DOG:
		return "DOG"
	case Theme_THEME_DOLPHIN:
		return "DOLPHIN"
	case Theme_THEME_DOMESTICVIOLENCE:
		return "DOMESTICVIOLENCE"
	case Theme_THEME_DOMINICA:
		return "DOMINICA"
	case Theme_THEME_DOMINICANREPUBLIC:
		return "DOMINICANREPUBLIC"
	case Theme_THEME_DONTGO:
		return "DONTGO"
	case Theme_THEME_DONTLEAVEME:
		return "DONTLEAVEME"
	case Theme_THEME_DOOR:
		return "DOOR"
	case Theme_THEME_DOWN:
		return "DOWN"
	case Theme_THEME_DRAFTRESISTANCE:
		return "DRAFTRESISTANCE"
	case Theme_THEME_DREAM:
		return "DREAM"
	case Theme_THEME_DRIFT:
		return "DRIFT"
	case Theme_THEME_DRINK:
		return "DRINK"
	case Theme_THEME_DRIVE:
		return "DRIVE"
	case Theme_THEME_DRUG:
		return "DRUG"
	case Theme_THEME_DRUMS:
		return "DRUMS"
	case Theme_THEME_DUBLIN:
		return "DUBLIN"
	case Theme_THEME_EAGLE:
		return "EAGLE"
	case Theme_THEME_EARS:
		return "EARS"
	case Theme_THEME_EARTH:
		return "EARTH"
	case Theme_THEME_EARTHQUAKE:
		return "EARTHQUAKE"
	case Theme_THEME_EAST:
		return "EAST"
	case Theme_THEME_EASTERNEUROPE:
		return "EASTERNEUROPE"
	case Theme_THEME_ECSTATIC:
		return "ECSTATIC"
	case Theme_THEME_ECUADOR:
		return "ECUADOR"
	case Theme_THEME_EDUCATION:
		return "EDUCATION"
	case Theme_THEME_EGO:
		return "EGO"
	case Theme_THEME_EGYPT:
		return "EGYPT"
	case Theme_THEME_ELEMENTS:
		return "ELEMENTS"
	case Theme_THEME_ELEPHANT:
		return "ELEPHANT"
	case Theme_THEME_ELSALVADOR:
		return "ELSALVADOR"
	case Theme_THEME_ELVIS:
		return "ELVIS"
	case Theme_THEME_EMBARRASSED:
		return "EMBARRASSED"
	case Theme_THEME_EMERGENCY:
		return "EMERGENCY"
	case Theme_THEME_EMPOWERED:
		return "EMPOWERED"
	case Theme_THEME_EMPTY:
		return "EMPTY"
	case Theme_THEME_END:
		return "END"
	case Theme_THEME_ENEMY:
		return "ENEMY"
	case Theme_THEME_ENGAGEMENT:
		return "ENGAGEMENT"
	case Theme_THEME_ENGLAND:
		return "ENGLAND"
	case Theme_THEME_ENLIGHTENMENT:
		return "ENLIGHTENMENT"
	case Theme_THEME_ENLISTMENT:
		return "ENLISTMENT"
	case Theme_THEME_ENVIRONMENT:
		return "ENVIRONMENT"
	case Theme_THEME_EQUALITY:
		return "EQUALITY"
	case Theme_THEME_EQUATORIALGUINEA:
		return "EQUATORIALGUINEA"
	case Theme_THEME_ERITREA:
		return "ERITREA"
	case Theme_THEME_ESCAPE:
		return "ESCAPE"
	case Theme_THEME_ESPIONAGE:
		return "ESPIONAGE"
	case Theme_THEME_ESTONIA:
		return "ESTONIA"
	case Theme_THEME_ESWATINI:
		return "ESWATINI"
	case Theme_THEME_ETERNITY:
		return "ETERNITY"
	case Theme_THEME_ETHIOPIA:
		return "ETHIOPIA"
	case Theme_THEME_EUROPE:
		return "EUROPE"
	case Theme_THEME_EUROPEANCONTINENT:
		return "EUROPEANCONTINENT"
	case Theme_THEME_EUROPEANECONOMICAREA:
		return "EUROPEANECONOMICAREA"
	case Theme_THEME_EUROPEANECONOMICCOMMUNITY:
		return "EUROPEANECONOMICCOMMUNITY"
	case Theme_THEME_EUROPEANUNION:
		return "EUROPEANUNION"
	case Theme_THEME_EVENT:
		return "EVENT"
	case Theme_THEME_EVERYDAY:
		return "EVERYDAY"
	case Theme_THEME_EVERYTHING:
		return "EVERYTHING"
	case Theme_THEME_EVIL:
		return "EVIL"
	case Theme_THEME_EXCELLENCE:
		return "EXCELLENCE"
	case Theme_THEME_EXCITED:
		return "EXCITED"
	case Theme_THEME_EXCUSE:
		return "EXCUSE"
	case Theme_THEME_EXERCISE:
		return "EXERCISE"
	case Theme_THEME_EXPLORE:
		return "EXPLORE"
	case Theme_THEME_EYES:
		return "EYES"
	case Theme_THEME_FABRIC:
		return "FABRIC"
	case Theme_THEME_FACE:
		return "FACE"
	case Theme_THEME_FAILURE:
		return "FAILURE"
	case Theme_THEME_FAIR:
		return "FAIR"
	case Theme_THEME_FAITH:
		return "FAITH"
	case Theme_THEME_FAITHINDOUBT:
		return "FAITHINDOUBT"
	case Theme_THEME_FAKE:
		return "FAKE"
	case Theme_THEME_FALL:
		return "FALL"
	case Theme_THEME_FALLINGIN:
		return "FALLINGIN"
	case Theme_THEME_FAME:
		return "FAME"
	case Theme_THEME_FAMILY:
		return "FAMILY"
	case Theme_THEME_FAMILYLIFE:
		return "FAMILYLIFE"
	case Theme_THEME_FAMILYMEMBER:
		return "FAMILYMEMBER"
	case Theme_THEME_FANTASY:
		return "FANTASY"
	case Theme_THEME_FAR:
		return "FAR"
	case Theme_THEME_FAREWELL:
		return "FAREWELL"
	case Theme_THEME_FARM:
		return "FARM"
	case Theme_THEME_FASCISM:
		return "FASCISM"
	case Theme_THEME_FASHION:
		return "FASHION"
	case Theme_THEME_FAST:
		return "FAST"
	case Theme_THEME_FAT:
		return "FAT"
	case Theme_THEME_FATE:
		return "FATE"
	case Theme_THEME_FATHER:
		return "FATHER"
	case Theme_THEME_FAVORITE:
		return "FAVORITE"
	case Theme_THEME_FEBRUARY:
		return "FEBRUARY"
	case Theme_THEME_FEEL:
		return "FEEL"
	case Theme_THEME_FEELINGS:
		return "FEELINGS"
	case Theme_THEME_FEET:
		return "FEET"
	case Theme_THEME_FEMINISM:
		return "FEMINISM"
	case Theme_THEME_FEVER:
		return "FEVER"
	case Theme_THEME_FIGHT:
		return "FIGHT"
	case Theme_THEME_FIJI:
		return "FIJI"
	case Theme_THEME_FIND:
		return "FIND"
	case Theme_THEME_FINGERS:
		return "FINGERS"
	case Theme_THEME_FINLAND:
		return "FINLAND"
	case Theme_THEME_FIRE:
		return "FIRE"
	case Theme_THEME_FISH:
		return "FISH"
	case Theme_THEME_FISHING:
		return "FISHING"
	case Theme_THEME_FIX:
		return "FIX"
	case Theme_THEME_FLIRT:
		return "FLIRT"
	case Theme_THEME_FLOOD:
		return "FLOOD"
	case Theme_THEME_FLOORANDCEILING:
		return "FLOORANDCEILING"
	case Theme_THEME_FLORIDA:
		return "FLORIDA"
	case Theme_THEME_FLOWER:
		return "FLOWER"
	case Theme_THEME_FLY:
		return "FLY"
	case Theme_THEME_FOCUS:
		return "FOCUS"
	case Theme_THEME_FOLLOW:
		return "FOLLOW"
	case Theme_THEME_FOOD:
		return "FOOD"
	case Theme_THEME_FOOL:
		return "FOOL"
	case Theme_THEME_FOOTBALL:
		return "FOOTBALL"
	case Theme_THEME_FORBIDDEN:
		return "FORBIDDEN"
	case Theme_THEME_FOREST:
		return "FOREST"
	case Theme_THEME_FORGET:
		return "FORGET"
	case Theme_THEME_FORGIVE:
		return "FORGIVE"
	case Theme_THEME_FORTUNETELLER:
		return "FORTUNETELLER"
	case Theme_THEME_FOUND:
		return "FOUND"
	case Theme_THEME_FOWL:
		return "FOWL"
	case Theme_THEME_FOX:
		return "FOX"
	case Theme_THEME_FRAGILE:
		return "FRAGILE"
	case Theme_THEME_FRANCE:
		return "FRANCE"
	case Theme_THEME_FREE:
		return "FREE"
	case Theme_THEME_FREEDOM:
		return "FREEDOM"
	case Theme_THEME_FRENCHCARIBBEAN:
		return "FRENCHCARIBBEAN"
	case Theme_THEME_FRENCHGUIANA:
		return "FRENCHGUIANA"
	case Theme_THEME_FRENCHPOLYNESIA:
		return "FRENCHPOLYNESIA"
	case Theme_THEME_FRIDAY:
		return "FRIDAY"
	case Theme_THEME_FRIENDSHIP:
		return "FRIENDSHIP"
	case Theme_THEME_FROG:
		return "FROG"
	case Theme_THEME_FRUITS:
		return "FRUITS"
	case Theme_THEME_FUN:
		return "FUN"
	case Theme_THEME_FUNERAL:
		return "FUNERAL"
	case Theme_THEME_FUR:
		return "FUR"
	case Theme_THEME_FURNITURE:
		return "FURNITURE"
	case Theme_THEME_FUTURE:
		return "FUTURE"
	case Theme_THEME_GABON:
		return "GABON"
	case Theme_THEME_GAMBIA:
		return "GAMBIA"
	case Theme_THEME_GAMBLING:
		return "GAMBLING"
	case Theme_THEME_GAME:
		return "GAME"
	case Theme_THEME_GANGSTALIFE:
		return "GANGSTALIFE"
	case Theme_THEME_GARBAGE:
		return "GARBAGE"
	case Theme_THEME_GARDEN:
		return "GARDEN"
	case Theme_THEME_GASOLINE:
		return "GASOLINE"
	case Theme_THEME_GASSTATION:
		return "GASSTATION"
	case Theme_THEME_GEEK:
		return "GEEK"
	case Theme_THEME_GENDER:
		return "GENDER"
	case Theme_THEME_GENERAL:
		return "GENERAL"
	case Theme_THEME_GENOCIDE:
		return "GENOCIDE"
	case Theme_THEME_GENTLE:
		return "GENTLE"
	case Theme_THEME_GEOGRAPHICLOCATION:
		return "GEOGRAPHICLOCATION"
	case Theme_THEME_GEOGRAPHY:
		return "GEOGRAPHY"
	case Theme_THEME_GEORGIA:
		return "GEORGIA"
	case Theme_THEME_GERMANY:
		return "GERMANY"
	case Theme_THEME_GESTURES:
		return "GESTURES"
	case Theme_THEME_GETLOST:
		return "GETLOST"
	case Theme_THEME_GETTINGOVER:
		return "GETTINGOVER"
	case Theme_THEME_GHANA:
		return "GHANA"
	case Theme_THEME_GHOST:
		return "GHOST"
	case Theme_THEME_GIRLS:
		return "GIRLS"
	case Theme_THEME_GIVE:
		return "GIVE"
	case Theme_THEME_GO:
		return "GO"
	case Theme_THEME_GOD:
		return "GOD"
	case Theme_THEME_GOLD:
		return "GOLD"
	case Theme_THEME_GOLF:
		return "GOLF"
	case Theme_THEME_GOOD:
		return "GOOD"
	case Theme_THEME_GOODLIFE:
		return "GOODLIFE"
	case Theme_THEME_GOODNIGHT:
		return "GOODNIGHT"
	case Theme_THEME_GOSSIP:
		return "GOSSIP"
	case Theme_THEME_GOVERNMENT:
		return "GOVERNMENT"
	case Theme_THEME_GRANDPARENT:
		return "GRANDPARENT"
	case Theme_THEME_GRATITUDE:
		return "GRATITUDE"
	case Theme_THEME_GREATBRITAIN:
		return "GREATBRITAIN"
	case Theme_THEME_GREECE:
		return "GREECE"
	case Theme_THEME_GREED:
		return "GREED"
	case Theme_THEME_GREEN:
		return "GREEN"
	case Theme_THEME_GRENADA:
		return "GRENADA"
	case Theme_THEME_GREY:
		return "GREY"
	case Theme_THEME_GROWOLDER:
		return "GROWOLDER"
	case Theme_THEME_GROWUP:
		return "GROWUP"
	case Theme_THEME_GUATEMALA:
		return "GUATEMALA"
	case Theme_THEME_GUILT:
		return "GUILT"
	case Theme_THEME_GUINEA:
		return "GUINEA"
	case Theme_THEME_GUINEA_BISSAU:
		return "GUINEA_BISSAU"
	case Theme_THEME_GUITAR:
		return "GUITAR"
	case Theme_THEME_GUN:
		return "GUN"
	case Theme_THEME_GUYANA:
		return "GUYANA"
	case Theme_THEME_GYPSY:
		return "GYPSY"
	case Theme_THEME_HAIR:
		return "HAIR"
	case Theme_THEME_HAITI:
		return "HAITI"
	case Theme_THEME_HALLOWEEN:
		return "HALLOWEEN"
	case Theme_THEME_HANDS:
		return "HANDS"
	case Theme_THEME_HANDSOME:
		return "HANDSOME"
	case Theme_THEME_HANGOUT:
		return "HANGOUT"
	case Theme_THEME_HAPPINESS:
		return "HAPPINESS"
	case Theme_THEME_HARBOR:
		return "HARBOR"
	case Theme_THEME_HAT:
		return "HAT"
	case Theme_THEME_HATE:
		return "HATE"
	case Theme_THEME_HAVANA:
		return "HAVANA"
	case Theme_THEME_HAWAII:
		return "HAWAII"
	case Theme_THEME_HEAD:
		return "HEAD"
	case Theme_THEME_HEALING:
		return "HEALING"
	case Theme_THEME_HEALTHANDWELLNESS:
		return "HEALTHANDWELLNESS"
	case Theme_THEME_HEART:
		return "HEART"
	case Theme_THEME_HEARTACHE:
		return "HEARTACHE"
	case Theme_THEME_HEAVEN:
		return "HEAVEN"
	case Theme_THEME_HELL:
		return "HELL"
	case Theme_THEME_HELLO:
		return "HELLO"
	case Theme_THEME_HELP:
		return "HELP"
	case Theme_THEME_HERO:
		return "HERO"
	case Theme_THEME_HEROISM:
		return "HEROISM"
	case Theme_THEME_HIDE:
		return "HIDE"
	case Theme_THEME_HIGH:
		return "HIGH"
	case Theme_THEME_HIGHEST:
		return "HIGHEST"
	case Theme_THEME_HIGHLAND:
		return "HIGHLAND"
	case Theme_THEME_HIGHWAY:
		return "HIGHWAY"
	case Theme_THEME_HILLBILLY:
		return "HILLBILLY"
	case Theme_THEME_HILLS:
		return "HILLS"
	case Theme_THEME_HIPPIE:
		return "HIPPIE"
	case Theme_THEME_HIPS:
		return "HIPS"
	case Theme_THEME_HISTORY:
		return "HISTORY"
	case Theme_THEME_HOLDINGON:
		return "HOLDINGON"
	case Theme_THEME_HOLE:
		return "HOLE"
	case Theme_THEME_HOLIDAY:
		return "HOLIDAY"
	case Theme_THEME_HOLLAND:
		return "HOLLAND"
	case Theme_THEME_HOLLYWOOD:
		return "HOLLYWOOD"
	case Theme_THEME_HOME:
		return "HOME"
	case Theme_THEME_HONDURAS:
		return "HONDURAS"
	case Theme_THEME_HONESTY:
		return "HONESTY"
	case Theme_THEME_HONEYMOON:
		return "HONEYMOON"
	case Theme_THEME_HONGKONG:
		return "HONGKONG"
	case Theme_THEME_HOPE:
		return "HOPE"
	case Theme_THEME_HORN:
		return "HORN"
	case Theme_THEME_HORROR:
		return "HORROR"
	case Theme_THEME_HORSE:
		return "HORSE"
	case Theme_THEME_HORSERACING:
		return "HORSERACING"
	case Theme_THEME_HOSPITAL:
		return "HOSPITAL"
	case Theme_THEME_HOT:
		return "HOT"
	case Theme_THEME_HOTEL:
		return "HOTEL"
	case Theme_THEME_HOUSE:
		return "HOUSE"
	case Theme_THEME_HOUSTON:
		return "HOUSTON"
	case Theme_THEME_HUMAN:
		return "HUMAN"
	case Theme_THEME_HUNDRED:
		return "HUNDRED"
	case Theme_THEME_HUNGARY:
		return "HUNGARY"
	case Theme_THEME_HUSBAND:
		return "HUSBAND"
	case Theme_THEME_ICELAND:
		return "ICELAND"
	case Theme_THEME_IDAHO:
		return "IDAHO"
	case Theme_THEME_IDEA:
		return "IDEA"
	case Theme_THEME_IDEAL:
		return "IDEAL"
	case Theme_THEME_IDEAS:
		return "IDEAS"
	case Theme_THEME_IDENTITY:
		return "IDENTITY"
	case Theme_THEME_IDENTITYCRISIS:
		return "IDENTITYCRISIS"
	case Theme_THEME_IGNORANCE:
		return "IGNORANCE"
	case Theme_THEME_ILLINOIS:
		return "ILLINOIS"
	case Theme_THEME_IMMORTALITY:
		return "IMMORTALITY"
	case Theme_THEME_INCH:
		return "INCH"
	case Theme_THEME_INDEPENDENCE:
		return "INDEPENDENCE"
	case Theme_THEME_INDIA:
		return "INDIA"
	case Theme_THEME_INDIANA:
		return "INDIANA"
	case Theme_THEME_INDIVIDUALITY:
		return "INDIVIDUALITY"
	case Theme_THEME_INDONESIA:
		return "INDONESIA"
	case Theme_THEME_INFATUATED:
		return "INFATUATED"
	case Theme_THEME_INFORMATION:
		return "INFORMATION"
	case Theme_THEME_INFRONT:
		return "INFRONT"
	case Theme_THEME_INNOCENCE:
		return "INNOCENCE"
	case Theme_THEME_INSECT:
		return "INSECT"
	case Theme_THEME_INSECURE:
		return "INSECURE"
	case Theme_THEME_INSIGHT:
		return "INSIGHT"
	case Theme_THEME_INSOMNIA:
		return "INSOMNIA"
	case Theme_THEME_INSPIRATION:
		return "INSPIRATION"
	case Theme_THEME_INSULT:
		return "INSULT"
	case Theme_THEME_INTEGRITY:
		return "INTEGRITY"
	case Theme_THEME_INTENTION:
		return "INTENTION"
	case Theme_THEME_INTOXICATED:
		return "INTOXICATED"
	case Theme_THEME_INTROUBLE:
		return "INTROUBLE"
	case Theme_THEME_INVISIBLE:
		return "INVISIBLE"
	case Theme_THEME_IOWA:
		return "IOWA"
	case Theme_THEME_IRAN:
		return "IRAN"
	case Theme_THEME_IRAQ:
		return "IRAQ"
	case Theme_THEME_IRELAND:
		return "IRELAND"
	case Theme_THEME_ISLAND:
		return "ISLAND"
	case Theme_THEME_ISLEOFMAN:
		return "ISLEOFMAN"
	case Theme_THEME_ISRAEL:
		return "ISRAEL"
	case Theme_THEME_ITALY:
		return "ITALY"
	case Theme_THEME_IVORYCOAST:
		return "IVORYCOAST"
	case Theme_THEME_JAMAICA:
		return "JAMAICA"
	case Theme_THEME_JANUARY:
		return "JANUARY"
	case Theme_THEME_JAPAN:
		return "JAPAN"
	case Theme_THEME_JAVA:
		return "JAVA"
	case Theme_THEME_JEALOUS:
		return "JEALOUS"
	case Theme_THEME_JESUSCHRIST:
		return "JESUSCHRIST"
	case Theme_THEME_JEWELRY:
		return "JEWELRY"
	case Theme_THEME_JORDAN:
		return "JORDAN"
	case Theme_THEME_JUKEBOX:
		return "JUKEBOX"
	case Theme_THEME_JULY:
		return "JULY"
	case Theme_THEME_JUMP:
		return "JUMP"
	case Theme_THEME_JUNE:
		return "JUNE"
	case Theme_THEME_JUSTICE:
		return "JUSTICE"
	case Theme_THEME_KANGAROO:
		return "KANGAROO"
	case Theme_THEME_KANSAS:
		return "KANSAS"
	case Theme_THEME_KANSASCITY:
		return "KANSASCITY"
	case Theme_THEME_KARAOKE:
		return "KARAOKE"
	case Theme_THEME_KARMA:
		return "KARMA"
	case Theme_THEME_KAZAKHSTAN:
		return "KAZAKHSTAN"
	case Theme_THEME_KENTUCKY:
		return "KENTUCKY"
	case Theme_THEME_KENYA:
		return "KENYA"
	case Theme_THEME_KEYS:
		return "KEYS"
	case Theme_THEME_KIRIBATI:
		return "KIRIBATI"
	case Theme_THEME_KISS:
		return "KISS"
	case Theme_THEME_KNEES:
		return "KNEES"
	case Theme_THEME_KNOWLEDGE:
		return "KNOWLEDGE"
	case Theme_THEME_KUWAIT:
		return "KUWAIT"
	case Theme_THEME_KYRGYZSTAN:
		return "KYRGYZSTAN"
	case Theme_THEME_LAKE:
		return "LAKE"
	case Theme_THEME_LAOS:
		return "LAOS"
	case Theme_THEME_LASTING:
		return "LASTING"
	case Theme_THEME_LASTNIGHT:
		return "LASTNIGHT"
	case Theme_THEME_LASVEGAS:
		return "LASVEGAS"
	case Theme_THEME_LATE:
		return "LATE"
	case Theme_THEME_LATVIA:
		return "LATVIA"
	case Theme_THEME_LAUGHTER:
		return "LAUGHTER"
	case Theme_THEME_LAWANDORDER:
		return "LAWANDORDER"
	case Theme_THEME_LAWENFORCEMENT:
		return "LAWENFORCEMENT"
	case Theme_THEME_LAZY:
		return "LAZY"
	case Theme_THEME_LEADER:
		return "LEADER"
	case Theme_THEME_LEARN:
		return "LEARN"
	case Theme_THEME_LEAVE:
		return "LEAVE"
	case Theme_THEME_LEBANON:
		return "LEBANON"
	case Theme_THEME_LECTURING:
		return "LECTURING"
	case Theme_THEME_LEFT:
		return "LEFT"
	case Theme_THEME_LEGS:
		return "LEGS"
	case Theme_THEME_LESOTHO:
		return "LESOTHO"
	case Theme_THEME_LIBERIA:
		return "LIBERIA"
	case Theme_THEME_LIBYA:
		return "LIBYA"
	case Theme_THEME_LIECHTENSTEIN:
		return "LIECHTENSTEIN"
	case Theme_THEME_LIES:
		return "LIES"
	case Theme_THEME_LIGHT:
		return "LIGHT"
	case Theme_THEME_LIGHTHOUSE:
		return "LIGHTHOUSE"
	case Theme_THEME_LIGHTNING:
		return "LIGHTNING"
	case Theme_THEME_LION:
		return "LION"
	case Theme_THEME_LIPS:
		return "LIPS"
	case Theme_THEME_LISTENING:
		return "LISTENING"
	case Theme_THEME_LITHUANIA:
		return "LITHUANIA"
	case Theme_THEME_LIVING:
		return "LIVING"
	case Theme_THEME_LOCATION:
		return "LOCATION"
	case Theme_THEME_LOCK:
		return "LOCK"
	case Theme_THEME_LONDON:
		return "LONDON"
	case Theme_THEME_LONELY:
		return "LONELY"
	case Theme_THEME_LONGING:
		return "LONGING"
	case Theme_THEME_LOOK:
		return "LOOK"
	case Theme_THEME_LOSANGELES:
		return "LOSANGELES"
	case Theme_THEME_LOSINGYOU:
		return "LOSINGYOU"
	case Theme_THEME_LOSS:
		return "LOSS"
	case Theme_THEME_LOST:
		return "LOST"
	case Theme_THEME_LOSTTHATLOVINGFEELING:
		return "LOSTTHATLOVINGFEELING"
	case Theme_THEME_LOUISIANA:
		return "LOUISIANA"
	case Theme_THEME_LOVE:
		return "LOVE"
	case Theme_THEME_LOVELY:
		return "LOVELY"
	case Theme_THEME_LOW:
		return "LOW"
	case Theme_THEME_LOYALTY:
		return "LOYALTY"
	case Theme_THEME_LUCKY:
		return "LUCKY"
	case Theme_THEME_LUXEMBOURG:
		return "LUXEMBOURG"
	case Theme_THEME_MACAO:
		return "MACAO"
	case Theme_THEME_MADAGASCAR:
		return "MADAGASCAR"
	case Theme_THEME_MAGIC:
		return "MAGIC"
	case Theme_THEME_MAGICIAN:
		return "MAGICIAN"
	case Theme_THEME_MAIL:
		return "MAIL"
	case Theme_THEME_MAINE:
		return "MAINE"
	case Theme_THEME_MAKINGLOVE:
		return "MAKINGLOVE"
	case Theme_THEME_MALAWI:
		return "MALAWI"
	case Theme_THEME_MALAYSIA:
		return "MALAYSIA"
	case Theme_THEME_MALDIVES:
		return "MALDIVES"
	case Theme_THEME_MALI:
		return "MALI"
	case Theme_THEME_MALTA:
		return "MALTA"
	case Theme_THEME_MAMMAL:
		return "MAMMAL"
	case Theme_THEME_MANIPULATE:
		return "MANIPULATE"
	case Theme_THEME_MARCH:
		return "MARCH"
	case Theme_THEME_MARDIGRAS:
		return "MARDIGRAS"
	case Theme_THEME_MARRIEDLIFE:
		return "MARRIEDLIFE"
	case Theme_THEME_MARSHALLISLANDS:
		return "MARSHALLISLANDS"
	case Theme_THEME_MARYLAND:
		return "MARYLAND"
	case Theme_THEME_MASSACHUSETTS:
		return "MASSACHUSETTS"
	case Theme_THEME_MAURITANIA:
		return "MAURITANIA"
	case Theme_THEME_MAURITIUS:
		return "MAURITIUS"
	case Theme_THEME_MAY:
		return "MAY"
	case Theme_THEME_ME:
		return "ME"
	case Theme_THEME_MEAN:
		return "MEAN"
	case Theme_THEME_MEASUREMENT:
		return "MEASUREMENT"
	case Theme_THEME_MEDELLN:
		return "MEDELLN"
	case Theme_THEME_MEDICAL:
		return "MEDICAL"
	case Theme_THEME_MEDITATION:
		return "MEDITATION"
	case Theme_THEME_MEMORY:
		return "MEMORY"
	case Theme_THEME_MEMPHIS:
		return "MEMPHIS"
	case Theme_THEME_MEN:
		return "MEN"
	case Theme_THEME_MENSNAMES:
		return "MENSNAMES"
	case Theme_THEME_MENTALILLNESS:
		return "MENTALILLNESS"
	case Theme_THEME_MENTALITY:
		return "MENTALITY"
	case Theme_THEME_MENTALKINGTOMEN:
		return "MENTALKINGTOMEN"
	case Theme_THEME_MENTALKINGTOWOMEN:
		return "MENTALKINGTOWOMEN"
	case Theme_THEME_MERCY:
		return "MERCY"
	case Theme_THEME_METHOD:
		return "METHOD"
	case Theme_THEME_MEXICO:
		return "MEXICO"
	case Theme_THEME_MIAMI:
		return "MIAMI"
	case Theme_THEME_MICHIGAN:
		return "MICHIGAN"
	case Theme_THEME_MICRONESIA:
		return "MICRONESIA"
	case Theme_THEME_MIDDLEEAST:
		return "MIDDLEEAST"
	case Theme_THEME_MIDNIGHT:
		return "MIDNIGHT"
	case Theme_THEME_MILE:
		return "MILE"
	case Theme_THEME_MILITARY:
		return "MILITARY"
	case Theme_THEME_MILLION:
		return "MILLION"
	case Theme_THEME_MIND:
		return "MIND"
	case Theme_THEME_MINE:
		return "MINE"
	case Theme_THEME_MINNESOTA:
		return "MINNESOTA"
	case Theme_THEME_MIRACLE:
		return "MIRACLE"
	case Theme_THEME_MISBEHAVIOR:
		return "MISBEHAVIOR"
	case Theme_THEME_MISPLACE:
		return "MISPLACE"
	case Theme_THEME_MISSINGYOU:
		return "MISSINGYOU"
	case Theme_THEME_MISSISSIPPI:
		return "MISSISSIPPI"
	case Theme_THEME_MISSOURI:
		return "MISSOURI"
	case Theme_THEME_MISTAKES:
		return "MISTAKES"
	case Theme_THEME_MOBILE:
		return "MOBILE"
	case Theme_THEME_MOLDOVA:
		return "MOLDOVA"
	case Theme_THEME_MONACO:
		return "MONACO"
	case Theme_THEME_MONDAY:
		return "MONDAY"
	case Theme_THEME_MONEY:
		return "MONEY"
	case Theme_THEME_MONGOLIA:
		return "MONGOLIA"
	case Theme_THEME_MONKEY:
		return "MONKEY"
	case Theme_THEME_MONSTER:
		return "MONSTER"
	case Theme_THEME_MONTANA:
		return "MONTANA"
	case Theme_THEME_MONTENEGRO:
		return "MONTENEGRO"
	case Theme_THEME_MONTH:
		return "MONTH"
	case Theme_THEME_MOON:
		return "MOON"
	case Theme_THEME_MORALITY:
		return "MORALITY"
	case Theme_THEME_MORNING:
		return "MORNING"
	case Theme_THEME_MOROCCO:
		return "MOROCCO"
	case Theme_THEME_MOSCOW:
		return "MOSCOW"
	case Theme_THEME_MOTHER:
		return "MOTHER"
	case Theme_THEME_MOTION:
		return "MOTION"
	case Theme_THEME_MOTIVATION:
		return "MOTIVATION"
	case Theme_THEME_MOTORCYCLES:
		return "MOTORCYCLES"
	case Theme_THEME_MOUNTAIN:
		return "MOUNTAIN"
	case Theme_THEME_MOURNING:
		return "MOURNING"
	case Theme_THEME_MOUSE:
		return "MOUSE"
	case Theme_THEME_MOUTH:
		return "MOUTH"
	case Theme_THEME_MOVE:
		return "MOVE"
	case Theme_THEME_MOVIE:
		return "MOVIE"
	case Theme_THEME_MOVINGON:
		return "MOVINGON"
	case Theme_THEME_MOZAMBIQUE:
		return "MOZAMBIQUE"
	case Theme_THEME_MULE:
		return "MULE"
	case Theme_THEME_MULTIPLEBODYPARTS:
		return "MULTIPLEBODYPARTS"
	case Theme_THEME_MURDER:
		return "MURDER"
	case Theme_THEME_MUSIC:
		return "MUSIC"
	case Theme_THEME_MUSICALINSTRUMENT:
		return "MUSICALINSTRUMENT"
	case Theme_THEME_MUSICBUSINESS:
		return "MUSICBUSINESS"
	case Theme_THEME_MYANMAR:
		return "MYANMAR"
	case Theme_THEME_MYSTERY:
		return "MYSTERY"
	case Theme_THEME_NAMIBIA:
		return "NAMIBIA"
	case Theme_THEME_NASHVILLE:
		return "NASHVILLE"
	case Theme_THEME_NATURE:
		return "NATURE"
	case Theme_THEME_NAURU:
		return "NAURU"
	case Theme_THEME_NEAR:
		return "NEAR"
	case Theme_THEME_NEBRASKA:
		return "NEBRASKA"
	case Theme_THEME_NECK:
		return "NECK"
	case Theme_THEME_NEED:
		return "NEED"
	case Theme_THEME_NEPAL:
		return "NEPAL"
	case Theme_THEME_NERVOUS:
		return "NERVOUS"
	case Theme_THEME_NETHERLANDS:
		return "NETHERLANDS"
	case Theme_THEME_NEVADA:
		return "NEVADA"
	case Theme_THEME_NEW:
		return "NEW"
	case Theme_THEME_NEWDAY:
		return "NEWDAY"
	case Theme_THEME_NEWHAMPSHIRE:
		return "NEWHAMPSHIRE"
	case Theme_THEME_NEWJERSEY:
		return "NEWJERSEY"
	case Theme_THEME_NEWMEXICO:
		return "NEWMEXICO"
	case Theme_THEME_NEWORLEANS:
		return "NEWORLEANS"
	case Theme_THEME_NEWS:
		return "NEWS"
	case Theme_THEME_NEWYEAR:
		return "NEWYEAR"
	case Theme_THEME_NEWYORK:
		return "NEWYORK"
	case Theme_THEME_NEWYORKCITY:
		return "NEWYORKCITY"
	case Theme_THEME_NEWZEALAND:
		return "NEWZEALAND"
	case Theme_THEME_NICARAGUA:
		return "NICARAGUA"
	case Theme_THEME_NIGER:
		return "NIGER"
	case Theme_THEME_NIGERIA:
		return "NIGERIA"
	case Theme_THEME_NIGHT:
		return "NIGHT"
	case Theme_THEME_NIGHTINGALE:
		return "NIGHTINGALE"
	case Theme_THEME_NIGHTMARE:
		return "NIGHTMARE"
	case Theme_THEME_NONE:
		return "NONE"
	case Theme_THEME_NONROMANTIC:
		return "NONROMANTIC"
	case Theme_THEME_NOON:
		return "NOON"
	case Theme_THEME_NORTH:
		return "NORTH"
	case Theme_THEME_NORTHAMERICA:
		return "NORTHAMERICA"
	case Theme_THEME_NORTHDAKOTA:
		return "NORTHDAKOTA"
	case Theme_THEME_NORTHKOREA:
		return "NORTHKOREA"
	case Theme_THEME_NORTHMACEDONIA:
		return "NORTHMACEDONIA"
	case Theme_THEME_NORWAY:
		return "NORWAY"
	case Theme_THEME_NOSTALGIA:
		return "NOSTALGIA"
	case Theme_THEME_NOTCOMMITTED:
		return "NOTCOMMITTED"
	case Theme_THEME_NOTMYTYPE:
		return "NOTMYTYPE"
	case Theme_THEME_NOVEMBER:
		return "NOVEMBER"
	case Theme_THEME_NOW:
		return "NOW"
	case Theme_THEME_NUCLEARENERGY:
		return "NUCLEARENERGY"
	case Theme_THEME_NUCLEARWAR:
		return "NUCLEARWAR"
	case Theme_THEME_NUMBER:
		return "NUMBER"
	case Theme_THEME_OBJECTS:
		return "OBJECTS"
	case Theme_THEME_OBSESSION:
		return "OBSESSION"
	case Theme_THEME_OCEAN:
		return "OCEAN"
	case Theme_THEME_OCEANIA:
		return "OCEANIA"
	case Theme_THEME_OCTOBER:
		return "OCTOBER"
	case Theme_THEME_OHIO:
		return "OHIO"
	case Theme_THEME_OKLAHOMA:
		return "OKLAHOMA"
	case Theme_THEME_OLD:
		return "OLD"
	case Theme_THEME_OLYMPICS:
		return "OLYMPICS"
	case Theme_THEME_OMAN:
		return "OMAN"
	case Theme_THEME_ONENIGHTSTAND:
		return "ONENIGHTSTAND"
	case Theme_THEME_OPINIONS:
		return "OPINIONS"
	case Theme_THEME_OPPORTUNITY:
		return "OPPORTUNITY"
	case Theme_THEME_OPPRESSION:
		return "OPPRESSION"
	case Theme_THEME_OPTIMISM:
		return "OPTIMISM"
	case Theme_THEME_ORANGE:
		return "ORANGE"
	case Theme_THEME_OREGON:
		return "OREGON"
	case Theme_THEME_ORPHAN:
		return "ORPHAN"
	case Theme_THEME_OUTDOOR:
		return "OUTDOOR"
	case Theme_THEME_OUTLAW:
		return "OUTLAW"
	case Theme_THEME_PACIFICISLANDS:
		return "PACIFICISLANDS"
	case Theme_THEME_PAD:
		return "PAD"
	case Theme_THEME_PAIN:
		return "PAIN"
	case Theme_THEME_PAKISTAN:
		return "PAKISTAN"
	case Theme_THEME_PALAU:
		return "PALAU"
	case Theme_THEME_PANAMA:
		return "PANAMA"
	case Theme_THEME_PANIC:
		return "PANIC"
	case Theme_THEME_PAPER:
		return "PAPER"
	case Theme_THEME_PAPUANEWGUINEA:
		return "PAPUANEWGUINEA"
	case Theme_THEME_PARADE:
		return "PARADE"
	case Theme_THEME_PARAGUAY:
		return "PARAGUAY"
	case Theme_THEME_PARENT:
		return "PARENT"
	case Theme_THEME_PARIS:
		return "PARIS"
	case Theme_THEME_PARK:
		return "PARK"
	case Theme_THEME_PARTY:
		return "PARTY"
	case Theme_THEME_PAST:
		return "PAST"
	case Theme_THEME_PATIENCE:
		return "PATIENCE"
	case Theme_THEME_PATRIOTISM:
		return "PATRIOTISM"
	case Theme_THEME_PAW:
		return "PAW"
	case Theme_THEME_PEACE:
		return "PEACE"
	case Theme_THEME_PENNSYLVANIA:
		return "PENNSYLVANIA"
	case Theme_THEME_PEOPLE:
		return "PEOPLE"
	case Theme_THEME_PERCUSSION:
		return "PERCUSSION"
	case Theme_THEME_PERFECTION:
		return "PERFECTION"
	case Theme_THEME_PERSEVERE:
		return "PERSEVERE"
	case Theme_THEME_PERU:
		return "PERU"
	case Theme_THEME_PHARMACEUTICAL:
		return "PHARMACEUTICAL"
	case Theme_THEME_PHILADELPHIA:
		return "PHILADELPHIA"
	case Theme_THEME_PHILIPPINES:
		return "PHILIPPINES"
	case Theme_THEME_PHILOSOPHY:
		return "PHILOSOPHY"
	case Theme_THEME_PHONE:
		return "PHONE"
	case Theme_THEME_PHOTOGRAPH:
		return "PHOTOGRAPH"
	case Theme_THEME_PHYSICALPAIN:
		return "PHYSICALPAIN"
	case Theme_THEME_PIANO:
		return "PIANO"
	case Theme_THEME_PIG:
		return "PIG"
	case Theme_THEME_PINK:
		return "PINK"
	case Theme_THEME_PIRATE:
		return "PIRATE"
	case Theme_THEME_PLACE:
		return "PLACE"
	case Theme_THEME_PLANET:
		return "PLANET"
	case Theme_THEME_PLATONIC:
		return "PLATONIC"
	case Theme_THEME_PLAYER:
		return "PLAYER"
	case Theme_THEME_PLAYMUSIC:
		return "PLAYMUSIC"
	case Theme_THEME_PLEASE:
		return "PLEASE"
	case Theme_THEME_POISON:
		return "POISON"
	case Theme_THEME_POLAND:
		return "POLAND"
	case Theme_THEME_POLITICAL:
		return "POLITICAL"
	case Theme_THEME_POLITICALSTATE:
		return "POLITICALSTATE"
	case Theme_THEME_POLITICS:
		return "POLITICS"
	case Theme_THEME_POLYNESIA:
		return "POLYNESIA"
	case Theme_THEME_PONY:
		return "PONY"
	case Theme_THEME_PORPOISE:
		return "PORPOISE"
	case Theme_THEME_PORTUGAL:
		return "PORTUGAL"
	case Theme_THEME_POSSESSED:
		return "POSSESSED"
	case Theme_THEME_POSSIBILITY:
		return "POSSIBILITY"
	case Theme_THEME_POVERTY:
		return "POVERTY"
	case Theme_THEME_POWERANDCONTROL:
		return "POWERANDCONTROL"
	case Theme_THEME_PRAIRIE:
		return "PRAIRIE"
	case Theme_THEME_PRAYER:
		return "PRAYER"
	case Theme_THEME_PREGNANCY:
		return "PREGNANCY"
	case Theme_THEME_PREJUDICE:
		return "PREJUDICE"
	case Theme_THEME_PRESENT:
		return "PRESENT"
	case Theme_THEME_PRESIDENT:
		return "PRESIDENT"
	case Theme_THEME_PRETTY:
		return "PRETTY"
	case Theme_THEME_PRIDE:
		return "PRIDE"
	case Theme_THEME_PRISON:
		return "PRISON"
	case Theme_THEME_PRIVACY:
		return "PRIVACY"
	case Theme_THEME_PROBLEMS:
		return "PROBLEMS"
	case Theme_THEME_PRODUCTANDBRAND:
		return "PRODUCTANDBRAND"
	case Theme_THEME_PROMISE:
		return "PROMISE"
	case Theme_THEME_PROPHECY:
		return "PROPHECY"
	case Theme_THEME_PROTECT:
		return "PROTECT"
	case Theme_THEME_PROTEST:
		return "PROTEST"
	case Theme_THEME_PUERTORICO:
		return "PUERTORICO"
	case Theme_THEME_PURPLE:
		return "PURPLE"
	case Theme_THEME_QATAR:
		return "QATAR"
	case Theme_THEME_QUALITY:
		return "QUALITY"
	case Theme_THEME_QUESTION:
		return "QUESTION"
	case Theme_THEME_QUESTIONING:
		return "QUESTIONING"
	case Theme_THEME_RABBIT:
		return "RABBIT"
	case Theme_THEME_RACISM:
		return "RACISM"
	case Theme_THEME_RADIO:
		return "RADIO"
	case Theme_THEME_RAIN:
		return "RAIN"
	case Theme_THEME_RAINBOW:
		return "RAINBOW"
	case Theme_THEME_RANCH:
		return "RANCH"
	case Theme_THEME_RAPGAME:
		return "RAPGAME"
	case Theme_THEME_RAT:
		return "RAT"
	case Theme_THEME_READY:
		return "READY"
	case Theme_THEME_REAL:
		return "REAL"
	case Theme_THEME_REAR:
		return "REAR"
	case Theme_THEME_REBELLION:
		return "REBELLION"
	case Theme_THEME_RECOVERY:
		return "RECOVERY"
	case Theme_THEME_RED:
		return "RED"
	case Theme_THEME_REDEMPTION:
		return "REDEMPTION"
	case Theme_THEME_REDHEAD:
		return "REDHEAD"
	case Theme_THEME_REFLECT:
		return "REFLECT"
	case Theme_THEME_REGRET:
		return "REGRET"
	case Theme_THEME_REHAB:
		return "REHAB"
	case Theme_THEME_REJECTION:
		return "REJECTION"
	case Theme_THEME_RELAX:
		return "RELAX"
	case Theme_THEME_RELIGION:
		return "RELIGION"
	case Theme_THEME_REMEMBER:
		return "REMEMBER"
	case Theme_THEME_REPEAT:
		return "REPEAT"
	case Theme_THEME_REPTILE:
		return "REPTILE"
	case Theme_THEME_REPUBLICOFTHECONGO:
		return "REPUBLICOFTHECONGO"
	case Theme_THEME_RESCUE:
		return "RESCUE"
	case Theme_THEME_RESILIENT:
		return "RESILIENT"
	case Theme_THEME_RESPECT:
		return "RESPECT"
	case Theme_THEME_RESTAURANT:
		return "RESTAURANT"
	case Theme_THEME_RETURN:
		return "RETURN"
	case Theme_THEME_REUNITE:
		return "REUNITE"
	case Theme_THEME_REVENGE:
		return "REVENGE"
	case Theme_THEME_REVOLUTION:
		return "REVOLUTION"
	case Theme_THEME_REVOLVE:
		return "REVOLVE"
	case Theme_THEME_RHODEISLAND:
		return "RHODEISLAND"
	case Theme_THEME_RHYTHM:
		return "RHYTHM"
	case Theme_THEME_RIDE:
		return "RIDE"
	case Theme_THEME_RIGHT:
		return "RIGHT"
	case Theme_THEME_RIODEJANEIRO:
		return "RIODEJANEIRO"
	case Theme_THEME_RISK:
		return "RISK"
	case Theme_THEME_RIVER:
		return "RIVER"
	case Theme_THEME_ROAD:
		return "ROAD"
	case Theme_THEME_ROADACCIDENT:
		return "ROADACCIDENT"
	case Theme_THEME_ROADTRIP:
		return "ROADTRIP"
	case Theme_THEME_ROBOT:
		return "ROBOT"
	case Theme_THEME_ROCK:
		return "ROCK"
	case Theme_THEME_RODEO:
		return "RODEO"
	case Theme_THEME_ROMANCE:
		return "ROMANCE"
	case Theme_THEME_ROMANIA:
		return "ROMANIA"
	case Theme_THEME_ROMANTIC:
		return "ROMANTIC"
	case Theme_THEME_ROME:
		return "ROME"
	case Theme_THEME_ROYALTY:
		return "ROYALTY"
	case Theme_THEME_RUN:
		return "RUN"
	case Theme_THEME_RUSSIA:
		return "RUSSIA"
	case Theme_THEME_RWANDA:
		return "RWANDA"
	case Theme_THEME_SAD:
		return "SAD"
	case Theme_THEME_SAFETY:
		return "SAFETY"
	case Theme_THEME_SAIL:
		return "SAIL"
	case Theme_THEME_SAINTKITTSANDNEVIS:
		return "SAINTKITTSANDNEVIS"
	case Theme_THEME_SAINTLUCIA:
		return "SAINTLUCIA"
	case Theme_THEME_SAINTVINCENTANDTHEGRENADINES:
		return "SAINTVINCENTANDTHEGRENADINES"
	case Theme_THEME_SALTLAKECITY:
		return "SALTLAKECITY"
	case Theme_THEME_SAME:
		return "SAME"
	case Theme_THEME_SAMOA:
		return "SAMOA"
	case Theme_THEME_SANANTONIO:
		return "SANANTONIO"
	case Theme_THEME_SANFRANCISCO:
		return "SANFRANCISCO"
	case Theme_THEME_SANMARINO:
		return "SANMARINO"
	case Theme_THEME_SANTACLAUS:
		return "SANTACLAUS"
	case Theme_THEME_SANTAFE:
		return "SANTAFE"
	case Theme_THEME_SAOTOMEANDPRINCIPE:
		return "SAOTOMEANDPRINCIPE"
	case Theme_THEME_SATISFACTION:
		return "SATISFACTION"
	case Theme_THEME_SATURDAY:
		return "SATURDAY"
	case Theme_THEME_SAUDIARABIA:
		return "SAUDIARABIA"
	case Theme_THEME_SAVANNAH:
		return "SAVANNAH"
	case Theme_THEME_SAVE:
		return "SAVE"
	case Theme_THEME_SCANDINAVIA:
		return "SCANDINAVIA"
	case Theme_THEME_SCHOOL:
		return "SCHOOL"
	case Theme_THEME_SCOTLAND:
		return "SCOTLAND"
	case Theme_THEME_SCREAM:
		return "SCREAM"
	case Theme_THEME_SEA:
		return "SEA"
	case Theme_THEME_SEARCH:
		return "SEARCH"
	case Theme_THEME_SEARCHINGFOR:
		return "SEARCHINGFOR"
	case Theme_THEME_SEASON:
		return "SEASON"
	case Theme_THEME_SECRETS:
		return "SECRETS"
	case Theme_THEME_SEDUCED:
		return "SEDUCED"
	case Theme_THEME_SEGREGATION:
		return "SEGREGATION"
	case Theme_THEME_SENEGAL:
		return "SENEGAL"
	case Theme_THEME_SENSUALITY:
		return "SENSUALITY"
	case Theme_THEME_SEPTEMBER:
		return "SEPTEMBER"
	case Theme_THEME_SERBIA:
		return "SERBIA"
	case Theme_THEME_SEYCHELLES:
		return "SEYCHELLES"
	case Theme_THEME_SHAKE:
		return "SHAKE"
	case Theme_THEME_SHAME:
		return "SHAME"
	case Theme_THEME_SHARK:
		return "SHARK"
	case Theme_THEME_SHEEP:
		return "SHEEP"
	case Theme_THEME_SHELTER:
		return "SHELTER"
	case Theme_THEME_SHINE:
		return "SHINE"
	case Theme_THEME_SHIP:
		return "SHIP"
	case Theme_THEME_SHOE:
		return "SHOE"
	case Theme_THEME_SHOOT:
		return "SHOOT"
	case Theme_THEME_SHOPPING:
		return "SHOPPING"
	case Theme_THEME_SHOULDER:
		return "SHOULDER"
	case Theme_THEME_SHOULDHAVESAID:
		return "SHOULDHAVESAID"
	case Theme_THEME_SHOUTING:
		return "SHOUTING"
	case Theme_THEME_SHOWBIZ:
		return "SHOWBIZ"
	case Theme_THEME_SHY:
		return "SHY"
	case Theme_THEME_SIERRALEONE:
		return "SIERRALEONE"
	case Theme_THEME_SIGNS:
		return "SIGNS"
	case Theme_THEME_SILENCE:
		return "SILENCE"
	case Theme_THEME_SILVER:
		return "SILVER"
	case Theme_THEME_SIMPLE:
		return "SIMPLE"
	case Theme_THEME_SIN:
		return "SIN"
	case Theme_THEME_SING:
		return "SING"
	case Theme_THEME_SINGAPORE:
		return "SINGAPORE"
	case Theme_THEME_SINGLEPARENT:
		return "SINGLEPARENT"
	case Theme_THEME_SINGLEPERSON:
		return "SINGLEPERSON"
	case Theme_THEME_SISTER:
		return "SISTER"
	case Theme_THEME_SIT:
		return "SIT"
	case Theme_THEME_SITUATION:
		return "SITUATION"
	case Theme_THEME_SIZE:
		return "SIZE"
	case Theme_THEME_SKATE:
		return "SKATE"
	case Theme_THEME_SKATEBOARD:
		return "SKATEBOARD"
	case Theme_THEME_SKI:
		return "SKI"
	case Theme_THEME_SKIN:
		return "SKIN"
	case Theme_THEME_SKY:
		return "SKY"
	case Theme_THEME_SLAVERY:
		return "SLAVERY"
	case Theme_THEME_SLEAZY:
		return "SLEAZY"
	case Theme_THEME_SLEEP:
		return "SLEEP"
	case Theme_THEME_SLOVAKIA:
		return "SLOVAKIA"
	case Theme_THEME_SLOVENIA:
		return "SLOVENIA"
	case Theme_THEME_SLOW:
		return "SLOW"
	case Theme_THEME_SMALL:
		return "SMALL"
	case Theme_THEME_SMALLTOWNLIFE:
		return "SMALLTOWNLIFE"
	case Theme_THEME_SMART:
		return "SMART"
	case Theme_THEME_SMILE:
		return "SMILE"
	case Theme_THEME_SMOKE:
		return "SMOKE"
	case Theme_THEME_SNAKE:
		return "SNAKE"
	case Theme_THEME_SNOW:
		return "SNOW"
	case Theme_THEME_SNOWMAN:
		return "SNOWMAN"
	case Theme_THEME_SOBER:
		return "SOBER"
	case Theme_THEME_SOCIALOUTCAST:
		return "SOCIALOUTCAST"
	case Theme_THEME_SOLITUDE:
		return "SOLITUDE"
	case Theme_THEME_SOLOMONISLANDS:
		return "SOLOMONISLANDS"
	case Theme_THEME_SOMALIA:
		return "SOMALIA"
	case Theme_THEME_SON:
		return "SON"
	case Theme_THEME_SOUNDS:
		return "SOUNDS"
	case Theme_THEME_SOUTH:
		return "SOUTH"
	case Theme_THEME_SOUTHAFRICA:
		return "SOUTHAFRICA"
	case Theme_THEME_SOUTHAMERICA:
		return "SOUTHAMERICA"
	case Theme_THEME_SOUTHDAKOTA:
		return "SOUTHDAKOTA"
	case Theme_THEME_SOUTHEASTASIA:
		return "SOUTHEASTASIA"
	case Theme_THEME_SOUTHKOREA:
		return "SOUTHKOREA"
	case Theme_THEME_SOUTHSUDAN:
		return "SOUTHSUDAN"
	case Theme_THEME_SPACEDOUT:
		return "SPACEDOUT"
	case Theme_THEME_SPAIN:
		return "SPAIN"
	case Theme_THEME_SPECIAL:
		return "SPECIAL"
	case Theme_THEME_SPECIFICAGE:
		return "SPECIFICAGE"
	case Theme_THEME_SPECIFICTIME:
		return "SPECIFICTIME"
	case Theme_THEME_SPEED:
		return "SPEED"
	case Theme_THEME_SPIDER:
		return "SPIDER"
	case Theme_THEME_SPIRIT:
		return "SPIRIT"
	case Theme_THEME_SPORT:
		return "SPORT"
	case Theme_THEME_SPRING:
		return "SPRING"
	case Theme_THEME_SRILANKA:
		return "SRILANKA"
	case Theme_THEME_ST_LOUIS:
		return "ST_LOUIS"
	case Theme_THEME_STALKER:
		return "STALKER"
	case Theme_THEME_STAND:
		return "STAND"
	case Theme_THEME_STAR:
		return "STAR"
	case Theme_THEME_START:
		return "START"
	case Theme_THEME_STEAL:
		return "STEAL"
	case Theme_THEME_STEPPARENT:
		return "STEPPARENT"
	case Theme_THEME_STICK:
		return "STICK"
	case Theme_THEME_STOP:
		return "STOP"
	case Theme_THEME_STORM:
		return "STORM"
	case Theme_THEME_STORYBOOKCHARACTER:
		return "STORYBOOKCHARACTER"
	case Theme_THEME_STRANGE:
		return "STRANGE"
	case Theme_THEME_STREET:
		return "STREET"
	case Theme_THEME_STRESS:
		return "STRESS"
	case Theme_THEME_STRING:
		return "STRING"
	case Theme_THEME_STRINGANDROPE:
		return "STRINGANDROPE"
	case Theme_THEME_STRONG:
		return "STRONG"
	case Theme_THEME_STUBBORN:
		return "STUBBORN"
	case Theme_THEME_STUPID:
		return "STUPID"
	case Theme_THEME_STYLE:
		return "STYLE"
	case Theme_THEME_SUBSTANCES:
		return "SUBSTANCES"
	case Theme_THEME_SUCCESS:
		return "SUCCESS"
	case Theme_THEME_SUDAN:
		return "SUDAN"
	case Theme_THEME_SUFFRAGE:
		return "SUFFRAGE"
	case Theme_THEME_SUICIDE:
		return "SUICIDE"
	case Theme_THEME_SUMMER:
		return "SUMMER"
	case Theme_THEME_SUN:
		return "SUN"
	case Theme_THEME_SUNDAY:
		return "SUNDAY"
	case Theme_THEME_SUNRISE:
		return "SUNRISE"
	case Theme_THEME_SUNSHINE:
		return "SUNSHINE"
	case Theme_THEME_SUPERHERO:
		return "SUPERHERO"
	case Theme_THEME_SUPERIORITY:
		return "SUPERIORITY"
	case Theme_THEME_SUPERNATURAL:
		return "SUPERNATURAL"
	case Theme_THEME_SUPPORT:
		return "SUPPORT"
	case Theme_THEME_SURF:
		return "SURF"
	case Theme_THEME_SURINAME:
		return "SURINAME"
	case Theme_THEME_SURPRISEPARTY:
		return "SURPRISEPARTY"
	case Theme_THEME_SURVIVE:
		return "SURVIVE"
	case Theme_THEME_SWAGGER:
		return "SWAGGER"
	case Theme_THEME_SWAMP:
		return "SWAMP"
	case Theme_THEME_SWEDEN:
		return "SWEDEN"
	case Theme_THEME_SWEET:
		return "SWEET"
	case Theme_THEME_SWIM:
		return "SWIM"
	case Theme_THEME_SWITZERLAND:
		return "SWITZERLAND"
	case Theme_THEME_SYMPATHY:
		return "SYMPATHY"
	case Theme_THEME_SYNTHESIZER:
		return "SYNTHESIZER"
	case Theme_THEME_SYRIA:
		return "SYRIA"
	case Theme_THEME_TAIWAN:
		return "TAIWAN"
	case Theme_THEME_TAJIKISTAN:
		return "TAJIKISTAN"
	case Theme_THEME_TAKEMEBACK:
		return "TAKEMEBACK"
	case Theme_THEME_TALKING:
		return "TALKING"
	case Theme_THEME_TALL:
		return "TALL"
	case Theme_THEME_TANZANIA:
		return "TANZANIA"
	case Theme_THEME_TAROT:
		return "TAROT"
	case Theme_THEME_TATTOO:
		return "TATTOO"
	case Theme_THEME_TAXI:
		return "TAXI"
	case Theme_THEME_TEACH:
		return "TEACH"
	case Theme_THEME_TECHNOLOGY:
		return "TECHNOLOGY"
	case Theme_THEME_TEETH:
		return "TEETH"
	case Theme_THEME_TELEVISION:
		return "TELEVISION"
	case Theme_THEME_TELL:
		return "TELL"
	case Theme_THEME_TEMPERATURE:
		return "TEMPERATURE"
	case Theme_THEME_TEMPTATION:
		return "TEMPTATION"
	case Theme_THEME_TENNESSEE:
		return "TENNESSEE"
	case Theme_THEME_TERRIBLE:
		return "TERRIBLE"
	case Theme_THEME_TEXAS:
		return "TEXAS"
	case Theme_THEME_TEXTMESSAGE:
		return "TEXTMESSAGE"
	case Theme_THEME_THAILAND:
		return "THAILAND"
	case Theme_THEME_THEATRE:
		return "THEATRE"
	case Theme_THEME_THEM:
		return "THEM"
	case Theme_THEME_THIN:
		return "THIN"
	case Theme_THEME_THOUSAND:
		return "THOUSAND"
	case Theme_THEME_THREATEN:
		return "THREATEN"
	case Theme_THEME_THREEKINGS:
		return "THREEKINGS"
	case Theme_THEME_THURSDAY:
		return "THURSDAY"
	case Theme_THEME_TIBET:
		return "TIBET"
	case Theme_THEME_TIGER:
		return "TIGER"
	case Theme_THEME_TIME:
		return "TIME"
	case Theme_THEME_TIMEOFDAY:
		return "TIMEOFDAY"
	case Theme_THEME_TIMOR_LESTE:
		return "TIMOR_LESTE"
	case Theme_THEME_TOBACCO:
		return "TOBACCO"
	case Theme_THEME_TODAY:
		return "TODAY"
	case Theme_THEME_TOGETHERNESS:
		return "TOGETHERNESS"
	case Theme_THEME_TOGO:
		return "TOGO"
	case Theme_THEME_TOKYO:
		return "TOKYO"
	case Theme_THEME_TOMORROW:
		return "TOMORROW"
	case Theme_THEME_TONGA:
		return "TONGA"
	case Theme_THEME_TONGUE:
		return "TONGUE"
	case Theme_THEME_TONIGHT:
		return "TONIGHT"
	case Theme_THEME_TOOLS:
		return "TOOLS"
	case Theme_THEME_TORN:
		return "TORN"
	case Theme_THEME_TOY:
		return "TOY"
	case Theme_THEME_TRADITION:
		return "TRADITION"
	case Theme_THEME_TRAGEDY:
		return "TRAGEDY"
	case Theme_THEME_TRAIL:
		return "TRAIL"
	case Theme_THEME_TRAINS:
		return "TRAINS"
	case Theme_THEME_TRANSPORTATION:
		return "TRANSPORTATION"
	case Theme_THEME_TRAPPED:
		return "TRAPPED"
	case Theme_THEME_TRAVEL:
		return "TRAVEL"
	case Theme_THEME_TREE:
		return "TREE"
	case Theme_THEME_TRINIDADANDTOBAGO:
		return "TRINIDADANDTOBAGO"
	case Theme_THEME_TROUBLE:
		return "TROUBLE"
	case Theme_THEME_TRUCKS:
		return "TRUCKS"
	case Theme_THEME_TRUMPET:
		return "TRUMPET"
	case Theme_THEME_TRUST:
		return "TRUST"
	case Theme_THEME_TRUTH:
		return "TRUTH"
	case Theme_THEME_TRY:
		return "TRY"
	case Theme_THEME_TUESDAY:
		return "TUESDAY"
	case Theme_THEME_TULSA:
		return "TULSA"
	case Theme_THEME_TUNISIA:
		return "TUNISIA"
	case Theme_THEME_TURKEY:
		return "TURKEY"
	case Theme_THEME_TURKMENISTAN:
		return "TURKMENISTAN"
	case Theme_THEME_TURN:
		return "TURN"
	case Theme_THEME_TUVALU:
		return "TUVALU"
	case Theme_THEME_UFO:
		return "UFO"
	case Theme_THEME_UGANDA:
		return "UGANDA"
	case Theme_THEME_UGLY:
		return "UGLY"
	case Theme_THEME_UKRAINE:
		return "UKRAINE"
	case Theme_THEME_UNBELIEVABLE:
		return "UNBELIEVABLE"
	case Theme_THEME_UNCLE:
		return "UNCLE"
	case Theme_THEME_UNDERSTANDING:
		return "UNDERSTANDING"
	case Theme_THEME_UNFAIR:
		return "UNFAIR"
	case Theme_THEME_UNFAITHFUL:
		return "UNFAITHFUL"
	case Theme_THEME_UNION:
		return "UNION"
	case Theme_THEME_UNIQUE:
		return "UNIQUE"
	case Theme_THEME_UNITEDARABEMIRATES:
		return "UNITEDARABEMIRATES"
	case Theme_THEME_UNITEDKINGDOM:
		return "UNITEDKINGDOM"
	case Theme_THEME_UNITEDSTATES:
		return "UNITEDSTATES"
	case Theme_THEME_UNITY:
		return "UNITY"
	case Theme_THEME_UNIVERSE:
		return "UNIVERSE"
	case Theme_THEME_UNREQUITED:
		return "UNREQUITED"
	case Theme_THEME_UP:
		return "UP"
	case Theme_THEME_URUGUAY:
		return "URUGUAY"
	case Theme_THEME_US:
		return "US"
	case Theme_THEME_USAGAINSTTHEWORLD:
		return "USAGAINSTTHEWORLD"
	case Theme_THEME_USERDEFINED:
		return "USERDEFINED"
	case Theme_THEME_UTAH:
		return "UTAH"
	case Theme_THEME_UTOPIA:
		return "UTOPIA"
	case Theme_THEME_UZBEKISTAN:
		return "UZBEKISTAN"
	case Theme_THEME_VACATION:
		return "VACATION"
	case Theme_THEME_VALENTINE:
		return "VALENTINE"
	case Theme_THEME_VALLEY:
		return "VALLEY"
	case Theme_THEME_VANUATU:
		return "VANUATU"
	case Theme_THEME_VATICAN:
		return "VATICAN"
	case Theme_THEME_VEGETABLE:
		return "VEGETABLE"
	case Theme_THEME_VENEZUELA:
		return "VENEZUELA"
	case Theme_THEME_VERMONT:
		return "VERMONT"
	case Theme_THEME_VICTORY:
		return "VICTORY"
	case Theme_THEME_VIDEOGAME:
		return "VIDEOGAME"
	case Theme_THEME_VIENNA:
		return "VIENNA"
	case Theme_THEME_VIETNAM:
		return "VIETNAM"
	case Theme_THEME_VILLAIN:
		return "VILLAIN"
	case Theme_THEME_VIOLENCE:
		return "VIOLENCE"
	case Theme_THEME_VIRGINIA:
		return "VIRGINIA"
	case Theme_THEME_VOICE:
		return "VOICE"
	case Theme_THEME_VOLCANO:
		return "VOLCANO"
	case Theme_THEME_VOODOO:
		return "VOODOO"
	case Theme_THEME_WAIT:
		return "WAIT"
	case Theme_THEME_WAITER:
		return "WAITER"
	case Theme_THEME_WAKING:
		return "WAKING"
	case Theme_THEME_WALES:
		return "WALES"
	case Theme_THEME_WALK:
		return "WALK"
	case Theme_THEME_WALL:
		return "WALL"
	case Theme_THEME_WAR:
		return "WAR"
	case Theme_THEME_WASHINGTON:
		return "WASHINGTON"
	case Theme_THEME_WASTEFUL:
		return "WASTEFUL"
	case Theme_THEME_WATER:
		return "WATER"
	case Theme_THEME_WATERFALL:
		return "WATERFALL"
	case Theme_THEME_WEAPON:
		return "WEAPON"
	case Theme_THEME_WEDDING:
		return "WEDDING"
	case Theme_THEME_WEDNESDAY:
		return "WEDNESDAY"
	case Theme_THEME_WEEK:
		return "WEEK"
	case Theme_THEME_WEEKEND:
		return "WEEKEND"
	case Theme_THEME_WELCOME:
		return "WELCOME"
	case Theme_THEME_WESHOULDBETOGETHER:
		return "WESHOULDBETOGETHER"
	case Theme_THEME_WEST:
		return "WEST"
	case Theme_THEME_WESTERNSAHARA:
		return "WESTERNSAHARA"
	case Theme_THEME_WESTINDIES:
		return "WESTINDIES"
	case Theme_THEME_WESTVIRGINIA:
		return "WESTVIRGINIA"
	case Theme_THEME_WHALE:
		return "WHALE"
	case Theme_THEME_WHISPER:
		return "WHISPER"
	case Theme_THEME_WHISTLE:
		return "WHISTLE"
	case Theme_THEME_WHITE:
		return "WHITE"
	case Theme_THEME_WIFE:
		return "WIFE"
	case Theme_THEME_WILD:
		return "WILD"
	case Theme_THEME_WIND:
		return "WIND"
	case Theme_THEME_WINDCHIMES:
		return "WINDCHIMES"
	case Theme_THEME_WINDOW:
		return "WINDOW"
	case Theme_THEME_WINNING:
		return "WINNING"
	case Theme_THEME_WINTER:
		return "WINTER"
	case Theme_THEME_WISCONSIN:
		return "WISCONSIN"
	case Theme_THEME_WISDOM:
		return "WISDOM"
	case Theme_THEME_WISH:
		return "WISH"
	case Theme_THEME_WITCH:
		return "WITCH"
	case Theme_THEME_WIZARDRY:
		return "WIZARDRY"
	case Theme_THEME_WOLF:
		return "WOLF"
	case Theme_THEME_WOMEN:
		return "WOMEN"
	case Theme_THEME_WOMENSNAMES:
		return "WOMENSNAMES"
	case Theme_THEME_WOMENTALKINGTOMEN:
		return "WOMENTALKINGTOMEN"
	case Theme_THEME_WOMENTALKINGTOWOMEN:
		return "WOMENTALKINGTOWOMEN"
	case Theme_THEME_WONDERFUL:
		return "WONDERFUL"
	case Theme_THEME_WOODWIND:
		return "WOODWIND"
	case Theme_THEME_WORDS:
		return "WORDS"
	case Theme_THEME_WORK:
		return "WORK"
	case Theme_THEME_WORKINGCLASS:
		return "WORKINGCLASS"
	case Theme_THEME_WORKOUT:
		return "WORKOUT"
	case Theme_THEME_WORLD:
		return "WORLD"
	case Theme_THEME_WORRY:
		return "WORRY"
	case Theme_THEME_WORSHIP:
		return "WORSHIP"
	case Theme_THEME_WRITE:
		return "WRITE"
	case Theme_THEME_WRONG:
		return "WRONG"
	case Theme_THEME_WYOMING:
		return "WYOMING"
	case Theme_THEME_YELLOW:
		return "YELLOW"
	case Theme_THEME_YEMEN:
		return "YEMEN"
	case Theme_THEME_YESTERDAY:
		return "YESTERDAY"
	case Theme_THEME_YOGA:
		return "YOGA"
	case Theme_THEME_YOU:
		return "YOU"
	case Theme_THEME_YOUNG:
		return "YOUNG"
	case Theme_THEME_YOUTH:
		return "YOUTH"
	case Theme_THEME_YUGOSLAVIA:
		return "YUGOSLAVIA"
	case Theme_THEME_ZAMBIA:
		return "ZAMBIA"
	case Theme_THEME_ZIMBABWE:
		return "ZIMBABWE"
	case Theme_THEME_ZODIAC:
		return "ZODIAC"
	case Theme_THEME_ZOO:
		return "ZOO"
	default:
		return ""
	}
}

// ParseThemeString parses a string value to Theme enum (case-insensitive)
func ParseThemeString(s string) (Theme, bool) {
	s = strings.ToUpper(s)
	switch s {
	case "ABORTION":
		return Theme_THEME_ABORTION, true
	case "ABOVE":
		return Theme_THEME_ABOVE, true
	case "ACCUSE":
		return Theme_THEME_ACCUSE, true
	case "ACTION":
		return Theme_THEME_ACTION, true
	case "ACTIVITIES":
		return Theme_THEME_ACTIVITIES, true
	case "ACTOR":
		return Theme_THEME_ACTOR, true
	case "ADDICTEDTO":
		return Theme_THEME_ADDICTEDTO, true
	case "ADDICTION":
		return Theme_THEME_ADDICTION, true
	case "ADOLESCENCE":
		return Theme_THEME_ADOLESCENCE, true
	case "ADOPTION":
		return Theme_THEME_ADOPTION, true
	case "ADORATION":
		return Theme_THEME_ADORATION, true
	case "ADVICE":
		return Theme_THEME_ADVICE, true
	case "AFFECTION":
		return Theme_THEME_AFFECTION, true
	case "AFGHANISTAN":
		return Theme_THEME_AFGHANISTAN, true
	case "AFRAID":
		return Theme_THEME_AFRAID, true
	case "AFRICA":
		return Theme_THEME_AFRICA, true
	case "AFTERNOON":
		return Theme_THEME_AFTERNOON, true
	case "AIR":
		return Theme_THEME_AIR, true
	case "AIRPLANES":
		return Theme_THEME_AIRPLANES, true
	case "ALABAMA":
		return Theme_THEME_ALABAMA, true
	case "ALASKA":
		return Theme_THEME_ALASKA, true
	case "ALBANIA":
		return Theme_THEME_ALBANIA, true
	case "ALCOHOL":
		return Theme_THEME_ALCOHOL, true
	case "ALGERIA":
		return Theme_THEME_ALGERIA, true
	case "ALIEN":
		return Theme_THEME_ALIEN, true
	case "ALL":
		return Theme_THEME_ALL, true
	case "ALLIGATOR":
		return Theme_THEME_ALLIGATOR, true
	case "ALONE":
		return Theme_THEME_ALONE, true
	case "ALWAYS":
		return Theme_THEME_ALWAYS, true
	case "AMBITION":
		return Theme_THEME_AMBITION, true
	case "AMBIVALENT":
		return Theme_THEME_AMBIVALENT, true
	case "AMMUNITION":
		return Theme_THEME_AMMUNITION, true
	case "AMSTERDAM":
		return Theme_THEME_AMSTERDAM, true
	case "AMUSEMENTPARKSANDRIDES":
		return Theme_THEME_AMUSEMENTPARKSANDRIDES, true
	case "ANDORRA":
		return Theme_THEME_ANDORRA, true
	case "ANGEL":
		return Theme_THEME_ANGEL, true
	case "ANGER":
		return Theme_THEME_ANGER, true
	case "ANGOLA":
		return Theme_THEME_ANGOLA, true
	case "ANGST":
		return Theme_THEME_ANGST, true
	case "ANIMALS":
		return Theme_THEME_ANIMALS, true
	case "ANNIVERSARY":
		return Theme_THEME_ANNIVERSARY, true
	case "ANTIDRUG":
		return Theme_THEME_ANTIDRUG, true
	case "ANTIGUAANDBARBUDA":
		return Theme_THEME_ANTIGUAANDBARBUDA, true
	case "ANXIOUS":
		return Theme_THEME_ANXIOUS, true
	case "ANYTHING":
		return Theme_THEME_ANYTHING, true
	case "APOLOGIZE":
		return Theme_THEME_APOLOGIZE, true
	case "APRIL":
		return Theme_THEME_APRIL, true
	case "ARGENTINA":
		return Theme_THEME_ARGENTINA, true
	case "ARIZONA":
		return Theme_THEME_ARIZONA, true
	case "ARKANSAS":
		return Theme_THEME_ARKANSAS, true
	case "ARMAGEDDON":
		return Theme_THEME_ARMAGEDDON, true
	case "ARMENIA":
		return Theme_THEME_ARMENIA, true
	case "ARMS":
		return Theme_THEME_ARMS, true
	case "ART":
		return Theme_THEME_ART, true
	case "ASHES":
		return Theme_THEME_ASHES, true
	case "ASIA":
		return Theme_THEME_ASIA, true
	case "ASSURANCE":
		return Theme_THEME_ASSURANCE, true
	case "ASTROLOGY":
		return Theme_THEME_ASTROLOGY, true
	case "ASTRONAUT":
		return Theme_THEME_ASTRONAUT, true
	case "ATFIRSTSIGHT":
		return Theme_THEME_ATFIRSTSIGHT, true
	case "ATLANTA":
		return Theme_THEME_ATLANTA, true
	case "ATTITUDE":
		return Theme_THEME_ATTITUDE, true
	case "ATTRACTIVE":
		return Theme_THEME_ATTRACTIVE, true
	case "AUGUST":
		return Theme_THEME_AUGUST, true
	case "AUNT":
		return Theme_THEME_AUNT, true
	case "AUSTRALIA":
		return Theme_THEME_AUSTRALIA, true
	case "AUSTRIA":
		return Theme_THEME_AUSTRIA, true
	case "AUTUMN":
		return Theme_THEME_AUTUMN, true
	case "AWARENESS":
		return Theme_THEME_AWARENESS, true
	case "AZERBAIJAN":
		return Theme_THEME_AZERBAIJAN, true
	case "BABY":
		return Theme_THEME_BABY, true
	case "BACK":
		return Theme_THEME_BACK, true
	case "BACKTOGETHER":
		return Theme_THEME_BACKTOGETHER, true
	case "BAD":
		return Theme_THEME_BAD, true
	case "BAHAMAS":
		return Theme_THEME_BAHAMAS, true
	case "BAHRAIN":
		return Theme_THEME_BAHRAIN, true
	case "BALI":
		return Theme_THEME_BALI, true
	case "BALKANS":
		return Theme_THEME_BALKANS, true
	case "BALLERINA":
		return Theme_THEME_BALLERINA, true
	case "BALTICSTATES":
		return Theme_THEME_BALTICSTATES, true
	case "BALTIMORE":
		return Theme_THEME_BALTIMORE, true
	case "BANGLADESH":
		return Theme_THEME_BANGLADESH, true
	case "BARBADOS":
		return Theme_THEME_BARBADOS, true
	case "BARS":
		return Theme_THEME_BARS, true
	case "BASEBALL":
		return Theme_THEME_BASEBALL, true
	case "BASKETBALL":
		return Theme_THEME_BASKETBALL, true
	case "BASS":
		return Theme_THEME_BASS, true
	case "BATHROOM":
		return Theme_THEME_BATHROOM, true
	case "BATTLEOFTHESEXES":
		return Theme_THEME_BATTLEOFTHESEXES, true
	case "BAY":
		return Theme_THEME_BAY, true
	case "BEACH":
		return Theme_THEME_BEACH, true
	case "BEAR":
		return Theme_THEME_BEAR, true
	case "BEATS":
		return Theme_THEME_BEATS, true
	case "BEAUTIFUL":
		return Theme_THEME_BEAUTIFUL, true
	case "BEAUTY":
		return Theme_THEME_BEAUTY, true
	case "BEDROOM":
		return Theme_THEME_BEDROOM, true
	case "BEG":
		return Theme_THEME_BEG, true
	case "BEGINNING":
		return Theme_THEME_BEGINNING, true
	case "BEHIND":
		return Theme_THEME_BEHIND, true
	case "BEINGIN":
		return Theme_THEME_BEINGIN, true
	case "BELARUS":
		return Theme_THEME_BELARUS, true
	case "BELGIUM":
		return Theme_THEME_BELGIUM, true
	case "BELIEF":
		return Theme_THEME_BELIEF, true
	case "BELIEVE":
		return Theme_THEME_BELIEVE, true
	case "BELIZE":
		return Theme_THEME_BELIZE, true
	case "BELLS":
		return Theme_THEME_BELLS, true
	case "BELLY":
		return Theme_THEME_BELLY, true
	case "BELOW":
		return Theme_THEME_BELOW, true
	case "BENELUX":
		return Theme_THEME_BENELUX, true
	case "BENIN":
		return Theme_THEME_BENIN, true
	case "BERLIN":
		return Theme_THEME_BERLIN, true
	case "BERMUDA":
		return Theme_THEME_BERMUDA, true
	case "BEST":
		return Theme_THEME_BEST, true
	case "BETRAY":
		return Theme_THEME_BETRAY, true
	case "BEVERAGE":
		return Theme_THEME_BEVERAGE, true
	case "BHUTAN":
		return Theme_THEME_BHUTAN, true
	case "BICYCLES":
		return Theme_THEME_BICYCLES, true
	case "BIG":
		return Theme_THEME_BIG, true
	case "BIRD":
		return Theme_THEME_BIRD, true
	case "BIRMINGHAM":
		return Theme_THEME_BIRMINGHAM, true
	case "BIRTH":
		return Theme_THEME_BIRTH, true
	case "BIRTHCONTROL":
		return Theme_THEME_BIRTHCONTROL, true
	case "BIRTHDAYPARTY":
		return Theme_THEME_BIRTHDAYPARTY, true
	case "BLACK":
		return Theme_THEME_BLACK, true
	case "BLAME":
		return Theme_THEME_BLAME, true
	case "BLESS":
		return Theme_THEME_BLESS, true
	case "BLONDE":
		return Theme_THEME_BLONDE, true
	case "BLOOD":
		return Theme_THEME_BLOOD, true
	case "BLUE":
		return Theme_THEME_BLUE, true
	case "BOARDWALK":
		return Theme_THEME_BOARDWALK, true
	case "BODY":
		return Theme_THEME_BODY, true
	case "BODYLANGUAGE":
		return Theme_THEME_BODYLANGUAGE, true
	case "BODYPARTS":
		return Theme_THEME_BODYPARTS, true
	case "BOLIVIA":
		return Theme_THEME_BOLIVIA, true
	case "BOOK":
		return Theme_THEME_BOOK, true
	case "BORED":
		return Theme_THEME_BORED, true
	case "BOSNIAANDHERZEGOVINA":
		return Theme_THEME_BOSNIAANDHERZEGOVINA, true
	case "BOSS":
		return Theme_THEME_BOSS, true
	case "BOSTON":
		return Theme_THEME_BOSTON, true
	case "BOTSWANA":
		return Theme_THEME_BOTSWANA, true
	case "BOUNCE":
		return Theme_THEME_BOUNCE, true
	case "BOXING":
		return Theme_THEME_BOXING, true
	case "BOYS":
		return Theme_THEME_BOYS, true
	case "BRAG":
		return Theme_THEME_BRAG, true
	case "BRAIN":
		return Theme_THEME_BRAIN, true
	case "BRASS":
		return Theme_THEME_BRASS, true
	case "BRAZIL":
		return Theme_THEME_BRAZIL, true
	case "BREAKDOWN":
		return Theme_THEME_BREAKDOWN, true
	case "BREAKUP":
		return Theme_THEME_BREAKUP, true
	case "BREATHE":
		return Theme_THEME_BREATHE, true
	case "BRIDGE":
		return Theme_THEME_BRIDGE, true
	case "BRITAIN":
		return Theme_THEME_BRITAIN, true
	case "BRITISHISLES":
		return Theme_THEME_BRITISHISLES, true
	case "BROKENHOME":
		return Theme_THEME_BROKENHOME, true
	case "BROTHER":
		return Theme_THEME_BROTHER, true
	case "BROWN":
		return Theme_THEME_BROWN, true
	case "BRUNEI":
		return Theme_THEME_BRUNEI, true
	case "BRUNETTE":
		return Theme_THEME_BRUNETTE, true
	case "BUDDHA":
		return Theme_THEME_BUDDHA, true
	case "BUG":
		return Theme_THEME_BUG, true
	case "BUILD":
		return Theme_THEME_BUILD, true
	case "BUILDING":
		return Theme_THEME_BUILDING, true
	case "BULGARIA":
		return Theme_THEME_BULGARIA, true
	case "BURDEN":
		return Theme_THEME_BURDEN, true
	case "BURKINAFASO":
		return Theme_THEME_BURKINAFASO, true
	case "BURNING":
		return Theme_THEME_BURNING, true
	case "BURUNDI":
		return Theme_THEME_BURUNDI, true
	case "BUS":
		return Theme_THEME_BUS, true
	case "BUSY":
		return Theme_THEME_BUSY, true
	case "BUTTERFLY":
		return Theme_THEME_BUTTERFLY, true
	case "CALIFORNIA":
		return Theme_THEME_CALIFORNIA, true
	case "CALLOUT":
		return Theme_THEME_CALLOUT, true
	case "CALMNESS":
		return Theme_THEME_CALMNESS, true
	case "CAMBODIA":
		return Theme_THEME_CAMBODIA, true
	case "CAMERA":
		return Theme_THEME_CAMERA, true
	case "CAMEROON":
		return Theme_THEME_CAMEROON, true
	case "CANADA":
		return Theme_THEME_CANADA, true
	case "CANDLE":
		return Theme_THEME_CANDLE, true
	case "CANDY":
		return Theme_THEME_CANDY, true
	case "CANTGETOVER":
		return Theme_THEME_CANTGETOVER, true
	case "CANTRESIST":
		return Theme_THEME_CANTRESIST, true
	case "CAPEVERDE":
		return Theme_THEME_CAPEVERDE, true
	case "CAPITALPUNISHMENT":
		return Theme_THEME_CAPITALPUNISHMENT, true
	case "CARDGAME":
		return Theme_THEME_CARDGAME, true
	case "CAREFREE":
		return Theme_THEME_CAREFREE, true
	case "CARNIVAL":
		return Theme_THEME_CARNIVAL, true
	case "CAROLINAS":
		return Theme_THEME_CAROLINAS, true
	case "CARRACING":
		return Theme_THEME_CARRACING, true
	case "CARS":
		return Theme_THEME_CARS, true
	case "CASINO":
		return Theme_THEME_CASINO, true
	case "CAT":
		return Theme_THEME_CAT, true
	case "CELEBRATION":
		return Theme_THEME_CELEBRATION, true
	case "CELEBRITY":
		return Theme_THEME_CELEBRITY, true
	case "CELLPHONE":
		return Theme_THEME_CELLPHONE, true
	case "CEMETARY":
		return Theme_THEME_CEMETARY, true
	case "CENTRALAFRICANREPUBLIC":
		return Theme_THEME_CENTRALAFRICANREPUBLIC, true
	case "CENTRALAMERICA":
		return Theme_THEME_CENTRALAMERICA, true
	case "CHAD":
		return Theme_THEME_CHAD, true
	case "CHALLENGE":
		return Theme_THEME_CHALLENGE, true
	case "CHANGE":
		return Theme_THEME_CHANGE, true
	case "CHARITY":
		return Theme_THEME_CHARITY, true
	case "CHASE":
		return Theme_THEME_CHASE, true
	case "CHEERLEADER":
		return Theme_THEME_CHEERLEADER, true
	case "CHICAGO":
		return Theme_THEME_CHICAGO, true
	case "CHILDREN":
		return Theme_THEME_CHILDREN, true
	case "CHILE":
		return Theme_THEME_CHILE, true
	case "CHINA":
		return Theme_THEME_CHINA, true
	case "CHOICES":
		return Theme_THEME_CHOICES, true
	case "CHOOSE":
		return Theme_THEME_CHOOSE, true
	case "CHRISTMAS":
		return Theme_THEME_CHRISTMAS, true
	case "CHURCH":
		return Theme_THEME_CHURCH, true
	case "CINCINNATI":
		return Theme_THEME_CINCINNATI, true
	case "CIRCUS":
		return Theme_THEME_CIRCUS, true
	case "CITY":
		return Theme_THEME_CITY, true
	case "CITYLIFE":
		return Theme_THEME_CITYLIFE, true
	case "CIVILRIGHTS":
		return Theme_THEME_CIVILRIGHTS, true
	case "CLEAN":
		return Theme_THEME_CLEAN, true
	case "CLIFF":
		return Theme_THEME_CLIFF, true
	case "CLIMB":
		return Theme_THEME_CLIMB, true
	case "CLOSE":
		return Theme_THEME_CLOSE, true
	case "CLOTHING":
		return Theme_THEME_CLOTHING, true
	case "CLOWN":
		return Theme_THEME_CLOWN, true
	case "CLUB":
		return Theme_THEME_CLUB, true
	case "COAST":
		return Theme_THEME_COAST, true
	case "COLD":
		return Theme_THEME_COLD, true
	case "COLOMBIA":
		return Theme_THEME_COLOMBIA, true
	case "COLOR":
		return Theme_THEME_COLOR, true
	case "COLORADO":
		return Theme_THEME_COLORADO, true
	case "COMFORT":
		return Theme_THEME_COMFORT, true
	case "COMIC":
		return Theme_THEME_COMIC, true
	case "COMINGHOME":
		return Theme_THEME_COMINGHOME, true
	case "COMMITMENT":
		return Theme_THEME_COMMITMENT, true
	case "COMMUNICATION":
		return Theme_THEME_COMMUNICATION, true
	case "COMOROS":
		return Theme_THEME_COMOROS, true
	case "COMPASSION":
		return Theme_THEME_COMPASSION, true
	case "COMPETITIVE":
		return Theme_THEME_COMPETITIVE, true
	case "COMPLAIN":
		return Theme_THEME_COMPLAIN, true
	case "COMPLIMENTS":
		return Theme_THEME_COMPLIMENTS, true
	case "COMPUTER":
		return Theme_THEME_COMPUTER, true
	case "CONFIDENCE":
		return Theme_THEME_CONFIDENCE, true
	case "CONFLICT":
		return Theme_THEME_CONFLICT, true
	case "CONFUSED":
		return Theme_THEME_CONFUSED, true
	case "CONNECTICUT":
		return Theme_THEME_CONNECTICUT, true
	case "CONNECTION":
		return Theme_THEME_CONNECTION, true
	case "CONSCIOUSNESS":
		return Theme_THEME_CONSCIOUSNESS, true
	case "CONSISTENT":
		return Theme_THEME_CONSISTENT, true
	case "CONTAINER":
		return Theme_THEME_CONTAINER, true
	case "CONTEMPT":
		return Theme_THEME_CONTEMPT, true
	case "CONTINENT":
		return Theme_THEME_CONTINENT, true
	case "CONVERSATION":
		return Theme_THEME_CONVERSATION, true
	case "COOKISLANDS":
		return Theme_THEME_COOKISLANDS, true
	case "COOL":
		return Theme_THEME_COOL, true
	case "COSMETIC":
		return Theme_THEME_COSMETIC, true
	case "COSTARICA":
		return Theme_THEME_COSTARICA, true
	case "COUNTRY":
		return Theme_THEME_COUNTRY, true
	case "COUNTRYLIFE":
		return Theme_THEME_COUNTRYLIFE, true
	case "COUPLE":
		return Theme_THEME_COUPLE, true
	case "COURAGE":
		return Theme_THEME_COURAGE, true
	case "COUSIN":
		return Theme_THEME_COUSIN, true
	case "COW":
		return Theme_THEME_COW, true
	case "COWBOYANDCOWGIRL":
		return Theme_THEME_COWBOYANDCOWGIRL, true
	case "CRASH":
		return Theme_THEME_CRASH, true
	case "CRAVE":
		return Theme_THEME_CRAVE, true
	case "CRAZY":
		return Theme_THEME_CRAZY, true
	case "CREATE":
		return Theme_THEME_CREATE, true
	case "CRIME":
		return Theme_THEME_CRIME, true
	case "CRITICIZE":
		return Theme_THEME_CRITICIZE, true
	case "CROATIA":
		return Theme_THEME_CROATIA, true
	case "CROCODILE":
		return Theme_THEME_CROCODILE, true
	case "CRUCIFIXION":
		return Theme_THEME_CRUCIFIXION, true
	case "CRUEL":
		return Theme_THEME_CRUEL, true
	case "CRUSH":
		return Theme_THEME_CRUSH, true
	case "CRY":
		return Theme_THEME_CRY, true
	case "CUBA":
		return Theme_THEME_CUBA, true
	case "CYPRUS":
		return Theme_THEME_CYPRUS, true
	case "CZECHOSLOVAKIA":
		return Theme_THEME_CZECHOSLOVAKIA, true
	case "CZECHREPUBLIC":
		return Theme_THEME_CZECHREPUBLIC, true
	case "DALLAS":
		return Theme_THEME_DALLAS, true
	case "DANCE":
		return Theme_THEME_DANCE, true
	case "DANCEPARTY":
		return Theme_THEME_DANCEPARTY, true
	case "DANGER":
		return Theme_THEME_DANGER, true
	case "DARKNESS":
		return Theme_THEME_DARKNESS, true
	case "DATE":
		return Theme_THEME_DATE, true
	case "DATING":
		return Theme_THEME_DATING, true
	case "DAUGHTER":
		return Theme_THEME_DAUGHTER, true
	case "DAWN":
		return Theme_THEME_DAWN, true
	case "DAY":
		return Theme_THEME_DAY, true
	case "DAYDREAM":
		return Theme_THEME_DAYDREAM, true
	case "DAYTIME":
		return Theme_THEME_DAYTIME, true
	case "DEATH":
		return Theme_THEME_DEATH, true
	case "DECEMBER":
		return Theme_THEME_DECEMBER, true
	case "DEEP":
		return Theme_THEME_DEEP, true
	case "DEFEAT":
		return Theme_THEME_DEFEAT, true
	case "DEFEATED":
		return Theme_THEME_DEFEATED, true
	case "DELAWARE":
		return Theme_THEME_DELAWARE, true
	case "DEMOCRATICREPUBLICOFTHECONGO":
		return Theme_THEME_DEMOCRATICREPUBLICOFTHECONGO, true
	case "DENMARK":
		return Theme_THEME_DENMARK, true
	case "DENVER":
		return Theme_THEME_DENVER, true
	case "DESERT":
		return Theme_THEME_DESERT, true
	case "DESIRE":
		return Theme_THEME_DESIRE, true
	case "DESPAIR":
		return Theme_THEME_DESPAIR, true
	case "DESPERATE":
		return Theme_THEME_DESPERATE, true
	case "DETERMINATION":
		return Theme_THEME_DETERMINATION, true
	case "DETROIT":
		return Theme_THEME_DETROIT, true
	case "DEVIL":
		return Theme_THEME_DEVIL, true
	case "DIFFICULT":
		return Theme_THEME_DIFFICULT, true
	case "DINNER":
		return Theme_THEME_DINNER, true
	case "DINOSAUR":
		return Theme_THEME_DINOSAUR, true
	case "DIRECTION":
		return Theme_THEME_DIRECTION, true
	case "DISAPPOINTMENT":
		return Theme_THEME_DISAPPOINTMENT, true
	case "DISCOVERY":
		return Theme_THEME_DISCOVERY, true
	case "DISEASE":
		return Theme_THEME_DISEASE, true
	case "DISSATISFACTION":
		return Theme_THEME_DISSATISFACTION, true
	case "DISTANCE":
		return Theme_THEME_DISTANCE, true
	case "DIVORCE":
		return Theme_THEME_DIVORCE, true
	case "DIZZY":
		return Theme_THEME_DIZZY, true
	case "DJIBOUTI":
		return Theme_THEME_DJIBOUTI, true
	case "DOCTOR":
		return Theme_THEME_DOCTOR, true
	case "DOG":
		return Theme_THEME_DOG, true
	case "DOLPHIN":
		return Theme_THEME_DOLPHIN, true
	case "DOMESTICVIOLENCE":
		return Theme_THEME_DOMESTICVIOLENCE, true
	case "DOMINICA":
		return Theme_THEME_DOMINICA, true
	case "DOMINICANREPUBLIC":
		return Theme_THEME_DOMINICANREPUBLIC, true
	case "DONTGO":
		return Theme_THEME_DONTGO, true
	case "DONTLEAVEME":
		return Theme_THEME_DONTLEAVEME, true
	case "DOOR":
		return Theme_THEME_DOOR, true
	case "DOWN":
		return Theme_THEME_DOWN, true
	case "DRAFTRESISTANCE":
		return Theme_THEME_DRAFTRESISTANCE, true
	case "DREAM":
		return Theme_THEME_DREAM, true
	case "DRIFT":
		return Theme_THEME_DRIFT, true
	case "DRINK":
		return Theme_THEME_DRINK, true
	case "DRIVE":
		return Theme_THEME_DRIVE, true
	case "DRUG":
		return Theme_THEME_DRUG, true
	case "DRUMS":
		return Theme_THEME_DRUMS, true
	case "DUBLIN":
		return Theme_THEME_DUBLIN, true
	case "EAGLE":
		return Theme_THEME_EAGLE, true
	case "EARS":
		return Theme_THEME_EARS, true
	case "EARTH":
		return Theme_THEME_EARTH, true
	case "EARTHQUAKE":
		return Theme_THEME_EARTHQUAKE, true
	case "EAST":
		return Theme_THEME_EAST, true
	case "EASTERNEUROPE":
		return Theme_THEME_EASTERNEUROPE, true
	case "ECSTATIC":
		return Theme_THEME_ECSTATIC, true
	case "ECUADOR":
		return Theme_THEME_ECUADOR, true
	case "EDUCATION":
		return Theme_THEME_EDUCATION, true
	case "EGO":
		return Theme_THEME_EGO, true
	case "EGYPT":
		return Theme_THEME_EGYPT, true
	case "ELEMENTS":
		return Theme_THEME_ELEMENTS, true
	case "ELEPHANT":
		return Theme_THEME_ELEPHANT, true
	case "ELSALVADOR":
		return Theme_THEME_ELSALVADOR, true
	case "ELVIS":
		return Theme_THEME_ELVIS, true
	case "EMBARRASSED":
		return Theme_THEME_EMBARRASSED, true
	case "EMERGENCY":
		return Theme_THEME_EMERGENCY, true
	case "EMPOWERED":
		return Theme_THEME_EMPOWERED, true
	case "EMPTY":
		return Theme_THEME_EMPTY, true
	case "END":
		return Theme_THEME_END, true
	case "ENEMY":
		return Theme_THEME_ENEMY, true
	case "ENGAGEMENT":
		return Theme_THEME_ENGAGEMENT, true
	case "ENGLAND":
		return Theme_THEME_ENGLAND, true
	case "ENLIGHTENMENT":
		return Theme_THEME_ENLIGHTENMENT, true
	case "ENLISTMENT":
		return Theme_THEME_ENLISTMENT, true
	case "ENVIRONMENT":
		return Theme_THEME_ENVIRONMENT, true
	case "EQUALITY":
		return Theme_THEME_EQUALITY, true
	case "EQUATORIALGUINEA":
		return Theme_THEME_EQUATORIALGUINEA, true
	case "ERITREA":
		return Theme_THEME_ERITREA, true
	case "ESCAPE":
		return Theme_THEME_ESCAPE, true
	case "ESPIONAGE":
		return Theme_THEME_ESPIONAGE, true
	case "ESTONIA":
		return Theme_THEME_ESTONIA, true
	case "ESWATINI":
		return Theme_THEME_ESWATINI, true
	case "ETERNITY":
		return Theme_THEME_ETERNITY, true
	case "ETHIOPIA":
		return Theme_THEME_ETHIOPIA, true
	case "EUROPE":
		return Theme_THEME_EUROPE, true
	case "EUROPEANCONTINENT":
		return Theme_THEME_EUROPEANCONTINENT, true
	case "EUROPEANECONOMICAREA":
		return Theme_THEME_EUROPEANECONOMICAREA, true
	case "EUROPEANECONOMICCOMMUNITY":
		return Theme_THEME_EUROPEANECONOMICCOMMUNITY, true
	case "EUROPEANUNION":
		return Theme_THEME_EUROPEANUNION, true
	case "EVENT":
		return Theme_THEME_EVENT, true
	case "EVERYDAY":
		return Theme_THEME_EVERYDAY, true
	case "EVERYTHING":
		return Theme_THEME_EVERYTHING, true
	case "EVIL":
		return Theme_THEME_EVIL, true
	case "EXCELLENCE":
		return Theme_THEME_EXCELLENCE, true
	case "EXCITED":
		return Theme_THEME_EXCITED, true
	case "EXCUSE":
		return Theme_THEME_EXCUSE, true
	case "EXERCISE":
		return Theme_THEME_EXERCISE, true
	case "EXPLORE":
		return Theme_THEME_EXPLORE, true
	case "EYES":
		return Theme_THEME_EYES, true
	case "FABRIC":
		return Theme_THEME_FABRIC, true
	case "FACE":
		return Theme_THEME_FACE, true
	case "FAILURE":
		return Theme_THEME_FAILURE, true
	case "FAIR":
		return Theme_THEME_FAIR, true
	case "FAITH":
		return Theme_THEME_FAITH, true
	case "FAITHINDOUBT":
		return Theme_THEME_FAITHINDOUBT, true
	case "FAKE":
		return Theme_THEME_FAKE, true
	case "FALL":
		return Theme_THEME_FALL, true
	case "FALLINGIN":
		return Theme_THEME_FALLINGIN, true
	case "FAME":
		return Theme_THEME_FAME, true
	case "FAMILY":
		return Theme_THEME_FAMILY, true
	case "FAMILYLIFE":
		return Theme_THEME_FAMILYLIFE, true
	case "FAMILYMEMBER":
		return Theme_THEME_FAMILYMEMBER, true
	case "FANTASY":
		return Theme_THEME_FANTASY, true
	case "FAR":
		return Theme_THEME_FAR, true
	case "FAREWELL":
		return Theme_THEME_FAREWELL, true
	case "FARM":
		return Theme_THEME_FARM, true
	case "FASCISM":
		return Theme_THEME_FASCISM, true
	case "FASHION":
		return Theme_THEME_FASHION, true
	case "FAST":
		return Theme_THEME_FAST, true
	case "FAT":
		return Theme_THEME_FAT, true
	case "FATE":
		return Theme_THEME_FATE, true
	case "FATHER":
		return Theme_THEME_FATHER, true
	case "FAVORITE":
		return Theme_THEME_FAVORITE, true
	case "FEBRUARY":
		return Theme_THEME_FEBRUARY, true
	case "FEEL":
		return Theme_THEME_FEEL, true
	case "FEELINGS":
		return Theme_THEME_FEELINGS, true
	case "FEET":
		return Theme_THEME_FEET, true
	case "FEMINISM":
		return Theme_THEME_FEMINISM, true
	case "FEVER":
		return Theme_THEME_FEVER, true
	case "FIGHT":
		return Theme_THEME_FIGHT, true
	case "FIJI":
		return Theme_THEME_FIJI, true
	case "FIND":
		return Theme_THEME_FIND, true
	case "FINGERS":
		return Theme_THEME_FINGERS, true
	case "FINLAND":
		return Theme_THEME_FINLAND, true
	case "FIRE":
		return Theme_THEME_FIRE, true
	case "FISH":
		return Theme_THEME_FISH, true
	case "FISHING":
		return Theme_THEME_FISHING, true
	case "FIX":
		return Theme_THEME_FIX, true
	case "FLIRT":
		return Theme_THEME_FLIRT, true
	case "FLOOD":
		return Theme_THEME_FLOOD, true
	case "FLOORANDCEILING":
		return Theme_THEME_FLOORANDCEILING, true
	case "FLORIDA":
		return Theme_THEME_FLORIDA, true
	case "FLOWER":
		return Theme_THEME_FLOWER, true
	case "FLY":
		return Theme_THEME_FLY, true
	case "FOCUS":
		return Theme_THEME_FOCUS, true
	case "FOLLOW":
		return Theme_THEME_FOLLOW, true
	case "FOOD":
		return Theme_THEME_FOOD, true
	case "FOOL":
		return Theme_THEME_FOOL, true
	case "FOOTBALL":
		return Theme_THEME_FOOTBALL, true
	case "FORBIDDEN":
		return Theme_THEME_FORBIDDEN, true
	case "FOREST":
		return Theme_THEME_FOREST, true
	case "FORGET":
		return Theme_THEME_FORGET, true
	case "FORGIVE":
		return Theme_THEME_FORGIVE, true
	case "FORTUNETELLER":
		return Theme_THEME_FORTUNETELLER, true
	case "FOUND":
		return Theme_THEME_FOUND, true
	case "FOWL":
		return Theme_THEME_FOWL, true
	case "FOX":
		return Theme_THEME_FOX, true
	case "FRAGILE":
		return Theme_THEME_FRAGILE, true
	case "FRANCE":
		return Theme_THEME_FRANCE, true
	case "FREE":
		return Theme_THEME_FREE, true
	case "FREEDOM":
		return Theme_THEME_FREEDOM, true
	case "FRENCHCARIBBEAN":
		return Theme_THEME_FRENCHCARIBBEAN, true
	case "FRENCHGUIANA":
		return Theme_THEME_FRENCHGUIANA, true
	case "FRENCHPOLYNESIA":
		return Theme_THEME_FRENCHPOLYNESIA, true
	case "FRIDAY":
		return Theme_THEME_FRIDAY, true
	case "FRIENDSHIP":
		return Theme_THEME_FRIENDSHIP, true
	case "FROG":
		return Theme_THEME_FROG, true
	case "FRUITS":
		return Theme_THEME_FRUITS, true
	case "FUN":
		return Theme_THEME_FUN, true
	case "FUNERAL":
		return Theme_THEME_FUNERAL, true
	case "FUR":
		return Theme_THEME_FUR, true
	case "FURNITURE":
		return Theme_THEME_FURNITURE, true
	case "FUTURE":
		return Theme_THEME_FUTURE, true
	case "GABON":
		return Theme_THEME_GABON, true
	case "GAMBIA":
		return Theme_THEME_GAMBIA, true
	case "GAMBLING":
		return Theme_THEME_GAMBLING, true
	case "GAME":
		return Theme_THEME_GAME, true
	case "GANGSTALIFE":
		return Theme_THEME_GANGSTALIFE, true
	case "GARBAGE":
		return Theme_THEME_GARBAGE, true
	case "GARDEN":
		return Theme_THEME_GARDEN, true
	case "GASOLINE":
		return Theme_THEME_GASOLINE, true
	case "GASSTATION":
		return Theme_THEME_GASSTATION, true
	case "GEEK":
		return Theme_THEME_GEEK, true
	case "GENDER":
		return Theme_THEME_GENDER, true
	case "GENERAL":
		return Theme_THEME_GENERAL, true
	case "GENOCIDE":
		return Theme_THEME_GENOCIDE, true
	case "GENTLE":
		return Theme_THEME_GENTLE, true
	case "GEOGRAPHICLOCATION":
		return Theme_THEME_GEOGRAPHICLOCATION, true
	case "GEOGRAPHY":
		return Theme_THEME_GEOGRAPHY, true
	case "GEORGIA":
		return Theme_THEME_GEORGIA, true
	case "GERMANY":
		return Theme_THEME_GERMANY, true
	case "GESTURES":
		return Theme_THEME_GESTURES, true
	case "GETLOST":
		return Theme_THEME_GETLOST, true
	case "GETTINGOVER":
		return Theme_THEME_GETTINGOVER, true
	case "GHANA":
		return Theme_THEME_GHANA, true
	case "GHOST":
		return Theme_THEME_GHOST, true
	case "GIRLS":
		return Theme_THEME_GIRLS, true
	case "GIVE":
		return Theme_THEME_GIVE, true
	case "GO":
		return Theme_THEME_GO, true
	case "GOD":
		return Theme_THEME_GOD, true
	case "GOLD":
		return Theme_THEME_GOLD, true
	case "GOLF":
		return Theme_THEME_GOLF, true
	case "GOOD":
		return Theme_THEME_GOOD, true
	case "GOODLIFE":
		return Theme_THEME_GOODLIFE, true
	case "GOODNIGHT":
		return Theme_THEME_GOODNIGHT, true
	case "GOSSIP":
		return Theme_THEME_GOSSIP, true
	case "GOVERNMENT":
		return Theme_THEME_GOVERNMENT, true
	case "GRANDPARENT":
		return Theme_THEME_GRANDPARENT, true
	case "GRATITUDE":
		return Theme_THEME_GRATITUDE, true
	case "GREATBRITAIN":
		return Theme_THEME_GREATBRITAIN, true
	case "GREECE":
		return Theme_THEME_GREECE, true
	case "GREED":
		return Theme_THEME_GREED, true
	case "GREEN":
		return Theme_THEME_GREEN, true
	case "GRENADA":
		return Theme_THEME_GRENADA, true
	case "GREY":
		return Theme_THEME_GREY, true
	case "GROWOLDER":
		return Theme_THEME_GROWOLDER, true
	case "GROWUP":
		return Theme_THEME_GROWUP, true
	case "GUATEMALA":
		return Theme_THEME_GUATEMALA, true
	case "GUILT":
		return Theme_THEME_GUILT, true
	case "GUINEA":
		return Theme_THEME_GUINEA, true
	case "GUINEA_BISSAU":
		return Theme_THEME_GUINEA_BISSAU, true
	case "GUITAR":
		return Theme_THEME_GUITAR, true
	case "GUN":
		return Theme_THEME_GUN, true
	case "GUYANA":
		return Theme_THEME_GUYANA, true
	case "GYPSY":
		return Theme_THEME_GYPSY, true
	case "HAIR":
		return Theme_THEME_HAIR, true
	case "HAITI":
		return Theme_THEME_HAITI, true
	case "HALLOWEEN":
		return Theme_THEME_HALLOWEEN, true
	case "HANDS":
		return Theme_THEME_HANDS, true
	case "HANDSOME":
		return Theme_THEME_HANDSOME, true
	case "HANGOUT":
		return Theme_THEME_HANGOUT, true
	case "HAPPINESS":
		return Theme_THEME_HAPPINESS, true
	case "HARBOR":
		return Theme_THEME_HARBOR, true
	case "HAT":
		return Theme_THEME_HAT, true
	case "HATE":
		return Theme_THEME_HATE, true
	case "HAVANA":
		return Theme_THEME_HAVANA, true
	case "HAWAII":
		return Theme_THEME_HAWAII, true
	case "HEAD":
		return Theme_THEME_HEAD, true
	case "HEALING":
		return Theme_THEME_HEALING, true
	case "HEALTHANDWELLNESS":
		return Theme_THEME_HEALTHANDWELLNESS, true
	case "HEART":
		return Theme_THEME_HEART, true
	case "HEARTACHE":
		return Theme_THEME_HEARTACHE, true
	case "HEAVEN":
		return Theme_THEME_HEAVEN, true
	case "HELL":
		return Theme_THEME_HELL, true
	case "HELLO":
		return Theme_THEME_HELLO, true
	case "HELP":
		return Theme_THEME_HELP, true
	case "HERO":
		return Theme_THEME_HERO, true
	case "HEROISM":
		return Theme_THEME_HEROISM, true
	case "HIDE":
		return Theme_THEME_HIDE, true
	case "HIGH":
		return Theme_THEME_HIGH, true
	case "HIGHEST":
		return Theme_THEME_HIGHEST, true
	case "HIGHLAND":
		return Theme_THEME_HIGHLAND, true
	case "HIGHWAY":
		return Theme_THEME_HIGHWAY, true
	case "HILLBILLY":
		return Theme_THEME_HILLBILLY, true
	case "HILLS":
		return Theme_THEME_HILLS, true
	case "HIPPIE":
		return Theme_THEME_HIPPIE, true
	case "HIPS":
		return Theme_THEME_HIPS, true
	case "HISTORY":
		return Theme_THEME_HISTORY, true
	case "HOLDINGON":
		return Theme_THEME_HOLDINGON, true
	case "HOLE":
		return Theme_THEME_HOLE, true
	case "HOLIDAY":
		return Theme_THEME_HOLIDAY, true
	case "HOLLAND":
		return Theme_THEME_HOLLAND, true
	case "HOLLYWOOD":
		return Theme_THEME_HOLLYWOOD, true
	case "HOME":
		return Theme_THEME_HOME, true
	case "HONDURAS":
		return Theme_THEME_HONDURAS, true
	case "HONESTY":
		return Theme_THEME_HONESTY, true
	case "HONEYMOON":
		return Theme_THEME_HONEYMOON, true
	case "HONGKONG":
		return Theme_THEME_HONGKONG, true
	case "HOPE":
		return Theme_THEME_HOPE, true
	case "HORN":
		return Theme_THEME_HORN, true
	case "HORROR":
		return Theme_THEME_HORROR, true
	case "HORSE":
		return Theme_THEME_HORSE, true
	case "HORSERACING":
		return Theme_THEME_HORSERACING, true
	case "HOSPITAL":
		return Theme_THEME_HOSPITAL, true
	case "HOT":
		return Theme_THEME_HOT, true
	case "HOTEL":
		return Theme_THEME_HOTEL, true
	case "HOUSE":
		return Theme_THEME_HOUSE, true
	case "HOUSTON":
		return Theme_THEME_HOUSTON, true
	case "HUMAN":
		return Theme_THEME_HUMAN, true
	case "HUNDRED":
		return Theme_THEME_HUNDRED, true
	case "HUNGARY":
		return Theme_THEME_HUNGARY, true
	case "HUSBAND":
		return Theme_THEME_HUSBAND, true
	case "ICELAND":
		return Theme_THEME_ICELAND, true
	case "IDAHO":
		return Theme_THEME_IDAHO, true
	case "IDEA":
		return Theme_THEME_IDEA, true
	case "IDEAL":
		return Theme_THEME_IDEAL, true
	case "IDEAS":
		return Theme_THEME_IDEAS, true
	case "IDENTITY":
		return Theme_THEME_IDENTITY, true
	case "IDENTITYCRISIS":
		return Theme_THEME_IDENTITYCRISIS, true
	case "IGNORANCE":
		return Theme_THEME_IGNORANCE, true
	case "ILLINOIS":
		return Theme_THEME_ILLINOIS, true
	case "IMMORTALITY":
		return Theme_THEME_IMMORTALITY, true
	case "INCH":
		return Theme_THEME_INCH, true
	case "INDEPENDENCE":
		return Theme_THEME_INDEPENDENCE, true
	case "INDIA":
		return Theme_THEME_INDIA, true
	case "INDIANA":
		return Theme_THEME_INDIANA, true
	case "INDIVIDUALITY":
		return Theme_THEME_INDIVIDUALITY, true
	case "INDONESIA":
		return Theme_THEME_INDONESIA, true
	case "INFATUATED":
		return Theme_THEME_INFATUATED, true
	case "INFORMATION":
		return Theme_THEME_INFORMATION, true
	case "INFRONT":
		return Theme_THEME_INFRONT, true
	case "INNOCENCE":
		return Theme_THEME_INNOCENCE, true
	case "INSECT":
		return Theme_THEME_INSECT, true
	case "INSECURE":
		return Theme_THEME_INSECURE, true
	case "INSIGHT":
		return Theme_THEME_INSIGHT, true
	case "INSOMNIA":
		return Theme_THEME_INSOMNIA, true
	case "INSPIRATION":
		return Theme_THEME_INSPIRATION, true
	case "INSULT":
		return Theme_THEME_INSULT, true
	case "INTEGRITY":
		return Theme_THEME_INTEGRITY, true
	case "INTENTION":
		return Theme_THEME_INTENTION, true
	case "INTOXICATED":
		return Theme_THEME_INTOXICATED, true
	case "INTROUBLE":
		return Theme_THEME_INTROUBLE, true
	case "INVISIBLE":
		return Theme_THEME_INVISIBLE, true
	case "IOWA":
		return Theme_THEME_IOWA, true
	case "IRAN":
		return Theme_THEME_IRAN, true
	case "IRAQ":
		return Theme_THEME_IRAQ, true
	case "IRELAND":
		return Theme_THEME_IRELAND, true
	case "ISLAND":
		return Theme_THEME_ISLAND, true
	case "ISLEOFMAN":
		return Theme_THEME_ISLEOFMAN, true
	case "ISRAEL":
		return Theme_THEME_ISRAEL, true
	case "ITALY":
		return Theme_THEME_ITALY, true
	case "IVORYCOAST":
		return Theme_THEME_IVORYCOAST, true
	case "JAMAICA":
		return Theme_THEME_JAMAICA, true
	case "JANUARY":
		return Theme_THEME_JANUARY, true
	case "JAPAN":
		return Theme_THEME_JAPAN, true
	case "JAVA":
		return Theme_THEME_JAVA, true
	case "JEALOUS":
		return Theme_THEME_JEALOUS, true
	case "JESUSCHRIST":
		return Theme_THEME_JESUSCHRIST, true
	case "JEWELRY":
		return Theme_THEME_JEWELRY, true
	case "JORDAN":
		return Theme_THEME_JORDAN, true
	case "JUKEBOX":
		return Theme_THEME_JUKEBOX, true
	case "JULY":
		return Theme_THEME_JULY, true
	case "JUMP":
		return Theme_THEME_JUMP, true
	case "JUNE":
		return Theme_THEME_JUNE, true
	case "JUSTICE":
		return Theme_THEME_JUSTICE, true
	case "KANGAROO":
		return Theme_THEME_KANGAROO, true
	case "KANSAS":
		return Theme_THEME_KANSAS, true
	case "KANSASCITY":
		return Theme_THEME_KANSASCITY, true
	case "KARAOKE":
		return Theme_THEME_KARAOKE, true
	case "KARMA":
		return Theme_THEME_KARMA, true
	case "KAZAKHSTAN":
		return Theme_THEME_KAZAKHSTAN, true
	case "KENTUCKY":
		return Theme_THEME_KENTUCKY, true
	case "KENYA":
		return Theme_THEME_KENYA, true
	case "KEYS":
		return Theme_THEME_KEYS, true
	case "KIRIBATI":
		return Theme_THEME_KIRIBATI, true
	case "KISS":
		return Theme_THEME_KISS, true
	case "KNEES":
		return Theme_THEME_KNEES, true
	case "KNOWLEDGE":
		return Theme_THEME_KNOWLEDGE, true
	case "KUWAIT":
		return Theme_THEME_KUWAIT, true
	case "KYRGYZSTAN":
		return Theme_THEME_KYRGYZSTAN, true
	case "LAKE":
		return Theme_THEME_LAKE, true
	case "LAOS":
		return Theme_THEME_LAOS, true
	case "LASTING":
		return Theme_THEME_LASTING, true
	case "LASTNIGHT":
		return Theme_THEME_LASTNIGHT, true
	case "LASVEGAS":
		return Theme_THEME_LASVEGAS, true
	case "LATE":
		return Theme_THEME_LATE, true
	case "LATVIA":
		return Theme_THEME_LATVIA, true
	case "LAUGHTER":
		return Theme_THEME_LAUGHTER, true
	case "LAWANDORDER":
		return Theme_THEME_LAWANDORDER, true
	case "LAWENFORCEMENT":
		return Theme_THEME_LAWENFORCEMENT, true
	case "LAZY":
		return Theme_THEME_LAZY, true
	case "LEADER":
		return Theme_THEME_LEADER, true
	case "LEARN":
		return Theme_THEME_LEARN, true
	case "LEAVE":
		return Theme_THEME_LEAVE, true
	case "LEBANON":
		return Theme_THEME_LEBANON, true
	case "LECTURING":
		return Theme_THEME_LECTURING, true
	case "LEFT":
		return Theme_THEME_LEFT, true
	case "LEGS":
		return Theme_THEME_LEGS, true
	case "LESOTHO":
		return Theme_THEME_LESOTHO, true
	case "LIBERIA":
		return Theme_THEME_LIBERIA, true
	case "LIBYA":
		return Theme_THEME_LIBYA, true
	case "LIECHTENSTEIN":
		return Theme_THEME_LIECHTENSTEIN, true
	case "LIES":
		return Theme_THEME_LIES, true
	case "LIGHT":
		return Theme_THEME_LIGHT, true
	case "LIGHTHOUSE":
		return Theme_THEME_LIGHTHOUSE, true
	case "LIGHTNING":
		return Theme_THEME_LIGHTNING, true
	case "LION":
		return Theme_THEME_LION, true
	case "LIPS":
		return Theme_THEME_LIPS, true
	case "LISTENING":
		return Theme_THEME_LISTENING, true
	case "LITHUANIA":
		return Theme_THEME_LITHUANIA, true
	case "LIVING":
		return Theme_THEME_LIVING, true
	case "LOCATION":
		return Theme_THEME_LOCATION, true
	case "LOCK":
		return Theme_THEME_LOCK, true
	case "LONDON":
		return Theme_THEME_LONDON, true
	case "LONELY":
		return Theme_THEME_LONELY, true
	case "LONGING":
		return Theme_THEME_LONGING, true
	case "LOOK":
		return Theme_THEME_LOOK, true
	case "LOSANGELES":
		return Theme_THEME_LOSANGELES, true
	case "LOSINGYOU":
		return Theme_THEME_LOSINGYOU, true
	case "LOSS":
		return Theme_THEME_LOSS, true
	case "LOST":
		return Theme_THEME_LOST, true
	case "LOSTTHATLOVINGFEELING":
		return Theme_THEME_LOSTTHATLOVINGFEELING, true
	case "LOUISIANA":
		return Theme_THEME_LOUISIANA, true
	case "LOVE":
		return Theme_THEME_LOVE, true
	case "LOVELY":
		return Theme_THEME_LOVELY, true
	case "LOW":
		return Theme_THEME_LOW, true
	case "LOYALTY":
		return Theme_THEME_LOYALTY, true
	case "LUCKY":
		return Theme_THEME_LUCKY, true
	case "LUXEMBOURG":
		return Theme_THEME_LUXEMBOURG, true
	case "MACAO":
		return Theme_THEME_MACAO, true
	case "MADAGASCAR":
		return Theme_THEME_MADAGASCAR, true
	case "MAGIC":
		return Theme_THEME_MAGIC, true
	case "MAGICIAN":
		return Theme_THEME_MAGICIAN, true
	case "MAIL":
		return Theme_THEME_MAIL, true
	case "MAINE":
		return Theme_THEME_MAINE, true
	case "MAKINGLOVE":
		return Theme_THEME_MAKINGLOVE, true
	case "MALAWI":
		return Theme_THEME_MALAWI, true
	case "MALAYSIA":
		return Theme_THEME_MALAYSIA, true
	case "MALDIVES":
		return Theme_THEME_MALDIVES, true
	case "MALI":
		return Theme_THEME_MALI, true
	case "MALTA":
		return Theme_THEME_MALTA, true
	case "MAMMAL":
		return Theme_THEME_MAMMAL, true
	case "MANIPULATE":
		return Theme_THEME_MANIPULATE, true
	case "MARCH":
		return Theme_THEME_MARCH, true
	case "MARDIGRAS":
		return Theme_THEME_MARDIGRAS, true
	case "MARRIEDLIFE":
		return Theme_THEME_MARRIEDLIFE, true
	case "MARSHALLISLANDS":
		return Theme_THEME_MARSHALLISLANDS, true
	case "MARYLAND":
		return Theme_THEME_MARYLAND, true
	case "MASSACHUSETTS":
		return Theme_THEME_MASSACHUSETTS, true
	case "MAURITANIA":
		return Theme_THEME_MAURITANIA, true
	case "MAURITIUS":
		return Theme_THEME_MAURITIUS, true
	case "MAY":
		return Theme_THEME_MAY, true
	case "ME":
		return Theme_THEME_ME, true
	case "MEAN":
		return Theme_THEME_MEAN, true
	case "MEASUREMENT":
		return Theme_THEME_MEASUREMENT, true
	case "MEDELLN":
		return Theme_THEME_MEDELLN, true
	case "MEDICAL":
		return Theme_THEME_MEDICAL, true
	case "MEDITATION":
		return Theme_THEME_MEDITATION, true
	case "MEMORY":
		return Theme_THEME_MEMORY, true
	case "MEMPHIS":
		return Theme_THEME_MEMPHIS, true
	case "MEN":
		return Theme_THEME_MEN, true
	case "MENSNAMES":
		return Theme_THEME_MENSNAMES, true
	case "MENTALILLNESS":
		return Theme_THEME_MENTALILLNESS, true
	case "MENTALITY":
		return Theme_THEME_MENTALITY, true
	case "MENTALKINGTOMEN":
		return Theme_THEME_MENTALKINGTOMEN, true
	case "MENTALKINGTOWOMEN":
		return Theme_THEME_MENTALKINGTOWOMEN, true
	case "MERCY":
		return Theme_THEME_MERCY, true
	case "METHOD":
		return Theme_THEME_METHOD, true
	case "MEXICO":
		return Theme_THEME_MEXICO, true
	case "MIAMI":
		return Theme_THEME_MIAMI, true
	case "MICHIGAN":
		return Theme_THEME_MICHIGAN, true
	case "MICRONESIA":
		return Theme_THEME_MICRONESIA, true
	case "MIDDLEEAST":
		return Theme_THEME_MIDDLEEAST, true
	case "MIDNIGHT":
		return Theme_THEME_MIDNIGHT, true
	case "MILE":
		return Theme_THEME_MILE, true
	case "MILITARY":
		return Theme_THEME_MILITARY, true
	case "MILLION":
		return Theme_THEME_MILLION, true
	case "MIND":
		return Theme_THEME_MIND, true
	case "MINE":
		return Theme_THEME_MINE, true
	case "MINNESOTA":
		return Theme_THEME_MINNESOTA, true
	case "MIRACLE":
		return Theme_THEME_MIRACLE, true
	case "MISBEHAVIOR":
		return Theme_THEME_MISBEHAVIOR, true
	case "MISPLACE":
		return Theme_THEME_MISPLACE, true
	case "MISSINGYOU":
		return Theme_THEME_MISSINGYOU, true
	case "MISSISSIPPI":
		return Theme_THEME_MISSISSIPPI, true
	case "MISSOURI":
		return Theme_THEME_MISSOURI, true
	case "MISTAKES":
		return Theme_THEME_MISTAKES, true
	case "MOBILE":
		return Theme_THEME_MOBILE, true
	case "MOLDOVA":
		return Theme_THEME_MOLDOVA, true
	case "MONACO":
		return Theme_THEME_MONACO, true
	case "MONDAY":
		return Theme_THEME_MONDAY, true
	case "MONEY":
		return Theme_THEME_MONEY, true
	case "MONGOLIA":
		return Theme_THEME_MONGOLIA, true
	case "MONKEY":
		return Theme_THEME_MONKEY, true
	case "MONSTER":
		return Theme_THEME_MONSTER, true
	case "MONTANA":
		return Theme_THEME_MONTANA, true
	case "MONTENEGRO":
		return Theme_THEME_MONTENEGRO, true
	case "MONTH":
		return Theme_THEME_MONTH, true
	case "MOON":
		return Theme_THEME_MOON, true
	case "MORALITY":
		return Theme_THEME_MORALITY, true
	case "MORNING":
		return Theme_THEME_MORNING, true
	case "MOROCCO":
		return Theme_THEME_MOROCCO, true
	case "MOSCOW":
		return Theme_THEME_MOSCOW, true
	case "MOTHER":
		return Theme_THEME_MOTHER, true
	case "MOTION":
		return Theme_THEME_MOTION, true
	case "MOTIVATION":
		return Theme_THEME_MOTIVATION, true
	case "MOTORCYCLES":
		return Theme_THEME_MOTORCYCLES, true
	case "MOUNTAIN":
		return Theme_THEME_MOUNTAIN, true
	case "MOURNING":
		return Theme_THEME_MOURNING, true
	case "MOUSE":
		return Theme_THEME_MOUSE, true
	case "MOUTH":
		return Theme_THEME_MOUTH, true
	case "MOVE":
		return Theme_THEME_MOVE, true
	case "MOVIE":
		return Theme_THEME_MOVIE, true
	case "MOVINGON":
		return Theme_THEME_MOVINGON, true
	case "MOZAMBIQUE":
		return Theme_THEME_MOZAMBIQUE, true
	case "MULE":
		return Theme_THEME_MULE, true
	case "MULTIPLEBODYPARTS":
		return Theme_THEME_MULTIPLEBODYPARTS, true
	case "MURDER":
		return Theme_THEME_MURDER, true
	case "MUSIC":
		return Theme_THEME_MUSIC, true
	case "MUSICALINSTRUMENT":
		return Theme_THEME_MUSICALINSTRUMENT, true
	case "MUSICBUSINESS":
		return Theme_THEME_MUSICBUSINESS, true
	case "MYANMAR":
		return Theme_THEME_MYANMAR, true
	case "MYSTERY":
		return Theme_THEME_MYSTERY, true
	case "NAMIBIA":
		return Theme_THEME_NAMIBIA, true
	case "NASHVILLE":
		return Theme_THEME_NASHVILLE, true
	case "NATURE":
		return Theme_THEME_NATURE, true
	case "NAURU":
		return Theme_THEME_NAURU, true
	case "NEAR":
		return Theme_THEME_NEAR, true
	case "NEBRASKA":
		return Theme_THEME_NEBRASKA, true
	case "NECK":
		return Theme_THEME_NECK, true
	case "NEED":
		return Theme_THEME_NEED, true
	case "NEPAL":
		return Theme_THEME_NEPAL, true
	case "NERVOUS":
		return Theme_THEME_NERVOUS, true
	case "NETHERLANDS":
		return Theme_THEME_NETHERLANDS, true
	case "NEVADA":
		return Theme_THEME_NEVADA, true
	case "NEW":
		return Theme_THEME_NEW, true
	case "NEWDAY":
		return Theme_THEME_NEWDAY, true
	case "NEWHAMPSHIRE":
		return Theme_THEME_NEWHAMPSHIRE, true
	case "NEWJERSEY":
		return Theme_THEME_NEWJERSEY, true
	case "NEWMEXICO":
		return Theme_THEME_NEWMEXICO, true
	case "NEWORLEANS":
		return Theme_THEME_NEWORLEANS, true
	case "NEWS":
		return Theme_THEME_NEWS, true
	case "NEWYEAR":
		return Theme_THEME_NEWYEAR, true
	case "NEWYORK":
		return Theme_THEME_NEWYORK, true
	case "NEWYORKCITY":
		return Theme_THEME_NEWYORKCITY, true
	case "NEWZEALAND":
		return Theme_THEME_NEWZEALAND, true
	case "NICARAGUA":
		return Theme_THEME_NICARAGUA, true
	case "NIGER":
		return Theme_THEME_NIGER, true
	case "NIGERIA":
		return Theme_THEME_NIGERIA, true
	case "NIGHT":
		return Theme_THEME_NIGHT, true
	case "NIGHTINGALE":
		return Theme_THEME_NIGHTINGALE, true
	case "NIGHTMARE":
		return Theme_THEME_NIGHTMARE, true
	case "NONE":
		return Theme_THEME_NONE, true
	case "NONROMANTIC":
		return Theme_THEME_NONROMANTIC, true
	case "NOON":
		return Theme_THEME_NOON, true
	case "NORTH":
		return Theme_THEME_NORTH, true
	case "NORTHAMERICA":
		return Theme_THEME_NORTHAMERICA, true
	case "NORTHDAKOTA":
		return Theme_THEME_NORTHDAKOTA, true
	case "NORTHKOREA":
		return Theme_THEME_NORTHKOREA, true
	case "NORTHMACEDONIA":
		return Theme_THEME_NORTHMACEDONIA, true
	case "NORWAY":
		return Theme_THEME_NORWAY, true
	case "NOSTALGIA":
		return Theme_THEME_NOSTALGIA, true
	case "NOTCOMMITTED":
		return Theme_THEME_NOTCOMMITTED, true
	case "NOTMYTYPE":
		return Theme_THEME_NOTMYTYPE, true
	case "NOVEMBER":
		return Theme_THEME_NOVEMBER, true
	case "NOW":
		return Theme_THEME_NOW, true
	case "NUCLEARENERGY":
		return Theme_THEME_NUCLEARENERGY, true
	case "NUCLEARWAR":
		return Theme_THEME_NUCLEARWAR, true
	case "NUMBER":
		return Theme_THEME_NUMBER, true
	case "OBJECTS":
		return Theme_THEME_OBJECTS, true
	case "OBSESSION":
		return Theme_THEME_OBSESSION, true
	case "OCEAN":
		return Theme_THEME_OCEAN, true
	case "OCEANIA":
		return Theme_THEME_OCEANIA, true
	case "OCTOBER":
		return Theme_THEME_OCTOBER, true
	case "OHIO":
		return Theme_THEME_OHIO, true
	case "OKLAHOMA":
		return Theme_THEME_OKLAHOMA, true
	case "OLD":
		return Theme_THEME_OLD, true
	case "OLYMPICS":
		return Theme_THEME_OLYMPICS, true
	case "OMAN":
		return Theme_THEME_OMAN, true
	case "ONENIGHTSTAND":
		return Theme_THEME_ONENIGHTSTAND, true
	case "OPINIONS":
		return Theme_THEME_OPINIONS, true
	case "OPPORTUNITY":
		return Theme_THEME_OPPORTUNITY, true
	case "OPPRESSION":
		return Theme_THEME_OPPRESSION, true
	case "OPTIMISM":
		return Theme_THEME_OPTIMISM, true
	case "ORANGE":
		return Theme_THEME_ORANGE, true
	case "OREGON":
		return Theme_THEME_OREGON, true
	case "ORPHAN":
		return Theme_THEME_ORPHAN, true
	case "OUTDOOR":
		return Theme_THEME_OUTDOOR, true
	case "OUTLAW":
		return Theme_THEME_OUTLAW, true
	case "PACIFICISLANDS":
		return Theme_THEME_PACIFICISLANDS, true
	case "PAD":
		return Theme_THEME_PAD, true
	case "PAIN":
		return Theme_THEME_PAIN, true
	case "PAKISTAN":
		return Theme_THEME_PAKISTAN, true
	case "PALAU":
		return Theme_THEME_PALAU, true
	case "PANAMA":
		return Theme_THEME_PANAMA, true
	case "PANIC":
		return Theme_THEME_PANIC, true
	case "PAPER":
		return Theme_THEME_PAPER, true
	case "PAPUANEWGUINEA":
		return Theme_THEME_PAPUANEWGUINEA, true
	case "PARADE":
		return Theme_THEME_PARADE, true
	case "PARAGUAY":
		return Theme_THEME_PARAGUAY, true
	case "PARENT":
		return Theme_THEME_PARENT, true
	case "PARIS":
		return Theme_THEME_PARIS, true
	case "PARK":
		return Theme_THEME_PARK, true
	case "PARTY":
		return Theme_THEME_PARTY, true
	case "PAST":
		return Theme_THEME_PAST, true
	case "PATIENCE":
		return Theme_THEME_PATIENCE, true
	case "PATRIOTISM":
		return Theme_THEME_PATRIOTISM, true
	case "PAW":
		return Theme_THEME_PAW, true
	case "PEACE":
		return Theme_THEME_PEACE, true
	case "PENNSYLVANIA":
		return Theme_THEME_PENNSYLVANIA, true
	case "PEOPLE":
		return Theme_THEME_PEOPLE, true
	case "PERCUSSION":
		return Theme_THEME_PERCUSSION, true
	case "PERFECTION":
		return Theme_THEME_PERFECTION, true
	case "PERSEVERE":
		return Theme_THEME_PERSEVERE, true
	case "PERU":
		return Theme_THEME_PERU, true
	case "PHARMACEUTICAL":
		return Theme_THEME_PHARMACEUTICAL, true
	case "PHILADELPHIA":
		return Theme_THEME_PHILADELPHIA, true
	case "PHILIPPINES":
		return Theme_THEME_PHILIPPINES, true
	case "PHILOSOPHY":
		return Theme_THEME_PHILOSOPHY, true
	case "PHONE":
		return Theme_THEME_PHONE, true
	case "PHOTOGRAPH":
		return Theme_THEME_PHOTOGRAPH, true
	case "PHYSICALPAIN":
		return Theme_THEME_PHYSICALPAIN, true
	case "PIANO":
		return Theme_THEME_PIANO, true
	case "PIG":
		return Theme_THEME_PIG, true
	case "PINK":
		return Theme_THEME_PINK, true
	case "PIRATE":
		return Theme_THEME_PIRATE, true
	case "PLACE":
		return Theme_THEME_PLACE, true
	case "PLANET":
		return Theme_THEME_PLANET, true
	case "PLATONIC":
		return Theme_THEME_PLATONIC, true
	case "PLAYER":
		return Theme_THEME_PLAYER, true
	case "PLAYMUSIC":
		return Theme_THEME_PLAYMUSIC, true
	case "PLEASE":
		return Theme_THEME_PLEASE, true
	case "POISON":
		return Theme_THEME_POISON, true
	case "POLAND":
		return Theme_THEME_POLAND, true
	case "POLITICAL":
		return Theme_THEME_POLITICAL, true
	case "POLITICALSTATE":
		return Theme_THEME_POLITICALSTATE, true
	case "POLITICS":
		return Theme_THEME_POLITICS, true
	case "POLYNESIA":
		return Theme_THEME_POLYNESIA, true
	case "PONY":
		return Theme_THEME_PONY, true
	case "PORPOISE":
		return Theme_THEME_PORPOISE, true
	case "PORTUGAL":
		return Theme_THEME_PORTUGAL, true
	case "POSSESSED":
		return Theme_THEME_POSSESSED, true
	case "POSSIBILITY":
		return Theme_THEME_POSSIBILITY, true
	case "POVERTY":
		return Theme_THEME_POVERTY, true
	case "POWERANDCONTROL":
		return Theme_THEME_POWERANDCONTROL, true
	case "PRAIRIE":
		return Theme_THEME_PRAIRIE, true
	case "PRAYER":
		return Theme_THEME_PRAYER, true
	case "PREGNANCY":
		return Theme_THEME_PREGNANCY, true
	case "PREJUDICE":
		return Theme_THEME_PREJUDICE, true
	case "PRESENT":
		return Theme_THEME_PRESENT, true
	case "PRESIDENT":
		return Theme_THEME_PRESIDENT, true
	case "PRETTY":
		return Theme_THEME_PRETTY, true
	case "PRIDE":
		return Theme_THEME_PRIDE, true
	case "PRISON":
		return Theme_THEME_PRISON, true
	case "PRIVACY":
		return Theme_THEME_PRIVACY, true
	case "PROBLEMS":
		return Theme_THEME_PROBLEMS, true
	case "PRODUCTANDBRAND":
		return Theme_THEME_PRODUCTANDBRAND, true
	case "PROMISE":
		return Theme_THEME_PROMISE, true
	case "PROPHECY":
		return Theme_THEME_PROPHECY, true
	case "PROTECT":
		return Theme_THEME_PROTECT, true
	case "PROTEST":
		return Theme_THEME_PROTEST, true
	case "PUERTORICO":
		return Theme_THEME_PUERTORICO, true
	case "PURPLE":
		return Theme_THEME_PURPLE, true
	case "QATAR":
		return Theme_THEME_QATAR, true
	case "QUALITY":
		return Theme_THEME_QUALITY, true
	case "QUESTION":
		return Theme_THEME_QUESTION, true
	case "QUESTIONING":
		return Theme_THEME_QUESTIONING, true
	case "RABBIT":
		return Theme_THEME_RABBIT, true
	case "RACISM":
		return Theme_THEME_RACISM, true
	case "RADIO":
		return Theme_THEME_RADIO, true
	case "RAIN":
		return Theme_THEME_RAIN, true
	case "RAINBOW":
		return Theme_THEME_RAINBOW, true
	case "RANCH":
		return Theme_THEME_RANCH, true
	case "RAPGAME":
		return Theme_THEME_RAPGAME, true
	case "RAT":
		return Theme_THEME_RAT, true
	case "READY":
		return Theme_THEME_READY, true
	case "REAL":
		return Theme_THEME_REAL, true
	case "REAR":
		return Theme_THEME_REAR, true
	case "REBELLION":
		return Theme_THEME_REBELLION, true
	case "RECOVERY":
		return Theme_THEME_RECOVERY, true
	case "RED":
		return Theme_THEME_RED, true
	case "REDEMPTION":
		return Theme_THEME_REDEMPTION, true
	case "REDHEAD":
		return Theme_THEME_REDHEAD, true
	case "REFLECT":
		return Theme_THEME_REFLECT, true
	case "REGRET":
		return Theme_THEME_REGRET, true
	case "REHAB":
		return Theme_THEME_REHAB, true
	case "REJECTION":
		return Theme_THEME_REJECTION, true
	case "RELAX":
		return Theme_THEME_RELAX, true
	case "RELIGION":
		return Theme_THEME_RELIGION, true
	case "REMEMBER":
		return Theme_THEME_REMEMBER, true
	case "REPEAT":
		return Theme_THEME_REPEAT, true
	case "REPTILE":
		return Theme_THEME_REPTILE, true
	case "REPUBLICOFTHECONGO":
		return Theme_THEME_REPUBLICOFTHECONGO, true
	case "RESCUE":
		return Theme_THEME_RESCUE, true
	case "RESILIENT":
		return Theme_THEME_RESILIENT, true
	case "RESPECT":
		return Theme_THEME_RESPECT, true
	case "RESTAURANT":
		return Theme_THEME_RESTAURANT, true
	case "RETURN":
		return Theme_THEME_RETURN, true
	case "REUNITE":
		return Theme_THEME_REUNITE, true
	case "REVENGE":
		return Theme_THEME_REVENGE, true
	case "REVOLUTION":
		return Theme_THEME_REVOLUTION, true
	case "REVOLVE":
		return Theme_THEME_REVOLVE, true
	case "RHODEISLAND":
		return Theme_THEME_RHODEISLAND, true
	case "RHYTHM":
		return Theme_THEME_RHYTHM, true
	case "RIDE":
		return Theme_THEME_RIDE, true
	case "RIGHT":
		return Theme_THEME_RIGHT, true
	case "RIODEJANEIRO":
		return Theme_THEME_RIODEJANEIRO, true
	case "RISK":
		return Theme_THEME_RISK, true
	case "RIVER":
		return Theme_THEME_RIVER, true
	case "ROAD":
		return Theme_THEME_ROAD, true
	case "ROADACCIDENT":
		return Theme_THEME_ROADACCIDENT, true
	case "ROADTRIP":
		return Theme_THEME_ROADTRIP, true
	case "ROBOT":
		return Theme_THEME_ROBOT, true
	case "ROCK":
		return Theme_THEME_ROCK, true
	case "RODEO":
		return Theme_THEME_RODEO, true
	case "ROMANCE":
		return Theme_THEME_ROMANCE, true
	case "ROMANIA":
		return Theme_THEME_ROMANIA, true
	case "ROMANTIC":
		return Theme_THEME_ROMANTIC, true
	case "ROME":
		return Theme_THEME_ROME, true
	case "ROYALTY":
		return Theme_THEME_ROYALTY, true
	case "RUN":
		return Theme_THEME_RUN, true
	case "RUSSIA":
		return Theme_THEME_RUSSIA, true
	case "RWANDA":
		return Theme_THEME_RWANDA, true
	case "SAD":
		return Theme_THEME_SAD, true
	case "SAFETY":
		return Theme_THEME_SAFETY, true
	case "SAIL":
		return Theme_THEME_SAIL, true
	case "SAINTKITTSANDNEVIS":
		return Theme_THEME_SAINTKITTSANDNEVIS, true
	case "SAINTLUCIA":
		return Theme_THEME_SAINTLUCIA, true
	case "SAINTVINCENTANDTHEGRENADINES":
		return Theme_THEME_SAINTVINCENTANDTHEGRENADINES, true
	case "SALTLAKECITY":
		return Theme_THEME_SALTLAKECITY, true
	case "SAME":
		return Theme_THEME_SAME, true
	case "SAMOA":
		return Theme_THEME_SAMOA, true
	case "SANANTONIO":
		return Theme_THEME_SANANTONIO, true
	case "SANFRANCISCO":
		return Theme_THEME_SANFRANCISCO, true
	case "SANMARINO":
		return Theme_THEME_SANMARINO, true
	case "SANTACLAUS":
		return Theme_THEME_SANTACLAUS, true
	case "SANTAFE":
		return Theme_THEME_SANTAFE, true
	case "SAOTOMEANDPRINCIPE":
		return Theme_THEME_SAOTOMEANDPRINCIPE, true
	case "SATISFACTION":
		return Theme_THEME_SATISFACTION, true
	case "SATURDAY":
		return Theme_THEME_SATURDAY, true
	case "SAUDIARABIA":
		return Theme_THEME_SAUDIARABIA, true
	case "SAVANNAH":
		return Theme_THEME_SAVANNAH, true
	case "SAVE":
		return Theme_THEME_SAVE, true
	case "SCANDINAVIA":
		return Theme_THEME_SCANDINAVIA, true
	case "SCHOOL":
		return Theme_THEME_SCHOOL, true
	case "SCOTLAND":
		return Theme_THEME_SCOTLAND, true
	case "SCREAM":
		return Theme_THEME_SCREAM, true
	case "SEA":
		return Theme_THEME_SEA, true
	case "SEARCH":
		return Theme_THEME_SEARCH, true
	case "SEARCHINGFOR":
		return Theme_THEME_SEARCHINGFOR, true
	case "SEASON":
		return Theme_THEME_SEASON, true
	case "SECRETS":
		return Theme_THEME_SECRETS, true
	case "SEDUCED":
		return Theme_THEME_SEDUCED, true
	case "SEGREGATION":
		return Theme_THEME_SEGREGATION, true
	case "SENEGAL":
		return Theme_THEME_SENEGAL, true
	case "SENSUALITY":
		return Theme_THEME_SENSUALITY, true
	case "SEPTEMBER":
		return Theme_THEME_SEPTEMBER, true
	case "SERBIA":
		return Theme_THEME_SERBIA, true
	case "SEYCHELLES":
		return Theme_THEME_SEYCHELLES, true
	case "SHAKE":
		return Theme_THEME_SHAKE, true
	case "SHAME":
		return Theme_THEME_SHAME, true
	case "SHARK":
		return Theme_THEME_SHARK, true
	case "SHEEP":
		return Theme_THEME_SHEEP, true
	case "SHELTER":
		return Theme_THEME_SHELTER, true
	case "SHINE":
		return Theme_THEME_SHINE, true
	case "SHIP":
		return Theme_THEME_SHIP, true
	case "SHOE":
		return Theme_THEME_SHOE, true
	case "SHOOT":
		return Theme_THEME_SHOOT, true
	case "SHOPPING":
		return Theme_THEME_SHOPPING, true
	case "SHOULDER":
		return Theme_THEME_SHOULDER, true
	case "SHOULDHAVESAID":
		return Theme_THEME_SHOULDHAVESAID, true
	case "SHOUTING":
		return Theme_THEME_SHOUTING, true
	case "SHOWBIZ":
		return Theme_THEME_SHOWBIZ, true
	case "SHY":
		return Theme_THEME_SHY, true
	case "SIERRALEONE":
		return Theme_THEME_SIERRALEONE, true
	case "SIGNS":
		return Theme_THEME_SIGNS, true
	case "SILENCE":
		return Theme_THEME_SILENCE, true
	case "SILVER":
		return Theme_THEME_SILVER, true
	case "SIMPLE":
		return Theme_THEME_SIMPLE, true
	case "SIN":
		return Theme_THEME_SIN, true
	case "SING":
		return Theme_THEME_SING, true
	case "SINGAPORE":
		return Theme_THEME_SINGAPORE, true
	case "SINGLEPARENT":
		return Theme_THEME_SINGLEPARENT, true
	case "SINGLEPERSON":
		return Theme_THEME_SINGLEPERSON, true
	case "SISTER":
		return Theme_THEME_SISTER, true
	case "SIT":
		return Theme_THEME_SIT, true
	case "SITUATION":
		return Theme_THEME_SITUATION, true
	case "SIZE":
		return Theme_THEME_SIZE, true
	case "SKATE":
		return Theme_THEME_SKATE, true
	case "SKATEBOARD":
		return Theme_THEME_SKATEBOARD, true
	case "SKI":
		return Theme_THEME_SKI, true
	case "SKIN":
		return Theme_THEME_SKIN, true
	case "SKY":
		return Theme_THEME_SKY, true
	case "SLAVERY":
		return Theme_THEME_SLAVERY, true
	case "SLEAZY":
		return Theme_THEME_SLEAZY, true
	case "SLEEP":
		return Theme_THEME_SLEEP, true
	case "SLOVAKIA":
		return Theme_THEME_SLOVAKIA, true
	case "SLOVENIA":
		return Theme_THEME_SLOVENIA, true
	case "SLOW":
		return Theme_THEME_SLOW, true
	case "SMALL":
		return Theme_THEME_SMALL, true
	case "SMALLTOWNLIFE":
		return Theme_THEME_SMALLTOWNLIFE, true
	case "SMART":
		return Theme_THEME_SMART, true
	case "SMILE":
		return Theme_THEME_SMILE, true
	case "SMOKE":
		return Theme_THEME_SMOKE, true
	case "SNAKE":
		return Theme_THEME_SNAKE, true
	case "SNOW":
		return Theme_THEME_SNOW, true
	case "SNOWMAN":
		return Theme_THEME_SNOWMAN, true
	case "SOBER":
		return Theme_THEME_SOBER, true
	case "SOCIALOUTCAST":
		return Theme_THEME_SOCIALOUTCAST, true
	case "SOLITUDE":
		return Theme_THEME_SOLITUDE, true
	case "SOLOMONISLANDS":
		return Theme_THEME_SOLOMONISLANDS, true
	case "SOMALIA":
		return Theme_THEME_SOMALIA, true
	case "SON":
		return Theme_THEME_SON, true
	case "SOUNDS":
		return Theme_THEME_SOUNDS, true
	case "SOUTH":
		return Theme_THEME_SOUTH, true
	case "SOUTHAFRICA":
		return Theme_THEME_SOUTHAFRICA, true
	case "SOUTHAMERICA":
		return Theme_THEME_SOUTHAMERICA, true
	case "SOUTHDAKOTA":
		return Theme_THEME_SOUTHDAKOTA, true
	case "SOUTHEASTASIA":
		return Theme_THEME_SOUTHEASTASIA, true
	case "SOUTHKOREA":
		return Theme_THEME_SOUTHKOREA, true
	case "SOUTHSUDAN":
		return Theme_THEME_SOUTHSUDAN, true
	case "SPACEDOUT":
		return Theme_THEME_SPACEDOUT, true
	case "SPAIN":
		return Theme_THEME_SPAIN, true
	case "SPECIAL":
		return Theme_THEME_SPECIAL, true
	case "SPECIFICAGE":
		return Theme_THEME_SPECIFICAGE, true
	case "SPECIFICTIME":
		return Theme_THEME_SPECIFICTIME, true
	case "SPEED":
		return Theme_THEME_SPEED, true
	case "SPIDER":
		return Theme_THEME_SPIDER, true
	case "SPIRIT":
		return Theme_THEME_SPIRIT, true
	case "SPORT":
		return Theme_THEME_SPORT, true
	case "SPRING":
		return Theme_THEME_SPRING, true
	case "SRILANKA":
		return Theme_THEME_SRILANKA, true
	case "ST_LOUIS":
		return Theme_THEME_ST_LOUIS, true
	case "STALKER":
		return Theme_THEME_STALKER, true
	case "STAND":
		return Theme_THEME_STAND, true
	case "STAR":
		return Theme_THEME_STAR, true
	case "START":
		return Theme_THEME_START, true
	case "STEAL":
		return Theme_THEME_STEAL, true
	case "STEPPARENT":
		return Theme_THEME_STEPPARENT, true
	case "STICK":
		return Theme_THEME_STICK, true
	case "STOP":
		return Theme_THEME_STOP, true
	case "STORM":
		return Theme_THEME_STORM, true
	case "STORYBOOKCHARACTER":
		return Theme_THEME_STORYBOOKCHARACTER, true
	case "STRANGE":
		return Theme_THEME_STRANGE, true
	case "STREET":
		return Theme_THEME_STREET, true
	case "STRESS":
		return Theme_THEME_STRESS, true
	case "STRING":
		return Theme_THEME_STRING, true
	case "STRINGANDROPE":
		return Theme_THEME_STRINGANDROPE, true
	case "STRONG":
		return Theme_THEME_STRONG, true
	case "STUBBORN":
		return Theme_THEME_STUBBORN, true
	case "STUPID":
		return Theme_THEME_STUPID, true
	case "STYLE":
		return Theme_THEME_STYLE, true
	case "SUBSTANCES":
		return Theme_THEME_SUBSTANCES, true
	case "SUCCESS":
		return Theme_THEME_SUCCESS, true
	case "SUDAN":
		return Theme_THEME_SUDAN, true
	case "SUFFRAGE":
		return Theme_THEME_SUFFRAGE, true
	case "SUICIDE":
		return Theme_THEME_SUICIDE, true
	case "SUMMER":
		return Theme_THEME_SUMMER, true
	case "SUN":
		return Theme_THEME_SUN, true
	case "SUNDAY":
		return Theme_THEME_SUNDAY, true
	case "SUNRISE":
		return Theme_THEME_SUNRISE, true
	case "SUNSHINE":
		return Theme_THEME_SUNSHINE, true
	case "SUPERHERO":
		return Theme_THEME_SUPERHERO, true
	case "SUPERIORITY":
		return Theme_THEME_SUPERIORITY, true
	case "SUPERNATURAL":
		return Theme_THEME_SUPERNATURAL, true
	case "SUPPORT":
		return Theme_THEME_SUPPORT, true
	case "SURF":
		return Theme_THEME_SURF, true
	case "SURINAME":
		return Theme_THEME_SURINAME, true
	case "SURPRISEPARTY":
		return Theme_THEME_SURPRISEPARTY, true
	case "SURVIVE":
		return Theme_THEME_SURVIVE, true
	case "SWAGGER":
		return Theme_THEME_SWAGGER, true
	case "SWAMP":
		return Theme_THEME_SWAMP, true
	case "SWEDEN":
		return Theme_THEME_SWEDEN, true
	case "SWEET":
		return Theme_THEME_SWEET, true
	case "SWIM":
		return Theme_THEME_SWIM, true
	case "SWITZERLAND":
		return Theme_THEME_SWITZERLAND, true
	case "SYMPATHY":
		return Theme_THEME_SYMPATHY, true
	case "SYNTHESIZER":
		return Theme_THEME_SYNTHESIZER, true
	case "SYRIA":
		return Theme_THEME_SYRIA, true
	case "TAIWAN":
		return Theme_THEME_TAIWAN, true
	case "TAJIKISTAN":
		return Theme_THEME_TAJIKISTAN, true
	case "TAKEMEBACK":
		return Theme_THEME_TAKEMEBACK, true
	case "TALKING":
		return Theme_THEME_TALKING, true
	case "TALL":
		return Theme_THEME_TALL, true
	case "TANZANIA":
		return Theme_THEME_TANZANIA, true
	case "TAROT":
		return Theme_THEME_TAROT, true
	case "TATTOO":
		return Theme_THEME_TATTOO, true
	case "TAXI":
		return Theme_THEME_TAXI, true
	case "TEACH":
		return Theme_THEME_TEACH, true
	case "TECHNOLOGY":
		return Theme_THEME_TECHNOLOGY, true
	case "TEETH":
		return Theme_THEME_TEETH, true
	case "TELEVISION":
		return Theme_THEME_TELEVISION, true
	case "TELL":
		return Theme_THEME_TELL, true
	case "TEMPERATURE":
		return Theme_THEME_TEMPERATURE, true
	case "TEMPTATION":
		return Theme_THEME_TEMPTATION, true
	case "TENNESSEE":
		return Theme_THEME_TENNESSEE, true
	case "TERRIBLE":
		return Theme_THEME_TERRIBLE, true
	case "TEXAS":
		return Theme_THEME_TEXAS, true
	case "TEXTMESSAGE":
		return Theme_THEME_TEXTMESSAGE, true
	case "THAILAND":
		return Theme_THEME_THAILAND, true
	case "THEATRE":
		return Theme_THEME_THEATRE, true
	case "THEM":
		return Theme_THEME_THEM, true
	case "THIN":
		return Theme_THEME_THIN, true
	case "THOUSAND":
		return Theme_THEME_THOUSAND, true
	case "THREATEN":
		return Theme_THEME_THREATEN, true
	case "THREEKINGS":
		return Theme_THEME_THREEKINGS, true
	case "THURSDAY":
		return Theme_THEME_THURSDAY, true
	case "TIBET":
		return Theme_THEME_TIBET, true
	case "TIGER":
		return Theme_THEME_TIGER, true
	case "TIME":
		return Theme_THEME_TIME, true
	case "TIMEOFDAY":
		return Theme_THEME_TIMEOFDAY, true
	case "TIMOR_LESTE":
		return Theme_THEME_TIMOR_LESTE, true
	case "TOBACCO":
		return Theme_THEME_TOBACCO, true
	case "TODAY":
		return Theme_THEME_TODAY, true
	case "TOGETHERNESS":
		return Theme_THEME_TOGETHERNESS, true
	case "TOGO":
		return Theme_THEME_TOGO, true
	case "TOKYO":
		return Theme_THEME_TOKYO, true
	case "TOMORROW":
		return Theme_THEME_TOMORROW, true
	case "TONGA":
		return Theme_THEME_TONGA, true
	case "TONGUE":
		return Theme_THEME_TONGUE, true
	case "TONIGHT":
		return Theme_THEME_TONIGHT, true
	case "TOOLS":
		return Theme_THEME_TOOLS, true
	case "TORN":
		return Theme_THEME_TORN, true
	case "TOY":
		return Theme_THEME_TOY, true
	case "TRADITION":
		return Theme_THEME_TRADITION, true
	case "TRAGEDY":
		return Theme_THEME_TRAGEDY, true
	case "TRAIL":
		return Theme_THEME_TRAIL, true
	case "TRAINS":
		return Theme_THEME_TRAINS, true
	case "TRANSPORTATION":
		return Theme_THEME_TRANSPORTATION, true
	case "TRAPPED":
		return Theme_THEME_TRAPPED, true
	case "TRAVEL":
		return Theme_THEME_TRAVEL, true
	case "TREE":
		return Theme_THEME_TREE, true
	case "TRINIDADANDTOBAGO":
		return Theme_THEME_TRINIDADANDTOBAGO, true
	case "TROUBLE":
		return Theme_THEME_TROUBLE, true
	case "TRUCKS":
		return Theme_THEME_TRUCKS, true
	case "TRUMPET":
		return Theme_THEME_TRUMPET, true
	case "TRUST":
		return Theme_THEME_TRUST, true
	case "TRUTH":
		return Theme_THEME_TRUTH, true
	case "TRY":
		return Theme_THEME_TRY, true
	case "TUESDAY":
		return Theme_THEME_TUESDAY, true
	case "TULSA":
		return Theme_THEME_TULSA, true
	case "TUNISIA":
		return Theme_THEME_TUNISIA, true
	case "TURKEY":
		return Theme_THEME_TURKEY, true
	case "TURKMENISTAN":
		return Theme_THEME_TURKMENISTAN, true
	case "TURN":
		return Theme_THEME_TURN, true
	case "TUVALU":
		return Theme_THEME_TUVALU, true
	case "UFO":
		return Theme_THEME_UFO, true
	case "UGANDA":
		return Theme_THEME_UGANDA, true
	case "UGLY":
		return Theme_THEME_UGLY, true
	case "UKRAINE":
		return Theme_THEME_UKRAINE, true
	case "UNBELIEVABLE":
		return Theme_THEME_UNBELIEVABLE, true
	case "UNCLE":
		return Theme_THEME_UNCLE, true
	case "UNDERSTANDING":
		return Theme_THEME_UNDERSTANDING, true
	case "UNFAIR":
		return Theme_THEME_UNFAIR, true
	case "UNFAITHFUL":
		return Theme_THEME_UNFAITHFUL, true
	case "UNION":
		return Theme_THEME_UNION, true
	case "UNIQUE":
		return Theme_THEME_UNIQUE, true
	case "UNITEDARABEMIRATES":
		return Theme_THEME_UNITEDARABEMIRATES, true
	case "UNITEDKINGDOM":
		return Theme_THEME_UNITEDKINGDOM, true
	case "UNITEDSTATES":
		return Theme_THEME_UNITEDSTATES, true
	case "UNITY":
		return Theme_THEME_UNITY, true
	case "UNIVERSE":
		return Theme_THEME_UNIVERSE, true
	case "UNREQUITED":
		return Theme_THEME_UNREQUITED, true
	case "UP":
		return Theme_THEME_UP, true
	case "URUGUAY":
		return Theme_THEME_URUGUAY, true
	case "US":
		return Theme_THEME_US, true
	case "USAGAINSTTHEWORLD":
		return Theme_THEME_USAGAINSTTHEWORLD, true
	case "USERDEFINED":
		return Theme_THEME_USERDEFINED, true
	case "UTAH":
		return Theme_THEME_UTAH, true
	case "UTOPIA":
		return Theme_THEME_UTOPIA, true
	case "UZBEKISTAN":
		return Theme_THEME_UZBEKISTAN, true
	case "VACATION":
		return Theme_THEME_VACATION, true
	case "VALENTINE":
		return Theme_THEME_VALENTINE, true
	case "VALLEY":
		return Theme_THEME_VALLEY, true
	case "VANUATU":
		return Theme_THEME_VANUATU, true
	case "VATICAN":
		return Theme_THEME_VATICAN, true
	case "VEGETABLE":
		return Theme_THEME_VEGETABLE, true
	case "VENEZUELA":
		return Theme_THEME_VENEZUELA, true
	case "VERMONT":
		return Theme_THEME_VERMONT, true
	case "VICTORY":
		return Theme_THEME_VICTORY, true
	case "VIDEOGAME":
		return Theme_THEME_VIDEOGAME, true
	case "VIENNA":
		return Theme_THEME_VIENNA, true
	case "VIETNAM":
		return Theme_THEME_VIETNAM, true
	case "VILLAIN":
		return Theme_THEME_VILLAIN, true
	case "VIOLENCE":
		return Theme_THEME_VIOLENCE, true
	case "VIRGINIA":
		return Theme_THEME_VIRGINIA, true
	case "VOICE":
		return Theme_THEME_VOICE, true
	case "VOLCANO":
		return Theme_THEME_VOLCANO, true
	case "VOODOO":
		return Theme_THEME_VOODOO, true
	case "WAIT":
		return Theme_THEME_WAIT, true
	case "WAITER":
		return Theme_THEME_WAITER, true
	case "WAKING":
		return Theme_THEME_WAKING, true
	case "WALES":
		return Theme_THEME_WALES, true
	case "WALK":
		return Theme_THEME_WALK, true
	case "WALL":
		return Theme_THEME_WALL, true
	case "WAR":
		return Theme_THEME_WAR, true
	case "WASHINGTON":
		return Theme_THEME_WASHINGTON, true
	case "WASTEFUL":
		return Theme_THEME_WASTEFUL, true
	case "WATER":
		return Theme_THEME_WATER, true
	case "WATERFALL":
		return Theme_THEME_WATERFALL, true
	case "WEAPON":
		return Theme_THEME_WEAPON, true
	case "WEDDING":
		return Theme_THEME_WEDDING, true
	case "WEDNESDAY":
		return Theme_THEME_WEDNESDAY, true
	case "WEEK":
		return Theme_THEME_WEEK, true
	case "WEEKEND":
		return Theme_THEME_WEEKEND, true
	case "WELCOME":
		return Theme_THEME_WELCOME, true
	case "WESHOULDBETOGETHER":
		return Theme_THEME_WESHOULDBETOGETHER, true
	case "WEST":
		return Theme_THEME_WEST, true
	case "WESTERNSAHARA":
		return Theme_THEME_WESTERNSAHARA, true
	case "WESTINDIES":
		return Theme_THEME_WESTINDIES, true
	case "WESTVIRGINIA":
		return Theme_THEME_WESTVIRGINIA, true
	case "WHALE":
		return Theme_THEME_WHALE, true
	case "WHISPER":
		return Theme_THEME_WHISPER, true
	case "WHISTLE":
		return Theme_THEME_WHISTLE, true
	case "WHITE":
		return Theme_THEME_WHITE, true
	case "WIFE":
		return Theme_THEME_WIFE, true
	case "WILD":
		return Theme_THEME_WILD, true
	case "WIND":
		return Theme_THEME_WIND, true
	case "WINDCHIMES":
		return Theme_THEME_WINDCHIMES, true
	case "WINDOW":
		return Theme_THEME_WINDOW, true
	case "WINNING":
		return Theme_THEME_WINNING, true
	case "WINTER":
		return Theme_THEME_WINTER, true
	case "WISCONSIN":
		return Theme_THEME_WISCONSIN, true
	case "WISDOM":
		return Theme_THEME_WISDOM, true
	case "WISH":
		return Theme_THEME_WISH, true
	case "WITCH":
		return Theme_THEME_WITCH, true
	case "WIZARDRY":
		return Theme_THEME_WIZARDRY, true
	case "WOLF":
		return Theme_THEME_WOLF, true
	case "WOMEN":
		return Theme_THEME_WOMEN, true
	case "WOMENSNAMES":
		return Theme_THEME_WOMENSNAMES, true
	case "WOMENTALKINGTOMEN":
		return Theme_THEME_WOMENTALKINGTOMEN, true
	case "WOMENTALKINGTOWOMEN":
		return Theme_THEME_WOMENTALKINGTOWOMEN, true
	case "WONDERFUL":
		return Theme_THEME_WONDERFUL, true
	case "WOODWIND":
		return Theme_THEME_WOODWIND, true
	case "WORDS":
		return Theme_THEME_WORDS, true
	case "WORK":
		return Theme_THEME_WORK, true
	case "WORKINGCLASS":
		return Theme_THEME_WORKINGCLASS, true
	case "WORKOUT":
		return Theme_THEME_WORKOUT, true
	case "WORLD":
		return Theme_THEME_WORLD, true
	case "WORRY":
		return Theme_THEME_WORRY, true
	case "WORSHIP":
		return Theme_THEME_WORSHIP, true
	case "WRITE":
		return Theme_THEME_WRITE, true
	case "WRONG":
		return Theme_THEME_WRONG, true
	case "WYOMING":
		return Theme_THEME_WYOMING, true
	case "YELLOW":
		return Theme_THEME_YELLOW, true
	case "YEMEN":
		return Theme_THEME_YEMEN, true
	case "YESTERDAY":
		return Theme_THEME_YESTERDAY, true
	case "YOGA":
		return Theme_THEME_YOGA, true
	case "YOU":
		return Theme_THEME_YOU, true
	case "YOUNG":
		return Theme_THEME_YOUNG, true
	case "YOUTH":
		return Theme_THEME_YOUTH, true
	case "YUGOSLAVIA":
		return Theme_THEME_YUGOSLAVIA, true
	case "ZAMBIA":
		return Theme_THEME_ZAMBIA, true
	case "ZIMBABWE":
		return Theme_THEME_ZIMBABWE, true
	case "ZODIAC":
		return Theme_THEME_ZODIAC, true
	case "ZOO":
		return Theme_THEME_ZOO, true
	default:
		return Theme(0), false
	}
}

// XMLString returns the XML string representation of ThemeType
func (e ThemeType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseThemeTypeString parses a string value to ThemeType enum (case-insensitive)
func ParseThemeTypeString(s string) (ThemeType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return ThemeType(0), false
	}
}

// XMLString returns the XML string representation of TimecodeType
func (e TimecodeType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTimecodeTypeString parses a string value to TimecodeType enum (case-insensitive)
func ParseTimecodeTypeString(s string) (TimecodeType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TimecodeType(0), false
	}
}

// XMLString returns the XML string representation of TisTerritoryCode
func (e TisTerritoryCode) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTisTerritoryCodeString parses a string value to TisTerritoryCode enum (case-insensitive)
func ParseTisTerritoryCodeString(s string) (TisTerritoryCode, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TisTerritoryCode(0), false
	}
}

// XMLString returns the XML string representation of TitleType
func (e TitleType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTitleTypeString parses a string value to TitleType enum (case-insensitive)
func ParseTitleTypeString(s string) (TitleType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TitleType(0), false
	}
}

// XMLString returns the XML string representation of TransferCategory
func (e TransferCategory) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTransferCategoryString parses a string value to TransferCategory enum (case-insensitive)
func ParseTransferCategoryString(s string) (TransferCategory, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TransferCategory(0), false
	}
}

// XMLString returns the XML string representation of TransferType
func (e TransferType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseTransferTypeString parses a string value to TransferType enum (case-insensitive)
func ParseTransferTypeString(s string) (TransferType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return TransferType(0), false
	}
}

// XMLString returns the XML string representation of UnitOfBitRate
func (e UnitOfBitRate) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfBitRateString parses a string value to UnitOfBitRate enum (case-insensitive)
func ParseUnitOfBitRateString(s string) (UnitOfBitRate, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfBitRate(0), false
	}
}

// XMLString returns the XML string representation of UnitOfConditionValue
func (e UnitOfConditionValue) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfConditionValueString parses a string value to UnitOfConditionValue enum (case-insensitive)
func ParseUnitOfConditionValueString(s string) (UnitOfConditionValue, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfConditionValue(0), false
	}
}

// XMLString returns the XML string representation of UnitOfCuePoints
func (e UnitOfCuePoints) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfCuePointsString parses a string value to UnitOfCuePoints enum (case-insensitive)
func ParseUnitOfCuePointsString(s string) (UnitOfCuePoints, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfCuePoints(0), false
	}
}

// XMLString returns the XML string representation of UnitOfDuration
func (e UnitOfDuration) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfDurationString parses a string value to UnitOfDuration enum (case-insensitive)
func ParseUnitOfDurationString(s string) (UnitOfDuration, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfDuration(0), false
	}
}

// XMLString returns the XML string representation of UnitOfExtent
func (e UnitOfExtent) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfExtentString parses a string value to UnitOfExtent enum (case-insensitive)
func ParseUnitOfExtentString(s string) (UnitOfExtent, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfExtent(0), false
	}
}

// XMLString returns the XML string representation of UnitOfFrameRate
func (e UnitOfFrameRate) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfFrameRateString parses a string value to UnitOfFrameRate enum (case-insensitive)
func ParseUnitOfFrameRateString(s string) (UnitOfFrameRate, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfFrameRate(0), false
	}
}

// XMLString returns the XML string representation of UnitOfFrequency
func (e UnitOfFrequency) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitOfFrequencyString parses a string value to UnitOfFrequency enum (case-insensitive)
func ParseUnitOfFrequencyString(s string) (UnitOfFrequency, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitOfFrequency(0), false
	}
}

// XMLString returns the XML string representation of UnitTypeForRevenueAllocation
func (e UnitTypeForRevenueAllocation) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUnitTypeForRevenueAllocationString parses a string value to UnitTypeForRevenueAllocation enum (case-insensitive)
func ParseUnitTypeForRevenueAllocationString(s string) (UnitTypeForRevenueAllocation, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UnitTypeForRevenueAllocation(0), false
	}
}

// XMLString returns the XML string representation of UseType
func (e UseType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUseTypeString parses a string value to UseType enum (case-insensitive)
func ParseUseTypeString(s string) (UseType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UseType(0), false
	}
}

// XMLString returns the XML string representation of UseTypeAR
func (e UseTypeAR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUseTypeARString parses a string value to UseTypeAR enum (case-insensitive)
func ParseUseTypeARString(s string) (UseTypeAR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UseTypeAR(0), false
	}
}

// XMLString returns the XML string representation of UseTypeBWARM
func (e UseTypeBWARM) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUseTypeBWARMString parses a string value to UseTypeBWARM enum (case-insensitive)
func ParseUseTypeBWARMString(s string) (UseTypeBWARM, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UseTypeBWARM(0), false
	}
}

// XMLString returns the XML string representation of UseTypeDSR
func (e UseTypeDSR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUseTypeDSRString parses a string value to UseTypeDSR enum (case-insensitive)
func ParseUseTypeDSRString(s string) (UseTypeDSR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UseTypeDSR(0), false
	}
}

// XMLString returns the XML string representation of UseTypeERN
func (e UseTypeERN) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUseTypeERNString parses a string value to UseTypeERN enum (case-insensitive)
func ParseUseTypeERNString(s string) (UseTypeERN, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UseTypeERN(0), false
	}
}

// XMLString returns the XML string representation of UseTypeMWNL
func (e UseTypeMWNL) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUseTypeMWNLString parses a string value to UseTypeMWNL enum (case-insensitive)
func ParseUseTypeMWNLString(s string) (UseTypeMWNL, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UseTypeMWNL(0), false
	}
}

// XMLString returns the XML string representation of UseTypeRDR
func (e UseTypeRDR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUseTypeRDRString parses a string value to UseTypeRDR enum (case-insensitive)
func ParseUseTypeRDRString(s string) (UseTypeRDR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UseTypeRDR(0), false
	}
}

// XMLString returns the XML string representation of UserInterfaceType
func (e UserInterfaceType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUserInterfaceTypeString parses a string value to UserInterfaceType enum (case-insensitive)
func ParseUserInterfaceTypeString(s string) (UserInterfaceType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UserInterfaceType(0), false
	}
}

// XMLString returns the XML string representation of UserInterfaceTypeERN
func (e UserInterfaceTypeERN) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseUserInterfaceTypeERNString parses a string value to UserInterfaceTypeERN enum (case-insensitive)
func ParseUserInterfaceTypeERNString(s string) (UserInterfaceTypeERN, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return UserInterfaceTypeERN(0), false
	}
}

// XMLString returns the XML string representation of VersionType
func (e VersionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVersionTypeString parses a string value to VersionType enum (case-insensitive)
func ParseVersionTypeString(s string) (VersionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VersionType(0), false
	}
}

// XMLString returns the XML string representation of VersionTypeMWDR
func (e VersionTypeMWDR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVersionTypeMWDRString parses a string value to VersionTypeMWDR enum (case-insensitive)
func ParseVersionTypeMWDRString(s string) (VersionTypeMWDR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VersionTypeMWDR(0), false
	}
}

// XMLString returns the XML string representation of VideoCodecType
func (e VideoCodecType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVideoCodecTypeString parses a string value to VideoCodecType enum (case-insensitive)
func ParseVideoCodecTypeString(s string) (VideoCodecType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VideoCodecType(0), false
	}
}

// XMLString returns the XML string representation of VideoDefinitionType
func (e VideoDefinitionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVideoDefinitionTypeString parses a string value to VideoDefinitionType enum (case-insensitive)
func ParseVideoDefinitionTypeString(s string) (VideoDefinitionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VideoDefinitionType(0), false
	}
}

// XMLString returns the XML string representation of VideoDefinitionTypeDSR
func (e VideoDefinitionTypeDSR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVideoDefinitionTypeDSRString parses a string value to VideoDefinitionTypeDSR enum (case-insensitive)
func ParseVideoDefinitionTypeDSRString(s string) (VideoDefinitionTypeDSR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VideoDefinitionTypeDSR(0), false
	}
}

// XMLString returns the XML string representation of VideoType
func (e VideoType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVideoTypeString parses a string value to VideoType enum (case-insensitive)
func ParseVideoTypeString(s string) (VideoType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VideoType(0), false
	}
}

// XMLString returns the XML string representation of VideoTypeDSR
func (e VideoTypeDSR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVideoTypeDSRString parses a string value to VideoTypeDSR enum (case-insensitive)
func ParseVideoTypeDSRString(s string) (VideoTypeDSR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VideoTypeDSR(0), false
	}
}

// XMLString returns the XML string representation of VideoTypeERN43
func (e VideoTypeERN43) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVideoTypeERN43String parses a string value to VideoTypeERN43 enum (case-insensitive)
func ParseVideoTypeERN43String(s string) (VideoTypeERN43, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VideoTypeERN43(0), false
	}
}

// XMLString returns the XML string representation of VisualPerceptionType
func (e VisualPerceptionType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVisualPerceptionTypeString parses a string value to VisualPerceptionType enum (case-insensitive)
func ParseVisualPerceptionTypeString(s string) (VisualPerceptionType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VisualPerceptionType(0), false
	}
}

// XMLString returns the XML string representation of VocalRegister
func (e VocalRegister) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVocalRegisterString parses a string value to VocalRegister enum (case-insensitive)
func ParseVocalRegisterString(s string) (VocalRegister, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VocalRegister(0), false
	}
}

// XMLString returns the XML string representation of VocalType
func (e VocalType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseVocalTypeString parses a string value to VocalType enum (case-insensitive)
func ParseVocalTypeString(s string) (VocalType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return VocalType(0), false
	}
}

// XMLString returns the XML string representation of WorkPart
func (e WorkPart) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseWorkPartString parses a string value to WorkPart enum (case-insensitive)
func ParseWorkPartString(s string) (WorkPart, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return WorkPart(0), false
	}
}

// XMLString returns the XML string representation of WorkRelationshipType
func (e WorkRelationshipType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseWorkRelationshipTypeString parses a string value to WorkRelationshipType enum (case-insensitive)
func ParseWorkRelationshipTypeString(s string) (WorkRelationshipType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return WorkRelationshipType(0), false
	}
}

// XMLString returns the XML string representation of WorkRelationshipTypeMWDR
func (e WorkRelationshipTypeMWDR) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseWorkRelationshipTypeMWDRString parses a string value to WorkRelationshipTypeMWDR enum (case-insensitive)
func ParseWorkRelationshipTypeMWDRString(s string) (WorkRelationshipTypeMWDR, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return WorkRelationshipTypeMWDR(0), false
	}
}

// XMLString returns the XML string representation of WorkType
func (e WorkType) XMLString() string {
	switch e {
	default:
		return ""
	}
}

// ParseWorkTypeString parses a string value to WorkType enum (case-insensitive)
func ParseWorkTypeString(s string) (WorkType, bool) {
	s = strings.ToUpper(s)
	switch s {
	default:
		return WorkType(0), false
	}
}

