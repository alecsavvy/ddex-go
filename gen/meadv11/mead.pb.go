// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: meadv11/mead.proto

package meadv11

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AdditionalContributorRole int32

const (
	AdditionalContributorRole_ADDITIONAL_CONTRIBUTOR_ROLE_UNSPECIFIED AdditionalContributorRole = 0
	AdditionalContributorRole_ADDITIONAL_CONTRIBUTOR_ROLE_MIME        AdditionalContributorRole = 1
)

// Enum value maps for AdditionalContributorRole.
var (
	AdditionalContributorRole_name = map[int32]string{
		0: "ADDITIONAL_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1: "ADDITIONAL_CONTRIBUTOR_ROLE_MIME",
	}
	AdditionalContributorRole_value = map[string]int32{
		"ADDITIONAL_CONTRIBUTOR_ROLE_UNSPECIFIED": 0,
		"ADDITIONAL_CONTRIBUTOR_ROLE_MIME":        1,
	}
)

func (x AdditionalContributorRole) Enum() *AdditionalContributorRole {
	p := new(AdditionalContributorRole)
	*p = x
	return p
}

func (x AdditionalContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdditionalContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[0].Descriptor()
}

func (AdditionalContributorRole) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[0]
}

func (x AdditionalContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdditionalContributorRole.Descriptor instead.
func (AdditionalContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{0}
}

type AdditionalRightsClaimStatus int32

const (
	AdditionalRightsClaimStatus_ADDITIONAL_RIGHTS_CLAIM_STATUS_UNSPECIFIED AdditionalRightsClaimStatus = 0
	AdditionalRightsClaimStatus_ADDITIONAL_RIGHTS_CLAIM_STATUS_ACCEPTED    AdditionalRightsClaimStatus = 1
)

// Enum value maps for AdditionalRightsClaimStatus.
var (
	AdditionalRightsClaimStatus_name = map[int32]string{
		0: "ADDITIONAL_RIGHTS_CLAIM_STATUS_UNSPECIFIED",
		1: "ADDITIONAL_RIGHTS_CLAIM_STATUS_ACCEPTED",
	}
	AdditionalRightsClaimStatus_value = map[string]int32{
		"ADDITIONAL_RIGHTS_CLAIM_STATUS_UNSPECIFIED": 0,
		"ADDITIONAL_RIGHTS_CLAIM_STATUS_ACCEPTED":    1,
	}
)

func (x AdditionalRightsClaimStatus) Enum() *AdditionalRightsClaimStatus {
	p := new(AdditionalRightsClaimStatus)
	*p = x
	return p
}

func (x AdditionalRightsClaimStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdditionalRightsClaimStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[1].Descriptor()
}

func (AdditionalRightsClaimStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[1]
}

func (x AdditionalRightsClaimStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdditionalRightsClaimStatus.Descriptor instead.
func (AdditionalRightsClaimStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{1}
}

type AdditionalTitleType int32

const (
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_UNSPECIFIED         AdditionalTitleType = 0
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_ALTERNATIVETITLE    AdditionalTitleType = 1
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_FORMALTITLE         AdditionalTitleType = 2
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_GROUPINGTITLE       AdditionalTitleType = 3
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_MUSICALWORKTITLE    AdditionalTitleType = 4
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_ORIGINALTITLE       AdditionalTitleType = 5
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_TRANSLATEDTITLE     AdditionalTitleType = 6
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_TRANSLITERATEDTITLE AdditionalTitleType = 7
	AdditionalTitleType_ADDITIONAL_TITLE_TYPE_USERDEFINED         AdditionalTitleType = 8
)

// Enum value maps for AdditionalTitleType.
var (
	AdditionalTitleType_name = map[int32]string{
		0: "ADDITIONAL_TITLE_TYPE_UNSPECIFIED",
		1: "ADDITIONAL_TITLE_TYPE_ALTERNATIVETITLE",
		2: "ADDITIONAL_TITLE_TYPE_FORMALTITLE",
		3: "ADDITIONAL_TITLE_TYPE_GROUPINGTITLE",
		4: "ADDITIONAL_TITLE_TYPE_MUSICALWORKTITLE",
		5: "ADDITIONAL_TITLE_TYPE_ORIGINALTITLE",
		6: "ADDITIONAL_TITLE_TYPE_TRANSLATEDTITLE",
		7: "ADDITIONAL_TITLE_TYPE_TRANSLITERATEDTITLE",
		8: "ADDITIONAL_TITLE_TYPE_USERDEFINED",
	}
	AdditionalTitleType_value = map[string]int32{
		"ADDITIONAL_TITLE_TYPE_UNSPECIFIED":         0,
		"ADDITIONAL_TITLE_TYPE_ALTERNATIVETITLE":    1,
		"ADDITIONAL_TITLE_TYPE_FORMALTITLE":         2,
		"ADDITIONAL_TITLE_TYPE_GROUPINGTITLE":       3,
		"ADDITIONAL_TITLE_TYPE_MUSICALWORKTITLE":    4,
		"ADDITIONAL_TITLE_TYPE_ORIGINALTITLE":       5,
		"ADDITIONAL_TITLE_TYPE_TRANSLATEDTITLE":     6,
		"ADDITIONAL_TITLE_TYPE_TRANSLITERATEDTITLE": 7,
		"ADDITIONAL_TITLE_TYPE_USERDEFINED":         8,
	}
)

func (x AdditionalTitleType) Enum() *AdditionalTitleType {
	p := new(AdditionalTitleType)
	*p = x
	return p
}

func (x AdditionalTitleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdditionalTitleType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[2].Descriptor()
}

func (AdditionalTitleType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[2]
}

func (x AdditionalTitleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdditionalTitleType.Descriptor instead.
func (AdditionalTitleType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{2}
}

type AdditionalVideoType int32

const (
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_UNSPECIFIED                  AdditionalVideoType = 0
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_DRAMA                        AdditionalVideoType = 1
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_DRAMATICOMUSICALVIDEO        AdditionalVideoType = 2
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_INTERACTIVERESOURCE          AdditionalVideoType = 3
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO    AdditionalVideoType = 4
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO AdditionalVideoType = 5
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_USERDEFINED                  AdditionalVideoType = 6
	AdditionalVideoType_ADDITIONAL_VIDEO_TYPE_WEBRESOURCE                  AdditionalVideoType = 7
)

// Enum value maps for AdditionalVideoType.
var (
	AdditionalVideoType_name = map[int32]string{
		0: "ADDITIONAL_VIDEO_TYPE_UNSPECIFIED",
		1: "ADDITIONAL_VIDEO_TYPE_DRAMA",
		2: "ADDITIONAL_VIDEO_TYPE_DRAMATICOMUSICALVIDEO",
		3: "ADDITIONAL_VIDEO_TYPE_INTERACTIVERESOURCE",
		4: "ADDITIONAL_VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO",
		5: "ADDITIONAL_VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO",
		6: "ADDITIONAL_VIDEO_TYPE_USERDEFINED",
		7: "ADDITIONAL_VIDEO_TYPE_WEBRESOURCE",
	}
	AdditionalVideoType_value = map[string]int32{
		"ADDITIONAL_VIDEO_TYPE_UNSPECIFIED":                  0,
		"ADDITIONAL_VIDEO_TYPE_DRAMA":                        1,
		"ADDITIONAL_VIDEO_TYPE_DRAMATICOMUSICALVIDEO":        2,
		"ADDITIONAL_VIDEO_TYPE_INTERACTIVERESOURCE":          3,
		"ADDITIONAL_VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO":    4,
		"ADDITIONAL_VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO": 5,
		"ADDITIONAL_VIDEO_TYPE_USERDEFINED":                  6,
		"ADDITIONAL_VIDEO_TYPE_WEBRESOURCE":                  7,
	}
)

func (x AdditionalVideoType) Enum() *AdditionalVideoType {
	p := new(AdditionalVideoType)
	*p = x
	return p
}

func (x AdditionalVideoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdditionalVideoType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[3].Descriptor()
}

func (AdditionalVideoType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[3]
}

func (x AdditionalVideoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdditionalVideoType.Descriptor instead.
func (AdditionalVideoType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{3}
}

type AdministratingRecordCompanyRole int32

const (
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED                   AdministratingRecordCompanyRole = 0
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT AdministratingRecordCompanyRole = 1
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR           AdministratingRecordCompanyRole = 2
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR          AdministratingRecordCompanyRole = 3
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN                       AdministratingRecordCompanyRole = 4
	AdministratingRecordCompanyRole_ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED                   AdministratingRecordCompanyRole = 5
)

// Enum value maps for AdministratingRecordCompanyRole.
var (
	AdministratingRecordCompanyRole_name = map[int32]string{
		0: "ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED",
		1: "ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT",
		2: "ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR",
		3: "ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR",
		4: "ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN",
		5: "ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED",
	}
	AdministratingRecordCompanyRole_value = map[string]int32{
		"ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED":                   0,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT": 1,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR":           2,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR":          3,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN":                       4,
		"ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED":                   5,
	}
)

func (x AdministratingRecordCompanyRole) Enum() *AdministratingRecordCompanyRole {
	p := new(AdministratingRecordCompanyRole)
	*p = x
	return p
}

func (x AdministratingRecordCompanyRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdministratingRecordCompanyRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[4].Descriptor()
}

func (AdministratingRecordCompanyRole) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[4]
}

func (x AdministratingRecordCompanyRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdministratingRecordCompanyRole.Descriptor instead.
func (AdministratingRecordCompanyRole) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{4}
}

type AffiliationType int32

const (
	AffiliationType_AFFILIATION_TYPE_UNSPECIFIED           AffiliationType = 0
	AffiliationType_AFFILIATION_TYPE_MUSICLICENSINGCOMPANY AffiliationType = 1
	AffiliationType_AFFILIATION_TYPE_MUSICPUBLISHER        AffiliationType = 2
	AffiliationType_AFFILIATION_TYPE_MUSICRIGHTSSOCIETY    AffiliationType = 3
	AffiliationType_AFFILIATION_TYPE_RECORDCOMPANY         AffiliationType = 4
	AffiliationType_AFFILIATION_TYPE_USERDEFINED           AffiliationType = 5
)

// Enum value maps for AffiliationType.
var (
	AffiliationType_name = map[int32]string{
		0: "AFFILIATION_TYPE_UNSPECIFIED",
		1: "AFFILIATION_TYPE_MUSICLICENSINGCOMPANY",
		2: "AFFILIATION_TYPE_MUSICPUBLISHER",
		3: "AFFILIATION_TYPE_MUSICRIGHTSSOCIETY",
		4: "AFFILIATION_TYPE_RECORDCOMPANY",
		5: "AFFILIATION_TYPE_USERDEFINED",
	}
	AffiliationType_value = map[string]int32{
		"AFFILIATION_TYPE_UNSPECIFIED":           0,
		"AFFILIATION_TYPE_MUSICLICENSINGCOMPANY": 1,
		"AFFILIATION_TYPE_MUSICPUBLISHER":        2,
		"AFFILIATION_TYPE_MUSICRIGHTSSOCIETY":    3,
		"AFFILIATION_TYPE_RECORDCOMPANY":         4,
		"AFFILIATION_TYPE_USERDEFINED":           5,
	}
)

func (x AffiliationType) Enum() *AffiliationType {
	p := new(AffiliationType)
	*p = x
	return p
}

func (x AffiliationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AffiliationType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[5].Descriptor()
}

func (AffiliationType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[5]
}

func (x AffiliationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AffiliationType.Descriptor instead.
func (AffiliationType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{5}
}

type AllIsoTerritoryCode int32

const (
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_UNSPECIFIED AllIsoTerritoryCode = 0
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AD          AllIsoTerritoryCode = 1
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AE          AllIsoTerritoryCode = 2
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AF          AllIsoTerritoryCode = 3
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AG          AllIsoTerritoryCode = 4
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AI          AllIsoTerritoryCode = 5
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AL          AllIsoTerritoryCode = 6
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AM          AllIsoTerritoryCode = 7
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AN          AllIsoTerritoryCode = 8
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AO          AllIsoTerritoryCode = 9
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AQ          AllIsoTerritoryCode = 10
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AR          AllIsoTerritoryCode = 11
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AS          AllIsoTerritoryCode = 12
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AT          AllIsoTerritoryCode = 13
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AU          AllIsoTerritoryCode = 14
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AW          AllIsoTerritoryCode = 15
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AX          AllIsoTerritoryCode = 16
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AZ          AllIsoTerritoryCode = 17
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BA          AllIsoTerritoryCode = 18
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BB          AllIsoTerritoryCode = 19
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BD          AllIsoTerritoryCode = 20
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BE          AllIsoTerritoryCode = 21
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BF          AllIsoTerritoryCode = 22
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BG          AllIsoTerritoryCode = 23
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BH          AllIsoTerritoryCode = 24
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BI          AllIsoTerritoryCode = 25
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BJ          AllIsoTerritoryCode = 26
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BL          AllIsoTerritoryCode = 27
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BM          AllIsoTerritoryCode = 28
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BN          AllIsoTerritoryCode = 29
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BO          AllIsoTerritoryCode = 30
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BQ          AllIsoTerritoryCode = 31
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BR          AllIsoTerritoryCode = 32
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BS          AllIsoTerritoryCode = 33
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BT          AllIsoTerritoryCode = 34
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BV          AllIsoTerritoryCode = 35
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BW          AllIsoTerritoryCode = 36
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BY          AllIsoTerritoryCode = 37
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BZ          AllIsoTerritoryCode = 38
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CA          AllIsoTerritoryCode = 39
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CC          AllIsoTerritoryCode = 40
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CD          AllIsoTerritoryCode = 41
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CF          AllIsoTerritoryCode = 42
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CG          AllIsoTerritoryCode = 43
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CH          AllIsoTerritoryCode = 44
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CI          AllIsoTerritoryCode = 45
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CK          AllIsoTerritoryCode = 46
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CL          AllIsoTerritoryCode = 47
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CM          AllIsoTerritoryCode = 48
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CN          AllIsoTerritoryCode = 49
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CO          AllIsoTerritoryCode = 50
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CR          AllIsoTerritoryCode = 51
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CS          AllIsoTerritoryCode = 52
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CU          AllIsoTerritoryCode = 53
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CV          AllIsoTerritoryCode = 54
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CW          AllIsoTerritoryCode = 55
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CX          AllIsoTerritoryCode = 56
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CY          AllIsoTerritoryCode = 57
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CZ          AllIsoTerritoryCode = 58
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_DE          AllIsoTerritoryCode = 59
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_DJ          AllIsoTerritoryCode = 60
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_DK          AllIsoTerritoryCode = 61
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_DM          AllIsoTerritoryCode = 62
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_DO          AllIsoTerritoryCode = 63
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_DZ          AllIsoTerritoryCode = 64
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_EC          AllIsoTerritoryCode = 65
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_EE          AllIsoTerritoryCode = 66
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_EG          AllIsoTerritoryCode = 67
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_EH          AllIsoTerritoryCode = 68
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ER          AllIsoTerritoryCode = 69
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ES          AllIsoTerritoryCode = 70
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ES_CE       AllIsoTerritoryCode = 71
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ES_CN       AllIsoTerritoryCode = 72
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ES_ML       AllIsoTerritoryCode = 73
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ET          AllIsoTerritoryCode = 74
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_FI          AllIsoTerritoryCode = 75
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_FJ          AllIsoTerritoryCode = 76
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_FK          AllIsoTerritoryCode = 77
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_FM          AllIsoTerritoryCode = 78
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_FO          AllIsoTerritoryCode = 79
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_FR          AllIsoTerritoryCode = 80
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GA          AllIsoTerritoryCode = 81
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GB          AllIsoTerritoryCode = 82
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GD          AllIsoTerritoryCode = 83
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GE          AllIsoTerritoryCode = 84
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GF          AllIsoTerritoryCode = 85
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GG          AllIsoTerritoryCode = 86
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GH          AllIsoTerritoryCode = 87
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GI          AllIsoTerritoryCode = 88
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GL          AllIsoTerritoryCode = 89
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GM          AllIsoTerritoryCode = 90
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GN          AllIsoTerritoryCode = 91
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GP          AllIsoTerritoryCode = 92
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GQ          AllIsoTerritoryCode = 93
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GR          AllIsoTerritoryCode = 94
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GS          AllIsoTerritoryCode = 95
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GT          AllIsoTerritoryCode = 96
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GU          AllIsoTerritoryCode = 97
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GW          AllIsoTerritoryCode = 98
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GY          AllIsoTerritoryCode = 99
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_HK          AllIsoTerritoryCode = 100
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_HM          AllIsoTerritoryCode = 101
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_HN          AllIsoTerritoryCode = 102
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_HR          AllIsoTerritoryCode = 103
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_HT          AllIsoTerritoryCode = 104
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_HU          AllIsoTerritoryCode = 105
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ID          AllIsoTerritoryCode = 106
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_IE          AllIsoTerritoryCode = 107
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_IL          AllIsoTerritoryCode = 108
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_IM          AllIsoTerritoryCode = 109
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_IN          AllIsoTerritoryCode = 110
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_IO          AllIsoTerritoryCode = 111
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_IQ          AllIsoTerritoryCode = 112
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_IR          AllIsoTerritoryCode = 113
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_IS          AllIsoTerritoryCode = 114
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_IT          AllIsoTerritoryCode = 115
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_JE          AllIsoTerritoryCode = 116
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_JM          AllIsoTerritoryCode = 117
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_JO          AllIsoTerritoryCode = 118
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_JP          AllIsoTerritoryCode = 119
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_KE          AllIsoTerritoryCode = 120
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_KG          AllIsoTerritoryCode = 121
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_KH          AllIsoTerritoryCode = 122
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_KI          AllIsoTerritoryCode = 123
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_KM          AllIsoTerritoryCode = 124
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_KN          AllIsoTerritoryCode = 125
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_KP          AllIsoTerritoryCode = 126
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_KR          AllIsoTerritoryCode = 127
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_KW          AllIsoTerritoryCode = 128
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_KY          AllIsoTerritoryCode = 129
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_KZ          AllIsoTerritoryCode = 130
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_LA          AllIsoTerritoryCode = 131
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_LB          AllIsoTerritoryCode = 132
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_LC          AllIsoTerritoryCode = 133
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_LI          AllIsoTerritoryCode = 134
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_LK          AllIsoTerritoryCode = 135
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_LR          AllIsoTerritoryCode = 136
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_LS          AllIsoTerritoryCode = 137
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_LT          AllIsoTerritoryCode = 138
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_LU          AllIsoTerritoryCode = 139
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_LV          AllIsoTerritoryCode = 140
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_LY          AllIsoTerritoryCode = 141
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MA          AllIsoTerritoryCode = 142
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MC          AllIsoTerritoryCode = 143
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MD          AllIsoTerritoryCode = 144
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ME          AllIsoTerritoryCode = 145
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MF          AllIsoTerritoryCode = 146
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MG          AllIsoTerritoryCode = 147
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MH          AllIsoTerritoryCode = 148
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MK          AllIsoTerritoryCode = 149
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ML          AllIsoTerritoryCode = 150
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MM          AllIsoTerritoryCode = 151
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MN          AllIsoTerritoryCode = 152
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MO          AllIsoTerritoryCode = 153
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MP          AllIsoTerritoryCode = 154
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MQ          AllIsoTerritoryCode = 155
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MR          AllIsoTerritoryCode = 156
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MS          AllIsoTerritoryCode = 157
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MT          AllIsoTerritoryCode = 158
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MU          AllIsoTerritoryCode = 159
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MV          AllIsoTerritoryCode = 160
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MW          AllIsoTerritoryCode = 161
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MX          AllIsoTerritoryCode = 162
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MY          AllIsoTerritoryCode = 163
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MZ          AllIsoTerritoryCode = 164
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NA          AllIsoTerritoryCode = 165
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NC          AllIsoTerritoryCode = 166
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NE          AllIsoTerritoryCode = 167
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NF          AllIsoTerritoryCode = 168
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NG          AllIsoTerritoryCode = 169
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NI          AllIsoTerritoryCode = 170
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NL          AllIsoTerritoryCode = 171
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NO          AllIsoTerritoryCode = 172
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NP          AllIsoTerritoryCode = 173
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NR          AllIsoTerritoryCode = 174
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NU          AllIsoTerritoryCode = 175
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NZ          AllIsoTerritoryCode = 176
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_OM          AllIsoTerritoryCode = 177
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PA          AllIsoTerritoryCode = 178
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PE          AllIsoTerritoryCode = 179
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PF          AllIsoTerritoryCode = 180
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PG          AllIsoTerritoryCode = 181
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PH          AllIsoTerritoryCode = 182
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PK          AllIsoTerritoryCode = 183
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PL          AllIsoTerritoryCode = 184
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PM          AllIsoTerritoryCode = 185
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PN          AllIsoTerritoryCode = 186
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PR          AllIsoTerritoryCode = 187
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PS          AllIsoTerritoryCode = 188
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PT          AllIsoTerritoryCode = 189
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PW          AllIsoTerritoryCode = 190
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PY          AllIsoTerritoryCode = 191
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_QA          AllIsoTerritoryCode = 192
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_RE          AllIsoTerritoryCode = 193
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_RO          AllIsoTerritoryCode = 194
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_RS          AllIsoTerritoryCode = 195
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_RU          AllIsoTerritoryCode = 196
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_RW          AllIsoTerritoryCode = 197
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SA          AllIsoTerritoryCode = 198
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SB          AllIsoTerritoryCode = 199
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SC          AllIsoTerritoryCode = 200
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SD          AllIsoTerritoryCode = 201
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SE          AllIsoTerritoryCode = 202
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SG          AllIsoTerritoryCode = 203
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SH          AllIsoTerritoryCode = 204
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SI          AllIsoTerritoryCode = 205
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SJ          AllIsoTerritoryCode = 206
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SK          AllIsoTerritoryCode = 207
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SL          AllIsoTerritoryCode = 208
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SM          AllIsoTerritoryCode = 209
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SN          AllIsoTerritoryCode = 210
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SO          AllIsoTerritoryCode = 211
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SR          AllIsoTerritoryCode = 212
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SS          AllIsoTerritoryCode = 213
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ST          AllIsoTerritoryCode = 214
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SV          AllIsoTerritoryCode = 215
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SX          AllIsoTerritoryCode = 216
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SY          AllIsoTerritoryCode = 217
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SZ          AllIsoTerritoryCode = 218
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TC          AllIsoTerritoryCode = 219
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TD          AllIsoTerritoryCode = 220
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TF          AllIsoTerritoryCode = 221
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TG          AllIsoTerritoryCode = 222
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TH          AllIsoTerritoryCode = 223
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TJ          AllIsoTerritoryCode = 224
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TK          AllIsoTerritoryCode = 225
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TL          AllIsoTerritoryCode = 226
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TM          AllIsoTerritoryCode = 227
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TN          AllIsoTerritoryCode = 228
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TO          AllIsoTerritoryCode = 229
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TR          AllIsoTerritoryCode = 230
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TT          AllIsoTerritoryCode = 231
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TV          AllIsoTerritoryCode = 232
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TW          AllIsoTerritoryCode = 233
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TZ          AllIsoTerritoryCode = 234
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_UA          AllIsoTerritoryCode = 235
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_UG          AllIsoTerritoryCode = 236
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_UM          AllIsoTerritoryCode = 237
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_US          AllIsoTerritoryCode = 238
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_UY          AllIsoTerritoryCode = 239
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_UZ          AllIsoTerritoryCode = 240
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_VA          AllIsoTerritoryCode = 241
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_VC          AllIsoTerritoryCode = 242
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_VE          AllIsoTerritoryCode = 243
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_VG          AllIsoTerritoryCode = 244
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_VI          AllIsoTerritoryCode = 245
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_VN          AllIsoTerritoryCode = 246
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_VU          AllIsoTerritoryCode = 247
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_WF          AllIsoTerritoryCode = 248
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_WS          AllIsoTerritoryCode = 249
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_YE          AllIsoTerritoryCode = 250
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_YT          AllIsoTerritoryCode = 251
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ZA          AllIsoTerritoryCode = 252
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ZM          AllIsoTerritoryCode = 253
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ZW          AllIsoTerritoryCode = 254
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_XK          AllIsoTerritoryCode = 255
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_WORLDWIDE   AllIsoTerritoryCode = 256
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_AIDJ        AllIsoTerritoryCode = 257
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ANHH        AllIsoTerritoryCode = 258
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BQAQ        AllIsoTerritoryCode = 259
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BUMM        AllIsoTerritoryCode = 260
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_BYAA        AllIsoTerritoryCode = 261
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CSHH        AllIsoTerritoryCode = 262
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CSXX        AllIsoTerritoryCode = 263
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_CTKI        AllIsoTerritoryCode = 264
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_DDDE        AllIsoTerritoryCode = 265
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_DYBJ        AllIsoTerritoryCode = 266
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_FQHH        AllIsoTerritoryCode = 267
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_FXFR        AllIsoTerritoryCode = 268
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_GEHH        AllIsoTerritoryCode = 269
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_HVBF        AllIsoTerritoryCode = 270
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_JTUM        AllIsoTerritoryCode = 271
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_MIUM        AllIsoTerritoryCode = 272
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NHVU        AllIsoTerritoryCode = 273
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NQAQ        AllIsoTerritoryCode = 274
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_NTHH        AllIsoTerritoryCode = 275
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PCHH        AllIsoTerritoryCode = 276
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PUUM        AllIsoTerritoryCode = 277
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_PZPA        AllIsoTerritoryCode = 278
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_RHZW        AllIsoTerritoryCode = 279
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SKIN        AllIsoTerritoryCode = 280
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_SUHH        AllIsoTerritoryCode = 281
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_TPTL        AllIsoTerritoryCode = 282
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_VDVN        AllIsoTerritoryCode = 283
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_WKUM        AllIsoTerritoryCode = 284
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_YDYE        AllIsoTerritoryCode = 285
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_YUCS        AllIsoTerritoryCode = 286
	AllIsoTerritoryCode_ALL_ISO_TERRITORY_CODE_ZRCD        AllIsoTerritoryCode = 287
)

// Enum value maps for AllIsoTerritoryCode.
var (
	AllIsoTerritoryCode_name = map[int32]string{
		0:   "ALL_ISO_TERRITORY_CODE_UNSPECIFIED",
		1:   "ALL_ISO_TERRITORY_CODE_AD",
		2:   "ALL_ISO_TERRITORY_CODE_AE",
		3:   "ALL_ISO_TERRITORY_CODE_AF",
		4:   "ALL_ISO_TERRITORY_CODE_AG",
		5:   "ALL_ISO_TERRITORY_CODE_AI",
		6:   "ALL_ISO_TERRITORY_CODE_AL",
		7:   "ALL_ISO_TERRITORY_CODE_AM",
		8:   "ALL_ISO_TERRITORY_CODE_AN",
		9:   "ALL_ISO_TERRITORY_CODE_AO",
		10:  "ALL_ISO_TERRITORY_CODE_AQ",
		11:  "ALL_ISO_TERRITORY_CODE_AR",
		12:  "ALL_ISO_TERRITORY_CODE_AS",
		13:  "ALL_ISO_TERRITORY_CODE_AT",
		14:  "ALL_ISO_TERRITORY_CODE_AU",
		15:  "ALL_ISO_TERRITORY_CODE_AW",
		16:  "ALL_ISO_TERRITORY_CODE_AX",
		17:  "ALL_ISO_TERRITORY_CODE_AZ",
		18:  "ALL_ISO_TERRITORY_CODE_BA",
		19:  "ALL_ISO_TERRITORY_CODE_BB",
		20:  "ALL_ISO_TERRITORY_CODE_BD",
		21:  "ALL_ISO_TERRITORY_CODE_BE",
		22:  "ALL_ISO_TERRITORY_CODE_BF",
		23:  "ALL_ISO_TERRITORY_CODE_BG",
		24:  "ALL_ISO_TERRITORY_CODE_BH",
		25:  "ALL_ISO_TERRITORY_CODE_BI",
		26:  "ALL_ISO_TERRITORY_CODE_BJ",
		27:  "ALL_ISO_TERRITORY_CODE_BL",
		28:  "ALL_ISO_TERRITORY_CODE_BM",
		29:  "ALL_ISO_TERRITORY_CODE_BN",
		30:  "ALL_ISO_TERRITORY_CODE_BO",
		31:  "ALL_ISO_TERRITORY_CODE_BQ",
		32:  "ALL_ISO_TERRITORY_CODE_BR",
		33:  "ALL_ISO_TERRITORY_CODE_BS",
		34:  "ALL_ISO_TERRITORY_CODE_BT",
		35:  "ALL_ISO_TERRITORY_CODE_BV",
		36:  "ALL_ISO_TERRITORY_CODE_BW",
		37:  "ALL_ISO_TERRITORY_CODE_BY",
		38:  "ALL_ISO_TERRITORY_CODE_BZ",
		39:  "ALL_ISO_TERRITORY_CODE_CA",
		40:  "ALL_ISO_TERRITORY_CODE_CC",
		41:  "ALL_ISO_TERRITORY_CODE_CD",
		42:  "ALL_ISO_TERRITORY_CODE_CF",
		43:  "ALL_ISO_TERRITORY_CODE_CG",
		44:  "ALL_ISO_TERRITORY_CODE_CH",
		45:  "ALL_ISO_TERRITORY_CODE_CI",
		46:  "ALL_ISO_TERRITORY_CODE_CK",
		47:  "ALL_ISO_TERRITORY_CODE_CL",
		48:  "ALL_ISO_TERRITORY_CODE_CM",
		49:  "ALL_ISO_TERRITORY_CODE_CN",
		50:  "ALL_ISO_TERRITORY_CODE_CO",
		51:  "ALL_ISO_TERRITORY_CODE_CR",
		52:  "ALL_ISO_TERRITORY_CODE_CS",
		53:  "ALL_ISO_TERRITORY_CODE_CU",
		54:  "ALL_ISO_TERRITORY_CODE_CV",
		55:  "ALL_ISO_TERRITORY_CODE_CW",
		56:  "ALL_ISO_TERRITORY_CODE_CX",
		57:  "ALL_ISO_TERRITORY_CODE_CY",
		58:  "ALL_ISO_TERRITORY_CODE_CZ",
		59:  "ALL_ISO_TERRITORY_CODE_DE",
		60:  "ALL_ISO_TERRITORY_CODE_DJ",
		61:  "ALL_ISO_TERRITORY_CODE_DK",
		62:  "ALL_ISO_TERRITORY_CODE_DM",
		63:  "ALL_ISO_TERRITORY_CODE_DO",
		64:  "ALL_ISO_TERRITORY_CODE_DZ",
		65:  "ALL_ISO_TERRITORY_CODE_EC",
		66:  "ALL_ISO_TERRITORY_CODE_EE",
		67:  "ALL_ISO_TERRITORY_CODE_EG",
		68:  "ALL_ISO_TERRITORY_CODE_EH",
		69:  "ALL_ISO_TERRITORY_CODE_ER",
		70:  "ALL_ISO_TERRITORY_CODE_ES",
		71:  "ALL_ISO_TERRITORY_CODE_ES_CE",
		72:  "ALL_ISO_TERRITORY_CODE_ES_CN",
		73:  "ALL_ISO_TERRITORY_CODE_ES_ML",
		74:  "ALL_ISO_TERRITORY_CODE_ET",
		75:  "ALL_ISO_TERRITORY_CODE_FI",
		76:  "ALL_ISO_TERRITORY_CODE_FJ",
		77:  "ALL_ISO_TERRITORY_CODE_FK",
		78:  "ALL_ISO_TERRITORY_CODE_FM",
		79:  "ALL_ISO_TERRITORY_CODE_FO",
		80:  "ALL_ISO_TERRITORY_CODE_FR",
		81:  "ALL_ISO_TERRITORY_CODE_GA",
		82:  "ALL_ISO_TERRITORY_CODE_GB",
		83:  "ALL_ISO_TERRITORY_CODE_GD",
		84:  "ALL_ISO_TERRITORY_CODE_GE",
		85:  "ALL_ISO_TERRITORY_CODE_GF",
		86:  "ALL_ISO_TERRITORY_CODE_GG",
		87:  "ALL_ISO_TERRITORY_CODE_GH",
		88:  "ALL_ISO_TERRITORY_CODE_GI",
		89:  "ALL_ISO_TERRITORY_CODE_GL",
		90:  "ALL_ISO_TERRITORY_CODE_GM",
		91:  "ALL_ISO_TERRITORY_CODE_GN",
		92:  "ALL_ISO_TERRITORY_CODE_GP",
		93:  "ALL_ISO_TERRITORY_CODE_GQ",
		94:  "ALL_ISO_TERRITORY_CODE_GR",
		95:  "ALL_ISO_TERRITORY_CODE_GS",
		96:  "ALL_ISO_TERRITORY_CODE_GT",
		97:  "ALL_ISO_TERRITORY_CODE_GU",
		98:  "ALL_ISO_TERRITORY_CODE_GW",
		99:  "ALL_ISO_TERRITORY_CODE_GY",
		100: "ALL_ISO_TERRITORY_CODE_HK",
		101: "ALL_ISO_TERRITORY_CODE_HM",
		102: "ALL_ISO_TERRITORY_CODE_HN",
		103: "ALL_ISO_TERRITORY_CODE_HR",
		104: "ALL_ISO_TERRITORY_CODE_HT",
		105: "ALL_ISO_TERRITORY_CODE_HU",
		106: "ALL_ISO_TERRITORY_CODE_ID",
		107: "ALL_ISO_TERRITORY_CODE_IE",
		108: "ALL_ISO_TERRITORY_CODE_IL",
		109: "ALL_ISO_TERRITORY_CODE_IM",
		110: "ALL_ISO_TERRITORY_CODE_IN",
		111: "ALL_ISO_TERRITORY_CODE_IO",
		112: "ALL_ISO_TERRITORY_CODE_IQ",
		113: "ALL_ISO_TERRITORY_CODE_IR",
		114: "ALL_ISO_TERRITORY_CODE_IS",
		115: "ALL_ISO_TERRITORY_CODE_IT",
		116: "ALL_ISO_TERRITORY_CODE_JE",
		117: "ALL_ISO_TERRITORY_CODE_JM",
		118: "ALL_ISO_TERRITORY_CODE_JO",
		119: "ALL_ISO_TERRITORY_CODE_JP",
		120: "ALL_ISO_TERRITORY_CODE_KE",
		121: "ALL_ISO_TERRITORY_CODE_KG",
		122: "ALL_ISO_TERRITORY_CODE_KH",
		123: "ALL_ISO_TERRITORY_CODE_KI",
		124: "ALL_ISO_TERRITORY_CODE_KM",
		125: "ALL_ISO_TERRITORY_CODE_KN",
		126: "ALL_ISO_TERRITORY_CODE_KP",
		127: "ALL_ISO_TERRITORY_CODE_KR",
		128: "ALL_ISO_TERRITORY_CODE_KW",
		129: "ALL_ISO_TERRITORY_CODE_KY",
		130: "ALL_ISO_TERRITORY_CODE_KZ",
		131: "ALL_ISO_TERRITORY_CODE_LA",
		132: "ALL_ISO_TERRITORY_CODE_LB",
		133: "ALL_ISO_TERRITORY_CODE_LC",
		134: "ALL_ISO_TERRITORY_CODE_LI",
		135: "ALL_ISO_TERRITORY_CODE_LK",
		136: "ALL_ISO_TERRITORY_CODE_LR",
		137: "ALL_ISO_TERRITORY_CODE_LS",
		138: "ALL_ISO_TERRITORY_CODE_LT",
		139: "ALL_ISO_TERRITORY_CODE_LU",
		140: "ALL_ISO_TERRITORY_CODE_LV",
		141: "ALL_ISO_TERRITORY_CODE_LY",
		142: "ALL_ISO_TERRITORY_CODE_MA",
		143: "ALL_ISO_TERRITORY_CODE_MC",
		144: "ALL_ISO_TERRITORY_CODE_MD",
		145: "ALL_ISO_TERRITORY_CODE_ME",
		146: "ALL_ISO_TERRITORY_CODE_MF",
		147: "ALL_ISO_TERRITORY_CODE_MG",
		148: "ALL_ISO_TERRITORY_CODE_MH",
		149: "ALL_ISO_TERRITORY_CODE_MK",
		150: "ALL_ISO_TERRITORY_CODE_ML",
		151: "ALL_ISO_TERRITORY_CODE_MM",
		152: "ALL_ISO_TERRITORY_CODE_MN",
		153: "ALL_ISO_TERRITORY_CODE_MO",
		154: "ALL_ISO_TERRITORY_CODE_MP",
		155: "ALL_ISO_TERRITORY_CODE_MQ",
		156: "ALL_ISO_TERRITORY_CODE_MR",
		157: "ALL_ISO_TERRITORY_CODE_MS",
		158: "ALL_ISO_TERRITORY_CODE_MT",
		159: "ALL_ISO_TERRITORY_CODE_MU",
		160: "ALL_ISO_TERRITORY_CODE_MV",
		161: "ALL_ISO_TERRITORY_CODE_MW",
		162: "ALL_ISO_TERRITORY_CODE_MX",
		163: "ALL_ISO_TERRITORY_CODE_MY",
		164: "ALL_ISO_TERRITORY_CODE_MZ",
		165: "ALL_ISO_TERRITORY_CODE_NA",
		166: "ALL_ISO_TERRITORY_CODE_NC",
		167: "ALL_ISO_TERRITORY_CODE_NE",
		168: "ALL_ISO_TERRITORY_CODE_NF",
		169: "ALL_ISO_TERRITORY_CODE_NG",
		170: "ALL_ISO_TERRITORY_CODE_NI",
		171: "ALL_ISO_TERRITORY_CODE_NL",
		172: "ALL_ISO_TERRITORY_CODE_NO",
		173: "ALL_ISO_TERRITORY_CODE_NP",
		174: "ALL_ISO_TERRITORY_CODE_NR",
		175: "ALL_ISO_TERRITORY_CODE_NU",
		176: "ALL_ISO_TERRITORY_CODE_NZ",
		177: "ALL_ISO_TERRITORY_CODE_OM",
		178: "ALL_ISO_TERRITORY_CODE_PA",
		179: "ALL_ISO_TERRITORY_CODE_PE",
		180: "ALL_ISO_TERRITORY_CODE_PF",
		181: "ALL_ISO_TERRITORY_CODE_PG",
		182: "ALL_ISO_TERRITORY_CODE_PH",
		183: "ALL_ISO_TERRITORY_CODE_PK",
		184: "ALL_ISO_TERRITORY_CODE_PL",
		185: "ALL_ISO_TERRITORY_CODE_PM",
		186: "ALL_ISO_TERRITORY_CODE_PN",
		187: "ALL_ISO_TERRITORY_CODE_PR",
		188: "ALL_ISO_TERRITORY_CODE_PS",
		189: "ALL_ISO_TERRITORY_CODE_PT",
		190: "ALL_ISO_TERRITORY_CODE_PW",
		191: "ALL_ISO_TERRITORY_CODE_PY",
		192: "ALL_ISO_TERRITORY_CODE_QA",
		193: "ALL_ISO_TERRITORY_CODE_RE",
		194: "ALL_ISO_TERRITORY_CODE_RO",
		195: "ALL_ISO_TERRITORY_CODE_RS",
		196: "ALL_ISO_TERRITORY_CODE_RU",
		197: "ALL_ISO_TERRITORY_CODE_RW",
		198: "ALL_ISO_TERRITORY_CODE_SA",
		199: "ALL_ISO_TERRITORY_CODE_SB",
		200: "ALL_ISO_TERRITORY_CODE_SC",
		201: "ALL_ISO_TERRITORY_CODE_SD",
		202: "ALL_ISO_TERRITORY_CODE_SE",
		203: "ALL_ISO_TERRITORY_CODE_SG",
		204: "ALL_ISO_TERRITORY_CODE_SH",
		205: "ALL_ISO_TERRITORY_CODE_SI",
		206: "ALL_ISO_TERRITORY_CODE_SJ",
		207: "ALL_ISO_TERRITORY_CODE_SK",
		208: "ALL_ISO_TERRITORY_CODE_SL",
		209: "ALL_ISO_TERRITORY_CODE_SM",
		210: "ALL_ISO_TERRITORY_CODE_SN",
		211: "ALL_ISO_TERRITORY_CODE_SO",
		212: "ALL_ISO_TERRITORY_CODE_SR",
		213: "ALL_ISO_TERRITORY_CODE_SS",
		214: "ALL_ISO_TERRITORY_CODE_ST",
		215: "ALL_ISO_TERRITORY_CODE_SV",
		216: "ALL_ISO_TERRITORY_CODE_SX",
		217: "ALL_ISO_TERRITORY_CODE_SY",
		218: "ALL_ISO_TERRITORY_CODE_SZ",
		219: "ALL_ISO_TERRITORY_CODE_TC",
		220: "ALL_ISO_TERRITORY_CODE_TD",
		221: "ALL_ISO_TERRITORY_CODE_TF",
		222: "ALL_ISO_TERRITORY_CODE_TG",
		223: "ALL_ISO_TERRITORY_CODE_TH",
		224: "ALL_ISO_TERRITORY_CODE_TJ",
		225: "ALL_ISO_TERRITORY_CODE_TK",
		226: "ALL_ISO_TERRITORY_CODE_TL",
		227: "ALL_ISO_TERRITORY_CODE_TM",
		228: "ALL_ISO_TERRITORY_CODE_TN",
		229: "ALL_ISO_TERRITORY_CODE_TO",
		230: "ALL_ISO_TERRITORY_CODE_TR",
		231: "ALL_ISO_TERRITORY_CODE_TT",
		232: "ALL_ISO_TERRITORY_CODE_TV",
		233: "ALL_ISO_TERRITORY_CODE_TW",
		234: "ALL_ISO_TERRITORY_CODE_TZ",
		235: "ALL_ISO_TERRITORY_CODE_UA",
		236: "ALL_ISO_TERRITORY_CODE_UG",
		237: "ALL_ISO_TERRITORY_CODE_UM",
		238: "ALL_ISO_TERRITORY_CODE_US",
		239: "ALL_ISO_TERRITORY_CODE_UY",
		240: "ALL_ISO_TERRITORY_CODE_UZ",
		241: "ALL_ISO_TERRITORY_CODE_VA",
		242: "ALL_ISO_TERRITORY_CODE_VC",
		243: "ALL_ISO_TERRITORY_CODE_VE",
		244: "ALL_ISO_TERRITORY_CODE_VG",
		245: "ALL_ISO_TERRITORY_CODE_VI",
		246: "ALL_ISO_TERRITORY_CODE_VN",
		247: "ALL_ISO_TERRITORY_CODE_VU",
		248: "ALL_ISO_TERRITORY_CODE_WF",
		249: "ALL_ISO_TERRITORY_CODE_WS",
		250: "ALL_ISO_TERRITORY_CODE_YE",
		251: "ALL_ISO_TERRITORY_CODE_YT",
		252: "ALL_ISO_TERRITORY_CODE_ZA",
		253: "ALL_ISO_TERRITORY_CODE_ZM",
		254: "ALL_ISO_TERRITORY_CODE_ZW",
		255: "ALL_ISO_TERRITORY_CODE_XK",
		256: "ALL_ISO_TERRITORY_CODE_WORLDWIDE",
		257: "ALL_ISO_TERRITORY_CODE_AIDJ",
		258: "ALL_ISO_TERRITORY_CODE_ANHH",
		259: "ALL_ISO_TERRITORY_CODE_BQAQ",
		260: "ALL_ISO_TERRITORY_CODE_BUMM",
		261: "ALL_ISO_TERRITORY_CODE_BYAA",
		262: "ALL_ISO_TERRITORY_CODE_CSHH",
		263: "ALL_ISO_TERRITORY_CODE_CSXX",
		264: "ALL_ISO_TERRITORY_CODE_CTKI",
		265: "ALL_ISO_TERRITORY_CODE_DDDE",
		266: "ALL_ISO_TERRITORY_CODE_DYBJ",
		267: "ALL_ISO_TERRITORY_CODE_FQHH",
		268: "ALL_ISO_TERRITORY_CODE_FXFR",
		269: "ALL_ISO_TERRITORY_CODE_GEHH",
		270: "ALL_ISO_TERRITORY_CODE_HVBF",
		271: "ALL_ISO_TERRITORY_CODE_JTUM",
		272: "ALL_ISO_TERRITORY_CODE_MIUM",
		273: "ALL_ISO_TERRITORY_CODE_NHVU",
		274: "ALL_ISO_TERRITORY_CODE_NQAQ",
		275: "ALL_ISO_TERRITORY_CODE_NTHH",
		276: "ALL_ISO_TERRITORY_CODE_PCHH",
		277: "ALL_ISO_TERRITORY_CODE_PUUM",
		278: "ALL_ISO_TERRITORY_CODE_PZPA",
		279: "ALL_ISO_TERRITORY_CODE_RHZW",
		280: "ALL_ISO_TERRITORY_CODE_SKIN",
		281: "ALL_ISO_TERRITORY_CODE_SUHH",
		282: "ALL_ISO_TERRITORY_CODE_TPTL",
		283: "ALL_ISO_TERRITORY_CODE_VDVN",
		284: "ALL_ISO_TERRITORY_CODE_WKUM",
		285: "ALL_ISO_TERRITORY_CODE_YDYE",
		286: "ALL_ISO_TERRITORY_CODE_YUCS",
		287: "ALL_ISO_TERRITORY_CODE_ZRCD",
	}
	AllIsoTerritoryCode_value = map[string]int32{
		"ALL_ISO_TERRITORY_CODE_UNSPECIFIED": 0,
		"ALL_ISO_TERRITORY_CODE_AD":          1,
		"ALL_ISO_TERRITORY_CODE_AE":          2,
		"ALL_ISO_TERRITORY_CODE_AF":          3,
		"ALL_ISO_TERRITORY_CODE_AG":          4,
		"ALL_ISO_TERRITORY_CODE_AI":          5,
		"ALL_ISO_TERRITORY_CODE_AL":          6,
		"ALL_ISO_TERRITORY_CODE_AM":          7,
		"ALL_ISO_TERRITORY_CODE_AN":          8,
		"ALL_ISO_TERRITORY_CODE_AO":          9,
		"ALL_ISO_TERRITORY_CODE_AQ":          10,
		"ALL_ISO_TERRITORY_CODE_AR":          11,
		"ALL_ISO_TERRITORY_CODE_AS":          12,
		"ALL_ISO_TERRITORY_CODE_AT":          13,
		"ALL_ISO_TERRITORY_CODE_AU":          14,
		"ALL_ISO_TERRITORY_CODE_AW":          15,
		"ALL_ISO_TERRITORY_CODE_AX":          16,
		"ALL_ISO_TERRITORY_CODE_AZ":          17,
		"ALL_ISO_TERRITORY_CODE_BA":          18,
		"ALL_ISO_TERRITORY_CODE_BB":          19,
		"ALL_ISO_TERRITORY_CODE_BD":          20,
		"ALL_ISO_TERRITORY_CODE_BE":          21,
		"ALL_ISO_TERRITORY_CODE_BF":          22,
		"ALL_ISO_TERRITORY_CODE_BG":          23,
		"ALL_ISO_TERRITORY_CODE_BH":          24,
		"ALL_ISO_TERRITORY_CODE_BI":          25,
		"ALL_ISO_TERRITORY_CODE_BJ":          26,
		"ALL_ISO_TERRITORY_CODE_BL":          27,
		"ALL_ISO_TERRITORY_CODE_BM":          28,
		"ALL_ISO_TERRITORY_CODE_BN":          29,
		"ALL_ISO_TERRITORY_CODE_BO":          30,
		"ALL_ISO_TERRITORY_CODE_BQ":          31,
		"ALL_ISO_TERRITORY_CODE_BR":          32,
		"ALL_ISO_TERRITORY_CODE_BS":          33,
		"ALL_ISO_TERRITORY_CODE_BT":          34,
		"ALL_ISO_TERRITORY_CODE_BV":          35,
		"ALL_ISO_TERRITORY_CODE_BW":          36,
		"ALL_ISO_TERRITORY_CODE_BY":          37,
		"ALL_ISO_TERRITORY_CODE_BZ":          38,
		"ALL_ISO_TERRITORY_CODE_CA":          39,
		"ALL_ISO_TERRITORY_CODE_CC":          40,
		"ALL_ISO_TERRITORY_CODE_CD":          41,
		"ALL_ISO_TERRITORY_CODE_CF":          42,
		"ALL_ISO_TERRITORY_CODE_CG":          43,
		"ALL_ISO_TERRITORY_CODE_CH":          44,
		"ALL_ISO_TERRITORY_CODE_CI":          45,
		"ALL_ISO_TERRITORY_CODE_CK":          46,
		"ALL_ISO_TERRITORY_CODE_CL":          47,
		"ALL_ISO_TERRITORY_CODE_CM":          48,
		"ALL_ISO_TERRITORY_CODE_CN":          49,
		"ALL_ISO_TERRITORY_CODE_CO":          50,
		"ALL_ISO_TERRITORY_CODE_CR":          51,
		"ALL_ISO_TERRITORY_CODE_CS":          52,
		"ALL_ISO_TERRITORY_CODE_CU":          53,
		"ALL_ISO_TERRITORY_CODE_CV":          54,
		"ALL_ISO_TERRITORY_CODE_CW":          55,
		"ALL_ISO_TERRITORY_CODE_CX":          56,
		"ALL_ISO_TERRITORY_CODE_CY":          57,
		"ALL_ISO_TERRITORY_CODE_CZ":          58,
		"ALL_ISO_TERRITORY_CODE_DE":          59,
		"ALL_ISO_TERRITORY_CODE_DJ":          60,
		"ALL_ISO_TERRITORY_CODE_DK":          61,
		"ALL_ISO_TERRITORY_CODE_DM":          62,
		"ALL_ISO_TERRITORY_CODE_DO":          63,
		"ALL_ISO_TERRITORY_CODE_DZ":          64,
		"ALL_ISO_TERRITORY_CODE_EC":          65,
		"ALL_ISO_TERRITORY_CODE_EE":          66,
		"ALL_ISO_TERRITORY_CODE_EG":          67,
		"ALL_ISO_TERRITORY_CODE_EH":          68,
		"ALL_ISO_TERRITORY_CODE_ER":          69,
		"ALL_ISO_TERRITORY_CODE_ES":          70,
		"ALL_ISO_TERRITORY_CODE_ES_CE":       71,
		"ALL_ISO_TERRITORY_CODE_ES_CN":       72,
		"ALL_ISO_TERRITORY_CODE_ES_ML":       73,
		"ALL_ISO_TERRITORY_CODE_ET":          74,
		"ALL_ISO_TERRITORY_CODE_FI":          75,
		"ALL_ISO_TERRITORY_CODE_FJ":          76,
		"ALL_ISO_TERRITORY_CODE_FK":          77,
		"ALL_ISO_TERRITORY_CODE_FM":          78,
		"ALL_ISO_TERRITORY_CODE_FO":          79,
		"ALL_ISO_TERRITORY_CODE_FR":          80,
		"ALL_ISO_TERRITORY_CODE_GA":          81,
		"ALL_ISO_TERRITORY_CODE_GB":          82,
		"ALL_ISO_TERRITORY_CODE_GD":          83,
		"ALL_ISO_TERRITORY_CODE_GE":          84,
		"ALL_ISO_TERRITORY_CODE_GF":          85,
		"ALL_ISO_TERRITORY_CODE_GG":          86,
		"ALL_ISO_TERRITORY_CODE_GH":          87,
		"ALL_ISO_TERRITORY_CODE_GI":          88,
		"ALL_ISO_TERRITORY_CODE_GL":          89,
		"ALL_ISO_TERRITORY_CODE_GM":          90,
		"ALL_ISO_TERRITORY_CODE_GN":          91,
		"ALL_ISO_TERRITORY_CODE_GP":          92,
		"ALL_ISO_TERRITORY_CODE_GQ":          93,
		"ALL_ISO_TERRITORY_CODE_GR":          94,
		"ALL_ISO_TERRITORY_CODE_GS":          95,
		"ALL_ISO_TERRITORY_CODE_GT":          96,
		"ALL_ISO_TERRITORY_CODE_GU":          97,
		"ALL_ISO_TERRITORY_CODE_GW":          98,
		"ALL_ISO_TERRITORY_CODE_GY":          99,
		"ALL_ISO_TERRITORY_CODE_HK":          100,
		"ALL_ISO_TERRITORY_CODE_HM":          101,
		"ALL_ISO_TERRITORY_CODE_HN":          102,
		"ALL_ISO_TERRITORY_CODE_HR":          103,
		"ALL_ISO_TERRITORY_CODE_HT":          104,
		"ALL_ISO_TERRITORY_CODE_HU":          105,
		"ALL_ISO_TERRITORY_CODE_ID":          106,
		"ALL_ISO_TERRITORY_CODE_IE":          107,
		"ALL_ISO_TERRITORY_CODE_IL":          108,
		"ALL_ISO_TERRITORY_CODE_IM":          109,
		"ALL_ISO_TERRITORY_CODE_IN":          110,
		"ALL_ISO_TERRITORY_CODE_IO":          111,
		"ALL_ISO_TERRITORY_CODE_IQ":          112,
		"ALL_ISO_TERRITORY_CODE_IR":          113,
		"ALL_ISO_TERRITORY_CODE_IS":          114,
		"ALL_ISO_TERRITORY_CODE_IT":          115,
		"ALL_ISO_TERRITORY_CODE_JE":          116,
		"ALL_ISO_TERRITORY_CODE_JM":          117,
		"ALL_ISO_TERRITORY_CODE_JO":          118,
		"ALL_ISO_TERRITORY_CODE_JP":          119,
		"ALL_ISO_TERRITORY_CODE_KE":          120,
		"ALL_ISO_TERRITORY_CODE_KG":          121,
		"ALL_ISO_TERRITORY_CODE_KH":          122,
		"ALL_ISO_TERRITORY_CODE_KI":          123,
		"ALL_ISO_TERRITORY_CODE_KM":          124,
		"ALL_ISO_TERRITORY_CODE_KN":          125,
		"ALL_ISO_TERRITORY_CODE_KP":          126,
		"ALL_ISO_TERRITORY_CODE_KR":          127,
		"ALL_ISO_TERRITORY_CODE_KW":          128,
		"ALL_ISO_TERRITORY_CODE_KY":          129,
		"ALL_ISO_TERRITORY_CODE_KZ":          130,
		"ALL_ISO_TERRITORY_CODE_LA":          131,
		"ALL_ISO_TERRITORY_CODE_LB":          132,
		"ALL_ISO_TERRITORY_CODE_LC":          133,
		"ALL_ISO_TERRITORY_CODE_LI":          134,
		"ALL_ISO_TERRITORY_CODE_LK":          135,
		"ALL_ISO_TERRITORY_CODE_LR":          136,
		"ALL_ISO_TERRITORY_CODE_LS":          137,
		"ALL_ISO_TERRITORY_CODE_LT":          138,
		"ALL_ISO_TERRITORY_CODE_LU":          139,
		"ALL_ISO_TERRITORY_CODE_LV":          140,
		"ALL_ISO_TERRITORY_CODE_LY":          141,
		"ALL_ISO_TERRITORY_CODE_MA":          142,
		"ALL_ISO_TERRITORY_CODE_MC":          143,
		"ALL_ISO_TERRITORY_CODE_MD":          144,
		"ALL_ISO_TERRITORY_CODE_ME":          145,
		"ALL_ISO_TERRITORY_CODE_MF":          146,
		"ALL_ISO_TERRITORY_CODE_MG":          147,
		"ALL_ISO_TERRITORY_CODE_MH":          148,
		"ALL_ISO_TERRITORY_CODE_MK":          149,
		"ALL_ISO_TERRITORY_CODE_ML":          150,
		"ALL_ISO_TERRITORY_CODE_MM":          151,
		"ALL_ISO_TERRITORY_CODE_MN":          152,
		"ALL_ISO_TERRITORY_CODE_MO":          153,
		"ALL_ISO_TERRITORY_CODE_MP":          154,
		"ALL_ISO_TERRITORY_CODE_MQ":          155,
		"ALL_ISO_TERRITORY_CODE_MR":          156,
		"ALL_ISO_TERRITORY_CODE_MS":          157,
		"ALL_ISO_TERRITORY_CODE_MT":          158,
		"ALL_ISO_TERRITORY_CODE_MU":          159,
		"ALL_ISO_TERRITORY_CODE_MV":          160,
		"ALL_ISO_TERRITORY_CODE_MW":          161,
		"ALL_ISO_TERRITORY_CODE_MX":          162,
		"ALL_ISO_TERRITORY_CODE_MY":          163,
		"ALL_ISO_TERRITORY_CODE_MZ":          164,
		"ALL_ISO_TERRITORY_CODE_NA":          165,
		"ALL_ISO_TERRITORY_CODE_NC":          166,
		"ALL_ISO_TERRITORY_CODE_NE":          167,
		"ALL_ISO_TERRITORY_CODE_NF":          168,
		"ALL_ISO_TERRITORY_CODE_NG":          169,
		"ALL_ISO_TERRITORY_CODE_NI":          170,
		"ALL_ISO_TERRITORY_CODE_NL":          171,
		"ALL_ISO_TERRITORY_CODE_NO":          172,
		"ALL_ISO_TERRITORY_CODE_NP":          173,
		"ALL_ISO_TERRITORY_CODE_NR":          174,
		"ALL_ISO_TERRITORY_CODE_NU":          175,
		"ALL_ISO_TERRITORY_CODE_NZ":          176,
		"ALL_ISO_TERRITORY_CODE_OM":          177,
		"ALL_ISO_TERRITORY_CODE_PA":          178,
		"ALL_ISO_TERRITORY_CODE_PE":          179,
		"ALL_ISO_TERRITORY_CODE_PF":          180,
		"ALL_ISO_TERRITORY_CODE_PG":          181,
		"ALL_ISO_TERRITORY_CODE_PH":          182,
		"ALL_ISO_TERRITORY_CODE_PK":          183,
		"ALL_ISO_TERRITORY_CODE_PL":          184,
		"ALL_ISO_TERRITORY_CODE_PM":          185,
		"ALL_ISO_TERRITORY_CODE_PN":          186,
		"ALL_ISO_TERRITORY_CODE_PR":          187,
		"ALL_ISO_TERRITORY_CODE_PS":          188,
		"ALL_ISO_TERRITORY_CODE_PT":          189,
		"ALL_ISO_TERRITORY_CODE_PW":          190,
		"ALL_ISO_TERRITORY_CODE_PY":          191,
		"ALL_ISO_TERRITORY_CODE_QA":          192,
		"ALL_ISO_TERRITORY_CODE_RE":          193,
		"ALL_ISO_TERRITORY_CODE_RO":          194,
		"ALL_ISO_TERRITORY_CODE_RS":          195,
		"ALL_ISO_TERRITORY_CODE_RU":          196,
		"ALL_ISO_TERRITORY_CODE_RW":          197,
		"ALL_ISO_TERRITORY_CODE_SA":          198,
		"ALL_ISO_TERRITORY_CODE_SB":          199,
		"ALL_ISO_TERRITORY_CODE_SC":          200,
		"ALL_ISO_TERRITORY_CODE_SD":          201,
		"ALL_ISO_TERRITORY_CODE_SE":          202,
		"ALL_ISO_TERRITORY_CODE_SG":          203,
		"ALL_ISO_TERRITORY_CODE_SH":          204,
		"ALL_ISO_TERRITORY_CODE_SI":          205,
		"ALL_ISO_TERRITORY_CODE_SJ":          206,
		"ALL_ISO_TERRITORY_CODE_SK":          207,
		"ALL_ISO_TERRITORY_CODE_SL":          208,
		"ALL_ISO_TERRITORY_CODE_SM":          209,
		"ALL_ISO_TERRITORY_CODE_SN":          210,
		"ALL_ISO_TERRITORY_CODE_SO":          211,
		"ALL_ISO_TERRITORY_CODE_SR":          212,
		"ALL_ISO_TERRITORY_CODE_SS":          213,
		"ALL_ISO_TERRITORY_CODE_ST":          214,
		"ALL_ISO_TERRITORY_CODE_SV":          215,
		"ALL_ISO_TERRITORY_CODE_SX":          216,
		"ALL_ISO_TERRITORY_CODE_SY":          217,
		"ALL_ISO_TERRITORY_CODE_SZ":          218,
		"ALL_ISO_TERRITORY_CODE_TC":          219,
		"ALL_ISO_TERRITORY_CODE_TD":          220,
		"ALL_ISO_TERRITORY_CODE_TF":          221,
		"ALL_ISO_TERRITORY_CODE_TG":          222,
		"ALL_ISO_TERRITORY_CODE_TH":          223,
		"ALL_ISO_TERRITORY_CODE_TJ":          224,
		"ALL_ISO_TERRITORY_CODE_TK":          225,
		"ALL_ISO_TERRITORY_CODE_TL":          226,
		"ALL_ISO_TERRITORY_CODE_TM":          227,
		"ALL_ISO_TERRITORY_CODE_TN":          228,
		"ALL_ISO_TERRITORY_CODE_TO":          229,
		"ALL_ISO_TERRITORY_CODE_TR":          230,
		"ALL_ISO_TERRITORY_CODE_TT":          231,
		"ALL_ISO_TERRITORY_CODE_TV":          232,
		"ALL_ISO_TERRITORY_CODE_TW":          233,
		"ALL_ISO_TERRITORY_CODE_TZ":          234,
		"ALL_ISO_TERRITORY_CODE_UA":          235,
		"ALL_ISO_TERRITORY_CODE_UG":          236,
		"ALL_ISO_TERRITORY_CODE_UM":          237,
		"ALL_ISO_TERRITORY_CODE_US":          238,
		"ALL_ISO_TERRITORY_CODE_UY":          239,
		"ALL_ISO_TERRITORY_CODE_UZ":          240,
		"ALL_ISO_TERRITORY_CODE_VA":          241,
		"ALL_ISO_TERRITORY_CODE_VC":          242,
		"ALL_ISO_TERRITORY_CODE_VE":          243,
		"ALL_ISO_TERRITORY_CODE_VG":          244,
		"ALL_ISO_TERRITORY_CODE_VI":          245,
		"ALL_ISO_TERRITORY_CODE_VN":          246,
		"ALL_ISO_TERRITORY_CODE_VU":          247,
		"ALL_ISO_TERRITORY_CODE_WF":          248,
		"ALL_ISO_TERRITORY_CODE_WS":          249,
		"ALL_ISO_TERRITORY_CODE_YE":          250,
		"ALL_ISO_TERRITORY_CODE_YT":          251,
		"ALL_ISO_TERRITORY_CODE_ZA":          252,
		"ALL_ISO_TERRITORY_CODE_ZM":          253,
		"ALL_ISO_TERRITORY_CODE_ZW":          254,
		"ALL_ISO_TERRITORY_CODE_XK":          255,
		"ALL_ISO_TERRITORY_CODE_WORLDWIDE":   256,
		"ALL_ISO_TERRITORY_CODE_AIDJ":        257,
		"ALL_ISO_TERRITORY_CODE_ANHH":        258,
		"ALL_ISO_TERRITORY_CODE_BQAQ":        259,
		"ALL_ISO_TERRITORY_CODE_BUMM":        260,
		"ALL_ISO_TERRITORY_CODE_BYAA":        261,
		"ALL_ISO_TERRITORY_CODE_CSHH":        262,
		"ALL_ISO_TERRITORY_CODE_CSXX":        263,
		"ALL_ISO_TERRITORY_CODE_CTKI":        264,
		"ALL_ISO_TERRITORY_CODE_DDDE":        265,
		"ALL_ISO_TERRITORY_CODE_DYBJ":        266,
		"ALL_ISO_TERRITORY_CODE_FQHH":        267,
		"ALL_ISO_TERRITORY_CODE_FXFR":        268,
		"ALL_ISO_TERRITORY_CODE_GEHH":        269,
		"ALL_ISO_TERRITORY_CODE_HVBF":        270,
		"ALL_ISO_TERRITORY_CODE_JTUM":        271,
		"ALL_ISO_TERRITORY_CODE_MIUM":        272,
		"ALL_ISO_TERRITORY_CODE_NHVU":        273,
		"ALL_ISO_TERRITORY_CODE_NQAQ":        274,
		"ALL_ISO_TERRITORY_CODE_NTHH":        275,
		"ALL_ISO_TERRITORY_CODE_PCHH":        276,
		"ALL_ISO_TERRITORY_CODE_PUUM":        277,
		"ALL_ISO_TERRITORY_CODE_PZPA":        278,
		"ALL_ISO_TERRITORY_CODE_RHZW":        279,
		"ALL_ISO_TERRITORY_CODE_SKIN":        280,
		"ALL_ISO_TERRITORY_CODE_SUHH":        281,
		"ALL_ISO_TERRITORY_CODE_TPTL":        282,
		"ALL_ISO_TERRITORY_CODE_VDVN":        283,
		"ALL_ISO_TERRITORY_CODE_WKUM":        284,
		"ALL_ISO_TERRITORY_CODE_YDYE":        285,
		"ALL_ISO_TERRITORY_CODE_YUCS":        286,
		"ALL_ISO_TERRITORY_CODE_ZRCD":        287,
	}
)

func (x AllIsoTerritoryCode) Enum() *AllIsoTerritoryCode {
	p := new(AllIsoTerritoryCode)
	*p = x
	return p
}

func (x AllIsoTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllIsoTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[6].Descriptor()
}

func (AllIsoTerritoryCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[6]
}

func (x AllIsoTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllIsoTerritoryCode.Descriptor instead.
func (AllIsoTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{6}
}

type AllTerritoryCodeNoWorldwide int32

const (
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_UNSPECIFIED AllTerritoryCodeNoWorldwide = 0
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AD          AllTerritoryCodeNoWorldwide = 1
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AE          AllTerritoryCodeNoWorldwide = 2
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AF          AllTerritoryCodeNoWorldwide = 3
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AG          AllTerritoryCodeNoWorldwide = 4
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AI          AllTerritoryCodeNoWorldwide = 5
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AL          AllTerritoryCodeNoWorldwide = 6
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AM          AllTerritoryCodeNoWorldwide = 7
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AN          AllTerritoryCodeNoWorldwide = 8
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AO          AllTerritoryCodeNoWorldwide = 9
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AQ          AllTerritoryCodeNoWorldwide = 10
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AR          AllTerritoryCodeNoWorldwide = 11
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AS          AllTerritoryCodeNoWorldwide = 12
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AT          AllTerritoryCodeNoWorldwide = 13
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AU          AllTerritoryCodeNoWorldwide = 14
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AW          AllTerritoryCodeNoWorldwide = 15
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AX          AllTerritoryCodeNoWorldwide = 16
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AZ          AllTerritoryCodeNoWorldwide = 17
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BA          AllTerritoryCodeNoWorldwide = 18
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BB          AllTerritoryCodeNoWorldwide = 19
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BD          AllTerritoryCodeNoWorldwide = 20
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BE          AllTerritoryCodeNoWorldwide = 21
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BF          AllTerritoryCodeNoWorldwide = 22
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BG          AllTerritoryCodeNoWorldwide = 23
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BH          AllTerritoryCodeNoWorldwide = 24
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BI          AllTerritoryCodeNoWorldwide = 25
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BJ          AllTerritoryCodeNoWorldwide = 26
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BL          AllTerritoryCodeNoWorldwide = 27
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BM          AllTerritoryCodeNoWorldwide = 28
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BN          AllTerritoryCodeNoWorldwide = 29
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BO          AllTerritoryCodeNoWorldwide = 30
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BQ          AllTerritoryCodeNoWorldwide = 31
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BR          AllTerritoryCodeNoWorldwide = 32
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BS          AllTerritoryCodeNoWorldwide = 33
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BT          AllTerritoryCodeNoWorldwide = 34
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BV          AllTerritoryCodeNoWorldwide = 35
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BW          AllTerritoryCodeNoWorldwide = 36
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BY          AllTerritoryCodeNoWorldwide = 37
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BZ          AllTerritoryCodeNoWorldwide = 38
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CA          AllTerritoryCodeNoWorldwide = 39
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CC          AllTerritoryCodeNoWorldwide = 40
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CD          AllTerritoryCodeNoWorldwide = 41
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CF          AllTerritoryCodeNoWorldwide = 42
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CG          AllTerritoryCodeNoWorldwide = 43
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CH          AllTerritoryCodeNoWorldwide = 44
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CI          AllTerritoryCodeNoWorldwide = 45
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CK          AllTerritoryCodeNoWorldwide = 46
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CL          AllTerritoryCodeNoWorldwide = 47
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CM          AllTerritoryCodeNoWorldwide = 48
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CN          AllTerritoryCodeNoWorldwide = 49
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CO          AllTerritoryCodeNoWorldwide = 50
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CR          AllTerritoryCodeNoWorldwide = 51
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CS          AllTerritoryCodeNoWorldwide = 52
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CU          AllTerritoryCodeNoWorldwide = 53
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CV          AllTerritoryCodeNoWorldwide = 54
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CW          AllTerritoryCodeNoWorldwide = 55
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CX          AllTerritoryCodeNoWorldwide = 56
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CY          AllTerritoryCodeNoWorldwide = 57
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CZ          AllTerritoryCodeNoWorldwide = 58
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_DE          AllTerritoryCodeNoWorldwide = 59
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_DJ          AllTerritoryCodeNoWorldwide = 60
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_DK          AllTerritoryCodeNoWorldwide = 61
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_DM          AllTerritoryCodeNoWorldwide = 62
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_DO          AllTerritoryCodeNoWorldwide = 63
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_DZ          AllTerritoryCodeNoWorldwide = 64
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_EC          AllTerritoryCodeNoWorldwide = 65
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_EE          AllTerritoryCodeNoWorldwide = 66
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_EG          AllTerritoryCodeNoWorldwide = 67
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_EH          AllTerritoryCodeNoWorldwide = 68
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ER          AllTerritoryCodeNoWorldwide = 69
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ES          AllTerritoryCodeNoWorldwide = 70
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_CE       AllTerritoryCodeNoWorldwide = 71
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_CN       AllTerritoryCodeNoWorldwide = 72
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_ML       AllTerritoryCodeNoWorldwide = 73
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ET          AllTerritoryCodeNoWorldwide = 74
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_FI          AllTerritoryCodeNoWorldwide = 75
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_FJ          AllTerritoryCodeNoWorldwide = 76
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_FK          AllTerritoryCodeNoWorldwide = 77
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_FM          AllTerritoryCodeNoWorldwide = 78
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_FO          AllTerritoryCodeNoWorldwide = 79
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_FR          AllTerritoryCodeNoWorldwide = 80
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GA          AllTerritoryCodeNoWorldwide = 81
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GB          AllTerritoryCodeNoWorldwide = 82
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GD          AllTerritoryCodeNoWorldwide = 83
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GE          AllTerritoryCodeNoWorldwide = 84
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GF          AllTerritoryCodeNoWorldwide = 85
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GG          AllTerritoryCodeNoWorldwide = 86
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GH          AllTerritoryCodeNoWorldwide = 87
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GI          AllTerritoryCodeNoWorldwide = 88
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GL          AllTerritoryCodeNoWorldwide = 89
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GM          AllTerritoryCodeNoWorldwide = 90
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GN          AllTerritoryCodeNoWorldwide = 91
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GP          AllTerritoryCodeNoWorldwide = 92
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GQ          AllTerritoryCodeNoWorldwide = 93
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GR          AllTerritoryCodeNoWorldwide = 94
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GS          AllTerritoryCodeNoWorldwide = 95
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GT          AllTerritoryCodeNoWorldwide = 96
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GU          AllTerritoryCodeNoWorldwide = 97
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GW          AllTerritoryCodeNoWorldwide = 98
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GY          AllTerritoryCodeNoWorldwide = 99
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_HK          AllTerritoryCodeNoWorldwide = 100
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_HM          AllTerritoryCodeNoWorldwide = 101
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_HN          AllTerritoryCodeNoWorldwide = 102
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_HR          AllTerritoryCodeNoWorldwide = 103
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_HT          AllTerritoryCodeNoWorldwide = 104
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_HU          AllTerritoryCodeNoWorldwide = 105
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ID          AllTerritoryCodeNoWorldwide = 106
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_IE          AllTerritoryCodeNoWorldwide = 107
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_IL          AllTerritoryCodeNoWorldwide = 108
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_IM          AllTerritoryCodeNoWorldwide = 109
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_IN          AllTerritoryCodeNoWorldwide = 110
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_IO          AllTerritoryCodeNoWorldwide = 111
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_IQ          AllTerritoryCodeNoWorldwide = 112
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_IR          AllTerritoryCodeNoWorldwide = 113
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_IS          AllTerritoryCodeNoWorldwide = 114
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_IT          AllTerritoryCodeNoWorldwide = 115
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_JE          AllTerritoryCodeNoWorldwide = 116
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_JM          AllTerritoryCodeNoWorldwide = 117
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_JO          AllTerritoryCodeNoWorldwide = 118
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_JP          AllTerritoryCodeNoWorldwide = 119
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_KE          AllTerritoryCodeNoWorldwide = 120
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_KG          AllTerritoryCodeNoWorldwide = 121
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_KH          AllTerritoryCodeNoWorldwide = 122
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_KI          AllTerritoryCodeNoWorldwide = 123
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_KM          AllTerritoryCodeNoWorldwide = 124
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_KN          AllTerritoryCodeNoWorldwide = 125
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_KP          AllTerritoryCodeNoWorldwide = 126
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_KR          AllTerritoryCodeNoWorldwide = 127
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_KW          AllTerritoryCodeNoWorldwide = 128
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_KY          AllTerritoryCodeNoWorldwide = 129
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_KZ          AllTerritoryCodeNoWorldwide = 130
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_LA          AllTerritoryCodeNoWorldwide = 131
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_LB          AllTerritoryCodeNoWorldwide = 132
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_LC          AllTerritoryCodeNoWorldwide = 133
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_LI          AllTerritoryCodeNoWorldwide = 134
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_LK          AllTerritoryCodeNoWorldwide = 135
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_LR          AllTerritoryCodeNoWorldwide = 136
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_LS          AllTerritoryCodeNoWorldwide = 137
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_LT          AllTerritoryCodeNoWorldwide = 138
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_LU          AllTerritoryCodeNoWorldwide = 139
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_LV          AllTerritoryCodeNoWorldwide = 140
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_LY          AllTerritoryCodeNoWorldwide = 141
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MA          AllTerritoryCodeNoWorldwide = 142
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MC          AllTerritoryCodeNoWorldwide = 143
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MD          AllTerritoryCodeNoWorldwide = 144
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ME          AllTerritoryCodeNoWorldwide = 145
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MF          AllTerritoryCodeNoWorldwide = 146
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MG          AllTerritoryCodeNoWorldwide = 147
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MH          AllTerritoryCodeNoWorldwide = 148
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MK          AllTerritoryCodeNoWorldwide = 149
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ML          AllTerritoryCodeNoWorldwide = 150
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MM          AllTerritoryCodeNoWorldwide = 151
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MN          AllTerritoryCodeNoWorldwide = 152
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MO          AllTerritoryCodeNoWorldwide = 153
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MP          AllTerritoryCodeNoWorldwide = 154
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MQ          AllTerritoryCodeNoWorldwide = 155
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MR          AllTerritoryCodeNoWorldwide = 156
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MS          AllTerritoryCodeNoWorldwide = 157
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MT          AllTerritoryCodeNoWorldwide = 158
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MU          AllTerritoryCodeNoWorldwide = 159
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MV          AllTerritoryCodeNoWorldwide = 160
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MW          AllTerritoryCodeNoWorldwide = 161
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MX          AllTerritoryCodeNoWorldwide = 162
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MY          AllTerritoryCodeNoWorldwide = 163
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MZ          AllTerritoryCodeNoWorldwide = 164
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NA          AllTerritoryCodeNoWorldwide = 165
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NC          AllTerritoryCodeNoWorldwide = 166
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NE          AllTerritoryCodeNoWorldwide = 167
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NF          AllTerritoryCodeNoWorldwide = 168
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NG          AllTerritoryCodeNoWorldwide = 169
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NI          AllTerritoryCodeNoWorldwide = 170
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NL          AllTerritoryCodeNoWorldwide = 171
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NO          AllTerritoryCodeNoWorldwide = 172
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NP          AllTerritoryCodeNoWorldwide = 173
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NR          AllTerritoryCodeNoWorldwide = 174
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NU          AllTerritoryCodeNoWorldwide = 175
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NZ          AllTerritoryCodeNoWorldwide = 176
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_OM          AllTerritoryCodeNoWorldwide = 177
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PA          AllTerritoryCodeNoWorldwide = 178
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PE          AllTerritoryCodeNoWorldwide = 179
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PF          AllTerritoryCodeNoWorldwide = 180
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PG          AllTerritoryCodeNoWorldwide = 181
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PH          AllTerritoryCodeNoWorldwide = 182
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PK          AllTerritoryCodeNoWorldwide = 183
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PL          AllTerritoryCodeNoWorldwide = 184
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PM          AllTerritoryCodeNoWorldwide = 185
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PN          AllTerritoryCodeNoWorldwide = 186
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PR          AllTerritoryCodeNoWorldwide = 187
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PS          AllTerritoryCodeNoWorldwide = 188
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PT          AllTerritoryCodeNoWorldwide = 189
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PW          AllTerritoryCodeNoWorldwide = 190
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PY          AllTerritoryCodeNoWorldwide = 191
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_QA          AllTerritoryCodeNoWorldwide = 192
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_RE          AllTerritoryCodeNoWorldwide = 193
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_RO          AllTerritoryCodeNoWorldwide = 194
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_RS          AllTerritoryCodeNoWorldwide = 195
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_RU          AllTerritoryCodeNoWorldwide = 196
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_RW          AllTerritoryCodeNoWorldwide = 197
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SA          AllTerritoryCodeNoWorldwide = 198
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SB          AllTerritoryCodeNoWorldwide = 199
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SC          AllTerritoryCodeNoWorldwide = 200
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SD          AllTerritoryCodeNoWorldwide = 201
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SE          AllTerritoryCodeNoWorldwide = 202
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SG          AllTerritoryCodeNoWorldwide = 203
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SH          AllTerritoryCodeNoWorldwide = 204
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SI          AllTerritoryCodeNoWorldwide = 205
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SJ          AllTerritoryCodeNoWorldwide = 206
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SK          AllTerritoryCodeNoWorldwide = 207
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SL          AllTerritoryCodeNoWorldwide = 208
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SM          AllTerritoryCodeNoWorldwide = 209
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SN          AllTerritoryCodeNoWorldwide = 210
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SO          AllTerritoryCodeNoWorldwide = 211
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SR          AllTerritoryCodeNoWorldwide = 212
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SS          AllTerritoryCodeNoWorldwide = 213
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ST          AllTerritoryCodeNoWorldwide = 214
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SV          AllTerritoryCodeNoWorldwide = 215
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SX          AllTerritoryCodeNoWorldwide = 216
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SY          AllTerritoryCodeNoWorldwide = 217
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SZ          AllTerritoryCodeNoWorldwide = 218
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TC          AllTerritoryCodeNoWorldwide = 219
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TD          AllTerritoryCodeNoWorldwide = 220
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TF          AllTerritoryCodeNoWorldwide = 221
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TG          AllTerritoryCodeNoWorldwide = 222
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TH          AllTerritoryCodeNoWorldwide = 223
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TJ          AllTerritoryCodeNoWorldwide = 224
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TK          AllTerritoryCodeNoWorldwide = 225
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TL          AllTerritoryCodeNoWorldwide = 226
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TM          AllTerritoryCodeNoWorldwide = 227
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TN          AllTerritoryCodeNoWorldwide = 228
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TO          AllTerritoryCodeNoWorldwide = 229
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TR          AllTerritoryCodeNoWorldwide = 230
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TT          AllTerritoryCodeNoWorldwide = 231
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TV          AllTerritoryCodeNoWorldwide = 232
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TW          AllTerritoryCodeNoWorldwide = 233
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TZ          AllTerritoryCodeNoWorldwide = 234
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_UA          AllTerritoryCodeNoWorldwide = 235
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_UG          AllTerritoryCodeNoWorldwide = 236
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_UM          AllTerritoryCodeNoWorldwide = 237
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_US          AllTerritoryCodeNoWorldwide = 238
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_UY          AllTerritoryCodeNoWorldwide = 239
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_UZ          AllTerritoryCodeNoWorldwide = 240
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_VA          AllTerritoryCodeNoWorldwide = 241
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_VC          AllTerritoryCodeNoWorldwide = 242
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_VE          AllTerritoryCodeNoWorldwide = 243
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_VG          AllTerritoryCodeNoWorldwide = 244
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_VI          AllTerritoryCodeNoWorldwide = 245
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_VN          AllTerritoryCodeNoWorldwide = 246
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_VU          AllTerritoryCodeNoWorldwide = 247
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_WF          AllTerritoryCodeNoWorldwide = 248
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_WS          AllTerritoryCodeNoWorldwide = 249
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_YE          AllTerritoryCodeNoWorldwide = 250
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_YT          AllTerritoryCodeNoWorldwide = 251
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ZA          AllTerritoryCodeNoWorldwide = 252
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ZM          AllTerritoryCodeNoWorldwide = 253
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ZW          AllTerritoryCodeNoWorldwide = 254
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_4         AllTerritoryCodeNoWorldwide = 255
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_8         AllTerritoryCodeNoWorldwide = 256
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_12        AllTerritoryCodeNoWorldwide = 257
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_20        AllTerritoryCodeNoWorldwide = 258
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_24        AllTerritoryCodeNoWorldwide = 259
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_28        AllTerritoryCodeNoWorldwide = 260
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_31        AllTerritoryCodeNoWorldwide = 261
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_32        AllTerritoryCodeNoWorldwide = 262
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_36        AllTerritoryCodeNoWorldwide = 263
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_40        AllTerritoryCodeNoWorldwide = 264
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_44        AllTerritoryCodeNoWorldwide = 265
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_48        AllTerritoryCodeNoWorldwide = 266
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_50        AllTerritoryCodeNoWorldwide = 267
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_51        AllTerritoryCodeNoWorldwide = 268
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_52        AllTerritoryCodeNoWorldwide = 269
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_56        AllTerritoryCodeNoWorldwide = 270
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_64        AllTerritoryCodeNoWorldwide = 271
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_68        AllTerritoryCodeNoWorldwide = 272
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_70        AllTerritoryCodeNoWorldwide = 273
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_72        AllTerritoryCodeNoWorldwide = 274
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_76        AllTerritoryCodeNoWorldwide = 275
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_84        AllTerritoryCodeNoWorldwide = 276
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_90        AllTerritoryCodeNoWorldwide = 277
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_96        AllTerritoryCodeNoWorldwide = 278
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_100       AllTerritoryCodeNoWorldwide = 279
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_104       AllTerritoryCodeNoWorldwide = 280
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_108       AllTerritoryCodeNoWorldwide = 281
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_112       AllTerritoryCodeNoWorldwide = 282
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_116       AllTerritoryCodeNoWorldwide = 283
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_120       AllTerritoryCodeNoWorldwide = 284
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_124       AllTerritoryCodeNoWorldwide = 285
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_132       AllTerritoryCodeNoWorldwide = 286
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_140       AllTerritoryCodeNoWorldwide = 287
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_144       AllTerritoryCodeNoWorldwide = 288
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_148       AllTerritoryCodeNoWorldwide = 289
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_152       AllTerritoryCodeNoWorldwide = 290
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_156       AllTerritoryCodeNoWorldwide = 291
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_158       AllTerritoryCodeNoWorldwide = 292
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_170       AllTerritoryCodeNoWorldwide = 293
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_174       AllTerritoryCodeNoWorldwide = 294
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_178       AllTerritoryCodeNoWorldwide = 295
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_180       AllTerritoryCodeNoWorldwide = 296
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_188       AllTerritoryCodeNoWorldwide = 297
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_191       AllTerritoryCodeNoWorldwide = 298
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_192       AllTerritoryCodeNoWorldwide = 299
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_196       AllTerritoryCodeNoWorldwide = 300
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_200       AllTerritoryCodeNoWorldwide = 301
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_203       AllTerritoryCodeNoWorldwide = 302
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_204       AllTerritoryCodeNoWorldwide = 303
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_208       AllTerritoryCodeNoWorldwide = 304
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_212       AllTerritoryCodeNoWorldwide = 305
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_214       AllTerritoryCodeNoWorldwide = 306
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_218       AllTerritoryCodeNoWorldwide = 307
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_222       AllTerritoryCodeNoWorldwide = 308
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_226       AllTerritoryCodeNoWorldwide = 309
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_230       AllTerritoryCodeNoWorldwide = 310
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_231       AllTerritoryCodeNoWorldwide = 311
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_232       AllTerritoryCodeNoWorldwide = 312
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_233       AllTerritoryCodeNoWorldwide = 313
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_242       AllTerritoryCodeNoWorldwide = 314
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_246       AllTerritoryCodeNoWorldwide = 315
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_250       AllTerritoryCodeNoWorldwide = 316
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_258       AllTerritoryCodeNoWorldwide = 317
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_262       AllTerritoryCodeNoWorldwide = 318
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_266       AllTerritoryCodeNoWorldwide = 319
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_268       AllTerritoryCodeNoWorldwide = 320
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_270       AllTerritoryCodeNoWorldwide = 321
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_276       AllTerritoryCodeNoWorldwide = 322
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_278       AllTerritoryCodeNoWorldwide = 323
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_280       AllTerritoryCodeNoWorldwide = 324
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_288       AllTerritoryCodeNoWorldwide = 325
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_296       AllTerritoryCodeNoWorldwide = 326
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_300       AllTerritoryCodeNoWorldwide = 327
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_308       AllTerritoryCodeNoWorldwide = 328
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_320       AllTerritoryCodeNoWorldwide = 329
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_324       AllTerritoryCodeNoWorldwide = 330
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_328       AllTerritoryCodeNoWorldwide = 331
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_332       AllTerritoryCodeNoWorldwide = 332
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_336       AllTerritoryCodeNoWorldwide = 333
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_340       AllTerritoryCodeNoWorldwide = 334
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_344       AllTerritoryCodeNoWorldwide = 335
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_348       AllTerritoryCodeNoWorldwide = 336
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_352       AllTerritoryCodeNoWorldwide = 337
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_356       AllTerritoryCodeNoWorldwide = 338
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_360       AllTerritoryCodeNoWorldwide = 339
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_364       AllTerritoryCodeNoWorldwide = 340
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_368       AllTerritoryCodeNoWorldwide = 341
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_372       AllTerritoryCodeNoWorldwide = 342
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_376       AllTerritoryCodeNoWorldwide = 343
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_380       AllTerritoryCodeNoWorldwide = 344
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_384       AllTerritoryCodeNoWorldwide = 345
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_388       AllTerritoryCodeNoWorldwide = 346
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_392       AllTerritoryCodeNoWorldwide = 347
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_398       AllTerritoryCodeNoWorldwide = 348
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_400       AllTerritoryCodeNoWorldwide = 349
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_404       AllTerritoryCodeNoWorldwide = 350
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_408       AllTerritoryCodeNoWorldwide = 351
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_410       AllTerritoryCodeNoWorldwide = 352
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_414       AllTerritoryCodeNoWorldwide = 353
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_417       AllTerritoryCodeNoWorldwide = 354
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_418       AllTerritoryCodeNoWorldwide = 355
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_422       AllTerritoryCodeNoWorldwide = 356
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_426       AllTerritoryCodeNoWorldwide = 357
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_428       AllTerritoryCodeNoWorldwide = 358
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_430       AllTerritoryCodeNoWorldwide = 359
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_434       AllTerritoryCodeNoWorldwide = 360
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_438       AllTerritoryCodeNoWorldwide = 361
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_440       AllTerritoryCodeNoWorldwide = 362
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_442       AllTerritoryCodeNoWorldwide = 363
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_446       AllTerritoryCodeNoWorldwide = 364
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_450       AllTerritoryCodeNoWorldwide = 365
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_454       AllTerritoryCodeNoWorldwide = 366
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_458       AllTerritoryCodeNoWorldwide = 367
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_462       AllTerritoryCodeNoWorldwide = 368
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_466       AllTerritoryCodeNoWorldwide = 369
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_470       AllTerritoryCodeNoWorldwide = 370
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_478       AllTerritoryCodeNoWorldwide = 371
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_480       AllTerritoryCodeNoWorldwide = 372
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_484       AllTerritoryCodeNoWorldwide = 373
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_492       AllTerritoryCodeNoWorldwide = 374
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_496       AllTerritoryCodeNoWorldwide = 375
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_498       AllTerritoryCodeNoWorldwide = 376
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_499       AllTerritoryCodeNoWorldwide = 377
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_504       AllTerritoryCodeNoWorldwide = 378
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_508       AllTerritoryCodeNoWorldwide = 379
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_512       AllTerritoryCodeNoWorldwide = 380
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_516       AllTerritoryCodeNoWorldwide = 381
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_520       AllTerritoryCodeNoWorldwide = 382
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_524       AllTerritoryCodeNoWorldwide = 383
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_528       AllTerritoryCodeNoWorldwide = 384
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_540       AllTerritoryCodeNoWorldwide = 385
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_548       AllTerritoryCodeNoWorldwide = 386
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_554       AllTerritoryCodeNoWorldwide = 387
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_558       AllTerritoryCodeNoWorldwide = 388
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_562       AllTerritoryCodeNoWorldwide = 389
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_566       AllTerritoryCodeNoWorldwide = 390
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_578       AllTerritoryCodeNoWorldwide = 391
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_583       AllTerritoryCodeNoWorldwide = 392
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_584       AllTerritoryCodeNoWorldwide = 393
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_585       AllTerritoryCodeNoWorldwide = 394
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_586       AllTerritoryCodeNoWorldwide = 395
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_591       AllTerritoryCodeNoWorldwide = 396
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_598       AllTerritoryCodeNoWorldwide = 397
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_600       AllTerritoryCodeNoWorldwide = 398
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_604       AllTerritoryCodeNoWorldwide = 399
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_608       AllTerritoryCodeNoWorldwide = 400
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_616       AllTerritoryCodeNoWorldwide = 401
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_620       AllTerritoryCodeNoWorldwide = 402
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_624       AllTerritoryCodeNoWorldwide = 403
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_626       AllTerritoryCodeNoWorldwide = 404
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_630       AllTerritoryCodeNoWorldwide = 405
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_634       AllTerritoryCodeNoWorldwide = 406
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_642       AllTerritoryCodeNoWorldwide = 407
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_643       AllTerritoryCodeNoWorldwide = 408
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_646       AllTerritoryCodeNoWorldwide = 409
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_659       AllTerritoryCodeNoWorldwide = 410
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_662       AllTerritoryCodeNoWorldwide = 411
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_670       AllTerritoryCodeNoWorldwide = 412
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_674       AllTerritoryCodeNoWorldwide = 413
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_678       AllTerritoryCodeNoWorldwide = 414
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_682       AllTerritoryCodeNoWorldwide = 415
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_686       AllTerritoryCodeNoWorldwide = 416
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_688       AllTerritoryCodeNoWorldwide = 417
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_690       AllTerritoryCodeNoWorldwide = 418
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_694       AllTerritoryCodeNoWorldwide = 419
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_702       AllTerritoryCodeNoWorldwide = 420
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_703       AllTerritoryCodeNoWorldwide = 421
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_704       AllTerritoryCodeNoWorldwide = 422
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_705       AllTerritoryCodeNoWorldwide = 423
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_706       AllTerritoryCodeNoWorldwide = 424
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_710       AllTerritoryCodeNoWorldwide = 425
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_716       AllTerritoryCodeNoWorldwide = 426
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_720       AllTerritoryCodeNoWorldwide = 427
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_724       AllTerritoryCodeNoWorldwide = 428
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_728       AllTerritoryCodeNoWorldwide = 429
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_729       AllTerritoryCodeNoWorldwide = 430
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_732       AllTerritoryCodeNoWorldwide = 431
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_736       AllTerritoryCodeNoWorldwide = 432
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_740       AllTerritoryCodeNoWorldwide = 433
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_748       AllTerritoryCodeNoWorldwide = 434
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_752       AllTerritoryCodeNoWorldwide = 435
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_756       AllTerritoryCodeNoWorldwide = 436
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_760       AllTerritoryCodeNoWorldwide = 437
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_762       AllTerritoryCodeNoWorldwide = 438
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_764       AllTerritoryCodeNoWorldwide = 439
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_768       AllTerritoryCodeNoWorldwide = 440
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_776       AllTerritoryCodeNoWorldwide = 441
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_780       AllTerritoryCodeNoWorldwide = 442
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_784       AllTerritoryCodeNoWorldwide = 443
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_788       AllTerritoryCodeNoWorldwide = 444
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_792       AllTerritoryCodeNoWorldwide = 445
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_795       AllTerritoryCodeNoWorldwide = 446
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_798       AllTerritoryCodeNoWorldwide = 447
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_800       AllTerritoryCodeNoWorldwide = 448
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_804       AllTerritoryCodeNoWorldwide = 449
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_807       AllTerritoryCodeNoWorldwide = 450
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_810       AllTerritoryCodeNoWorldwide = 451
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_818       AllTerritoryCodeNoWorldwide = 452
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_826       AllTerritoryCodeNoWorldwide = 453
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_834       AllTerritoryCodeNoWorldwide = 454
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_840       AllTerritoryCodeNoWorldwide = 455
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_854       AllTerritoryCodeNoWorldwide = 456
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_858       AllTerritoryCodeNoWorldwide = 457
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_860       AllTerritoryCodeNoWorldwide = 458
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_862       AllTerritoryCodeNoWorldwide = 459
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_882       AllTerritoryCodeNoWorldwide = 460
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_886       AllTerritoryCodeNoWorldwide = 461
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_887       AllTerritoryCodeNoWorldwide = 462
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_890       AllTerritoryCodeNoWorldwide = 463
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_891       AllTerritoryCodeNoWorldwide = 464
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_894       AllTerritoryCodeNoWorldwide = 465
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2100      AllTerritoryCodeNoWorldwide = 466
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2101      AllTerritoryCodeNoWorldwide = 467
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2102      AllTerritoryCodeNoWorldwide = 468
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2103      AllTerritoryCodeNoWorldwide = 469
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2104      AllTerritoryCodeNoWorldwide = 470
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2105      AllTerritoryCodeNoWorldwide = 471
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2106      AllTerritoryCodeNoWorldwide = 472
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2107      AllTerritoryCodeNoWorldwide = 473
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2108      AllTerritoryCodeNoWorldwide = 474
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2109      AllTerritoryCodeNoWorldwide = 475
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2110      AllTerritoryCodeNoWorldwide = 476
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2111      AllTerritoryCodeNoWorldwide = 477
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2112      AllTerritoryCodeNoWorldwide = 478
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2113      AllTerritoryCodeNoWorldwide = 479
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2114      AllTerritoryCodeNoWorldwide = 480
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2115      AllTerritoryCodeNoWorldwide = 481
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2116      AllTerritoryCodeNoWorldwide = 482
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2117      AllTerritoryCodeNoWorldwide = 483
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2118      AllTerritoryCodeNoWorldwide = 484
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2119      AllTerritoryCodeNoWorldwide = 485
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2120      AllTerritoryCodeNoWorldwide = 486
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2121      AllTerritoryCodeNoWorldwide = 487
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2122      AllTerritoryCodeNoWorldwide = 488
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2123      AllTerritoryCodeNoWorldwide = 489
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2124      AllTerritoryCodeNoWorldwide = 490
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2125      AllTerritoryCodeNoWorldwide = 491
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2126      AllTerritoryCodeNoWorldwide = 492
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2127      AllTerritoryCodeNoWorldwide = 493
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2128      AllTerritoryCodeNoWorldwide = 494
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2129      AllTerritoryCodeNoWorldwide = 495
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2130      AllTerritoryCodeNoWorldwide = 496
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2131      AllTerritoryCodeNoWorldwide = 497
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2132      AllTerritoryCodeNoWorldwide = 498
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2133      AllTerritoryCodeNoWorldwide = 499
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2134      AllTerritoryCodeNoWorldwide = 500
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2136      AllTerritoryCodeNoWorldwide = 501
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_XK          AllTerritoryCodeNoWorldwide = 502
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_AIDJ        AllTerritoryCodeNoWorldwide = 503
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ANHH        AllTerritoryCodeNoWorldwide = 504
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BQAQ        AllTerritoryCodeNoWorldwide = 505
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BUMM        AllTerritoryCodeNoWorldwide = 506
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_BYAA        AllTerritoryCodeNoWorldwide = 507
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CSHH        AllTerritoryCodeNoWorldwide = 508
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CSXX        AllTerritoryCodeNoWorldwide = 509
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_CTKI        AllTerritoryCodeNoWorldwide = 510
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_DDDE        AllTerritoryCodeNoWorldwide = 511
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_DYBJ        AllTerritoryCodeNoWorldwide = 512
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_FQHH        AllTerritoryCodeNoWorldwide = 513
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_FXFR        AllTerritoryCodeNoWorldwide = 514
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_GEHH        AllTerritoryCodeNoWorldwide = 515
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_HVBF        AllTerritoryCodeNoWorldwide = 516
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_JTUM        AllTerritoryCodeNoWorldwide = 517
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_MIUM        AllTerritoryCodeNoWorldwide = 518
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NHVU        AllTerritoryCodeNoWorldwide = 519
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NQAQ        AllTerritoryCodeNoWorldwide = 520
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_NTHH        AllTerritoryCodeNoWorldwide = 521
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PCHH        AllTerritoryCodeNoWorldwide = 522
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PUUM        AllTerritoryCodeNoWorldwide = 523
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_PZPA        AllTerritoryCodeNoWorldwide = 524
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_RHZW        AllTerritoryCodeNoWorldwide = 525
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SKIN        AllTerritoryCodeNoWorldwide = 526
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_SUHH        AllTerritoryCodeNoWorldwide = 527
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_TPTL        AllTerritoryCodeNoWorldwide = 528
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_VDVN        AllTerritoryCodeNoWorldwide = 529
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_WKUM        AllTerritoryCodeNoWorldwide = 530
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_YDYE        AllTerritoryCodeNoWorldwide = 531
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_YUCS        AllTerritoryCodeNoWorldwide = 532
	AllTerritoryCodeNoWorldwide_ALL_TERRITORY_CODE_NO_WORLDWIDE_ZRCD        AllTerritoryCodeNoWorldwide = 533
)

// Enum value maps for AllTerritoryCodeNoWorldwide.
var (
	AllTerritoryCodeNoWorldwide_name = map[int32]string{
		0:   "ALL_TERRITORY_CODE_NO_WORLDWIDE_UNSPECIFIED",
		1:   "ALL_TERRITORY_CODE_NO_WORLDWIDE_AD",
		2:   "ALL_TERRITORY_CODE_NO_WORLDWIDE_AE",
		3:   "ALL_TERRITORY_CODE_NO_WORLDWIDE_AF",
		4:   "ALL_TERRITORY_CODE_NO_WORLDWIDE_AG",
		5:   "ALL_TERRITORY_CODE_NO_WORLDWIDE_AI",
		6:   "ALL_TERRITORY_CODE_NO_WORLDWIDE_AL",
		7:   "ALL_TERRITORY_CODE_NO_WORLDWIDE_AM",
		8:   "ALL_TERRITORY_CODE_NO_WORLDWIDE_AN",
		9:   "ALL_TERRITORY_CODE_NO_WORLDWIDE_AO",
		10:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_AQ",
		11:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_AR",
		12:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_AS",
		13:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_AT",
		14:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_AU",
		15:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_AW",
		16:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_AX",
		17:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_AZ",
		18:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BA",
		19:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BB",
		20:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BD",
		21:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BE",
		22:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BF",
		23:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BG",
		24:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BH",
		25:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BI",
		26:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BJ",
		27:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BL",
		28:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BM",
		29:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BN",
		30:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BO",
		31:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BQ",
		32:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BR",
		33:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BS",
		34:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BT",
		35:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BV",
		36:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BW",
		37:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BY",
		38:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_BZ",
		39:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CA",
		40:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CC",
		41:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CD",
		42:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CF",
		43:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CG",
		44:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CH",
		45:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CI",
		46:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CK",
		47:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CL",
		48:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CM",
		49:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CN",
		50:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CO",
		51:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CR",
		52:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CS",
		53:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CU",
		54:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CV",
		55:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CW",
		56:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CX",
		57:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CY",
		58:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_CZ",
		59:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_DE",
		60:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_DJ",
		61:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_DK",
		62:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_DM",
		63:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_DO",
		64:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_DZ",
		65:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_EC",
		66:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_EE",
		67:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_EG",
		68:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_EH",
		69:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_ER",
		70:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_ES",
		71:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_CE",
		72:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_CN",
		73:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_ML",
		74:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_ET",
		75:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_FI",
		76:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_FJ",
		77:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_FK",
		78:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_FM",
		79:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_FO",
		80:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_FR",
		81:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GA",
		82:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GB",
		83:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GD",
		84:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GE",
		85:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GF",
		86:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GG",
		87:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GH",
		88:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GI",
		89:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GL",
		90:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GM",
		91:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GN",
		92:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GP",
		93:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GQ",
		94:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GR",
		95:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GS",
		96:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GT",
		97:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GU",
		98:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GW",
		99:  "ALL_TERRITORY_CODE_NO_WORLDWIDE_GY",
		100: "ALL_TERRITORY_CODE_NO_WORLDWIDE_HK",
		101: "ALL_TERRITORY_CODE_NO_WORLDWIDE_HM",
		102: "ALL_TERRITORY_CODE_NO_WORLDWIDE_HN",
		103: "ALL_TERRITORY_CODE_NO_WORLDWIDE_HR",
		104: "ALL_TERRITORY_CODE_NO_WORLDWIDE_HT",
		105: "ALL_TERRITORY_CODE_NO_WORLDWIDE_HU",
		106: "ALL_TERRITORY_CODE_NO_WORLDWIDE_ID",
		107: "ALL_TERRITORY_CODE_NO_WORLDWIDE_IE",
		108: "ALL_TERRITORY_CODE_NO_WORLDWIDE_IL",
		109: "ALL_TERRITORY_CODE_NO_WORLDWIDE_IM",
		110: "ALL_TERRITORY_CODE_NO_WORLDWIDE_IN",
		111: "ALL_TERRITORY_CODE_NO_WORLDWIDE_IO",
		112: "ALL_TERRITORY_CODE_NO_WORLDWIDE_IQ",
		113: "ALL_TERRITORY_CODE_NO_WORLDWIDE_IR",
		114: "ALL_TERRITORY_CODE_NO_WORLDWIDE_IS",
		115: "ALL_TERRITORY_CODE_NO_WORLDWIDE_IT",
		116: "ALL_TERRITORY_CODE_NO_WORLDWIDE_JE",
		117: "ALL_TERRITORY_CODE_NO_WORLDWIDE_JM",
		118: "ALL_TERRITORY_CODE_NO_WORLDWIDE_JO",
		119: "ALL_TERRITORY_CODE_NO_WORLDWIDE_JP",
		120: "ALL_TERRITORY_CODE_NO_WORLDWIDE_KE",
		121: "ALL_TERRITORY_CODE_NO_WORLDWIDE_KG",
		122: "ALL_TERRITORY_CODE_NO_WORLDWIDE_KH",
		123: "ALL_TERRITORY_CODE_NO_WORLDWIDE_KI",
		124: "ALL_TERRITORY_CODE_NO_WORLDWIDE_KM",
		125: "ALL_TERRITORY_CODE_NO_WORLDWIDE_KN",
		126: "ALL_TERRITORY_CODE_NO_WORLDWIDE_KP",
		127: "ALL_TERRITORY_CODE_NO_WORLDWIDE_KR",
		128: "ALL_TERRITORY_CODE_NO_WORLDWIDE_KW",
		129: "ALL_TERRITORY_CODE_NO_WORLDWIDE_KY",
		130: "ALL_TERRITORY_CODE_NO_WORLDWIDE_KZ",
		131: "ALL_TERRITORY_CODE_NO_WORLDWIDE_LA",
		132: "ALL_TERRITORY_CODE_NO_WORLDWIDE_LB",
		133: "ALL_TERRITORY_CODE_NO_WORLDWIDE_LC",
		134: "ALL_TERRITORY_CODE_NO_WORLDWIDE_LI",
		135: "ALL_TERRITORY_CODE_NO_WORLDWIDE_LK",
		136: "ALL_TERRITORY_CODE_NO_WORLDWIDE_LR",
		137: "ALL_TERRITORY_CODE_NO_WORLDWIDE_LS",
		138: "ALL_TERRITORY_CODE_NO_WORLDWIDE_LT",
		139: "ALL_TERRITORY_CODE_NO_WORLDWIDE_LU",
		140: "ALL_TERRITORY_CODE_NO_WORLDWIDE_LV",
		141: "ALL_TERRITORY_CODE_NO_WORLDWIDE_LY",
		142: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MA",
		143: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MC",
		144: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MD",
		145: "ALL_TERRITORY_CODE_NO_WORLDWIDE_ME",
		146: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MF",
		147: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MG",
		148: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MH",
		149: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MK",
		150: "ALL_TERRITORY_CODE_NO_WORLDWIDE_ML",
		151: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MM",
		152: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MN",
		153: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MO",
		154: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MP",
		155: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MQ",
		156: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MR",
		157: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MS",
		158: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MT",
		159: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MU",
		160: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MV",
		161: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MW",
		162: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MX",
		163: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MY",
		164: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MZ",
		165: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NA",
		166: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NC",
		167: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NE",
		168: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NF",
		169: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NG",
		170: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NI",
		171: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NL",
		172: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NO",
		173: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NP",
		174: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NR",
		175: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NU",
		176: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NZ",
		177: "ALL_TERRITORY_CODE_NO_WORLDWIDE_OM",
		178: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PA",
		179: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PE",
		180: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PF",
		181: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PG",
		182: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PH",
		183: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PK",
		184: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PL",
		185: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PM",
		186: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PN",
		187: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PR",
		188: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PS",
		189: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PT",
		190: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PW",
		191: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PY",
		192: "ALL_TERRITORY_CODE_NO_WORLDWIDE_QA",
		193: "ALL_TERRITORY_CODE_NO_WORLDWIDE_RE",
		194: "ALL_TERRITORY_CODE_NO_WORLDWIDE_RO",
		195: "ALL_TERRITORY_CODE_NO_WORLDWIDE_RS",
		196: "ALL_TERRITORY_CODE_NO_WORLDWIDE_RU",
		197: "ALL_TERRITORY_CODE_NO_WORLDWIDE_RW",
		198: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SA",
		199: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SB",
		200: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SC",
		201: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SD",
		202: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SE",
		203: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SG",
		204: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SH",
		205: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SI",
		206: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SJ",
		207: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SK",
		208: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SL",
		209: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SM",
		210: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SN",
		211: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SO",
		212: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SR",
		213: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SS",
		214: "ALL_TERRITORY_CODE_NO_WORLDWIDE_ST",
		215: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SV",
		216: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SX",
		217: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SY",
		218: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SZ",
		219: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TC",
		220: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TD",
		221: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TF",
		222: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TG",
		223: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TH",
		224: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TJ",
		225: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TK",
		226: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TL",
		227: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TM",
		228: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TN",
		229: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TO",
		230: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TR",
		231: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TT",
		232: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TV",
		233: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TW",
		234: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TZ",
		235: "ALL_TERRITORY_CODE_NO_WORLDWIDE_UA",
		236: "ALL_TERRITORY_CODE_NO_WORLDWIDE_UG",
		237: "ALL_TERRITORY_CODE_NO_WORLDWIDE_UM",
		238: "ALL_TERRITORY_CODE_NO_WORLDWIDE_US",
		239: "ALL_TERRITORY_CODE_NO_WORLDWIDE_UY",
		240: "ALL_TERRITORY_CODE_NO_WORLDWIDE_UZ",
		241: "ALL_TERRITORY_CODE_NO_WORLDWIDE_VA",
		242: "ALL_TERRITORY_CODE_NO_WORLDWIDE_VC",
		243: "ALL_TERRITORY_CODE_NO_WORLDWIDE_VE",
		244: "ALL_TERRITORY_CODE_NO_WORLDWIDE_VG",
		245: "ALL_TERRITORY_CODE_NO_WORLDWIDE_VI",
		246: "ALL_TERRITORY_CODE_NO_WORLDWIDE_VN",
		247: "ALL_TERRITORY_CODE_NO_WORLDWIDE_VU",
		248: "ALL_TERRITORY_CODE_NO_WORLDWIDE_WF",
		249: "ALL_TERRITORY_CODE_NO_WORLDWIDE_WS",
		250: "ALL_TERRITORY_CODE_NO_WORLDWIDE_YE",
		251: "ALL_TERRITORY_CODE_NO_WORLDWIDE_YT",
		252: "ALL_TERRITORY_CODE_NO_WORLDWIDE_ZA",
		253: "ALL_TERRITORY_CODE_NO_WORLDWIDE_ZM",
		254: "ALL_TERRITORY_CODE_NO_WORLDWIDE_ZW",
		255: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_4",
		256: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_8",
		257: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_12",
		258: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_20",
		259: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_24",
		260: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_28",
		261: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_31",
		262: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_32",
		263: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_36",
		264: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_40",
		265: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_44",
		266: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_48",
		267: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_50",
		268: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_51",
		269: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_52",
		270: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_56",
		271: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_64",
		272: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_68",
		273: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_70",
		274: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_72",
		275: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_76",
		276: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_84",
		277: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_90",
		278: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_96",
		279: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_100",
		280: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_104",
		281: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_108",
		282: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_112",
		283: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_116",
		284: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_120",
		285: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_124",
		286: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_132",
		287: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_140",
		288: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_144",
		289: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_148",
		290: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_152",
		291: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_156",
		292: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_158",
		293: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_170",
		294: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_174",
		295: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_178",
		296: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_180",
		297: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_188",
		298: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_191",
		299: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_192",
		300: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_196",
		301: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_200",
		302: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_203",
		303: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_204",
		304: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_208",
		305: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_212",
		306: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_214",
		307: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_218",
		308: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_222",
		309: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_226",
		310: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_230",
		311: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_231",
		312: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_232",
		313: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_233",
		314: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_242",
		315: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_246",
		316: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_250",
		317: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_258",
		318: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_262",
		319: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_266",
		320: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_268",
		321: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_270",
		322: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_276",
		323: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_278",
		324: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_280",
		325: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_288",
		326: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_296",
		327: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_300",
		328: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_308",
		329: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_320",
		330: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_324",
		331: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_328",
		332: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_332",
		333: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_336",
		334: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_340",
		335: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_344",
		336: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_348",
		337: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_352",
		338: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_356",
		339: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_360",
		340: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_364",
		341: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_368",
		342: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_372",
		343: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_376",
		344: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_380",
		345: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_384",
		346: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_388",
		347: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_392",
		348: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_398",
		349: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_400",
		350: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_404",
		351: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_408",
		352: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_410",
		353: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_414",
		354: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_417",
		355: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_418",
		356: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_422",
		357: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_426",
		358: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_428",
		359: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_430",
		360: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_434",
		361: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_438",
		362: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_440",
		363: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_442",
		364: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_446",
		365: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_450",
		366: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_454",
		367: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_458",
		368: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_462",
		369: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_466",
		370: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_470",
		371: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_478",
		372: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_480",
		373: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_484",
		374: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_492",
		375: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_496",
		376: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_498",
		377: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_499",
		378: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_504",
		379: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_508",
		380: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_512",
		381: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_516",
		382: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_520",
		383: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_524",
		384: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_528",
		385: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_540",
		386: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_548",
		387: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_554",
		388: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_558",
		389: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_562",
		390: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_566",
		391: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_578",
		392: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_583",
		393: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_584",
		394: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_585",
		395: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_586",
		396: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_591",
		397: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_598",
		398: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_600",
		399: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_604",
		400: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_608",
		401: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_616",
		402: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_620",
		403: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_624",
		404: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_626",
		405: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_630",
		406: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_634",
		407: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_642",
		408: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_643",
		409: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_646",
		410: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_659",
		411: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_662",
		412: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_670",
		413: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_674",
		414: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_678",
		415: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_682",
		416: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_686",
		417: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_688",
		418: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_690",
		419: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_694",
		420: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_702",
		421: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_703",
		422: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_704",
		423: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_705",
		424: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_706",
		425: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_710",
		426: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_716",
		427: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_720",
		428: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_724",
		429: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_728",
		430: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_729",
		431: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_732",
		432: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_736",
		433: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_740",
		434: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_748",
		435: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_752",
		436: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_756",
		437: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_760",
		438: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_762",
		439: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_764",
		440: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_768",
		441: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_776",
		442: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_780",
		443: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_784",
		444: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_788",
		445: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_792",
		446: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_795",
		447: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_798",
		448: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_800",
		449: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_804",
		450: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_807",
		451: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_810",
		452: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_818",
		453: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_826",
		454: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_834",
		455: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_840",
		456: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_854",
		457: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_858",
		458: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_860",
		459: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_862",
		460: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_882",
		461: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_886",
		462: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_887",
		463: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_890",
		464: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_891",
		465: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_894",
		466: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2100",
		467: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2101",
		468: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2102",
		469: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2103",
		470: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2104",
		471: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2105",
		472: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2106",
		473: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2107",
		474: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2108",
		475: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2109",
		476: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2110",
		477: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2111",
		478: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2112",
		479: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2113",
		480: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2114",
		481: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2115",
		482: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2116",
		483: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2117",
		484: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2118",
		485: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2119",
		486: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2120",
		487: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2121",
		488: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2122",
		489: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2123",
		490: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2124",
		491: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2125",
		492: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2126",
		493: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2127",
		494: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2128",
		495: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2129",
		496: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2130",
		497: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2131",
		498: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2132",
		499: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2133",
		500: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2134",
		501: "ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2136",
		502: "ALL_TERRITORY_CODE_NO_WORLDWIDE_XK",
		503: "ALL_TERRITORY_CODE_NO_WORLDWIDE_AIDJ",
		504: "ALL_TERRITORY_CODE_NO_WORLDWIDE_ANHH",
		505: "ALL_TERRITORY_CODE_NO_WORLDWIDE_BQAQ",
		506: "ALL_TERRITORY_CODE_NO_WORLDWIDE_BUMM",
		507: "ALL_TERRITORY_CODE_NO_WORLDWIDE_BYAA",
		508: "ALL_TERRITORY_CODE_NO_WORLDWIDE_CSHH",
		509: "ALL_TERRITORY_CODE_NO_WORLDWIDE_CSXX",
		510: "ALL_TERRITORY_CODE_NO_WORLDWIDE_CTKI",
		511: "ALL_TERRITORY_CODE_NO_WORLDWIDE_DDDE",
		512: "ALL_TERRITORY_CODE_NO_WORLDWIDE_DYBJ",
		513: "ALL_TERRITORY_CODE_NO_WORLDWIDE_FQHH",
		514: "ALL_TERRITORY_CODE_NO_WORLDWIDE_FXFR",
		515: "ALL_TERRITORY_CODE_NO_WORLDWIDE_GEHH",
		516: "ALL_TERRITORY_CODE_NO_WORLDWIDE_HVBF",
		517: "ALL_TERRITORY_CODE_NO_WORLDWIDE_JTUM",
		518: "ALL_TERRITORY_CODE_NO_WORLDWIDE_MIUM",
		519: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NHVU",
		520: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NQAQ",
		521: "ALL_TERRITORY_CODE_NO_WORLDWIDE_NTHH",
		522: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PCHH",
		523: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PUUM",
		524: "ALL_TERRITORY_CODE_NO_WORLDWIDE_PZPA",
		525: "ALL_TERRITORY_CODE_NO_WORLDWIDE_RHZW",
		526: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SKIN",
		527: "ALL_TERRITORY_CODE_NO_WORLDWIDE_SUHH",
		528: "ALL_TERRITORY_CODE_NO_WORLDWIDE_TPTL",
		529: "ALL_TERRITORY_CODE_NO_WORLDWIDE_VDVN",
		530: "ALL_TERRITORY_CODE_NO_WORLDWIDE_WKUM",
		531: "ALL_TERRITORY_CODE_NO_WORLDWIDE_YDYE",
		532: "ALL_TERRITORY_CODE_NO_WORLDWIDE_YUCS",
		533: "ALL_TERRITORY_CODE_NO_WORLDWIDE_ZRCD",
	}
	AllTerritoryCodeNoWorldwide_value = map[string]int32{
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_UNSPECIFIED": 0,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AD":          1,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AE":          2,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AF":          3,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AG":          4,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AI":          5,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AL":          6,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AM":          7,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AN":          8,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AO":          9,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AQ":          10,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AR":          11,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AS":          12,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AT":          13,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AU":          14,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AW":          15,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AX":          16,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AZ":          17,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BA":          18,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BB":          19,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BD":          20,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BE":          21,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BF":          22,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BG":          23,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BH":          24,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BI":          25,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BJ":          26,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BL":          27,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BM":          28,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BN":          29,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BO":          30,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BQ":          31,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BR":          32,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BS":          33,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BT":          34,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BV":          35,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BW":          36,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BY":          37,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BZ":          38,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CA":          39,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CC":          40,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CD":          41,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CF":          42,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CG":          43,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CH":          44,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CI":          45,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CK":          46,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CL":          47,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CM":          48,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CN":          49,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CO":          50,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CR":          51,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CS":          52,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CU":          53,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CV":          54,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CW":          55,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CX":          56,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CY":          57,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CZ":          58,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_DE":          59,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_DJ":          60,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_DK":          61,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_DM":          62,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_DO":          63,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_DZ":          64,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_EC":          65,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_EE":          66,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_EG":          67,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_EH":          68,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ER":          69,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ES":          70,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_CE":       71,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_CN":       72,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_ML":       73,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ET":          74,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_FI":          75,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_FJ":          76,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_FK":          77,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_FM":          78,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_FO":          79,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_FR":          80,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GA":          81,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GB":          82,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GD":          83,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GE":          84,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GF":          85,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GG":          86,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GH":          87,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GI":          88,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GL":          89,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GM":          90,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GN":          91,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GP":          92,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GQ":          93,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GR":          94,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GS":          95,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GT":          96,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GU":          97,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GW":          98,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GY":          99,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_HK":          100,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_HM":          101,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_HN":          102,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_HR":          103,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_HT":          104,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_HU":          105,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ID":          106,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_IE":          107,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_IL":          108,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_IM":          109,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_IN":          110,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_IO":          111,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_IQ":          112,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_IR":          113,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_IS":          114,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_IT":          115,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_JE":          116,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_JM":          117,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_JO":          118,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_JP":          119,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_KE":          120,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_KG":          121,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_KH":          122,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_KI":          123,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_KM":          124,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_KN":          125,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_KP":          126,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_KR":          127,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_KW":          128,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_KY":          129,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_KZ":          130,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_LA":          131,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_LB":          132,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_LC":          133,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_LI":          134,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_LK":          135,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_LR":          136,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_LS":          137,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_LT":          138,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_LU":          139,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_LV":          140,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_LY":          141,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MA":          142,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MC":          143,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MD":          144,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ME":          145,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MF":          146,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MG":          147,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MH":          148,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MK":          149,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ML":          150,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MM":          151,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MN":          152,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MO":          153,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MP":          154,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MQ":          155,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MR":          156,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MS":          157,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MT":          158,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MU":          159,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MV":          160,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MW":          161,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MX":          162,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MY":          163,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MZ":          164,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NA":          165,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NC":          166,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NE":          167,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NF":          168,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NG":          169,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NI":          170,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NL":          171,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NO":          172,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NP":          173,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NR":          174,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NU":          175,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NZ":          176,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_OM":          177,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PA":          178,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PE":          179,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PF":          180,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PG":          181,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PH":          182,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PK":          183,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PL":          184,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PM":          185,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PN":          186,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PR":          187,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PS":          188,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PT":          189,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PW":          190,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PY":          191,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_QA":          192,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_RE":          193,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_RO":          194,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_RS":          195,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_RU":          196,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_RW":          197,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SA":          198,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SB":          199,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SC":          200,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SD":          201,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SE":          202,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SG":          203,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SH":          204,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SI":          205,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SJ":          206,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SK":          207,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SL":          208,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SM":          209,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SN":          210,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SO":          211,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SR":          212,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SS":          213,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ST":          214,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SV":          215,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SX":          216,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SY":          217,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SZ":          218,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TC":          219,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TD":          220,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TF":          221,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TG":          222,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TH":          223,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TJ":          224,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TK":          225,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TL":          226,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TM":          227,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TN":          228,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TO":          229,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TR":          230,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TT":          231,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TV":          232,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TW":          233,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TZ":          234,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_UA":          235,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_UG":          236,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_UM":          237,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_US":          238,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_UY":          239,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_UZ":          240,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_VA":          241,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_VC":          242,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_VE":          243,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_VG":          244,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_VI":          245,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_VN":          246,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_VU":          247,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_WF":          248,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_WS":          249,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_YE":          250,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_YT":          251,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ZA":          252,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ZM":          253,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ZW":          254,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_4":         255,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_8":         256,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_12":        257,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_20":        258,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_24":        259,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_28":        260,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_31":        261,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_32":        262,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_36":        263,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_40":        264,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_44":        265,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_48":        266,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_50":        267,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_51":        268,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_52":        269,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_56":        270,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_64":        271,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_68":        272,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_70":        273,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_72":        274,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_76":        275,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_84":        276,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_90":        277,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_96":        278,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_100":       279,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_104":       280,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_108":       281,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_112":       282,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_116":       283,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_120":       284,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_124":       285,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_132":       286,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_140":       287,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_144":       288,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_148":       289,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_152":       290,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_156":       291,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_158":       292,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_170":       293,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_174":       294,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_178":       295,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_180":       296,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_188":       297,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_191":       298,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_192":       299,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_196":       300,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_200":       301,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_203":       302,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_204":       303,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_208":       304,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_212":       305,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_214":       306,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_218":       307,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_222":       308,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_226":       309,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_230":       310,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_231":       311,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_232":       312,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_233":       313,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_242":       314,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_246":       315,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_250":       316,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_258":       317,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_262":       318,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_266":       319,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_268":       320,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_270":       321,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_276":       322,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_278":       323,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_280":       324,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_288":       325,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_296":       326,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_300":       327,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_308":       328,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_320":       329,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_324":       330,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_328":       331,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_332":       332,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_336":       333,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_340":       334,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_344":       335,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_348":       336,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_352":       337,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_356":       338,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_360":       339,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_364":       340,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_368":       341,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_372":       342,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_376":       343,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_380":       344,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_384":       345,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_388":       346,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_392":       347,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_398":       348,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_400":       349,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_404":       350,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_408":       351,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_410":       352,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_414":       353,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_417":       354,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_418":       355,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_422":       356,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_426":       357,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_428":       358,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_430":       359,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_434":       360,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_438":       361,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_440":       362,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_442":       363,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_446":       364,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_450":       365,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_454":       366,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_458":       367,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_462":       368,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_466":       369,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_470":       370,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_478":       371,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_480":       372,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_484":       373,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_492":       374,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_496":       375,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_498":       376,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_499":       377,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_504":       378,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_508":       379,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_512":       380,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_516":       381,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_520":       382,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_524":       383,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_528":       384,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_540":       385,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_548":       386,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_554":       387,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_558":       388,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_562":       389,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_566":       390,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_578":       391,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_583":       392,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_584":       393,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_585":       394,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_586":       395,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_591":       396,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_598":       397,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_600":       398,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_604":       399,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_608":       400,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_616":       401,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_620":       402,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_624":       403,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_626":       404,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_630":       405,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_634":       406,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_642":       407,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_643":       408,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_646":       409,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_659":       410,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_662":       411,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_670":       412,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_674":       413,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_678":       414,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_682":       415,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_686":       416,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_688":       417,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_690":       418,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_694":       419,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_702":       420,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_703":       421,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_704":       422,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_705":       423,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_706":       424,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_710":       425,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_716":       426,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_720":       427,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_724":       428,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_728":       429,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_729":       430,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_732":       431,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_736":       432,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_740":       433,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_748":       434,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_752":       435,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_756":       436,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_760":       437,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_762":       438,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_764":       439,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_768":       440,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_776":       441,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_780":       442,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_784":       443,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_788":       444,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_792":       445,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_795":       446,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_798":       447,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_800":       448,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_804":       449,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_807":       450,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_810":       451,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_818":       452,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_826":       453,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_834":       454,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_840":       455,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_854":       456,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_858":       457,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_860":       458,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_862":       459,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_882":       460,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_886":       461,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_887":       462,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_890":       463,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_891":       464,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_894":       465,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2100":      466,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2101":      467,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2102":      468,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2103":      469,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2104":      470,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2105":      471,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2106":      472,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2107":      473,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2108":      474,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2109":      475,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2110":      476,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2111":      477,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2112":      478,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2113":      479,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2114":      480,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2115":      481,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2116":      482,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2117":      483,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2118":      484,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2119":      485,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2120":      486,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2121":      487,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2122":      488,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2123":      489,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2124":      490,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2125":      491,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2126":      492,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2127":      493,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2128":      494,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2129":      495,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2130":      496,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2131":      497,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2132":      498,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2133":      499,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2134":      500,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2136":      501,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_XK":          502,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_AIDJ":        503,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ANHH":        504,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BQAQ":        505,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BUMM":        506,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_BYAA":        507,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CSHH":        508,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CSXX":        509,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_CTKI":        510,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_DDDE":        511,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_DYBJ":        512,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_FQHH":        513,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_FXFR":        514,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_GEHH":        515,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_HVBF":        516,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_JTUM":        517,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_MIUM":        518,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NHVU":        519,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NQAQ":        520,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_NTHH":        521,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PCHH":        522,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PUUM":        523,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_PZPA":        524,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_RHZW":        525,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SKIN":        526,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_SUHH":        527,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_TPTL":        528,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_VDVN":        529,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_WKUM":        530,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_YDYE":        531,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_YUCS":        532,
		"ALL_TERRITORY_CODE_NO_WORLDWIDE_ZRCD":        533,
	}
)

func (x AllTerritoryCodeNoWorldwide) Enum() *AllTerritoryCodeNoWorldwide {
	p := new(AllTerritoryCodeNoWorldwide)
	*p = x
	return p
}

func (x AllTerritoryCodeNoWorldwide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllTerritoryCodeNoWorldwide) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[7].Descriptor()
}

func (AllTerritoryCodeNoWorldwide) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[7]
}

func (x AllTerritoryCodeNoWorldwide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllTerritoryCodeNoWorldwide.Descriptor instead.
func (AllTerritoryCodeNoWorldwide) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{7}
}

type ArAcknowledgementStatus int32

const (
	ArAcknowledgementStatus_AR_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED   ArAcknowledgementStatus = 0
	ArAcknowledgementStatus_AR_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED  ArAcknowledgementStatus = 1
	ArAcknowledgementStatus_AR_ACKNOWLEDGEMENT_STATUS_CONFIRMED     ArAcknowledgementStatus = 2
	ArAcknowledgementStatus_AR_ACKNOWLEDGEMENT_STATUS_NOTSUSPICIOUS ArAcknowledgementStatus = 3
	ArAcknowledgementStatus_AR_ACKNOWLEDGEMENT_STATUS_SUSPICIOUS    ArAcknowledgementStatus = 4
	ArAcknowledgementStatus_AR_ACKNOWLEDGEMENT_STATUS_USERDEFINED   ArAcknowledgementStatus = 5
)

// Enum value maps for ArAcknowledgementStatus.
var (
	ArAcknowledgementStatus_name = map[int32]string{
		0: "AR_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED",
		1: "AR_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED",
		2: "AR_ACKNOWLEDGEMENT_STATUS_CONFIRMED",
		3: "AR_ACKNOWLEDGEMENT_STATUS_NOTSUSPICIOUS",
		4: "AR_ACKNOWLEDGEMENT_STATUS_SUSPICIOUS",
		5: "AR_ACKNOWLEDGEMENT_STATUS_USERDEFINED",
	}
	ArAcknowledgementStatus_value = map[string]int32{
		"AR_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED":   0,
		"AR_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED":  1,
		"AR_ACKNOWLEDGEMENT_STATUS_CONFIRMED":     2,
		"AR_ACKNOWLEDGEMENT_STATUS_NOTSUSPICIOUS": 3,
		"AR_ACKNOWLEDGEMENT_STATUS_SUSPICIOUS":    4,
		"AR_ACKNOWLEDGEMENT_STATUS_USERDEFINED":   5,
	}
)

func (x ArAcknowledgementStatus) Enum() *ArAcknowledgementStatus {
	p := new(ArAcknowledgementStatus)
	*p = x
	return p
}

func (x ArAcknowledgementStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArAcknowledgementStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[8].Descriptor()
}

func (ArAcknowledgementStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[8]
}

func (x ArAcknowledgementStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArAcknowledgementStatus.Descriptor instead.
func (ArAcknowledgementStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{8}
}

type ArActionType int32

const (
	ArActionType_AR_ACTION_TYPE_UNSPECIFIED            ArActionType = 0
	ArActionType_AR_ACTION_TYPE_ACCOUNTDISABLED        ArActionType = 1
	ArActionType_AR_ACTION_TYPE_ACCOUNTREMOVED         ArActionType = 2
	ArActionType_AR_ACTION_TYPE_ANOMALYADJUSTED        ArActionType = 3
	ArActionType_AR_ACTION_TYPE_ANOMALYNOTREPORTED     ArActionType = 4
	ArActionType_AR_ACTION_TYPE_ANOMALYREPORTED        ArActionType = 5
	ArActionType_AR_ACTION_TYPE_CREATIONREMOVED        ArActionType = 6
	ArActionType_AR_ACTION_TYPE_MONITOR                ArActionType = 7
	ArActionType_AR_ACTION_TYPE_MONITORRELATEDCREATION ArActionType = 8
	ArActionType_AR_ACTION_TYPE_PAYMENTMADE            ArActionType = 9
	ArActionType_AR_ACTION_TYPE_PAYMENTWITHHELD        ArActionType = 10
	ArActionType_AR_ACTION_TYPE_USERDEFINED            ArActionType = 11
)

// Enum value maps for ArActionType.
var (
	ArActionType_name = map[int32]string{
		0:  "AR_ACTION_TYPE_UNSPECIFIED",
		1:  "AR_ACTION_TYPE_ACCOUNTDISABLED",
		2:  "AR_ACTION_TYPE_ACCOUNTREMOVED",
		3:  "AR_ACTION_TYPE_ANOMALYADJUSTED",
		4:  "AR_ACTION_TYPE_ANOMALYNOTREPORTED",
		5:  "AR_ACTION_TYPE_ANOMALYREPORTED",
		6:  "AR_ACTION_TYPE_CREATIONREMOVED",
		7:  "AR_ACTION_TYPE_MONITOR",
		8:  "AR_ACTION_TYPE_MONITORRELATEDCREATION",
		9:  "AR_ACTION_TYPE_PAYMENTMADE",
		10: "AR_ACTION_TYPE_PAYMENTWITHHELD",
		11: "AR_ACTION_TYPE_USERDEFINED",
	}
	ArActionType_value = map[string]int32{
		"AR_ACTION_TYPE_UNSPECIFIED":            0,
		"AR_ACTION_TYPE_ACCOUNTDISABLED":        1,
		"AR_ACTION_TYPE_ACCOUNTREMOVED":         2,
		"AR_ACTION_TYPE_ANOMALYADJUSTED":        3,
		"AR_ACTION_TYPE_ANOMALYNOTREPORTED":     4,
		"AR_ACTION_TYPE_ANOMALYREPORTED":        5,
		"AR_ACTION_TYPE_CREATIONREMOVED":        6,
		"AR_ACTION_TYPE_MONITOR":                7,
		"AR_ACTION_TYPE_MONITORRELATEDCREATION": 8,
		"AR_ACTION_TYPE_PAYMENTMADE":            9,
		"AR_ACTION_TYPE_PAYMENTWITHHELD":        10,
		"AR_ACTION_TYPE_USERDEFINED":            11,
	}
)

func (x ArActionType) Enum() *ArActionType {
	p := new(ArActionType)
	*p = x
	return p
}

func (x ArActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[9].Descriptor()
}

func (ArActionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[9]
}

func (x ArActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArActionType.Descriptor instead.
func (ArActionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{9}
}

type ArtistRole int32

const (
	ArtistRole_ARTIST_ROLE_UNSPECIFIED            ArtistRole = 0
	ArtistRole_ARTIST_ROLE_ARTCOPYIST             ArtistRole = 1
	ArtistRole_ARTIST_ROLE_CALLIGRAPHER           ArtistRole = 2
	ArtistRole_ARTIST_ROLE_CARTOGRAPHER           ArtistRole = 3
	ArtistRole_ARTIST_ROLE_CARTOONIST             ArtistRole = 4
	ArtistRole_ARTIST_ROLE_COMPUTERGRAPHICCREATOR ArtistRole = 5
	ArtistRole_ARTIST_ROLE_COMPUTERPROGRAMMER     ArtistRole = 6
	ArtistRole_ARTIST_ROLE_DELINEATOR             ArtistRole = 7
	ArtistRole_ARTIST_ROLE_DESIGNER               ArtistRole = 8
	ArtistRole_ARTIST_ROLE_DRAUGHTSMAN            ArtistRole = 9
	ArtistRole_ARTIST_ROLE_FACSIMILIST            ArtistRole = 10
	ArtistRole_ARTIST_ROLE_GRAPHICARTIST          ArtistRole = 11
	ArtistRole_ARTIST_ROLE_ILLUSTRATOR            ArtistRole = 12
	ArtistRole_ARTIST_ROLE_MUSICCOPYIST           ArtistRole = 13
	ArtistRole_ARTIST_ROLE_NOTSPECIFIED           ArtistRole = 14
	ArtistRole_ARTIST_ROLE_PAINTER                ArtistRole = 15
	ArtistRole_ARTIST_ROLE_PHOTOGRAPHER           ArtistRole = 16
	ArtistRole_ARTIST_ROLE_TYPEDESIGNER           ArtistRole = 17
	ArtistRole_ARTIST_ROLE_UNKNOWN                ArtistRole = 18
	ArtistRole_ARTIST_ROLE_USERDEFINED            ArtistRole = 19
)

// Enum value maps for ArtistRole.
var (
	ArtistRole_name = map[int32]string{
		0:  "ARTIST_ROLE_UNSPECIFIED",
		1:  "ARTIST_ROLE_ARTCOPYIST",
		2:  "ARTIST_ROLE_CALLIGRAPHER",
		3:  "ARTIST_ROLE_CARTOGRAPHER",
		4:  "ARTIST_ROLE_CARTOONIST",
		5:  "ARTIST_ROLE_COMPUTERGRAPHICCREATOR",
		6:  "ARTIST_ROLE_COMPUTERPROGRAMMER",
		7:  "ARTIST_ROLE_DELINEATOR",
		8:  "ARTIST_ROLE_DESIGNER",
		9:  "ARTIST_ROLE_DRAUGHTSMAN",
		10: "ARTIST_ROLE_FACSIMILIST",
		11: "ARTIST_ROLE_GRAPHICARTIST",
		12: "ARTIST_ROLE_ILLUSTRATOR",
		13: "ARTIST_ROLE_MUSICCOPYIST",
		14: "ARTIST_ROLE_NOTSPECIFIED",
		15: "ARTIST_ROLE_PAINTER",
		16: "ARTIST_ROLE_PHOTOGRAPHER",
		17: "ARTIST_ROLE_TYPEDESIGNER",
		18: "ARTIST_ROLE_UNKNOWN",
		19: "ARTIST_ROLE_USERDEFINED",
	}
	ArtistRole_value = map[string]int32{
		"ARTIST_ROLE_UNSPECIFIED":            0,
		"ARTIST_ROLE_ARTCOPYIST":             1,
		"ARTIST_ROLE_CALLIGRAPHER":           2,
		"ARTIST_ROLE_CARTOGRAPHER":           3,
		"ARTIST_ROLE_CARTOONIST":             4,
		"ARTIST_ROLE_COMPUTERGRAPHICCREATOR": 5,
		"ARTIST_ROLE_COMPUTERPROGRAMMER":     6,
		"ARTIST_ROLE_DELINEATOR":             7,
		"ARTIST_ROLE_DESIGNER":               8,
		"ARTIST_ROLE_DRAUGHTSMAN":            9,
		"ARTIST_ROLE_FACSIMILIST":            10,
		"ARTIST_ROLE_GRAPHICARTIST":          11,
		"ARTIST_ROLE_ILLUSTRATOR":            12,
		"ARTIST_ROLE_MUSICCOPYIST":           13,
		"ARTIST_ROLE_NOTSPECIFIED":           14,
		"ARTIST_ROLE_PAINTER":                15,
		"ARTIST_ROLE_PHOTOGRAPHER":           16,
		"ARTIST_ROLE_TYPEDESIGNER":           17,
		"ARTIST_ROLE_UNKNOWN":                18,
		"ARTIST_ROLE_USERDEFINED":            19,
	}
)

func (x ArtistRole) Enum() *ArtistRole {
	p := new(ArtistRole)
	*p = x
	return p
}

func (x ArtistRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtistRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[10].Descriptor()
}

func (ArtistRole) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[10]
}

func (x ArtistRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtistRole.Descriptor instead.
func (ArtistRole) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{10}
}

type ArtistType int32

const (
	ArtistType_ARTIST_TYPE_UNSPECIFIED                ArtistType = 0
	ArtistType_ARTIST_TYPE_ACAPPELLAENSEMBLE          ArtistType = 1
	ArtistType_ARTIST_TYPE_BARBERSHOPENSEMBLE         ArtistType = 2
	ArtistType_ARTIST_TYPE_BIGBAND                    ArtistType = 3
	ArtistType_ARTIST_TYPE_BRASSBAND                  ArtistType = 4
	ArtistType_ARTIST_TYPE_CHAMBERORCHESTRA           ArtistType = 5
	ArtistType_ARTIST_TYPE_COUNTRYGROUP               ArtistType = 6
	ArtistType_ARTIST_TYPE_DUET                       ArtistType = 7
	ArtistType_ARTIST_TYPE_ELECTRONICGROUP            ArtistType = 8
	ArtistType_ARTIST_TYPE_FIFEANDDRUMCORPS           ArtistType = 9
	ArtistType_ARTIST_TYPE_FOLKGROUP                  ArtistType = 10
	ArtistType_ARTIST_TYPE_INSTRUMENTANDACCOMPANIMENT ArtistType = 11
	ArtistType_ARTIST_TYPE_JAZZCOMBO                  ArtistType = 12
	ArtistType_ARTIST_TYPE_LATINGROUP                 ArtistType = 13
	ArtistType_ARTIST_TYPE_MARCHINGBAND               ArtistType = 14
	ArtistType_ARTIST_TYPE_MARIACHIBAND               ArtistType = 15
	ArtistType_ARTIST_TYPE_ORCHESTRA                  ArtistType = 16
	ArtistType_ARTIST_TYPE_PIANOENSEMBLE              ArtistType = 17
	ArtistType_ARTIST_TYPE_PIANOTRIO                  ArtistType = 18
	ArtistType_ARTIST_TYPE_PIANOQUARTET               ArtistType = 19
	ArtistType_ARTIST_TYPE_PIANOQUINTET               ArtistType = 20
	ArtistType_ARTIST_TYPE_PIPEANDDRUMGROUP           ArtistType = 21
	ArtistType_ARTIST_TYPE_POPBAND                    ArtistType = 22
	ArtistType_ARTIST_TYPE_REGGAEBAND                 ArtistType = 23
	ArtistType_ARTIST_TYPE_ROCKBAND                   ArtistType = 24
	ArtistType_ARTIST_TYPE_SOLOINSTRUMENT             ArtistType = 25
	ArtistType_ARTIST_TYPE_SOLOVOICE                  ArtistType = 26
	ArtistType_ARTIST_TYPE_STRINGENSEMBLE             ArtistType = 27
	ArtistType_ARTIST_TYPE_STRINGQUARTET              ArtistType = 28
	ArtistType_ARTIST_TYPE_STRINGQUINTET              ArtistType = 29
	ArtistType_ARTIST_TYPE_TRIO                       ArtistType = 30
	ArtistType_ARTIST_TYPE_USERDEFINED                ArtistType = 31
	ArtistType_ARTIST_TYPE_VOICEANDACCOMPANIMENT      ArtistType = 32
	ArtistType_ARTIST_TYPE_WINDENSEMBLE               ArtistType = 33
)

// Enum value maps for ArtistType.
var (
	ArtistType_name = map[int32]string{
		0:  "ARTIST_TYPE_UNSPECIFIED",
		1:  "ARTIST_TYPE_ACAPPELLAENSEMBLE",
		2:  "ARTIST_TYPE_BARBERSHOPENSEMBLE",
		3:  "ARTIST_TYPE_BIGBAND",
		4:  "ARTIST_TYPE_BRASSBAND",
		5:  "ARTIST_TYPE_CHAMBERORCHESTRA",
		6:  "ARTIST_TYPE_COUNTRYGROUP",
		7:  "ARTIST_TYPE_DUET",
		8:  "ARTIST_TYPE_ELECTRONICGROUP",
		9:  "ARTIST_TYPE_FIFEANDDRUMCORPS",
		10: "ARTIST_TYPE_FOLKGROUP",
		11: "ARTIST_TYPE_INSTRUMENTANDACCOMPANIMENT",
		12: "ARTIST_TYPE_JAZZCOMBO",
		13: "ARTIST_TYPE_LATINGROUP",
		14: "ARTIST_TYPE_MARCHINGBAND",
		15: "ARTIST_TYPE_MARIACHIBAND",
		16: "ARTIST_TYPE_ORCHESTRA",
		17: "ARTIST_TYPE_PIANOENSEMBLE",
		18: "ARTIST_TYPE_PIANOTRIO",
		19: "ARTIST_TYPE_PIANOQUARTET",
		20: "ARTIST_TYPE_PIANOQUINTET",
		21: "ARTIST_TYPE_PIPEANDDRUMGROUP",
		22: "ARTIST_TYPE_POPBAND",
		23: "ARTIST_TYPE_REGGAEBAND",
		24: "ARTIST_TYPE_ROCKBAND",
		25: "ARTIST_TYPE_SOLOINSTRUMENT",
		26: "ARTIST_TYPE_SOLOVOICE",
		27: "ARTIST_TYPE_STRINGENSEMBLE",
		28: "ARTIST_TYPE_STRINGQUARTET",
		29: "ARTIST_TYPE_STRINGQUINTET",
		30: "ARTIST_TYPE_TRIO",
		31: "ARTIST_TYPE_USERDEFINED",
		32: "ARTIST_TYPE_VOICEANDACCOMPANIMENT",
		33: "ARTIST_TYPE_WINDENSEMBLE",
	}
	ArtistType_value = map[string]int32{
		"ARTIST_TYPE_UNSPECIFIED":                0,
		"ARTIST_TYPE_ACAPPELLAENSEMBLE":          1,
		"ARTIST_TYPE_BARBERSHOPENSEMBLE":         2,
		"ARTIST_TYPE_BIGBAND":                    3,
		"ARTIST_TYPE_BRASSBAND":                  4,
		"ARTIST_TYPE_CHAMBERORCHESTRA":           5,
		"ARTIST_TYPE_COUNTRYGROUP":               6,
		"ARTIST_TYPE_DUET":                       7,
		"ARTIST_TYPE_ELECTRONICGROUP":            8,
		"ARTIST_TYPE_FIFEANDDRUMCORPS":           9,
		"ARTIST_TYPE_FOLKGROUP":                  10,
		"ARTIST_TYPE_INSTRUMENTANDACCOMPANIMENT": 11,
		"ARTIST_TYPE_JAZZCOMBO":                  12,
		"ARTIST_TYPE_LATINGROUP":                 13,
		"ARTIST_TYPE_MARCHINGBAND":               14,
		"ARTIST_TYPE_MARIACHIBAND":               15,
		"ARTIST_TYPE_ORCHESTRA":                  16,
		"ARTIST_TYPE_PIANOENSEMBLE":              17,
		"ARTIST_TYPE_PIANOTRIO":                  18,
		"ARTIST_TYPE_PIANOQUARTET":               19,
		"ARTIST_TYPE_PIANOQUINTET":               20,
		"ARTIST_TYPE_PIPEANDDRUMGROUP":           21,
		"ARTIST_TYPE_POPBAND":                    22,
		"ARTIST_TYPE_REGGAEBAND":                 23,
		"ARTIST_TYPE_ROCKBAND":                   24,
		"ARTIST_TYPE_SOLOINSTRUMENT":             25,
		"ARTIST_TYPE_SOLOVOICE":                  26,
		"ARTIST_TYPE_STRINGENSEMBLE":             27,
		"ARTIST_TYPE_STRINGQUARTET":              28,
		"ARTIST_TYPE_STRINGQUINTET":              29,
		"ARTIST_TYPE_TRIO":                       30,
		"ARTIST_TYPE_USERDEFINED":                31,
		"ARTIST_TYPE_VOICEANDACCOMPANIMENT":      32,
		"ARTIST_TYPE_WINDENSEMBLE":               33,
	}
)

func (x ArtistType) Enum() *ArtistType {
	p := new(ArtistType)
	*p = x
	return p
}

func (x ArtistType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtistType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[11].Descriptor()
}

func (ArtistType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[11]
}

func (x ArtistType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtistType.Descriptor instead.
func (ArtistType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{11}
}

type AspectRatioType int32

const (
	AspectRatioType_ASPECT_RATIO_TYPE_UNSPECIFIED AspectRatioType = 0
	AspectRatioType_ASPECT_RATIO_TYPE_DAR         AspectRatioType = 1
	AspectRatioType_ASPECT_RATIO_TYPE_PAR         AspectRatioType = 2
	AspectRatioType_ASPECT_RATIO_TYPE_SAR         AspectRatioType = 3
)

// Enum value maps for AspectRatioType.
var (
	AspectRatioType_name = map[int32]string{
		0: "ASPECT_RATIO_TYPE_UNSPECIFIED",
		1: "ASPECT_RATIO_TYPE_DAR",
		2: "ASPECT_RATIO_TYPE_PAR",
		3: "ASPECT_RATIO_TYPE_SAR",
	}
	AspectRatioType_value = map[string]int32{
		"ASPECT_RATIO_TYPE_UNSPECIFIED": 0,
		"ASPECT_RATIO_TYPE_DAR":         1,
		"ASPECT_RATIO_TYPE_PAR":         2,
		"ASPECT_RATIO_TYPE_SAR":         3,
	}
)

func (x AspectRatioType) Enum() *AspectRatioType {
	p := new(AspectRatioType)
	*p = x
	return p
}

func (x AspectRatioType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AspectRatioType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[12].Descriptor()
}

func (AspectRatioType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[12]
}

func (x AspectRatioType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AspectRatioType.Descriptor instead.
func (AspectRatioType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{12}
}

type AsserterType int32

const (
	AsserterType_ASSERTER_TYPE_UNSPECIFIED                         AsserterType = 0
	AsserterType_ASSERTER_TYPE_COLLECTIONSOCIETY                   AsserterType = 1
	AsserterType_ASSERTER_TYPE_INTERESTEDPUBLISHER                 AsserterType = 2
	AsserterType_ASSERTER_TYPE_MUSICLICENSINGCOMPANY               AsserterType = 3
	AsserterType_ASSERTER_TYPE_PUBLISHER                           AsserterType = 4
	AsserterType_ASSERTER_TYPE_RECORDCOMPANYWITHINTERESTINRESOURCE AsserterType = 5
	AsserterType_ASSERTER_TYPE_THIRDPARTY                          AsserterType = 6
)

// Enum value maps for AsserterType.
var (
	AsserterType_name = map[int32]string{
		0: "ASSERTER_TYPE_UNSPECIFIED",
		1: "ASSERTER_TYPE_COLLECTIONSOCIETY",
		2: "ASSERTER_TYPE_INTERESTEDPUBLISHER",
		3: "ASSERTER_TYPE_MUSICLICENSINGCOMPANY",
		4: "ASSERTER_TYPE_PUBLISHER",
		5: "ASSERTER_TYPE_RECORDCOMPANYWITHINTERESTINRESOURCE",
		6: "ASSERTER_TYPE_THIRDPARTY",
	}
	AsserterType_value = map[string]int32{
		"ASSERTER_TYPE_UNSPECIFIED":                         0,
		"ASSERTER_TYPE_COLLECTIONSOCIETY":                   1,
		"ASSERTER_TYPE_INTERESTEDPUBLISHER":                 2,
		"ASSERTER_TYPE_MUSICLICENSINGCOMPANY":               3,
		"ASSERTER_TYPE_PUBLISHER":                           4,
		"ASSERTER_TYPE_RECORDCOMPANYWITHINTERESTINRESOURCE": 5,
		"ASSERTER_TYPE_THIRDPARTY":                          6,
	}
)

func (x AsserterType) Enum() *AsserterType {
	p := new(AsserterType)
	*p = x
	return p
}

func (x AsserterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AsserterType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[13].Descriptor()
}

func (AsserterType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[13]
}

func (x AsserterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AsserterType.Descriptor instead.
func (AsserterType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{13}
}

type AssertionStatus int32

const (
	AssertionStatus_ASSERTION_STATUS_UNSPECIFIED AssertionStatus = 0
	AssertionStatus_ASSERTION_STATUS_VERIFIED    AssertionStatus = 1
)

// Enum value maps for AssertionStatus.
var (
	AssertionStatus_name = map[int32]string{
		0: "ASSERTION_STATUS_UNSPECIFIED",
		1: "ASSERTION_STATUS_VERIFIED",
	}
	AssertionStatus_value = map[string]int32{
		"ASSERTION_STATUS_UNSPECIFIED": 0,
		"ASSERTION_STATUS_VERIFIED":    1,
	}
)

func (x AssertionStatus) Enum() *AssertionStatus {
	p := new(AssertionStatus)
	*p = x
	return p
}

func (x AssertionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[14].Descriptor()
}

func (AssertionStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[14]
}

func (x AssertionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionStatus.Descriptor instead.
func (AssertionStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{14}
}

type AudioCodecType int32

const (
	AudioCodecType_AUDIO_CODEC_TYPE_UNSPECIFIED         AudioCodecType = 0
	AudioCodecType_AUDIO_CODEC_TYPE_AAC                 AudioCodecType = 1
	AudioCodecType_AUDIO_CODEC_TYPE_AC_4                AudioCodecType = 2
	AudioCodecType_AUDIO_CODEC_TYPE_DOLBYATMOSMASTERADM AudioCodecType = 3
	AudioCodecType_AUDIO_CODEC_TYPE_ADPCM               AudioCodecType = 4
	AudioCodecType_AUDIO_CODEC_TYPE_ALAW                AudioCodecType = 5
	AudioCodecType_AUDIO_CODEC_TYPE_AMR                 AudioCodecType = 6
	AudioCodecType_AUDIO_CODEC_TYPE_AMR_NB              AudioCodecType = 7
	AudioCodecType_AUDIO_CODEC_TYPE_AMR_WB              AudioCodecType = 8
	AudioCodecType_AUDIO_CODEC_TYPE_DOLBYDIGITALPLUS    AudioCodecType = 9
	AudioCodecType_AUDIO_CODEC_TYPE_FLAC                AudioCodecType = 10
	AudioCodecType_AUDIO_CODEC_TYPE_MP                  AudioCodecType = 11
	AudioCodecType_AUDIO_CODEC_TYPE_MP2                 AudioCodecType = 12
	AudioCodecType_AUDIO_CODEC_TYPE_MP3                 AudioCodecType = 13
	AudioCodecType_AUDIO_CODEC_TYPE_MPEG_H_3D           AudioCodecType = 14
	AudioCodecType_AUDIO_CODEC_TYPE_MQA                 AudioCodecType = 15
	AudioCodecType_AUDIO_CODEC_TYPE_MULAW               AudioCodecType = 16
	AudioCodecType_AUDIO_CODEC_TYPE_PCM                 AudioCodecType = 17
	AudioCodecType_AUDIO_CODEC_TYPE_PDM                 AudioCodecType = 18
	AudioCodecType_AUDIO_CODEC_TYPE_QCELP               AudioCodecType = 19
	AudioCodecType_AUDIO_CODEC_TYPE_REALAUDIO           AudioCodecType = 20
	AudioCodecType_AUDIO_CODEC_TYPE_SHOCKWAVE           AudioCodecType = 21
	AudioCodecType_AUDIO_CODEC_TYPE_UNKNOWN             AudioCodecType = 22
	AudioCodecType_AUDIO_CODEC_TYPE_USERDEFINED         AudioCodecType = 23
	AudioCodecType_AUDIO_CODEC_TYPE_VORBIS              AudioCodecType = 24
	AudioCodecType_AUDIO_CODEC_TYPE_WMA                 AudioCodecType = 25
)

// Enum value maps for AudioCodecType.
var (
	AudioCodecType_name = map[int32]string{
		0:  "AUDIO_CODEC_TYPE_UNSPECIFIED",
		1:  "AUDIO_CODEC_TYPE_AAC",
		2:  "AUDIO_CODEC_TYPE_AC_4",
		3:  "AUDIO_CODEC_TYPE_DOLBYATMOSMASTERADM",
		4:  "AUDIO_CODEC_TYPE_ADPCM",
		5:  "AUDIO_CODEC_TYPE_ALAW",
		6:  "AUDIO_CODEC_TYPE_AMR",
		7:  "AUDIO_CODEC_TYPE_AMR_NB",
		8:  "AUDIO_CODEC_TYPE_AMR_WB",
		9:  "AUDIO_CODEC_TYPE_DOLBYDIGITALPLUS",
		10: "AUDIO_CODEC_TYPE_FLAC",
		11: "AUDIO_CODEC_TYPE_MP",
		12: "AUDIO_CODEC_TYPE_MP2",
		13: "AUDIO_CODEC_TYPE_MP3",
		14: "AUDIO_CODEC_TYPE_MPEG_H_3D",
		15: "AUDIO_CODEC_TYPE_MQA",
		16: "AUDIO_CODEC_TYPE_MULAW",
		17: "AUDIO_CODEC_TYPE_PCM",
		18: "AUDIO_CODEC_TYPE_PDM",
		19: "AUDIO_CODEC_TYPE_QCELP",
		20: "AUDIO_CODEC_TYPE_REALAUDIO",
		21: "AUDIO_CODEC_TYPE_SHOCKWAVE",
		22: "AUDIO_CODEC_TYPE_UNKNOWN",
		23: "AUDIO_CODEC_TYPE_USERDEFINED",
		24: "AUDIO_CODEC_TYPE_VORBIS",
		25: "AUDIO_CODEC_TYPE_WMA",
	}
	AudioCodecType_value = map[string]int32{
		"AUDIO_CODEC_TYPE_UNSPECIFIED":         0,
		"AUDIO_CODEC_TYPE_AAC":                 1,
		"AUDIO_CODEC_TYPE_AC_4":                2,
		"AUDIO_CODEC_TYPE_DOLBYATMOSMASTERADM": 3,
		"AUDIO_CODEC_TYPE_ADPCM":               4,
		"AUDIO_CODEC_TYPE_ALAW":                5,
		"AUDIO_CODEC_TYPE_AMR":                 6,
		"AUDIO_CODEC_TYPE_AMR_NB":              7,
		"AUDIO_CODEC_TYPE_AMR_WB":              8,
		"AUDIO_CODEC_TYPE_DOLBYDIGITALPLUS":    9,
		"AUDIO_CODEC_TYPE_FLAC":                10,
		"AUDIO_CODEC_TYPE_MP":                  11,
		"AUDIO_CODEC_TYPE_MP2":                 12,
		"AUDIO_CODEC_TYPE_MP3":                 13,
		"AUDIO_CODEC_TYPE_MPEG_H_3D":           14,
		"AUDIO_CODEC_TYPE_MQA":                 15,
		"AUDIO_CODEC_TYPE_MULAW":               16,
		"AUDIO_CODEC_TYPE_PCM":                 17,
		"AUDIO_CODEC_TYPE_PDM":                 18,
		"AUDIO_CODEC_TYPE_QCELP":               19,
		"AUDIO_CODEC_TYPE_REALAUDIO":           20,
		"AUDIO_CODEC_TYPE_SHOCKWAVE":           21,
		"AUDIO_CODEC_TYPE_UNKNOWN":             22,
		"AUDIO_CODEC_TYPE_USERDEFINED":         23,
		"AUDIO_CODEC_TYPE_VORBIS":              24,
		"AUDIO_CODEC_TYPE_WMA":                 25,
	}
)

func (x AudioCodecType) Enum() *AudioCodecType {
	p := new(AudioCodecType)
	*p = x
	return p
}

func (x AudioCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[15].Descriptor()
}

func (AudioCodecType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[15]
}

func (x AudioCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioCodecType.Descriptor instead.
func (AudioCodecType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{15}
}

type AudioVisualType int32

const (
	AudioVisualType_AUDIO_VISUAL_TYPE_UNSPECIFIED                  AudioVisualType = 0
	AudioVisualType_AUDIO_VISUAL_TYPE_ADULTCONTENT                 AudioVisualType = 1
	AudioVisualType_AUDIO_VISUAL_TYPE_ADVERTISEMENTVIDEO           AudioVisualType = 2
	AudioVisualType_AUDIO_VISUAL_TYPE_ADVICEMAGAZINE               AudioVisualType = 3
	AudioVisualType_AUDIO_VISUAL_TYPE_ANIMATION                    AudioVisualType = 4
	AudioVisualType_AUDIO_VISUAL_TYPE_BALLETVIDEO                  AudioVisualType = 5
	AudioVisualType_AUDIO_VISUAL_TYPE_BEHINDTHESCENES              AudioVisualType = 6
	AudioVisualType_AUDIO_VISUAL_TYPE_BLACKANDWHITEVIDEO           AudioVisualType = 7
	AudioVisualType_AUDIO_VISUAL_TYPE_CHILDRENSFILM                AudioVisualType = 8
	AudioVisualType_AUDIO_VISUAL_TYPE_COLORIZEDVIDEO               AudioVisualType = 9
	AudioVisualType_AUDIO_VISUAL_TYPE_COLUMNVIDEO                  AudioVisualType = 10
	AudioVisualType_AUDIO_VISUAL_TYPE_CONCERTCLIP                  AudioVisualType = 11
	AudioVisualType_AUDIO_VISUAL_TYPE_CONCERTVIDEO                 AudioVisualType = 12
	AudioVisualType_AUDIO_VISUAL_TYPE_CORPORATEFILM                AudioVisualType = 13
	AudioVisualType_AUDIO_VISUAL_TYPE_CREDITS                      AudioVisualType = 14
	AudioVisualType_AUDIO_VISUAL_TYPE_DRAMATICOMUSICALVIDEO        AudioVisualType = 15
	AudioVisualType_AUDIO_VISUAL_TYPE_DOCUMENTARY                  AudioVisualType = 16
	AudioVisualType_AUDIO_VISUAL_TYPE_EDUCATIONALVIDEO             AudioVisualType = 17
	AudioVisualType_AUDIO_VISUAL_TYPE_FEATUREFILM                  AudioVisualType = 18
	AudioVisualType_AUDIO_VISUAL_TYPE_FICTION                      AudioVisualType = 19
	AudioVisualType_AUDIO_VISUAL_TYPE_INFOMERCIALVIDEO             AudioVisualType = 20
	AudioVisualType_AUDIO_VISUAL_TYPE_INTERACTIVERESOURCE          AudioVisualType = 21
	AudioVisualType_AUDIO_VISUAL_TYPE_INTERVIEW                    AudioVisualType = 22
	AudioVisualType_AUDIO_VISUAL_TYPE_KARAOKE                      AudioVisualType = 23
	AudioVisualType_AUDIO_VISUAL_TYPE_LIVEEVENTVIDEO               AudioVisualType = 24
	AudioVisualType_AUDIO_VISUAL_TYPE_LONGFORMMUSICALWORKVIDEO     AudioVisualType = 25
	AudioVisualType_AUDIO_VISUAL_TYPE_LONGFORMNONMUSICALWORKVIDEO  AudioVisualType = 26
	AudioVisualType_AUDIO_VISUAL_TYPE_LYRICVIDEO                   AudioVisualType = 27
	AudioVisualType_AUDIO_VISUAL_TYPE_MAGAZINE                     AudioVisualType = 28
	AudioVisualType_AUDIO_VISUAL_TYPE_MENU                         AudioVisualType = 29
	AudioVisualType_AUDIO_VISUAL_TYPE_MINISERIES                   AudioVisualType = 30
	AudioVisualType_AUDIO_VISUAL_TYPE_MULTIMEDIAVIDEO              AudioVisualType = 31
	AudioVisualType_AUDIO_VISUAL_TYPE_MUSICALWORKCLIP              AudioVisualType = 32
	AudioVisualType_AUDIO_VISUAL_TYPE_MUSICALWORKREADALONGVIDEO    AudioVisualType = 33
	AudioVisualType_AUDIO_VISUAL_TYPE_MUSICALWORKTRAILER           AudioVisualType = 34
	AudioVisualType_AUDIO_VISUAL_TYPE_MUSICALWORKVIDEOCHAPTER      AudioVisualType = 35
	AudioVisualType_AUDIO_VISUAL_TYPE_NEWS                         AudioVisualType = 36
	AudioVisualType_AUDIO_VISUAL_TYPE_NONMUSICALWORKCLIP           AudioVisualType = 37
	AudioVisualType_AUDIO_VISUAL_TYPE_NONMUSICALWORKREADALONGVIDEO AudioVisualType = 38
	AudioVisualType_AUDIO_VISUAL_TYPE_NONMUSICALWORKTRAILER        AudioVisualType = 39
	AudioVisualType_AUDIO_VISUAL_TYPE_NONMUSICALWORKVIDEOCHAPTER   AudioVisualType = 40
	AudioVisualType_AUDIO_VISUAL_TYPE_OPERAVIDEO                   AudioVisualType = 41
	AudioVisualType_AUDIO_VISUAL_TYPE_PERFORMANCE                  AudioVisualType = 42
	AudioVisualType_AUDIO_VISUAL_TYPE_READALONGVIDEO               AudioVisualType = 43
	AudioVisualType_AUDIO_VISUAL_TYPE_REALITYTVSHOWVIDEO           AudioVisualType = 44
	AudioVisualType_AUDIO_VISUAL_TYPE_SERIES                       AudioVisualType = 45
	AudioVisualType_AUDIO_VISUAL_TYPE_SHORTFILM                    AudioVisualType = 46
	AudioVisualType_AUDIO_VISUAL_TYPE_SHORTFORMMUSICALWORKVIDEO    AudioVisualType = 47
	AudioVisualType_AUDIO_VISUAL_TYPE_SHORTFORMNONMUSICALWORKVIDEO AudioVisualType = 48
	AudioVisualType_AUDIO_VISUAL_TYPE_SILENTVIDEO                  AudioVisualType = 49
	AudioVisualType_AUDIO_VISUAL_TYPE_SKETCHVIDEO                  AudioVisualType = 50
	AudioVisualType_AUDIO_VISUAL_TYPE_SOAPSITCOM                   AudioVisualType = 51
	AudioVisualType_AUDIO_VISUAL_TYPE_SPECIALEVENT                 AudioVisualType = 52
	AudioVisualType_AUDIO_VISUAL_TYPE_SPECIALTOPIC                 AudioVisualType = 53
	AudioVisualType_AUDIO_VISUAL_TYPE_SPORT                        AudioVisualType = 54
	AudioVisualType_AUDIO_VISUAL_TYPE_THEATRICALWORKVIDEO          AudioVisualType = 55
	AudioVisualType_AUDIO_VISUAL_TYPE_TRAILERVIDEO                 AudioVisualType = 56
	AudioVisualType_AUDIO_VISUAL_TYPE_TVFILM                       AudioVisualType = 57
	AudioVisualType_AUDIO_VISUAL_TYPE_TVPROGRAM                    AudioVisualType = 58
	AudioVisualType_AUDIO_VISUAL_TYPE_TVSHOWVIDEO                  AudioVisualType = 59
	AudioVisualType_AUDIO_VISUAL_TYPE_UNKNOWN                      AudioVisualType = 60
	AudioVisualType_AUDIO_VISUAL_TYPE_USERDEFINED                  AudioVisualType = 61
	AudioVisualType_AUDIO_VISUAL_TYPE_VIDEOCHAPTER                 AudioVisualType = 62
	AudioVisualType_AUDIO_VISUAL_TYPE_VIDEOCLIP                    AudioVisualType = 63
	AudioVisualType_AUDIO_VISUAL_TYPE_VIDEOREPORT                  AudioVisualType = 64
	AudioVisualType_AUDIO_VISUAL_TYPE_VIDEOSTEM                    AudioVisualType = 65
	AudioVisualType_AUDIO_VISUAL_TYPE_WEBRESOURCE                  AudioVisualType = 66
)

// Enum value maps for AudioVisualType.
var (
	AudioVisualType_name = map[int32]string{
		0:  "AUDIO_VISUAL_TYPE_UNSPECIFIED",
		1:  "AUDIO_VISUAL_TYPE_ADULTCONTENT",
		2:  "AUDIO_VISUAL_TYPE_ADVERTISEMENTVIDEO",
		3:  "AUDIO_VISUAL_TYPE_ADVICEMAGAZINE",
		4:  "AUDIO_VISUAL_TYPE_ANIMATION",
		5:  "AUDIO_VISUAL_TYPE_BALLETVIDEO",
		6:  "AUDIO_VISUAL_TYPE_BEHINDTHESCENES",
		7:  "AUDIO_VISUAL_TYPE_BLACKANDWHITEVIDEO",
		8:  "AUDIO_VISUAL_TYPE_CHILDRENSFILM",
		9:  "AUDIO_VISUAL_TYPE_COLORIZEDVIDEO",
		10: "AUDIO_VISUAL_TYPE_COLUMNVIDEO",
		11: "AUDIO_VISUAL_TYPE_CONCERTCLIP",
		12: "AUDIO_VISUAL_TYPE_CONCERTVIDEO",
		13: "AUDIO_VISUAL_TYPE_CORPORATEFILM",
		14: "AUDIO_VISUAL_TYPE_CREDITS",
		15: "AUDIO_VISUAL_TYPE_DRAMATICOMUSICALVIDEO",
		16: "AUDIO_VISUAL_TYPE_DOCUMENTARY",
		17: "AUDIO_VISUAL_TYPE_EDUCATIONALVIDEO",
		18: "AUDIO_VISUAL_TYPE_FEATUREFILM",
		19: "AUDIO_VISUAL_TYPE_FICTION",
		20: "AUDIO_VISUAL_TYPE_INFOMERCIALVIDEO",
		21: "AUDIO_VISUAL_TYPE_INTERACTIVERESOURCE",
		22: "AUDIO_VISUAL_TYPE_INTERVIEW",
		23: "AUDIO_VISUAL_TYPE_KARAOKE",
		24: "AUDIO_VISUAL_TYPE_LIVEEVENTVIDEO",
		25: "AUDIO_VISUAL_TYPE_LONGFORMMUSICALWORKVIDEO",
		26: "AUDIO_VISUAL_TYPE_LONGFORMNONMUSICALWORKVIDEO",
		27: "AUDIO_VISUAL_TYPE_LYRICVIDEO",
		28: "AUDIO_VISUAL_TYPE_MAGAZINE",
		29: "AUDIO_VISUAL_TYPE_MENU",
		30: "AUDIO_VISUAL_TYPE_MINISERIES",
		31: "AUDIO_VISUAL_TYPE_MULTIMEDIAVIDEO",
		32: "AUDIO_VISUAL_TYPE_MUSICALWORKCLIP",
		33: "AUDIO_VISUAL_TYPE_MUSICALWORKREADALONGVIDEO",
		34: "AUDIO_VISUAL_TYPE_MUSICALWORKTRAILER",
		35: "AUDIO_VISUAL_TYPE_MUSICALWORKVIDEOCHAPTER",
		36: "AUDIO_VISUAL_TYPE_NEWS",
		37: "AUDIO_VISUAL_TYPE_NONMUSICALWORKCLIP",
		38: "AUDIO_VISUAL_TYPE_NONMUSICALWORKREADALONGVIDEO",
		39: "AUDIO_VISUAL_TYPE_NONMUSICALWORKTRAILER",
		40: "AUDIO_VISUAL_TYPE_NONMUSICALWORKVIDEOCHAPTER",
		41: "AUDIO_VISUAL_TYPE_OPERAVIDEO",
		42: "AUDIO_VISUAL_TYPE_PERFORMANCE",
		43: "AUDIO_VISUAL_TYPE_READALONGVIDEO",
		44: "AUDIO_VISUAL_TYPE_REALITYTVSHOWVIDEO",
		45: "AUDIO_VISUAL_TYPE_SERIES",
		46: "AUDIO_VISUAL_TYPE_SHORTFILM",
		47: "AUDIO_VISUAL_TYPE_SHORTFORMMUSICALWORKVIDEO",
		48: "AUDIO_VISUAL_TYPE_SHORTFORMNONMUSICALWORKVIDEO",
		49: "AUDIO_VISUAL_TYPE_SILENTVIDEO",
		50: "AUDIO_VISUAL_TYPE_SKETCHVIDEO",
		51: "AUDIO_VISUAL_TYPE_SOAPSITCOM",
		52: "AUDIO_VISUAL_TYPE_SPECIALEVENT",
		53: "AUDIO_VISUAL_TYPE_SPECIALTOPIC",
		54: "AUDIO_VISUAL_TYPE_SPORT",
		55: "AUDIO_VISUAL_TYPE_THEATRICALWORKVIDEO",
		56: "AUDIO_VISUAL_TYPE_TRAILERVIDEO",
		57: "AUDIO_VISUAL_TYPE_TVFILM",
		58: "AUDIO_VISUAL_TYPE_TVPROGRAM",
		59: "AUDIO_VISUAL_TYPE_TVSHOWVIDEO",
		60: "AUDIO_VISUAL_TYPE_UNKNOWN",
		61: "AUDIO_VISUAL_TYPE_USERDEFINED",
		62: "AUDIO_VISUAL_TYPE_VIDEOCHAPTER",
		63: "AUDIO_VISUAL_TYPE_VIDEOCLIP",
		64: "AUDIO_VISUAL_TYPE_VIDEOREPORT",
		65: "AUDIO_VISUAL_TYPE_VIDEOSTEM",
		66: "AUDIO_VISUAL_TYPE_WEBRESOURCE",
	}
	AudioVisualType_value = map[string]int32{
		"AUDIO_VISUAL_TYPE_UNSPECIFIED":                  0,
		"AUDIO_VISUAL_TYPE_ADULTCONTENT":                 1,
		"AUDIO_VISUAL_TYPE_ADVERTISEMENTVIDEO":           2,
		"AUDIO_VISUAL_TYPE_ADVICEMAGAZINE":               3,
		"AUDIO_VISUAL_TYPE_ANIMATION":                    4,
		"AUDIO_VISUAL_TYPE_BALLETVIDEO":                  5,
		"AUDIO_VISUAL_TYPE_BEHINDTHESCENES":              6,
		"AUDIO_VISUAL_TYPE_BLACKANDWHITEVIDEO":           7,
		"AUDIO_VISUAL_TYPE_CHILDRENSFILM":                8,
		"AUDIO_VISUAL_TYPE_COLORIZEDVIDEO":               9,
		"AUDIO_VISUAL_TYPE_COLUMNVIDEO":                  10,
		"AUDIO_VISUAL_TYPE_CONCERTCLIP":                  11,
		"AUDIO_VISUAL_TYPE_CONCERTVIDEO":                 12,
		"AUDIO_VISUAL_TYPE_CORPORATEFILM":                13,
		"AUDIO_VISUAL_TYPE_CREDITS":                      14,
		"AUDIO_VISUAL_TYPE_DRAMATICOMUSICALVIDEO":        15,
		"AUDIO_VISUAL_TYPE_DOCUMENTARY":                  16,
		"AUDIO_VISUAL_TYPE_EDUCATIONALVIDEO":             17,
		"AUDIO_VISUAL_TYPE_FEATUREFILM":                  18,
		"AUDIO_VISUAL_TYPE_FICTION":                      19,
		"AUDIO_VISUAL_TYPE_INFOMERCIALVIDEO":             20,
		"AUDIO_VISUAL_TYPE_INTERACTIVERESOURCE":          21,
		"AUDIO_VISUAL_TYPE_INTERVIEW":                    22,
		"AUDIO_VISUAL_TYPE_KARAOKE":                      23,
		"AUDIO_VISUAL_TYPE_LIVEEVENTVIDEO":               24,
		"AUDIO_VISUAL_TYPE_LONGFORMMUSICALWORKVIDEO":     25,
		"AUDIO_VISUAL_TYPE_LONGFORMNONMUSICALWORKVIDEO":  26,
		"AUDIO_VISUAL_TYPE_LYRICVIDEO":                   27,
		"AUDIO_VISUAL_TYPE_MAGAZINE":                     28,
		"AUDIO_VISUAL_TYPE_MENU":                         29,
		"AUDIO_VISUAL_TYPE_MINISERIES":                   30,
		"AUDIO_VISUAL_TYPE_MULTIMEDIAVIDEO":              31,
		"AUDIO_VISUAL_TYPE_MUSICALWORKCLIP":              32,
		"AUDIO_VISUAL_TYPE_MUSICALWORKREADALONGVIDEO":    33,
		"AUDIO_VISUAL_TYPE_MUSICALWORKTRAILER":           34,
		"AUDIO_VISUAL_TYPE_MUSICALWORKVIDEOCHAPTER":      35,
		"AUDIO_VISUAL_TYPE_NEWS":                         36,
		"AUDIO_VISUAL_TYPE_NONMUSICALWORKCLIP":           37,
		"AUDIO_VISUAL_TYPE_NONMUSICALWORKREADALONGVIDEO": 38,
		"AUDIO_VISUAL_TYPE_NONMUSICALWORKTRAILER":        39,
		"AUDIO_VISUAL_TYPE_NONMUSICALWORKVIDEOCHAPTER":   40,
		"AUDIO_VISUAL_TYPE_OPERAVIDEO":                   41,
		"AUDIO_VISUAL_TYPE_PERFORMANCE":                  42,
		"AUDIO_VISUAL_TYPE_READALONGVIDEO":               43,
		"AUDIO_VISUAL_TYPE_REALITYTVSHOWVIDEO":           44,
		"AUDIO_VISUAL_TYPE_SERIES":                       45,
		"AUDIO_VISUAL_TYPE_SHORTFILM":                    46,
		"AUDIO_VISUAL_TYPE_SHORTFORMMUSICALWORKVIDEO":    47,
		"AUDIO_VISUAL_TYPE_SHORTFORMNONMUSICALWORKVIDEO": 48,
		"AUDIO_VISUAL_TYPE_SILENTVIDEO":                  49,
		"AUDIO_VISUAL_TYPE_SKETCHVIDEO":                  50,
		"AUDIO_VISUAL_TYPE_SOAPSITCOM":                   51,
		"AUDIO_VISUAL_TYPE_SPECIALEVENT":                 52,
		"AUDIO_VISUAL_TYPE_SPECIALTOPIC":                 53,
		"AUDIO_VISUAL_TYPE_SPORT":                        54,
		"AUDIO_VISUAL_TYPE_THEATRICALWORKVIDEO":          55,
		"AUDIO_VISUAL_TYPE_TRAILERVIDEO":                 56,
		"AUDIO_VISUAL_TYPE_TVFILM":                       57,
		"AUDIO_VISUAL_TYPE_TVPROGRAM":                    58,
		"AUDIO_VISUAL_TYPE_TVSHOWVIDEO":                  59,
		"AUDIO_VISUAL_TYPE_UNKNOWN":                      60,
		"AUDIO_VISUAL_TYPE_USERDEFINED":                  61,
		"AUDIO_VISUAL_TYPE_VIDEOCHAPTER":                 62,
		"AUDIO_VISUAL_TYPE_VIDEOCLIP":                    63,
		"AUDIO_VISUAL_TYPE_VIDEOREPORT":                  64,
		"AUDIO_VISUAL_TYPE_VIDEOSTEM":                    65,
		"AUDIO_VISUAL_TYPE_WEBRESOURCE":                  66,
	}
)

func (x AudioVisualType) Enum() *AudioVisualType {
	p := new(AudioVisualType)
	*p = x
	return p
}

func (x AudioVisualType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioVisualType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[16].Descriptor()
}

func (AudioVisualType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[16]
}

func (x AudioVisualType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioVisualType.Descriptor instead.
func (AudioVisualType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{16}
}

type BasisForRevenueAllocation int32

const (
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_UNSPECIFIED              BasisForRevenueAllocation = 0
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_FULLCENSUS               BasisForRevenueAllocation = 1
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_FULLUSAGELOG             BasisForRevenueAllocation = 2
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_MARKETSHARE              BasisForRevenueAllocation = 3
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_PROXY                    BasisForRevenueAllocation = 4
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_SALESFIGURES             BasisForRevenueAllocation = 5
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_SAMPLECENSUS             BasisForRevenueAllocation = 6
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_SAMPLEUSAGELOG           BasisForRevenueAllocation = 7
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_UNITMULTIPLIEDBYDURATION BasisForRevenueAllocation = 8
	BasisForRevenueAllocation_BASIS_FOR_REVENUE_ALLOCATION_USERDEFINED              BasisForRevenueAllocation = 9
)

// Enum value maps for BasisForRevenueAllocation.
var (
	BasisForRevenueAllocation_name = map[int32]string{
		0: "BASIS_FOR_REVENUE_ALLOCATION_UNSPECIFIED",
		1: "BASIS_FOR_REVENUE_ALLOCATION_FULLCENSUS",
		2: "BASIS_FOR_REVENUE_ALLOCATION_FULLUSAGELOG",
		3: "BASIS_FOR_REVENUE_ALLOCATION_MARKETSHARE",
		4: "BASIS_FOR_REVENUE_ALLOCATION_PROXY",
		5: "BASIS_FOR_REVENUE_ALLOCATION_SALESFIGURES",
		6: "BASIS_FOR_REVENUE_ALLOCATION_SAMPLECENSUS",
		7: "BASIS_FOR_REVENUE_ALLOCATION_SAMPLEUSAGELOG",
		8: "BASIS_FOR_REVENUE_ALLOCATION_UNITMULTIPLIEDBYDURATION",
		9: "BASIS_FOR_REVENUE_ALLOCATION_USERDEFINED",
	}
	BasisForRevenueAllocation_value = map[string]int32{
		"BASIS_FOR_REVENUE_ALLOCATION_UNSPECIFIED":              0,
		"BASIS_FOR_REVENUE_ALLOCATION_FULLCENSUS":               1,
		"BASIS_FOR_REVENUE_ALLOCATION_FULLUSAGELOG":             2,
		"BASIS_FOR_REVENUE_ALLOCATION_MARKETSHARE":              3,
		"BASIS_FOR_REVENUE_ALLOCATION_PROXY":                    4,
		"BASIS_FOR_REVENUE_ALLOCATION_SALESFIGURES":             5,
		"BASIS_FOR_REVENUE_ALLOCATION_SAMPLECENSUS":             6,
		"BASIS_FOR_REVENUE_ALLOCATION_SAMPLEUSAGELOG":           7,
		"BASIS_FOR_REVENUE_ALLOCATION_UNITMULTIPLIEDBYDURATION": 8,
		"BASIS_FOR_REVENUE_ALLOCATION_USERDEFINED":              9,
	}
)

func (x BasisForRevenueAllocation) Enum() *BasisForRevenueAllocation {
	p := new(BasisForRevenueAllocation)
	*p = x
	return p
}

func (x BasisForRevenueAllocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BasisForRevenueAllocation) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[17].Descriptor()
}

func (BasisForRevenueAllocation) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[17]
}

func (x BasisForRevenueAllocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BasisForRevenueAllocation.Descriptor instead.
func (BasisForRevenueAllocation) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{17}
}

type BinaryDataType int32

const (
	BinaryDataType_BINARY_DATA_TYPE_UNSPECIFIED BinaryDataType = 0
	BinaryDataType_BINARY_DATA_TYPE_BINARY64    BinaryDataType = 1
	BinaryDataType_BINARY_DATA_TYPE_HEXBINARY   BinaryDataType = 2
)

// Enum value maps for BinaryDataType.
var (
	BinaryDataType_name = map[int32]string{
		0: "BINARY_DATA_TYPE_UNSPECIFIED",
		1: "BINARY_DATA_TYPE_BINARY64",
		2: "BINARY_DATA_TYPE_HEXBINARY",
	}
	BinaryDataType_value = map[string]int32{
		"BINARY_DATA_TYPE_UNSPECIFIED": 0,
		"BINARY_DATA_TYPE_BINARY64":    1,
		"BINARY_DATA_TYPE_HEXBINARY":   2,
	}
)

func (x BinaryDataType) Enum() *BinaryDataType {
	p := new(BinaryDataType)
	*p = x
	return p
}

func (x BinaryDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinaryDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[18].Descriptor()
}

func (BinaryDataType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[18]
}

func (x BinaryDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinaryDataType.Descriptor instead.
func (BinaryDataType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{18}
}

type Blockchain int32

const (
	Blockchain_BLOCKCHAIN_UNSPECIFIED Blockchain = 0
	Blockchain_BLOCKCHAIN_ETHEREUM    Blockchain = 1
	Blockchain_BLOCKCHAIN_USERDEFINED Blockchain = 2
)

// Enum value maps for Blockchain.
var (
	Blockchain_name = map[int32]string{
		0: "BLOCKCHAIN_UNSPECIFIED",
		1: "BLOCKCHAIN_ETHEREUM",
		2: "BLOCKCHAIN_USERDEFINED",
	}
	Blockchain_value = map[string]int32{
		"BLOCKCHAIN_UNSPECIFIED": 0,
		"BLOCKCHAIN_ETHEREUM":    1,
		"BLOCKCHAIN_USERDEFINED": 2,
	}
)

func (x Blockchain) Enum() *Blockchain {
	p := new(Blockchain)
	*p = x
	return p
}

func (x Blockchain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Blockchain) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[19].Descriptor()
}

func (Blockchain) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[19]
}

func (x Blockchain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Blockchain.Descriptor instead.
func (Blockchain) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{19}
}

type BusinessMusicalWorkContributorRole int32

const (
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED          BusinessMusicalWorkContributorRole = 0
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER        BusinessMusicalWorkContributorRole = 1
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT    BusinessMusicalWorkContributorRole = 2
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER      BusinessMusicalWorkContributorRole = 3
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER       BusinessMusicalWorkContributorRole = 4
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER   BusinessMusicalWorkContributorRole = 5
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER    BusinessMusicalWorkContributorRole = 6
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER  BusinessMusicalWorkContributorRole = 7
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER         BusinessMusicalWorkContributorRole = 8
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER BusinessMusicalWorkContributorRole = 9
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN              BusinessMusicalWorkContributorRole = 10
	BusinessMusicalWorkContributorRole_BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED          BusinessMusicalWorkContributorRole = 11
)

// Enum value maps for BusinessMusicalWorkContributorRole.
var (
	BusinessMusicalWorkContributorRole_name = map[int32]string{
		0:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER",
		2:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT",
		3:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER",
		4:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER",
		5:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER",
		6:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER",
		7:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER",
		8:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER",
		9:  "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER",
		10: "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN",
		11: "BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED",
	}
	BusinessMusicalWorkContributorRole_value = map[string]int32{
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED":          0,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER":        1,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT":    2,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER":      3,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER":       4,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER":   5,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER":    6,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER":  7,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER":         8,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER": 9,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN":              10,
		"BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED":          11,
	}
)

func (x BusinessMusicalWorkContributorRole) Enum() *BusinessMusicalWorkContributorRole {
	p := new(BusinessMusicalWorkContributorRole)
	*p = x
	return p
}

func (x BusinessMusicalWorkContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessMusicalWorkContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[20].Descriptor()
}

func (BusinessMusicalWorkContributorRole) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[20]
}

func (x BusinessMusicalWorkContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessMusicalWorkContributorRole.Descriptor instead.
func (BusinessMusicalWorkContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{20}
}

type CarrierType int32

const (
	CarrierType_CARRIER_TYPE_UNSPECIFIED                  CarrierType = 0
	CarrierType_CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX     CarrierType = 1
	CarrierType_CARRIER_TYPE_E_33RPM10INCHLP              CarrierType = 2
	CarrierType_CARRIER_TYPE_E_33RPM10INCHSINGLE          CarrierType = 3
	CarrierType_CARRIER_TYPE_E_33RPM12INCHLP              CarrierType = 4
	CarrierType_CARRIER_TYPE_E_33RPM12INCHLP20TRACKS      CarrierType = 5
	CarrierType_CARRIER_TYPE_E_33RPM12INCHMAXISINGLE      CarrierType = 6
	CarrierType_CARRIER_TYPE_E_33RPM12INCHSINGLE          CarrierType = 7
	CarrierType_CARRIER_TYPE_E_33RPM7INCHLP               CarrierType = 8
	CarrierType_CARRIER_TYPE_E_33RPM7INCHSINGLE           CarrierType = 9
	CarrierType_CARRIER_TYPE_E_45RPM10INCHLP              CarrierType = 10
	CarrierType_CARRIER_TYPE_E_45RPM10INCHMAXISINGLE      CarrierType = 11
	CarrierType_CARRIER_TYPE_E_45RPM10INCHSINGLE          CarrierType = 12
	CarrierType_CARRIER_TYPE_E_45RPM12INCHLP              CarrierType = 13
	CarrierType_CARRIER_TYPE_E_45RPM12INCHMAXISINGLE      CarrierType = 14
	CarrierType_CARRIER_TYPE_E_45RPM12INCHSINGLE          CarrierType = 15
	CarrierType_CARRIER_TYPE_E_45RPM7INCHEP               CarrierType = 16
	CarrierType_CARRIER_TYPE_E_45RPM7INCHSINGLE           CarrierType = 17
	CarrierType_CARRIER_TYPE_E_7INCHMAXISINGLEREMIX       CarrierType = 18
	CarrierType_CARRIER_TYPE_BLURAY                       CarrierType = 19
	CarrierType_CARRIER_TYPE_CD                           CarrierType = 20
	CarrierType_CARRIER_TYPE_CDCOMPILATION                CarrierType = 21
	CarrierType_CARRIER_TYPE_CDEP                         CarrierType = 22
	CarrierType_CARRIER_TYPE_CDEPENHANCED                 CarrierType = 23
	CarrierType_CARRIER_TYPE_CDEXTRACOMPILATION           CarrierType = 24
	CarrierType_CARRIER_TYPE_CDEXTRAEP                    CarrierType = 25
	CarrierType_CARRIER_TYPE_CDEXTRALP                    CarrierType = 26
	CarrierType_CARRIER_TYPE_CDEXTRAMAXIREMIX             CarrierType = 27
	CarrierType_CARRIER_TYPE_CDEXTRAMAXISINGLE            CarrierType = 28
	CarrierType_CARRIER_TYPE_CDEXTRASINGLE                CarrierType = 29
	CarrierType_CARRIER_TYPE_CDEXTRASINGLE2TRACKS         CarrierType = 30
	CarrierType_CARRIER_TYPE_CDLP                         CarrierType = 31
	CarrierType_CARRIER_TYPE_CDLP5INCH                    CarrierType = 32
	CarrierType_CARRIER_TYPE_CDLPENHANCED                 CarrierType = 33
	CarrierType_CARRIER_TYPE_CDLPPLUSCDVIDEO              CarrierType = 34
	CarrierType_CARRIER_TYPE_CDLPPLUSDVDAUDIO             CarrierType = 35
	CarrierType_CARRIER_TYPE_CDLPPLUSDVDVIDEO             CarrierType = 36
	CarrierType_CARRIER_TYPE_CDLPPLUSWEB                  CarrierType = 37
	CarrierType_CARRIER_TYPE_CDMAXISINGLE                 CarrierType = 38
	CarrierType_CARRIER_TYPE_CDMAXISINGLE3INCH            CarrierType = 39
	CarrierType_CARRIER_TYPE_CDMAXISINGLEENHANCED         CarrierType = 40
	CarrierType_CARRIER_TYPE_CDMAXISINGLEREMIX            CarrierType = 41
	CarrierType_CARRIER_TYPE_CDPLUSCDBONUS                CarrierType = 42
	CarrierType_CARRIER_TYPE_CDPLUSDVDBONUS               CarrierType = 43
	CarrierType_CARRIER_TYPE_CDROM                        CarrierType = 44
	CarrierType_CARRIER_TYPE_CDSINGLE                     CarrierType = 45
	CarrierType_CARRIER_TYPE_CDSINGLE3INCH                CarrierType = 46
	CarrierType_CARRIER_TYPE_CDSINGLE5INCH                CarrierType = 47
	CarrierType_CARRIER_TYPE_CDVIDEO5LPNTSC               CarrierType = 48
	CarrierType_CARRIER_TYPE_CDVIDEO5LPPAL                CarrierType = 49
	CarrierType_CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE       CarrierType = 50
	CarrierType_CARRIER_TYPE_COMBIPACK                    CarrierType = 51
	CarrierType_CARRIER_TYPE_DCC                          CarrierType = 52
	CarrierType_CARRIER_TYPE_DCCCOMPILATION               CarrierType = 53
	CarrierType_CARRIER_TYPE_DUALDISC                     CarrierType = 54
	CarrierType_CARRIER_TYPE_DVD                          CarrierType = 55
	CarrierType_CARRIER_TYPE_DVDAUDIO                     CarrierType = 56
	CarrierType_CARRIER_TYPE_DVDAUDIO5MAXISINGLE          CarrierType = 57
	CarrierType_CARRIER_TYPE_DVDAUDIOLP                   CarrierType = 58
	CarrierType_CARRIER_TYPE_DVDAUDIOSINGLE               CarrierType = 59
	CarrierType_CARRIER_TYPE_DVDROM                       CarrierType = 60
	CarrierType_CARRIER_TYPE_DVDSINGLE                    CarrierType = 61
	CarrierType_CARRIER_TYPE_DVDVIDEO                     CarrierType = 62
	CarrierType_CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC      CarrierType = 63
	CarrierType_CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL       CarrierType = 64
	CarrierType_CARRIER_TYPE_DVDVIDEO5SINGLENTSC          CarrierType = 65
	CarrierType_CARRIER_TYPE_DVDVIDEO5SINGLEPAL           CarrierType = 66
	CarrierType_CARRIER_TYPE_DVDVIDEOLPNTSC               CarrierType = 67
	CarrierType_CARRIER_TYPE_DVDVIDEOLPPAL                CarrierType = 68
	CarrierType_CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE CarrierType = 69
	CarrierType_CARRIER_TYPE_FANPACK                      CarrierType = 70
	CarrierType_CARRIER_TYPE_FILESYSTEM                   CarrierType = 71
	CarrierType_CARRIER_TYPE_HDDVDVIDEOLP                 CarrierType = 72
	CarrierType_CARRIER_TYPE_LASERDISCLP12INCHNTSC        CarrierType = 73
	CarrierType_CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP      CarrierType = 74
	CarrierType_CARRIER_TYPE_LPCOMPILATION                CarrierType = 75
	CarrierType_CARRIER_TYPE_LPIDENTICALTOCD              CarrierType = 76
	CarrierType_CARRIER_TYPE_MC                           CarrierType = 77
	CarrierType_CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP      CarrierType = 78
	CarrierType_CARRIER_TYPE_MCCOMPILATION                CarrierType = 79
	CarrierType_CARRIER_TYPE_MCDOUBLELP                   CarrierType = 80
	CarrierType_CARRIER_TYPE_MCEP                         CarrierType = 81
	CarrierType_CARRIER_TYPE_MCIDENTICALTOCD              CarrierType = 82
	CarrierType_CARRIER_TYPE_MCLP                         CarrierType = 83
	CarrierType_CARRIER_TYPE_MCMAXISINGLE                 CarrierType = 84
	CarrierType_CARRIER_TYPE_MCREMIX                      CarrierType = 85
	CarrierType_CARRIER_TYPE_MCSINGLE                     CarrierType = 86
	CarrierType_CARRIER_TYPE_MCSINGLEIDENTICALTOCDS       CarrierType = 87
	CarrierType_CARRIER_TYPE_MEMORYDEVICE                 CarrierType = 88
	CarrierType_CARRIER_TYPE_MEMORYDEVICEAUDIOLP          CarrierType = 89
	CarrierType_CARRIER_TYPE_MEMORYDEVICEMIXLP            CarrierType = 90
	CarrierType_CARRIER_TYPE_MEMORYDEVICEVIDEOLP          CarrierType = 91
	CarrierType_CARRIER_TYPE_MERCHANDISE                  CarrierType = 92
	CarrierType_CARRIER_TYPE_MINIDISC                     CarrierType = 93
	CarrierType_CARRIER_TYPE_MINIDISCCOMPILATION          CarrierType = 94
	CarrierType_CARRIER_TYPE_MINIDISCEP                   CarrierType = 95
	CarrierType_CARRIER_TYPE_MINIDISCMAXIREMIX            CarrierType = 96
	CarrierType_CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE     CarrierType = 97
	CarrierType_CARRIER_TYPE_ONLINESYSTEM                 CarrierType = 98
	CarrierType_CARRIER_TYPE_PREPAIDCARD                  CarrierType = 99
	CarrierType_CARRIER_TYPE_SACD                         CarrierType = 100
	CarrierType_CARRIER_TYPE_SACDCOMPILATION              CarrierType = 101
	CarrierType_CARRIER_TYPE_SACDLPSTEREO                 CarrierType = 102
	CarrierType_CARRIER_TYPE_SACDLPSTEREOCDAUDIO          CarrierType = 103
	CarrierType_CARRIER_TYPE_SACDLPSTEREOSURROUND         CarrierType = 104
	CarrierType_CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO  CarrierType = 105
	CarrierType_CARRIER_TYPE_SACDLPSURROUNDCDAUDIO        CarrierType = 106
	CarrierType_CARRIER_TYPE_SACDPLUSDVDVIDEO             CarrierType = 107
	CarrierType_CARRIER_TYPE_USERDEFINED                  CarrierType = 108
	CarrierType_CARRIER_TYPE_VHSNTSC                      CarrierType = 109
	CarrierType_CARRIER_TYPE_VHSPAL                       CarrierType = 110
	CarrierType_CARRIER_TYPE_VHSPLUSCDLP                  CarrierType = 111
	CarrierType_CARRIER_TYPE_VHSSECAM                     CarrierType = 112
)

// Enum value maps for CarrierType.
var (
	CarrierType_name = map[int32]string{
		0:   "CARRIER_TYPE_UNSPECIFIED",
		1:   "CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX",
		2:   "CARRIER_TYPE_E_33RPM10INCHLP",
		3:   "CARRIER_TYPE_E_33RPM10INCHSINGLE",
		4:   "CARRIER_TYPE_E_33RPM12INCHLP",
		5:   "CARRIER_TYPE_E_33RPM12INCHLP20TRACKS",
		6:   "CARRIER_TYPE_E_33RPM12INCHMAXISINGLE",
		7:   "CARRIER_TYPE_E_33RPM12INCHSINGLE",
		8:   "CARRIER_TYPE_E_33RPM7INCHLP",
		9:   "CARRIER_TYPE_E_33RPM7INCHSINGLE",
		10:  "CARRIER_TYPE_E_45RPM10INCHLP",
		11:  "CARRIER_TYPE_E_45RPM10INCHMAXISINGLE",
		12:  "CARRIER_TYPE_E_45RPM10INCHSINGLE",
		13:  "CARRIER_TYPE_E_45RPM12INCHLP",
		14:  "CARRIER_TYPE_E_45RPM12INCHMAXISINGLE",
		15:  "CARRIER_TYPE_E_45RPM12INCHSINGLE",
		16:  "CARRIER_TYPE_E_45RPM7INCHEP",
		17:  "CARRIER_TYPE_E_45RPM7INCHSINGLE",
		18:  "CARRIER_TYPE_E_7INCHMAXISINGLEREMIX",
		19:  "CARRIER_TYPE_BLURAY",
		20:  "CARRIER_TYPE_CD",
		21:  "CARRIER_TYPE_CDCOMPILATION",
		22:  "CARRIER_TYPE_CDEP",
		23:  "CARRIER_TYPE_CDEPENHANCED",
		24:  "CARRIER_TYPE_CDEXTRACOMPILATION",
		25:  "CARRIER_TYPE_CDEXTRAEP",
		26:  "CARRIER_TYPE_CDEXTRALP",
		27:  "CARRIER_TYPE_CDEXTRAMAXIREMIX",
		28:  "CARRIER_TYPE_CDEXTRAMAXISINGLE",
		29:  "CARRIER_TYPE_CDEXTRASINGLE",
		30:  "CARRIER_TYPE_CDEXTRASINGLE2TRACKS",
		31:  "CARRIER_TYPE_CDLP",
		32:  "CARRIER_TYPE_CDLP5INCH",
		33:  "CARRIER_TYPE_CDLPENHANCED",
		34:  "CARRIER_TYPE_CDLPPLUSCDVIDEO",
		35:  "CARRIER_TYPE_CDLPPLUSDVDAUDIO",
		36:  "CARRIER_TYPE_CDLPPLUSDVDVIDEO",
		37:  "CARRIER_TYPE_CDLPPLUSWEB",
		38:  "CARRIER_TYPE_CDMAXISINGLE",
		39:  "CARRIER_TYPE_CDMAXISINGLE3INCH",
		40:  "CARRIER_TYPE_CDMAXISINGLEENHANCED",
		41:  "CARRIER_TYPE_CDMAXISINGLEREMIX",
		42:  "CARRIER_TYPE_CDPLUSCDBONUS",
		43:  "CARRIER_TYPE_CDPLUSDVDBONUS",
		44:  "CARRIER_TYPE_CDROM",
		45:  "CARRIER_TYPE_CDSINGLE",
		46:  "CARRIER_TYPE_CDSINGLE3INCH",
		47:  "CARRIER_TYPE_CDSINGLE5INCH",
		48:  "CARRIER_TYPE_CDVIDEO5LPNTSC",
		49:  "CARRIER_TYPE_CDVIDEO5LPPAL",
		50:  "CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE",
		51:  "CARRIER_TYPE_COMBIPACK",
		52:  "CARRIER_TYPE_DCC",
		53:  "CARRIER_TYPE_DCCCOMPILATION",
		54:  "CARRIER_TYPE_DUALDISC",
		55:  "CARRIER_TYPE_DVD",
		56:  "CARRIER_TYPE_DVDAUDIO",
		57:  "CARRIER_TYPE_DVDAUDIO5MAXISINGLE",
		58:  "CARRIER_TYPE_DVDAUDIOLP",
		59:  "CARRIER_TYPE_DVDAUDIOSINGLE",
		60:  "CARRIER_TYPE_DVDROM",
		61:  "CARRIER_TYPE_DVDSINGLE",
		62:  "CARRIER_TYPE_DVDVIDEO",
		63:  "CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC",
		64:  "CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL",
		65:  "CARRIER_TYPE_DVDVIDEO5SINGLENTSC",
		66:  "CARRIER_TYPE_DVDVIDEO5SINGLEPAL",
		67:  "CARRIER_TYPE_DVDVIDEOLPNTSC",
		68:  "CARRIER_TYPE_DVDVIDEOLPPAL",
		69:  "CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE",
		70:  "CARRIER_TYPE_FANPACK",
		71:  "CARRIER_TYPE_FILESYSTEM",
		72:  "CARRIER_TYPE_HDDVDVIDEOLP",
		73:  "CARRIER_TYPE_LASERDISCLP12INCHNTSC",
		74:  "CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP",
		75:  "CARRIER_TYPE_LPCOMPILATION",
		76:  "CARRIER_TYPE_LPIDENTICALTOCD",
		77:  "CARRIER_TYPE_MC",
		78:  "CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP",
		79:  "CARRIER_TYPE_MCCOMPILATION",
		80:  "CARRIER_TYPE_MCDOUBLELP",
		81:  "CARRIER_TYPE_MCEP",
		82:  "CARRIER_TYPE_MCIDENTICALTOCD",
		83:  "CARRIER_TYPE_MCLP",
		84:  "CARRIER_TYPE_MCMAXISINGLE",
		85:  "CARRIER_TYPE_MCREMIX",
		86:  "CARRIER_TYPE_MCSINGLE",
		87:  "CARRIER_TYPE_MCSINGLEIDENTICALTOCDS",
		88:  "CARRIER_TYPE_MEMORYDEVICE",
		89:  "CARRIER_TYPE_MEMORYDEVICEAUDIOLP",
		90:  "CARRIER_TYPE_MEMORYDEVICEMIXLP",
		91:  "CARRIER_TYPE_MEMORYDEVICEVIDEOLP",
		92:  "CARRIER_TYPE_MERCHANDISE",
		93:  "CARRIER_TYPE_MINIDISC",
		94:  "CARRIER_TYPE_MINIDISCCOMPILATION",
		95:  "CARRIER_TYPE_MINIDISCEP",
		96:  "CARRIER_TYPE_MINIDISCMAXIREMIX",
		97:  "CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE",
		98:  "CARRIER_TYPE_ONLINESYSTEM",
		99:  "CARRIER_TYPE_PREPAIDCARD",
		100: "CARRIER_TYPE_SACD",
		101: "CARRIER_TYPE_SACDCOMPILATION",
		102: "CARRIER_TYPE_SACDLPSTEREO",
		103: "CARRIER_TYPE_SACDLPSTEREOCDAUDIO",
		104: "CARRIER_TYPE_SACDLPSTEREOSURROUND",
		105: "CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO",
		106: "CARRIER_TYPE_SACDLPSURROUNDCDAUDIO",
		107: "CARRIER_TYPE_SACDPLUSDVDVIDEO",
		108: "CARRIER_TYPE_USERDEFINED",
		109: "CARRIER_TYPE_VHSNTSC",
		110: "CARRIER_TYPE_VHSPAL",
		111: "CARRIER_TYPE_VHSPLUSCDLP",
		112: "CARRIER_TYPE_VHSSECAM",
	}
	CarrierType_value = map[string]int32{
		"CARRIER_TYPE_UNSPECIFIED":                  0,
		"CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX":     1,
		"CARRIER_TYPE_E_33RPM10INCHLP":              2,
		"CARRIER_TYPE_E_33RPM10INCHSINGLE":          3,
		"CARRIER_TYPE_E_33RPM12INCHLP":              4,
		"CARRIER_TYPE_E_33RPM12INCHLP20TRACKS":      5,
		"CARRIER_TYPE_E_33RPM12INCHMAXISINGLE":      6,
		"CARRIER_TYPE_E_33RPM12INCHSINGLE":          7,
		"CARRIER_TYPE_E_33RPM7INCHLP":               8,
		"CARRIER_TYPE_E_33RPM7INCHSINGLE":           9,
		"CARRIER_TYPE_E_45RPM10INCHLP":              10,
		"CARRIER_TYPE_E_45RPM10INCHMAXISINGLE":      11,
		"CARRIER_TYPE_E_45RPM10INCHSINGLE":          12,
		"CARRIER_TYPE_E_45RPM12INCHLP":              13,
		"CARRIER_TYPE_E_45RPM12INCHMAXISINGLE":      14,
		"CARRIER_TYPE_E_45RPM12INCHSINGLE":          15,
		"CARRIER_TYPE_E_45RPM7INCHEP":               16,
		"CARRIER_TYPE_E_45RPM7INCHSINGLE":           17,
		"CARRIER_TYPE_E_7INCHMAXISINGLEREMIX":       18,
		"CARRIER_TYPE_BLURAY":                       19,
		"CARRIER_TYPE_CD":                           20,
		"CARRIER_TYPE_CDCOMPILATION":                21,
		"CARRIER_TYPE_CDEP":                         22,
		"CARRIER_TYPE_CDEPENHANCED":                 23,
		"CARRIER_TYPE_CDEXTRACOMPILATION":           24,
		"CARRIER_TYPE_CDEXTRAEP":                    25,
		"CARRIER_TYPE_CDEXTRALP":                    26,
		"CARRIER_TYPE_CDEXTRAMAXIREMIX":             27,
		"CARRIER_TYPE_CDEXTRAMAXISINGLE":            28,
		"CARRIER_TYPE_CDEXTRASINGLE":                29,
		"CARRIER_TYPE_CDEXTRASINGLE2TRACKS":         30,
		"CARRIER_TYPE_CDLP":                         31,
		"CARRIER_TYPE_CDLP5INCH":                    32,
		"CARRIER_TYPE_CDLPENHANCED":                 33,
		"CARRIER_TYPE_CDLPPLUSCDVIDEO":              34,
		"CARRIER_TYPE_CDLPPLUSDVDAUDIO":             35,
		"CARRIER_TYPE_CDLPPLUSDVDVIDEO":             36,
		"CARRIER_TYPE_CDLPPLUSWEB":                  37,
		"CARRIER_TYPE_CDMAXISINGLE":                 38,
		"CARRIER_TYPE_CDMAXISINGLE3INCH":            39,
		"CARRIER_TYPE_CDMAXISINGLEENHANCED":         40,
		"CARRIER_TYPE_CDMAXISINGLEREMIX":            41,
		"CARRIER_TYPE_CDPLUSCDBONUS":                42,
		"CARRIER_TYPE_CDPLUSDVDBONUS":               43,
		"CARRIER_TYPE_CDROM":                        44,
		"CARRIER_TYPE_CDSINGLE":                     45,
		"CARRIER_TYPE_CDSINGLE3INCH":                46,
		"CARRIER_TYPE_CDSINGLE5INCH":                47,
		"CARRIER_TYPE_CDVIDEO5LPNTSC":               48,
		"CARRIER_TYPE_CDVIDEO5LPPAL":                49,
		"CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE":       50,
		"CARRIER_TYPE_COMBIPACK":                    51,
		"CARRIER_TYPE_DCC":                          52,
		"CARRIER_TYPE_DCCCOMPILATION":               53,
		"CARRIER_TYPE_DUALDISC":                     54,
		"CARRIER_TYPE_DVD":                          55,
		"CARRIER_TYPE_DVDAUDIO":                     56,
		"CARRIER_TYPE_DVDAUDIO5MAXISINGLE":          57,
		"CARRIER_TYPE_DVDAUDIOLP":                   58,
		"CARRIER_TYPE_DVDAUDIOSINGLE":               59,
		"CARRIER_TYPE_DVDROM":                       60,
		"CARRIER_TYPE_DVDSINGLE":                    61,
		"CARRIER_TYPE_DVDVIDEO":                     62,
		"CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC":      63,
		"CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL":       64,
		"CARRIER_TYPE_DVDVIDEO5SINGLENTSC":          65,
		"CARRIER_TYPE_DVDVIDEO5SINGLEPAL":           66,
		"CARRIER_TYPE_DVDVIDEOLPNTSC":               67,
		"CARRIER_TYPE_DVDVIDEOLPPAL":                68,
		"CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE": 69,
		"CARRIER_TYPE_FANPACK":                      70,
		"CARRIER_TYPE_FILESYSTEM":                   71,
		"CARRIER_TYPE_HDDVDVIDEOLP":                 72,
		"CARRIER_TYPE_LASERDISCLP12INCHNTSC":        73,
		"CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP":      74,
		"CARRIER_TYPE_LPCOMPILATION":                75,
		"CARRIER_TYPE_LPIDENTICALTOCD":              76,
		"CARRIER_TYPE_MC":                           77,
		"CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP":      78,
		"CARRIER_TYPE_MCCOMPILATION":                79,
		"CARRIER_TYPE_MCDOUBLELP":                   80,
		"CARRIER_TYPE_MCEP":                         81,
		"CARRIER_TYPE_MCIDENTICALTOCD":              82,
		"CARRIER_TYPE_MCLP":                         83,
		"CARRIER_TYPE_MCMAXISINGLE":                 84,
		"CARRIER_TYPE_MCREMIX":                      85,
		"CARRIER_TYPE_MCSINGLE":                     86,
		"CARRIER_TYPE_MCSINGLEIDENTICALTOCDS":       87,
		"CARRIER_TYPE_MEMORYDEVICE":                 88,
		"CARRIER_TYPE_MEMORYDEVICEAUDIOLP":          89,
		"CARRIER_TYPE_MEMORYDEVICEMIXLP":            90,
		"CARRIER_TYPE_MEMORYDEVICEVIDEOLP":          91,
		"CARRIER_TYPE_MERCHANDISE":                  92,
		"CARRIER_TYPE_MINIDISC":                     93,
		"CARRIER_TYPE_MINIDISCCOMPILATION":          94,
		"CARRIER_TYPE_MINIDISCEP":                   95,
		"CARRIER_TYPE_MINIDISCMAXIREMIX":            96,
		"CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE":     97,
		"CARRIER_TYPE_ONLINESYSTEM":                 98,
		"CARRIER_TYPE_PREPAIDCARD":                  99,
		"CARRIER_TYPE_SACD":                         100,
		"CARRIER_TYPE_SACDCOMPILATION":              101,
		"CARRIER_TYPE_SACDLPSTEREO":                 102,
		"CARRIER_TYPE_SACDLPSTEREOCDAUDIO":          103,
		"CARRIER_TYPE_SACDLPSTEREOSURROUND":         104,
		"CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO":  105,
		"CARRIER_TYPE_SACDLPSURROUNDCDAUDIO":        106,
		"CARRIER_TYPE_SACDPLUSDVDVIDEO":             107,
		"CARRIER_TYPE_USERDEFINED":                  108,
		"CARRIER_TYPE_VHSNTSC":                      109,
		"CARRIER_TYPE_VHSPAL":                       110,
		"CARRIER_TYPE_VHSPLUSCDLP":                  111,
		"CARRIER_TYPE_VHSSECAM":                     112,
	}
)

func (x CarrierType) Enum() *CarrierType {
	p := new(CarrierType)
	*p = x
	return p
}

func (x CarrierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarrierType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[21].Descriptor()
}

func (CarrierType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[21]
}

func (x CarrierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarrierType.Descriptor instead.
func (CarrierType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{21}
}

type CatalogTransferAcknowledgementStatus int32

const (
	CatalogTransferAcknowledgementStatus_CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED  CatalogTransferAcknowledgementStatus = 0
	CatalogTransferAcknowledgementStatus_CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_ERROR        CatalogTransferAcknowledgementStatus = 1
	CatalogTransferAcknowledgementStatus_CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_FILERECEIVED CatalogTransferAcknowledgementStatus = 2
)

// Enum value maps for CatalogTransferAcknowledgementStatus.
var (
	CatalogTransferAcknowledgementStatus_name = map[int32]string{
		0: "CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED",
		1: "CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_ERROR",
		2: "CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_FILERECEIVED",
	}
	CatalogTransferAcknowledgementStatus_value = map[string]int32{
		"CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED":  0,
		"CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_ERROR":        1,
		"CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_FILERECEIVED": 2,
	}
)

func (x CatalogTransferAcknowledgementStatus) Enum() *CatalogTransferAcknowledgementStatus {
	p := new(CatalogTransferAcknowledgementStatus)
	*p = x
	return p
}

func (x CatalogTransferAcknowledgementStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CatalogTransferAcknowledgementStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[22].Descriptor()
}

func (CatalogTransferAcknowledgementStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[22]
}

func (x CatalogTransferAcknowledgementStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CatalogTransferAcknowledgementStatus.Descriptor instead.
func (CatalogTransferAcknowledgementStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{22}
}

type CatalogTransferStatus int32

const (
	CatalogTransferStatus_CATALOG_TRANSFER_STATUS_UNSPECIFIED CatalogTransferStatus = 0
	CatalogTransferStatus_CATALOG_TRANSFER_STATUS_CONFIRMED   CatalogTransferStatus = 1
	CatalogTransferStatus_CATALOG_TRANSFER_STATUS_PENDING     CatalogTransferStatus = 2
	CatalogTransferStatus_CATALOG_TRANSFER_STATUS_REJECTED    CatalogTransferStatus = 3
)

// Enum value maps for CatalogTransferStatus.
var (
	CatalogTransferStatus_name = map[int32]string{
		0: "CATALOG_TRANSFER_STATUS_UNSPECIFIED",
		1: "CATALOG_TRANSFER_STATUS_CONFIRMED",
		2: "CATALOG_TRANSFER_STATUS_PENDING",
		3: "CATALOG_TRANSFER_STATUS_REJECTED",
	}
	CatalogTransferStatus_value = map[string]int32{
		"CATALOG_TRANSFER_STATUS_UNSPECIFIED": 0,
		"CATALOG_TRANSFER_STATUS_CONFIRMED":   1,
		"CATALOG_TRANSFER_STATUS_PENDING":     2,
		"CATALOG_TRANSFER_STATUS_REJECTED":    3,
	}
)

func (x CatalogTransferStatus) Enum() *CatalogTransferStatus {
	p := new(CatalogTransferStatus)
	*p = x
	return p
}

func (x CatalogTransferStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CatalogTransferStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[23].Descriptor()
}

func (CatalogTransferStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[23]
}

func (x CatalogTransferStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CatalogTransferStatus.Descriptor instead.
func (CatalogTransferStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{23}
}

type CatalogTransferType int32

const (
	CatalogTransferType_CATALOG_TRANSFER_TYPE_UNSPECIFIED             CatalogTransferType = 0
	CatalogTransferType_CATALOG_TRANSFER_TYPE_STANDARDCATALOGTRANSFER CatalogTransferType = 1
	CatalogTransferType_CATALOG_TRANSFER_TYPE_USSTATUTORYREVERSION    CatalogTransferType = 2
)

// Enum value maps for CatalogTransferType.
var (
	CatalogTransferType_name = map[int32]string{
		0: "CATALOG_TRANSFER_TYPE_UNSPECIFIED",
		1: "CATALOG_TRANSFER_TYPE_STANDARDCATALOGTRANSFER",
		2: "CATALOG_TRANSFER_TYPE_USSTATUTORYREVERSION",
	}
	CatalogTransferType_value = map[string]int32{
		"CATALOG_TRANSFER_TYPE_UNSPECIFIED":             0,
		"CATALOG_TRANSFER_TYPE_STANDARDCATALOGTRANSFER": 1,
		"CATALOG_TRANSFER_TYPE_USSTATUTORYREVERSION":    2,
	}
)

func (x CatalogTransferType) Enum() *CatalogTransferType {
	p := new(CatalogTransferType)
	*p = x
	return p
}

func (x CatalogTransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CatalogTransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[24].Descriptor()
}

func (CatalogTransferType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[24]
}

func (x CatalogTransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CatalogTransferType.Descriptor instead.
func (CatalogTransferType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{24}
}

type CdProtectionType int32

const (
	CdProtectionType_CD_PROTECTION_TYPE_UNSPECIFIED  CdProtectionType = 0
	CdProtectionType_CD_PROTECTION_TYPE_CDS100       CdProtectionType = 1
	CdProtectionType_CD_PROTECTION_TYPE_CDS200       CdProtectionType = 2
	CdProtectionType_CD_PROTECTION_TYPE_CDS300       CdProtectionType = 3
	CdProtectionType_CD_PROTECTION_TYPE_KEY2AUDIO    CdProtectionType = 4
	CdProtectionType_CD_PROTECTION_TYPE_MEDIAMAXCD3  CdProtectionType = 5
	CdProtectionType_CD_PROTECTION_TYPE_NOTPROTECTED CdProtectionType = 6
	CdProtectionType_CD_PROTECTION_TYPE_UNKNOWN      CdProtectionType = 7
	CdProtectionType_CD_PROTECTION_TYPE_USERDEFINED  CdProtectionType = 8
)

// Enum value maps for CdProtectionType.
var (
	CdProtectionType_name = map[int32]string{
		0: "CD_PROTECTION_TYPE_UNSPECIFIED",
		1: "CD_PROTECTION_TYPE_CDS100",
		2: "CD_PROTECTION_TYPE_CDS200",
		3: "CD_PROTECTION_TYPE_CDS300",
		4: "CD_PROTECTION_TYPE_KEY2AUDIO",
		5: "CD_PROTECTION_TYPE_MEDIAMAXCD3",
		6: "CD_PROTECTION_TYPE_NOTPROTECTED",
		7: "CD_PROTECTION_TYPE_UNKNOWN",
		8: "CD_PROTECTION_TYPE_USERDEFINED",
	}
	CdProtectionType_value = map[string]int32{
		"CD_PROTECTION_TYPE_UNSPECIFIED":  0,
		"CD_PROTECTION_TYPE_CDS100":       1,
		"CD_PROTECTION_TYPE_CDS200":       2,
		"CD_PROTECTION_TYPE_CDS300":       3,
		"CD_PROTECTION_TYPE_KEY2AUDIO":    4,
		"CD_PROTECTION_TYPE_MEDIAMAXCD3":  5,
		"CD_PROTECTION_TYPE_NOTPROTECTED": 6,
		"CD_PROTECTION_TYPE_UNKNOWN":      7,
		"CD_PROTECTION_TYPE_USERDEFINED":  8,
	}
)

func (x CdProtectionType) Enum() *CdProtectionType {
	p := new(CdProtectionType)
	*p = x
	return p
}

func (x CdProtectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CdProtectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[25].Descriptor()
}

func (CdProtectionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[25]
}

func (x CdProtectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CdProtectionType.Descriptor instead.
func (CdProtectionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{25}
}

type CharacterType int32

const (
	CharacterType_CHARACTER_TYPE_UNSPECIFIED         CharacterType = 0
	CharacterType_CHARACTER_TYPE_MAINCHARACTER       CharacterType = 1
	CharacterType_CHARACTER_TYPE_OTHERCHARACTER      CharacterType = 2
	CharacterType_CHARACTER_TYPE_SUPPORTINGCHARACTER CharacterType = 3
)

// Enum value maps for CharacterType.
var (
	CharacterType_name = map[int32]string{
		0: "CHARACTER_TYPE_UNSPECIFIED",
		1: "CHARACTER_TYPE_MAINCHARACTER",
		2: "CHARACTER_TYPE_OTHERCHARACTER",
		3: "CHARACTER_TYPE_SUPPORTINGCHARACTER",
	}
	CharacterType_value = map[string]int32{
		"CHARACTER_TYPE_UNSPECIFIED":         0,
		"CHARACTER_TYPE_MAINCHARACTER":       1,
		"CHARACTER_TYPE_OTHERCHARACTER":      2,
		"CHARACTER_TYPE_SUPPORTINGCHARACTER": 3,
	}
)

func (x CharacterType) Enum() *CharacterType {
	p := new(CharacterType)
	*p = x
	return p
}

func (x CharacterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[26].Descriptor()
}

func (CharacterType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[26]
}

func (x CharacterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterType.Descriptor instead.
func (CharacterType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{26}
}

type ClaimBasis int32

const (
	ClaimBasis_CLAIM_BASIS_UNSPECIFIED ClaimBasis = 0
	ClaimBasis_CLAIM_BASIS_COPCON      ClaimBasis = 1
	ClaimBasis_CLAIM_BASIS_DIRECT      ClaimBasis = 2
	ClaimBasis_CLAIM_BASIS_UNMATCHED   ClaimBasis = 3
)

// Enum value maps for ClaimBasis.
var (
	ClaimBasis_name = map[int32]string{
		0: "CLAIM_BASIS_UNSPECIFIED",
		1: "CLAIM_BASIS_COPCON",
		2: "CLAIM_BASIS_DIRECT",
		3: "CLAIM_BASIS_UNMATCHED",
	}
	ClaimBasis_value = map[string]int32{
		"CLAIM_BASIS_UNSPECIFIED": 0,
		"CLAIM_BASIS_COPCON":      1,
		"CLAIM_BASIS_DIRECT":      2,
		"CLAIM_BASIS_UNMATCHED":   3,
	}
)

func (x ClaimBasis) Enum() *ClaimBasis {
	p := new(ClaimBasis)
	*p = x
	return p
}

func (x ClaimBasis) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClaimBasis) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[27].Descriptor()
}

func (ClaimBasis) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[27]
}

func (x ClaimBasis) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClaimBasis.Descriptor instead.
func (ClaimBasis) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{27}
}

type ClaimImpact int32

const (
	ClaimImpact_CLAIM_IMPACT_UNSPECIFIED ClaimImpact = 0
	ClaimImpact_CLAIM_IMPACT_CLAIM       ClaimImpact = 1
	ClaimImpact_CLAIM_IMPACT_CLAIMDELTA  ClaimImpact = 2
)

// Enum value maps for ClaimImpact.
var (
	ClaimImpact_name = map[int32]string{
		0: "CLAIM_IMPACT_UNSPECIFIED",
		1: "CLAIM_IMPACT_CLAIM",
		2: "CLAIM_IMPACT_CLAIMDELTA",
	}
	ClaimImpact_value = map[string]int32{
		"CLAIM_IMPACT_UNSPECIFIED": 0,
		"CLAIM_IMPACT_CLAIM":       1,
		"CLAIM_IMPACT_CLAIMDELTA":  2,
	}
)

func (x ClaimImpact) Enum() *ClaimImpact {
	p := new(ClaimImpact)
	*p = x
	return p
}

func (x ClaimImpact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClaimImpact) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[28].Descriptor()
}

func (ClaimImpact) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[28]
}

func (x ClaimImpact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClaimImpact.Descriptor instead.
func (ClaimImpact) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{28}
}

type ClaimStatus int32

const (
	ClaimStatus_CLAIM_STATUS_UNSPECIFIED          ClaimStatus = 0
	ClaimStatus_CLAIM_STATUS_COMPLETECLAIM        ClaimStatus = 1
	ClaimStatus_CLAIM_STATUS_COMPLETEUNDERCLAIM   ClaimStatus = 2
	ClaimStatus_CLAIM_STATUS_INCOMPLETECLAIM      ClaimStatus = 3
	ClaimStatus_CLAIM_STATUS_INCOMPLETEUNDERCLAIM ClaimStatus = 4
	ClaimStatus_CLAIM_STATUS_MAJOROVERCLAIM       ClaimStatus = 5
	ClaimStatus_CLAIM_STATUS_MINOROVERCLAIM       ClaimStatus = 6
	ClaimStatus_CLAIM_STATUS_OVERCLAIM            ClaimStatus = 7
	ClaimStatus_CLAIM_STATUS_UNDERCLAIM           ClaimStatus = 8
)

// Enum value maps for ClaimStatus.
var (
	ClaimStatus_name = map[int32]string{
		0: "CLAIM_STATUS_UNSPECIFIED",
		1: "CLAIM_STATUS_COMPLETECLAIM",
		2: "CLAIM_STATUS_COMPLETEUNDERCLAIM",
		3: "CLAIM_STATUS_INCOMPLETECLAIM",
		4: "CLAIM_STATUS_INCOMPLETEUNDERCLAIM",
		5: "CLAIM_STATUS_MAJOROVERCLAIM",
		6: "CLAIM_STATUS_MINOROVERCLAIM",
		7: "CLAIM_STATUS_OVERCLAIM",
		8: "CLAIM_STATUS_UNDERCLAIM",
	}
	ClaimStatus_value = map[string]int32{
		"CLAIM_STATUS_UNSPECIFIED":          0,
		"CLAIM_STATUS_COMPLETECLAIM":        1,
		"CLAIM_STATUS_COMPLETEUNDERCLAIM":   2,
		"CLAIM_STATUS_INCOMPLETECLAIM":      3,
		"CLAIM_STATUS_INCOMPLETEUNDERCLAIM": 4,
		"CLAIM_STATUS_MAJOROVERCLAIM":       5,
		"CLAIM_STATUS_MINOROVERCLAIM":       6,
		"CLAIM_STATUS_OVERCLAIM":            7,
		"CLAIM_STATUS_UNDERCLAIM":           8,
	}
)

func (x ClaimStatus) Enum() *ClaimStatus {
	p := new(ClaimStatus)
	*p = x
	return p
}

func (x ClaimStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClaimStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[29].Descriptor()
}

func (ClaimStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[29]
}

func (x ClaimStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClaimStatus.Descriptor instead.
func (ClaimStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{29}
}

type ClassifiedGenre int32

const (
	ClassifiedGenre_CLASSIFIED_GENRE_UNSPECIFIED     ClassifiedGenre = 0
	ClassifiedGenre_CLASSIFIED_GENRE_BLUES           ClassifiedGenre = 1
	ClassifiedGenre_CLASSIFIED_GENRE_CLASSICALMUSIC  ClassifiedGenre = 2
	ClassifiedGenre_CLASSIFIED_GENRE_COUNTRYMUSIC    ClassifiedGenre = 3
	ClassifiedGenre_CLASSIFIED_GENRE_ELECTRONICMUSIC ClassifiedGenre = 4
	ClassifiedGenre_CLASSIFIED_GENRE_FOLK            ClassifiedGenre = 5
	ClassifiedGenre_CLASSIFIED_GENRE_GOSPEL          ClassifiedGenre = 6
	ClassifiedGenre_CLASSIFIED_GENRE_HIPHOP          ClassifiedGenre = 7
	ClassifiedGenre_CLASSIFIED_GENRE_JAZZ            ClassifiedGenre = 8
	ClassifiedGenre_CLASSIFIED_GENRE_LATIN           ClassifiedGenre = 9
	ClassifiedGenre_CLASSIFIED_GENRE_POP             ClassifiedGenre = 10
	ClassifiedGenre_CLASSIFIED_GENRE_R_N_B           ClassifiedGenre = 11
	ClassifiedGenre_CLASSIFIED_GENRE_REGGAE          ClassifiedGenre = 12
	ClassifiedGenre_CLASSIFIED_GENRE_ROCK            ClassifiedGenre = 13
	ClassifiedGenre_CLASSIFIED_GENRE_SPOKEN          ClassifiedGenre = 14
	ClassifiedGenre_CLASSIFIED_GENRE_TRADITIONAL     ClassifiedGenre = 15
	ClassifiedGenre_CLASSIFIED_GENRE_USERDEFINED     ClassifiedGenre = 16
	ClassifiedGenre_CLASSIFIED_GENRE_WORLDMUSIC      ClassifiedGenre = 17
)

// Enum value maps for ClassifiedGenre.
var (
	ClassifiedGenre_name = map[int32]string{
		0:  "CLASSIFIED_GENRE_UNSPECIFIED",
		1:  "CLASSIFIED_GENRE_BLUES",
		2:  "CLASSIFIED_GENRE_CLASSICALMUSIC",
		3:  "CLASSIFIED_GENRE_COUNTRYMUSIC",
		4:  "CLASSIFIED_GENRE_ELECTRONICMUSIC",
		5:  "CLASSIFIED_GENRE_FOLK",
		6:  "CLASSIFIED_GENRE_GOSPEL",
		7:  "CLASSIFIED_GENRE_HIPHOP",
		8:  "CLASSIFIED_GENRE_JAZZ",
		9:  "CLASSIFIED_GENRE_LATIN",
		10: "CLASSIFIED_GENRE_POP",
		11: "CLASSIFIED_GENRE_R_N_B",
		12: "CLASSIFIED_GENRE_REGGAE",
		13: "CLASSIFIED_GENRE_ROCK",
		14: "CLASSIFIED_GENRE_SPOKEN",
		15: "CLASSIFIED_GENRE_TRADITIONAL",
		16: "CLASSIFIED_GENRE_USERDEFINED",
		17: "CLASSIFIED_GENRE_WORLDMUSIC",
	}
	ClassifiedGenre_value = map[string]int32{
		"CLASSIFIED_GENRE_UNSPECIFIED":     0,
		"CLASSIFIED_GENRE_BLUES":           1,
		"CLASSIFIED_GENRE_CLASSICALMUSIC":  2,
		"CLASSIFIED_GENRE_COUNTRYMUSIC":    3,
		"CLASSIFIED_GENRE_ELECTRONICMUSIC": 4,
		"CLASSIFIED_GENRE_FOLK":            5,
		"CLASSIFIED_GENRE_GOSPEL":          6,
		"CLASSIFIED_GENRE_HIPHOP":          7,
		"CLASSIFIED_GENRE_JAZZ":            8,
		"CLASSIFIED_GENRE_LATIN":           9,
		"CLASSIFIED_GENRE_POP":             10,
		"CLASSIFIED_GENRE_R_N_B":           11,
		"CLASSIFIED_GENRE_REGGAE":          12,
		"CLASSIFIED_GENRE_ROCK":            13,
		"CLASSIFIED_GENRE_SPOKEN":          14,
		"CLASSIFIED_GENRE_TRADITIONAL":     15,
		"CLASSIFIED_GENRE_USERDEFINED":     16,
		"CLASSIFIED_GENRE_WORLDMUSIC":      17,
	}
)

func (x ClassifiedGenre) Enum() *ClassifiedGenre {
	p := new(ClassifiedGenre)
	*p = x
	return p
}

func (x ClassifiedGenre) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClassifiedGenre) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[30].Descriptor()
}

func (ClassifiedGenre) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[30]
}

func (x ClassifiedGenre) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClassifiedGenre.Descriptor instead.
func (ClassifiedGenre) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{30}
}

type ClipType int32

const (
	ClipType_CLIP_TYPE_UNSPECIFIED    ClipType = 0
	ClipType_CLIP_TYPE_PREVIEW        ClipType = 1
	ClipType_CLIP_TYPE_STANDALONECLIP ClipType = 2
	ClipType_CLIP_TYPE_USERDEFINED    ClipType = 3
)

// Enum value maps for ClipType.
var (
	ClipType_name = map[int32]string{
		0: "CLIP_TYPE_UNSPECIFIED",
		1: "CLIP_TYPE_PREVIEW",
		2: "CLIP_TYPE_STANDALONECLIP",
		3: "CLIP_TYPE_USERDEFINED",
	}
	ClipType_value = map[string]int32{
		"CLIP_TYPE_UNSPECIFIED":    0,
		"CLIP_TYPE_PREVIEW":        1,
		"CLIP_TYPE_STANDALONECLIP": 2,
		"CLIP_TYPE_USERDEFINED":    3,
	}
)

func (x ClipType) Enum() *ClipType {
	p := new(ClipType)
	*p = x
	return p
}

func (x ClipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClipType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[31].Descriptor()
}

func (ClipType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[31]
}

func (x ClipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClipType.Descriptor instead.
func (ClipType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{31}
}

type CodingType int32

const (
	CodingType_CODING_TYPE_UNSPECIFIED CodingType = 0
	CodingType_CODING_TYPE_LOSSLESS    CodingType = 1
	CodingType_CODING_TYPE_LOSSY       CodingType = 2
)

// Enum value maps for CodingType.
var (
	CodingType_name = map[int32]string{
		0: "CODING_TYPE_UNSPECIFIED",
		1: "CODING_TYPE_LOSSLESS",
		2: "CODING_TYPE_LOSSY",
	}
	CodingType_value = map[string]int32{
		"CODING_TYPE_UNSPECIFIED": 0,
		"CODING_TYPE_LOSSLESS":    1,
		"CODING_TYPE_LOSSY":       2,
	}
)

func (x CodingType) Enum() *CodingType {
	p := new(CodingType)
	*p = x
	return p
}

func (x CodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[32].Descriptor()
}

func (CodingType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[32]
}

func (x CodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodingType.Descriptor instead.
func (CodingType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{32}
}

type CollectionMandateType int32

const (
	CollectionMandateType_COLLECTION_MANDATE_TYPE_UNSPECIFIED        CollectionMandateType = 0
	CollectionMandateType_COLLECTION_MANDATE_TYPE_PERFORMER          CollectionMandateType = 1
	CollectionMandateType_COLLECTION_MANDATE_TYPE_RIGHTSORGANIZATION CollectionMandateType = 2
)

// Enum value maps for CollectionMandateType.
var (
	CollectionMandateType_name = map[int32]string{
		0: "COLLECTION_MANDATE_TYPE_UNSPECIFIED",
		1: "COLLECTION_MANDATE_TYPE_PERFORMER",
		2: "COLLECTION_MANDATE_TYPE_RIGHTSORGANIZATION",
	}
	CollectionMandateType_value = map[string]int32{
		"COLLECTION_MANDATE_TYPE_UNSPECIFIED":        0,
		"COLLECTION_MANDATE_TYPE_PERFORMER":          1,
		"COLLECTION_MANDATE_TYPE_RIGHTSORGANIZATION": 2,
	}
)

func (x CollectionMandateType) Enum() *CollectionMandateType {
	p := new(CollectionMandateType)
	*p = x
	return p
}

func (x CollectionMandateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectionMandateType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[33].Descriptor()
}

func (CollectionMandateType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[33]
}

func (x CollectionMandateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectionMandateType.Descriptor instead.
func (CollectionMandateType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{33}
}

type CommercialModelType int32

const (
	CommercialModelType_COMMERCIAL_MODEL_TYPE_UNSPECIFIED                 CommercialModelType = 0
	CommercialModelType_COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL CommercialModelType = 1
	CommercialModelType_COMMERCIAL_MODEL_TYPE_ASPERCONTRACT               CommercialModelType = 2
	CommercialModelType_COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL              CommercialModelType = 3
	CommercialModelType_COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL           CommercialModelType = 4
	CommercialModelType_COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL             CommercialModelType = 5
	CommercialModelType_COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL   CommercialModelType = 6
	CommercialModelType_COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL            CommercialModelType = 7
	CommercialModelType_COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL           CommercialModelType = 8
	CommercialModelType_COMMERCIAL_MODEL_TYPE_UNKNOWN                     CommercialModelType = 9
	CommercialModelType_COMMERCIAL_MODEL_TYPE_USERDEFINED                 CommercialModelType = 10
)

// Enum value maps for CommercialModelType.
var (
	CommercialModelType_name = map[int32]string{
		0:  "COMMERCIAL_MODEL_TYPE_UNSPECIFIED",
		1:  "COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL",
		2:  "COMMERCIAL_MODEL_TYPE_ASPERCONTRACT",
		3:  "COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL",
		4:  "COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL",
		5:  "COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL",
		6:  "COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL",
		7:  "COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL",
		8:  "COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL",
		9:  "COMMERCIAL_MODEL_TYPE_UNKNOWN",
		10: "COMMERCIAL_MODEL_TYPE_USERDEFINED",
	}
	CommercialModelType_value = map[string]int32{
		"COMMERCIAL_MODEL_TYPE_UNSPECIFIED":                 0,
		"COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL": 1,
		"COMMERCIAL_MODEL_TYPE_ASPERCONTRACT":               2,
		"COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL":              3,
		"COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL":           4,
		"COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL":             5,
		"COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL":   6,
		"COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL":            7,
		"COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL":           8,
		"COMMERCIAL_MODEL_TYPE_UNKNOWN":                     9,
		"COMMERCIAL_MODEL_TYPE_USERDEFINED":                 10,
	}
)

func (x CommercialModelType) Enum() *CommercialModelType {
	p := new(CommercialModelType)
	*p = x
	return p
}

func (x CommercialModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommercialModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[34].Descriptor()
}

func (CommercialModelType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[34]
}

func (x CommercialModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommercialModelType.Descriptor instead.
func (CommercialModelType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{34}
}

type CommercialModelTypeERN int32

const (
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_UNSPECIFIED                 CommercialModelTypeERN = 0
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_ADVERTISEMENTSUPPORTEDMODEL CommercialModelTypeERN = 1
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_DEVICEFEEMODEL              CommercialModelTypeERN = 2
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_FREEOFCHARGEMODEL           CommercialModelTypeERN = 3
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_PAYASYOUGOMODEL             CommercialModelTypeERN = 4
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_PERFORMANCEROYALTIESMODEL   CommercialModelTypeERN = 5
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_RIGHTSCLAIMMODEL            CommercialModelTypeERN = 6
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_SUBSCRIPTIONMODEL           CommercialModelTypeERN = 7
	CommercialModelTypeERN_COMMERCIAL_MODEL_TYPE_E_R_N_USERDEFINED                 CommercialModelTypeERN = 8
)

// Enum value maps for CommercialModelTypeERN.
var (
	CommercialModelTypeERN_name = map[int32]string{
		0: "COMMERCIAL_MODEL_TYPE_E_R_N_UNSPECIFIED",
		1: "COMMERCIAL_MODEL_TYPE_E_R_N_ADVERTISEMENTSUPPORTEDMODEL",
		2: "COMMERCIAL_MODEL_TYPE_E_R_N_DEVICEFEEMODEL",
		3: "COMMERCIAL_MODEL_TYPE_E_R_N_FREEOFCHARGEMODEL",
		4: "COMMERCIAL_MODEL_TYPE_E_R_N_PAYASYOUGOMODEL",
		5: "COMMERCIAL_MODEL_TYPE_E_R_N_PERFORMANCEROYALTIESMODEL",
		6: "COMMERCIAL_MODEL_TYPE_E_R_N_RIGHTSCLAIMMODEL",
		7: "COMMERCIAL_MODEL_TYPE_E_R_N_SUBSCRIPTIONMODEL",
		8: "COMMERCIAL_MODEL_TYPE_E_R_N_USERDEFINED",
	}
	CommercialModelTypeERN_value = map[string]int32{
		"COMMERCIAL_MODEL_TYPE_E_R_N_UNSPECIFIED":                 0,
		"COMMERCIAL_MODEL_TYPE_E_R_N_ADVERTISEMENTSUPPORTEDMODEL": 1,
		"COMMERCIAL_MODEL_TYPE_E_R_N_DEVICEFEEMODEL":              2,
		"COMMERCIAL_MODEL_TYPE_E_R_N_FREEOFCHARGEMODEL":           3,
		"COMMERCIAL_MODEL_TYPE_E_R_N_PAYASYOUGOMODEL":             4,
		"COMMERCIAL_MODEL_TYPE_E_R_N_PERFORMANCEROYALTIESMODEL":   5,
		"COMMERCIAL_MODEL_TYPE_E_R_N_RIGHTSCLAIMMODEL":            6,
		"COMMERCIAL_MODEL_TYPE_E_R_N_SUBSCRIPTIONMODEL":           7,
		"COMMERCIAL_MODEL_TYPE_E_R_N_USERDEFINED":                 8,
	}
)

func (x CommercialModelTypeERN) Enum() *CommercialModelTypeERN {
	p := new(CommercialModelTypeERN)
	*p = x
	return p
}

func (x CommercialModelTypeERN) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommercialModelTypeERN) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[35].Descriptor()
}

func (CommercialModelTypeERN) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[35]
}

func (x CommercialModelTypeERN) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommercialModelTypeERN.Descriptor instead.
func (CommercialModelTypeERN) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{35}
}

type CommercialModelTypeMWNL int32

const (
	CommercialModelTypeMWNL_COMMERCIAL_MODEL_TYPE_M_W_N_L_UNSPECIFIED                 CommercialModelTypeMWNL = 0
	CommercialModelTypeMWNL_COMMERCIAL_MODEL_TYPE_M_W_N_L_ADVERTISEMENTSUPPORTEDMODEL CommercialModelTypeMWNL = 1
	CommercialModelTypeMWNL_COMMERCIAL_MODEL_TYPE_M_W_N_L_PAYASYOUGOMODEL             CommercialModelTypeMWNL = 2
	CommercialModelTypeMWNL_COMMERCIAL_MODEL_TYPE_M_W_N_L_SUBSCRIPTIONMODEL           CommercialModelTypeMWNL = 3
)

// Enum value maps for CommercialModelTypeMWNL.
var (
	CommercialModelTypeMWNL_name = map[int32]string{
		0: "COMMERCIAL_MODEL_TYPE_M_W_N_L_UNSPECIFIED",
		1: "COMMERCIAL_MODEL_TYPE_M_W_N_L_ADVERTISEMENTSUPPORTEDMODEL",
		2: "COMMERCIAL_MODEL_TYPE_M_W_N_L_PAYASYOUGOMODEL",
		3: "COMMERCIAL_MODEL_TYPE_M_W_N_L_SUBSCRIPTIONMODEL",
	}
	CommercialModelTypeMWNL_value = map[string]int32{
		"COMMERCIAL_MODEL_TYPE_M_W_N_L_UNSPECIFIED":                 0,
		"COMMERCIAL_MODEL_TYPE_M_W_N_L_ADVERTISEMENTSUPPORTEDMODEL": 1,
		"COMMERCIAL_MODEL_TYPE_M_W_N_L_PAYASYOUGOMODEL":             2,
		"COMMERCIAL_MODEL_TYPE_M_W_N_L_SUBSCRIPTIONMODEL":           3,
	}
)

func (x CommercialModelTypeMWNL) Enum() *CommercialModelTypeMWNL {
	p := new(CommercialModelTypeMWNL)
	*p = x
	return p
}

func (x CommercialModelTypeMWNL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommercialModelTypeMWNL) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[36].Descriptor()
}

func (CommercialModelTypeMWNL) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[36]
}

func (x CommercialModelTypeMWNL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommercialModelTypeMWNL.Descriptor instead.
func (CommercialModelTypeMWNL) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{36}
}

type CompilationType int32

const (
	CompilationType_COMPILATION_TYPE_UNSPECIFIED            CompilationType = 0
	CompilationType_COMPILATION_TYPE_INTERNALCOMPILATION    CompilationType = 1
	CompilationType_COMPILATION_TYPE_NONINTERNALCOMPILATION CompilationType = 2
	CompilationType_COMPILATION_TYPE_NOTCOMPILED            CompilationType = 3
)

// Enum value maps for CompilationType.
var (
	CompilationType_name = map[int32]string{
		0: "COMPILATION_TYPE_UNSPECIFIED",
		1: "COMPILATION_TYPE_INTERNALCOMPILATION",
		2: "COMPILATION_TYPE_NONINTERNALCOMPILATION",
		3: "COMPILATION_TYPE_NOTCOMPILED",
	}
	CompilationType_value = map[string]int32{
		"COMPILATION_TYPE_UNSPECIFIED":            0,
		"COMPILATION_TYPE_INTERNALCOMPILATION":    1,
		"COMPILATION_TYPE_NONINTERNALCOMPILATION": 2,
		"COMPILATION_TYPE_NOTCOMPILED":            3,
	}
)

func (x CompilationType) Enum() *CompilationType {
	p := new(CompilationType)
	*p = x
	return p
}

func (x CompilationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompilationType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[37].Descriptor()
}

func (CompilationType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[37]
}

func (x CompilationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompilationType.Descriptor instead.
func (CompilationType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{37}
}

type CompositeMusicalWorkType int32

const (
	CompositeMusicalWorkType_COMPOSITE_MUSICAL_WORK_TYPE_UNSPECIFIED CompositeMusicalWorkType = 0
	CompositeMusicalWorkType_COMPOSITE_MUSICAL_WORK_TYPE_MEDLEY      CompositeMusicalWorkType = 1
	CompositeMusicalWorkType_COMPOSITE_MUSICAL_WORK_TYPE_NEITHER     CompositeMusicalWorkType = 2
	CompositeMusicalWorkType_COMPOSITE_MUSICAL_WORK_TYPE_POTPOURRI   CompositeMusicalWorkType = 3
)

// Enum value maps for CompositeMusicalWorkType.
var (
	CompositeMusicalWorkType_name = map[int32]string{
		0: "COMPOSITE_MUSICAL_WORK_TYPE_UNSPECIFIED",
		1: "COMPOSITE_MUSICAL_WORK_TYPE_MEDLEY",
		2: "COMPOSITE_MUSICAL_WORK_TYPE_NEITHER",
		3: "COMPOSITE_MUSICAL_WORK_TYPE_POTPOURRI",
	}
	CompositeMusicalWorkType_value = map[string]int32{
		"COMPOSITE_MUSICAL_WORK_TYPE_UNSPECIFIED": 0,
		"COMPOSITE_MUSICAL_WORK_TYPE_MEDLEY":      1,
		"COMPOSITE_MUSICAL_WORK_TYPE_NEITHER":     2,
		"COMPOSITE_MUSICAL_WORK_TYPE_POTPOURRI":   3,
	}
)

func (x CompositeMusicalWorkType) Enum() *CompositeMusicalWorkType {
	p := new(CompositeMusicalWorkType)
	*p = x
	return p
}

func (x CompositeMusicalWorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompositeMusicalWorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[38].Descriptor()
}

func (CompositeMusicalWorkType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[38]
}

func (x CompositeMusicalWorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompositeMusicalWorkType.Descriptor instead.
func (CompositeMusicalWorkType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{38}
}

type Confidentiality int32

const (
	Confidentiality_CONFIDENTIALITY_UNSPECIFIED Confidentiality = 0
	Confidentiality_CONFIDENTIALITY_DONOTSHARE  Confidentiality = 1
	Confidentiality_CONFIDENTIALITY_MAYBESHARED Confidentiality = 2
)

// Enum value maps for Confidentiality.
var (
	Confidentiality_name = map[int32]string{
		0: "CONFIDENTIALITY_UNSPECIFIED",
		1: "CONFIDENTIALITY_DONOTSHARE",
		2: "CONFIDENTIALITY_MAYBESHARED",
	}
	Confidentiality_value = map[string]int32{
		"CONFIDENTIALITY_UNSPECIFIED": 0,
		"CONFIDENTIALITY_DONOTSHARE":  1,
		"CONFIDENTIALITY_MAYBESHARED": 2,
	}
)

func (x Confidentiality) Enum() *Confidentiality {
	p := new(Confidentiality)
	*p = x
	return p
}

func (x Confidentiality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Confidentiality) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[39].Descriptor()
}

func (Confidentiality) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[39]
}

func (x Confidentiality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Confidentiality.Descriptor instead.
func (Confidentiality) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{39}
}

type ConsumerEngagementAnomalyType int32

const (
	ConsumerEngagementAnomalyType_CONSUMER_ENGAGEMENT_ANOMALY_TYPE_UNSPECIFIED               ConsumerEngagementAnomalyType = 0
	ConsumerEngagementAnomalyType_CONSUMER_ENGAGEMENT_ANOMALY_TYPE_CONSUMERENGAGEMENTANOMALY ConsumerEngagementAnomalyType = 1
	ConsumerEngagementAnomalyType_CONSUMER_ENGAGEMENT_ANOMALY_TYPE_USERACCOUNTANOMALY        ConsumerEngagementAnomalyType = 2
	ConsumerEngagementAnomalyType_CONSUMER_ENGAGEMENT_ANOMALY_TYPE_USERDEFINED               ConsumerEngagementAnomalyType = 3
)

// Enum value maps for ConsumerEngagementAnomalyType.
var (
	ConsumerEngagementAnomalyType_name = map[int32]string{
		0: "CONSUMER_ENGAGEMENT_ANOMALY_TYPE_UNSPECIFIED",
		1: "CONSUMER_ENGAGEMENT_ANOMALY_TYPE_CONSUMERENGAGEMENTANOMALY",
		2: "CONSUMER_ENGAGEMENT_ANOMALY_TYPE_USERACCOUNTANOMALY",
		3: "CONSUMER_ENGAGEMENT_ANOMALY_TYPE_USERDEFINED",
	}
	ConsumerEngagementAnomalyType_value = map[string]int32{
		"CONSUMER_ENGAGEMENT_ANOMALY_TYPE_UNSPECIFIED":               0,
		"CONSUMER_ENGAGEMENT_ANOMALY_TYPE_CONSUMERENGAGEMENTANOMALY": 1,
		"CONSUMER_ENGAGEMENT_ANOMALY_TYPE_USERACCOUNTANOMALY":        2,
		"CONSUMER_ENGAGEMENT_ANOMALY_TYPE_USERDEFINED":               3,
	}
)

func (x ConsumerEngagementAnomalyType) Enum() *ConsumerEngagementAnomalyType {
	p := new(ConsumerEngagementAnomalyType)
	*p = x
	return p
}

func (x ConsumerEngagementAnomalyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsumerEngagementAnomalyType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[40].Descriptor()
}

func (ConsumerEngagementAnomalyType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[40]
}

func (x ConsumerEngagementAnomalyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsumerEngagementAnomalyType.Descriptor instead.
func (ConsumerEngagementAnomalyType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{40}
}

type ContainerFormat int32

const (
	ContainerFormat_CONTAINER_FORMAT_UNSPECIFIED ContainerFormat = 0
	ContainerFormat_CONTAINER_FORMAT_AIFF        ContainerFormat = 1
	ContainerFormat_CONTAINER_FORMAT_AVI         ContainerFormat = 2
	ContainerFormat_CONTAINER_FORMAT_MP4         ContainerFormat = 3
	ContainerFormat_CONTAINER_FORMAT_OGG         ContainerFormat = 4
	ContainerFormat_CONTAINER_FORMAT_QUICKTIME   ContainerFormat = 5
	ContainerFormat_CONTAINER_FORMAT_REALMEDIA   ContainerFormat = 6
	ContainerFormat_CONTAINER_FORMAT_RMF         ContainerFormat = 7
	ContainerFormat_CONTAINER_FORMAT_USERDEFINED ContainerFormat = 8
	ContainerFormat_CONTAINER_FORMAT_WAV         ContainerFormat = 9
)

// Enum value maps for ContainerFormat.
var (
	ContainerFormat_name = map[int32]string{
		0: "CONTAINER_FORMAT_UNSPECIFIED",
		1: "CONTAINER_FORMAT_AIFF",
		2: "CONTAINER_FORMAT_AVI",
		3: "CONTAINER_FORMAT_MP4",
		4: "CONTAINER_FORMAT_OGG",
		5: "CONTAINER_FORMAT_QUICKTIME",
		6: "CONTAINER_FORMAT_REALMEDIA",
		7: "CONTAINER_FORMAT_RMF",
		8: "CONTAINER_FORMAT_USERDEFINED",
		9: "CONTAINER_FORMAT_WAV",
	}
	ContainerFormat_value = map[string]int32{
		"CONTAINER_FORMAT_UNSPECIFIED": 0,
		"CONTAINER_FORMAT_AIFF":        1,
		"CONTAINER_FORMAT_AVI":         2,
		"CONTAINER_FORMAT_MP4":         3,
		"CONTAINER_FORMAT_OGG":         4,
		"CONTAINER_FORMAT_QUICKTIME":   5,
		"CONTAINER_FORMAT_REALMEDIA":   6,
		"CONTAINER_FORMAT_RMF":         7,
		"CONTAINER_FORMAT_USERDEFINED": 8,
		"CONTAINER_FORMAT_WAV":         9,
	}
)

func (x ContainerFormat) Enum() *ContainerFormat {
	p := new(ContainerFormat)
	*p = x
	return p
}

func (x ContainerFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[41].Descriptor()
}

func (ContainerFormat) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[41]
}

func (x ContainerFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerFormat.Descriptor instead.
func (ContainerFormat) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{41}
}

type ContainsAI int32

const (
	ContainsAI_CONTAINS_A_I_UNSPECIFIED ContainsAI = 0
	ContainsAI_CONTAINS_A_I_ALL         ContainsAI = 1
	ContainsAI_CONTAINS_A_I_NONE        ContainsAI = 2
	ContainsAI_CONTAINS_A_I_PARTLY      ContainsAI = 3
)

// Enum value maps for ContainsAI.
var (
	ContainsAI_name = map[int32]string{
		0: "CONTAINS_A_I_UNSPECIFIED",
		1: "CONTAINS_A_I_ALL",
		2: "CONTAINS_A_I_NONE",
		3: "CONTAINS_A_I_PARTLY",
	}
	ContainsAI_value = map[string]int32{
		"CONTAINS_A_I_UNSPECIFIED": 0,
		"CONTAINS_A_I_ALL":         1,
		"CONTAINS_A_I_NONE":        2,
		"CONTAINS_A_I_PARTLY":      3,
	}
)

func (x ContainsAI) Enum() *ContainsAI {
	p := new(ContainsAI)
	*p = x
	return p
}

func (x ContainsAI) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainsAI) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[42].Descriptor()
}

func (ContainsAI) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[42]
}

func (x ContainsAI) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainsAI.Descriptor instead.
func (ContainsAI) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{42}
}

type ContributorClaimStatus int32

const (
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_UNSPECIFIED      ContributorClaimStatus = 0
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_ACCEPTED         ContributorClaimStatus = 1
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_CONFLICT         ContributorClaimStatus = 2
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_DATAINCONSISTENT ContributorClaimStatus = 3
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_NOCONFLICT       ContributorClaimStatus = 4
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_PENDINGREVIEW    ContributorClaimStatus = 5
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_REJECTED         ContributorClaimStatus = 6
	ContributorClaimStatus_CONTRIBUTOR_CLAIM_STATUS_REVOKED          ContributorClaimStatus = 7
)

// Enum value maps for ContributorClaimStatus.
var (
	ContributorClaimStatus_name = map[int32]string{
		0: "CONTRIBUTOR_CLAIM_STATUS_UNSPECIFIED",
		1: "CONTRIBUTOR_CLAIM_STATUS_ACCEPTED",
		2: "CONTRIBUTOR_CLAIM_STATUS_CONFLICT",
		3: "CONTRIBUTOR_CLAIM_STATUS_DATAINCONSISTENT",
		4: "CONTRIBUTOR_CLAIM_STATUS_NOCONFLICT",
		5: "CONTRIBUTOR_CLAIM_STATUS_PENDINGREVIEW",
		6: "CONTRIBUTOR_CLAIM_STATUS_REJECTED",
		7: "CONTRIBUTOR_CLAIM_STATUS_REVOKED",
	}
	ContributorClaimStatus_value = map[string]int32{
		"CONTRIBUTOR_CLAIM_STATUS_UNSPECIFIED":      0,
		"CONTRIBUTOR_CLAIM_STATUS_ACCEPTED":         1,
		"CONTRIBUTOR_CLAIM_STATUS_CONFLICT":         2,
		"CONTRIBUTOR_CLAIM_STATUS_DATAINCONSISTENT": 3,
		"CONTRIBUTOR_CLAIM_STATUS_NOCONFLICT":       4,
		"CONTRIBUTOR_CLAIM_STATUS_PENDINGREVIEW":    5,
		"CONTRIBUTOR_CLAIM_STATUS_REJECTED":         6,
		"CONTRIBUTOR_CLAIM_STATUS_REVOKED":          7,
	}
)

func (x ContributorClaimStatus) Enum() *ContributorClaimStatus {
	p := new(ContributorClaimStatus)
	*p = x
	return p
}

func (x ContributorClaimStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContributorClaimStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[43].Descriptor()
}

func (ContributorClaimStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[43]
}

func (x ContributorClaimStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContributorClaimStatus.Descriptor instead.
func (ContributorClaimStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{43}
}

type ContributorRole int32

const (
	ContributorRole_CONTRIBUTOR_ROLE_UNSPECIFIED                        ContributorRole = 0
	ContributorRole_CONTRIBUTOR_ROLE_ADAPTER                            ContributorRole = 1
	ContributorRole_CONTRIBUTOR_ROLE_ARCHITECT                          ContributorRole = 2
	ContributorRole_CONTRIBUTOR_ROLE_ARRANGER                           ContributorRole = 3
	ContributorRole_CONTRIBUTOR_ROLE_AUTHOR                             ContributorRole = 4
	ContributorRole_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS                 ContributorRole = 5
	ContributorRole_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD                  ContributorRole = 6
	ContributorRole_CONTRIBUTOR_ROLE_COMPILER                           ContributorRole = 7
	ContributorRole_CONTRIBUTOR_ROLE_COMPOSER                           ContributorRole = 8
	ContributorRole_CONTRIBUTOR_ROLE_COMPOSERLYRICIST                   ContributorRole = 9
	ContributorRole_CONTRIBUTOR_ROLE_CONCEPTOR                          ContributorRole = 10
	ContributorRole_CONTRIBUTOR_ROLE_CREATOR                            ContributorRole = 11
	ContributorRole_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR                     ContributorRole = 12
	ContributorRole_CONTRIBUTOR_ROLE_DISSERTANT                         ContributorRole = 13
	ContributorRole_CONTRIBUTOR_ROLE_ENGRAVER                           ContributorRole = 14
	ContributorRole_CONTRIBUTOR_ROLE_ETCHER                             ContributorRole = 15
	ContributorRole_CONTRIBUTOR_ROLE_JOURNALIST                         ContributorRole = 16
	ContributorRole_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT                 ContributorRole = 17
	ContributorRole_CONTRIBUTOR_ROLE_LIBRETTIST                         ContributorRole = 18
	ContributorRole_CONTRIBUTOR_ROLE_LITHOGRAPHER                       ContributorRole = 19
	ContributorRole_CONTRIBUTOR_ROLE_LYRICIST                           ContributorRole = 20
	ContributorRole_CONTRIBUTOR_ROLE_METALENGRAVER                      ContributorRole = 21
	ContributorRole_CONTRIBUTOR_ROLE_NONLYRICAUTHOR                     ContributorRole = 22
	ContributorRole_CONTRIBUTOR_ROLE_PLATEMAKER                         ContributorRole = 23
	ContributorRole_CONTRIBUTOR_ROLE_PLAYWRIGHT                         ContributorRole = 24
	ContributorRole_CONTRIBUTOR_ROLE_REPORTER                           ContributorRole = 25
	ContributorRole_CONTRIBUTOR_ROLE_REVIEWER                           ContributorRole = 26
	ContributorRole_CONTRIBUTOR_ROLE_RUBRICATOR                         ContributorRole = 27
	ContributorRole_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR                   ContributorRole = 28
	ContributorRole_CONTRIBUTOR_ROLE_SCULPTOR                           ContributorRole = 29
	ContributorRole_CONTRIBUTOR_ROLE_SUBARRANGER                        ContributorRole = 30
	ContributorRole_CONTRIBUTOR_ROLE_SUBLYRICIST                        ContributorRole = 31
	ContributorRole_CONTRIBUTOR_ROLE_TRANSLATOR                         ContributorRole = 32
	ContributorRole_CONTRIBUTOR_ROLE_WOODCUTTER                         ContributorRole = 33
	ContributorRole_CONTRIBUTOR_ROLE_WOODENGRAVER                       ContributorRole = 34
	ContributorRole_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL       ContributorRole = 35
	ContributorRole_CONTRIBUTOR_ROLE_BOOKPUBLISHER                      ContributorRole = 36
	ContributorRole_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT                  ContributorRole = 37
	ContributorRole_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER                    ContributorRole = 38
	ContributorRole_CONTRIBUTOR_ROLE_MUSICPUBLISHER                     ContributorRole = 39
	ContributorRole_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER                 ContributorRole = 40
	ContributorRole_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER                  ContributorRole = 41
	ContributorRole_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER                ContributorRole = 42
	ContributorRole_CONTRIBUTOR_ROLE_SUBPUBLISHER                       ContributorRole = 43
	ContributorRole_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER               ContributorRole = 44
	ContributorRole_CONTRIBUTOR_ROLE_UNKNOWN                            ContributorRole = 45
	ContributorRole_CONTRIBUTOR_ROLE_USERDEFINED                        ContributorRole = 46
	ContributorRole_CONTRIBUTOR_ROLE_ACCOMPANYIST                       ContributorRole = 47
	ContributorRole_CONTRIBUTOR_ROLE_ACTOR                              ContributorRole = 48
	ContributorRole_CONTRIBUTOR_ROLE_ADDITIONALENGINEER                 ContributorRole = 49
	ContributorRole_CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER           ContributorRole = 50
	ContributorRole_CONTRIBUTOR_ROLE_ADDITIONALPERFORMER                ContributorRole = 51
	ContributorRole_CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER      ContributorRole = 52
	ContributorRole_CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER           ContributorRole = 53
	ContributorRole_CONTRIBUTOR_ROLE_ANCHORPERSON                       ContributorRole = 54
	ContributorRole_CONTRIBUTOR_ROLE_ANIMALTRAINER                      ContributorRole = 55
	ContributorRole_CONTRIBUTOR_ROLE_ANIMATOR                           ContributorRole = 56
	ContributorRole_CONTRIBUTOR_ROLE_ANNOTATOR                          ContributorRole = 57
	ContributorRole_CONTRIBUTOR_ROLE_ANNOUNCER                          ContributorRole = 58
	ContributorRole_CONTRIBUTOR_ROLE_AANDRADMINISTRATOR                 ContributorRole = 59
	ContributorRole_CONTRIBUTOR_ROLE_AANDRCOORDINATOR                   ContributorRole = 60
	ContributorRole_CONTRIBUTOR_ROLE_ARMOURER                           ContributorRole = 61
	ContributorRole_CONTRIBUTOR_ROLE_ARTCOPYIST                         ContributorRole = 62
	ContributorRole_CONTRIBUTOR_ROLE_ARTDIRECTOR                        ContributorRole = 63
	ContributorRole_CONTRIBUTOR_ROLE_ARTIST                             ContributorRole = 64
	ContributorRole_CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER      ContributorRole = 65
	ContributorRole_CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER                ContributorRole = 66
	ContributorRole_CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER          ContributorRole = 67
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR            ContributorRole = 68
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN   ContributorRole = 69
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR                 ContributorRole = 70
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR                  ContributorRole = 71
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTEDITOR                    ContributorRole = 72
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTENGINEER                  ContributorRole = 73
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTPRODUCER                  ContributorRole = 74
	ContributorRole_CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR              ContributorRole = 75
	ContributorRole_CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER                ContributorRole = 76
	ContributorRole_CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER                  ContributorRole = 77
	ContributorRole_CONTRIBUTOR_ROLE_AURALTRAINER                       ContributorRole = 78
	ContributorRole_CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST                 ContributorRole = 79
	ContributorRole_CONTRIBUTOR_ROLE_BALANCEENGINEER                    ContributorRole = 80
	ContributorRole_CONTRIBUTOR_ROLE_BANDLEADER                         ContributorRole = 81
	ContributorRole_CONTRIBUTOR_ROLE_BINDER                             ContributorRole = 82
	ContributorRole_CONTRIBUTOR_ROLE_BINDINGDESIGNER                    ContributorRole = 83
	ContributorRole_CONTRIBUTOR_ROLE_BOOKDESIGNER                       ContributorRole = 84
	ContributorRole_CONTRIBUTOR_ROLE_BOOKJACKDESIGNER                   ContributorRole = 85
	ContributorRole_CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER                  ContributorRole = 86
	ContributorRole_CONTRIBUTOR_ROLE_BOOKPRODUCER                       ContributorRole = 87
	ContributorRole_CONTRIBUTOR_ROLE_BROADCASTASSISTANT                 ContributorRole = 88
	ContributorRole_CONTRIBUTOR_ROLE_BROADCASTJOURNALIST                ContributorRole = 89
	ContributorRole_CONTRIBUTOR_ROLE_CALLIGRAPHER                       ContributorRole = 90
	ContributorRole_CONTRIBUTOR_ROLE_CAMERAOPERATOR                     ContributorRole = 91
	ContributorRole_CONTRIBUTOR_ROLE_CARPENTER                          ContributorRole = 92
	ContributorRole_CONTRIBUTOR_ROLE_CARTOGRAPHER                       ContributorRole = 93
	ContributorRole_CONTRIBUTOR_ROLE_CARTOONIST                         ContributorRole = 94
	ContributorRole_CONTRIBUTOR_ROLE_CASTINGDIRECTOR                    ContributorRole = 95
	ContributorRole_CONTRIBUTOR_ROLE_CAUSEUR                            ContributorRole = 96
	ContributorRole_CONTRIBUTOR_ROLE_CENSOR                             ContributorRole = 97
	ContributorRole_CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN            ContributorRole = 98
	ContributorRole_CONTRIBUTOR_ROLE_CHOIR                              ContributorRole = 99
	ContributorRole_CONTRIBUTOR_ROLE_CHOIRMEMBER                        ContributorRole = 100
	ContributorRole_CONTRIBUTOR_ROLE_CHOREOGRAPHER                      ContributorRole = 101
	ContributorRole_CONTRIBUTOR_ROLE_CHORUSMASTER                       ContributorRole = 102
	ContributorRole_CONTRIBUTOR_ROLE_CIRCUSARTIST                       ContributorRole = 103
	ContributorRole_CONTRIBUTOR_ROLE_CLAPPERLOADER                      ContributorRole = 104
	ContributorRole_CONTRIBUTOR_ROLE_CLUBDJ                             ContributorRole = 105
	ContributorRole_CONTRIBUTOR_ROLE_CODIRECTOR                         ContributorRole = 106
	ContributorRole_CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER                ContributorRole = 107
	ContributorRole_CONTRIBUTOR_ROLE_COLORSEPARATOR                     ContributorRole = 108
	ContributorRole_CONTRIBUTOR_ROLE_COMEDIAN                           ContributorRole = 109
	ContributorRole_CONTRIBUTOR_ROLE_COMIXER                            ContributorRole = 110
	ContributorRole_CONTRIBUTOR_ROLE_COMIXINGENGINEER                   ContributorRole = 111
	ContributorRole_CONTRIBUTOR_ROLE_COMMENTATOR                        ContributorRole = 112
	ContributorRole_CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER           ContributorRole = 113
	ContributorRole_CONTRIBUTOR_ROLE_COMPILATIONPRODUCER                ContributorRole = 114
	ContributorRole_CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR             ContributorRole = 115
	ContributorRole_CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER                 ContributorRole = 116
	ContributorRole_CONTRIBUTOR_ROLE_CONCERTMASTER                      ContributorRole = 117
	ContributorRole_CONTRIBUTOR_ROLE_CONDUCTOR                          ContributorRole = 118
	ContributorRole_CONTRIBUTOR_ROLE_CONSULTANT                         ContributorRole = 119
	ContributorRole_CONTRIBUTOR_ROLE_CONTINUITYCHECKER                  ContributorRole = 120
	ContributorRole_CONTRIBUTOR_ROLE_CONTRACTOR                         ContributorRole = 121
	ContributorRole_CONTRIBUTOR_ROLE_COPRODUCER                         ContributorRole = 122
	ContributorRole_CONTRIBUTOR_ROLE_CORRESPONDENT                      ContributorRole = 123
	ContributorRole_CONTRIBUTOR_ROLE_COSTUMEDESIGNER                    ContributorRole = 124
	ContributorRole_CONTRIBUTOR_ROLE_COVERDESIGNER                      ContributorRole = 125
	ContributorRole_CONTRIBUTOR_ROLE_DANCER                             ContributorRole = 126
	ContributorRole_CONTRIBUTOR_ROLE_DELINEATOR                         ContributorRole = 127
	ContributorRole_CONTRIBUTOR_ROLE_DESIGNER                           ContributorRole = 128
	ContributorRole_CONTRIBUTOR_ROLE_DIALOGUECOACH                      ContributorRole = 129
	ContributorRole_CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR                   ContributorRole = 130
	ContributorRole_CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER    ContributorRole = 131
	ContributorRole_CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER             ContributorRole = 132
	ContributorRole_CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER       ContributorRole = 133
	ContributorRole_CONTRIBUTOR_ROLE_DIRECTOR                           ContributorRole = 134
	ContributorRole_CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER        ContributorRole = 135
	ContributorRole_CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY                ContributorRole = 136
	ContributorRole_CONTRIBUTOR_ROLE_DJ                                 ContributorRole = 137
	ContributorRole_CONTRIBUTOR_ROLE_DRAUGHTSMAN                        ContributorRole = 138
	ContributorRole_CONTRIBUTOR_ROLE_DRESSER                            ContributorRole = 139
	ContributorRole_CONTRIBUTOR_ROLE_DUBBER                             ContributorRole = 140
	ContributorRole_CONTRIBUTOR_ROLE_EDITOR                             ContributorRole = 141
	ContributorRole_CONTRIBUTOR_ROLE_EDITORINCHIEF                      ContributorRole = 142
	ContributorRole_CONTRIBUTOR_ROLE_EDITOROFTHEDAY                     ContributorRole = 143
	ContributorRole_CONTRIBUTOR_ROLE_ENCODER                            ContributorRole = 144
	ContributorRole_CONTRIBUTOR_ROLE_ENGINEER                           ContributorRole = 145
	ContributorRole_CONTRIBUTOR_ROLE_ENSEMBLE                           ContributorRole = 146
	ContributorRole_CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER                  ContributorRole = 147
	ContributorRole_CONTRIBUTOR_ROLE_EXPERT                             ContributorRole = 148
	ContributorRole_CONTRIBUTOR_ROLE_FACSIMILIST                        ContributorRole = 149
	ContributorRole_CONTRIBUTOR_ROLE_FIGHTDIRECTOR                      ContributorRole = 150
	ContributorRole_CONTRIBUTOR_ROLE_FILMDIRECTOR                       ContributorRole = 151
	ContributorRole_CONTRIBUTOR_ROLE_FILMDISTRIBUTOR                    ContributorRole = 152
	ContributorRole_CONTRIBUTOR_ROLE_FILMEDITOR                         ContributorRole = 153
	ContributorRole_CONTRIBUTOR_ROLE_FILMPRODUCER                       ContributorRole = 154
	ContributorRole_CONTRIBUTOR_ROLE_FILMSOUNDENGINEER                  ContributorRole = 155
	ContributorRole_CONTRIBUTOR_ROLE_FLOORMANAGER                       ContributorRole = 156
	ContributorRole_CONTRIBUTOR_ROLE_FOCUSPULLER                        ContributorRole = 157
	ContributorRole_CONTRIBUTOR_ROLE_FOLEYARTIST                        ContributorRole = 158
	ContributorRole_CONTRIBUTOR_ROLE_FOLEYEDITOR                        ContributorRole = 159
	ContributorRole_CONTRIBUTOR_ROLE_FOLEYMIXER                         ContributorRole = 160
	ContributorRole_CONTRIBUTOR_ROLE_GRAPHICARTIST                      ContributorRole = 161
	ContributorRole_CONTRIBUTOR_ROLE_GRAPHICASSISTANT                   ContributorRole = 162
	ContributorRole_CONTRIBUTOR_ROLE_GRAPHICDESIGNER                    ContributorRole = 163
	ContributorRole_CONTRIBUTOR_ROLE_GREENSMAN                          ContributorRole = 164
	ContributorRole_CONTRIBUTOR_ROLE_GRIP                               ContributorRole = 165
	ContributorRole_CONTRIBUTOR_ROLE_GUESTCONDUCTOR                     ContributorRole = 166
	ContributorRole_CONTRIBUTOR_ROLE_GROUPMEMBER                        ContributorRole = 167
	ContributorRole_CONTRIBUTOR_ROLE_HAIRDRESSER                        ContributorRole = 168
	ContributorRole_CONTRIBUTOR_ROLE_ILLUSTRATOR                        ContributorRole = 169
	ContributorRole_CONTRIBUTOR_ROLE_IMMERSIVEMASTERINGENGINEER         ContributorRole = 170
	ContributorRole_CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER            ContributorRole = 171
	ContributorRole_CONTRIBUTOR_ROLE_INITIALPRODUCER                    ContributorRole = 172
	ContributorRole_CONTRIBUTOR_ROLE_INTERVIEWEDGUEST                   ContributorRole = 173
	ContributorRole_CONTRIBUTOR_ROLE_INTERVIEWER                        ContributorRole = 174
	ContributorRole_CONTRIBUTOR_ROLE_KEYCHARACTER                       ContributorRole = 175
	ContributorRole_CONTRIBUTOR_ROLE_KEYGRIP                            ContributorRole = 176
	ContributorRole_CONTRIBUTOR_ROLE_KEYTALENT                          ContributorRole = 177
	ContributorRole_CONTRIBUTOR_ROLE_LEADMAN                            ContributorRole = 178
	ContributorRole_CONTRIBUTOR_ROLE_LEADPERFORMER                      ContributorRole = 179
	ContributorRole_CONTRIBUTOR_ROLE_LEADVOCALIST                       ContributorRole = 180
	ContributorRole_CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR                   ContributorRole = 181
	ContributorRole_CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN                 ContributorRole = 182
	ContributorRole_CONTRIBUTOR_ROLE_LOCATIONMANAGER                    ContributorRole = 183
	ContributorRole_CONTRIBUTOR_ROLE_MAKEUPARTIST                       ContributorRole = 184
	ContributorRole_CONTRIBUTOR_ROLE_MANUFACTURER                       ContributorRole = 185
	ContributorRole_CONTRIBUTOR_ROLE_MASTERINGENGINEER                  ContributorRole = 186
	ContributorRole_CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER            ContributorRole = 187
	ContributorRole_CONTRIBUTOR_ROLE_MATTEARTIST                        ContributorRole = 188
	ContributorRole_CONTRIBUTOR_ROLE_MIME                               ContributorRole = 189
	ContributorRole_CONTRIBUTOR_ROLE_MIXER                              ContributorRole = 190
	ContributorRole_CONTRIBUTOR_ROLE_MIXINGENGINEER                     ContributorRole = 191
	ContributorRole_CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER               ContributorRole = 192
	ContributorRole_CONTRIBUTOR_ROLE_MUSICARRANGER                      ContributorRole = 193
	ContributorRole_CONTRIBUTOR_ROLE_MUSICCOPYIST                       ContributorRole = 194
	ContributorRole_CONTRIBUTOR_ROLE_MUSICDIRECTOR                      ContributorRole = 195
	ContributorRole_CONTRIBUTOR_ROLE_MUSICGROUP                         ContributorRole = 196
	ContributorRole_CONTRIBUTOR_ROLE_MUSICIAN                           ContributorRole = 197
	ContributorRole_CONTRIBUTOR_ROLE_NARRATOR                           ContributorRole = 198
	ContributorRole_CONTRIBUTOR_ROLE_NEWSPRODUCER                       ContributorRole = 199
	ContributorRole_CONTRIBUTOR_ROLE_NEWSREADER                         ContributorRole = 200
	ContributorRole_CONTRIBUTOR_ROLE_NOTSPECIFIED                       ContributorRole = 201
	ContributorRole_CONTRIBUTOR_ROLE_ORCHESTRA                          ContributorRole = 202
	ContributorRole_CONTRIBUTOR_ROLE_ORCHESTRAMEMBER                    ContributorRole = 203
	ContributorRole_CONTRIBUTOR_ROLE_ORIGINALARTIST                     ContributorRole = 204
	ContributorRole_CONTRIBUTOR_ROLE_OVERDUBENGINEER                    ContributorRole = 205
	ContributorRole_CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER              ContributorRole = 206
	ContributorRole_CONTRIBUTOR_ROLE_PAINTER                            ContributorRole = 207
	ContributorRole_CONTRIBUTOR_ROLE_PERFORMER                          ContributorRole = 208
	ContributorRole_CONTRIBUTOR_ROLE_PHOTOGRAPHER                       ContributorRole = 209
	ContributorRole_CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR                ContributorRole = 210
	ContributorRole_CONTRIBUTOR_ROLE_PLAYBACKSINGER                     ContributorRole = 211
	ContributorRole_CONTRIBUTOR_ROLE_POSTPRODUCER                       ContributorRole = 212
	ContributorRole_CONTRIBUTOR_ROLE_PREPRODUCTION                      ContributorRole = 213
	ContributorRole_CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER              ContributorRole = 214
	ContributorRole_CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER        ContributorRole = 215
	ContributorRole_CONTRIBUTOR_ROLE_PRESENTER                          ContributorRole = 216
	ContributorRole_CONTRIBUTOR_ROLE_PRIMARYMUSICIAN                    ContributorRole = 217
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT                ContributorRole = 218
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY                  ContributorRole = 219
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR              ContributorRole = 220
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT               ContributorRole = 221
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONMANAGER                  ContributorRole = 222
	ContributorRole_CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY                ContributorRole = 223
	ContributorRole_CONTRIBUTOR_ROLE_PROJECTENGINEER                    ContributorRole = 224
	ContributorRole_CONTRIBUTOR_ROLE_PROGRAMMER                         ContributorRole = 225
	ContributorRole_CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER                ContributorRole = 226
	ContributorRole_CONTRIBUTOR_ROLE_PROGRAMPRODUCER                    ContributorRole = 227
	ContributorRole_CONTRIBUTOR_ROLE_PROPERTYMANAGER                    ContributorRole = 228
	ContributorRole_CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR                 ContributorRole = 229
	ContributorRole_CONTRIBUTOR_ROLE_PUPPETEER                          ContributorRole = 230
	ContributorRole_CONTRIBUTOR_ROLE_PYROTECHNICIAN                     ContributorRole = 231
	ContributorRole_CONTRIBUTOR_ROLE_RECORDINGENGINEER                  ContributorRole = 232
	ContributorRole_CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER            ContributorRole = 233
	ContributorRole_CONTRIBUTOR_ROLE_REDACTOR                           ContributorRole = 234
	ContributorRole_CONTRIBUTOR_ROLE_REISSUEPRODUCER                    ContributorRole = 235
	ContributorRole_CONTRIBUTOR_ROLE_REMIXEDARTIST                      ContributorRole = 236
	ContributorRole_CONTRIBUTOR_ROLE_REMIXER                            ContributorRole = 237
	ContributorRole_CONTRIBUTOR_ROLE_REMIXINGENGINEER                   ContributorRole = 238
	ContributorRole_CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER             ContributorRole = 239
	ContributorRole_CONTRIBUTOR_ROLE_REPETITEUR                         ContributorRole = 240
	ContributorRole_CONTRIBUTOR_ROLE_RESEARCHER                         ContributorRole = 241
	ContributorRole_CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD                   ContributorRole = 242
	ContributorRole_CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER                 ContributorRole = 243
	ContributorRole_CONTRIBUTOR_ROLE_RESTAGER                           ContributorRole = 244
	ContributorRole_CONTRIBUTOR_ROLE_RIGGER                             ContributorRole = 245
	ContributorRole_CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT          ContributorRole = 246
	ContributorRole_CONTRIBUTOR_ROLE_RUNNER                             ContributorRole = 247
	ContributorRole_CONTRIBUTOR_ROLE_SCENICOPERATIVE                    ContributorRole = 248
	ContributorRole_CONTRIBUTOR_ROLE_SCIENTIFICADVISOR                  ContributorRole = 249
	ContributorRole_CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR                   ContributorRole = 250
	ContributorRole_CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR      ContributorRole = 251
	ContributorRole_CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR            ContributorRole = 252
	ContributorRole_CONTRIBUTOR_ROLE_SECONDCONDUCTOR                    ContributorRole = 253
	ContributorRole_CONTRIBUTOR_ROLE_SECONDENGINEER                     ContributorRole = 254
	ContributorRole_CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR                 ContributorRole = 255
	ContributorRole_CONTRIBUTOR_ROLE_SERIESPRODUCER                     ContributorRole = 256
	ContributorRole_CONTRIBUTOR_ROLE_SETDESIGNER                        ContributorRole = 257
	ContributorRole_CONTRIBUTOR_ROLE_SETDRESSER                         ContributorRole = 258
	ContributorRole_CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER            ContributorRole = 259
	ContributorRole_CONTRIBUTOR_ROLE_SOLOIST                            ContributorRole = 260
	ContributorRole_CONTRIBUTOR_ROLE_SOUNDDESIGNER                      ContributorRole = 261
	ContributorRole_CONTRIBUTOR_ROLE_SOUNDMIXER                         ContributorRole = 262
	ContributorRole_CONTRIBUTOR_ROLE_SOUNDRECORDIST                     ContributorRole = 263
	ContributorRole_CONTRIBUTOR_ROLE_SOUNDSUPERVISOR                    ContributorRole = 264
	ContributorRole_CONTRIBUTOR_ROLE_SPEAKER                            ContributorRole = 265
	ContributorRole_CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN           ContributorRole = 266
	ContributorRole_CONTRIBUTOR_ROLE_SPONSOR                            ContributorRole = 267
	ContributorRole_CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER             ContributorRole = 268
	ContributorRole_CONTRIBUTOR_ROLE_STAGEDIRECTOR                      ContributorRole = 269
	ContributorRole_CONTRIBUTOR_ROLE_STAGEENGINEER                      ContributorRole = 270
	ContributorRole_CONTRIBUTOR_ROLE_STORYTELLER                        ContributorRole = 271
	ContributorRole_CONTRIBUTOR_ROLE_STRINGENGINEER                     ContributorRole = 272
	ContributorRole_CONTRIBUTOR_ROLE_STRINGPRODUCER                     ContributorRole = 273
	ContributorRole_CONTRIBUTOR_ROLE_STRINGSDIRECTOR                    ContributorRole = 274
	ContributorRole_CONTRIBUTOR_ROLE_STUDIOCONDUCTOR                    ContributorRole = 275
	ContributorRole_CONTRIBUTOR_ROLE_STUDIOMUSICIAN                     ContributorRole = 276
	ContributorRole_CONTRIBUTOR_ROLE_STUDIOPERSONNEL                    ContributorRole = 277
	ContributorRole_CONTRIBUTOR_ROLE_STUDIOPRODUCER                     ContributorRole = 278
	ContributorRole_CONTRIBUTOR_ROLE_STUNTS                             ContributorRole = 279
	ContributorRole_CONTRIBUTOR_ROLE_SUBTITLESEDITOR                    ContributorRole = 280
	ContributorRole_CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR                ContributorRole = 281
	ContributorRole_CONTRIBUTOR_ROLE_SUPPORTINGACTOR                    ContributorRole = 282
	ContributorRole_CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER             ContributorRole = 283
	ContributorRole_CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER       ContributorRole = 284
	ContributorRole_CONTRIBUTOR_ROLE_TAPEOPERATOR                       ContributorRole = 285
	ContributorRole_CONTRIBUTOR_ROLE_TECHNICALDIRECTOR                  ContributorRole = 286
	ContributorRole_CONTRIBUTOR_ROLE_TONMEISTER                         ContributorRole = 287
	ContributorRole_CONTRIBUTOR_ROLE_TRACKINGENGINEER                   ContributorRole = 288
	ContributorRole_CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER             ContributorRole = 289
	ContributorRole_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER       ContributorRole = 290
	ContributorRole_CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER ContributorRole = 291
	ContributorRole_CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER              ContributorRole = 292
	ContributorRole_CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL          ContributorRole = 293
	ContributorRole_CONTRIBUTOR_ROLE_TYPEDESIGNER                       ContributorRole = 294
	ContributorRole_CONTRIBUTOR_ROLE_VIDEODIRECTOR                      ContributorRole = 295
	ContributorRole_CONTRIBUTOR_ROLE_VIDEOGRAPHER                       ContributorRole = 296
	ContributorRole_CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR               ContributorRole = 297
	ContributorRole_CONTRIBUTOR_ROLE_VIDEOPRODUCER                      ContributorRole = 298
	ContributorRole_CONTRIBUTOR_ROLE_VISIONMIXER                        ContributorRole = 299
	ContributorRole_CONTRIBUTOR_ROLE_VISUALEDITOR                       ContributorRole = 300
	ContributorRole_CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN            ContributorRole = 301
	ContributorRole_CONTRIBUTOR_ROLE_VOCALARRANGER                      ContributorRole = 302
	ContributorRole_CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER               ContributorRole = 303
	ContributorRole_CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER         ContributorRole = 304
	ContributorRole_CONTRIBUTOR_ROLE_VOCALENGINEER                      ContributorRole = 305
	ContributorRole_CONTRIBUTOR_ROLE_VOCALIST                           ContributorRole = 306
	ContributorRole_CONTRIBUTOR_ROLE_VOCALSECONDENGINEER                ContributorRole = 307
	ContributorRole_CONTRIBUTOR_ROLE_VOCALPRODUCER                      ContributorRole = 308
	ContributorRole_CONTRIBUTOR_ROLE_VOICEACTOR                         ContributorRole = 309
	ContributorRole_CONTRIBUTOR_ROLE_WARDROBE                           ContributorRole = 310
)

// Enum value maps for ContributorRole.
var (
	ContributorRole_name = map[int32]string{
		0:   "CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:   "CONTRIBUTOR_ROLE_ADAPTER",
		2:   "CONTRIBUTOR_ROLE_ARCHITECT",
		3:   "CONTRIBUTOR_ROLE_ARRANGER",
		4:   "CONTRIBUTOR_ROLE_AUTHOR",
		5:   "CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS",
		6:   "CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD",
		7:   "CONTRIBUTOR_ROLE_COMPILER",
		8:   "CONTRIBUTOR_ROLE_COMPOSER",
		9:   "CONTRIBUTOR_ROLE_COMPOSERLYRICIST",
		10:  "CONTRIBUTOR_ROLE_CONCEPTOR",
		11:  "CONTRIBUTOR_ROLE_CREATOR",
		12:  "CONTRIBUTOR_ROLE_DIALOGUEAUTHOR",
		13:  "CONTRIBUTOR_ROLE_DISSERTANT",
		14:  "CONTRIBUTOR_ROLE_ENGRAVER",
		15:  "CONTRIBUTOR_ROLE_ETCHER",
		16:  "CONTRIBUTOR_ROLE_JOURNALIST",
		17:  "CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT",
		18:  "CONTRIBUTOR_ROLE_LIBRETTIST",
		19:  "CONTRIBUTOR_ROLE_LITHOGRAPHER",
		20:  "CONTRIBUTOR_ROLE_LYRICIST",
		21:  "CONTRIBUTOR_ROLE_METALENGRAVER",
		22:  "CONTRIBUTOR_ROLE_NONLYRICAUTHOR",
		23:  "CONTRIBUTOR_ROLE_PLATEMAKER",
		24:  "CONTRIBUTOR_ROLE_PLAYWRIGHT",
		25:  "CONTRIBUTOR_ROLE_REPORTER",
		26:  "CONTRIBUTOR_ROLE_REVIEWER",
		27:  "CONTRIBUTOR_ROLE_RUBRICATOR",
		28:  "CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR",
		29:  "CONTRIBUTOR_ROLE_SCULPTOR",
		30:  "CONTRIBUTOR_ROLE_SUBARRANGER",
		31:  "CONTRIBUTOR_ROLE_SUBLYRICIST",
		32:  "CONTRIBUTOR_ROLE_TRANSLATOR",
		33:  "CONTRIBUTOR_ROLE_WOODCUTTER",
		34:  "CONTRIBUTOR_ROLE_WOODENGRAVER",
		35:  "CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL",
		36:  "CONTRIBUTOR_ROLE_BOOKPUBLISHER",
		37:  "CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT",
		38:  "CONTRIBUTOR_ROLE_COPYRIGHTHOLDER",
		39:  "CONTRIBUTOR_ROLE_MUSICPUBLISHER",
		40:  "CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER",
		41:  "CONTRIBUTOR_ROLE_ORIGINALPUBLISHER",
		42:  "CONTRIBUTOR_ROLE_PERIODICALPUBLISHER",
		43:  "CONTRIBUTOR_ROLE_SUBPUBLISHER",
		44:  "CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER",
		45:  "CONTRIBUTOR_ROLE_UNKNOWN",
		46:  "CONTRIBUTOR_ROLE_USERDEFINED",
		47:  "CONTRIBUTOR_ROLE_ACCOMPANYIST",
		48:  "CONTRIBUTOR_ROLE_ACTOR",
		49:  "CONTRIBUTOR_ROLE_ADDITIONALENGINEER",
		50:  "CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER",
		51:  "CONTRIBUTOR_ROLE_ADDITIONALPERFORMER",
		52:  "CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER",
		53:  "CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER",
		54:  "CONTRIBUTOR_ROLE_ANCHORPERSON",
		55:  "CONTRIBUTOR_ROLE_ANIMALTRAINER",
		56:  "CONTRIBUTOR_ROLE_ANIMATOR",
		57:  "CONTRIBUTOR_ROLE_ANNOTATOR",
		58:  "CONTRIBUTOR_ROLE_ANNOUNCER",
		59:  "CONTRIBUTOR_ROLE_AANDRADMINISTRATOR",
		60:  "CONTRIBUTOR_ROLE_AANDRCOORDINATOR",
		61:  "CONTRIBUTOR_ROLE_ARMOURER",
		62:  "CONTRIBUTOR_ROLE_ARTCOPYIST",
		63:  "CONTRIBUTOR_ROLE_ARTDIRECTOR",
		64:  "CONTRIBUTOR_ROLE_ARTIST",
		65:  "CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER",
		66:  "CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER",
		67:  "CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER",
		68:  "CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR",
		69:  "CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN",
		70:  "CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR",
		71:  "CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR",
		72:  "CONTRIBUTOR_ROLE_ASSISTANTEDITOR",
		73:  "CONTRIBUTOR_ROLE_ASSISTANTENGINEER",
		74:  "CONTRIBUTOR_ROLE_ASSISTANTPRODUCER",
		75:  "CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR",
		76:  "CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER",
		77:  "CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER",
		78:  "CONTRIBUTOR_ROLE_AURALTRAINER",
		79:  "CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST",
		80:  "CONTRIBUTOR_ROLE_BALANCEENGINEER",
		81:  "CONTRIBUTOR_ROLE_BANDLEADER",
		82:  "CONTRIBUTOR_ROLE_BINDER",
		83:  "CONTRIBUTOR_ROLE_BINDINGDESIGNER",
		84:  "CONTRIBUTOR_ROLE_BOOKDESIGNER",
		85:  "CONTRIBUTOR_ROLE_BOOKJACKDESIGNER",
		86:  "CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER",
		87:  "CONTRIBUTOR_ROLE_BOOKPRODUCER",
		88:  "CONTRIBUTOR_ROLE_BROADCASTASSISTANT",
		89:  "CONTRIBUTOR_ROLE_BROADCASTJOURNALIST",
		90:  "CONTRIBUTOR_ROLE_CALLIGRAPHER",
		91:  "CONTRIBUTOR_ROLE_CAMERAOPERATOR",
		92:  "CONTRIBUTOR_ROLE_CARPENTER",
		93:  "CONTRIBUTOR_ROLE_CARTOGRAPHER",
		94:  "CONTRIBUTOR_ROLE_CARTOONIST",
		95:  "CONTRIBUTOR_ROLE_CASTINGDIRECTOR",
		96:  "CONTRIBUTOR_ROLE_CAUSEUR",
		97:  "CONTRIBUTOR_ROLE_CENSOR",
		98:  "CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN",
		99:  "CONTRIBUTOR_ROLE_CHOIR",
		100: "CONTRIBUTOR_ROLE_CHOIRMEMBER",
		101: "CONTRIBUTOR_ROLE_CHOREOGRAPHER",
		102: "CONTRIBUTOR_ROLE_CHORUSMASTER",
		103: "CONTRIBUTOR_ROLE_CIRCUSARTIST",
		104: "CONTRIBUTOR_ROLE_CLAPPERLOADER",
		105: "CONTRIBUTOR_ROLE_CLUBDJ",
		106: "CONTRIBUTOR_ROLE_CODIRECTOR",
		107: "CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER",
		108: "CONTRIBUTOR_ROLE_COLORSEPARATOR",
		109: "CONTRIBUTOR_ROLE_COMEDIAN",
		110: "CONTRIBUTOR_ROLE_COMIXER",
		111: "CONTRIBUTOR_ROLE_COMIXINGENGINEER",
		112: "CONTRIBUTOR_ROLE_COMMENTATOR",
		113: "CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER",
		114: "CONTRIBUTOR_ROLE_COMPILATIONPRODUCER",
		115: "CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR",
		116: "CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER",
		117: "CONTRIBUTOR_ROLE_CONCERTMASTER",
		118: "CONTRIBUTOR_ROLE_CONDUCTOR",
		119: "CONTRIBUTOR_ROLE_CONSULTANT",
		120: "CONTRIBUTOR_ROLE_CONTINUITYCHECKER",
		121: "CONTRIBUTOR_ROLE_CONTRACTOR",
		122: "CONTRIBUTOR_ROLE_COPRODUCER",
		123: "CONTRIBUTOR_ROLE_CORRESPONDENT",
		124: "CONTRIBUTOR_ROLE_COSTUMEDESIGNER",
		125: "CONTRIBUTOR_ROLE_COVERDESIGNER",
		126: "CONTRIBUTOR_ROLE_DANCER",
		127: "CONTRIBUTOR_ROLE_DELINEATOR",
		128: "CONTRIBUTOR_ROLE_DESIGNER",
		129: "CONTRIBUTOR_ROLE_DIALOGUECOACH",
		130: "CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR",
		131: "CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER",
		132: "CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER",
		133: "CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER",
		134: "CONTRIBUTOR_ROLE_DIRECTOR",
		135: "CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER",
		136: "CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY",
		137: "CONTRIBUTOR_ROLE_DJ",
		138: "CONTRIBUTOR_ROLE_DRAUGHTSMAN",
		139: "CONTRIBUTOR_ROLE_DRESSER",
		140: "CONTRIBUTOR_ROLE_DUBBER",
		141: "CONTRIBUTOR_ROLE_EDITOR",
		142: "CONTRIBUTOR_ROLE_EDITORINCHIEF",
		143: "CONTRIBUTOR_ROLE_EDITOROFTHEDAY",
		144: "CONTRIBUTOR_ROLE_ENCODER",
		145: "CONTRIBUTOR_ROLE_ENGINEER",
		146: "CONTRIBUTOR_ROLE_ENSEMBLE",
		147: "CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER",
		148: "CONTRIBUTOR_ROLE_EXPERT",
		149: "CONTRIBUTOR_ROLE_FACSIMILIST",
		150: "CONTRIBUTOR_ROLE_FIGHTDIRECTOR",
		151: "CONTRIBUTOR_ROLE_FILMDIRECTOR",
		152: "CONTRIBUTOR_ROLE_FILMDISTRIBUTOR",
		153: "CONTRIBUTOR_ROLE_FILMEDITOR",
		154: "CONTRIBUTOR_ROLE_FILMPRODUCER",
		155: "CONTRIBUTOR_ROLE_FILMSOUNDENGINEER",
		156: "CONTRIBUTOR_ROLE_FLOORMANAGER",
		157: "CONTRIBUTOR_ROLE_FOCUSPULLER",
		158: "CONTRIBUTOR_ROLE_FOLEYARTIST",
		159: "CONTRIBUTOR_ROLE_FOLEYEDITOR",
		160: "CONTRIBUTOR_ROLE_FOLEYMIXER",
		161: "CONTRIBUTOR_ROLE_GRAPHICARTIST",
		162: "CONTRIBUTOR_ROLE_GRAPHICASSISTANT",
		163: "CONTRIBUTOR_ROLE_GRAPHICDESIGNER",
		164: "CONTRIBUTOR_ROLE_GREENSMAN",
		165: "CONTRIBUTOR_ROLE_GRIP",
		166: "CONTRIBUTOR_ROLE_GUESTCONDUCTOR",
		167: "CONTRIBUTOR_ROLE_GROUPMEMBER",
		168: "CONTRIBUTOR_ROLE_HAIRDRESSER",
		169: "CONTRIBUTOR_ROLE_ILLUSTRATOR",
		170: "CONTRIBUTOR_ROLE_IMMERSIVEMASTERINGENGINEER",
		171: "CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER",
		172: "CONTRIBUTOR_ROLE_INITIALPRODUCER",
		173: "CONTRIBUTOR_ROLE_INTERVIEWEDGUEST",
		174: "CONTRIBUTOR_ROLE_INTERVIEWER",
		175: "CONTRIBUTOR_ROLE_KEYCHARACTER",
		176: "CONTRIBUTOR_ROLE_KEYGRIP",
		177: "CONTRIBUTOR_ROLE_KEYTALENT",
		178: "CONTRIBUTOR_ROLE_LEADMAN",
		179: "CONTRIBUTOR_ROLE_LEADPERFORMER",
		180: "CONTRIBUTOR_ROLE_LEADVOCALIST",
		181: "CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR",
		182: "CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN",
		183: "CONTRIBUTOR_ROLE_LOCATIONMANAGER",
		184: "CONTRIBUTOR_ROLE_MAKEUPARTIST",
		185: "CONTRIBUTOR_ROLE_MANUFACTURER",
		186: "CONTRIBUTOR_ROLE_MASTERINGENGINEER",
		187: "CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER",
		188: "CONTRIBUTOR_ROLE_MATTEARTIST",
		189: "CONTRIBUTOR_ROLE_MIME",
		190: "CONTRIBUTOR_ROLE_MIXER",
		191: "CONTRIBUTOR_ROLE_MIXINGENGINEER",
		192: "CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER",
		193: "CONTRIBUTOR_ROLE_MUSICARRANGER",
		194: "CONTRIBUTOR_ROLE_MUSICCOPYIST",
		195: "CONTRIBUTOR_ROLE_MUSICDIRECTOR",
		196: "CONTRIBUTOR_ROLE_MUSICGROUP",
		197: "CONTRIBUTOR_ROLE_MUSICIAN",
		198: "CONTRIBUTOR_ROLE_NARRATOR",
		199: "CONTRIBUTOR_ROLE_NEWSPRODUCER",
		200: "CONTRIBUTOR_ROLE_NEWSREADER",
		201: "CONTRIBUTOR_ROLE_NOTSPECIFIED",
		202: "CONTRIBUTOR_ROLE_ORCHESTRA",
		203: "CONTRIBUTOR_ROLE_ORCHESTRAMEMBER",
		204: "CONTRIBUTOR_ROLE_ORIGINALARTIST",
		205: "CONTRIBUTOR_ROLE_OVERDUBENGINEER",
		206: "CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER",
		207: "CONTRIBUTOR_ROLE_PAINTER",
		208: "CONTRIBUTOR_ROLE_PERFORMER",
		209: "CONTRIBUTOR_ROLE_PHOTOGRAPHER",
		210: "CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR",
		211: "CONTRIBUTOR_ROLE_PLAYBACKSINGER",
		212: "CONTRIBUTOR_ROLE_POSTPRODUCER",
		213: "CONTRIBUTOR_ROLE_PREPRODUCTION",
		214: "CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER",
		215: "CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER",
		216: "CONTRIBUTOR_ROLE_PRESENTER",
		217: "CONTRIBUTOR_ROLE_PRIMARYMUSICIAN",
		218: "CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT",
		219: "CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY",
		220: "CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR",
		221: "CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT",
		222: "CONTRIBUTOR_ROLE_PRODUCTIONMANAGER",
		223: "CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY",
		224: "CONTRIBUTOR_ROLE_PROJECTENGINEER",
		225: "CONTRIBUTOR_ROLE_PROGRAMMER",
		226: "CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER",
		227: "CONTRIBUTOR_ROLE_PROGRAMPRODUCER",
		228: "CONTRIBUTOR_ROLE_PROPERTYMANAGER",
		229: "CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR",
		230: "CONTRIBUTOR_ROLE_PUPPETEER",
		231: "CONTRIBUTOR_ROLE_PYROTECHNICIAN",
		232: "CONTRIBUTOR_ROLE_RECORDINGENGINEER",
		233: "CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER",
		234: "CONTRIBUTOR_ROLE_REDACTOR",
		235: "CONTRIBUTOR_ROLE_REISSUEPRODUCER",
		236: "CONTRIBUTOR_ROLE_REMIXEDARTIST",
		237: "CONTRIBUTOR_ROLE_REMIXER",
		238: "CONTRIBUTOR_ROLE_REMIXINGENGINEER",
		239: "CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER",
		240: "CONTRIBUTOR_ROLE_REPETITEUR",
		241: "CONTRIBUTOR_ROLE_RESEARCHER",
		242: "CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD",
		243: "CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER",
		244: "CONTRIBUTOR_ROLE_RESTAGER",
		245: "CONTRIBUTOR_ROLE_RIGGER",
		246: "CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT",
		247: "CONTRIBUTOR_ROLE_RUNNER",
		248: "CONTRIBUTOR_ROLE_SCENICOPERATIVE",
		249: "CONTRIBUTOR_ROLE_SCIENTIFICADVISOR",
		250: "CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR",
		251: "CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR",
		252: "CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR",
		253: "CONTRIBUTOR_ROLE_SECONDCONDUCTOR",
		254: "CONTRIBUTOR_ROLE_SECONDENGINEER",
		255: "CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR",
		256: "CONTRIBUTOR_ROLE_SERIESPRODUCER",
		257: "CONTRIBUTOR_ROLE_SETDESIGNER",
		258: "CONTRIBUTOR_ROLE_SETDRESSER",
		259: "CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER",
		260: "CONTRIBUTOR_ROLE_SOLOIST",
		261: "CONTRIBUTOR_ROLE_SOUNDDESIGNER",
		262: "CONTRIBUTOR_ROLE_SOUNDMIXER",
		263: "CONTRIBUTOR_ROLE_SOUNDRECORDIST",
		264: "CONTRIBUTOR_ROLE_SOUNDSUPERVISOR",
		265: "CONTRIBUTOR_ROLE_SPEAKER",
		266: "CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN",
		267: "CONTRIBUTOR_ROLE_SPONSOR",
		268: "CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER",
		269: "CONTRIBUTOR_ROLE_STAGEDIRECTOR",
		270: "CONTRIBUTOR_ROLE_STAGEENGINEER",
		271: "CONTRIBUTOR_ROLE_STORYTELLER",
		272: "CONTRIBUTOR_ROLE_STRINGENGINEER",
		273: "CONTRIBUTOR_ROLE_STRINGPRODUCER",
		274: "CONTRIBUTOR_ROLE_STRINGSDIRECTOR",
		275: "CONTRIBUTOR_ROLE_STUDIOCONDUCTOR",
		276: "CONTRIBUTOR_ROLE_STUDIOMUSICIAN",
		277: "CONTRIBUTOR_ROLE_STUDIOPERSONNEL",
		278: "CONTRIBUTOR_ROLE_STUDIOPRODUCER",
		279: "CONTRIBUTOR_ROLE_STUNTS",
		280: "CONTRIBUTOR_ROLE_SUBTITLESEDITOR",
		281: "CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR",
		282: "CONTRIBUTOR_ROLE_SUPPORTINGACTOR",
		283: "CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER",
		284: "CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER",
		285: "CONTRIBUTOR_ROLE_TAPEOPERATOR",
		286: "CONTRIBUTOR_ROLE_TECHNICALDIRECTOR",
		287: "CONTRIBUTOR_ROLE_TONMEISTER",
		288: "CONTRIBUTOR_ROLE_TRACKINGENGINEER",
		289: "CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER",
		290: "CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER",
		291: "CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER",
		292: "CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER",
		293: "CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL",
		294: "CONTRIBUTOR_ROLE_TYPEDESIGNER",
		295: "CONTRIBUTOR_ROLE_VIDEODIRECTOR",
		296: "CONTRIBUTOR_ROLE_VIDEOGRAPHER",
		297: "CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR",
		298: "CONTRIBUTOR_ROLE_VIDEOPRODUCER",
		299: "CONTRIBUTOR_ROLE_VISIONMIXER",
		300: "CONTRIBUTOR_ROLE_VISUALEDITOR",
		301: "CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN",
		302: "CONTRIBUTOR_ROLE_VOCALARRANGER",
		303: "CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER",
		304: "CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER",
		305: "CONTRIBUTOR_ROLE_VOCALENGINEER",
		306: "CONTRIBUTOR_ROLE_VOCALIST",
		307: "CONTRIBUTOR_ROLE_VOCALSECONDENGINEER",
		308: "CONTRIBUTOR_ROLE_VOCALPRODUCER",
		309: "CONTRIBUTOR_ROLE_VOICEACTOR",
		310: "CONTRIBUTOR_ROLE_WARDROBE",
	}
	ContributorRole_value = map[string]int32{
		"CONTRIBUTOR_ROLE_UNSPECIFIED":                        0,
		"CONTRIBUTOR_ROLE_ADAPTER":                            1,
		"CONTRIBUTOR_ROLE_ARCHITECT":                          2,
		"CONTRIBUTOR_ROLE_ARRANGER":                           3,
		"CONTRIBUTOR_ROLE_AUTHOR":                             4,
		"CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS":                 5,
		"CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD":                  6,
		"CONTRIBUTOR_ROLE_COMPILER":                           7,
		"CONTRIBUTOR_ROLE_COMPOSER":                           8,
		"CONTRIBUTOR_ROLE_COMPOSERLYRICIST":                   9,
		"CONTRIBUTOR_ROLE_CONCEPTOR":                          10,
		"CONTRIBUTOR_ROLE_CREATOR":                            11,
		"CONTRIBUTOR_ROLE_DIALOGUEAUTHOR":                     12,
		"CONTRIBUTOR_ROLE_DISSERTANT":                         13,
		"CONTRIBUTOR_ROLE_ENGRAVER":                           14,
		"CONTRIBUTOR_ROLE_ETCHER":                             15,
		"CONTRIBUTOR_ROLE_JOURNALIST":                         16,
		"CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT":                 17,
		"CONTRIBUTOR_ROLE_LIBRETTIST":                         18,
		"CONTRIBUTOR_ROLE_LITHOGRAPHER":                       19,
		"CONTRIBUTOR_ROLE_LYRICIST":                           20,
		"CONTRIBUTOR_ROLE_METALENGRAVER":                      21,
		"CONTRIBUTOR_ROLE_NONLYRICAUTHOR":                     22,
		"CONTRIBUTOR_ROLE_PLATEMAKER":                         23,
		"CONTRIBUTOR_ROLE_PLAYWRIGHT":                         24,
		"CONTRIBUTOR_ROLE_REPORTER":                           25,
		"CONTRIBUTOR_ROLE_REVIEWER":                           26,
		"CONTRIBUTOR_ROLE_RUBRICATOR":                         27,
		"CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR":                   28,
		"CONTRIBUTOR_ROLE_SCULPTOR":                           29,
		"CONTRIBUTOR_ROLE_SUBARRANGER":                        30,
		"CONTRIBUTOR_ROLE_SUBLYRICIST":                        31,
		"CONTRIBUTOR_ROLE_TRANSLATOR":                         32,
		"CONTRIBUTOR_ROLE_WOODCUTTER":                         33,
		"CONTRIBUTOR_ROLE_WOODENGRAVER":                       34,
		"CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL":       35,
		"CONTRIBUTOR_ROLE_BOOKPUBLISHER":                      36,
		"CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT":                  37,
		"CONTRIBUTOR_ROLE_COPYRIGHTHOLDER":                    38,
		"CONTRIBUTOR_ROLE_MUSICPUBLISHER":                     39,
		"CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER":                 40,
		"CONTRIBUTOR_ROLE_ORIGINALPUBLISHER":                  41,
		"CONTRIBUTOR_ROLE_PERIODICALPUBLISHER":                42,
		"CONTRIBUTOR_ROLE_SUBPUBLISHER":                       43,
		"CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER":               44,
		"CONTRIBUTOR_ROLE_UNKNOWN":                            45,
		"CONTRIBUTOR_ROLE_USERDEFINED":                        46,
		"CONTRIBUTOR_ROLE_ACCOMPANYIST":                       47,
		"CONTRIBUTOR_ROLE_ACTOR":                              48,
		"CONTRIBUTOR_ROLE_ADDITIONALENGINEER":                 49,
		"CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER":           50,
		"CONTRIBUTOR_ROLE_ADDITIONALPERFORMER":                51,
		"CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER":      52,
		"CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER":           53,
		"CONTRIBUTOR_ROLE_ANCHORPERSON":                       54,
		"CONTRIBUTOR_ROLE_ANIMALTRAINER":                      55,
		"CONTRIBUTOR_ROLE_ANIMATOR":                           56,
		"CONTRIBUTOR_ROLE_ANNOTATOR":                          57,
		"CONTRIBUTOR_ROLE_ANNOUNCER":                          58,
		"CONTRIBUTOR_ROLE_AANDRADMINISTRATOR":                 59,
		"CONTRIBUTOR_ROLE_AANDRCOORDINATOR":                   60,
		"CONTRIBUTOR_ROLE_ARMOURER":                           61,
		"CONTRIBUTOR_ROLE_ARTCOPYIST":                         62,
		"CONTRIBUTOR_ROLE_ARTDIRECTOR":                        63,
		"CONTRIBUTOR_ROLE_ARTIST":                             64,
		"CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER":      65,
		"CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER":                66,
		"CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER":          67,
		"CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR":            68,
		"CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN":   69,
		"CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR":                 70,
		"CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR":                  71,
		"CONTRIBUTOR_ROLE_ASSISTANTEDITOR":                    72,
		"CONTRIBUTOR_ROLE_ASSISTANTENGINEER":                  73,
		"CONTRIBUTOR_ROLE_ASSISTANTPRODUCER":                  74,
		"CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR":              75,
		"CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER":                76,
		"CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER":                  77,
		"CONTRIBUTOR_ROLE_AURALTRAINER":                       78,
		"CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST":                 79,
		"CONTRIBUTOR_ROLE_BALANCEENGINEER":                    80,
		"CONTRIBUTOR_ROLE_BANDLEADER":                         81,
		"CONTRIBUTOR_ROLE_BINDER":                             82,
		"CONTRIBUTOR_ROLE_BINDINGDESIGNER":                    83,
		"CONTRIBUTOR_ROLE_BOOKDESIGNER":                       84,
		"CONTRIBUTOR_ROLE_BOOKJACKDESIGNER":                   85,
		"CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER":                  86,
		"CONTRIBUTOR_ROLE_BOOKPRODUCER":                       87,
		"CONTRIBUTOR_ROLE_BROADCASTASSISTANT":                 88,
		"CONTRIBUTOR_ROLE_BROADCASTJOURNALIST":                89,
		"CONTRIBUTOR_ROLE_CALLIGRAPHER":                       90,
		"CONTRIBUTOR_ROLE_CAMERAOPERATOR":                     91,
		"CONTRIBUTOR_ROLE_CARPENTER":                          92,
		"CONTRIBUTOR_ROLE_CARTOGRAPHER":                       93,
		"CONTRIBUTOR_ROLE_CARTOONIST":                         94,
		"CONTRIBUTOR_ROLE_CASTINGDIRECTOR":                    95,
		"CONTRIBUTOR_ROLE_CAUSEUR":                            96,
		"CONTRIBUTOR_ROLE_CENSOR":                             97,
		"CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN":            98,
		"CONTRIBUTOR_ROLE_CHOIR":                              99,
		"CONTRIBUTOR_ROLE_CHOIRMEMBER":                        100,
		"CONTRIBUTOR_ROLE_CHOREOGRAPHER":                      101,
		"CONTRIBUTOR_ROLE_CHORUSMASTER":                       102,
		"CONTRIBUTOR_ROLE_CIRCUSARTIST":                       103,
		"CONTRIBUTOR_ROLE_CLAPPERLOADER":                      104,
		"CONTRIBUTOR_ROLE_CLUBDJ":                             105,
		"CONTRIBUTOR_ROLE_CODIRECTOR":                         106,
		"CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER":                107,
		"CONTRIBUTOR_ROLE_COLORSEPARATOR":                     108,
		"CONTRIBUTOR_ROLE_COMEDIAN":                           109,
		"CONTRIBUTOR_ROLE_COMIXER":                            110,
		"CONTRIBUTOR_ROLE_COMIXINGENGINEER":                   111,
		"CONTRIBUTOR_ROLE_COMMENTATOR":                        112,
		"CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER":           113,
		"CONTRIBUTOR_ROLE_COMPILATIONPRODUCER":                114,
		"CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR":             115,
		"CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER":                 116,
		"CONTRIBUTOR_ROLE_CONCERTMASTER":                      117,
		"CONTRIBUTOR_ROLE_CONDUCTOR":                          118,
		"CONTRIBUTOR_ROLE_CONSULTANT":                         119,
		"CONTRIBUTOR_ROLE_CONTINUITYCHECKER":                  120,
		"CONTRIBUTOR_ROLE_CONTRACTOR":                         121,
		"CONTRIBUTOR_ROLE_COPRODUCER":                         122,
		"CONTRIBUTOR_ROLE_CORRESPONDENT":                      123,
		"CONTRIBUTOR_ROLE_COSTUMEDESIGNER":                    124,
		"CONTRIBUTOR_ROLE_COVERDESIGNER":                      125,
		"CONTRIBUTOR_ROLE_DANCER":                             126,
		"CONTRIBUTOR_ROLE_DELINEATOR":                         127,
		"CONTRIBUTOR_ROLE_DESIGNER":                           128,
		"CONTRIBUTOR_ROLE_DIALOGUECOACH":                      129,
		"CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR":                   130,
		"CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER":    131,
		"CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER":             132,
		"CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER":       133,
		"CONTRIBUTOR_ROLE_DIRECTOR":                           134,
		"CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER":        135,
		"CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY":                136,
		"CONTRIBUTOR_ROLE_DJ":                                 137,
		"CONTRIBUTOR_ROLE_DRAUGHTSMAN":                        138,
		"CONTRIBUTOR_ROLE_DRESSER":                            139,
		"CONTRIBUTOR_ROLE_DUBBER":                             140,
		"CONTRIBUTOR_ROLE_EDITOR":                             141,
		"CONTRIBUTOR_ROLE_EDITORINCHIEF":                      142,
		"CONTRIBUTOR_ROLE_EDITOROFTHEDAY":                     143,
		"CONTRIBUTOR_ROLE_ENCODER":                            144,
		"CONTRIBUTOR_ROLE_ENGINEER":                           145,
		"CONTRIBUTOR_ROLE_ENSEMBLE":                           146,
		"CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER":                  147,
		"CONTRIBUTOR_ROLE_EXPERT":                             148,
		"CONTRIBUTOR_ROLE_FACSIMILIST":                        149,
		"CONTRIBUTOR_ROLE_FIGHTDIRECTOR":                      150,
		"CONTRIBUTOR_ROLE_FILMDIRECTOR":                       151,
		"CONTRIBUTOR_ROLE_FILMDISTRIBUTOR":                    152,
		"CONTRIBUTOR_ROLE_FILMEDITOR":                         153,
		"CONTRIBUTOR_ROLE_FILMPRODUCER":                       154,
		"CONTRIBUTOR_ROLE_FILMSOUNDENGINEER":                  155,
		"CONTRIBUTOR_ROLE_FLOORMANAGER":                       156,
		"CONTRIBUTOR_ROLE_FOCUSPULLER":                        157,
		"CONTRIBUTOR_ROLE_FOLEYARTIST":                        158,
		"CONTRIBUTOR_ROLE_FOLEYEDITOR":                        159,
		"CONTRIBUTOR_ROLE_FOLEYMIXER":                         160,
		"CONTRIBUTOR_ROLE_GRAPHICARTIST":                      161,
		"CONTRIBUTOR_ROLE_GRAPHICASSISTANT":                   162,
		"CONTRIBUTOR_ROLE_GRAPHICDESIGNER":                    163,
		"CONTRIBUTOR_ROLE_GREENSMAN":                          164,
		"CONTRIBUTOR_ROLE_GRIP":                               165,
		"CONTRIBUTOR_ROLE_GUESTCONDUCTOR":                     166,
		"CONTRIBUTOR_ROLE_GROUPMEMBER":                        167,
		"CONTRIBUTOR_ROLE_HAIRDRESSER":                        168,
		"CONTRIBUTOR_ROLE_ILLUSTRATOR":                        169,
		"CONTRIBUTOR_ROLE_IMMERSIVEMASTERINGENGINEER":         170,
		"CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER":            171,
		"CONTRIBUTOR_ROLE_INITIALPRODUCER":                    172,
		"CONTRIBUTOR_ROLE_INTERVIEWEDGUEST":                   173,
		"CONTRIBUTOR_ROLE_INTERVIEWER":                        174,
		"CONTRIBUTOR_ROLE_KEYCHARACTER":                       175,
		"CONTRIBUTOR_ROLE_KEYGRIP":                            176,
		"CONTRIBUTOR_ROLE_KEYTALENT":                          177,
		"CONTRIBUTOR_ROLE_LEADMAN":                            178,
		"CONTRIBUTOR_ROLE_LEADPERFORMER":                      179,
		"CONTRIBUTOR_ROLE_LEADVOCALIST":                       180,
		"CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR":                   181,
		"CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN":                 182,
		"CONTRIBUTOR_ROLE_LOCATIONMANAGER":                    183,
		"CONTRIBUTOR_ROLE_MAKEUPARTIST":                       184,
		"CONTRIBUTOR_ROLE_MANUFACTURER":                       185,
		"CONTRIBUTOR_ROLE_MASTERINGENGINEER":                  186,
		"CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER":            187,
		"CONTRIBUTOR_ROLE_MATTEARTIST":                        188,
		"CONTRIBUTOR_ROLE_MIME":                               189,
		"CONTRIBUTOR_ROLE_MIXER":                              190,
		"CONTRIBUTOR_ROLE_MIXINGENGINEER":                     191,
		"CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER":               192,
		"CONTRIBUTOR_ROLE_MUSICARRANGER":                      193,
		"CONTRIBUTOR_ROLE_MUSICCOPYIST":                       194,
		"CONTRIBUTOR_ROLE_MUSICDIRECTOR":                      195,
		"CONTRIBUTOR_ROLE_MUSICGROUP":                         196,
		"CONTRIBUTOR_ROLE_MUSICIAN":                           197,
		"CONTRIBUTOR_ROLE_NARRATOR":                           198,
		"CONTRIBUTOR_ROLE_NEWSPRODUCER":                       199,
		"CONTRIBUTOR_ROLE_NEWSREADER":                         200,
		"CONTRIBUTOR_ROLE_NOTSPECIFIED":                       201,
		"CONTRIBUTOR_ROLE_ORCHESTRA":                          202,
		"CONTRIBUTOR_ROLE_ORCHESTRAMEMBER":                    203,
		"CONTRIBUTOR_ROLE_ORIGINALARTIST":                     204,
		"CONTRIBUTOR_ROLE_OVERDUBENGINEER":                    205,
		"CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER":              206,
		"CONTRIBUTOR_ROLE_PAINTER":                            207,
		"CONTRIBUTOR_ROLE_PERFORMER":                          208,
		"CONTRIBUTOR_ROLE_PHOTOGRAPHER":                       209,
		"CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR":                210,
		"CONTRIBUTOR_ROLE_PLAYBACKSINGER":                     211,
		"CONTRIBUTOR_ROLE_POSTPRODUCER":                       212,
		"CONTRIBUTOR_ROLE_PREPRODUCTION":                      213,
		"CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER":              214,
		"CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER":        215,
		"CONTRIBUTOR_ROLE_PRESENTER":                          216,
		"CONTRIBUTOR_ROLE_PRIMARYMUSICIAN":                    217,
		"CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT":                218,
		"CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY":                  219,
		"CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR":              220,
		"CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT":               221,
		"CONTRIBUTOR_ROLE_PRODUCTIONMANAGER":                  222,
		"CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY":                223,
		"CONTRIBUTOR_ROLE_PROJECTENGINEER":                    224,
		"CONTRIBUTOR_ROLE_PROGRAMMER":                         225,
		"CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER":                226,
		"CONTRIBUTOR_ROLE_PROGRAMPRODUCER":                    227,
		"CONTRIBUTOR_ROLE_PROPERTYMANAGER":                    228,
		"CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR":                 229,
		"CONTRIBUTOR_ROLE_PUPPETEER":                          230,
		"CONTRIBUTOR_ROLE_PYROTECHNICIAN":                     231,
		"CONTRIBUTOR_ROLE_RECORDINGENGINEER":                  232,
		"CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER":            233,
		"CONTRIBUTOR_ROLE_REDACTOR":                           234,
		"CONTRIBUTOR_ROLE_REISSUEPRODUCER":                    235,
		"CONTRIBUTOR_ROLE_REMIXEDARTIST":                      236,
		"CONTRIBUTOR_ROLE_REMIXER":                            237,
		"CONTRIBUTOR_ROLE_REMIXINGENGINEER":                   238,
		"CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER":             239,
		"CONTRIBUTOR_ROLE_REPETITEUR":                         240,
		"CONTRIBUTOR_ROLE_RESEARCHER":                         241,
		"CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD":                   242,
		"CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER":                 243,
		"CONTRIBUTOR_ROLE_RESTAGER":                           244,
		"CONTRIBUTOR_ROLE_RIGGER":                             245,
		"CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT":          246,
		"CONTRIBUTOR_ROLE_RUNNER":                             247,
		"CONTRIBUTOR_ROLE_SCENICOPERATIVE":                    248,
		"CONTRIBUTOR_ROLE_SCIENTIFICADVISOR":                  249,
		"CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR":                   250,
		"CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR":      251,
		"CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR":            252,
		"CONTRIBUTOR_ROLE_SECONDCONDUCTOR":                    253,
		"CONTRIBUTOR_ROLE_SECONDENGINEER":                     254,
		"CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR":                 255,
		"CONTRIBUTOR_ROLE_SERIESPRODUCER":                     256,
		"CONTRIBUTOR_ROLE_SETDESIGNER":                        257,
		"CONTRIBUTOR_ROLE_SETDRESSER":                         258,
		"CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER":            259,
		"CONTRIBUTOR_ROLE_SOLOIST":                            260,
		"CONTRIBUTOR_ROLE_SOUNDDESIGNER":                      261,
		"CONTRIBUTOR_ROLE_SOUNDMIXER":                         262,
		"CONTRIBUTOR_ROLE_SOUNDRECORDIST":                     263,
		"CONTRIBUTOR_ROLE_SOUNDSUPERVISOR":                    264,
		"CONTRIBUTOR_ROLE_SPEAKER":                            265,
		"CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN":           266,
		"CONTRIBUTOR_ROLE_SPONSOR":                            267,
		"CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER":             268,
		"CONTRIBUTOR_ROLE_STAGEDIRECTOR":                      269,
		"CONTRIBUTOR_ROLE_STAGEENGINEER":                      270,
		"CONTRIBUTOR_ROLE_STORYTELLER":                        271,
		"CONTRIBUTOR_ROLE_STRINGENGINEER":                     272,
		"CONTRIBUTOR_ROLE_STRINGPRODUCER":                     273,
		"CONTRIBUTOR_ROLE_STRINGSDIRECTOR":                    274,
		"CONTRIBUTOR_ROLE_STUDIOCONDUCTOR":                    275,
		"CONTRIBUTOR_ROLE_STUDIOMUSICIAN":                     276,
		"CONTRIBUTOR_ROLE_STUDIOPERSONNEL":                    277,
		"CONTRIBUTOR_ROLE_STUDIOPRODUCER":                     278,
		"CONTRIBUTOR_ROLE_STUNTS":                             279,
		"CONTRIBUTOR_ROLE_SUBTITLESEDITOR":                    280,
		"CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR":                281,
		"CONTRIBUTOR_ROLE_SUPPORTINGACTOR":                    282,
		"CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER":             283,
		"CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER":       284,
		"CONTRIBUTOR_ROLE_TAPEOPERATOR":                       285,
		"CONTRIBUTOR_ROLE_TECHNICALDIRECTOR":                  286,
		"CONTRIBUTOR_ROLE_TONMEISTER":                         287,
		"CONTRIBUTOR_ROLE_TRACKINGENGINEER":                   288,
		"CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER":             289,
		"CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER":       290,
		"CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER": 291,
		"CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER":              292,
		"CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL":          293,
		"CONTRIBUTOR_ROLE_TYPEDESIGNER":                       294,
		"CONTRIBUTOR_ROLE_VIDEODIRECTOR":                      295,
		"CONTRIBUTOR_ROLE_VIDEOGRAPHER":                       296,
		"CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR":               297,
		"CONTRIBUTOR_ROLE_VIDEOPRODUCER":                      298,
		"CONTRIBUTOR_ROLE_VISIONMIXER":                        299,
		"CONTRIBUTOR_ROLE_VISUALEDITOR":                       300,
		"CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN":            301,
		"CONTRIBUTOR_ROLE_VOCALARRANGER":                      302,
		"CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER":               303,
		"CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER":         304,
		"CONTRIBUTOR_ROLE_VOCALENGINEER":                      305,
		"CONTRIBUTOR_ROLE_VOCALIST":                           306,
		"CONTRIBUTOR_ROLE_VOCALSECONDENGINEER":                307,
		"CONTRIBUTOR_ROLE_VOCALPRODUCER":                      308,
		"CONTRIBUTOR_ROLE_VOICEACTOR":                         309,
		"CONTRIBUTOR_ROLE_WARDROBE":                           310,
	}
)

func (x ContributorRole) Enum() *ContributorRole {
	p := new(ContributorRole)
	*p = x
	return p
}

func (x ContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[44].Descriptor()
}

func (ContributorRole) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[44]
}

func (x ContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContributorRole.Descriptor instead.
func (ContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{44}
}

type ContributorRoleRDR int32

const (
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_UNSPECIFIED                        ContributorRoleRDR = 0
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ACCOMPANYIST                       ContributorRoleRDR = 1
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ACTOR                              ContributorRoleRDR = 2
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ADDITIONALENGINEER                 ContributorRoleRDR = 3
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ADDITIONALMIXINGENGINEER           ContributorRoleRDR = 4
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ADDITIONALPERFORMER                ContributorRoleRDR = 5
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ADDITIONALPROGRAMMINGENGINEER      ContributorRoleRDR = 6
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ADDITIONALSTUDIOPRODUCER           ContributorRoleRDR = 7
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ANCHORPERSON                       ContributorRoleRDR = 8
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ANIMALTRAINER                      ContributorRoleRDR = 9
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ANIMATOR                           ContributorRoleRDR = 10
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ANNOTATOR                          ContributorRoleRDR = 11
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ANNOUNCER                          ContributorRoleRDR = 12
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_AANDRADMINISTRATOR                 ContributorRoleRDR = 13
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_AANDRCOORDINATOR                   ContributorRoleRDR = 14
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ARMOURER                           ContributorRoleRDR = 15
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ARTCOPYIST                         ContributorRoleRDR = 16
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ARTDIRECTOR                        ContributorRoleRDR = 17
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ARTIST                             ContributorRoleRDR = 18
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ARTISTBACKGROUNDVOCALENGINEER      ContributorRoleRDR = 19
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ARTISTVOCALENGINEER                ContributorRoleRDR = 20
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ARTISTVOCALSECONDENGINEER          ContributorRoleRDR = 21
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCAMERAOPERATOR            ContributorRoleRDR = 22
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCHIEFLIGHTINGTECHNICIAN   ContributorRoleRDR = 23
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCONDUCTOR                 ContributorRoleRDR = 24
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ASSISTANTDIRECTOR                  ContributorRoleRDR = 25
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ASSISTANTEDITOR                    ContributorRoleRDR = 26
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ASSISTANTENGINEER                  ContributorRoleRDR = 27
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ASSISTANTPRODUCER                  ContributorRoleRDR = 28
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ASSISTANTVISUALEDITOR              ContributorRoleRDR = 29
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ASSOCIATEDPERFORMER                ContributorRoleRDR = 30
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ASSOCIATEPRODUCER                  ContributorRoleRDR = 31
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_AURALTRAINER                       ContributorRoleRDR = 32
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_BACKGROUNDVOCALIST                 ContributorRoleRDR = 33
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_BALANCEENGINEER                    ContributorRoleRDR = 34
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_BANDLEADER                         ContributorRoleRDR = 35
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_BINDER                             ContributorRoleRDR = 36
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_BINDINGDESIGNER                    ContributorRoleRDR = 37
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_BOOKDESIGNER                       ContributorRoleRDR = 38
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_BOOKJACKDESIGNER                   ContributorRoleRDR = 39
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_BOOKPLATEDESIGNER                  ContributorRoleRDR = 40
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_BOOKPRODUCER                       ContributorRoleRDR = 41
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_BROADCASTASSISTANT                 ContributorRoleRDR = 42
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_BROADCASTJOURNALIST                ContributorRoleRDR = 43
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CALLIGRAPHER                       ContributorRoleRDR = 44
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CAMERAOPERATOR                     ContributorRoleRDR = 45
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CARPENTER                          ContributorRoleRDR = 46
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CARTOGRAPHER                       ContributorRoleRDR = 47
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CARTOONIST                         ContributorRoleRDR = 48
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CASTINGDIRECTOR                    ContributorRoleRDR = 49
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CAUSEUR                            ContributorRoleRDR = 50
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CENSOR                             ContributorRoleRDR = 51
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CHIEFLIGHTINGTECHNICIAN            ContributorRoleRDR = 52
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CHOIR                              ContributorRoleRDR = 53
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CHOIRMEMBER                        ContributorRoleRDR = 54
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CHOREOGRAPHER                      ContributorRoleRDR = 55
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CHORUSMASTER                       ContributorRoleRDR = 56
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CIRCUSARTIST                       ContributorRoleRDR = 57
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CLAPPERLOADER                      ContributorRoleRDR = 58
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CLUBDJ                             ContributorRoleRDR = 59
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CODIRECTOR                         ContributorRoleRDR = 60
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COEXECUTIVEPRODUCER                ContributorRoleRDR = 61
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COLORSEPARATOR                     ContributorRoleRDR = 62
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COMEDIAN                           ContributorRoleRDR = 63
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COMIXER                            ContributorRoleRDR = 64
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COMIXINGENGINEER                   ContributorRoleRDR = 65
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COMMENTATOR                        ContributorRoleRDR = 66
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COMMISSIONINGBROADCASTER           ContributorRoleRDR = 67
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COMPILATIONPRODUCER                ContributorRoleRDR = 68
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COMPUTERGRAPHICCREATOR             ContributorRoleRDR = 69
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COMPUTERPROGRAMMER                 ContributorRoleRDR = 70
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CONCERTMASTER                      ContributorRoleRDR = 71
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CONDUCTOR                          ContributorRoleRDR = 72
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CONSULTANT                         ContributorRoleRDR = 73
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CONTINUITYCHECKER                  ContributorRoleRDR = 74
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CONTRACTOR                         ContributorRoleRDR = 75
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COPRODUCER                         ContributorRoleRDR = 76
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_CORRESPONDENT                      ContributorRoleRDR = 77
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COSTUMEDESIGNER                    ContributorRoleRDR = 78
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_COVERDESIGNER                      ContributorRoleRDR = 79
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DANCER                             ContributorRoleRDR = 80
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DELINEATOR                         ContributorRoleRDR = 81
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DESIGNER                           ContributorRoleRDR = 82
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DIALOGUECOACH                      ContributorRoleRDR = 83
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DIALOGUEDIRECTOR                   ContributorRoleRDR = 84
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DIGITALAUDIOWORKSTATIONENGINEER    ContributorRoleRDR = 85
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DIGITALEDITINGENGINEER             ContributorRoleRDR = 86
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DIGITALEDITINGSECONDENGINEER       ContributorRoleRDR = 87
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DIRECTOR                           ContributorRoleRDR = 88
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DIRECTSTREAMDIGITALENGINEER        ContributorRoleRDR = 89
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DISTRIBUTIONCOMPANY                ContributorRoleRDR = 90
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DJ                                 ContributorRoleRDR = 91
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DRAUGHTSMAN                        ContributorRoleRDR = 92
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DRESSER                            ContributorRoleRDR = 93
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_DUBBER                             ContributorRoleRDR = 94
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_EDITOR                             ContributorRoleRDR = 95
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_EDITORINCHIEF                      ContributorRoleRDR = 96
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_EDITOROFTHEDAY                     ContributorRoleRDR = 97
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ENCODER                            ContributorRoleRDR = 98
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ENGINEER                           ContributorRoleRDR = 99
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ENSEMBLE                           ContributorRoleRDR = 100
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_EXECUTIVEPRODUCER                  ContributorRoleRDR = 101
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_EXPERT                             ContributorRoleRDR = 102
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FACSIMILIST                        ContributorRoleRDR = 103
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FIGHTDIRECTOR                      ContributorRoleRDR = 104
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FILMDIRECTOR                       ContributorRoleRDR = 105
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FILMDISTRIBUTOR                    ContributorRoleRDR = 106
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FILMEDITOR                         ContributorRoleRDR = 107
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FILMPRODUCER                       ContributorRoleRDR = 108
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FILMSOUNDENGINEER                  ContributorRoleRDR = 109
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FLOORMANAGER                       ContributorRoleRDR = 110
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FOCUSPULLER                        ContributorRoleRDR = 111
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FOLEYARTIST                        ContributorRoleRDR = 112
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FOLEYEDITOR                        ContributorRoleRDR = 113
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_FOLEYMIXER                         ContributorRoleRDR = 114
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_GRAPHICARTIST                      ContributorRoleRDR = 115
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_GRAPHICASSISTANT                   ContributorRoleRDR = 116
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_GRAPHICDESIGNER                    ContributorRoleRDR = 117
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_GREENSMAN                          ContributorRoleRDR = 118
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_GRIP                               ContributorRoleRDR = 119
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_GUESTCONDUCTOR                     ContributorRoleRDR = 120
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_GROUPMEMBER                        ContributorRoleRDR = 121
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_HAIRDRESSER                        ContributorRoleRDR = 122
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ILLUSTRATOR                        ContributorRoleRDR = 123
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_IMMERSIVEMASTERINGENGINEER         ContributorRoleRDR = 124
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_IMMERSIVEMIXINGENGINEER            ContributorRoleRDR = 125
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_INITIALPRODUCER                    ContributorRoleRDR = 126
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_INTERVIEWEDGUEST                   ContributorRoleRDR = 127
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_INTERVIEWER                        ContributorRoleRDR = 128
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_KEYCHARACTER                       ContributorRoleRDR = 129
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_KEYGRIP                            ContributorRoleRDR = 130
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_KEYTALENT                          ContributorRoleRDR = 131
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_LEADMAN                            ContributorRoleRDR = 132
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_LEADPERFORMER                      ContributorRoleRDR = 133
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_LEADVOCALIST                       ContributorRoleRDR = 134
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_LIGHTINGDIRECTOR                   ContributorRoleRDR = 135
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_LIGHTINGTECHNICIAN                 ContributorRoleRDR = 136
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_LOCATIONMANAGER                    ContributorRoleRDR = 137
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MAKEUPARTIST                       ContributorRoleRDR = 138
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MANUFACTURER                       ContributorRoleRDR = 139
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MASTERINGENGINEER                  ContributorRoleRDR = 140
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MASTERINGSECONDENGINEER            ContributorRoleRDR = 141
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MATTEARTIST                        ContributorRoleRDR = 142
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MIME                               ContributorRoleRDR = 143
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MIXER                              ContributorRoleRDR = 144
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MIXINGENGINEER                     ContributorRoleRDR = 145
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MIXINGSECONDENGINEER               ContributorRoleRDR = 146
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MUSICARRANGER                      ContributorRoleRDR = 147
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MUSICCOPYIST                       ContributorRoleRDR = 148
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MUSICDIRECTOR                      ContributorRoleRDR = 149
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MUSICGROUP                         ContributorRoleRDR = 150
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_MUSICIAN                           ContributorRoleRDR = 151
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_NARRATOR                           ContributorRoleRDR = 152
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_NEWSPRODUCER                       ContributorRoleRDR = 153
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_NEWSREADER                         ContributorRoleRDR = 154
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_NOTSPECIFIED                       ContributorRoleRDR = 155
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ORCHESTRA                          ContributorRoleRDR = 156
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ORCHESTRAMEMBER                    ContributorRoleRDR = 157
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_ORIGINALARTIST                     ContributorRoleRDR = 158
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_OVERDUBENGINEER                    ContributorRoleRDR = 159
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_OVERDUBSECONDENGINEER              ContributorRoleRDR = 160
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PAINTER                            ContributorRoleRDR = 161
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PERFORMER                          ContributorRoleRDR = 162
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PHOTOGRAPHER                       ContributorRoleRDR = 163
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PHOTOGRAPHYDIRECTOR                ContributorRoleRDR = 164
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PLAYBACKSINGER                     ContributorRoleRDR = 165
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_POSTPRODUCER                       ContributorRoleRDR = 166
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTION                      ContributorRoleRDR = 167
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTIONENGINEER              ContributorRoleRDR = 168
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTIONSECONDENGINEER        ContributorRoleRDR = 169
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PRESENTER                          ContributorRoleRDR = 170
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PRIMARYMUSICIAN                    ContributorRoleRDR = 171
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONASSISTANT                ContributorRoleRDR = 172
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONCOMPANY                  ContributorRoleRDR = 173
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONCOORDINATOR              ContributorRoleRDR = 174
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONDEPARTMENT               ContributorRoleRDR = 175
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONMANAGER                  ContributorRoleRDR = 176
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONSECRETARY                ContributorRoleRDR = 177
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PROJECTENGINEER                    ContributorRoleRDR = 178
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PROGRAMMER                         ContributorRoleRDR = 179
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PROGRAMMINGENGINEER                ContributorRoleRDR = 180
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PROGRAMPRODUCER                    ContributorRoleRDR = 181
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PROPERTYMANAGER                    ContributorRoleRDR = 182
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PUBLISHINGDIRECTOR                 ContributorRoleRDR = 183
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PUPPETEER                          ContributorRoleRDR = 184
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_PYROTECHNICIAN                     ContributorRoleRDR = 185
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_RECORDINGENGINEER                  ContributorRoleRDR = 186
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_RECORDINGSECONDENGINEER            ContributorRoleRDR = 187
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_REDACTOR                           ContributorRoleRDR = 188
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_REISSUEPRODUCER                    ContributorRoleRDR = 189
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_REMIXEDARTIST                      ContributorRoleRDR = 190
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_REMIXER                            ContributorRoleRDR = 191
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_REMIXINGENGINEER                   ContributorRoleRDR = 192
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_REMIXINGSECONDENGINEER             ContributorRoleRDR = 193
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_REPETITEUR                         ContributorRoleRDR = 194
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_RESEARCHER                         ContributorRoleRDR = 195
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_RESEARCHTEAMHEAD                   ContributorRoleRDR = 196
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_RESEARCHTEAMMEMBER                 ContributorRoleRDR = 197
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_RESTAGER                           ContributorRoleRDR = 198
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_RIGGER                             ContributorRoleRDR = 199
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_RIGHTSCONTROLLERONPRODUCT          ContributorRoleRDR = 200
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_RUNNER                             ContributorRoleRDR = 201
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SCENICOPERATIVE                    ContributorRoleRDR = 202
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SCIENTIFICADVISOR                  ContributorRoleRDR = 203
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SCRIPTSUPERVISOR                   ContributorRoleRDR = 204
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SECONDASSISTANTCAMERAOPERATOR      ContributorRoleRDR = 205
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SECONDASSISTANTDIRECTOR            ContributorRoleRDR = 206
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SECONDCONDUCTOR                    ContributorRoleRDR = 207
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SECONDENGINEER                     ContributorRoleRDR = 208
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SECONDUNITDIRECTOR                 ContributorRoleRDR = 209
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SERIESPRODUCER                     ContributorRoleRDR = 210
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SETDESIGNER                        ContributorRoleRDR = 211
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SETDRESSER                         ContributorRoleRDR = 212
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SIGNLANGUAGEINTERPRETER            ContributorRoleRDR = 213
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SOLOIST                            ContributorRoleRDR = 214
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SOUNDDESIGNER                      ContributorRoleRDR = 215
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SOUNDMIXER                         ContributorRoleRDR = 216
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SOUNDRECORDIST                     ContributorRoleRDR = 217
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SOUNDSUPERVISOR                    ContributorRoleRDR = 218
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SPEAKER                            ContributorRoleRDR = 219
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SPECIALEFFECTSTECHNICIAN           ContributorRoleRDR = 220
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SPONSOR                            ContributorRoleRDR = 221
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STAGEASSISTANTENGINEER             ContributorRoleRDR = 222
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STAGEDIRECTOR                      ContributorRoleRDR = 223
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STAGEENGINEER                      ContributorRoleRDR = 224
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STORYTELLER                        ContributorRoleRDR = 225
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STRINGENGINEER                     ContributorRoleRDR = 226
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STRINGPRODUCER                     ContributorRoleRDR = 227
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STRINGSDIRECTOR                    ContributorRoleRDR = 228
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STUDIOCONDUCTOR                    ContributorRoleRDR = 229
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STUDIOMUSICIAN                     ContributorRoleRDR = 230
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STUDIOPERSONNEL                    ContributorRoleRDR = 231
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STUDIOPRODUCER                     ContributorRoleRDR = 232
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_STUNTS                             ContributorRoleRDR = 233
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SUBTITLESEDITOR                    ContributorRoleRDR = 234
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SUBTITLESTRANSLATOR                ContributorRoleRDR = 235
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SUPPORTINGACTOR                    ContributorRoleRDR = 236
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SURROUNDMIXINGENGINEER             ContributorRoleRDR = 237
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_SURROUNDMIXINGSECONDENGINEER       ContributorRoleRDR = 238
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_TAPEOPERATOR                       ContributorRoleRDR = 239
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_TECHNICALDIRECTOR                  ContributorRoleRDR = 240
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_TONMEISTER                         ContributorRoleRDR = 241
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_TRACKINGENGINEER                   ContributorRoleRDR = 242
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_TRACKINGSECONDENGINEER             ContributorRoleRDR = 243
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_TRANSFERSANDSAFETIESENGINEER       ContributorRoleRDR = 244
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_TRANSFERSANDSAFETIESSECONDENGINEER ContributorRoleRDR = 245
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_TRANSPORTATIONMANAGER              ContributorRoleRDR = 246
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_TREATMENT_PROGRAMPROPOSAL          ContributorRoleRDR = 247
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_TYPEDESIGNER                       ContributorRoleRDR = 248
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_UNKNOWN                            ContributorRoleRDR = 249
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_USERDEFINED                        ContributorRoleRDR = 250
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VIDEODIRECTOR                      ContributorRoleRDR = 251
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VIDEOGRAPHER                       ContributorRoleRDR = 252
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VIDEOMUSICALDIRECTOR               ContributorRoleRDR = 253
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VIDEOPRODUCER                      ContributorRoleRDR = 254
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VISIONMIXER                        ContributorRoleRDR = 255
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VISUALEDITOR                       ContributorRoleRDR = 256
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VISUALEFFECTSTECHNICIAN            ContributorRoleRDR = 257
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VOCALARRANGER                      ContributorRoleRDR = 258
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VOCALEDITINGENGINEER               ContributorRoleRDR = 259
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VOCALEDITINGSECONDENGINEER         ContributorRoleRDR = 260
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VOCALENGINEER                      ContributorRoleRDR = 261
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VOCALIST                           ContributorRoleRDR = 262
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VOCALSECONDENGINEER                ContributorRoleRDR = 263
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VOCALPRODUCER                      ContributorRoleRDR = 264
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_VOICEACTOR                         ContributorRoleRDR = 265
	ContributorRoleRDR_CONTRIBUTOR_ROLE_R_D_R_WARDROBE                           ContributorRoleRDR = 266
)

// Enum value maps for ContributorRoleRDR.
var (
	ContributorRoleRDR_name = map[int32]string{
		0:   "CONTRIBUTOR_ROLE_R_D_R_UNSPECIFIED",
		1:   "CONTRIBUTOR_ROLE_R_D_R_ACCOMPANYIST",
		2:   "CONTRIBUTOR_ROLE_R_D_R_ACTOR",
		3:   "CONTRIBUTOR_ROLE_R_D_R_ADDITIONALENGINEER",
		4:   "CONTRIBUTOR_ROLE_R_D_R_ADDITIONALMIXINGENGINEER",
		5:   "CONTRIBUTOR_ROLE_R_D_R_ADDITIONALPERFORMER",
		6:   "CONTRIBUTOR_ROLE_R_D_R_ADDITIONALPROGRAMMINGENGINEER",
		7:   "CONTRIBUTOR_ROLE_R_D_R_ADDITIONALSTUDIOPRODUCER",
		8:   "CONTRIBUTOR_ROLE_R_D_R_ANCHORPERSON",
		9:   "CONTRIBUTOR_ROLE_R_D_R_ANIMALTRAINER",
		10:  "CONTRIBUTOR_ROLE_R_D_R_ANIMATOR",
		11:  "CONTRIBUTOR_ROLE_R_D_R_ANNOTATOR",
		12:  "CONTRIBUTOR_ROLE_R_D_R_ANNOUNCER",
		13:  "CONTRIBUTOR_ROLE_R_D_R_AANDRADMINISTRATOR",
		14:  "CONTRIBUTOR_ROLE_R_D_R_AANDRCOORDINATOR",
		15:  "CONTRIBUTOR_ROLE_R_D_R_ARMOURER",
		16:  "CONTRIBUTOR_ROLE_R_D_R_ARTCOPYIST",
		17:  "CONTRIBUTOR_ROLE_R_D_R_ARTDIRECTOR",
		18:  "CONTRIBUTOR_ROLE_R_D_R_ARTIST",
		19:  "CONTRIBUTOR_ROLE_R_D_R_ARTISTBACKGROUNDVOCALENGINEER",
		20:  "CONTRIBUTOR_ROLE_R_D_R_ARTISTVOCALENGINEER",
		21:  "CONTRIBUTOR_ROLE_R_D_R_ARTISTVOCALSECONDENGINEER",
		22:  "CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCAMERAOPERATOR",
		23:  "CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCHIEFLIGHTINGTECHNICIAN",
		24:  "CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCONDUCTOR",
		25:  "CONTRIBUTOR_ROLE_R_D_R_ASSISTANTDIRECTOR",
		26:  "CONTRIBUTOR_ROLE_R_D_R_ASSISTANTEDITOR",
		27:  "CONTRIBUTOR_ROLE_R_D_R_ASSISTANTENGINEER",
		28:  "CONTRIBUTOR_ROLE_R_D_R_ASSISTANTPRODUCER",
		29:  "CONTRIBUTOR_ROLE_R_D_R_ASSISTANTVISUALEDITOR",
		30:  "CONTRIBUTOR_ROLE_R_D_R_ASSOCIATEDPERFORMER",
		31:  "CONTRIBUTOR_ROLE_R_D_R_ASSOCIATEPRODUCER",
		32:  "CONTRIBUTOR_ROLE_R_D_R_AURALTRAINER",
		33:  "CONTRIBUTOR_ROLE_R_D_R_BACKGROUNDVOCALIST",
		34:  "CONTRIBUTOR_ROLE_R_D_R_BALANCEENGINEER",
		35:  "CONTRIBUTOR_ROLE_R_D_R_BANDLEADER",
		36:  "CONTRIBUTOR_ROLE_R_D_R_BINDER",
		37:  "CONTRIBUTOR_ROLE_R_D_R_BINDINGDESIGNER",
		38:  "CONTRIBUTOR_ROLE_R_D_R_BOOKDESIGNER",
		39:  "CONTRIBUTOR_ROLE_R_D_R_BOOKJACKDESIGNER",
		40:  "CONTRIBUTOR_ROLE_R_D_R_BOOKPLATEDESIGNER",
		41:  "CONTRIBUTOR_ROLE_R_D_R_BOOKPRODUCER",
		42:  "CONTRIBUTOR_ROLE_R_D_R_BROADCASTASSISTANT",
		43:  "CONTRIBUTOR_ROLE_R_D_R_BROADCASTJOURNALIST",
		44:  "CONTRIBUTOR_ROLE_R_D_R_CALLIGRAPHER",
		45:  "CONTRIBUTOR_ROLE_R_D_R_CAMERAOPERATOR",
		46:  "CONTRIBUTOR_ROLE_R_D_R_CARPENTER",
		47:  "CONTRIBUTOR_ROLE_R_D_R_CARTOGRAPHER",
		48:  "CONTRIBUTOR_ROLE_R_D_R_CARTOONIST",
		49:  "CONTRIBUTOR_ROLE_R_D_R_CASTINGDIRECTOR",
		50:  "CONTRIBUTOR_ROLE_R_D_R_CAUSEUR",
		51:  "CONTRIBUTOR_ROLE_R_D_R_CENSOR",
		52:  "CONTRIBUTOR_ROLE_R_D_R_CHIEFLIGHTINGTECHNICIAN",
		53:  "CONTRIBUTOR_ROLE_R_D_R_CHOIR",
		54:  "CONTRIBUTOR_ROLE_R_D_R_CHOIRMEMBER",
		55:  "CONTRIBUTOR_ROLE_R_D_R_CHOREOGRAPHER",
		56:  "CONTRIBUTOR_ROLE_R_D_R_CHORUSMASTER",
		57:  "CONTRIBUTOR_ROLE_R_D_R_CIRCUSARTIST",
		58:  "CONTRIBUTOR_ROLE_R_D_R_CLAPPERLOADER",
		59:  "CONTRIBUTOR_ROLE_R_D_R_CLUBDJ",
		60:  "CONTRIBUTOR_ROLE_R_D_R_CODIRECTOR",
		61:  "CONTRIBUTOR_ROLE_R_D_R_COEXECUTIVEPRODUCER",
		62:  "CONTRIBUTOR_ROLE_R_D_R_COLORSEPARATOR",
		63:  "CONTRIBUTOR_ROLE_R_D_R_COMEDIAN",
		64:  "CONTRIBUTOR_ROLE_R_D_R_COMIXER",
		65:  "CONTRIBUTOR_ROLE_R_D_R_COMIXINGENGINEER",
		66:  "CONTRIBUTOR_ROLE_R_D_R_COMMENTATOR",
		67:  "CONTRIBUTOR_ROLE_R_D_R_COMMISSIONINGBROADCASTER",
		68:  "CONTRIBUTOR_ROLE_R_D_R_COMPILATIONPRODUCER",
		69:  "CONTRIBUTOR_ROLE_R_D_R_COMPUTERGRAPHICCREATOR",
		70:  "CONTRIBUTOR_ROLE_R_D_R_COMPUTERPROGRAMMER",
		71:  "CONTRIBUTOR_ROLE_R_D_R_CONCERTMASTER",
		72:  "CONTRIBUTOR_ROLE_R_D_R_CONDUCTOR",
		73:  "CONTRIBUTOR_ROLE_R_D_R_CONSULTANT",
		74:  "CONTRIBUTOR_ROLE_R_D_R_CONTINUITYCHECKER",
		75:  "CONTRIBUTOR_ROLE_R_D_R_CONTRACTOR",
		76:  "CONTRIBUTOR_ROLE_R_D_R_COPRODUCER",
		77:  "CONTRIBUTOR_ROLE_R_D_R_CORRESPONDENT",
		78:  "CONTRIBUTOR_ROLE_R_D_R_COSTUMEDESIGNER",
		79:  "CONTRIBUTOR_ROLE_R_D_R_COVERDESIGNER",
		80:  "CONTRIBUTOR_ROLE_R_D_R_DANCER",
		81:  "CONTRIBUTOR_ROLE_R_D_R_DELINEATOR",
		82:  "CONTRIBUTOR_ROLE_R_D_R_DESIGNER",
		83:  "CONTRIBUTOR_ROLE_R_D_R_DIALOGUECOACH",
		84:  "CONTRIBUTOR_ROLE_R_D_R_DIALOGUEDIRECTOR",
		85:  "CONTRIBUTOR_ROLE_R_D_R_DIGITALAUDIOWORKSTATIONENGINEER",
		86:  "CONTRIBUTOR_ROLE_R_D_R_DIGITALEDITINGENGINEER",
		87:  "CONTRIBUTOR_ROLE_R_D_R_DIGITALEDITINGSECONDENGINEER",
		88:  "CONTRIBUTOR_ROLE_R_D_R_DIRECTOR",
		89:  "CONTRIBUTOR_ROLE_R_D_R_DIRECTSTREAMDIGITALENGINEER",
		90:  "CONTRIBUTOR_ROLE_R_D_R_DISTRIBUTIONCOMPANY",
		91:  "CONTRIBUTOR_ROLE_R_D_R_DJ",
		92:  "CONTRIBUTOR_ROLE_R_D_R_DRAUGHTSMAN",
		93:  "CONTRIBUTOR_ROLE_R_D_R_DRESSER",
		94:  "CONTRIBUTOR_ROLE_R_D_R_DUBBER",
		95:  "CONTRIBUTOR_ROLE_R_D_R_EDITOR",
		96:  "CONTRIBUTOR_ROLE_R_D_R_EDITORINCHIEF",
		97:  "CONTRIBUTOR_ROLE_R_D_R_EDITOROFTHEDAY",
		98:  "CONTRIBUTOR_ROLE_R_D_R_ENCODER",
		99:  "CONTRIBUTOR_ROLE_R_D_R_ENGINEER",
		100: "CONTRIBUTOR_ROLE_R_D_R_ENSEMBLE",
		101: "CONTRIBUTOR_ROLE_R_D_R_EXECUTIVEPRODUCER",
		102: "CONTRIBUTOR_ROLE_R_D_R_EXPERT",
		103: "CONTRIBUTOR_ROLE_R_D_R_FACSIMILIST",
		104: "CONTRIBUTOR_ROLE_R_D_R_FIGHTDIRECTOR",
		105: "CONTRIBUTOR_ROLE_R_D_R_FILMDIRECTOR",
		106: "CONTRIBUTOR_ROLE_R_D_R_FILMDISTRIBUTOR",
		107: "CONTRIBUTOR_ROLE_R_D_R_FILMEDITOR",
		108: "CONTRIBUTOR_ROLE_R_D_R_FILMPRODUCER",
		109: "CONTRIBUTOR_ROLE_R_D_R_FILMSOUNDENGINEER",
		110: "CONTRIBUTOR_ROLE_R_D_R_FLOORMANAGER",
		111: "CONTRIBUTOR_ROLE_R_D_R_FOCUSPULLER",
		112: "CONTRIBUTOR_ROLE_R_D_R_FOLEYARTIST",
		113: "CONTRIBUTOR_ROLE_R_D_R_FOLEYEDITOR",
		114: "CONTRIBUTOR_ROLE_R_D_R_FOLEYMIXER",
		115: "CONTRIBUTOR_ROLE_R_D_R_GRAPHICARTIST",
		116: "CONTRIBUTOR_ROLE_R_D_R_GRAPHICASSISTANT",
		117: "CONTRIBUTOR_ROLE_R_D_R_GRAPHICDESIGNER",
		118: "CONTRIBUTOR_ROLE_R_D_R_GREENSMAN",
		119: "CONTRIBUTOR_ROLE_R_D_R_GRIP",
		120: "CONTRIBUTOR_ROLE_R_D_R_GUESTCONDUCTOR",
		121: "CONTRIBUTOR_ROLE_R_D_R_GROUPMEMBER",
		122: "CONTRIBUTOR_ROLE_R_D_R_HAIRDRESSER",
		123: "CONTRIBUTOR_ROLE_R_D_R_ILLUSTRATOR",
		124: "CONTRIBUTOR_ROLE_R_D_R_IMMERSIVEMASTERINGENGINEER",
		125: "CONTRIBUTOR_ROLE_R_D_R_IMMERSIVEMIXINGENGINEER",
		126: "CONTRIBUTOR_ROLE_R_D_R_INITIALPRODUCER",
		127: "CONTRIBUTOR_ROLE_R_D_R_INTERVIEWEDGUEST",
		128: "CONTRIBUTOR_ROLE_R_D_R_INTERVIEWER",
		129: "CONTRIBUTOR_ROLE_R_D_R_KEYCHARACTER",
		130: "CONTRIBUTOR_ROLE_R_D_R_KEYGRIP",
		131: "CONTRIBUTOR_ROLE_R_D_R_KEYTALENT",
		132: "CONTRIBUTOR_ROLE_R_D_R_LEADMAN",
		133: "CONTRIBUTOR_ROLE_R_D_R_LEADPERFORMER",
		134: "CONTRIBUTOR_ROLE_R_D_R_LEADVOCALIST",
		135: "CONTRIBUTOR_ROLE_R_D_R_LIGHTINGDIRECTOR",
		136: "CONTRIBUTOR_ROLE_R_D_R_LIGHTINGTECHNICIAN",
		137: "CONTRIBUTOR_ROLE_R_D_R_LOCATIONMANAGER",
		138: "CONTRIBUTOR_ROLE_R_D_R_MAKEUPARTIST",
		139: "CONTRIBUTOR_ROLE_R_D_R_MANUFACTURER",
		140: "CONTRIBUTOR_ROLE_R_D_R_MASTERINGENGINEER",
		141: "CONTRIBUTOR_ROLE_R_D_R_MASTERINGSECONDENGINEER",
		142: "CONTRIBUTOR_ROLE_R_D_R_MATTEARTIST",
		143: "CONTRIBUTOR_ROLE_R_D_R_MIME",
		144: "CONTRIBUTOR_ROLE_R_D_R_MIXER",
		145: "CONTRIBUTOR_ROLE_R_D_R_MIXINGENGINEER",
		146: "CONTRIBUTOR_ROLE_R_D_R_MIXINGSECONDENGINEER",
		147: "CONTRIBUTOR_ROLE_R_D_R_MUSICARRANGER",
		148: "CONTRIBUTOR_ROLE_R_D_R_MUSICCOPYIST",
		149: "CONTRIBUTOR_ROLE_R_D_R_MUSICDIRECTOR",
		150: "CONTRIBUTOR_ROLE_R_D_R_MUSICGROUP",
		151: "CONTRIBUTOR_ROLE_R_D_R_MUSICIAN",
		152: "CONTRIBUTOR_ROLE_R_D_R_NARRATOR",
		153: "CONTRIBUTOR_ROLE_R_D_R_NEWSPRODUCER",
		154: "CONTRIBUTOR_ROLE_R_D_R_NEWSREADER",
		155: "CONTRIBUTOR_ROLE_R_D_R_NOTSPECIFIED",
		156: "CONTRIBUTOR_ROLE_R_D_R_ORCHESTRA",
		157: "CONTRIBUTOR_ROLE_R_D_R_ORCHESTRAMEMBER",
		158: "CONTRIBUTOR_ROLE_R_D_R_ORIGINALARTIST",
		159: "CONTRIBUTOR_ROLE_R_D_R_OVERDUBENGINEER",
		160: "CONTRIBUTOR_ROLE_R_D_R_OVERDUBSECONDENGINEER",
		161: "CONTRIBUTOR_ROLE_R_D_R_PAINTER",
		162: "CONTRIBUTOR_ROLE_R_D_R_PERFORMER",
		163: "CONTRIBUTOR_ROLE_R_D_R_PHOTOGRAPHER",
		164: "CONTRIBUTOR_ROLE_R_D_R_PHOTOGRAPHYDIRECTOR",
		165: "CONTRIBUTOR_ROLE_R_D_R_PLAYBACKSINGER",
		166: "CONTRIBUTOR_ROLE_R_D_R_POSTPRODUCER",
		167: "CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTION",
		168: "CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTIONENGINEER",
		169: "CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTIONSECONDENGINEER",
		170: "CONTRIBUTOR_ROLE_R_D_R_PRESENTER",
		171: "CONTRIBUTOR_ROLE_R_D_R_PRIMARYMUSICIAN",
		172: "CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONASSISTANT",
		173: "CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONCOMPANY",
		174: "CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONCOORDINATOR",
		175: "CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONDEPARTMENT",
		176: "CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONMANAGER",
		177: "CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONSECRETARY",
		178: "CONTRIBUTOR_ROLE_R_D_R_PROJECTENGINEER",
		179: "CONTRIBUTOR_ROLE_R_D_R_PROGRAMMER",
		180: "CONTRIBUTOR_ROLE_R_D_R_PROGRAMMINGENGINEER",
		181: "CONTRIBUTOR_ROLE_R_D_R_PROGRAMPRODUCER",
		182: "CONTRIBUTOR_ROLE_R_D_R_PROPERTYMANAGER",
		183: "CONTRIBUTOR_ROLE_R_D_R_PUBLISHINGDIRECTOR",
		184: "CONTRIBUTOR_ROLE_R_D_R_PUPPETEER",
		185: "CONTRIBUTOR_ROLE_R_D_R_PYROTECHNICIAN",
		186: "CONTRIBUTOR_ROLE_R_D_R_RECORDINGENGINEER",
		187: "CONTRIBUTOR_ROLE_R_D_R_RECORDINGSECONDENGINEER",
		188: "CONTRIBUTOR_ROLE_R_D_R_REDACTOR",
		189: "CONTRIBUTOR_ROLE_R_D_R_REISSUEPRODUCER",
		190: "CONTRIBUTOR_ROLE_R_D_R_REMIXEDARTIST",
		191: "CONTRIBUTOR_ROLE_R_D_R_REMIXER",
		192: "CONTRIBUTOR_ROLE_R_D_R_REMIXINGENGINEER",
		193: "CONTRIBUTOR_ROLE_R_D_R_REMIXINGSECONDENGINEER",
		194: "CONTRIBUTOR_ROLE_R_D_R_REPETITEUR",
		195: "CONTRIBUTOR_ROLE_R_D_R_RESEARCHER",
		196: "CONTRIBUTOR_ROLE_R_D_R_RESEARCHTEAMHEAD",
		197: "CONTRIBUTOR_ROLE_R_D_R_RESEARCHTEAMMEMBER",
		198: "CONTRIBUTOR_ROLE_R_D_R_RESTAGER",
		199: "CONTRIBUTOR_ROLE_R_D_R_RIGGER",
		200: "CONTRIBUTOR_ROLE_R_D_R_RIGHTSCONTROLLERONPRODUCT",
		201: "CONTRIBUTOR_ROLE_R_D_R_RUNNER",
		202: "CONTRIBUTOR_ROLE_R_D_R_SCENICOPERATIVE",
		203: "CONTRIBUTOR_ROLE_R_D_R_SCIENTIFICADVISOR",
		204: "CONTRIBUTOR_ROLE_R_D_R_SCRIPTSUPERVISOR",
		205: "CONTRIBUTOR_ROLE_R_D_R_SECONDASSISTANTCAMERAOPERATOR",
		206: "CONTRIBUTOR_ROLE_R_D_R_SECONDASSISTANTDIRECTOR",
		207: "CONTRIBUTOR_ROLE_R_D_R_SECONDCONDUCTOR",
		208: "CONTRIBUTOR_ROLE_R_D_R_SECONDENGINEER",
		209: "CONTRIBUTOR_ROLE_R_D_R_SECONDUNITDIRECTOR",
		210: "CONTRIBUTOR_ROLE_R_D_R_SERIESPRODUCER",
		211: "CONTRIBUTOR_ROLE_R_D_R_SETDESIGNER",
		212: "CONTRIBUTOR_ROLE_R_D_R_SETDRESSER",
		213: "CONTRIBUTOR_ROLE_R_D_R_SIGNLANGUAGEINTERPRETER",
		214: "CONTRIBUTOR_ROLE_R_D_R_SOLOIST",
		215: "CONTRIBUTOR_ROLE_R_D_R_SOUNDDESIGNER",
		216: "CONTRIBUTOR_ROLE_R_D_R_SOUNDMIXER",
		217: "CONTRIBUTOR_ROLE_R_D_R_SOUNDRECORDIST",
		218: "CONTRIBUTOR_ROLE_R_D_R_SOUNDSUPERVISOR",
		219: "CONTRIBUTOR_ROLE_R_D_R_SPEAKER",
		220: "CONTRIBUTOR_ROLE_R_D_R_SPECIALEFFECTSTECHNICIAN",
		221: "CONTRIBUTOR_ROLE_R_D_R_SPONSOR",
		222: "CONTRIBUTOR_ROLE_R_D_R_STAGEASSISTANTENGINEER",
		223: "CONTRIBUTOR_ROLE_R_D_R_STAGEDIRECTOR",
		224: "CONTRIBUTOR_ROLE_R_D_R_STAGEENGINEER",
		225: "CONTRIBUTOR_ROLE_R_D_R_STORYTELLER",
		226: "CONTRIBUTOR_ROLE_R_D_R_STRINGENGINEER",
		227: "CONTRIBUTOR_ROLE_R_D_R_STRINGPRODUCER",
		228: "CONTRIBUTOR_ROLE_R_D_R_STRINGSDIRECTOR",
		229: "CONTRIBUTOR_ROLE_R_D_R_STUDIOCONDUCTOR",
		230: "CONTRIBUTOR_ROLE_R_D_R_STUDIOMUSICIAN",
		231: "CONTRIBUTOR_ROLE_R_D_R_STUDIOPERSONNEL",
		232: "CONTRIBUTOR_ROLE_R_D_R_STUDIOPRODUCER",
		233: "CONTRIBUTOR_ROLE_R_D_R_STUNTS",
		234: "CONTRIBUTOR_ROLE_R_D_R_SUBTITLESEDITOR",
		235: "CONTRIBUTOR_ROLE_R_D_R_SUBTITLESTRANSLATOR",
		236: "CONTRIBUTOR_ROLE_R_D_R_SUPPORTINGACTOR",
		237: "CONTRIBUTOR_ROLE_R_D_R_SURROUNDMIXINGENGINEER",
		238: "CONTRIBUTOR_ROLE_R_D_R_SURROUNDMIXINGSECONDENGINEER",
		239: "CONTRIBUTOR_ROLE_R_D_R_TAPEOPERATOR",
		240: "CONTRIBUTOR_ROLE_R_D_R_TECHNICALDIRECTOR",
		241: "CONTRIBUTOR_ROLE_R_D_R_TONMEISTER",
		242: "CONTRIBUTOR_ROLE_R_D_R_TRACKINGENGINEER",
		243: "CONTRIBUTOR_ROLE_R_D_R_TRACKINGSECONDENGINEER",
		244: "CONTRIBUTOR_ROLE_R_D_R_TRANSFERSANDSAFETIESENGINEER",
		245: "CONTRIBUTOR_ROLE_R_D_R_TRANSFERSANDSAFETIESSECONDENGINEER",
		246: "CONTRIBUTOR_ROLE_R_D_R_TRANSPORTATIONMANAGER",
		247: "CONTRIBUTOR_ROLE_R_D_R_TREATMENT_PROGRAMPROPOSAL",
		248: "CONTRIBUTOR_ROLE_R_D_R_TYPEDESIGNER",
		249: "CONTRIBUTOR_ROLE_R_D_R_UNKNOWN",
		250: "CONTRIBUTOR_ROLE_R_D_R_USERDEFINED",
		251: "CONTRIBUTOR_ROLE_R_D_R_VIDEODIRECTOR",
		252: "CONTRIBUTOR_ROLE_R_D_R_VIDEOGRAPHER",
		253: "CONTRIBUTOR_ROLE_R_D_R_VIDEOMUSICALDIRECTOR",
		254: "CONTRIBUTOR_ROLE_R_D_R_VIDEOPRODUCER",
		255: "CONTRIBUTOR_ROLE_R_D_R_VISIONMIXER",
		256: "CONTRIBUTOR_ROLE_R_D_R_VISUALEDITOR",
		257: "CONTRIBUTOR_ROLE_R_D_R_VISUALEFFECTSTECHNICIAN",
		258: "CONTRIBUTOR_ROLE_R_D_R_VOCALARRANGER",
		259: "CONTRIBUTOR_ROLE_R_D_R_VOCALEDITINGENGINEER",
		260: "CONTRIBUTOR_ROLE_R_D_R_VOCALEDITINGSECONDENGINEER",
		261: "CONTRIBUTOR_ROLE_R_D_R_VOCALENGINEER",
		262: "CONTRIBUTOR_ROLE_R_D_R_VOCALIST",
		263: "CONTRIBUTOR_ROLE_R_D_R_VOCALSECONDENGINEER",
		264: "CONTRIBUTOR_ROLE_R_D_R_VOCALPRODUCER",
		265: "CONTRIBUTOR_ROLE_R_D_R_VOICEACTOR",
		266: "CONTRIBUTOR_ROLE_R_D_R_WARDROBE",
	}
	ContributorRoleRDR_value = map[string]int32{
		"CONTRIBUTOR_ROLE_R_D_R_UNSPECIFIED":                        0,
		"CONTRIBUTOR_ROLE_R_D_R_ACCOMPANYIST":                       1,
		"CONTRIBUTOR_ROLE_R_D_R_ACTOR":                              2,
		"CONTRIBUTOR_ROLE_R_D_R_ADDITIONALENGINEER":                 3,
		"CONTRIBUTOR_ROLE_R_D_R_ADDITIONALMIXINGENGINEER":           4,
		"CONTRIBUTOR_ROLE_R_D_R_ADDITIONALPERFORMER":                5,
		"CONTRIBUTOR_ROLE_R_D_R_ADDITIONALPROGRAMMINGENGINEER":      6,
		"CONTRIBUTOR_ROLE_R_D_R_ADDITIONALSTUDIOPRODUCER":           7,
		"CONTRIBUTOR_ROLE_R_D_R_ANCHORPERSON":                       8,
		"CONTRIBUTOR_ROLE_R_D_R_ANIMALTRAINER":                      9,
		"CONTRIBUTOR_ROLE_R_D_R_ANIMATOR":                           10,
		"CONTRIBUTOR_ROLE_R_D_R_ANNOTATOR":                          11,
		"CONTRIBUTOR_ROLE_R_D_R_ANNOUNCER":                          12,
		"CONTRIBUTOR_ROLE_R_D_R_AANDRADMINISTRATOR":                 13,
		"CONTRIBUTOR_ROLE_R_D_R_AANDRCOORDINATOR":                   14,
		"CONTRIBUTOR_ROLE_R_D_R_ARMOURER":                           15,
		"CONTRIBUTOR_ROLE_R_D_R_ARTCOPYIST":                         16,
		"CONTRIBUTOR_ROLE_R_D_R_ARTDIRECTOR":                        17,
		"CONTRIBUTOR_ROLE_R_D_R_ARTIST":                             18,
		"CONTRIBUTOR_ROLE_R_D_R_ARTISTBACKGROUNDVOCALENGINEER":      19,
		"CONTRIBUTOR_ROLE_R_D_R_ARTISTVOCALENGINEER":                20,
		"CONTRIBUTOR_ROLE_R_D_R_ARTISTVOCALSECONDENGINEER":          21,
		"CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCAMERAOPERATOR":            22,
		"CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCHIEFLIGHTINGTECHNICIAN":   23,
		"CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCONDUCTOR":                 24,
		"CONTRIBUTOR_ROLE_R_D_R_ASSISTANTDIRECTOR":                  25,
		"CONTRIBUTOR_ROLE_R_D_R_ASSISTANTEDITOR":                    26,
		"CONTRIBUTOR_ROLE_R_D_R_ASSISTANTENGINEER":                  27,
		"CONTRIBUTOR_ROLE_R_D_R_ASSISTANTPRODUCER":                  28,
		"CONTRIBUTOR_ROLE_R_D_R_ASSISTANTVISUALEDITOR":              29,
		"CONTRIBUTOR_ROLE_R_D_R_ASSOCIATEDPERFORMER":                30,
		"CONTRIBUTOR_ROLE_R_D_R_ASSOCIATEPRODUCER":                  31,
		"CONTRIBUTOR_ROLE_R_D_R_AURALTRAINER":                       32,
		"CONTRIBUTOR_ROLE_R_D_R_BACKGROUNDVOCALIST":                 33,
		"CONTRIBUTOR_ROLE_R_D_R_BALANCEENGINEER":                    34,
		"CONTRIBUTOR_ROLE_R_D_R_BANDLEADER":                         35,
		"CONTRIBUTOR_ROLE_R_D_R_BINDER":                             36,
		"CONTRIBUTOR_ROLE_R_D_R_BINDINGDESIGNER":                    37,
		"CONTRIBUTOR_ROLE_R_D_R_BOOKDESIGNER":                       38,
		"CONTRIBUTOR_ROLE_R_D_R_BOOKJACKDESIGNER":                   39,
		"CONTRIBUTOR_ROLE_R_D_R_BOOKPLATEDESIGNER":                  40,
		"CONTRIBUTOR_ROLE_R_D_R_BOOKPRODUCER":                       41,
		"CONTRIBUTOR_ROLE_R_D_R_BROADCASTASSISTANT":                 42,
		"CONTRIBUTOR_ROLE_R_D_R_BROADCASTJOURNALIST":                43,
		"CONTRIBUTOR_ROLE_R_D_R_CALLIGRAPHER":                       44,
		"CONTRIBUTOR_ROLE_R_D_R_CAMERAOPERATOR":                     45,
		"CONTRIBUTOR_ROLE_R_D_R_CARPENTER":                          46,
		"CONTRIBUTOR_ROLE_R_D_R_CARTOGRAPHER":                       47,
		"CONTRIBUTOR_ROLE_R_D_R_CARTOONIST":                         48,
		"CONTRIBUTOR_ROLE_R_D_R_CASTINGDIRECTOR":                    49,
		"CONTRIBUTOR_ROLE_R_D_R_CAUSEUR":                            50,
		"CONTRIBUTOR_ROLE_R_D_R_CENSOR":                             51,
		"CONTRIBUTOR_ROLE_R_D_R_CHIEFLIGHTINGTECHNICIAN":            52,
		"CONTRIBUTOR_ROLE_R_D_R_CHOIR":                              53,
		"CONTRIBUTOR_ROLE_R_D_R_CHOIRMEMBER":                        54,
		"CONTRIBUTOR_ROLE_R_D_R_CHOREOGRAPHER":                      55,
		"CONTRIBUTOR_ROLE_R_D_R_CHORUSMASTER":                       56,
		"CONTRIBUTOR_ROLE_R_D_R_CIRCUSARTIST":                       57,
		"CONTRIBUTOR_ROLE_R_D_R_CLAPPERLOADER":                      58,
		"CONTRIBUTOR_ROLE_R_D_R_CLUBDJ":                             59,
		"CONTRIBUTOR_ROLE_R_D_R_CODIRECTOR":                         60,
		"CONTRIBUTOR_ROLE_R_D_R_COEXECUTIVEPRODUCER":                61,
		"CONTRIBUTOR_ROLE_R_D_R_COLORSEPARATOR":                     62,
		"CONTRIBUTOR_ROLE_R_D_R_COMEDIAN":                           63,
		"CONTRIBUTOR_ROLE_R_D_R_COMIXER":                            64,
		"CONTRIBUTOR_ROLE_R_D_R_COMIXINGENGINEER":                   65,
		"CONTRIBUTOR_ROLE_R_D_R_COMMENTATOR":                        66,
		"CONTRIBUTOR_ROLE_R_D_R_COMMISSIONINGBROADCASTER":           67,
		"CONTRIBUTOR_ROLE_R_D_R_COMPILATIONPRODUCER":                68,
		"CONTRIBUTOR_ROLE_R_D_R_COMPUTERGRAPHICCREATOR":             69,
		"CONTRIBUTOR_ROLE_R_D_R_COMPUTERPROGRAMMER":                 70,
		"CONTRIBUTOR_ROLE_R_D_R_CONCERTMASTER":                      71,
		"CONTRIBUTOR_ROLE_R_D_R_CONDUCTOR":                          72,
		"CONTRIBUTOR_ROLE_R_D_R_CONSULTANT":                         73,
		"CONTRIBUTOR_ROLE_R_D_R_CONTINUITYCHECKER":                  74,
		"CONTRIBUTOR_ROLE_R_D_R_CONTRACTOR":                         75,
		"CONTRIBUTOR_ROLE_R_D_R_COPRODUCER":                         76,
		"CONTRIBUTOR_ROLE_R_D_R_CORRESPONDENT":                      77,
		"CONTRIBUTOR_ROLE_R_D_R_COSTUMEDESIGNER":                    78,
		"CONTRIBUTOR_ROLE_R_D_R_COVERDESIGNER":                      79,
		"CONTRIBUTOR_ROLE_R_D_R_DANCER":                             80,
		"CONTRIBUTOR_ROLE_R_D_R_DELINEATOR":                         81,
		"CONTRIBUTOR_ROLE_R_D_R_DESIGNER":                           82,
		"CONTRIBUTOR_ROLE_R_D_R_DIALOGUECOACH":                      83,
		"CONTRIBUTOR_ROLE_R_D_R_DIALOGUEDIRECTOR":                   84,
		"CONTRIBUTOR_ROLE_R_D_R_DIGITALAUDIOWORKSTATIONENGINEER":    85,
		"CONTRIBUTOR_ROLE_R_D_R_DIGITALEDITINGENGINEER":             86,
		"CONTRIBUTOR_ROLE_R_D_R_DIGITALEDITINGSECONDENGINEER":       87,
		"CONTRIBUTOR_ROLE_R_D_R_DIRECTOR":                           88,
		"CONTRIBUTOR_ROLE_R_D_R_DIRECTSTREAMDIGITALENGINEER":        89,
		"CONTRIBUTOR_ROLE_R_D_R_DISTRIBUTIONCOMPANY":                90,
		"CONTRIBUTOR_ROLE_R_D_R_DJ":                                 91,
		"CONTRIBUTOR_ROLE_R_D_R_DRAUGHTSMAN":                        92,
		"CONTRIBUTOR_ROLE_R_D_R_DRESSER":                            93,
		"CONTRIBUTOR_ROLE_R_D_R_DUBBER":                             94,
		"CONTRIBUTOR_ROLE_R_D_R_EDITOR":                             95,
		"CONTRIBUTOR_ROLE_R_D_R_EDITORINCHIEF":                      96,
		"CONTRIBUTOR_ROLE_R_D_R_EDITOROFTHEDAY":                     97,
		"CONTRIBUTOR_ROLE_R_D_R_ENCODER":                            98,
		"CONTRIBUTOR_ROLE_R_D_R_ENGINEER":                           99,
		"CONTRIBUTOR_ROLE_R_D_R_ENSEMBLE":                           100,
		"CONTRIBUTOR_ROLE_R_D_R_EXECUTIVEPRODUCER":                  101,
		"CONTRIBUTOR_ROLE_R_D_R_EXPERT":                             102,
		"CONTRIBUTOR_ROLE_R_D_R_FACSIMILIST":                        103,
		"CONTRIBUTOR_ROLE_R_D_R_FIGHTDIRECTOR":                      104,
		"CONTRIBUTOR_ROLE_R_D_R_FILMDIRECTOR":                       105,
		"CONTRIBUTOR_ROLE_R_D_R_FILMDISTRIBUTOR":                    106,
		"CONTRIBUTOR_ROLE_R_D_R_FILMEDITOR":                         107,
		"CONTRIBUTOR_ROLE_R_D_R_FILMPRODUCER":                       108,
		"CONTRIBUTOR_ROLE_R_D_R_FILMSOUNDENGINEER":                  109,
		"CONTRIBUTOR_ROLE_R_D_R_FLOORMANAGER":                       110,
		"CONTRIBUTOR_ROLE_R_D_R_FOCUSPULLER":                        111,
		"CONTRIBUTOR_ROLE_R_D_R_FOLEYARTIST":                        112,
		"CONTRIBUTOR_ROLE_R_D_R_FOLEYEDITOR":                        113,
		"CONTRIBUTOR_ROLE_R_D_R_FOLEYMIXER":                         114,
		"CONTRIBUTOR_ROLE_R_D_R_GRAPHICARTIST":                      115,
		"CONTRIBUTOR_ROLE_R_D_R_GRAPHICASSISTANT":                   116,
		"CONTRIBUTOR_ROLE_R_D_R_GRAPHICDESIGNER":                    117,
		"CONTRIBUTOR_ROLE_R_D_R_GREENSMAN":                          118,
		"CONTRIBUTOR_ROLE_R_D_R_GRIP":                               119,
		"CONTRIBUTOR_ROLE_R_D_R_GUESTCONDUCTOR":                     120,
		"CONTRIBUTOR_ROLE_R_D_R_GROUPMEMBER":                        121,
		"CONTRIBUTOR_ROLE_R_D_R_HAIRDRESSER":                        122,
		"CONTRIBUTOR_ROLE_R_D_R_ILLUSTRATOR":                        123,
		"CONTRIBUTOR_ROLE_R_D_R_IMMERSIVEMASTERINGENGINEER":         124,
		"CONTRIBUTOR_ROLE_R_D_R_IMMERSIVEMIXINGENGINEER":            125,
		"CONTRIBUTOR_ROLE_R_D_R_INITIALPRODUCER":                    126,
		"CONTRIBUTOR_ROLE_R_D_R_INTERVIEWEDGUEST":                   127,
		"CONTRIBUTOR_ROLE_R_D_R_INTERVIEWER":                        128,
		"CONTRIBUTOR_ROLE_R_D_R_KEYCHARACTER":                       129,
		"CONTRIBUTOR_ROLE_R_D_R_KEYGRIP":                            130,
		"CONTRIBUTOR_ROLE_R_D_R_KEYTALENT":                          131,
		"CONTRIBUTOR_ROLE_R_D_R_LEADMAN":                            132,
		"CONTRIBUTOR_ROLE_R_D_R_LEADPERFORMER":                      133,
		"CONTRIBUTOR_ROLE_R_D_R_LEADVOCALIST":                       134,
		"CONTRIBUTOR_ROLE_R_D_R_LIGHTINGDIRECTOR":                   135,
		"CONTRIBUTOR_ROLE_R_D_R_LIGHTINGTECHNICIAN":                 136,
		"CONTRIBUTOR_ROLE_R_D_R_LOCATIONMANAGER":                    137,
		"CONTRIBUTOR_ROLE_R_D_R_MAKEUPARTIST":                       138,
		"CONTRIBUTOR_ROLE_R_D_R_MANUFACTURER":                       139,
		"CONTRIBUTOR_ROLE_R_D_R_MASTERINGENGINEER":                  140,
		"CONTRIBUTOR_ROLE_R_D_R_MASTERINGSECONDENGINEER":            141,
		"CONTRIBUTOR_ROLE_R_D_R_MATTEARTIST":                        142,
		"CONTRIBUTOR_ROLE_R_D_R_MIME":                               143,
		"CONTRIBUTOR_ROLE_R_D_R_MIXER":                              144,
		"CONTRIBUTOR_ROLE_R_D_R_MIXINGENGINEER":                     145,
		"CONTRIBUTOR_ROLE_R_D_R_MIXINGSECONDENGINEER":               146,
		"CONTRIBUTOR_ROLE_R_D_R_MUSICARRANGER":                      147,
		"CONTRIBUTOR_ROLE_R_D_R_MUSICCOPYIST":                       148,
		"CONTRIBUTOR_ROLE_R_D_R_MUSICDIRECTOR":                      149,
		"CONTRIBUTOR_ROLE_R_D_R_MUSICGROUP":                         150,
		"CONTRIBUTOR_ROLE_R_D_R_MUSICIAN":                           151,
		"CONTRIBUTOR_ROLE_R_D_R_NARRATOR":                           152,
		"CONTRIBUTOR_ROLE_R_D_R_NEWSPRODUCER":                       153,
		"CONTRIBUTOR_ROLE_R_D_R_NEWSREADER":                         154,
		"CONTRIBUTOR_ROLE_R_D_R_NOTSPECIFIED":                       155,
		"CONTRIBUTOR_ROLE_R_D_R_ORCHESTRA":                          156,
		"CONTRIBUTOR_ROLE_R_D_R_ORCHESTRAMEMBER":                    157,
		"CONTRIBUTOR_ROLE_R_D_R_ORIGINALARTIST":                     158,
		"CONTRIBUTOR_ROLE_R_D_R_OVERDUBENGINEER":                    159,
		"CONTRIBUTOR_ROLE_R_D_R_OVERDUBSECONDENGINEER":              160,
		"CONTRIBUTOR_ROLE_R_D_R_PAINTER":                            161,
		"CONTRIBUTOR_ROLE_R_D_R_PERFORMER":                          162,
		"CONTRIBUTOR_ROLE_R_D_R_PHOTOGRAPHER":                       163,
		"CONTRIBUTOR_ROLE_R_D_R_PHOTOGRAPHYDIRECTOR":                164,
		"CONTRIBUTOR_ROLE_R_D_R_PLAYBACKSINGER":                     165,
		"CONTRIBUTOR_ROLE_R_D_R_POSTPRODUCER":                       166,
		"CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTION":                      167,
		"CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTIONENGINEER":              168,
		"CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTIONSECONDENGINEER":        169,
		"CONTRIBUTOR_ROLE_R_D_R_PRESENTER":                          170,
		"CONTRIBUTOR_ROLE_R_D_R_PRIMARYMUSICIAN":                    171,
		"CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONASSISTANT":                172,
		"CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONCOMPANY":                  173,
		"CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONCOORDINATOR":              174,
		"CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONDEPARTMENT":               175,
		"CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONMANAGER":                  176,
		"CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONSECRETARY":                177,
		"CONTRIBUTOR_ROLE_R_D_R_PROJECTENGINEER":                    178,
		"CONTRIBUTOR_ROLE_R_D_R_PROGRAMMER":                         179,
		"CONTRIBUTOR_ROLE_R_D_R_PROGRAMMINGENGINEER":                180,
		"CONTRIBUTOR_ROLE_R_D_R_PROGRAMPRODUCER":                    181,
		"CONTRIBUTOR_ROLE_R_D_R_PROPERTYMANAGER":                    182,
		"CONTRIBUTOR_ROLE_R_D_R_PUBLISHINGDIRECTOR":                 183,
		"CONTRIBUTOR_ROLE_R_D_R_PUPPETEER":                          184,
		"CONTRIBUTOR_ROLE_R_D_R_PYROTECHNICIAN":                     185,
		"CONTRIBUTOR_ROLE_R_D_R_RECORDINGENGINEER":                  186,
		"CONTRIBUTOR_ROLE_R_D_R_RECORDINGSECONDENGINEER":            187,
		"CONTRIBUTOR_ROLE_R_D_R_REDACTOR":                           188,
		"CONTRIBUTOR_ROLE_R_D_R_REISSUEPRODUCER":                    189,
		"CONTRIBUTOR_ROLE_R_D_R_REMIXEDARTIST":                      190,
		"CONTRIBUTOR_ROLE_R_D_R_REMIXER":                            191,
		"CONTRIBUTOR_ROLE_R_D_R_REMIXINGENGINEER":                   192,
		"CONTRIBUTOR_ROLE_R_D_R_REMIXINGSECONDENGINEER":             193,
		"CONTRIBUTOR_ROLE_R_D_R_REPETITEUR":                         194,
		"CONTRIBUTOR_ROLE_R_D_R_RESEARCHER":                         195,
		"CONTRIBUTOR_ROLE_R_D_R_RESEARCHTEAMHEAD":                   196,
		"CONTRIBUTOR_ROLE_R_D_R_RESEARCHTEAMMEMBER":                 197,
		"CONTRIBUTOR_ROLE_R_D_R_RESTAGER":                           198,
		"CONTRIBUTOR_ROLE_R_D_R_RIGGER":                             199,
		"CONTRIBUTOR_ROLE_R_D_R_RIGHTSCONTROLLERONPRODUCT":          200,
		"CONTRIBUTOR_ROLE_R_D_R_RUNNER":                             201,
		"CONTRIBUTOR_ROLE_R_D_R_SCENICOPERATIVE":                    202,
		"CONTRIBUTOR_ROLE_R_D_R_SCIENTIFICADVISOR":                  203,
		"CONTRIBUTOR_ROLE_R_D_R_SCRIPTSUPERVISOR":                   204,
		"CONTRIBUTOR_ROLE_R_D_R_SECONDASSISTANTCAMERAOPERATOR":      205,
		"CONTRIBUTOR_ROLE_R_D_R_SECONDASSISTANTDIRECTOR":            206,
		"CONTRIBUTOR_ROLE_R_D_R_SECONDCONDUCTOR":                    207,
		"CONTRIBUTOR_ROLE_R_D_R_SECONDENGINEER":                     208,
		"CONTRIBUTOR_ROLE_R_D_R_SECONDUNITDIRECTOR":                 209,
		"CONTRIBUTOR_ROLE_R_D_R_SERIESPRODUCER":                     210,
		"CONTRIBUTOR_ROLE_R_D_R_SETDESIGNER":                        211,
		"CONTRIBUTOR_ROLE_R_D_R_SETDRESSER":                         212,
		"CONTRIBUTOR_ROLE_R_D_R_SIGNLANGUAGEINTERPRETER":            213,
		"CONTRIBUTOR_ROLE_R_D_R_SOLOIST":                            214,
		"CONTRIBUTOR_ROLE_R_D_R_SOUNDDESIGNER":                      215,
		"CONTRIBUTOR_ROLE_R_D_R_SOUNDMIXER":                         216,
		"CONTRIBUTOR_ROLE_R_D_R_SOUNDRECORDIST":                     217,
		"CONTRIBUTOR_ROLE_R_D_R_SOUNDSUPERVISOR":                    218,
		"CONTRIBUTOR_ROLE_R_D_R_SPEAKER":                            219,
		"CONTRIBUTOR_ROLE_R_D_R_SPECIALEFFECTSTECHNICIAN":           220,
		"CONTRIBUTOR_ROLE_R_D_R_SPONSOR":                            221,
		"CONTRIBUTOR_ROLE_R_D_R_STAGEASSISTANTENGINEER":             222,
		"CONTRIBUTOR_ROLE_R_D_R_STAGEDIRECTOR":                      223,
		"CONTRIBUTOR_ROLE_R_D_R_STAGEENGINEER":                      224,
		"CONTRIBUTOR_ROLE_R_D_R_STORYTELLER":                        225,
		"CONTRIBUTOR_ROLE_R_D_R_STRINGENGINEER":                     226,
		"CONTRIBUTOR_ROLE_R_D_R_STRINGPRODUCER":                     227,
		"CONTRIBUTOR_ROLE_R_D_R_STRINGSDIRECTOR":                    228,
		"CONTRIBUTOR_ROLE_R_D_R_STUDIOCONDUCTOR":                    229,
		"CONTRIBUTOR_ROLE_R_D_R_STUDIOMUSICIAN":                     230,
		"CONTRIBUTOR_ROLE_R_D_R_STUDIOPERSONNEL":                    231,
		"CONTRIBUTOR_ROLE_R_D_R_STUDIOPRODUCER":                     232,
		"CONTRIBUTOR_ROLE_R_D_R_STUNTS":                             233,
		"CONTRIBUTOR_ROLE_R_D_R_SUBTITLESEDITOR":                    234,
		"CONTRIBUTOR_ROLE_R_D_R_SUBTITLESTRANSLATOR":                235,
		"CONTRIBUTOR_ROLE_R_D_R_SUPPORTINGACTOR":                    236,
		"CONTRIBUTOR_ROLE_R_D_R_SURROUNDMIXINGENGINEER":             237,
		"CONTRIBUTOR_ROLE_R_D_R_SURROUNDMIXINGSECONDENGINEER":       238,
		"CONTRIBUTOR_ROLE_R_D_R_TAPEOPERATOR":                       239,
		"CONTRIBUTOR_ROLE_R_D_R_TECHNICALDIRECTOR":                  240,
		"CONTRIBUTOR_ROLE_R_D_R_TONMEISTER":                         241,
		"CONTRIBUTOR_ROLE_R_D_R_TRACKINGENGINEER":                   242,
		"CONTRIBUTOR_ROLE_R_D_R_TRACKINGSECONDENGINEER":             243,
		"CONTRIBUTOR_ROLE_R_D_R_TRANSFERSANDSAFETIESENGINEER":       244,
		"CONTRIBUTOR_ROLE_R_D_R_TRANSFERSANDSAFETIESSECONDENGINEER": 245,
		"CONTRIBUTOR_ROLE_R_D_R_TRANSPORTATIONMANAGER":              246,
		"CONTRIBUTOR_ROLE_R_D_R_TREATMENT_PROGRAMPROPOSAL":          247,
		"CONTRIBUTOR_ROLE_R_D_R_TYPEDESIGNER":                       248,
		"CONTRIBUTOR_ROLE_R_D_R_UNKNOWN":                            249,
		"CONTRIBUTOR_ROLE_R_D_R_USERDEFINED":                        250,
		"CONTRIBUTOR_ROLE_R_D_R_VIDEODIRECTOR":                      251,
		"CONTRIBUTOR_ROLE_R_D_R_VIDEOGRAPHER":                       252,
		"CONTRIBUTOR_ROLE_R_D_R_VIDEOMUSICALDIRECTOR":               253,
		"CONTRIBUTOR_ROLE_R_D_R_VIDEOPRODUCER":                      254,
		"CONTRIBUTOR_ROLE_R_D_R_VISIONMIXER":                        255,
		"CONTRIBUTOR_ROLE_R_D_R_VISUALEDITOR":                       256,
		"CONTRIBUTOR_ROLE_R_D_R_VISUALEFFECTSTECHNICIAN":            257,
		"CONTRIBUTOR_ROLE_R_D_R_VOCALARRANGER":                      258,
		"CONTRIBUTOR_ROLE_R_D_R_VOCALEDITINGENGINEER":               259,
		"CONTRIBUTOR_ROLE_R_D_R_VOCALEDITINGSECONDENGINEER":         260,
		"CONTRIBUTOR_ROLE_R_D_R_VOCALENGINEER":                      261,
		"CONTRIBUTOR_ROLE_R_D_R_VOCALIST":                           262,
		"CONTRIBUTOR_ROLE_R_D_R_VOCALSECONDENGINEER":                263,
		"CONTRIBUTOR_ROLE_R_D_R_VOCALPRODUCER":                      264,
		"CONTRIBUTOR_ROLE_R_D_R_VOICEACTOR":                         265,
		"CONTRIBUTOR_ROLE_R_D_R_WARDROBE":                           266,
	}
)

func (x ContributorRoleRDR) Enum() *ContributorRoleRDR {
	p := new(ContributorRoleRDR)
	*p = x
	return p
}

func (x ContributorRoleRDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContributorRoleRDR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[45].Descriptor()
}

func (ContributorRoleRDR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[45]
}

func (x ContributorRoleRDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContributorRoleRDR.Descriptor instead.
func (ContributorRoleRDR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{45}
}

type CreationType int32

const (
	CreationType_CREATION_TYPE_UNSPECIFIED CreationType = 0
	CreationType_CREATION_TYPE_MUSICALWORK CreationType = 1
	CreationType_CREATION_TYPE_RELEASE     CreationType = 2
	CreationType_CREATION_TYPE_RESOURCE    CreationType = 3
)

// Enum value maps for CreationType.
var (
	CreationType_name = map[int32]string{
		0: "CREATION_TYPE_UNSPECIFIED",
		1: "CREATION_TYPE_MUSICALWORK",
		2: "CREATION_TYPE_RELEASE",
		3: "CREATION_TYPE_RESOURCE",
	}
	CreationType_value = map[string]int32{
		"CREATION_TYPE_UNSPECIFIED": 0,
		"CREATION_TYPE_MUSICALWORK": 1,
		"CREATION_TYPE_RELEASE":     2,
		"CREATION_TYPE_RESOURCE":    3,
	}
)

func (x CreationType) Enum() *CreationType {
	p := new(CreationType)
	*p = x
	return p
}

func (x CreationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreationType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[46].Descriptor()
}

func (CreationType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[46]
}

func (x CreationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreationType.Descriptor instead.
func (CreationType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{46}
}

type CreativeMusicalWorkContributorRole int32

const (
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED                  CreativeMusicalWorkContributorRole = 0
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER                      CreativeMusicalWorkContributorRole = 1
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT                    CreativeMusicalWorkContributorRole = 2
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER                     CreativeMusicalWorkContributorRole = 3
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR                       CreativeMusicalWorkContributorRole = 4
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS           CreativeMusicalWorkContributorRole = 5
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD            CreativeMusicalWorkContributorRole = 6
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER                     CreativeMusicalWorkContributorRole = 7
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER                     CreativeMusicalWorkContributorRole = 8
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST             CreativeMusicalWorkContributorRole = 9
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR                    CreativeMusicalWorkContributorRole = 10
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR                      CreativeMusicalWorkContributorRole = 11
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR               CreativeMusicalWorkContributorRole = 12
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT                   CreativeMusicalWorkContributorRole = 13
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER                     CreativeMusicalWorkContributorRole = 14
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER                       CreativeMusicalWorkContributorRole = 15
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST                   CreativeMusicalWorkContributorRole = 16
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT           CreativeMusicalWorkContributorRole = 17
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST                   CreativeMusicalWorkContributorRole = 18
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER                 CreativeMusicalWorkContributorRole = 19
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST                     CreativeMusicalWorkContributorRole = 20
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER                CreativeMusicalWorkContributorRole = 21
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR               CreativeMusicalWorkContributorRole = 22
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER                   CreativeMusicalWorkContributorRole = 23
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT                   CreativeMusicalWorkContributorRole = 24
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER                     CreativeMusicalWorkContributorRole = 25
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER                     CreativeMusicalWorkContributorRole = 26
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR                   CreativeMusicalWorkContributorRole = 27
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR             CreativeMusicalWorkContributorRole = 28
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR                     CreativeMusicalWorkContributorRole = 29
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER                  CreativeMusicalWorkContributorRole = 30
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST                  CreativeMusicalWorkContributorRole = 31
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR                   CreativeMusicalWorkContributorRole = 32
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER                   CreativeMusicalWorkContributorRole = 33
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER                 CreativeMusicalWorkContributorRole = 34
	CreativeMusicalWorkContributorRole_CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL CreativeMusicalWorkContributorRole = 35
)

// Enum value maps for CreativeMusicalWorkContributorRole.
var (
	CreativeMusicalWorkContributorRole_name = map[int32]string{
		0:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER",
		2:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT",
		3:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER",
		4:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR",
		5:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS",
		6:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD",
		7:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER",
		8:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER",
		9:  "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST",
		10: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR",
		11: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR",
		12: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR",
		13: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT",
		14: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER",
		15: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER",
		16: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST",
		17: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT",
		18: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST",
		19: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER",
		20: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST",
		21: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER",
		22: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR",
		23: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER",
		24: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT",
		25: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER",
		26: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER",
		27: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR",
		28: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR",
		29: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR",
		30: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER",
		31: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST",
		32: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR",
		33: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER",
		34: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER",
		35: "CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL",
	}
	CreativeMusicalWorkContributorRole_value = map[string]int32{
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED":                  0,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER":                      1,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT":                    2,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER":                     3,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR":                       4,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS":           5,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD":            6,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER":                     7,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER":                     8,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST":             9,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR":                    10,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR":                      11,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR":               12,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT":                   13,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER":                     14,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER":                       15,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST":                   16,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT":           17,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST":                   18,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER":                 19,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST":                     20,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER":                21,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR":               22,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER":                   23,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT":                   24,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER":                     25,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER":                     26,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR":                   27,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR":             28,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR":                     29,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER":                  30,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST":                  31,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR":                   32,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER":                   33,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER":                 34,
		"CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL": 35,
	}
)

func (x CreativeMusicalWorkContributorRole) Enum() *CreativeMusicalWorkContributorRole {
	p := new(CreativeMusicalWorkContributorRole)
	*p = x
	return p
}

func (x CreativeMusicalWorkContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreativeMusicalWorkContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[47].Descriptor()
}

func (CreativeMusicalWorkContributorRole) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[47]
}

func (x CreativeMusicalWorkContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreativeMusicalWorkContributorRole.Descriptor instead.
func (CreativeMusicalWorkContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{47}
}

type CtProposedActionType int32

const (
	CtProposedActionType_CT_PROPOSED_ACTION_TYPE_UNSPECIFIED           CtProposedActionType = 0
	CtProposedActionType_CT_PROPOSED_ACTION_TYPE_HANDLEOUTSIDEOFTHREAD CtProposedActionType = 1
	CtProposedActionType_CT_PROPOSED_ACTION_TYPE_SENDUPDATE            CtProposedActionType = 2
)

// Enum value maps for CtProposedActionType.
var (
	CtProposedActionType_name = map[int32]string{
		0: "CT_PROPOSED_ACTION_TYPE_UNSPECIFIED",
		1: "CT_PROPOSED_ACTION_TYPE_HANDLEOUTSIDEOFTHREAD",
		2: "CT_PROPOSED_ACTION_TYPE_SENDUPDATE",
	}
	CtProposedActionType_value = map[string]int32{
		"CT_PROPOSED_ACTION_TYPE_UNSPECIFIED":           0,
		"CT_PROPOSED_ACTION_TYPE_HANDLEOUTSIDEOFTHREAD": 1,
		"CT_PROPOSED_ACTION_TYPE_SENDUPDATE":            2,
	}
)

func (x CtProposedActionType) Enum() *CtProposedActionType {
	p := new(CtProposedActionType)
	*p = x
	return p
}

func (x CtProposedActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CtProposedActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[48].Descriptor()
}

func (CtProposedActionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[48]
}

func (x CtProposedActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CtProposedActionType.Descriptor instead.
func (CtProposedActionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{48}
}

type CueOrigin int32

const (
	CueOrigin_CUE_ORIGIN_UNSPECIFIED                CueOrigin = 0
	CueOrigin_CUE_ORIGIN_LIBRARYMUSIC               CueOrigin = 1
	CueOrigin_CUE_ORIGIN_PREEXISTINGMUSIC           CueOrigin = 2
	CueOrigin_CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC CueOrigin = 3
	CueOrigin_CUE_ORIGIN_UNKNOWN                    CueOrigin = 4
	CueOrigin_CUE_ORIGIN_USERDEFINED                CueOrigin = 5
)

// Enum value maps for CueOrigin.
var (
	CueOrigin_name = map[int32]string{
		0: "CUE_ORIGIN_UNSPECIFIED",
		1: "CUE_ORIGIN_LIBRARYMUSIC",
		2: "CUE_ORIGIN_PREEXISTINGMUSIC",
		3: "CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC",
		4: "CUE_ORIGIN_UNKNOWN",
		5: "CUE_ORIGIN_USERDEFINED",
	}
	CueOrigin_value = map[string]int32{
		"CUE_ORIGIN_UNSPECIFIED":                0,
		"CUE_ORIGIN_LIBRARYMUSIC":               1,
		"CUE_ORIGIN_PREEXISTINGMUSIC":           2,
		"CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC": 3,
		"CUE_ORIGIN_UNKNOWN":                    4,
		"CUE_ORIGIN_USERDEFINED":                5,
	}
)

func (x CueOrigin) Enum() *CueOrigin {
	p := new(CueOrigin)
	*p = x
	return p
}

func (x CueOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[49].Descriptor()
}

func (CueOrigin) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[49]
}

func (x CueOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueOrigin.Descriptor instead.
func (CueOrigin) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{49}
}

type CueSheetType int32

const (
	CueSheetType_CUE_SHEET_TYPE_UNSPECIFIED        CueSheetType = 0
	CueSheetType_CUE_SHEET_TYPE_AVERAGECUESHEET    CueSheetType = 1
	CueSheetType_CUE_SHEET_TYPE_COMPOSITECUESHEET  CueSheetType = 2
	CueSheetType_CUE_SHEET_TYPE_STANDARDCUESHEET   CueSheetType = 3
	CueSheetType_CUE_SHEET_TYPE_SUMMARISEDCUESHEET CueSheetType = 4
	CueSheetType_CUE_SHEET_TYPE_SURROGATECUESHEET  CueSheetType = 5
)

// Enum value maps for CueSheetType.
var (
	CueSheetType_name = map[int32]string{
		0: "CUE_SHEET_TYPE_UNSPECIFIED",
		1: "CUE_SHEET_TYPE_AVERAGECUESHEET",
		2: "CUE_SHEET_TYPE_COMPOSITECUESHEET",
		3: "CUE_SHEET_TYPE_STANDARDCUESHEET",
		4: "CUE_SHEET_TYPE_SUMMARISEDCUESHEET",
		5: "CUE_SHEET_TYPE_SURROGATECUESHEET",
	}
	CueSheetType_value = map[string]int32{
		"CUE_SHEET_TYPE_UNSPECIFIED":        0,
		"CUE_SHEET_TYPE_AVERAGECUESHEET":    1,
		"CUE_SHEET_TYPE_COMPOSITECUESHEET":  2,
		"CUE_SHEET_TYPE_STANDARDCUESHEET":   3,
		"CUE_SHEET_TYPE_SUMMARISEDCUESHEET": 4,
		"CUE_SHEET_TYPE_SURROGATECUESHEET":  5,
	}
)

func (x CueSheetType) Enum() *CueSheetType {
	p := new(CueSheetType)
	*p = x
	return p
}

func (x CueSheetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueSheetType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[50].Descriptor()
}

func (CueSheetType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[50]
}

func (x CueSheetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueSheetType.Descriptor instead.
func (CueSheetType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{50}
}

type CueUseType int32

const (
	CueUseType_CUE_USE_TYPE_UNSPECIFIED                 CueUseType = 0
	CueUseType_CUE_USE_TYPE_AUDIOLOGO                   CueUseType = 1
	CueUseType_CUE_USE_TYPE_BACKGROUND                  CueUseType = 2
	CueUseType_CUE_USE_TYPE_BUMPER                      CueUseType = 3
	CueUseType_CUE_USE_TYPE_ESSENTIALPART               CueUseType = 4
	CueUseType_CUE_USE_TYPE_FILMTHEME                   CueUseType = 5
	CueUseType_CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND CueUseType = 6
	CueUseType_CUE_USE_TYPE_ONSCREENMUSIC               CueUseType = 7
	CueUseType_CUE_USE_TYPE_ROLLEDUPCUE                 CueUseType = 8
	CueUseType_CUE_USE_TYPE_THEME                       CueUseType = 9
	CueUseType_CUE_USE_TYPE_USERDEFINED                 CueUseType = 10
)

// Enum value maps for CueUseType.
var (
	CueUseType_name = map[int32]string{
		0:  "CUE_USE_TYPE_UNSPECIFIED",
		1:  "CUE_USE_TYPE_AUDIOLOGO",
		2:  "CUE_USE_TYPE_BACKGROUND",
		3:  "CUE_USE_TYPE_BUMPER",
		4:  "CUE_USE_TYPE_ESSENTIALPART",
		5:  "CUE_USE_TYPE_FILMTHEME",
		6:  "CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND",
		7:  "CUE_USE_TYPE_ONSCREENMUSIC",
		8:  "CUE_USE_TYPE_ROLLEDUPCUE",
		9:  "CUE_USE_TYPE_THEME",
		10: "CUE_USE_TYPE_USERDEFINED",
	}
	CueUseType_value = map[string]int32{
		"CUE_USE_TYPE_UNSPECIFIED":                 0,
		"CUE_USE_TYPE_AUDIOLOGO":                   1,
		"CUE_USE_TYPE_BACKGROUND":                  2,
		"CUE_USE_TYPE_BUMPER":                      3,
		"CUE_USE_TYPE_ESSENTIALPART":               4,
		"CUE_USE_TYPE_FILMTHEME":                   5,
		"CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND": 6,
		"CUE_USE_TYPE_ONSCREENMUSIC":               7,
		"CUE_USE_TYPE_ROLLEDUPCUE":                 8,
		"CUE_USE_TYPE_THEME":                       9,
		"CUE_USE_TYPE_USERDEFINED":                 10,
	}
)

func (x CueUseType) Enum() *CueUseType {
	p := new(CueUseType)
	*p = x
	return p
}

func (x CueUseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueUseType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[51].Descriptor()
}

func (CueUseType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[51]
}

func (x CueUseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueUseType.Descriptor instead.
func (CueUseType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{51}
}

type CueUseTypeMWDR int32

const (
	CueUseTypeMWDR_CUE_USE_TYPE_M_W_D_R_UNSPECIFIED   CueUseTypeMWDR = 0
	CueUseTypeMWDR_CUE_USE_TYPE_M_W_D_R_AUDIOLOGO     CueUseTypeMWDR = 1
	CueUseTypeMWDR_CUE_USE_TYPE_M_W_D_R_BACKGROUND    CueUseTypeMWDR = 2
	CueUseTypeMWDR_CUE_USE_TYPE_M_W_D_R_ROLLEDUPCUE   CueUseTypeMWDR = 3
	CueUseTypeMWDR_CUE_USE_TYPE_M_W_D_R_THEME         CueUseTypeMWDR = 4
	CueUseTypeMWDR_CUE_USE_TYPE_M_W_D_R_ONSCREENMUSIC CueUseTypeMWDR = 5
)

// Enum value maps for CueUseTypeMWDR.
var (
	CueUseTypeMWDR_name = map[int32]string{
		0: "CUE_USE_TYPE_M_W_D_R_UNSPECIFIED",
		1: "CUE_USE_TYPE_M_W_D_R_AUDIOLOGO",
		2: "CUE_USE_TYPE_M_W_D_R_BACKGROUND",
		3: "CUE_USE_TYPE_M_W_D_R_ROLLEDUPCUE",
		4: "CUE_USE_TYPE_M_W_D_R_THEME",
		5: "CUE_USE_TYPE_M_W_D_R_ONSCREENMUSIC",
	}
	CueUseTypeMWDR_value = map[string]int32{
		"CUE_USE_TYPE_M_W_D_R_UNSPECIFIED":   0,
		"CUE_USE_TYPE_M_W_D_R_AUDIOLOGO":     1,
		"CUE_USE_TYPE_M_W_D_R_BACKGROUND":    2,
		"CUE_USE_TYPE_M_W_D_R_ROLLEDUPCUE":   3,
		"CUE_USE_TYPE_M_W_D_R_THEME":         4,
		"CUE_USE_TYPE_M_W_D_R_ONSCREENMUSIC": 5,
	}
)

func (x CueUseTypeMWDR) Enum() *CueUseTypeMWDR {
	p := new(CueUseTypeMWDR)
	*p = x
	return p
}

func (x CueUseTypeMWDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CueUseTypeMWDR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[52].Descriptor()
}

func (CueUseTypeMWDR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[52]
}

func (x CueUseTypeMWDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CueUseTypeMWDR.Descriptor instead.
func (CueUseTypeMWDR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{52}
}

type CurrencyCode int32

const (
	CurrencyCode_CURRENCY_CODE_UNSPECIFIED CurrencyCode = 0
	CurrencyCode_CURRENCY_CODE_AED         CurrencyCode = 1
	CurrencyCode_CURRENCY_CODE_AFN         CurrencyCode = 2
	CurrencyCode_CURRENCY_CODE_ALL         CurrencyCode = 3
	CurrencyCode_CURRENCY_CODE_AMD         CurrencyCode = 4
	CurrencyCode_CURRENCY_CODE_AOA         CurrencyCode = 5
	CurrencyCode_CURRENCY_CODE_ARS         CurrencyCode = 6
	CurrencyCode_CURRENCY_CODE_AUD         CurrencyCode = 7
	CurrencyCode_CURRENCY_CODE_AWG         CurrencyCode = 8
	CurrencyCode_CURRENCY_CODE_AZN         CurrencyCode = 9
	CurrencyCode_CURRENCY_CODE_BAM         CurrencyCode = 10
	CurrencyCode_CURRENCY_CODE_BBD         CurrencyCode = 11
	CurrencyCode_CURRENCY_CODE_BDT         CurrencyCode = 12
	CurrencyCode_CURRENCY_CODE_BGN         CurrencyCode = 13
	CurrencyCode_CURRENCY_CODE_BHD         CurrencyCode = 14
	CurrencyCode_CURRENCY_CODE_BIF         CurrencyCode = 15
	CurrencyCode_CURRENCY_CODE_BMD         CurrencyCode = 16
	CurrencyCode_CURRENCY_CODE_BND         CurrencyCode = 17
	CurrencyCode_CURRENCY_CODE_BOB         CurrencyCode = 18
	CurrencyCode_CURRENCY_CODE_BOV         CurrencyCode = 19
	CurrencyCode_CURRENCY_CODE_BRL         CurrencyCode = 20
	CurrencyCode_CURRENCY_CODE_BSD         CurrencyCode = 21
	CurrencyCode_CURRENCY_CODE_BTN         CurrencyCode = 22
	CurrencyCode_CURRENCY_CODE_BWP         CurrencyCode = 23
	CurrencyCode_CURRENCY_CODE_BYR         CurrencyCode = 24
	CurrencyCode_CURRENCY_CODE_BZD         CurrencyCode = 25
	CurrencyCode_CURRENCY_CODE_CAD         CurrencyCode = 26
	CurrencyCode_CURRENCY_CODE_CDF         CurrencyCode = 27
	CurrencyCode_CURRENCY_CODE_CHF         CurrencyCode = 28
	CurrencyCode_CURRENCY_CODE_CLF         CurrencyCode = 29
	CurrencyCode_CURRENCY_CODE_CLP         CurrencyCode = 30
	CurrencyCode_CURRENCY_CODE_CNY         CurrencyCode = 31
	CurrencyCode_CURRENCY_CODE_COP         CurrencyCode = 32
	CurrencyCode_CURRENCY_CODE_COU         CurrencyCode = 33
	CurrencyCode_CURRENCY_CODE_CRC         CurrencyCode = 34
	CurrencyCode_CURRENCY_CODE_CUP         CurrencyCode = 35
	CurrencyCode_CURRENCY_CODE_CVE         CurrencyCode = 36
	CurrencyCode_CURRENCY_CODE_CZK         CurrencyCode = 37
	CurrencyCode_CURRENCY_CODE_DJF         CurrencyCode = 38
	CurrencyCode_CURRENCY_CODE_DKK         CurrencyCode = 39
	CurrencyCode_CURRENCY_CODE_DOP         CurrencyCode = 40
	CurrencyCode_CURRENCY_CODE_DZD         CurrencyCode = 41
	CurrencyCode_CURRENCY_CODE_EGP         CurrencyCode = 42
	CurrencyCode_CURRENCY_CODE_ERN         CurrencyCode = 43
	CurrencyCode_CURRENCY_CODE_ETB         CurrencyCode = 44
	CurrencyCode_CURRENCY_CODE_EUR         CurrencyCode = 45
	CurrencyCode_CURRENCY_CODE_FJD         CurrencyCode = 46
	CurrencyCode_CURRENCY_CODE_FKP         CurrencyCode = 47
	CurrencyCode_CURRENCY_CODE_GBP         CurrencyCode = 48
	CurrencyCode_CURRENCY_CODE_GEL         CurrencyCode = 49
	CurrencyCode_CURRENCY_CODE_GHS         CurrencyCode = 50
	CurrencyCode_CURRENCY_CODE_GIP         CurrencyCode = 51
	CurrencyCode_CURRENCY_CODE_GMD         CurrencyCode = 52
	CurrencyCode_CURRENCY_CODE_GNF         CurrencyCode = 53
	CurrencyCode_CURRENCY_CODE_GTQ         CurrencyCode = 54
	CurrencyCode_CURRENCY_CODE_GYD         CurrencyCode = 55
	CurrencyCode_CURRENCY_CODE_HKD         CurrencyCode = 56
	CurrencyCode_CURRENCY_CODE_HNL         CurrencyCode = 57
	CurrencyCode_CURRENCY_CODE_HTG         CurrencyCode = 58
	CurrencyCode_CURRENCY_CODE_HUF         CurrencyCode = 59
	CurrencyCode_CURRENCY_CODE_IDR         CurrencyCode = 60
	CurrencyCode_CURRENCY_CODE_ILS         CurrencyCode = 61
	CurrencyCode_CURRENCY_CODE_INR         CurrencyCode = 62
	CurrencyCode_CURRENCY_CODE_IQD         CurrencyCode = 63
	CurrencyCode_CURRENCY_CODE_IRR         CurrencyCode = 64
	CurrencyCode_CURRENCY_CODE_ISK         CurrencyCode = 65
	CurrencyCode_CURRENCY_CODE_JMD         CurrencyCode = 66
	CurrencyCode_CURRENCY_CODE_JOD         CurrencyCode = 67
	CurrencyCode_CURRENCY_CODE_JPY         CurrencyCode = 68
	CurrencyCode_CURRENCY_CODE_KES         CurrencyCode = 69
	CurrencyCode_CURRENCY_CODE_KGS         CurrencyCode = 70
	CurrencyCode_CURRENCY_CODE_KHR         CurrencyCode = 71
	CurrencyCode_CURRENCY_CODE_KMF         CurrencyCode = 72
	CurrencyCode_CURRENCY_CODE_KPW         CurrencyCode = 73
	CurrencyCode_CURRENCY_CODE_KRW         CurrencyCode = 74
	CurrencyCode_CURRENCY_CODE_KWD         CurrencyCode = 75
	CurrencyCode_CURRENCY_CODE_KYD         CurrencyCode = 76
	CurrencyCode_CURRENCY_CODE_KZT         CurrencyCode = 77
	CurrencyCode_CURRENCY_CODE_LAK         CurrencyCode = 78
	CurrencyCode_CURRENCY_CODE_LBP         CurrencyCode = 79
	CurrencyCode_CURRENCY_CODE_LKR         CurrencyCode = 80
	CurrencyCode_CURRENCY_CODE_LRD         CurrencyCode = 81
	CurrencyCode_CURRENCY_CODE_LSL         CurrencyCode = 82
	CurrencyCode_CURRENCY_CODE_LYD         CurrencyCode = 83
	CurrencyCode_CURRENCY_CODE_MAD         CurrencyCode = 84
	CurrencyCode_CURRENCY_CODE_MDL         CurrencyCode = 85
	CurrencyCode_CURRENCY_CODE_MGA         CurrencyCode = 86
	CurrencyCode_CURRENCY_CODE_MKD         CurrencyCode = 87
	CurrencyCode_CURRENCY_CODE_MMK         CurrencyCode = 88
	CurrencyCode_CURRENCY_CODE_MNT         CurrencyCode = 89
	CurrencyCode_CURRENCY_CODE_MOP         CurrencyCode = 90
	CurrencyCode_CURRENCY_CODE_MRU         CurrencyCode = 91
	CurrencyCode_CURRENCY_CODE_MUR         CurrencyCode = 92
	CurrencyCode_CURRENCY_CODE_MVR         CurrencyCode = 93
	CurrencyCode_CURRENCY_CODE_MWK         CurrencyCode = 94
	CurrencyCode_CURRENCY_CODE_MXN         CurrencyCode = 95
	CurrencyCode_CURRENCY_CODE_MXV         CurrencyCode = 96
	CurrencyCode_CURRENCY_CODE_MYR         CurrencyCode = 97
	CurrencyCode_CURRENCY_CODE_MZN         CurrencyCode = 98
	CurrencyCode_CURRENCY_CODE_NAD         CurrencyCode = 99
	CurrencyCode_CURRENCY_CODE_NGN         CurrencyCode = 100
	CurrencyCode_CURRENCY_CODE_NIO         CurrencyCode = 101
	CurrencyCode_CURRENCY_CODE_NOK         CurrencyCode = 102
	CurrencyCode_CURRENCY_CODE_NPR         CurrencyCode = 103
	CurrencyCode_CURRENCY_CODE_NZD         CurrencyCode = 104
	CurrencyCode_CURRENCY_CODE_OMR         CurrencyCode = 105
	CurrencyCode_CURRENCY_CODE_PAB         CurrencyCode = 106
	CurrencyCode_CURRENCY_CODE_PEN         CurrencyCode = 107
	CurrencyCode_CURRENCY_CODE_PGK         CurrencyCode = 108
	CurrencyCode_CURRENCY_CODE_PHP         CurrencyCode = 109
	CurrencyCode_CURRENCY_CODE_PKR         CurrencyCode = 110
	CurrencyCode_CURRENCY_CODE_PLN         CurrencyCode = 111
	CurrencyCode_CURRENCY_CODE_PYG         CurrencyCode = 112
	CurrencyCode_CURRENCY_CODE_QAR         CurrencyCode = 113
	CurrencyCode_CURRENCY_CODE_RON         CurrencyCode = 114
	CurrencyCode_CURRENCY_CODE_RSD         CurrencyCode = 115
	CurrencyCode_CURRENCY_CODE_RUB         CurrencyCode = 116
	CurrencyCode_CURRENCY_CODE_RWF         CurrencyCode = 117
	CurrencyCode_CURRENCY_CODE_SAR         CurrencyCode = 118
	CurrencyCode_CURRENCY_CODE_SBD         CurrencyCode = 119
	CurrencyCode_CURRENCY_CODE_SCR         CurrencyCode = 120
	CurrencyCode_CURRENCY_CODE_SDG         CurrencyCode = 121
	CurrencyCode_CURRENCY_CODE_SEK         CurrencyCode = 122
	CurrencyCode_CURRENCY_CODE_SGD         CurrencyCode = 123
	CurrencyCode_CURRENCY_CODE_SHP         CurrencyCode = 124
	CurrencyCode_CURRENCY_CODE_SLE         CurrencyCode = 125
	CurrencyCode_CURRENCY_CODE_SOS         CurrencyCode = 126
	CurrencyCode_CURRENCY_CODE_SRD         CurrencyCode = 127
	CurrencyCode_CURRENCY_CODE_SSP         CurrencyCode = 128
	CurrencyCode_CURRENCY_CODE_STN         CurrencyCode = 129
	CurrencyCode_CURRENCY_CODE_SVC         CurrencyCode = 130
	CurrencyCode_CURRENCY_CODE_SYP         CurrencyCode = 131
	CurrencyCode_CURRENCY_CODE_SZL         CurrencyCode = 132
	CurrencyCode_CURRENCY_CODE_THB         CurrencyCode = 133
	CurrencyCode_CURRENCY_CODE_TJS         CurrencyCode = 134
	CurrencyCode_CURRENCY_CODE_TMT         CurrencyCode = 135
	CurrencyCode_CURRENCY_CODE_TND         CurrencyCode = 136
	CurrencyCode_CURRENCY_CODE_TOP         CurrencyCode = 137
	CurrencyCode_CURRENCY_CODE_TRY         CurrencyCode = 138
	CurrencyCode_CURRENCY_CODE_TTD         CurrencyCode = 139
	CurrencyCode_CURRENCY_CODE_TWD         CurrencyCode = 140
	CurrencyCode_CURRENCY_CODE_TZS         CurrencyCode = 141
	CurrencyCode_CURRENCY_CODE_UAH         CurrencyCode = 142
	CurrencyCode_CURRENCY_CODE_UGX         CurrencyCode = 143
	CurrencyCode_CURRENCY_CODE_USD         CurrencyCode = 144
	CurrencyCode_CURRENCY_CODE_UYI         CurrencyCode = 145
	CurrencyCode_CURRENCY_CODE_UYU         CurrencyCode = 146
	CurrencyCode_CURRENCY_CODE_UZS         CurrencyCode = 147
	CurrencyCode_CURRENCY_CODE_VED         CurrencyCode = 148
	CurrencyCode_CURRENCY_CODE_VES         CurrencyCode = 149
	CurrencyCode_CURRENCY_CODE_VND         CurrencyCode = 150
	CurrencyCode_CURRENCY_CODE_VUV         CurrencyCode = 151
	CurrencyCode_CURRENCY_CODE_WST         CurrencyCode = 152
	CurrencyCode_CURRENCY_CODE_XAD         CurrencyCode = 153
	CurrencyCode_CURRENCY_CODE_XAF         CurrencyCode = 154
	CurrencyCode_CURRENCY_CODE_XCD         CurrencyCode = 155
	CurrencyCode_CURRENCY_CODE_XCG         CurrencyCode = 156
	CurrencyCode_CURRENCY_CODE_XOF         CurrencyCode = 157
	CurrencyCode_CURRENCY_CODE_XPF         CurrencyCode = 158
	CurrencyCode_CURRENCY_CODE_YER         CurrencyCode = 159
	CurrencyCode_CURRENCY_CODE_ZAR         CurrencyCode = 160
	CurrencyCode_CURRENCY_CODE_ZMW         CurrencyCode = 161
	CurrencyCode_CURRENCY_CODE_ZWG         CurrencyCode = 162
	CurrencyCode_CURRENCY_CODE_ANG         CurrencyCode = 163
	CurrencyCode_CURRENCY_CODE_CUC         CurrencyCode = 164
	CurrencyCode_CURRENCY_CODE_CYP         CurrencyCode = 165
	CurrencyCode_CURRENCY_CODE_EEK         CurrencyCode = 166
	CurrencyCode_CURRENCY_CODE_HRK         CurrencyCode = 167
	CurrencyCode_CURRENCY_CODE_LTL         CurrencyCode = 168
	CurrencyCode_CURRENCY_CODE_LVL         CurrencyCode = 169
	CurrencyCode_CURRENCY_CODE_MTL         CurrencyCode = 170
	CurrencyCode_CURRENCY_CODE_MRO         CurrencyCode = 171
	CurrencyCode_CURRENCY_CODE_ROL         CurrencyCode = 172
	CurrencyCode_CURRENCY_CODE_SIT         CurrencyCode = 173
	CurrencyCode_CURRENCY_CODE_SKK         CurrencyCode = 174
	CurrencyCode_CURRENCY_CODE_SLL         CurrencyCode = 175
	CurrencyCode_CURRENCY_CODE_STD         CurrencyCode = 176
	CurrencyCode_CURRENCY_CODE_VEF         CurrencyCode = 177
	CurrencyCode_CURRENCY_CODE_ZWL         CurrencyCode = 178
)

// Enum value maps for CurrencyCode.
var (
	CurrencyCode_name = map[int32]string{
		0:   "CURRENCY_CODE_UNSPECIFIED",
		1:   "CURRENCY_CODE_AED",
		2:   "CURRENCY_CODE_AFN",
		3:   "CURRENCY_CODE_ALL",
		4:   "CURRENCY_CODE_AMD",
		5:   "CURRENCY_CODE_AOA",
		6:   "CURRENCY_CODE_ARS",
		7:   "CURRENCY_CODE_AUD",
		8:   "CURRENCY_CODE_AWG",
		9:   "CURRENCY_CODE_AZN",
		10:  "CURRENCY_CODE_BAM",
		11:  "CURRENCY_CODE_BBD",
		12:  "CURRENCY_CODE_BDT",
		13:  "CURRENCY_CODE_BGN",
		14:  "CURRENCY_CODE_BHD",
		15:  "CURRENCY_CODE_BIF",
		16:  "CURRENCY_CODE_BMD",
		17:  "CURRENCY_CODE_BND",
		18:  "CURRENCY_CODE_BOB",
		19:  "CURRENCY_CODE_BOV",
		20:  "CURRENCY_CODE_BRL",
		21:  "CURRENCY_CODE_BSD",
		22:  "CURRENCY_CODE_BTN",
		23:  "CURRENCY_CODE_BWP",
		24:  "CURRENCY_CODE_BYR",
		25:  "CURRENCY_CODE_BZD",
		26:  "CURRENCY_CODE_CAD",
		27:  "CURRENCY_CODE_CDF",
		28:  "CURRENCY_CODE_CHF",
		29:  "CURRENCY_CODE_CLF",
		30:  "CURRENCY_CODE_CLP",
		31:  "CURRENCY_CODE_CNY",
		32:  "CURRENCY_CODE_COP",
		33:  "CURRENCY_CODE_COU",
		34:  "CURRENCY_CODE_CRC",
		35:  "CURRENCY_CODE_CUP",
		36:  "CURRENCY_CODE_CVE",
		37:  "CURRENCY_CODE_CZK",
		38:  "CURRENCY_CODE_DJF",
		39:  "CURRENCY_CODE_DKK",
		40:  "CURRENCY_CODE_DOP",
		41:  "CURRENCY_CODE_DZD",
		42:  "CURRENCY_CODE_EGP",
		43:  "CURRENCY_CODE_ERN",
		44:  "CURRENCY_CODE_ETB",
		45:  "CURRENCY_CODE_EUR",
		46:  "CURRENCY_CODE_FJD",
		47:  "CURRENCY_CODE_FKP",
		48:  "CURRENCY_CODE_GBP",
		49:  "CURRENCY_CODE_GEL",
		50:  "CURRENCY_CODE_GHS",
		51:  "CURRENCY_CODE_GIP",
		52:  "CURRENCY_CODE_GMD",
		53:  "CURRENCY_CODE_GNF",
		54:  "CURRENCY_CODE_GTQ",
		55:  "CURRENCY_CODE_GYD",
		56:  "CURRENCY_CODE_HKD",
		57:  "CURRENCY_CODE_HNL",
		58:  "CURRENCY_CODE_HTG",
		59:  "CURRENCY_CODE_HUF",
		60:  "CURRENCY_CODE_IDR",
		61:  "CURRENCY_CODE_ILS",
		62:  "CURRENCY_CODE_INR",
		63:  "CURRENCY_CODE_IQD",
		64:  "CURRENCY_CODE_IRR",
		65:  "CURRENCY_CODE_ISK",
		66:  "CURRENCY_CODE_JMD",
		67:  "CURRENCY_CODE_JOD",
		68:  "CURRENCY_CODE_JPY",
		69:  "CURRENCY_CODE_KES",
		70:  "CURRENCY_CODE_KGS",
		71:  "CURRENCY_CODE_KHR",
		72:  "CURRENCY_CODE_KMF",
		73:  "CURRENCY_CODE_KPW",
		74:  "CURRENCY_CODE_KRW",
		75:  "CURRENCY_CODE_KWD",
		76:  "CURRENCY_CODE_KYD",
		77:  "CURRENCY_CODE_KZT",
		78:  "CURRENCY_CODE_LAK",
		79:  "CURRENCY_CODE_LBP",
		80:  "CURRENCY_CODE_LKR",
		81:  "CURRENCY_CODE_LRD",
		82:  "CURRENCY_CODE_LSL",
		83:  "CURRENCY_CODE_LYD",
		84:  "CURRENCY_CODE_MAD",
		85:  "CURRENCY_CODE_MDL",
		86:  "CURRENCY_CODE_MGA",
		87:  "CURRENCY_CODE_MKD",
		88:  "CURRENCY_CODE_MMK",
		89:  "CURRENCY_CODE_MNT",
		90:  "CURRENCY_CODE_MOP",
		91:  "CURRENCY_CODE_MRU",
		92:  "CURRENCY_CODE_MUR",
		93:  "CURRENCY_CODE_MVR",
		94:  "CURRENCY_CODE_MWK",
		95:  "CURRENCY_CODE_MXN",
		96:  "CURRENCY_CODE_MXV",
		97:  "CURRENCY_CODE_MYR",
		98:  "CURRENCY_CODE_MZN",
		99:  "CURRENCY_CODE_NAD",
		100: "CURRENCY_CODE_NGN",
		101: "CURRENCY_CODE_NIO",
		102: "CURRENCY_CODE_NOK",
		103: "CURRENCY_CODE_NPR",
		104: "CURRENCY_CODE_NZD",
		105: "CURRENCY_CODE_OMR",
		106: "CURRENCY_CODE_PAB",
		107: "CURRENCY_CODE_PEN",
		108: "CURRENCY_CODE_PGK",
		109: "CURRENCY_CODE_PHP",
		110: "CURRENCY_CODE_PKR",
		111: "CURRENCY_CODE_PLN",
		112: "CURRENCY_CODE_PYG",
		113: "CURRENCY_CODE_QAR",
		114: "CURRENCY_CODE_RON",
		115: "CURRENCY_CODE_RSD",
		116: "CURRENCY_CODE_RUB",
		117: "CURRENCY_CODE_RWF",
		118: "CURRENCY_CODE_SAR",
		119: "CURRENCY_CODE_SBD",
		120: "CURRENCY_CODE_SCR",
		121: "CURRENCY_CODE_SDG",
		122: "CURRENCY_CODE_SEK",
		123: "CURRENCY_CODE_SGD",
		124: "CURRENCY_CODE_SHP",
		125: "CURRENCY_CODE_SLE",
		126: "CURRENCY_CODE_SOS",
		127: "CURRENCY_CODE_SRD",
		128: "CURRENCY_CODE_SSP",
		129: "CURRENCY_CODE_STN",
		130: "CURRENCY_CODE_SVC",
		131: "CURRENCY_CODE_SYP",
		132: "CURRENCY_CODE_SZL",
		133: "CURRENCY_CODE_THB",
		134: "CURRENCY_CODE_TJS",
		135: "CURRENCY_CODE_TMT",
		136: "CURRENCY_CODE_TND",
		137: "CURRENCY_CODE_TOP",
		138: "CURRENCY_CODE_TRY",
		139: "CURRENCY_CODE_TTD",
		140: "CURRENCY_CODE_TWD",
		141: "CURRENCY_CODE_TZS",
		142: "CURRENCY_CODE_UAH",
		143: "CURRENCY_CODE_UGX",
		144: "CURRENCY_CODE_USD",
		145: "CURRENCY_CODE_UYI",
		146: "CURRENCY_CODE_UYU",
		147: "CURRENCY_CODE_UZS",
		148: "CURRENCY_CODE_VED",
		149: "CURRENCY_CODE_VES",
		150: "CURRENCY_CODE_VND",
		151: "CURRENCY_CODE_VUV",
		152: "CURRENCY_CODE_WST",
		153: "CURRENCY_CODE_XAD",
		154: "CURRENCY_CODE_XAF",
		155: "CURRENCY_CODE_XCD",
		156: "CURRENCY_CODE_XCG",
		157: "CURRENCY_CODE_XOF",
		158: "CURRENCY_CODE_XPF",
		159: "CURRENCY_CODE_YER",
		160: "CURRENCY_CODE_ZAR",
		161: "CURRENCY_CODE_ZMW",
		162: "CURRENCY_CODE_ZWG",
		163: "CURRENCY_CODE_ANG",
		164: "CURRENCY_CODE_CUC",
		165: "CURRENCY_CODE_CYP",
		166: "CURRENCY_CODE_EEK",
		167: "CURRENCY_CODE_HRK",
		168: "CURRENCY_CODE_LTL",
		169: "CURRENCY_CODE_LVL",
		170: "CURRENCY_CODE_MTL",
		171: "CURRENCY_CODE_MRO",
		172: "CURRENCY_CODE_ROL",
		173: "CURRENCY_CODE_SIT",
		174: "CURRENCY_CODE_SKK",
		175: "CURRENCY_CODE_SLL",
		176: "CURRENCY_CODE_STD",
		177: "CURRENCY_CODE_VEF",
		178: "CURRENCY_CODE_ZWL",
	}
	CurrencyCode_value = map[string]int32{
		"CURRENCY_CODE_UNSPECIFIED": 0,
		"CURRENCY_CODE_AED":         1,
		"CURRENCY_CODE_AFN":         2,
		"CURRENCY_CODE_ALL":         3,
		"CURRENCY_CODE_AMD":         4,
		"CURRENCY_CODE_AOA":         5,
		"CURRENCY_CODE_ARS":         6,
		"CURRENCY_CODE_AUD":         7,
		"CURRENCY_CODE_AWG":         8,
		"CURRENCY_CODE_AZN":         9,
		"CURRENCY_CODE_BAM":         10,
		"CURRENCY_CODE_BBD":         11,
		"CURRENCY_CODE_BDT":         12,
		"CURRENCY_CODE_BGN":         13,
		"CURRENCY_CODE_BHD":         14,
		"CURRENCY_CODE_BIF":         15,
		"CURRENCY_CODE_BMD":         16,
		"CURRENCY_CODE_BND":         17,
		"CURRENCY_CODE_BOB":         18,
		"CURRENCY_CODE_BOV":         19,
		"CURRENCY_CODE_BRL":         20,
		"CURRENCY_CODE_BSD":         21,
		"CURRENCY_CODE_BTN":         22,
		"CURRENCY_CODE_BWP":         23,
		"CURRENCY_CODE_BYR":         24,
		"CURRENCY_CODE_BZD":         25,
		"CURRENCY_CODE_CAD":         26,
		"CURRENCY_CODE_CDF":         27,
		"CURRENCY_CODE_CHF":         28,
		"CURRENCY_CODE_CLF":         29,
		"CURRENCY_CODE_CLP":         30,
		"CURRENCY_CODE_CNY":         31,
		"CURRENCY_CODE_COP":         32,
		"CURRENCY_CODE_COU":         33,
		"CURRENCY_CODE_CRC":         34,
		"CURRENCY_CODE_CUP":         35,
		"CURRENCY_CODE_CVE":         36,
		"CURRENCY_CODE_CZK":         37,
		"CURRENCY_CODE_DJF":         38,
		"CURRENCY_CODE_DKK":         39,
		"CURRENCY_CODE_DOP":         40,
		"CURRENCY_CODE_DZD":         41,
		"CURRENCY_CODE_EGP":         42,
		"CURRENCY_CODE_ERN":         43,
		"CURRENCY_CODE_ETB":         44,
		"CURRENCY_CODE_EUR":         45,
		"CURRENCY_CODE_FJD":         46,
		"CURRENCY_CODE_FKP":         47,
		"CURRENCY_CODE_GBP":         48,
		"CURRENCY_CODE_GEL":         49,
		"CURRENCY_CODE_GHS":         50,
		"CURRENCY_CODE_GIP":         51,
		"CURRENCY_CODE_GMD":         52,
		"CURRENCY_CODE_GNF":         53,
		"CURRENCY_CODE_GTQ":         54,
		"CURRENCY_CODE_GYD":         55,
		"CURRENCY_CODE_HKD":         56,
		"CURRENCY_CODE_HNL":         57,
		"CURRENCY_CODE_HTG":         58,
		"CURRENCY_CODE_HUF":         59,
		"CURRENCY_CODE_IDR":         60,
		"CURRENCY_CODE_ILS":         61,
		"CURRENCY_CODE_INR":         62,
		"CURRENCY_CODE_IQD":         63,
		"CURRENCY_CODE_IRR":         64,
		"CURRENCY_CODE_ISK":         65,
		"CURRENCY_CODE_JMD":         66,
		"CURRENCY_CODE_JOD":         67,
		"CURRENCY_CODE_JPY":         68,
		"CURRENCY_CODE_KES":         69,
		"CURRENCY_CODE_KGS":         70,
		"CURRENCY_CODE_KHR":         71,
		"CURRENCY_CODE_KMF":         72,
		"CURRENCY_CODE_KPW":         73,
		"CURRENCY_CODE_KRW":         74,
		"CURRENCY_CODE_KWD":         75,
		"CURRENCY_CODE_KYD":         76,
		"CURRENCY_CODE_KZT":         77,
		"CURRENCY_CODE_LAK":         78,
		"CURRENCY_CODE_LBP":         79,
		"CURRENCY_CODE_LKR":         80,
		"CURRENCY_CODE_LRD":         81,
		"CURRENCY_CODE_LSL":         82,
		"CURRENCY_CODE_LYD":         83,
		"CURRENCY_CODE_MAD":         84,
		"CURRENCY_CODE_MDL":         85,
		"CURRENCY_CODE_MGA":         86,
		"CURRENCY_CODE_MKD":         87,
		"CURRENCY_CODE_MMK":         88,
		"CURRENCY_CODE_MNT":         89,
		"CURRENCY_CODE_MOP":         90,
		"CURRENCY_CODE_MRU":         91,
		"CURRENCY_CODE_MUR":         92,
		"CURRENCY_CODE_MVR":         93,
		"CURRENCY_CODE_MWK":         94,
		"CURRENCY_CODE_MXN":         95,
		"CURRENCY_CODE_MXV":         96,
		"CURRENCY_CODE_MYR":         97,
		"CURRENCY_CODE_MZN":         98,
		"CURRENCY_CODE_NAD":         99,
		"CURRENCY_CODE_NGN":         100,
		"CURRENCY_CODE_NIO":         101,
		"CURRENCY_CODE_NOK":         102,
		"CURRENCY_CODE_NPR":         103,
		"CURRENCY_CODE_NZD":         104,
		"CURRENCY_CODE_OMR":         105,
		"CURRENCY_CODE_PAB":         106,
		"CURRENCY_CODE_PEN":         107,
		"CURRENCY_CODE_PGK":         108,
		"CURRENCY_CODE_PHP":         109,
		"CURRENCY_CODE_PKR":         110,
		"CURRENCY_CODE_PLN":         111,
		"CURRENCY_CODE_PYG":         112,
		"CURRENCY_CODE_QAR":         113,
		"CURRENCY_CODE_RON":         114,
		"CURRENCY_CODE_RSD":         115,
		"CURRENCY_CODE_RUB":         116,
		"CURRENCY_CODE_RWF":         117,
		"CURRENCY_CODE_SAR":         118,
		"CURRENCY_CODE_SBD":         119,
		"CURRENCY_CODE_SCR":         120,
		"CURRENCY_CODE_SDG":         121,
		"CURRENCY_CODE_SEK":         122,
		"CURRENCY_CODE_SGD":         123,
		"CURRENCY_CODE_SHP":         124,
		"CURRENCY_CODE_SLE":         125,
		"CURRENCY_CODE_SOS":         126,
		"CURRENCY_CODE_SRD":         127,
		"CURRENCY_CODE_SSP":         128,
		"CURRENCY_CODE_STN":         129,
		"CURRENCY_CODE_SVC":         130,
		"CURRENCY_CODE_SYP":         131,
		"CURRENCY_CODE_SZL":         132,
		"CURRENCY_CODE_THB":         133,
		"CURRENCY_CODE_TJS":         134,
		"CURRENCY_CODE_TMT":         135,
		"CURRENCY_CODE_TND":         136,
		"CURRENCY_CODE_TOP":         137,
		"CURRENCY_CODE_TRY":         138,
		"CURRENCY_CODE_TTD":         139,
		"CURRENCY_CODE_TWD":         140,
		"CURRENCY_CODE_TZS":         141,
		"CURRENCY_CODE_UAH":         142,
		"CURRENCY_CODE_UGX":         143,
		"CURRENCY_CODE_USD":         144,
		"CURRENCY_CODE_UYI":         145,
		"CURRENCY_CODE_UYU":         146,
		"CURRENCY_CODE_UZS":         147,
		"CURRENCY_CODE_VED":         148,
		"CURRENCY_CODE_VES":         149,
		"CURRENCY_CODE_VND":         150,
		"CURRENCY_CODE_VUV":         151,
		"CURRENCY_CODE_WST":         152,
		"CURRENCY_CODE_XAD":         153,
		"CURRENCY_CODE_XAF":         154,
		"CURRENCY_CODE_XCD":         155,
		"CURRENCY_CODE_XCG":         156,
		"CURRENCY_CODE_XOF":         157,
		"CURRENCY_CODE_XPF":         158,
		"CURRENCY_CODE_YER":         159,
		"CURRENCY_CODE_ZAR":         160,
		"CURRENCY_CODE_ZMW":         161,
		"CURRENCY_CODE_ZWG":         162,
		"CURRENCY_CODE_ANG":         163,
		"CURRENCY_CODE_CUC":         164,
		"CURRENCY_CODE_CYP":         165,
		"CURRENCY_CODE_EEK":         166,
		"CURRENCY_CODE_HRK":         167,
		"CURRENCY_CODE_LTL":         168,
		"CURRENCY_CODE_LVL":         169,
		"CURRENCY_CODE_MTL":         170,
		"CURRENCY_CODE_MRO":         171,
		"CURRENCY_CODE_ROL":         172,
		"CURRENCY_CODE_SIT":         173,
		"CURRENCY_CODE_SKK":         174,
		"CURRENCY_CODE_SLL":         175,
		"CURRENCY_CODE_STD":         176,
		"CURRENCY_CODE_VEF":         177,
		"CURRENCY_CODE_ZWL":         178,
	}
)

func (x CurrencyCode) Enum() *CurrencyCode {
	p := new(CurrencyCode)
	*p = x
	return p
}

func (x CurrencyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[53].Descriptor()
}

func (CurrencyCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[53]
}

func (x CurrencyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyCode.Descriptor instead.
func (CurrencyCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{53}
}

type DataCarrierFormat int32

const (
	DataCarrierFormat_DATA_CARRIER_FORMAT_UNSPECIFIED                    DataCarrierFormat = 0
	DataCarrierFormat_DATA_CARRIER_FORMAT_AFORMATVIDEO                   DataCarrierFormat = 1
	DataCarrierFormat_DATA_CARRIER_FORMAT_ADAT                           DataCarrierFormat = 2
	DataCarrierFormat_DATA_CARRIER_FORMAT_ANALOGAUDIO                    DataCarrierFormat = 3
	DataCarrierFormat_DATA_CARRIER_FORMAT_BFORMATVIDEO                   DataCarrierFormat = 4
	DataCarrierFormat_DATA_CARRIER_FORMAT_BETACAM                        DataCarrierFormat = 5
	DataCarrierFormat_DATA_CARRIER_FORMAT_BETACAMSP                      DataCarrierFormat = 6
	DataCarrierFormat_DATA_CARRIER_FORMAT_BETACAMSX                      DataCarrierFormat = 7
	DataCarrierFormat_DATA_CARRIER_FORMAT_BETAMAX                        DataCarrierFormat = 8
	DataCarrierFormat_DATA_CARRIER_FORMAT_CFORMATVIDEO                   DataCarrierFormat = 9
	DataCarrierFormat_DATA_CARRIER_FORMAT_COMPACTDISKDIGITALAUDIO        DataCarrierFormat = 10
	DataCarrierFormat_DATA_CARRIER_FORMAT_D1DIGITALVIDEO                 DataCarrierFormat = 11
	DataCarrierFormat_DATA_CARRIER_FORMAT_D2DIGITALVIDEO                 DataCarrierFormat = 12
	DataCarrierFormat_DATA_CARRIER_FORMAT_D3DIGITALVIDEO                 DataCarrierFormat = 13
	DataCarrierFormat_DATA_CARRIER_FORMAT_D4DIGITALVIDEO                 DataCarrierFormat = 14
	DataCarrierFormat_DATA_CARRIER_FORMAT_D5DIGITALVIDEO                 DataCarrierFormat = 15
	DataCarrierFormat_DATA_CARRIER_FORMAT_D6DIGITALVIDEO                 DataCarrierFormat = 16
	DataCarrierFormat_DATA_CARRIER_FORMAT_DTRS                           DataCarrierFormat = 17
	DataCarrierFormat_DATA_CARRIER_FORMAT_DVCAM                          DataCarrierFormat = 18
	DataCarrierFormat_DATA_CARRIER_FORMAT_DVCPRO                         DataCarrierFormat = 19
	DataCarrierFormat_DATA_CARRIER_FORMAT_DVCPROPROGRESSIVE              DataCarrierFormat = 20
	DataCarrierFormat_DATA_CARRIER_FORMAT_DVCPRO50                       DataCarrierFormat = 21
	DataCarrierFormat_DATA_CARRIER_FORMAT_DVCPROHD                       DataCarrierFormat = 22
	DataCarrierFormat_DATA_CARRIER_FORMAT_DIGITALAUDIOSTATIONARYHEAD     DataCarrierFormat = 23
	DataCarrierFormat_DATA_CARRIER_FORMAT_DIGITALAUDIOTAPE               DataCarrierFormat = 24
	DataCarrierFormat_DATA_CARRIER_FORMAT_DIGITALCOMPONENTVIDEOCASSETTE  DataCarrierFormat = 25
	DataCarrierFormat_DATA_CARRIER_FORMAT_DIGITALDATASTORAGETAPE         DataCarrierFormat = 26
	DataCarrierFormat_DATA_CARRIER_FORMAT_DIRECTSTREAMDIGITAL            DataCarrierFormat = 27
	DataCarrierFormat_DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE            DataCarrierFormat = 28
	DataCarrierFormat_DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE_32BIT      DataCarrierFormat = 29
	DataCarrierFormat_DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEM         DataCarrierFormat = 30
	DataCarrierFormat_DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEMPLUS     DataCarrierFormat = 31
	DataCarrierFormat_DATA_CARRIER_FORMAT_ISO9660                        DataCarrierFormat = 32
	DataCarrierFormat_DATA_CARRIER_FORMAT_JVCPCMDIGITAL                  DataCarrierFormat = 33
	DataCarrierFormat_DATA_CARRIER_FORMAT_LINEARTAPEFILESYSTEM           DataCarrierFormat = 34
	DataCarrierFormat_DATA_CARRIER_FORMAT_MASTERLINK                     DataCarrierFormat = 35
	DataCarrierFormat_DATA_CARRIER_FORMAT_NEWTECHNOLOGYFILESYSTEM        DataCarrierFormat = 36
	DataCarrierFormat_DATA_CARRIER_FORMAT_NOTAPPLICABLE                  DataCarrierFormat = 37
	DataCarrierFormat_DATA_CARRIER_FORMAT_PCMDIGITAL                     DataCarrierFormat = 38
	DataCarrierFormat_DATA_CARRIER_FORMAT_PRODIGI                        DataCarrierFormat = 39
	DataCarrierFormat_DATA_CARRIER_FORMAT_PROPRIETARY                    DataCarrierFormat = 40
	DataCarrierFormat_DATA_CARRIER_FORMAT_RADAR                          DataCarrierFormat = 41
	DataCarrierFormat_DATA_CARRIER_FORMAT_RADARII                        DataCarrierFormat = 42
	DataCarrierFormat_DATA_CARRIER_FORMAT_SONYPCM1630                    DataCarrierFormat = 43
	DataCarrierFormat_DATA_CARRIER_FORMAT_STREAMINGDATA                  DataCarrierFormat = 44
	DataCarrierFormat_DATA_CARRIER_FORMAT_TRANSVERSETRACKQUADRAPLEXVIDEO DataCarrierFormat = 45
)

// Enum value maps for DataCarrierFormat.
var (
	DataCarrierFormat_name = map[int32]string{
		0:  "DATA_CARRIER_FORMAT_UNSPECIFIED",
		1:  "DATA_CARRIER_FORMAT_AFORMATVIDEO",
		2:  "DATA_CARRIER_FORMAT_ADAT",
		3:  "DATA_CARRIER_FORMAT_ANALOGAUDIO",
		4:  "DATA_CARRIER_FORMAT_BFORMATVIDEO",
		5:  "DATA_CARRIER_FORMAT_BETACAM",
		6:  "DATA_CARRIER_FORMAT_BETACAMSP",
		7:  "DATA_CARRIER_FORMAT_BETACAMSX",
		8:  "DATA_CARRIER_FORMAT_BETAMAX",
		9:  "DATA_CARRIER_FORMAT_CFORMATVIDEO",
		10: "DATA_CARRIER_FORMAT_COMPACTDISKDIGITALAUDIO",
		11: "DATA_CARRIER_FORMAT_D1DIGITALVIDEO",
		12: "DATA_CARRIER_FORMAT_D2DIGITALVIDEO",
		13: "DATA_CARRIER_FORMAT_D3DIGITALVIDEO",
		14: "DATA_CARRIER_FORMAT_D4DIGITALVIDEO",
		15: "DATA_CARRIER_FORMAT_D5DIGITALVIDEO",
		16: "DATA_CARRIER_FORMAT_D6DIGITALVIDEO",
		17: "DATA_CARRIER_FORMAT_DTRS",
		18: "DATA_CARRIER_FORMAT_DVCAM",
		19: "DATA_CARRIER_FORMAT_DVCPRO",
		20: "DATA_CARRIER_FORMAT_DVCPROPROGRESSIVE",
		21: "DATA_CARRIER_FORMAT_DVCPRO50",
		22: "DATA_CARRIER_FORMAT_DVCPROHD",
		23: "DATA_CARRIER_FORMAT_DIGITALAUDIOSTATIONARYHEAD",
		24: "DATA_CARRIER_FORMAT_DIGITALAUDIOTAPE",
		25: "DATA_CARRIER_FORMAT_DIGITALCOMPONENTVIDEOCASSETTE",
		26: "DATA_CARRIER_FORMAT_DIGITALDATASTORAGETAPE",
		27: "DATA_CARRIER_FORMAT_DIRECTSTREAMDIGITAL",
		28: "DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE",
		29: "DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE_32BIT",
		30: "DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEM",
		31: "DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEMPLUS",
		32: "DATA_CARRIER_FORMAT_ISO9660",
		33: "DATA_CARRIER_FORMAT_JVCPCMDIGITAL",
		34: "DATA_CARRIER_FORMAT_LINEARTAPEFILESYSTEM",
		35: "DATA_CARRIER_FORMAT_MASTERLINK",
		36: "DATA_CARRIER_FORMAT_NEWTECHNOLOGYFILESYSTEM",
		37: "DATA_CARRIER_FORMAT_NOTAPPLICABLE",
		38: "DATA_CARRIER_FORMAT_PCMDIGITAL",
		39: "DATA_CARRIER_FORMAT_PRODIGI",
		40: "DATA_CARRIER_FORMAT_PROPRIETARY",
		41: "DATA_CARRIER_FORMAT_RADAR",
		42: "DATA_CARRIER_FORMAT_RADARII",
		43: "DATA_CARRIER_FORMAT_SONYPCM1630",
		44: "DATA_CARRIER_FORMAT_STREAMINGDATA",
		45: "DATA_CARRIER_FORMAT_TRANSVERSETRACKQUADRAPLEXVIDEO",
	}
	DataCarrierFormat_value = map[string]int32{
		"DATA_CARRIER_FORMAT_UNSPECIFIED":                    0,
		"DATA_CARRIER_FORMAT_AFORMATVIDEO":                   1,
		"DATA_CARRIER_FORMAT_ADAT":                           2,
		"DATA_CARRIER_FORMAT_ANALOGAUDIO":                    3,
		"DATA_CARRIER_FORMAT_BFORMATVIDEO":                   4,
		"DATA_CARRIER_FORMAT_BETACAM":                        5,
		"DATA_CARRIER_FORMAT_BETACAMSP":                      6,
		"DATA_CARRIER_FORMAT_BETACAMSX":                      7,
		"DATA_CARRIER_FORMAT_BETAMAX":                        8,
		"DATA_CARRIER_FORMAT_CFORMATVIDEO":                   9,
		"DATA_CARRIER_FORMAT_COMPACTDISKDIGITALAUDIO":        10,
		"DATA_CARRIER_FORMAT_D1DIGITALVIDEO":                 11,
		"DATA_CARRIER_FORMAT_D2DIGITALVIDEO":                 12,
		"DATA_CARRIER_FORMAT_D3DIGITALVIDEO":                 13,
		"DATA_CARRIER_FORMAT_D4DIGITALVIDEO":                 14,
		"DATA_CARRIER_FORMAT_D5DIGITALVIDEO":                 15,
		"DATA_CARRIER_FORMAT_D6DIGITALVIDEO":                 16,
		"DATA_CARRIER_FORMAT_DTRS":                           17,
		"DATA_CARRIER_FORMAT_DVCAM":                          18,
		"DATA_CARRIER_FORMAT_DVCPRO":                         19,
		"DATA_CARRIER_FORMAT_DVCPROPROGRESSIVE":              20,
		"DATA_CARRIER_FORMAT_DVCPRO50":                       21,
		"DATA_CARRIER_FORMAT_DVCPROHD":                       22,
		"DATA_CARRIER_FORMAT_DIGITALAUDIOSTATIONARYHEAD":     23,
		"DATA_CARRIER_FORMAT_DIGITALAUDIOTAPE":               24,
		"DATA_CARRIER_FORMAT_DIGITALCOMPONENTVIDEOCASSETTE":  25,
		"DATA_CARRIER_FORMAT_DIGITALDATASTORAGETAPE":         26,
		"DATA_CARRIER_FORMAT_DIRECTSTREAMDIGITAL":            27,
		"DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE":            28,
		"DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE_32BIT":      29,
		"DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEM":         30,
		"DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEMPLUS":     31,
		"DATA_CARRIER_FORMAT_ISO9660":                        32,
		"DATA_CARRIER_FORMAT_JVCPCMDIGITAL":                  33,
		"DATA_CARRIER_FORMAT_LINEARTAPEFILESYSTEM":           34,
		"DATA_CARRIER_FORMAT_MASTERLINK":                     35,
		"DATA_CARRIER_FORMAT_NEWTECHNOLOGYFILESYSTEM":        36,
		"DATA_CARRIER_FORMAT_NOTAPPLICABLE":                  37,
		"DATA_CARRIER_FORMAT_PCMDIGITAL":                     38,
		"DATA_CARRIER_FORMAT_PRODIGI":                        39,
		"DATA_CARRIER_FORMAT_PROPRIETARY":                    40,
		"DATA_CARRIER_FORMAT_RADAR":                          41,
		"DATA_CARRIER_FORMAT_RADARII":                        42,
		"DATA_CARRIER_FORMAT_SONYPCM1630":                    43,
		"DATA_CARRIER_FORMAT_STREAMINGDATA":                  44,
		"DATA_CARRIER_FORMAT_TRANSVERSETRACKQUADRAPLEXVIDEO": 45,
	}
)

func (x DataCarrierFormat) Enum() *DataCarrierFormat {
	p := new(DataCarrierFormat)
	*p = x
	return p
}

func (x DataCarrierFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataCarrierFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[54].Descriptor()
}

func (DataCarrierFormat) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[54]
}

func (x DataCarrierFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataCarrierFormat.Descriptor instead.
func (DataCarrierFormat) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{54}
}

type DataCarrierType int32

const (
	DataCarrierType_DATA_CARRIER_TYPE_UNSPECIFIED                                                  DataCarrierType = 0
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_10_5INCHREEL                          DataCarrierType = 1
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_7INCHREEL                             DataCarrierType = 2
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE                   DataCarrierType = 3
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_LARGEREEL                             DataCarrierType = 4
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_MEDIUMREEL                            DataCarrierType = 5
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_SMALLREEL                             DataCarrierType = 6
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE                   DataCarrierType = 7
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_10_5INCHREEL                         DataCarrierType = 8
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_7INCHREEL                            DataCarrierType = 9
	DataCarrierType_DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE                  DataCarrierType = 10
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_10_5INCHREEL                        DataCarrierType = 11
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_7INCHREEL                           DataCarrierType = 12
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE                 DataCarrierType = 13
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_10_5INCHREEL                       DataCarrierType = 14
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_7INCHREEL                          DataCarrierType = 15
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE                DataCarrierType = 16
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_LARGECASSETTE                      DataCarrierType = 17
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE                     DataCarrierType = 18
	DataCarrierType_DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_SMALLCASSETTE                      DataCarrierType = 19
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_10_5INCHREEL                        DataCarrierType = 20
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_7INCHREEL                           DataCarrierType = 21
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE                 DataCarrierType = 22
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_10_5INCHREEL                       DataCarrierType = 23
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_7INCHREEL                          DataCarrierType = 24
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE                DataCarrierType = 25
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_EXTRALARGECASSETTE                 DataCarrierType = 26
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_LARGECASSETTE                      DataCarrierType = 27
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE                     DataCarrierType = 28
	DataCarrierType_DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE                      DataCarrierType = 29
	DataCarrierType_DATA_CARRIER_TYPE_E_16MMSEPMAGANALOGAUDIOFILMREEL                              DataCarrierType = 30
	DataCarrierType_DATA_CARRIER_TYPE_E_16MMPICTUREANALOGVIDEOFILMREEL                             DataCarrierType = 31
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_10_5INCHREEL                          DataCarrierType = 32
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_12INCHREEL                            DataCarrierType = 33
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_14INCHREEL                            DataCarrierType = 34
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE                   DataCarrierType = 35
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_LARGEREEL                             DataCarrierType = 36
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_MEDIUMREEL                            DataCarrierType = 37
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_SMALLREEL                             DataCarrierType = 38
	DataCarrierType_DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE                   DataCarrierType = 39
	DataCarrierType_DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_LARGECASSETTE                      DataCarrierType = 40
	DataCarrierType_DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE                     DataCarrierType = 41
	DataCarrierType_DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE                      DataCarrierType = 42
	DataCarrierType_DATA_CARRIER_TYPE_E_35MMSEPMAGANALOGAUDIOFILMREEL                              DataCarrierType = 43
	DataCarrierType_DATA_CARRIER_TYPE_E_35MMPICTUREANALOGVIDEOFILMREEL                             DataCarrierType = 44
	DataCarrierType_DATA_CARRIER_TYPE_E_8MMPICTUREANALOGVIDEOFILMREEL                              DataCarrierType = 45
	DataCarrierType_DATA_CARRIER_TYPE_AIT_1DIGITALDATATAPE                                         DataCarrierType = 46
	DataCarrierType_DATA_CARRIER_TYPE_AIT_2DIGITALDATATAPE                                         DataCarrierType = 47
	DataCarrierType_DATA_CARRIER_TYPE_AIT_3DIGITALDATATAPE                                         DataCarrierType = 48
	DataCarrierType_DATA_CARRIER_TYPE_AIT_3EXDIGITALDATATAPE                                       DataCarrierType = 49
	DataCarrierType_DATA_CARRIER_TYPE_AIT_4DIGITALDATATAPE                                         DataCarrierType = 50
	DataCarrierType_DATA_CARRIER_TYPE_AIT_5DIGITALDATATAPE                                         DataCarrierType = 51
	DataCarrierType_DATA_CARRIER_TYPE_BERNOULLIDISK_20MB                                           DataCarrierType = 52
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_LARGECASSETTE                       DataCarrierType = 53
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_SMALLCASSETTE                       DataCarrierType = 54
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_LARGECASSETTE                      DataCarrierType = 55
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_SMALLCASSETTE                      DataCarrierType = 56
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_LARGECASSETTE                         DataCarrierType = 57
	DataCarrierType_DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_SMALLCASSETTE                         DataCarrierType = 58
	DataCarrierType_DATA_CARRIER_TYPE_BINDER_1INCHRING                                             DataCarrierType = 59
	DataCarrierType_DATA_CARRIER_TYPE_BINDER_1_5INCHRING                                           DataCarrierType = 60
	DataCarrierType_DATA_CARRIER_TYPE_BINDER_0_5INCHRING                                           DataCarrierType = 61
	DataCarrierType_DATA_CARRIER_TYPE_BINDER_2INCHRING                                             DataCarrierType = 62
	DataCarrierType_DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM      DataCarrierType = 63
	DataCarrierType_DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM      DataCarrierType = 64
	DataCarrierType_DATA_CARRIER_TYPE_CDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM         DataCarrierType = 65
	DataCarrierType_DATA_CARRIER_TYPE_CDROMDIGITALDATADISK                                         DataCarrierType = 66
	DataCarrierType_DATA_CARRIER_TYPE_CDIINTERACTIVEMULTIMEDIADIGITALDATADISK                      DataCarrierType = 67
	DataCarrierType_DATA_CARRIER_TYPE_COMPACTCASSETTEANALOGAUDIOTAPE                               DataCarrierType = 68
	DataCarrierType_DATA_CARRIER_TYPE_DAT160DIGITALSTORAGETAPE                                     DataCarrierType = 69
	DataCarrierType_DATA_CARRIER_TYPE_DAT320DIGITALSTORAGETAPE                                     DataCarrierType = 70
	DataCarrierType_DATA_CARRIER_TYPE_DAT72DIGITALSTORAGETAPE                                      DataCarrierType = 71
	DataCarrierType_DATA_CARRIER_TYPE_DDS_1DIGITALDATATAPE                                         DataCarrierType = 72
	DataCarrierType_DATA_CARRIER_TYPE_DDS_2DIGITALDATATAPE                                         DataCarrierType = 73
	DataCarrierType_DATA_CARRIER_TYPE_DDS_3DIGITALDATATAPE                                         DataCarrierType = 74
	DataCarrierType_DATA_CARRIER_TYPE_DDS_4DIGITALDATATAPE                                         DataCarrierType = 75
	DataCarrierType_DATA_CARRIER_TYPE_DLT_IIIDIGITALDATATAPE                                       DataCarrierType = 76
	DataCarrierType_DATA_CARRIER_TYPE_DLT_IVDIGITALDATATAPE                                        DataCarrierType = 77
	DataCarrierType_DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_MINICASSETTE                              DataCarrierType = 78
	DataCarrierType_DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_NORMALCASSETTE                            DataCarrierType = 79
	DataCarrierType_DATA_CARRIER_TYPE_DVCAMDIGITALVIDEOTAPE                                        DataCarrierType = 80
	DataCarrierType_DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_LARGECASSETTE                       DataCarrierType = 81
	DataCarrierType_DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_MEDIUMCASSETTE                      DataCarrierType = 82
	DataCarrierType_DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_SMALLCASSETTE                       DataCarrierType = 83
	DataCarrierType_DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_EXTRALARGECASSETTE                  DataCarrierType = 84
	DataCarrierType_DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_LARGECASSETTE                       DataCarrierType = 85
	DataCarrierType_DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM  DataCarrierType = 86
	DataCarrierType_DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM  DataCarrierType = 87
	DataCarrierType_DATA_CARRIER_TYPE_DVD_PLUS_RWREWRITABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM DataCarrierType = 88
	DataCarrierType_DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM        DataCarrierType = 89
	DataCarrierType_DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM        DataCarrierType = 90
	DataCarrierType_DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKDOUBLESIDED                       DataCarrierType = 91
	DataCarrierType_DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKSINGLESIDED                       DataCarrierType = 92
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_LARGECASSETTE                 DataCarrierType = 93
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_SMALLCASSETTE                 DataCarrierType = 94
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALAUDIOTAPE                                             DataCarrierType = 95
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALCOMPACTCASSETTE                                       DataCarrierType = 96
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_COMPACTCASSETTE                     DataCarrierType = 97
	DataCarrierType_DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_STANDARDCASSETTE                    DataCarrierType = 98
	DataCarrierType_DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH        DataCarrierType = 99
	DataCarrierType_DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH       DataCarrierType = 100
	DataCarrierType_DATA_CARRIER_TYPE_ENVELOPE                                                     DataCarrierType = 101
	DataCarrierType_DATA_CARRIER_TYPE_EXABYTE8500SERIESDIGITALDATATAPE                             DataCarrierType = 102
	DataCarrierType_DATA_CARRIER_TYPE_EXABYTE8700SERIESDIGITALDATATAPE                             DataCarrierType = 103
	DataCarrierType_DATA_CARRIER_TYPE_EXABYTE8900SERIESDIGITALDATATAPE                             DataCarrierType = 104
	DataCarrierType_DATA_CARRIER_TYPE_EXABYTEMAMMOTHDIGITALDATATAPE                                DataCarrierType = 105
	DataCarrierType_DATA_CARRIER_TYPE_FILESYSTEM                                                   DataCarrierType = 106
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH            DataCarrierType = 107
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH            DataCarrierType = 108
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH            DataCarrierType = 109
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH            DataCarrierType = 110
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH             DataCarrierType = 111
	DataCarrierType_DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE   DataCarrierType = 112
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_12CM       DataCarrierType = 113
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_8CM        DataCarrierType = 114
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_12CM       DataCarrierType = 115
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_8CM        DataCarrierType = 116
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM       DataCarrierType = 117
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_8CM        DataCarrierType = 118
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM       DataCarrierType = 119
	DataCarrierType_DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_8CM        DataCarrierType = 120
	DataCarrierType_DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_LARGECASSETTE                        DataCarrierType = 121
	DataCarrierType_DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_SMALLCASSETTE                        DataCarrierType = 122
	DataCarrierType_DATA_CARRIER_TYPE_HDCAMDIGITALVIDEOTAPE                                        DataCarrierType = 123
	DataCarrierType_DATA_CARRIER_TYPE_HDVHDTVDIGITALVIDEOTAPE                                      DataCarrierType = 124
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB2_0INTERFACE                        DataCarrierType = 125
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB3_0INTERFACE                        DataCarrierType = 126
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSBINTERFACE                           DataCarrierType = 127
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIREINTERFACE                      DataCarrierType = 128
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE                  DataCarrierType = 129
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE                   DataCarrierType = 130
	DataCarrierType_DATA_CARRIER_TYPE_HARDDISKDRIVE_UNSPECIFIEDINTERFACE                           DataCarrierType = 131
	DataCarrierType_DATA_CARRIER_TYPE_HI_8ANALOGVIDEOTAPE                                          DataCarrierType = 132
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE                  DataCarrierType = 133
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE                  DataCarrierType = 134
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSBINTERFACE                     DataCarrierType = 135
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE                DataCarrierType = 136
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE            DataCarrierType = 137
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USB_SATAINTERFACE       DataCarrierType = 138
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE             DataCarrierType = 139
	DataCarrierType_DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE             DataCarrierType = 140
	DataCarrierType_DATA_CARRIER_TYPE_JAZDIGITALDATADISK                                           DataCarrierType = 141
	DataCarrierType_DATA_CARRIER_TYPE_LTO_1ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 142
	DataCarrierType_DATA_CARRIER_TYPE_LTO_2ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 143
	DataCarrierType_DATA_CARRIER_TYPE_LTO_3ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 144
	DataCarrierType_DATA_CARRIER_TYPE_LTO_4ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 145
	DataCarrierType_DATA_CARRIER_TYPE_LTO_5ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 146
	DataCarrierType_DATA_CARRIER_TYPE_LTO_6ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 147
	DataCarrierType_DATA_CARRIER_TYPE_LTO_7ULTRIUMDIGITALDATATAPE                                  DataCarrierType = 148
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_10INCH                      DataCarrierType = 149
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_12INCH                      DataCarrierType = 150
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_14INCH                      DataCarrierType = 151
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_16INCH                      DataCarrierType = 152
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_7INCH                       DataCarrierType = 153
	DataCarrierType_DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE             DataCarrierType = 154
	DataCarrierType_DATA_CARRIER_TYPE_LASERDISCOPTICALDISKSINGLESIDED                              DataCarrierType = 155
	DataCarrierType_DATA_CARRIER_TYPE_MINIDISK                                                     DataCarrierType = 156
	DataCarrierType_DATA_CARRIER_TYPE_MODISK_1_3GB                                                 DataCarrierType = 157
	DataCarrierType_DATA_CARRIER_TYPE_MODISK_1200MB                                                DataCarrierType = 158
	DataCarrierType_DATA_CARRIER_TYPE_MODISK_2_6GB                                                 DataCarrierType = 159
	DataCarrierType_DATA_CARRIER_TYPE_MODISK_540MB                                                 DataCarrierType = 160
	DataCarrierType_DATA_CARRIER_TYPE_MODISK_650MB                                                 DataCarrierType = 161
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH            DataCarrierType = 162
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH            DataCarrierType = 163
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH            DataCarrierType = 164
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH            DataCarrierType = 165
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH             DataCarrierType = 166
	DataCarrierType_DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE   DataCarrierType = 167
	DataCarrierType_DATA_CARRIER_TYPE_PREMASTERCD                                                  DataCarrierType = 168
	DataCarrierType_DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE                   DataCarrierType = 169
	DataCarrierType_DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE                   DataCarrierType = 170
	DataCarrierType_DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE                 DataCarrierType = 171
	DataCarrierType_DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE              DataCarrierType = 172
	DataCarrierType_DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE              DataCarrierType = 173
	DataCarrierType_DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_COMPACTCASSETTE                         DataCarrierType = 174
	DataCarrierType_DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_STANDARDCASSETTE                        DataCarrierType = 175
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE                     DataCarrierType = 176
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE              DataCarrierType = 177
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE              DataCarrierType = 178
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL50PININTERFACE                   DataCarrierType = 179
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL68PININTERFACE                   DataCarrierType = 180
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALCENTRONIXINTERFACE               DataCarrierType = 181
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE                    DataCarrierType = 182
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE             DataCarrierType = 183
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL50PININTERFACE               DataCarrierType = 184
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL68PININTERFACE               DataCarrierType = 185
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL80PININTERFACE               DataCarrierType = 186
	DataCarrierType_DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE         DataCarrierType = 187
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_10INCH                      DataCarrierType = 188
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_12INCH                      DataCarrierType = 189
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_14INCH                      DataCarrierType = 190
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_16INCH                      DataCarrierType = 191
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_7INCH                       DataCarrierType = 192
	DataCarrierType_DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE             DataCarrierType = 193
	DataCarrierType_DATA_CARRIER_TYPE_SINGLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH        DataCarrierType = 194
	DataCarrierType_DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH        DataCarrierType = 195
	DataCarrierType_DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH       DataCarrierType = 196
	DataCarrierType_DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_8INCH          DataCarrierType = 197
	DataCarrierType_DATA_CARRIER_TYPE_SOLIDSTATEMEMORYSTORAGECARDS                                 DataCarrierType = 198
	DataCarrierType_DATA_CARRIER_TYPE_STORAGEBOX_1_2CUBICFEET                                      DataCarrierType = 199
	DataCarrierType_DATA_CARRIER_TYPE_STORAGEBOX_2_0CUBICFEET                                      DataCarrierType = 200
	DataCarrierType_DATA_CARRIER_TYPE_STORAGEBOX                                                   DataCarrierType = 201
	DataCarrierType_DATA_CARRIER_TYPE_STORAGECONTAINER_1_2CUBICFEET                                DataCarrierType = 202
	DataCarrierType_DATA_CARRIER_TYPE_STORAGECONTAINER_2_0CUBICFEET                                DataCarrierType = 203
	DataCarrierType_DATA_CARRIER_TYPE_STORAGECONTAINER                                             DataCarrierType = 204
	DataCarrierType_DATA_CARRIER_TYPE_SUPER16MMPICTUREANALOGVIDEOFILMREEL                          DataCarrierType = 205
	DataCarrierType_DATA_CARRIER_TYPE_SUPER8MMPICTUREANALOGVIDEOFILMREEL                           DataCarrierType = 206
	DataCarrierType_DATA_CARRIER_TYPE_UMATICSPANALOGVIDEOTAPE_SMALLCASSETTE                        DataCarrierType = 207
	DataCarrierType_DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_LARGECASSETTE                          DataCarrierType = 208
	DataCarrierType_DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_SMALLCASSETTE                          DataCarrierType = 209
	DataCarrierType_DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_COMPACTCASSETTE                           DataCarrierType = 210
	DataCarrierType_DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_STANDARDCASSETTE                          DataCarrierType = 211
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_10INCH                        DataCarrierType = 212
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_12INCH                        DataCarrierType = 213
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_14INCH                        DataCarrierType = 214
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_16INCH                        DataCarrierType = 215
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_7INCH                         DataCarrierType = 216
	DataCarrierType_DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE               DataCarrierType = 217
	DataCarrierType_DATA_CARRIER_TYPE_VXA_1DIGITALDATATAPE                                         DataCarrierType = 218
	DataCarrierType_DATA_CARRIER_TYPE_VXA_2DIGITALDATATAPE                                         DataCarrierType = 219
	DataCarrierType_DATA_CARRIER_TYPE_VXA_3DIGITALDATATAPE                                         DataCarrierType = 220
	DataCarrierType_DATA_CARRIER_TYPE_WAXCYLINDERPHONOGRAMANALOGAUDIODISK                          DataCarrierType = 221
	DataCarrierType_DATA_CARRIER_TYPE_XDCAMREWRITABLEOPTICALDISK                                   DataCarrierType = 222
	DataCarrierType_DATA_CARRIER_TYPE_ZIPDIGITALDATADISK                                           DataCarrierType = 223
)

// Enum value maps for DataCarrierType.
var (
	DataCarrierType_name = map[int32]string{
		0:   "DATA_CARRIER_TYPE_UNSPECIFIED",
		1:   "DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_10_5INCHREEL",
		2:   "DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_7INCHREEL",
		3:   "DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE",
		4:   "DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_LARGEREEL",
		5:   "DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_MEDIUMREEL",
		6:   "DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_SMALLREEL",
		7:   "DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE",
		8:   "DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_10_5INCHREEL",
		9:   "DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_7INCHREEL",
		10:  "DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE",
		11:  "DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_10_5INCHREEL",
		12:  "DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_7INCHREEL",
		13:  "DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE",
		14:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_10_5INCHREEL",
		15:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_7INCHREEL",
		16:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE",
		17:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_LARGECASSETTE",
		18:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE",
		19:  "DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_SMALLCASSETTE",
		20:  "DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_10_5INCHREEL",
		21:  "DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_7INCHREEL",
		22:  "DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE",
		23:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_10_5INCHREEL",
		24:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_7INCHREEL",
		25:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE",
		26:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_EXTRALARGECASSETTE",
		27:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_LARGECASSETTE",
		28:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE",
		29:  "DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE",
		30:  "DATA_CARRIER_TYPE_E_16MMSEPMAGANALOGAUDIOFILMREEL",
		31:  "DATA_CARRIER_TYPE_E_16MMPICTUREANALOGVIDEOFILMREEL",
		32:  "DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_10_5INCHREEL",
		33:  "DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_12INCHREEL",
		34:  "DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_14INCHREEL",
		35:  "DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE",
		36:  "DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_LARGEREEL",
		37:  "DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_MEDIUMREEL",
		38:  "DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_SMALLREEL",
		39:  "DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE",
		40:  "DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_LARGECASSETTE",
		41:  "DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE",
		42:  "DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE",
		43:  "DATA_CARRIER_TYPE_E_35MMSEPMAGANALOGAUDIOFILMREEL",
		44:  "DATA_CARRIER_TYPE_E_35MMPICTUREANALOGVIDEOFILMREEL",
		45:  "DATA_CARRIER_TYPE_E_8MMPICTUREANALOGVIDEOFILMREEL",
		46:  "DATA_CARRIER_TYPE_AIT_1DIGITALDATATAPE",
		47:  "DATA_CARRIER_TYPE_AIT_2DIGITALDATATAPE",
		48:  "DATA_CARRIER_TYPE_AIT_3DIGITALDATATAPE",
		49:  "DATA_CARRIER_TYPE_AIT_3EXDIGITALDATATAPE",
		50:  "DATA_CARRIER_TYPE_AIT_4DIGITALDATATAPE",
		51:  "DATA_CARRIER_TYPE_AIT_5DIGITALDATATAPE",
		52:  "DATA_CARRIER_TYPE_BERNOULLIDISK_20MB",
		53:  "DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_LARGECASSETTE",
		54:  "DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_SMALLCASSETTE",
		55:  "DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_LARGECASSETTE",
		56:  "DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_SMALLCASSETTE",
		57:  "DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_LARGECASSETTE",
		58:  "DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_SMALLCASSETTE",
		59:  "DATA_CARRIER_TYPE_BINDER_1INCHRING",
		60:  "DATA_CARRIER_TYPE_BINDER_1_5INCHRING",
		61:  "DATA_CARRIER_TYPE_BINDER_0_5INCHRING",
		62:  "DATA_CARRIER_TYPE_BINDER_2INCHRING",
		63:  "DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM",
		64:  "DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		65:  "DATA_CARRIER_TYPE_CDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		66:  "DATA_CARRIER_TYPE_CDROMDIGITALDATADISK",
		67:  "DATA_CARRIER_TYPE_CDIINTERACTIVEMULTIMEDIADIGITALDATADISK",
		68:  "DATA_CARRIER_TYPE_COMPACTCASSETTEANALOGAUDIOTAPE",
		69:  "DATA_CARRIER_TYPE_DAT160DIGITALSTORAGETAPE",
		70:  "DATA_CARRIER_TYPE_DAT320DIGITALSTORAGETAPE",
		71:  "DATA_CARRIER_TYPE_DAT72DIGITALSTORAGETAPE",
		72:  "DATA_CARRIER_TYPE_DDS_1DIGITALDATATAPE",
		73:  "DATA_CARRIER_TYPE_DDS_2DIGITALDATATAPE",
		74:  "DATA_CARRIER_TYPE_DDS_3DIGITALDATATAPE",
		75:  "DATA_CARRIER_TYPE_DDS_4DIGITALDATATAPE",
		76:  "DATA_CARRIER_TYPE_DLT_IIIDIGITALDATATAPE",
		77:  "DATA_CARRIER_TYPE_DLT_IVDIGITALDATATAPE",
		78:  "DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_MINICASSETTE",
		79:  "DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_NORMALCASSETTE",
		80:  "DATA_CARRIER_TYPE_DVCAMDIGITALVIDEOTAPE",
		81:  "DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_LARGECASSETTE",
		82:  "DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_MEDIUMCASSETTE",
		83:  "DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_SMALLCASSETTE",
		84:  "DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_EXTRALARGECASSETTE",
		85:  "DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_LARGECASSETTE",
		86:  "DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM",
		87:  "DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		88:  "DATA_CARRIER_TYPE_DVD_PLUS_RWREWRITABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		89:  "DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM",
		90:  "DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		91:  "DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKDOUBLESIDED",
		92:  "DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKSINGLESIDED",
		93:  "DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_LARGECASSETTE",
		94:  "DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_SMALLCASSETTE",
		95:  "DATA_CARRIER_TYPE_DIGITALAUDIOTAPE",
		96:  "DATA_CARRIER_TYPE_DIGITALCOMPACTCASSETTE",
		97:  "DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_COMPACTCASSETTE",
		98:  "DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_STANDARDCASSETTE",
		99:  "DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH",
		100: "DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH",
		101: "DATA_CARRIER_TYPE_ENVELOPE",
		102: "DATA_CARRIER_TYPE_EXABYTE8500SERIESDIGITALDATATAPE",
		103: "DATA_CARRIER_TYPE_EXABYTE8700SERIESDIGITALDATATAPE",
		104: "DATA_CARRIER_TYPE_EXABYTE8900SERIESDIGITALDATATAPE",
		105: "DATA_CARRIER_TYPE_EXABYTEMAMMOTHDIGITALDATATAPE",
		106: "DATA_CARRIER_TYPE_FILESYSTEM",
		107: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH",
		108: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH",
		109: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH",
		110: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH",
		111: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH",
		112: "DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE",
		113: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_12CM",
		114: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_8CM",
		115: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_12CM",
		116: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_8CM",
		117: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM",
		118: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_8CM",
		119: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM",
		120: "DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_8CM",
		121: "DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_LARGECASSETTE",
		122: "DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_SMALLCASSETTE",
		123: "DATA_CARRIER_TYPE_HDCAMDIGITALVIDEOTAPE",
		124: "DATA_CARRIER_TYPE_HDVHDTVDIGITALVIDEOTAPE",
		125: "DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB2_0INTERFACE",
		126: "DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB3_0INTERFACE",
		127: "DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSBINTERFACE",
		128: "DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIREINTERFACE",
		129: "DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE",
		130: "DATA_CARRIER_TYPE_HARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		131: "DATA_CARRIER_TYPE_HARDDISKDRIVE_UNSPECIFIEDINTERFACE",
		132: "DATA_CARRIER_TYPE_HI_8ANALOGVIDEOTAPE",
		133: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE",
		134: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE",
		135: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSBINTERFACE",
		136: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE",
		137: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE",
		138: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USB_SATAINTERFACE",
		139: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		140: "DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE",
		141: "DATA_CARRIER_TYPE_JAZDIGITALDATADISK",
		142: "DATA_CARRIER_TYPE_LTO_1ULTRIUMDIGITALDATATAPE",
		143: "DATA_CARRIER_TYPE_LTO_2ULTRIUMDIGITALDATATAPE",
		144: "DATA_CARRIER_TYPE_LTO_3ULTRIUMDIGITALDATATAPE",
		145: "DATA_CARRIER_TYPE_LTO_4ULTRIUMDIGITALDATATAPE",
		146: "DATA_CARRIER_TYPE_LTO_5ULTRIUMDIGITALDATATAPE",
		147: "DATA_CARRIER_TYPE_LTO_6ULTRIUMDIGITALDATATAPE",
		148: "DATA_CARRIER_TYPE_LTO_7ULTRIUMDIGITALDATATAPE",
		149: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_10INCH",
		150: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_12INCH",
		151: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_14INCH",
		152: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_16INCH",
		153: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_7INCH",
		154: "DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE",
		155: "DATA_CARRIER_TYPE_LASERDISCOPTICALDISKSINGLESIDED",
		156: "DATA_CARRIER_TYPE_MINIDISK",
		157: "DATA_CARRIER_TYPE_MODISK_1_3GB",
		158: "DATA_CARRIER_TYPE_MODISK_1200MB",
		159: "DATA_CARRIER_TYPE_MODISK_2_6GB",
		160: "DATA_CARRIER_TYPE_MODISK_540MB",
		161: "DATA_CARRIER_TYPE_MODISK_650MB",
		162: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH",
		163: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH",
		164: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH",
		165: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH",
		166: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH",
		167: "DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE",
		168: "DATA_CARRIER_TYPE_PREMASTERCD",
		169: "DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE",
		170: "DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE",
		171: "DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE",
		172: "DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		173: "DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE",
		174: "DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_COMPACTCASSETTE",
		175: "DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_STANDARDCASSETTE",
		176: "DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE",
		177: "DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		178: "DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE",
		179: "DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL50PININTERFACE",
		180: "DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL68PININTERFACE",
		181: "DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALCENTRONIXINTERFACE",
		182: "DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE",
		183: "DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		184: "DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL50PININTERFACE",
		185: "DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL68PININTERFACE",
		186: "DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL80PININTERFACE",
		187: "DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE",
		188: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_10INCH",
		189: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_12INCH",
		190: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_14INCH",
		191: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_16INCH",
		192: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_7INCH",
		193: "DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE",
		194: "DATA_CARRIER_TYPE_SINGLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH",
		195: "DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH",
		196: "DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH",
		197: "DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_8INCH",
		198: "DATA_CARRIER_TYPE_SOLIDSTATEMEMORYSTORAGECARDS",
		199: "DATA_CARRIER_TYPE_STORAGEBOX_1_2CUBICFEET",
		200: "DATA_CARRIER_TYPE_STORAGEBOX_2_0CUBICFEET",
		201: "DATA_CARRIER_TYPE_STORAGEBOX",
		202: "DATA_CARRIER_TYPE_STORAGECONTAINER_1_2CUBICFEET",
		203: "DATA_CARRIER_TYPE_STORAGECONTAINER_2_0CUBICFEET",
		204: "DATA_CARRIER_TYPE_STORAGECONTAINER",
		205: "DATA_CARRIER_TYPE_SUPER16MMPICTUREANALOGVIDEOFILMREEL",
		206: "DATA_CARRIER_TYPE_SUPER8MMPICTUREANALOGVIDEOFILMREEL",
		207: "DATA_CARRIER_TYPE_UMATICSPANALOGVIDEOTAPE_SMALLCASSETTE",
		208: "DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_LARGECASSETTE",
		209: "DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_SMALLCASSETTE",
		210: "DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_COMPACTCASSETTE",
		211: "DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_STANDARDCASSETTE",
		212: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_10INCH",
		213: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_12INCH",
		214: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_14INCH",
		215: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_16INCH",
		216: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_7INCH",
		217: "DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE",
		218: "DATA_CARRIER_TYPE_VXA_1DIGITALDATATAPE",
		219: "DATA_CARRIER_TYPE_VXA_2DIGITALDATATAPE",
		220: "DATA_CARRIER_TYPE_VXA_3DIGITALDATATAPE",
		221: "DATA_CARRIER_TYPE_WAXCYLINDERPHONOGRAMANALOGAUDIODISK",
		222: "DATA_CARRIER_TYPE_XDCAMREWRITABLEOPTICALDISK",
		223: "DATA_CARRIER_TYPE_ZIPDIGITALDATADISK",
	}
	DataCarrierType_value = map[string]int32{
		"DATA_CARRIER_TYPE_UNSPECIFIED":                                                  0,
		"DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_10_5INCHREEL":                          1,
		"DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_7INCHREEL":                             2,
		"DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE":                   3,
		"DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_LARGEREEL":                             4,
		"DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_MEDIUMREEL":                            5,
		"DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_SMALLREEL":                             6,
		"DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE":                   7,
		"DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_10_5INCHREEL":                         8,
		"DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_7INCHREEL":                            9,
		"DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE":                  10,
		"DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_10_5INCHREEL":                        11,
		"DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_7INCHREEL":                           12,
		"DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE":                 13,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_10_5INCHREEL":                       14,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_7INCHREEL":                          15,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE":                16,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_LARGECASSETTE":                      17,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE":                     18,
		"DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_SMALLCASSETTE":                      19,
		"DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_10_5INCHREEL":                        20,
		"DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_7INCHREEL":                           21,
		"DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE":                 22,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_10_5INCHREEL":                       23,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_7INCHREEL":                          24,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE":                25,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_EXTRALARGECASSETTE":                 26,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_LARGECASSETTE":                      27,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE":                     28,
		"DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE":                      29,
		"DATA_CARRIER_TYPE_E_16MMSEPMAGANALOGAUDIOFILMREEL":                              30,
		"DATA_CARRIER_TYPE_E_16MMPICTUREANALOGVIDEOFILMREEL":                             31,
		"DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_10_5INCHREEL":                          32,
		"DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_12INCHREEL":                            33,
		"DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_14INCHREEL":                            34,
		"DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE":                   35,
		"DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_LARGEREEL":                             36,
		"DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_MEDIUMREEL":                            37,
		"DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_SMALLREEL":                             38,
		"DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE":                   39,
		"DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_LARGECASSETTE":                      40,
		"DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE":                     41,
		"DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE":                      42,
		"DATA_CARRIER_TYPE_E_35MMSEPMAGANALOGAUDIOFILMREEL":                              43,
		"DATA_CARRIER_TYPE_E_35MMPICTUREANALOGVIDEOFILMREEL":                             44,
		"DATA_CARRIER_TYPE_E_8MMPICTUREANALOGVIDEOFILMREEL":                              45,
		"DATA_CARRIER_TYPE_AIT_1DIGITALDATATAPE":                                         46,
		"DATA_CARRIER_TYPE_AIT_2DIGITALDATATAPE":                                         47,
		"DATA_CARRIER_TYPE_AIT_3DIGITALDATATAPE":                                         48,
		"DATA_CARRIER_TYPE_AIT_3EXDIGITALDATATAPE":                                       49,
		"DATA_CARRIER_TYPE_AIT_4DIGITALDATATAPE":                                         50,
		"DATA_CARRIER_TYPE_AIT_5DIGITALDATATAPE":                                         51,
		"DATA_CARRIER_TYPE_BERNOULLIDISK_20MB":                                           52,
		"DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_LARGECASSETTE":                       53,
		"DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_SMALLCASSETTE":                       54,
		"DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_LARGECASSETTE":                      55,
		"DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_SMALLCASSETTE":                      56,
		"DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_LARGECASSETTE":                         57,
		"DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_SMALLCASSETTE":                         58,
		"DATA_CARRIER_TYPE_BINDER_1INCHRING":                                             59,
		"DATA_CARRIER_TYPE_BINDER_1_5INCHRING":                                           60,
		"DATA_CARRIER_TYPE_BINDER_0_5INCHRING":                                           61,
		"DATA_CARRIER_TYPE_BINDER_2INCHRING":                                             62,
		"DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM":      63,
		"DATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM":      64,
		"DATA_CARRIER_TYPE_CDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM":         65,
		"DATA_CARRIER_TYPE_CDROMDIGITALDATADISK":                                         66,
		"DATA_CARRIER_TYPE_CDIINTERACTIVEMULTIMEDIADIGITALDATADISK":                      67,
		"DATA_CARRIER_TYPE_COMPACTCASSETTEANALOGAUDIOTAPE":                               68,
		"DATA_CARRIER_TYPE_DAT160DIGITALSTORAGETAPE":                                     69,
		"DATA_CARRIER_TYPE_DAT320DIGITALSTORAGETAPE":                                     70,
		"DATA_CARRIER_TYPE_DAT72DIGITALSTORAGETAPE":                                      71,
		"DATA_CARRIER_TYPE_DDS_1DIGITALDATATAPE":                                         72,
		"DATA_CARRIER_TYPE_DDS_2DIGITALDATATAPE":                                         73,
		"DATA_CARRIER_TYPE_DDS_3DIGITALDATATAPE":                                         74,
		"DATA_CARRIER_TYPE_DDS_4DIGITALDATATAPE":                                         75,
		"DATA_CARRIER_TYPE_DLT_IIIDIGITALDATATAPE":                                       76,
		"DATA_CARRIER_TYPE_DLT_IVDIGITALDATATAPE":                                        77,
		"DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_MINICASSETTE":                              78,
		"DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_NORMALCASSETTE":                            79,
		"DATA_CARRIER_TYPE_DVCAMDIGITALVIDEOTAPE":                                        80,
		"DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_LARGECASSETTE":                       81,
		"DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_MEDIUMCASSETTE":                      82,
		"DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_SMALLCASSETTE":                       83,
		"DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_EXTRALARGECASSETTE":                  84,
		"DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_LARGECASSETTE":                       85,
		"DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM":  86,
		"DATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM":  87,
		"DATA_CARRIER_TYPE_DVD_PLUS_RWREWRITABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM": 88,
		"DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM":        89,
		"DATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM":        90,
		"DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKDOUBLESIDED":                       91,
		"DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKSINGLESIDED":                       92,
		"DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_LARGECASSETTE":                 93,
		"DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_SMALLCASSETTE":                 94,
		"DATA_CARRIER_TYPE_DIGITALAUDIOTAPE":                                             95,
		"DATA_CARRIER_TYPE_DIGITALCOMPACTCASSETTE":                                       96,
		"DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_COMPACTCASSETTE":                     97,
		"DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_STANDARDCASSETTE":                    98,
		"DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH":        99,
		"DATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH":       100,
		"DATA_CARRIER_TYPE_ENVELOPE":                                                     101,
		"DATA_CARRIER_TYPE_EXABYTE8500SERIESDIGITALDATATAPE":                             102,
		"DATA_CARRIER_TYPE_EXABYTE8700SERIESDIGITALDATATAPE":                             103,
		"DATA_CARRIER_TYPE_EXABYTE8900SERIESDIGITALDATATAPE":                             104,
		"DATA_CARRIER_TYPE_EXABYTEMAMMOTHDIGITALDATATAPE":                                105,
		"DATA_CARRIER_TYPE_FILESYSTEM":                                                   106,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH":            107,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH":            108,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH":            109,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH":            110,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH":             111,
		"DATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE":   112,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_12CM":       113,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_8CM":        114,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_12CM":       115,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_8CM":        116,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM":       117,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_8CM":        118,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM":       119,
		"DATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_8CM":        120,
		"DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_LARGECASSETTE":                        121,
		"DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_SMALLCASSETTE":                        122,
		"DATA_CARRIER_TYPE_HDCAMDIGITALVIDEOTAPE":                                        123,
		"DATA_CARRIER_TYPE_HDVHDTVDIGITALVIDEOTAPE":                                      124,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB2_0INTERFACE":                        125,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB3_0INTERFACE":                        126,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSBINTERFACE":                           127,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIREINTERFACE":                      128,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE":                  129,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":                   130,
		"DATA_CARRIER_TYPE_HARDDISKDRIVE_UNSPECIFIEDINTERFACE":                           131,
		"DATA_CARRIER_TYPE_HI_8ANALOGVIDEOTAPE":                                          132,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE":                  133,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE":                  134,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSBINTERFACE":                     135,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE":                136,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE":            137,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USB_SATAINTERFACE":       138,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":             139,
		"DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE":             140,
		"DATA_CARRIER_TYPE_JAZDIGITALDATADISK":                                           141,
		"DATA_CARRIER_TYPE_LTO_1ULTRIUMDIGITALDATATAPE":                                  142,
		"DATA_CARRIER_TYPE_LTO_2ULTRIUMDIGITALDATATAPE":                                  143,
		"DATA_CARRIER_TYPE_LTO_3ULTRIUMDIGITALDATATAPE":                                  144,
		"DATA_CARRIER_TYPE_LTO_4ULTRIUMDIGITALDATATAPE":                                  145,
		"DATA_CARRIER_TYPE_LTO_5ULTRIUMDIGITALDATATAPE":                                  146,
		"DATA_CARRIER_TYPE_LTO_6ULTRIUMDIGITALDATATAPE":                                  147,
		"DATA_CARRIER_TYPE_LTO_7ULTRIUMDIGITALDATATAPE":                                  148,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_10INCH":                      149,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_12INCH":                      150,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_14INCH":                      151,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_16INCH":                      152,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_7INCH":                       153,
		"DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE":             154,
		"DATA_CARRIER_TYPE_LASERDISCOPTICALDISKSINGLESIDED":                              155,
		"DATA_CARRIER_TYPE_MINIDISK":                                                     156,
		"DATA_CARRIER_TYPE_MODISK_1_3GB":                                                 157,
		"DATA_CARRIER_TYPE_MODISK_1200MB":                                                158,
		"DATA_CARRIER_TYPE_MODISK_2_6GB":                                                 159,
		"DATA_CARRIER_TYPE_MODISK_540MB":                                                 160,
		"DATA_CARRIER_TYPE_MODISK_650MB":                                                 161,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH":            162,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH":            163,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH":            164,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH":            165,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH":             166,
		"DATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE":   167,
		"DATA_CARRIER_TYPE_PREMASTERCD":                                                  168,
		"DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE":                   169,
		"DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE":                   170,
		"DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE":                 171,
		"DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":              172,
		"DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE":              173,
		"DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_COMPACTCASSETTE":                         174,
		"DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_STANDARDCASSETTE":                        175,
		"DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE":                     176,
		"DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":              177,
		"DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE":              178,
		"DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL50PININTERFACE":                   179,
		"DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL68PININTERFACE":                   180,
		"DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALCENTRONIXINTERFACE":               181,
		"DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE":                    182,
		"DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":             183,
		"DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL50PININTERFACE":               184,
		"DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL68PININTERFACE":               185,
		"DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL80PININTERFACE":               186,
		"DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE":         187,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_10INCH":                      188,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_12INCH":                      189,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_14INCH":                      190,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_16INCH":                      191,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_7INCH":                       192,
		"DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE":             193,
		"DATA_CARRIER_TYPE_SINGLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH":        194,
		"DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH":        195,
		"DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH":       196,
		"DATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_8INCH":          197,
		"DATA_CARRIER_TYPE_SOLIDSTATEMEMORYSTORAGECARDS":                                 198,
		"DATA_CARRIER_TYPE_STORAGEBOX_1_2CUBICFEET":                                      199,
		"DATA_CARRIER_TYPE_STORAGEBOX_2_0CUBICFEET":                                      200,
		"DATA_CARRIER_TYPE_STORAGEBOX":                                                   201,
		"DATA_CARRIER_TYPE_STORAGECONTAINER_1_2CUBICFEET":                                202,
		"DATA_CARRIER_TYPE_STORAGECONTAINER_2_0CUBICFEET":                                203,
		"DATA_CARRIER_TYPE_STORAGECONTAINER":                                             204,
		"DATA_CARRIER_TYPE_SUPER16MMPICTUREANALOGVIDEOFILMREEL":                          205,
		"DATA_CARRIER_TYPE_SUPER8MMPICTUREANALOGVIDEOFILMREEL":                           206,
		"DATA_CARRIER_TYPE_UMATICSPANALOGVIDEOTAPE_SMALLCASSETTE":                        207,
		"DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_LARGECASSETTE":                          208,
		"DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_SMALLCASSETTE":                          209,
		"DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_COMPACTCASSETTE":                           210,
		"DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_STANDARDCASSETTE":                          211,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_10INCH":                        212,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_12INCH":                        213,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_14INCH":                        214,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_16INCH":                        215,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_7INCH":                         216,
		"DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE":               217,
		"DATA_CARRIER_TYPE_VXA_1DIGITALDATATAPE":                                         218,
		"DATA_CARRIER_TYPE_VXA_2DIGITALDATATAPE":                                         219,
		"DATA_CARRIER_TYPE_VXA_3DIGITALDATATAPE":                                         220,
		"DATA_CARRIER_TYPE_WAXCYLINDERPHONOGRAMANALOGAUDIODISK":                          221,
		"DATA_CARRIER_TYPE_XDCAMREWRITABLEOPTICALDISK":                                   222,
		"DATA_CARRIER_TYPE_ZIPDIGITALDATADISK":                                           223,
	}
)

func (x DataCarrierType) Enum() *DataCarrierType {
	p := new(DataCarrierType)
	*p = x
	return p
}

func (x DataCarrierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataCarrierType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[55].Descriptor()
}

func (DataCarrierType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[55]
}

func (x DataCarrierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataCarrierType.Descriptor instead.
func (DataCarrierType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{55}
}

type DdexTerritoryCode int32

const (
	DdexTerritoryCode_DDEX_TERRITORY_CODE_UNSPECIFIED DdexTerritoryCode = 0
	DdexTerritoryCode_DDEX_TERRITORY_CODE_XK          DdexTerritoryCode = 1
	DdexTerritoryCode_DDEX_TERRITORY_CODE_WORLDWIDE   DdexTerritoryCode = 2
)

// Enum value maps for DdexTerritoryCode.
var (
	DdexTerritoryCode_name = map[int32]string{
		0: "DDEX_TERRITORY_CODE_UNSPECIFIED",
		1: "DDEX_TERRITORY_CODE_XK",
		2: "DDEX_TERRITORY_CODE_WORLDWIDE",
	}
	DdexTerritoryCode_value = map[string]int32{
		"DDEX_TERRITORY_CODE_UNSPECIFIED": 0,
		"DDEX_TERRITORY_CODE_XK":          1,
		"DDEX_TERRITORY_CODE_WORLDWIDE":   2,
	}
)

func (x DdexTerritoryCode) Enum() *DdexTerritoryCode {
	p := new(DdexTerritoryCode)
	*p = x
	return p
}

func (x DdexTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DdexTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[56].Descriptor()
}

func (DdexTerritoryCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[56]
}

func (x DdexTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DdexTerritoryCode.Descriptor instead.
func (DdexTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{56}
}

type DdexTerritoryCodeNoWorldwide int32

const (
	DdexTerritoryCodeNoWorldwide_DDEX_TERRITORY_CODE_NO_WORLDWIDE_UNSPECIFIED DdexTerritoryCodeNoWorldwide = 0
	DdexTerritoryCodeNoWorldwide_DDEX_TERRITORY_CODE_NO_WORLDWIDE_XK          DdexTerritoryCodeNoWorldwide = 1
)

// Enum value maps for DdexTerritoryCodeNoWorldwide.
var (
	DdexTerritoryCodeNoWorldwide_name = map[int32]string{
		0: "DDEX_TERRITORY_CODE_NO_WORLDWIDE_UNSPECIFIED",
		1: "DDEX_TERRITORY_CODE_NO_WORLDWIDE_XK",
	}
	DdexTerritoryCodeNoWorldwide_value = map[string]int32{
		"DDEX_TERRITORY_CODE_NO_WORLDWIDE_UNSPECIFIED": 0,
		"DDEX_TERRITORY_CODE_NO_WORLDWIDE_XK":          1,
	}
)

func (x DdexTerritoryCodeNoWorldwide) Enum() *DdexTerritoryCodeNoWorldwide {
	p := new(DdexTerritoryCodeNoWorldwide)
	*p = x
	return p
}

func (x DdexTerritoryCodeNoWorldwide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DdexTerritoryCodeNoWorldwide) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[57].Descriptor()
}

func (DdexTerritoryCodeNoWorldwide) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[57]
}

func (x DdexTerritoryCodeNoWorldwide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DdexTerritoryCodeNoWorldwide.Descriptor instead.
func (DdexTerritoryCodeNoWorldwide) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{57}
}

type DeliveryFileType int32

const (
	DeliveryFileType_DELIVERY_FILE_TYPE_UNSPECIFIED          DeliveryFileType = 0
	DeliveryFileType_DELIVERY_FILE_TYPE_AUDIOFILE            DeliveryFileType = 1
	DeliveryFileType_DELIVERY_FILE_TYPE_AUDIOVISUALFILE      DeliveryFileType = 2
	DeliveryFileType_DELIVERY_FILE_TYPE_COLORINFORMATIONFILE DeliveryFileType = 3
	DeliveryFileType_DELIVERY_FILE_TYPE_VISUALFILE           DeliveryFileType = 4
)

// Enum value maps for DeliveryFileType.
var (
	DeliveryFileType_name = map[int32]string{
		0: "DELIVERY_FILE_TYPE_UNSPECIFIED",
		1: "DELIVERY_FILE_TYPE_AUDIOFILE",
		2: "DELIVERY_FILE_TYPE_AUDIOVISUALFILE",
		3: "DELIVERY_FILE_TYPE_COLORINFORMATIONFILE",
		4: "DELIVERY_FILE_TYPE_VISUALFILE",
	}
	DeliveryFileType_value = map[string]int32{
		"DELIVERY_FILE_TYPE_UNSPECIFIED":          0,
		"DELIVERY_FILE_TYPE_AUDIOFILE":            1,
		"DELIVERY_FILE_TYPE_AUDIOVISUALFILE":      2,
		"DELIVERY_FILE_TYPE_COLORINFORMATIONFILE": 3,
		"DELIVERY_FILE_TYPE_VISUALFILE":           4,
	}
)

func (x DeliveryFileType) Enum() *DeliveryFileType {
	p := new(DeliveryFileType)
	*p = x
	return p
}

func (x DeliveryFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[58].Descriptor()
}

func (DeliveryFileType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[58]
}

func (x DeliveryFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryFileType.Descriptor instead.
func (DeliveryFileType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{58}
}

type DeprecatedCurrencyCode int32

const (
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_UNSPECIFIED DeprecatedCurrencyCode = 0
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_ANG         DeprecatedCurrencyCode = 1
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_CUC         DeprecatedCurrencyCode = 2
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_CYP         DeprecatedCurrencyCode = 3
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_EEK         DeprecatedCurrencyCode = 4
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_HRK         DeprecatedCurrencyCode = 5
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_LTL         DeprecatedCurrencyCode = 6
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_LVL         DeprecatedCurrencyCode = 7
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_MTL         DeprecatedCurrencyCode = 8
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_MRO         DeprecatedCurrencyCode = 9
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_ROL         DeprecatedCurrencyCode = 10
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_SIT         DeprecatedCurrencyCode = 11
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_SKK         DeprecatedCurrencyCode = 12
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_SLL         DeprecatedCurrencyCode = 13
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_STD         DeprecatedCurrencyCode = 14
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_VEF         DeprecatedCurrencyCode = 15
	DeprecatedCurrencyCode_DEPRECATED_CURRENCY_CODE_ZWL         DeprecatedCurrencyCode = 16
)

// Enum value maps for DeprecatedCurrencyCode.
var (
	DeprecatedCurrencyCode_name = map[int32]string{
		0:  "DEPRECATED_CURRENCY_CODE_UNSPECIFIED",
		1:  "DEPRECATED_CURRENCY_CODE_ANG",
		2:  "DEPRECATED_CURRENCY_CODE_CUC",
		3:  "DEPRECATED_CURRENCY_CODE_CYP",
		4:  "DEPRECATED_CURRENCY_CODE_EEK",
		5:  "DEPRECATED_CURRENCY_CODE_HRK",
		6:  "DEPRECATED_CURRENCY_CODE_LTL",
		7:  "DEPRECATED_CURRENCY_CODE_LVL",
		8:  "DEPRECATED_CURRENCY_CODE_MTL",
		9:  "DEPRECATED_CURRENCY_CODE_MRO",
		10: "DEPRECATED_CURRENCY_CODE_ROL",
		11: "DEPRECATED_CURRENCY_CODE_SIT",
		12: "DEPRECATED_CURRENCY_CODE_SKK",
		13: "DEPRECATED_CURRENCY_CODE_SLL",
		14: "DEPRECATED_CURRENCY_CODE_STD",
		15: "DEPRECATED_CURRENCY_CODE_VEF",
		16: "DEPRECATED_CURRENCY_CODE_ZWL",
	}
	DeprecatedCurrencyCode_value = map[string]int32{
		"DEPRECATED_CURRENCY_CODE_UNSPECIFIED": 0,
		"DEPRECATED_CURRENCY_CODE_ANG":         1,
		"DEPRECATED_CURRENCY_CODE_CUC":         2,
		"DEPRECATED_CURRENCY_CODE_CYP":         3,
		"DEPRECATED_CURRENCY_CODE_EEK":         4,
		"DEPRECATED_CURRENCY_CODE_HRK":         5,
		"DEPRECATED_CURRENCY_CODE_LTL":         6,
		"DEPRECATED_CURRENCY_CODE_LVL":         7,
		"DEPRECATED_CURRENCY_CODE_MTL":         8,
		"DEPRECATED_CURRENCY_CODE_MRO":         9,
		"DEPRECATED_CURRENCY_CODE_ROL":         10,
		"DEPRECATED_CURRENCY_CODE_SIT":         11,
		"DEPRECATED_CURRENCY_CODE_SKK":         12,
		"DEPRECATED_CURRENCY_CODE_SLL":         13,
		"DEPRECATED_CURRENCY_CODE_STD":         14,
		"DEPRECATED_CURRENCY_CODE_VEF":         15,
		"DEPRECATED_CURRENCY_CODE_ZWL":         16,
	}
)

func (x DeprecatedCurrencyCode) Enum() *DeprecatedCurrencyCode {
	p := new(DeprecatedCurrencyCode)
	*p = x
	return p
}

func (x DeprecatedCurrencyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedCurrencyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[59].Descriptor()
}

func (DeprecatedCurrencyCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[59]
}

func (x DeprecatedCurrencyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeprecatedCurrencyCode.Descriptor instead.
func (DeprecatedCurrencyCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{59}
}

type DeprecatedIsoTerritoryCode int32

const (
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED DeprecatedIsoTerritoryCode = 0
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_AIDJ        DeprecatedIsoTerritoryCode = 1
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_ANHH        DeprecatedIsoTerritoryCode = 2
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_BQAQ        DeprecatedIsoTerritoryCode = 3
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_BUMM        DeprecatedIsoTerritoryCode = 4
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_BYAA        DeprecatedIsoTerritoryCode = 5
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_CSHH        DeprecatedIsoTerritoryCode = 6
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_CSXX        DeprecatedIsoTerritoryCode = 7
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_CTKI        DeprecatedIsoTerritoryCode = 8
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_DDDE        DeprecatedIsoTerritoryCode = 9
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_DYBJ        DeprecatedIsoTerritoryCode = 10
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_FQHH        DeprecatedIsoTerritoryCode = 11
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_FXFR        DeprecatedIsoTerritoryCode = 12
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_GEHH        DeprecatedIsoTerritoryCode = 13
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_HVBF        DeprecatedIsoTerritoryCode = 14
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_JTUM        DeprecatedIsoTerritoryCode = 15
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_MIUM        DeprecatedIsoTerritoryCode = 16
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_NHVU        DeprecatedIsoTerritoryCode = 17
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_NQAQ        DeprecatedIsoTerritoryCode = 18
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_NTHH        DeprecatedIsoTerritoryCode = 19
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_PCHH        DeprecatedIsoTerritoryCode = 20
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_PUUM        DeprecatedIsoTerritoryCode = 21
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_PZPA        DeprecatedIsoTerritoryCode = 22
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_RHZW        DeprecatedIsoTerritoryCode = 23
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_SKIN        DeprecatedIsoTerritoryCode = 24
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_SUHH        DeprecatedIsoTerritoryCode = 25
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_TPTL        DeprecatedIsoTerritoryCode = 26
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_VDVN        DeprecatedIsoTerritoryCode = 27
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_WKUM        DeprecatedIsoTerritoryCode = 28
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_YDYE        DeprecatedIsoTerritoryCode = 29
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_YUCS        DeprecatedIsoTerritoryCode = 30
	DeprecatedIsoTerritoryCode_DEPRECATED_ISO_TERRITORY_CODE_ZRCD        DeprecatedIsoTerritoryCode = 31
)

// Enum value maps for DeprecatedIsoTerritoryCode.
var (
	DeprecatedIsoTerritoryCode_name = map[int32]string{
		0:  "DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED",
		1:  "DEPRECATED_ISO_TERRITORY_CODE_AIDJ",
		2:  "DEPRECATED_ISO_TERRITORY_CODE_ANHH",
		3:  "DEPRECATED_ISO_TERRITORY_CODE_BQAQ",
		4:  "DEPRECATED_ISO_TERRITORY_CODE_BUMM",
		5:  "DEPRECATED_ISO_TERRITORY_CODE_BYAA",
		6:  "DEPRECATED_ISO_TERRITORY_CODE_CSHH",
		7:  "DEPRECATED_ISO_TERRITORY_CODE_CSXX",
		8:  "DEPRECATED_ISO_TERRITORY_CODE_CTKI",
		9:  "DEPRECATED_ISO_TERRITORY_CODE_DDDE",
		10: "DEPRECATED_ISO_TERRITORY_CODE_DYBJ",
		11: "DEPRECATED_ISO_TERRITORY_CODE_FQHH",
		12: "DEPRECATED_ISO_TERRITORY_CODE_FXFR",
		13: "DEPRECATED_ISO_TERRITORY_CODE_GEHH",
		14: "DEPRECATED_ISO_TERRITORY_CODE_HVBF",
		15: "DEPRECATED_ISO_TERRITORY_CODE_JTUM",
		16: "DEPRECATED_ISO_TERRITORY_CODE_MIUM",
		17: "DEPRECATED_ISO_TERRITORY_CODE_NHVU",
		18: "DEPRECATED_ISO_TERRITORY_CODE_NQAQ",
		19: "DEPRECATED_ISO_TERRITORY_CODE_NTHH",
		20: "DEPRECATED_ISO_TERRITORY_CODE_PCHH",
		21: "DEPRECATED_ISO_TERRITORY_CODE_PUUM",
		22: "DEPRECATED_ISO_TERRITORY_CODE_PZPA",
		23: "DEPRECATED_ISO_TERRITORY_CODE_RHZW",
		24: "DEPRECATED_ISO_TERRITORY_CODE_SKIN",
		25: "DEPRECATED_ISO_TERRITORY_CODE_SUHH",
		26: "DEPRECATED_ISO_TERRITORY_CODE_TPTL",
		27: "DEPRECATED_ISO_TERRITORY_CODE_VDVN",
		28: "DEPRECATED_ISO_TERRITORY_CODE_WKUM",
		29: "DEPRECATED_ISO_TERRITORY_CODE_YDYE",
		30: "DEPRECATED_ISO_TERRITORY_CODE_YUCS",
		31: "DEPRECATED_ISO_TERRITORY_CODE_ZRCD",
	}
	DeprecatedIsoTerritoryCode_value = map[string]int32{
		"DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED": 0,
		"DEPRECATED_ISO_TERRITORY_CODE_AIDJ":        1,
		"DEPRECATED_ISO_TERRITORY_CODE_ANHH":        2,
		"DEPRECATED_ISO_TERRITORY_CODE_BQAQ":        3,
		"DEPRECATED_ISO_TERRITORY_CODE_BUMM":        4,
		"DEPRECATED_ISO_TERRITORY_CODE_BYAA":        5,
		"DEPRECATED_ISO_TERRITORY_CODE_CSHH":        6,
		"DEPRECATED_ISO_TERRITORY_CODE_CSXX":        7,
		"DEPRECATED_ISO_TERRITORY_CODE_CTKI":        8,
		"DEPRECATED_ISO_TERRITORY_CODE_DDDE":        9,
		"DEPRECATED_ISO_TERRITORY_CODE_DYBJ":        10,
		"DEPRECATED_ISO_TERRITORY_CODE_FQHH":        11,
		"DEPRECATED_ISO_TERRITORY_CODE_FXFR":        12,
		"DEPRECATED_ISO_TERRITORY_CODE_GEHH":        13,
		"DEPRECATED_ISO_TERRITORY_CODE_HVBF":        14,
		"DEPRECATED_ISO_TERRITORY_CODE_JTUM":        15,
		"DEPRECATED_ISO_TERRITORY_CODE_MIUM":        16,
		"DEPRECATED_ISO_TERRITORY_CODE_NHVU":        17,
		"DEPRECATED_ISO_TERRITORY_CODE_NQAQ":        18,
		"DEPRECATED_ISO_TERRITORY_CODE_NTHH":        19,
		"DEPRECATED_ISO_TERRITORY_CODE_PCHH":        20,
		"DEPRECATED_ISO_TERRITORY_CODE_PUUM":        21,
		"DEPRECATED_ISO_TERRITORY_CODE_PZPA":        22,
		"DEPRECATED_ISO_TERRITORY_CODE_RHZW":        23,
		"DEPRECATED_ISO_TERRITORY_CODE_SKIN":        24,
		"DEPRECATED_ISO_TERRITORY_CODE_SUHH":        25,
		"DEPRECATED_ISO_TERRITORY_CODE_TPTL":        26,
		"DEPRECATED_ISO_TERRITORY_CODE_VDVN":        27,
		"DEPRECATED_ISO_TERRITORY_CODE_WKUM":        28,
		"DEPRECATED_ISO_TERRITORY_CODE_YDYE":        29,
		"DEPRECATED_ISO_TERRITORY_CODE_YUCS":        30,
		"DEPRECATED_ISO_TERRITORY_CODE_ZRCD":        31,
	}
)

func (x DeprecatedIsoTerritoryCode) Enum() *DeprecatedIsoTerritoryCode {
	p := new(DeprecatedIsoTerritoryCode)
	*p = x
	return p
}

func (x DeprecatedIsoTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedIsoTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[60].Descriptor()
}

func (DeprecatedIsoTerritoryCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[60]
}

func (x DeprecatedIsoTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeprecatedIsoTerritoryCode.Descriptor instead.
func (DeprecatedIsoTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{60}
}

type DeprecatedReleaseType int32

const (
	DeprecatedReleaseType_DEPRECATED_RELEASE_TYPE_UNSPECIFIED  DeprecatedReleaseType = 0
	DeprecatedReleaseType_DEPRECATED_RELEASE_TYPE_TRACKRELEASE DeprecatedReleaseType = 1
)

// Enum value maps for DeprecatedReleaseType.
var (
	DeprecatedReleaseType_name = map[int32]string{
		0: "DEPRECATED_RELEASE_TYPE_UNSPECIFIED",
		1: "DEPRECATED_RELEASE_TYPE_TRACKRELEASE",
	}
	DeprecatedReleaseType_value = map[string]int32{
		"DEPRECATED_RELEASE_TYPE_UNSPECIFIED":  0,
		"DEPRECATED_RELEASE_TYPE_TRACKRELEASE": 1,
	}
)

func (x DeprecatedReleaseType) Enum() *DeprecatedReleaseType {
	p := new(DeprecatedReleaseType)
	*p = x
	return p
}

func (x DeprecatedReleaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeprecatedReleaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[61].Descriptor()
}

func (DeprecatedReleaseType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[61]
}

func (x DeprecatedReleaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeprecatedReleaseType.Descriptor instead.
func (DeprecatedReleaseType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{61}
}

type DigitizationMode int32

const (
	DigitizationMode_DIGITIZATION_MODE_UNSPECIFIED DigitizationMode = 0
	DigitizationMode_DIGITIZATION_MODE_AAD         DigitizationMode = 1
	DigitizationMode_DIGITIZATION_MODE_ADD         DigitizationMode = 2
	DigitizationMode_DIGITIZATION_MODE_DDD         DigitizationMode = 3
	DigitizationMode_DIGITIZATION_MODE_UNKNOWN     DigitizationMode = 4
)

// Enum value maps for DigitizationMode.
var (
	DigitizationMode_name = map[int32]string{
		0: "DIGITIZATION_MODE_UNSPECIFIED",
		1: "DIGITIZATION_MODE_AAD",
		2: "DIGITIZATION_MODE_ADD",
		3: "DIGITIZATION_MODE_DDD",
		4: "DIGITIZATION_MODE_UNKNOWN",
	}
	DigitizationMode_value = map[string]int32{
		"DIGITIZATION_MODE_UNSPECIFIED": 0,
		"DIGITIZATION_MODE_AAD":         1,
		"DIGITIZATION_MODE_ADD":         2,
		"DIGITIZATION_MODE_DDD":         3,
		"DIGITIZATION_MODE_UNKNOWN":     4,
	}
)

func (x DigitizationMode) Enum() *DigitizationMode {
	p := new(DigitizationMode)
	*p = x
	return p
}

func (x DigitizationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitizationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[62].Descriptor()
}

func (DigitizationMode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[62]
}

func (x DigitizationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitizationMode.Descriptor instead.
func (DigitizationMode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{62}
}

type DiscrepancyType int32

const (
	DiscrepancyType_DISCREPANCY_TYPE_UNSPECIFIED                       DiscrepancyType = 0
	DiscrepancyType_DISCREPANCY_TYPE_CALCULATIONERROR                  DiscrepancyType = 1
	DiscrepancyType_DISCREPANCY_TYPE_DUPLICATEDCLAIMINMESSAGE          DiscrepancyType = 2
	DiscrepancyType_DISCREPANCY_TYPE_CLAIMBASIS                        DiscrepancyType = 3
	DiscrepancyType_DISCREPANCY_TYPE_ORIGINALLYSTATEDCLAIMDOESNOTMATCH DiscrepancyType = 4
	DiscrepancyType_DISCREPANCY_TYPE_OVERCLAIM                         DiscrepancyType = 5
	DiscrepancyType_DISCREPANCY_TYPE_OVERCLAIMBYSAMELICENSOR           DiscrepancyType = 6
	DiscrepancyType_DISCREPANCY_TYPE_PREVIOUSLYINVOICED                DiscrepancyType = 7
	DiscrepancyType_DISCREPANCY_TYPE_SALESDATAINCORRECT                DiscrepancyType = 8
	DiscrepancyType_DISCREPANCY_TYPE_USERDEFINED                       DiscrepancyType = 9
)

// Enum value maps for DiscrepancyType.
var (
	DiscrepancyType_name = map[int32]string{
		0: "DISCREPANCY_TYPE_UNSPECIFIED",
		1: "DISCREPANCY_TYPE_CALCULATIONERROR",
		2: "DISCREPANCY_TYPE_DUPLICATEDCLAIMINMESSAGE",
		3: "DISCREPANCY_TYPE_CLAIMBASIS",
		4: "DISCREPANCY_TYPE_ORIGINALLYSTATEDCLAIMDOESNOTMATCH",
		5: "DISCREPANCY_TYPE_OVERCLAIM",
		6: "DISCREPANCY_TYPE_OVERCLAIMBYSAMELICENSOR",
		7: "DISCREPANCY_TYPE_PREVIOUSLYINVOICED",
		8: "DISCREPANCY_TYPE_SALESDATAINCORRECT",
		9: "DISCREPANCY_TYPE_USERDEFINED",
	}
	DiscrepancyType_value = map[string]int32{
		"DISCREPANCY_TYPE_UNSPECIFIED":                       0,
		"DISCREPANCY_TYPE_CALCULATIONERROR":                  1,
		"DISCREPANCY_TYPE_DUPLICATEDCLAIMINMESSAGE":          2,
		"DISCREPANCY_TYPE_CLAIMBASIS":                        3,
		"DISCREPANCY_TYPE_ORIGINALLYSTATEDCLAIMDOESNOTMATCH": 4,
		"DISCREPANCY_TYPE_OVERCLAIM":                         5,
		"DISCREPANCY_TYPE_OVERCLAIMBYSAMELICENSOR":           6,
		"DISCREPANCY_TYPE_PREVIOUSLYINVOICED":                7,
		"DISCREPANCY_TYPE_SALESDATAINCORRECT":                8,
		"DISCREPANCY_TYPE_USERDEFINED":                       9,
	}
)

func (x DiscrepancyType) Enum() *DiscrepancyType {
	p := new(DiscrepancyType)
	*p = x
	return p
}

func (x DiscrepancyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscrepancyType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[63].Descriptor()
}

func (DiscrepancyType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[63]
}

func (x DiscrepancyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscrepancyType.Descriptor instead.
func (DiscrepancyType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{63}
}

type DisplayArtistRole int32

const (
	DisplayArtistRole_DISPLAY_ARTIST_ROLE_UNSPECIFIED    DisplayArtistRole = 0
	DisplayArtistRole_DISPLAY_ARTIST_ROLE_ARTIST         DisplayArtistRole = 1
	DisplayArtistRole_DISPLAY_ARTIST_ROLE_BRAND          DisplayArtistRole = 2
	DisplayArtistRole_DISPLAY_ARTIST_ROLE_COMPOSER       DisplayArtistRole = 3
	DisplayArtistRole_DISPLAY_ARTIST_ROLE_FEATUREDARTIST DisplayArtistRole = 4
	DisplayArtistRole_DISPLAY_ARTIST_ROLE_MAINARTIST     DisplayArtistRole = 5
	DisplayArtistRole_DISPLAY_ARTIST_ROLE_USERDEFINED    DisplayArtistRole = 6
)

// Enum value maps for DisplayArtistRole.
var (
	DisplayArtistRole_name = map[int32]string{
		0: "DISPLAY_ARTIST_ROLE_UNSPECIFIED",
		1: "DISPLAY_ARTIST_ROLE_ARTIST",
		2: "DISPLAY_ARTIST_ROLE_BRAND",
		3: "DISPLAY_ARTIST_ROLE_COMPOSER",
		4: "DISPLAY_ARTIST_ROLE_FEATUREDARTIST",
		5: "DISPLAY_ARTIST_ROLE_MAINARTIST",
		6: "DISPLAY_ARTIST_ROLE_USERDEFINED",
	}
	DisplayArtistRole_value = map[string]int32{
		"DISPLAY_ARTIST_ROLE_UNSPECIFIED":    0,
		"DISPLAY_ARTIST_ROLE_ARTIST":         1,
		"DISPLAY_ARTIST_ROLE_BRAND":          2,
		"DISPLAY_ARTIST_ROLE_COMPOSER":       3,
		"DISPLAY_ARTIST_ROLE_FEATUREDARTIST": 4,
		"DISPLAY_ARTIST_ROLE_MAINARTIST":     5,
		"DISPLAY_ARTIST_ROLE_USERDEFINED":    6,
	}
)

func (x DisplayArtistRole) Enum() *DisplayArtistRole {
	p := new(DisplayArtistRole)
	*p = x
	return p
}

func (x DisplayArtistRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayArtistRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[64].Descriptor()
}

func (DisplayArtistRole) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[64]
}

func (x DisplayArtistRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisplayArtistRole.Descriptor instead.
func (DisplayArtistRole) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{64}
}

type DisplayArtistRoleRDR int32

const (
	DisplayArtistRoleRDR_DISPLAY_ARTIST_ROLE_R_D_R_UNSPECIFIED    DisplayArtistRoleRDR = 0
	DisplayArtistRoleRDR_DISPLAY_ARTIST_ROLE_R_D_R_ARTIST         DisplayArtistRoleRDR = 1
	DisplayArtistRoleRDR_DISPLAY_ARTIST_ROLE_R_D_R_BRAND          DisplayArtistRoleRDR = 2
	DisplayArtistRoleRDR_DISPLAY_ARTIST_ROLE_R_D_R_COMPOSER       DisplayArtistRoleRDR = 3
	DisplayArtistRoleRDR_DISPLAY_ARTIST_ROLE_R_D_R_CONDUCTOR      DisplayArtistRoleRDR = 4
	DisplayArtistRoleRDR_DISPLAY_ARTIST_ROLE_R_D_R_FEATUREDARTIST DisplayArtistRoleRDR = 5
	DisplayArtistRoleRDR_DISPLAY_ARTIST_ROLE_R_D_R_MAINARTIST     DisplayArtistRoleRDR = 6
	DisplayArtistRoleRDR_DISPLAY_ARTIST_ROLE_R_D_R_USERDEFINED    DisplayArtistRoleRDR = 7
)

// Enum value maps for DisplayArtistRoleRDR.
var (
	DisplayArtistRoleRDR_name = map[int32]string{
		0: "DISPLAY_ARTIST_ROLE_R_D_R_UNSPECIFIED",
		1: "DISPLAY_ARTIST_ROLE_R_D_R_ARTIST",
		2: "DISPLAY_ARTIST_ROLE_R_D_R_BRAND",
		3: "DISPLAY_ARTIST_ROLE_R_D_R_COMPOSER",
		4: "DISPLAY_ARTIST_ROLE_R_D_R_CONDUCTOR",
		5: "DISPLAY_ARTIST_ROLE_R_D_R_FEATUREDARTIST",
		6: "DISPLAY_ARTIST_ROLE_R_D_R_MAINARTIST",
		7: "DISPLAY_ARTIST_ROLE_R_D_R_USERDEFINED",
	}
	DisplayArtistRoleRDR_value = map[string]int32{
		"DISPLAY_ARTIST_ROLE_R_D_R_UNSPECIFIED":    0,
		"DISPLAY_ARTIST_ROLE_R_D_R_ARTIST":         1,
		"DISPLAY_ARTIST_ROLE_R_D_R_BRAND":          2,
		"DISPLAY_ARTIST_ROLE_R_D_R_COMPOSER":       3,
		"DISPLAY_ARTIST_ROLE_R_D_R_CONDUCTOR":      4,
		"DISPLAY_ARTIST_ROLE_R_D_R_FEATUREDARTIST": 5,
		"DISPLAY_ARTIST_ROLE_R_D_R_MAINARTIST":     6,
		"DISPLAY_ARTIST_ROLE_R_D_R_USERDEFINED":    7,
	}
)

func (x DisplayArtistRoleRDR) Enum() *DisplayArtistRoleRDR {
	p := new(DisplayArtistRoleRDR)
	*p = x
	return p
}

func (x DisplayArtistRoleRDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayArtistRoleRDR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[65].Descriptor()
}

func (DisplayArtistRoleRDR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[65]
}

func (x DisplayArtistRoleRDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisplayArtistRoleRDR.Descriptor instead.
func (DisplayArtistRoleRDR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{65}
}

type DistributionChannelType int32

const (
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED       DistributionChannelType = 0
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT     DistributionChannelType = 1
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_BROADCAST         DistributionChannelType = 2
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_CABLE             DistributionChannelType = 3
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_INTERNET          DistributionChannelType = 4
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE DistributionChannelType = 5
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_IPTV              DistributionChannelType = 6
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE   DistributionChannelType = 7
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_NARROWCAST        DistributionChannelType = 8
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM    DistributionChannelType = 9
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER        DistributionChannelType = 10
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_PHYSICAL          DistributionChannelType = 11
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_SATELLITE         DistributionChannelType = 12
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_SIMULCAST         DistributionChannelType = 13
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_UNKNOWN           DistributionChannelType = 14
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_USERDEFINED       DistributionChannelType = 15
	DistributionChannelType_DISTRIBUTION_CHANNEL_TYPE_WEBCAST           DistributionChannelType = 16
)

// Enum value maps for DistributionChannelType.
var (
	DistributionChannelType_name = map[int32]string{
		0:  "DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED",
		1:  "DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT",
		2:  "DISTRIBUTION_CHANNEL_TYPE_BROADCAST",
		3:  "DISTRIBUTION_CHANNEL_TYPE_CABLE",
		4:  "DISTRIBUTION_CHANNEL_TYPE_INTERNET",
		5:  "DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE",
		6:  "DISTRIBUTION_CHANNEL_TYPE_IPTV",
		7:  "DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE",
		8:  "DISTRIBUTION_CHANNEL_TYPE_NARROWCAST",
		9:  "DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM",
		10: "DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER",
		11: "DISTRIBUTION_CHANNEL_TYPE_PHYSICAL",
		12: "DISTRIBUTION_CHANNEL_TYPE_SATELLITE",
		13: "DISTRIBUTION_CHANNEL_TYPE_SIMULCAST",
		14: "DISTRIBUTION_CHANNEL_TYPE_UNKNOWN",
		15: "DISTRIBUTION_CHANNEL_TYPE_USERDEFINED",
		16: "DISTRIBUTION_CHANNEL_TYPE_WEBCAST",
	}
	DistributionChannelType_value = map[string]int32{
		"DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED":       0,
		"DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT":     1,
		"DISTRIBUTION_CHANNEL_TYPE_BROADCAST":         2,
		"DISTRIBUTION_CHANNEL_TYPE_CABLE":             3,
		"DISTRIBUTION_CHANNEL_TYPE_INTERNET":          4,
		"DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE": 5,
		"DISTRIBUTION_CHANNEL_TYPE_IPTV":              6,
		"DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE":   7,
		"DISTRIBUTION_CHANNEL_TYPE_NARROWCAST":        8,
		"DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM":    9,
		"DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER":        10,
		"DISTRIBUTION_CHANNEL_TYPE_PHYSICAL":          11,
		"DISTRIBUTION_CHANNEL_TYPE_SATELLITE":         12,
		"DISTRIBUTION_CHANNEL_TYPE_SIMULCAST":         13,
		"DISTRIBUTION_CHANNEL_TYPE_UNKNOWN":           14,
		"DISTRIBUTION_CHANNEL_TYPE_USERDEFINED":       15,
		"DISTRIBUTION_CHANNEL_TYPE_WEBCAST":           16,
	}
)

func (x DistributionChannelType) Enum() *DistributionChannelType {
	p := new(DistributionChannelType)
	*p = x
	return p
}

func (x DistributionChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DistributionChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[66].Descriptor()
}

func (DistributionChannelType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[66]
}

func (x DistributionChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DistributionChannelType.Descriptor instead.
func (DistributionChannelType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{66}
}

type DistributionClass int32

const (
	DistributionClass_DISTRIBUTION_CLASS_UNSPECIFIED    DistributionClass = 0
	DistributionClass_DISTRIBUTION_CLASS_CLASSICALMUSIC DistributionClass = 1
	DistributionClass_DISTRIBUTION_CLASS_LIBRARYMUSIC   DistributionClass = 2
	DistributionClass_DISTRIBUTION_CLASS_JAZZ           DistributionClass = 3
	DistributionClass_DISTRIBUTION_CLASS_POP            DistributionClass = 4
	DistributionClass_DISTRIBUTION_CLASS_UNKNOWN        DistributionClass = 5
)

// Enum value maps for DistributionClass.
var (
	DistributionClass_name = map[int32]string{
		0: "DISTRIBUTION_CLASS_UNSPECIFIED",
		1: "DISTRIBUTION_CLASS_CLASSICALMUSIC",
		2: "DISTRIBUTION_CLASS_LIBRARYMUSIC",
		3: "DISTRIBUTION_CLASS_JAZZ",
		4: "DISTRIBUTION_CLASS_POP",
		5: "DISTRIBUTION_CLASS_UNKNOWN",
	}
	DistributionClass_value = map[string]int32{
		"DISTRIBUTION_CLASS_UNSPECIFIED":    0,
		"DISTRIBUTION_CLASS_CLASSICALMUSIC": 1,
		"DISTRIBUTION_CLASS_LIBRARYMUSIC":   2,
		"DISTRIBUTION_CLASS_JAZZ":           3,
		"DISTRIBUTION_CLASS_POP":            4,
		"DISTRIBUTION_CLASS_UNKNOWN":        5,
	}
)

func (x DistributionClass) Enum() *DistributionClass {
	p := new(DistributionClass)
	*p = x
	return p
}

func (x DistributionClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DistributionClass) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[67].Descriptor()
}

func (DistributionClass) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[67]
}

func (x DistributionClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DistributionClass.Descriptor instead.
func (DistributionClass) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{67}
}

type DocumentTypeLoD int32

const (
	DocumentTypeLoD_DOCUMENT_TYPE_LO_D_UNSPECIFIED       DocumentTypeLoD = 0
	DocumentTypeLoD_DOCUMENT_TYPE_LO_D_LETTEROFDIRECTION DocumentTypeLoD = 1
	DocumentTypeLoD_DOCUMENT_TYPE_LO_D_USERDEFINED       DocumentTypeLoD = 2
)

// Enum value maps for DocumentTypeLoD.
var (
	DocumentTypeLoD_name = map[int32]string{
		0: "DOCUMENT_TYPE_LO_D_UNSPECIFIED",
		1: "DOCUMENT_TYPE_LO_D_LETTEROFDIRECTION",
		2: "DOCUMENT_TYPE_LO_D_USERDEFINED",
	}
	DocumentTypeLoD_value = map[string]int32{
		"DOCUMENT_TYPE_LO_D_UNSPECIFIED":       0,
		"DOCUMENT_TYPE_LO_D_LETTEROFDIRECTION": 1,
		"DOCUMENT_TYPE_LO_D_USERDEFINED":       2,
	}
)

func (x DocumentTypeLoD) Enum() *DocumentTypeLoD {
	p := new(DocumentTypeLoD)
	*p = x
	return p
}

func (x DocumentTypeLoD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentTypeLoD) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[68].Descriptor()
}

func (DocumentTypeLoD) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[68]
}

func (x DocumentTypeLoD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentTypeLoD.Descriptor instead.
func (DocumentTypeLoD) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{68}
}

type DocumentTypeMWL int32

const (
	DocumentTypeMWL_DOCUMENT_TYPE_M_W_L_UNSPECIFIED     DocumentTypeMWL = 0
	DocumentTypeMWL_DOCUMENT_TYPE_M_W_L_CONTRACT        DocumentTypeMWL = 1
	DocumentTypeMWL_DOCUMENT_TYPE_M_W_L_RATECALCULATION DocumentTypeMWL = 2
	DocumentTypeMWL_DOCUMENT_TYPE_M_W_L_USERDEFINED     DocumentTypeMWL = 3
)

// Enum value maps for DocumentTypeMWL.
var (
	DocumentTypeMWL_name = map[int32]string{
		0: "DOCUMENT_TYPE_M_W_L_UNSPECIFIED",
		1: "DOCUMENT_TYPE_M_W_L_CONTRACT",
		2: "DOCUMENT_TYPE_M_W_L_RATECALCULATION",
		3: "DOCUMENT_TYPE_M_W_L_USERDEFINED",
	}
	DocumentTypeMWL_value = map[string]int32{
		"DOCUMENT_TYPE_M_W_L_UNSPECIFIED":     0,
		"DOCUMENT_TYPE_M_W_L_CONTRACT":        1,
		"DOCUMENT_TYPE_M_W_L_RATECALCULATION": 2,
		"DOCUMENT_TYPE_M_W_L_USERDEFINED":     3,
	}
)

func (x DocumentTypeMWL) Enum() *DocumentTypeMWL {
	p := new(DocumentTypeMWL)
	*p = x
	return p
}

func (x DocumentTypeMWL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentTypeMWL) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[69].Descriptor()
}

func (DocumentTypeMWL) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[69]
}

func (x DocumentTypeMWL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentTypeMWL.Descriptor instead.
func (DocumentTypeMWL) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{69}
}

type DpidStatus int32

const (
	DpidStatus_DPID_STATUS_UNSPECIFIED DpidStatus = 0
	DpidStatus_DPID_STATUS_ACTIVE      DpidStatus = 1
	DpidStatus_DPID_STATUS_DELETED     DpidStatus = 2
	DpidStatus_DPID_STATUS_REPLACED    DpidStatus = 3
)

// Enum value maps for DpidStatus.
var (
	DpidStatus_name = map[int32]string{
		0: "DPID_STATUS_UNSPECIFIED",
		1: "DPID_STATUS_ACTIVE",
		2: "DPID_STATUS_DELETED",
		3: "DPID_STATUS_REPLACED",
	}
	DpidStatus_value = map[string]int32{
		"DPID_STATUS_UNSPECIFIED": 0,
		"DPID_STATUS_ACTIVE":      1,
		"DPID_STATUS_DELETED":     2,
		"DPID_STATUS_REPLACED":    3,
	}
)

func (x DpidStatus) Enum() *DpidStatus {
	p := new(DpidStatus)
	*p = x
	return p
}

func (x DpidStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DpidStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[70].Descriptor()
}

func (DpidStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[70]
}

func (x DpidStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DpidStatus.Descriptor instead.
func (DpidStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{70}
}

type DrmEnforcementType int32

const (
	DrmEnforcementType_DRM_ENFORCEMENT_TYPE_UNSPECIFIED    DrmEnforcementType = 0
	DrmEnforcementType_DRM_ENFORCEMENT_TYPE_DRMENFORCED    DrmEnforcementType = 1
	DrmEnforcementType_DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED DrmEnforcementType = 2
)

// Enum value maps for DrmEnforcementType.
var (
	DrmEnforcementType_name = map[int32]string{
		0: "DRM_ENFORCEMENT_TYPE_UNSPECIFIED",
		1: "DRM_ENFORCEMENT_TYPE_DRMENFORCED",
		2: "DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED",
	}
	DrmEnforcementType_value = map[string]int32{
		"DRM_ENFORCEMENT_TYPE_UNSPECIFIED":    0,
		"DRM_ENFORCEMENT_TYPE_DRMENFORCED":    1,
		"DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED": 2,
	}
)

func (x DrmEnforcementType) Enum() *DrmEnforcementType {
	p := new(DrmEnforcementType)
	*p = x
	return p
}

func (x DrmEnforcementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrmEnforcementType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[71].Descriptor()
}

func (DrmEnforcementType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[71]
}

func (x DrmEnforcementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DrmEnforcementType.Descriptor instead.
func (DrmEnforcementType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{71}
}

type EditionType int32

const (
	EditionType_EDITION_TYPE_UNSPECIFIED         EditionType = 0
	EditionType_EDITION_TYPE_IMMERSIVEEDITION    EditionType = 1
	EditionType_EDITION_TYPE_NONIMMERSIVEEDITION EditionType = 2
)

// Enum value maps for EditionType.
var (
	EditionType_name = map[int32]string{
		0: "EDITION_TYPE_UNSPECIFIED",
		1: "EDITION_TYPE_IMMERSIVEEDITION",
		2: "EDITION_TYPE_NONIMMERSIVEEDITION",
	}
	EditionType_value = map[string]int32{
		"EDITION_TYPE_UNSPECIFIED":         0,
		"EDITION_TYPE_IMMERSIVEEDITION":    1,
		"EDITION_TYPE_NONIMMERSIVEEDITION": 2,
	}
)

func (x EditionType) Enum() *EditionType {
	p := new(EditionType)
	*p = x
	return p
}

func (x EditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[72].Descriptor()
}

func (EditionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[72]
}

func (x EditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EditionType.Descriptor instead.
func (EditionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{72}
}

type ElectroOpticalTransferFunctionType int32

const (
	ElectroOpticalTransferFunctionType_ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_UNSPECIFIED ElectroOpticalTransferFunctionType = 0
	ElectroOpticalTransferFunctionType_ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_BT_1886     ElectroOpticalTransferFunctionType = 1
	ElectroOpticalTransferFunctionType_ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_ST2084      ElectroOpticalTransferFunctionType = 2
)

// Enum value maps for ElectroOpticalTransferFunctionType.
var (
	ElectroOpticalTransferFunctionType_name = map[int32]string{
		0: "ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_UNSPECIFIED",
		1: "ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_BT_1886",
		2: "ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_ST2084",
	}
	ElectroOpticalTransferFunctionType_value = map[string]int32{
		"ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_UNSPECIFIED": 0,
		"ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_BT_1886":     1,
		"ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_ST2084":      2,
	}
)

func (x ElectroOpticalTransferFunctionType) Enum() *ElectroOpticalTransferFunctionType {
	p := new(ElectroOpticalTransferFunctionType)
	*p = x
	return p
}

func (x ElectroOpticalTransferFunctionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElectroOpticalTransferFunctionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[73].Descriptor()
}

func (ElectroOpticalTransferFunctionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[73]
}

func (x ElectroOpticalTransferFunctionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElectroOpticalTransferFunctionType.Descriptor instead.
func (ElectroOpticalTransferFunctionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{73}
}

type ElementConfiguration int32

const (
	ElementConfiguration_ELEMENT_CONFIGURATION_UNSPECIFIED            ElementConfiguration = 0
	ElementConfiguration_ELEMENT_CONFIGURATION_E_12TRACK              ElementConfiguration = 1
	ElementConfiguration_ELEMENT_CONFIGURATION_E_16TRACK              ElementConfiguration = 2
	ElementConfiguration_ELEMENT_CONFIGURATION_E_24TRACK              ElementConfiguration = 3
	ElementConfiguration_ELEMENT_CONFIGURATION_E_3TRACK               ElementConfiguration = 4
	ElementConfiguration_ELEMENT_CONFIGURATION_E_32TRACK              ElementConfiguration = 5
	ElementConfiguration_ELEMENT_CONFIGURATION_E_4TRACK               ElementConfiguration = 6
	ElementConfiguration_ELEMENT_CONFIGURATION_E_48TRACK              ElementConfiguration = 7
	ElementConfiguration_ELEMENT_CONFIGURATION_E_6TRACK               ElementConfiguration = 8
	ElementConfiguration_ELEMENT_CONFIGURATION_E_8TRACK               ElementConfiguration = 9
	ElementConfiguration_ELEMENT_CONFIGURATION_ABLETONLIVE            ElementConfiguration = 10
	ElementConfiguration_ELEMENT_CONFIGURATION_BRUARCHIVE             ElementConfiguration = 11
	ElementConfiguration_ELEMENT_CONFIGURATION_BANDEDDISC_INSIDEOUT   ElementConfiguration = 12
	ElementConfiguration_ELEMENT_CONFIGURATION_BANDEDDISC_OUTSIDEIN   ElementConfiguration = 13
	ElementConfiguration_ELEMENT_CONFIGURATION_CUBASE                 ElementConfiguration = 14
	ElementConfiguration_ELEMENT_CONFIGURATION_DATAFILES              ElementConfiguration = 15
	ElementConfiguration_ELEMENT_CONFIGURATION_DIGITALPERFORMER       ElementConfiguration = 16
	ElementConfiguration_ELEMENT_CONFIGURATION_FINALCUTEXPRESS        ElementConfiguration = 17
	ElementConfiguration_ELEMENT_CONFIGURATION_FINALCUTPRO            ElementConfiguration = 18
	ElementConfiguration_ELEMENT_CONFIGURATION_FRUITYLOOPS            ElementConfiguration = 19
	ElementConfiguration_ELEMENT_CONFIGURATION_FULLTRACKMONO          ElementConfiguration = 20
	ElementConfiguration_ELEMENT_CONFIGURATION_GARAGEBAND             ElementConfiguration = 21
	ElementConfiguration_ELEMENT_CONFIGURATION_HALFTRACKMONO          ElementConfiguration = 22
	ElementConfiguration_ELEMENT_CONFIGURATION_HALFTRACKSTEREO        ElementConfiguration = 23
	ElementConfiguration_ELEMENT_CONFIGURATION_HARDCOPY               ElementConfiguration = 24
	ElementConfiguration_ELEMENT_CONFIGURATION_INTERLEAVED5_1FILES    ElementConfiguration = 25
	ElementConfiguration_ELEMENT_CONFIGURATION_INTERLEAVEDSTEREOFILES ElementConfiguration = 26
	ElementConfiguration_ELEMENT_CONFIGURATION_LOGIC                  ElementConfiguration = 27
	ElementConfiguration_ELEMENT_CONFIGURATION_LTFSARCHIVE            ElementConfiguration = 28
	ElementConfiguration_ELEMENT_CONFIGURATION_LTFSBACKUP             ElementConfiguration = 29
	ElementConfiguration_ELEMENT_CONFIGURATION_MEZZOARCHIVE           ElementConfiguration = 30
	ElementConfiguration_ELEMENT_CONFIGURATION_MICROSOFTBACKUP        ElementConfiguration = 31
	ElementConfiguration_ELEMENT_CONFIGURATION_MONOFILES              ElementConfiguration = 32
	ElementConfiguration_ELEMENT_CONFIGURATION_NUENDO                 ElementConfiguration = 33
	ElementConfiguration_ELEMENT_CONFIGURATION_ORANGEBOOK             ElementConfiguration = 34
	ElementConfiguration_ELEMENT_CONFIGURATION_PARIS                  ElementConfiguration = 35
	ElementConfiguration_ELEMENT_CONFIGURATION_PROTOOLS               ElementConfiguration = 36
	ElementConfiguration_ELEMENT_CONFIGURATION_QUARTERTRACKMONO       ElementConfiguration = 37
	ElementConfiguration_ELEMENT_CONFIGURATION_QUARTERTRACKSTEREO     ElementConfiguration = 38
	ElementConfiguration_ELEMENT_CONFIGURATION_QUICKTIME              ElementConfiguration = 39
	ElementConfiguration_ELEMENT_CONFIGURATION_REDBOOK                ElementConfiguration = 40
	ElementConfiguration_ELEMENT_CONFIGURATION_RETROSPECTARCHIVE      ElementConfiguration = 41
	ElementConfiguration_ELEMENT_CONFIGURATION_RETROSPECTCATALOG      ElementConfiguration = 42
	ElementConfiguration_ELEMENT_CONFIGURATION_SPLITSTEREO            ElementConfiguration = 43
	ElementConfiguration_ELEMENT_CONFIGURATION_STUDIOONE              ElementConfiguration = 44
	ElementConfiguration_ELEMENT_CONFIGURATION_TARARCHIVE             ElementConfiguration = 45
	ElementConfiguration_ELEMENT_CONFIGURATION_TARBACKUP              ElementConfiguration = 46
	ElementConfiguration_ELEMENT_CONFIGURATION_TOASTARCHIVE           ElementConfiguration = 47
	ElementConfiguration_ELEMENT_CONFIGURATION_TRACKEDDISC_INSIDEOUT  ElementConfiguration = 48
	ElementConfiguration_ELEMENT_CONFIGURATION_TRACKEDDISC_OUTSIDEIN  ElementConfiguration = 49
	ElementConfiguration_ELEMENT_CONFIGURATION_TWINTRACK              ElementConfiguration = 50
)

// Enum value maps for ElementConfiguration.
var (
	ElementConfiguration_name = map[int32]string{
		0:  "ELEMENT_CONFIGURATION_UNSPECIFIED",
		1:  "ELEMENT_CONFIGURATION_E_12TRACK",
		2:  "ELEMENT_CONFIGURATION_E_16TRACK",
		3:  "ELEMENT_CONFIGURATION_E_24TRACK",
		4:  "ELEMENT_CONFIGURATION_E_3TRACK",
		5:  "ELEMENT_CONFIGURATION_E_32TRACK",
		6:  "ELEMENT_CONFIGURATION_E_4TRACK",
		7:  "ELEMENT_CONFIGURATION_E_48TRACK",
		8:  "ELEMENT_CONFIGURATION_E_6TRACK",
		9:  "ELEMENT_CONFIGURATION_E_8TRACK",
		10: "ELEMENT_CONFIGURATION_ABLETONLIVE",
		11: "ELEMENT_CONFIGURATION_BRUARCHIVE",
		12: "ELEMENT_CONFIGURATION_BANDEDDISC_INSIDEOUT",
		13: "ELEMENT_CONFIGURATION_BANDEDDISC_OUTSIDEIN",
		14: "ELEMENT_CONFIGURATION_CUBASE",
		15: "ELEMENT_CONFIGURATION_DATAFILES",
		16: "ELEMENT_CONFIGURATION_DIGITALPERFORMER",
		17: "ELEMENT_CONFIGURATION_FINALCUTEXPRESS",
		18: "ELEMENT_CONFIGURATION_FINALCUTPRO",
		19: "ELEMENT_CONFIGURATION_FRUITYLOOPS",
		20: "ELEMENT_CONFIGURATION_FULLTRACKMONO",
		21: "ELEMENT_CONFIGURATION_GARAGEBAND",
		22: "ELEMENT_CONFIGURATION_HALFTRACKMONO",
		23: "ELEMENT_CONFIGURATION_HALFTRACKSTEREO",
		24: "ELEMENT_CONFIGURATION_HARDCOPY",
		25: "ELEMENT_CONFIGURATION_INTERLEAVED5_1FILES",
		26: "ELEMENT_CONFIGURATION_INTERLEAVEDSTEREOFILES",
		27: "ELEMENT_CONFIGURATION_LOGIC",
		28: "ELEMENT_CONFIGURATION_LTFSARCHIVE",
		29: "ELEMENT_CONFIGURATION_LTFSBACKUP",
		30: "ELEMENT_CONFIGURATION_MEZZOARCHIVE",
		31: "ELEMENT_CONFIGURATION_MICROSOFTBACKUP",
		32: "ELEMENT_CONFIGURATION_MONOFILES",
		33: "ELEMENT_CONFIGURATION_NUENDO",
		34: "ELEMENT_CONFIGURATION_ORANGEBOOK",
		35: "ELEMENT_CONFIGURATION_PARIS",
		36: "ELEMENT_CONFIGURATION_PROTOOLS",
		37: "ELEMENT_CONFIGURATION_QUARTERTRACKMONO",
		38: "ELEMENT_CONFIGURATION_QUARTERTRACKSTEREO",
		39: "ELEMENT_CONFIGURATION_QUICKTIME",
		40: "ELEMENT_CONFIGURATION_REDBOOK",
		41: "ELEMENT_CONFIGURATION_RETROSPECTARCHIVE",
		42: "ELEMENT_CONFIGURATION_RETROSPECTCATALOG",
		43: "ELEMENT_CONFIGURATION_SPLITSTEREO",
		44: "ELEMENT_CONFIGURATION_STUDIOONE",
		45: "ELEMENT_CONFIGURATION_TARARCHIVE",
		46: "ELEMENT_CONFIGURATION_TARBACKUP",
		47: "ELEMENT_CONFIGURATION_TOASTARCHIVE",
		48: "ELEMENT_CONFIGURATION_TRACKEDDISC_INSIDEOUT",
		49: "ELEMENT_CONFIGURATION_TRACKEDDISC_OUTSIDEIN",
		50: "ELEMENT_CONFIGURATION_TWINTRACK",
	}
	ElementConfiguration_value = map[string]int32{
		"ELEMENT_CONFIGURATION_UNSPECIFIED":            0,
		"ELEMENT_CONFIGURATION_E_12TRACK":              1,
		"ELEMENT_CONFIGURATION_E_16TRACK":              2,
		"ELEMENT_CONFIGURATION_E_24TRACK":              3,
		"ELEMENT_CONFIGURATION_E_3TRACK":               4,
		"ELEMENT_CONFIGURATION_E_32TRACK":              5,
		"ELEMENT_CONFIGURATION_E_4TRACK":               6,
		"ELEMENT_CONFIGURATION_E_48TRACK":              7,
		"ELEMENT_CONFIGURATION_E_6TRACK":               8,
		"ELEMENT_CONFIGURATION_E_8TRACK":               9,
		"ELEMENT_CONFIGURATION_ABLETONLIVE":            10,
		"ELEMENT_CONFIGURATION_BRUARCHIVE":             11,
		"ELEMENT_CONFIGURATION_BANDEDDISC_INSIDEOUT":   12,
		"ELEMENT_CONFIGURATION_BANDEDDISC_OUTSIDEIN":   13,
		"ELEMENT_CONFIGURATION_CUBASE":                 14,
		"ELEMENT_CONFIGURATION_DATAFILES":              15,
		"ELEMENT_CONFIGURATION_DIGITALPERFORMER":       16,
		"ELEMENT_CONFIGURATION_FINALCUTEXPRESS":        17,
		"ELEMENT_CONFIGURATION_FINALCUTPRO":            18,
		"ELEMENT_CONFIGURATION_FRUITYLOOPS":            19,
		"ELEMENT_CONFIGURATION_FULLTRACKMONO":          20,
		"ELEMENT_CONFIGURATION_GARAGEBAND":             21,
		"ELEMENT_CONFIGURATION_HALFTRACKMONO":          22,
		"ELEMENT_CONFIGURATION_HALFTRACKSTEREO":        23,
		"ELEMENT_CONFIGURATION_HARDCOPY":               24,
		"ELEMENT_CONFIGURATION_INTERLEAVED5_1FILES":    25,
		"ELEMENT_CONFIGURATION_INTERLEAVEDSTEREOFILES": 26,
		"ELEMENT_CONFIGURATION_LOGIC":                  27,
		"ELEMENT_CONFIGURATION_LTFSARCHIVE":            28,
		"ELEMENT_CONFIGURATION_LTFSBACKUP":             29,
		"ELEMENT_CONFIGURATION_MEZZOARCHIVE":           30,
		"ELEMENT_CONFIGURATION_MICROSOFTBACKUP":        31,
		"ELEMENT_CONFIGURATION_MONOFILES":              32,
		"ELEMENT_CONFIGURATION_NUENDO":                 33,
		"ELEMENT_CONFIGURATION_ORANGEBOOK":             34,
		"ELEMENT_CONFIGURATION_PARIS":                  35,
		"ELEMENT_CONFIGURATION_PROTOOLS":               36,
		"ELEMENT_CONFIGURATION_QUARTERTRACKMONO":       37,
		"ELEMENT_CONFIGURATION_QUARTERTRACKSTEREO":     38,
		"ELEMENT_CONFIGURATION_QUICKTIME":              39,
		"ELEMENT_CONFIGURATION_REDBOOK":                40,
		"ELEMENT_CONFIGURATION_RETROSPECTARCHIVE":      41,
		"ELEMENT_CONFIGURATION_RETROSPECTCATALOG":      42,
		"ELEMENT_CONFIGURATION_SPLITSTEREO":            43,
		"ELEMENT_CONFIGURATION_STUDIOONE":              44,
		"ELEMENT_CONFIGURATION_TARARCHIVE":             45,
		"ELEMENT_CONFIGURATION_TARBACKUP":              46,
		"ELEMENT_CONFIGURATION_TOASTARCHIVE":           47,
		"ELEMENT_CONFIGURATION_TRACKEDDISC_INSIDEOUT":  48,
		"ELEMENT_CONFIGURATION_TRACKEDDISC_OUTSIDEIN":  49,
		"ELEMENT_CONFIGURATION_TWINTRACK":              50,
	}
)

func (x ElementConfiguration) Enum() *ElementConfiguration {
	p := new(ElementConfiguration)
	*p = x
	return p
}

func (x ElementConfiguration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElementConfiguration) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[74].Descriptor()
}

func (ElementConfiguration) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[74]
}

func (x ElementConfiguration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElementConfiguration.Descriptor instead.
func (ElementConfiguration) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{74}
}

type ElementDesignation int32

const (
	ElementDesignation_ELEMENT_DESIGNATION_UNSPECIFIED      ElementDesignation = 0
	ElementDesignation_ELEMENT_DESIGNATION_BACKUP           ElementDesignation = 1
	ElementDesignation_ELEMENT_DESIGNATION_CONVENIENCE      ElementDesignation = 2
	ElementDesignation_ELEMENT_DESIGNATION_COPY             ElementDesignation = 3
	ElementDesignation_ELEMENT_DESIGNATION_DOCUMENTATION    ElementDesignation = 4
	ElementDesignation_ELEMENT_DESIGNATION_LONGTERM         ElementDesignation = 5
	ElementDesignation_ELEMENT_DESIGNATION_MASTER           ElementDesignation = 6
	ElementDesignation_ELEMENT_DESIGNATION_SAFETY           ElementDesignation = 7
	ElementDesignation_ELEMENT_DESIGNATION_STORAGECONTAINER ElementDesignation = 8
	ElementDesignation_ELEMENT_DESIGNATION_TRANSFER         ElementDesignation = 9
	ElementDesignation_ELEMENT_DESIGNATION_WORKELEMENT      ElementDesignation = 10
)

// Enum value maps for ElementDesignation.
var (
	ElementDesignation_name = map[int32]string{
		0:  "ELEMENT_DESIGNATION_UNSPECIFIED",
		1:  "ELEMENT_DESIGNATION_BACKUP",
		2:  "ELEMENT_DESIGNATION_CONVENIENCE",
		3:  "ELEMENT_DESIGNATION_COPY",
		4:  "ELEMENT_DESIGNATION_DOCUMENTATION",
		5:  "ELEMENT_DESIGNATION_LONGTERM",
		6:  "ELEMENT_DESIGNATION_MASTER",
		7:  "ELEMENT_DESIGNATION_SAFETY",
		8:  "ELEMENT_DESIGNATION_STORAGECONTAINER",
		9:  "ELEMENT_DESIGNATION_TRANSFER",
		10: "ELEMENT_DESIGNATION_WORKELEMENT",
	}
	ElementDesignation_value = map[string]int32{
		"ELEMENT_DESIGNATION_UNSPECIFIED":      0,
		"ELEMENT_DESIGNATION_BACKUP":           1,
		"ELEMENT_DESIGNATION_CONVENIENCE":      2,
		"ELEMENT_DESIGNATION_COPY":             3,
		"ELEMENT_DESIGNATION_DOCUMENTATION":    4,
		"ELEMENT_DESIGNATION_LONGTERM":         5,
		"ELEMENT_DESIGNATION_MASTER":           6,
		"ELEMENT_DESIGNATION_SAFETY":           7,
		"ELEMENT_DESIGNATION_STORAGECONTAINER": 8,
		"ELEMENT_DESIGNATION_TRANSFER":         9,
		"ELEMENT_DESIGNATION_WORKELEMENT":      10,
	}
)

func (x ElementDesignation) Enum() *ElementDesignation {
	p := new(ElementDesignation)
	*p = x
	return p
}

func (x ElementDesignation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElementDesignation) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[75].Descriptor()
}

func (ElementDesignation) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[75]
}

func (x ElementDesignation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElementDesignation.Descriptor instead.
func (ElementDesignation) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{75}
}

type EncodingType int32

const (
	EncodingType_ENCODING_TYPE_UNSPECIFIED EncodingType = 0
	EncodingType_ENCODING_TYPE_IPA         EncodingType = 1
	EncodingType_ENCODING_TYPE_USERDEFINED EncodingType = 2
)

// Enum value maps for EncodingType.
var (
	EncodingType_name = map[int32]string{
		0: "ENCODING_TYPE_UNSPECIFIED",
		1: "ENCODING_TYPE_IPA",
		2: "ENCODING_TYPE_USERDEFINED",
	}
	EncodingType_value = map[string]int32{
		"ENCODING_TYPE_UNSPECIFIED": 0,
		"ENCODING_TYPE_IPA":         1,
		"ENCODING_TYPE_USERDEFINED": 2,
	}
)

func (x EncodingType) Enum() *EncodingType {
	p := new(EncodingType)
	*p = x
	return p
}

func (x EncodingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodingType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[76].Descriptor()
}

func (EncodingType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[76]
}

func (x EncodingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodingType.Descriptor instead.
func (EncodingType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{76}
}

type EquipmentManufacturer int32

const (
	EquipmentManufacturer_EQUIPMENT_MANUFACTURER_UNSPECIFIED EquipmentManufacturer = 0
	EquipmentManufacturer_EQUIPMENT_MANUFACTURER_USERDEFINED EquipmentManufacturer = 1
)

// Enum value maps for EquipmentManufacturer.
var (
	EquipmentManufacturer_name = map[int32]string{
		0: "EQUIPMENT_MANUFACTURER_UNSPECIFIED",
		1: "EQUIPMENT_MANUFACTURER_USERDEFINED",
	}
	EquipmentManufacturer_value = map[string]int32{
		"EQUIPMENT_MANUFACTURER_UNSPECIFIED": 0,
		"EQUIPMENT_MANUFACTURER_USERDEFINED": 1,
	}
)

func (x EquipmentManufacturer) Enum() *EquipmentManufacturer {
	p := new(EquipmentManufacturer)
	*p = x
	return p
}

func (x EquipmentManufacturer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentManufacturer) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[77].Descriptor()
}

func (EquipmentManufacturer) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[77]
}

func (x EquipmentManufacturer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentManufacturer.Descriptor instead.
func (EquipmentManufacturer) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{77}
}

type EquipmentModel int32

const (
	EquipmentModel_EQUIPMENT_MODEL_UNSPECIFIED EquipmentModel = 0
	EquipmentModel_EQUIPMENT_MODEL_USERDEFINED EquipmentModel = 1
)

// Enum value maps for EquipmentModel.
var (
	EquipmentModel_name = map[int32]string{
		0: "EQUIPMENT_MODEL_UNSPECIFIED",
		1: "EQUIPMENT_MODEL_USERDEFINED",
	}
	EquipmentModel_value = map[string]int32{
		"EQUIPMENT_MODEL_UNSPECIFIED": 0,
		"EQUIPMENT_MODEL_USERDEFINED": 1,
	}
)

func (x EquipmentModel) Enum() *EquipmentModel {
	p := new(EquipmentModel)
	*p = x
	return p
}

func (x EquipmentModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentModel) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[78].Descriptor()
}

func (EquipmentModel) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[78]
}

func (x EquipmentModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentModel.Descriptor instead.
func (EquipmentModel) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{78}
}

type EquipmentType int32

const (
	EquipmentType_EQUIPMENT_TYPE_UNSPECIFIED       EquipmentType = 0
	EquipmentType_EQUIPMENT_TYPE_COMPUTER          EquipmentType = 1
	EquipmentType_EQUIPMENT_TYPE_LOUDSPEAKER       EquipmentType = 2
	EquipmentType_EQUIPMENT_TYPE_MICROPHONE        EquipmentType = 3
	EquipmentType_EQUIPMENT_TYPE_MUSICALINSTRUMENT EquipmentType = 4
	EquipmentType_EQUIPMENT_TYPE_RECORDER          EquipmentType = 5
	EquipmentType_EQUIPMENT_TYPE_SIGNALPROCESSOR   EquipmentType = 6
	EquipmentType_EQUIPMENT_TYPE_SOFTWARE          EquipmentType = 7
)

// Enum value maps for EquipmentType.
var (
	EquipmentType_name = map[int32]string{
		0: "EQUIPMENT_TYPE_UNSPECIFIED",
		1: "EQUIPMENT_TYPE_COMPUTER",
		2: "EQUIPMENT_TYPE_LOUDSPEAKER",
		3: "EQUIPMENT_TYPE_MICROPHONE",
		4: "EQUIPMENT_TYPE_MUSICALINSTRUMENT",
		5: "EQUIPMENT_TYPE_RECORDER",
		6: "EQUIPMENT_TYPE_SIGNALPROCESSOR",
		7: "EQUIPMENT_TYPE_SOFTWARE",
	}
	EquipmentType_value = map[string]int32{
		"EQUIPMENT_TYPE_UNSPECIFIED":       0,
		"EQUIPMENT_TYPE_COMPUTER":          1,
		"EQUIPMENT_TYPE_LOUDSPEAKER":       2,
		"EQUIPMENT_TYPE_MICROPHONE":        3,
		"EQUIPMENT_TYPE_MUSICALINSTRUMENT": 4,
		"EQUIPMENT_TYPE_RECORDER":          5,
		"EQUIPMENT_TYPE_SIGNALPROCESSOR":   6,
		"EQUIPMENT_TYPE_SOFTWARE":          7,
	}
)

func (x EquipmentType) Enum() *EquipmentType {
	p := new(EquipmentType)
	*p = x
	return p
}

func (x EquipmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[79].Descriptor()
}

func (EquipmentType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[79]
}

func (x EquipmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentType.Descriptor instead.
func (EquipmentType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{79}
}

type ErnMessageType int32

const (
	ErnMessageType_ERN_MESSAGE_TYPE_UNSPECIFIED       ErnMessageType = 0
	ErnMessageType_ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE ErnMessageType = 1
)

// Enum value maps for ErnMessageType.
var (
	ErnMessageType_name = map[int32]string{
		0: "ERN_MESSAGE_TYPE_UNSPECIFIED",
		1: "ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE",
	}
	ErnMessageType_value = map[string]int32{
		"ERN_MESSAGE_TYPE_UNSPECIFIED":       0,
		"ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE": 1,
	}
)

func (x ErnMessageType) Enum() *ErnMessageType {
	p := new(ErnMessageType)
	*p = x
	return p
}

func (x ErnMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErnMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[80].Descriptor()
}

func (ErnMessageType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[80]
}

func (x ErnMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErnMessageType.Descriptor instead.
func (ErnMessageType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{80}
}

type ErnTestMessageType int32

const (
	ErnTestMessageType_ERN_TEST_MESSAGE_TYPE_UNSPECIFIED         ErnTestMessageType = 0
	ErnTestMessageType_ERN_TEST_MESSAGE_TYPE_NEWRELEASEMESSAGE   ErnTestMessageType = 1
	ErnTestMessageType_ERN_TEST_MESSAGE_TYPE_PURGERELEASEMESSAGE ErnTestMessageType = 2
)

// Enum value maps for ErnTestMessageType.
var (
	ErnTestMessageType_name = map[int32]string{
		0: "ERN_TEST_MESSAGE_TYPE_UNSPECIFIED",
		1: "ERN_TEST_MESSAGE_TYPE_NEWRELEASEMESSAGE",
		2: "ERN_TEST_MESSAGE_TYPE_PURGERELEASEMESSAGE",
	}
	ErnTestMessageType_value = map[string]int32{
		"ERN_TEST_MESSAGE_TYPE_UNSPECIFIED":         0,
		"ERN_TEST_MESSAGE_TYPE_NEWRELEASEMESSAGE":   1,
		"ERN_TEST_MESSAGE_TYPE_PURGERELEASEMESSAGE": 2,
	}
)

func (x ErnTestMessageType) Enum() *ErnTestMessageType {
	p := new(ErnTestMessageType)
	*p = x
	return p
}

func (x ErnTestMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErnTestMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[81].Descriptor()
}

func (ErnTestMessageType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[81]
}

func (x ErnTestMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErnTestMessageType.Descriptor instead.
func (ErnTestMessageType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{81}
}

type ErncFileStatus int32

const (
	ErncFileStatus_ERNC_FILE_STATUS_UNSPECIFIED                             ErncFileStatus = 0
	ErncFileStatus_ERNC_FILE_STATUS_ARTISTROLEUNKNOWN                       ErncFileStatus = 1
	ErncFileStatus_ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID            ErncFileStatus = 2
	ErncFileStatus_ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS          ErncFileStatus = 3
	ErncFileStatus_ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES                ErncFileStatus = 4
	ErncFileStatus_ERNC_FILE_STATUS_ERNMISSING                              ErncFileStatus = 5
	ErncFileStatus_ERNC_FILE_STATUS_FILEOK                                  ErncFileStatus = 6
	ErncFileStatus_ERNC_FILE_STATUS_IDENTIFIERINVALID                       ErncFileStatus = 7
	ErncFileStatus_ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID                 ErncFileStatus = 8
	ErncFileStatus_ERNC_FILE_STATUS_INTERNALERROR                           ErncFileStatus = 9
	ErncFileStatus_ERNC_FILE_STATUS_METADATAMISSING                         ErncFileStatus = 10
	ErncFileStatus_ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID                ErncFileStatus = 11
	ErncFileStatus_ERNC_FILE_STATUS_NODEALFORTRACKRELEASE                   ErncFileStatus = 12
	ErncFileStatus_ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE               ErncFileStatus = 13
	ErncFileStatus_ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE ErncFileStatus = 14
	ErncFileStatus_ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING                ErncFileStatus = 15
	ErncFileStatus_ERNC_FILE_STATUS_RESOURCECORRUPT                         ErncFileStatus = 16
	ErncFileStatus_ERNC_FILE_STATUS_RESOURCEMISSING                         ErncFileStatus = 17
	ErncFileStatus_ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS        ErncFileStatus = 18
	ErncFileStatus_ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING        ErncFileStatus = 19
	ErncFileStatus_ERNC_FILE_STATUS_UNSUPPORTEDUSAGE                        ErncFileStatus = 20
	ErncFileStatus_ERNC_FILE_STATUS_USERDEFINED                             ErncFileStatus = 21
)

// Enum value maps for ErncFileStatus.
var (
	ErncFileStatus_name = map[int32]string{
		0:  "ERNC_FILE_STATUS_UNSPECIFIED",
		1:  "ERNC_FILE_STATUS_ARTISTROLEUNKNOWN",
		2:  "ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID",
		3:  "ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS",
		4:  "ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES",
		5:  "ERNC_FILE_STATUS_ERNMISSING",
		6:  "ERNC_FILE_STATUS_FILEOK",
		7:  "ERNC_FILE_STATUS_IDENTIFIERINVALID",
		8:  "ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID",
		9:  "ERNC_FILE_STATUS_INTERNALERROR",
		10: "ERNC_FILE_STATUS_METADATAMISSING",
		11: "ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID",
		12: "ERNC_FILE_STATUS_NODEALFORTRACKRELEASE",
		13: "ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE",
		14: "ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE",
		15: "ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING",
		16: "ERNC_FILE_STATUS_RESOURCECORRUPT",
		17: "ERNC_FILE_STATUS_RESOURCEMISSING",
		18: "ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS",
		19: "ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING",
		20: "ERNC_FILE_STATUS_UNSUPPORTEDUSAGE",
		21: "ERNC_FILE_STATUS_USERDEFINED",
	}
	ErncFileStatus_value = map[string]int32{
		"ERNC_FILE_STATUS_UNSPECIFIED":                             0,
		"ERNC_FILE_STATUS_ARTISTROLEUNKNOWN":                       1,
		"ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID":            2,
		"ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS":          3,
		"ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES":                4,
		"ERNC_FILE_STATUS_ERNMISSING":                              5,
		"ERNC_FILE_STATUS_FILEOK":                                  6,
		"ERNC_FILE_STATUS_IDENTIFIERINVALID":                       7,
		"ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID":                 8,
		"ERNC_FILE_STATUS_INTERNALERROR":                           9,
		"ERNC_FILE_STATUS_METADATAMISSING":                         10,
		"ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID":                11,
		"ERNC_FILE_STATUS_NODEALFORTRACKRELEASE":                   12,
		"ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE":               13,
		"ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE": 14,
		"ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING":                15,
		"ERNC_FILE_STATUS_RESOURCECORRUPT":                         16,
		"ERNC_FILE_STATUS_RESOURCEMISSING":                         17,
		"ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS":        18,
		"ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING":        19,
		"ERNC_FILE_STATUS_UNSUPPORTEDUSAGE":                        20,
		"ERNC_FILE_STATUS_USERDEFINED":                             21,
	}
)

func (x ErncFileStatus) Enum() *ErncFileStatus {
	p := new(ErncFileStatus)
	*p = x
	return p
}

func (x ErncFileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErncFileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[82].Descriptor()
}

func (ErncFileStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[82]
}

func (x ErncFileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErncFileStatus.Descriptor instead.
func (ErncFileStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{82}
}

type ErncProposedActionType int32

const (
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED                 ErncProposedActionType = 0
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE ErncProposedActionType = 1
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE          ErncProposedActionType = 2
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY               ErncProposedActionType = 3
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES       ErncProposedActionType = 4
	ErncProposedActionType_ERNC_PROPOSED_ACTION_TYPE_USERDEFINED                 ErncProposedActionType = 5
)

// Enum value maps for ErncProposedActionType.
var (
	ErncProposedActionType_name = map[int32]string{
		0: "ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED",
		1: "ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE",
		2: "ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE",
		3: "ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY",
		4: "ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES",
		5: "ERNC_PROPOSED_ACTION_TYPE_USERDEFINED",
	}
	ErncProposedActionType_value = map[string]int32{
		"ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED":                 0,
		"ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE": 1,
		"ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE":          2,
		"ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY":               3,
		"ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES":       4,
		"ERNC_PROPOSED_ACTION_TYPE_USERDEFINED":                 5,
	}
)

func (x ErncProposedActionType) Enum() *ErncProposedActionType {
	p := new(ErncProposedActionType)
	*p = x
	return p
}

func (x ErncProposedActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErncProposedActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[83].Descriptor()
}

func (ErncProposedActionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[83]
}

func (x ErncProposedActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErncProposedActionType.Descriptor instead.
func (ErncProposedActionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{83}
}

type ErrorSeverity int32

const (
	ErrorSeverity_ERROR_SEVERITY_UNSPECIFIED ErrorSeverity = 0
	ErrorSeverity_ERROR_SEVERITY_CRITICAL    ErrorSeverity = 1
	ErrorSeverity_ERROR_SEVERITY_INFORMATION ErrorSeverity = 2
	ErrorSeverity_ERROR_SEVERITY_WARNING     ErrorSeverity = 3
)

// Enum value maps for ErrorSeverity.
var (
	ErrorSeverity_name = map[int32]string{
		0: "ERROR_SEVERITY_UNSPECIFIED",
		1: "ERROR_SEVERITY_CRITICAL",
		2: "ERROR_SEVERITY_INFORMATION",
		3: "ERROR_SEVERITY_WARNING",
	}
	ErrorSeverity_value = map[string]int32{
		"ERROR_SEVERITY_UNSPECIFIED": 0,
		"ERROR_SEVERITY_CRITICAL":    1,
		"ERROR_SEVERITY_INFORMATION": 2,
		"ERROR_SEVERITY_WARNING":     3,
	}
)

func (x ErrorSeverity) Enum() *ErrorSeverity {
	p := new(ErrorSeverity)
	*p = x
	return p
}

func (x ErrorSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[84].Descriptor()
}

func (ErrorSeverity) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[84]
}

func (x ErrorSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorSeverity.Descriptor instead.
func (ErrorSeverity) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{84}
}

type ErrorType int32

const (
	ErrorType_ERROR_TYPE_UNSPECIFIED      ErrorType = 0
	ErrorType_ERROR_TYPE_CONFORMANCEERROR ErrorType = 1
	ErrorType_ERROR_TYPE_LOGICALERROR     ErrorType = 2
	ErrorType_ERROR_TYPE_USERDEFINED      ErrorType = 3
)

// Enum value maps for ErrorType.
var (
	ErrorType_name = map[int32]string{
		0: "ERROR_TYPE_UNSPECIFIED",
		1: "ERROR_TYPE_CONFORMANCEERROR",
		2: "ERROR_TYPE_LOGICALERROR",
		3: "ERROR_TYPE_USERDEFINED",
	}
	ErrorType_value = map[string]int32{
		"ERROR_TYPE_UNSPECIFIED":      0,
		"ERROR_TYPE_CONFORMANCEERROR": 1,
		"ERROR_TYPE_LOGICALERROR":     2,
		"ERROR_TYPE_USERDEFINED":      3,
	}
)

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}

func (x ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[85].Descriptor()
}

func (ErrorType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[85]
}

func (x ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorType.Descriptor instead.
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{85}
}

type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED      EventType = 0
	EventType_EVENT_TYPE_ACTIVITYPERIOD   EventType = 1
	EventType_EVENT_TYPE_BIRTH            EventType = 2
	EventType_EVENT_TYPE_CONCEPTUALIZE    EventType = 3
	EventType_EVENT_TYPE_DEATH            EventType = 4
	EventType_EVENT_TYPE_DISSOLUTION      EventType = 5
	EventType_EVENT_TYPE_FIRSTPERFORMANCE EventType = 6
	EventType_EVENT_TYPE_INCORPORATION    EventType = 7
	EventType_EVENT_TYPE_LASTPERFORMANCE  EventType = 8
	EventType_EVENT_TYPE_USERDEFINED      EventType = 9
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_ACTIVITYPERIOD",
		2: "EVENT_TYPE_BIRTH",
		3: "EVENT_TYPE_CONCEPTUALIZE",
		4: "EVENT_TYPE_DEATH",
		5: "EVENT_TYPE_DISSOLUTION",
		6: "EVENT_TYPE_FIRSTPERFORMANCE",
		7: "EVENT_TYPE_INCORPORATION",
		8: "EVENT_TYPE_LASTPERFORMANCE",
		9: "EVENT_TYPE_USERDEFINED",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED":      0,
		"EVENT_TYPE_ACTIVITYPERIOD":   1,
		"EVENT_TYPE_BIRTH":            2,
		"EVENT_TYPE_CONCEPTUALIZE":    3,
		"EVENT_TYPE_DEATH":            4,
		"EVENT_TYPE_DISSOLUTION":      5,
		"EVENT_TYPE_FIRSTPERFORMANCE": 6,
		"EVENT_TYPE_INCORPORATION":    7,
		"EVENT_TYPE_LASTPERFORMANCE":  8,
		"EVENT_TYPE_USERDEFINED":      9,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[86].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[86]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{86}
}

type ExceptionReason int32

const (
	ExceptionReason_EXCEPTION_REASON_UNSPECIFIED                      ExceptionReason = 0
	ExceptionReason_EXCEPTION_REASON_DISPUTEDBYLICENSEE               ExceptionReason = 1
	ExceptionReason_EXCEPTION_REASON_DISPUTEDBYRELINQUISHINGPUBLISHER ExceptionReason = 2
	ExceptionReason_EXCEPTION_REASON_NOTFOUND                         ExceptionReason = 3
	ExceptionReason_EXCEPTION_REASON_USERDEFINED                      ExceptionReason = 4
)

// Enum value maps for ExceptionReason.
var (
	ExceptionReason_name = map[int32]string{
		0: "EXCEPTION_REASON_UNSPECIFIED",
		1: "EXCEPTION_REASON_DISPUTEDBYLICENSEE",
		2: "EXCEPTION_REASON_DISPUTEDBYRELINQUISHINGPUBLISHER",
		3: "EXCEPTION_REASON_NOTFOUND",
		4: "EXCEPTION_REASON_USERDEFINED",
	}
	ExceptionReason_value = map[string]int32{
		"EXCEPTION_REASON_UNSPECIFIED":                      0,
		"EXCEPTION_REASON_DISPUTEDBYLICENSEE":               1,
		"EXCEPTION_REASON_DISPUTEDBYRELINQUISHINGPUBLISHER": 2,
		"EXCEPTION_REASON_NOTFOUND":                         3,
		"EXCEPTION_REASON_USERDEFINED":                      4,
	}
)

func (x ExceptionReason) Enum() *ExceptionReason {
	p := new(ExceptionReason)
	*p = x
	return p
}

func (x ExceptionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExceptionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[87].Descriptor()
}

func (ExceptionReason) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[87]
}

func (x ExceptionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExceptionReason.Descriptor instead.
func (ExceptionReason) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{87}
}

type ExpressionType int32

const (
	ExpressionType_EXPRESSION_TYPE_UNSPECIFIED ExpressionType = 0
	ExpressionType_EXPRESSION_TYPE_INFORMATIVE ExpressionType = 1
	ExpressionType_EXPRESSION_TYPE_INSTRUCTIVE ExpressionType = 2
)

// Enum value maps for ExpressionType.
var (
	ExpressionType_name = map[int32]string{
		0: "EXPRESSION_TYPE_UNSPECIFIED",
		1: "EXPRESSION_TYPE_INFORMATIVE",
		2: "EXPRESSION_TYPE_INSTRUCTIVE",
	}
	ExpressionType_value = map[string]int32{
		"EXPRESSION_TYPE_UNSPECIFIED": 0,
		"EXPRESSION_TYPE_INFORMATIVE": 1,
		"EXPRESSION_TYPE_INSTRUCTIVE": 2,
	}
)

func (x ExpressionType) Enum() *ExpressionType {
	p := new(ExpressionType)
	*p = x
	return p
}

func (x ExpressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[88].Descriptor()
}

func (ExpressionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[88]
}

func (x ExpressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressionType.Descriptor instead.
func (ExpressionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{88}
}

type ExternallyLinkedResourceType int32

const (
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED            ExternallyLinkedResourceType = 0
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA     ExternallyLinkedResourceType = 1
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO                   ExternallyLinkedResourceType = 2
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE       ExternallyLinkedResourceType = 3
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION ExternallyLinkedResourceType = 4
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM        ExternallyLinkedResourceType = 5
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN                ExternallyLinkedResourceType = 6
	ExternallyLinkedResourceType_EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED            ExternallyLinkedResourceType = 7
)

// Enum value maps for ExternallyLinkedResourceType.
var (
	ExternallyLinkedResourceType_name = map[int32]string{
		0: "EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED",
		1: "EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA",
		2: "EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO",
		3: "EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE",
		4: "EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION",
		5: "EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM",
		6: "EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN",
		7: "EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED",
	}
	ExternallyLinkedResourceType_value = map[string]int32{
		"EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED":            0,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA":     1,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO":                   2,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE":       3,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION": 4,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM":        5,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN":                6,
		"EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED":            7,
	}
)

func (x ExternallyLinkedResourceType) Enum() *ExternallyLinkedResourceType {
	p := new(ExternallyLinkedResourceType)
	*p = x
	return p
}

func (x ExternallyLinkedResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternallyLinkedResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[89].Descriptor()
}

func (ExternallyLinkedResourceType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[89]
}

func (x ExternallyLinkedResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternallyLinkedResourceType.Descriptor instead.
func (ExternallyLinkedResourceType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{89}
}

type FileType int32

const (
	FileType_FILE_TYPE_UNSPECIFIED  FileType = 0
	FileType_FILE_TYPE_E_3DMFILE    FileType = 1
	FileType_FILE_TYPE_E_3G2FILE    FileType = 2
	FileType_FILE_TYPE_E_3GPFILE    FileType = 3
	FileType_FILE_TYPE_E_7ZFILE     FileType = 4
	FileType_FILE_TYPE_E_8BIFILE    FileType = 5
	FileType_FILE_TYPE_AACFILE      FileType = 6
	FileType_FILE_TYPE_ACCDBFILE    FileType = 7
	FileType_FILE_TYPE_AIFFILE      FileType = 8
	FileType_FILE_TYPE_AIFILE       FileType = 9
	FileType_FILE_TYPE_ANAFILE      FileType = 10
	FileType_FILE_TYPE_APPFILE      FileType = 11
	FileType_FILE_TYPE_ASFFILE      FileType = 12
	FileType_FILE_TYPE_ASPFILE      FileType = 13
	FileType_FILE_TYPE_ASXFILE      FileType = 14
	FileType_FILE_TYPE_AUDFILE      FileType = 15
	FileType_FILE_TYPE_AVIFILE      FileType = 16
	FileType_FILE_TYPE_BAKFILE      FileType = 17
	FileType_FILE_TYPE_BATFILE      FileType = 18
	FileType_FILE_TYPE_BINFILE      FileType = 19
	FileType_FILE_TYPE_BMPFILE      FileType = 20
	FileType_FILE_TYPE_BTFILE       FileType = 21
	FileType_FILE_TYPE_BWFFILE      FileType = 22
	FileType_FILE_TYPE_CABFILE      FileType = 23
	FileType_FILE_TYPE_CERFILE      FileType = 24
	FileType_FILE_TYPE_CFGFILE      FileType = 25
	FileType_FILE_TYPE_CFILE        FileType = 26
	FileType_FILE_TYPE_CGIFILE      FileType = 27
	FileType_FILE_TYPE_CLASSFILE    FileType = 28
	FileType_FILE_TYPE_COMFILE      FileType = 29
	FileType_FILE_TYPE_CPLFILE      FileType = 30
	FileType_FILE_TYPE_CPPFILE      FileType = 31
	FileType_FILE_TYPE_CSFILE       FileType = 32
	FileType_FILE_TYPE_CSRFILE      FileType = 33
	FileType_FILE_TYPE_CSSFILE      FileType = 34
	FileType_FILE_TYPE_CSVFILE      FileType = 35
	FileType_FILE_TYPE_CURFILE      FileType = 36
	FileType_FILE_TYPE_DATFILE      FileType = 37
	FileType_FILE_TYPE_DBFILE       FileType = 38
	FileType_FILE_TYPE_DBXFILE      FileType = 39
	FileType_FILE_TYPE_DEBFILE      FileType = 40
	FileType_FILE_TYPE_DLLFILE      FileType = 41
	FileType_FILE_TYPE_DMGFILE      FileType = 42
	FileType_FILE_TYPE_DMPFILE      FileType = 43
	FileType_FILE_TYPE_DOCFILE      FileType = 44
	FileType_FILE_TYPE_DOCXFILE     FileType = 45
	FileType_FILE_TYPE_DRVFILE      FileType = 46
	FileType_FILE_TYPE_DRWFILE      FileType = 47
	FileType_FILE_TYPE_DSDFILE      FileType = 48
	FileType_FILE_TYPE_DTDFILE      FileType = 49
	FileType_FILE_TYPE_DVFILE       FileType = 50
	FileType_FILE_TYPE_DWGFILE      FileType = 51
	FileType_FILE_TYPE_DXFFILE      FileType = 52
	FileType_FILE_TYPE_EFXFILE      FileType = 53
	FileType_FILE_TYPE_EPSFILE      FileType = 54
	FileType_FILE_TYPE_EXEFILE      FileType = 55
	FileType_FILE_TYPE_FLAFILE      FileType = 56
	FileType_FILE_TYPE_FLVFILE      FileType = 57
	FileType_FILE_TYPE_FNTFILE      FileType = 58
	FileType_FILE_TYPE_FONFILE      FileType = 59
	FileType_FILE_TYPE_GADGETFILE   FileType = 60
	FileType_FILE_TYPE_GAMFILE      FileType = 61
	FileType_FILE_TYPE_GHOFILE      FileType = 62
	FileType_FILE_TYPE_GIFFILE      FileType = 63
	FileType_FILE_TYPE_GPXFILE      FileType = 64
	FileType_FILE_TYPE_GZFILE       FileType = 65
	FileType_FILE_TYPE_HQXFILE      FileType = 66
	FileType_FILE_TYPE_HTMFILE      FileType = 67
	FileType_FILE_TYPE_HTMLFILE     FileType = 68
	FileType_FILE_TYPE_IFFFILE      FileType = 69
	FileType_FILE_TYPE_INDDFILE     FileType = 70
	FileType_FILE_TYPE_INIFILE      FileType = 71
	FileType_FILE_TYPE_ISOFILE      FileType = 72
	FileType_FILE_TYPE_JARFILE      FileType = 73
	FileType_FILE_TYPE_JAVAFILE     FileType = 74
	FileType_FILE_TYPE_JPGFILE      FileType = 75
	FileType_FILE_TYPE_JSFILE       FileType = 76
	FileType_FILE_TYPE_JSPFILE      FileType = 77
	FileType_FILE_TYPE_KEYCHAINFILE FileType = 78
	FileType_FILE_TYPE_KEYFILE      FileType = 79
	FileType_FILE_TYPE_KMLFILE      FileType = 80
	FileType_FILE_TYPE_LNKFILE      FileType = 81
	FileType_FILE_TYPE_LOGFILE      FileType = 82
	FileType_FILE_TYPE_M3UFILE      FileType = 83
	FileType_FILE_TYPE_MAXFILE      FileType = 84
	FileType_FILE_TYPE_MDBFILE      FileType = 85
	FileType_FILE_TYPE_MFILE        FileType = 86
	FileType_FILE_TYPE_MIDFILE      FileType = 87
	FileType_FILE_TYPE_MIMFILE      FileType = 88
	FileType_FILE_TYPE_MOVFILE      FileType = 89
	FileType_FILE_TYPE_MP3FILE      FileType = 90
	FileType_FILE_TYPE_MP4FILE      FileType = 91
	FileType_FILE_TYPE_MPAFILE      FileType = 92
	FileType_FILE_TYPE_MPGFILE      FileType = 93
	FileType_FILE_TYPE_MSGFILE      FileType = 94
	FileType_FILE_TYPE_NESFILE      FileType = 95
	FileType_FILE_TYPE_NEUFILE      FileType = 96
	FileType_FILE_TYPE_ORIFILE      FileType = 97
	FileType_FILE_TYPE_OTFFILE      FileType = 98
	FileType_FILE_TYPE_PAGESFILE    FileType = 99
	FileType_FILE_TYPE_PCMFILE      FileType = 100
	FileType_FILE_TYPE_PCTFILE      FileType = 101
	FileType_FILE_TYPE_PDBFILE      FileType = 102
	FileType_FILE_TYPE_PDFFILE      FileType = 103
	FileType_FILE_TYPE_PHPFILE      FileType = 104
	FileType_FILE_TYPE_PIFFILE      FileType = 105
	FileType_FILE_TYPE_PKGFILE      FileType = 106
	FileType_FILE_TYPE_PLFILE       FileType = 107
	FileType_FILE_TYPE_PLNFILE      FileType = 108
	FileType_FILE_TYPE_PLUGINFILE   FileType = 109
	FileType_FILE_TYPE_PNGFILE      FileType = 110
	FileType_FILE_TYPE_PPSFILE      FileType = 111
	FileType_FILE_TYPE_PPTFILE      FileType = 112
	FileType_FILE_TYPE_PPTXFILE     FileType = 113
	FileType_FILE_TYPE_PRFFILE      FileType = 114
	FileType_FILE_TYPE_PSDFILE      FileType = 115
	FileType_FILE_TYPE_PSFILE       FileType = 116
	FileType_FILE_TYPE_PSPIMAGEFILE FileType = 117
	FileType_FILE_TYPE_PTSFILE      FileType = 118
	FileType_FILE_TYPE_QXDFILE      FileType = 119
	FileType_FILE_TYPE_QXPFILE      FileType = 120
	FileType_FILE_TYPE_RAFILE       FileType = 121
	FileType_FILE_TYPE_RARFILE      FileType = 122
	FileType_FILE_TYPE_RELSFILE     FileType = 123
	FileType_FILE_TYPE_RMFILE       FileType = 124
	FileType_FILE_TYPE_ROMFILE      FileType = 125
	FileType_FILE_TYPE_RSSFILE      FileType = 126
	FileType_FILE_TYPE_RTFFILE      FileType = 127
	FileType_FILE_TYPE_SAVFILE      FileType = 128
	FileType_FILE_TYPE_SD2FILE      FileType = 129
	FileType_FILE_TYPE_SDFFILE      FileType = 130
	FileType_FILE_TYPE_SITFILE      FileType = 131
	FileType_FILE_TYPE_SITXFILE     FileType = 132
	FileType_FILE_TYPE_SQLFILE      FileType = 133
	FileType_FILE_TYPE_SVGFILE      FileType = 134
	FileType_FILE_TYPE_SWFFILE      FileType = 135
	FileType_FILE_TYPE_SYSFILE      FileType = 136
	FileType_FILE_TYPE_TARFILE      FileType = 137
	FileType_FILE_TYPE_TARGZFILE    FileType = 138
	FileType_FILE_TYPE_THMFILE      FileType = 139
	FileType_FILE_TYPE_TIFFILE      FileType = 140
	FileType_FILE_TYPE_TMPFILE      FileType = 141
	FileType_FILE_TYPE_TOASTFILE    FileType = 142
	FileType_FILE_TYPE_TTFFILE      FileType = 143
	FileType_FILE_TYPE_TXTFILE      FileType = 144
	FileType_FILE_TYPE_UUEFILE      FileType = 145
	FileType_FILE_TYPE_VBFILE       FileType = 146
	FileType_FILE_TYPE_VCDFILE      FileType = 147
	FileType_FILE_TYPE_VCFFILE      FileType = 148
	FileType_FILE_TYPE_VOBFILE      FileType = 149
	FileType_FILE_TYPE_WAVFILE      FileType = 150
	FileType_FILE_TYPE_WKSFILE      FileType = 151
	FileType_FILE_TYPE_WMAFILE      FileType = 152
	FileType_FILE_TYPE_WMVFILE      FileType = 153
	FileType_FILE_TYPE_WPDFILE      FileType = 154
	FileType_FILE_TYPE_WPSFILE      FileType = 155
	FileType_FILE_TYPE_WSFFILE      FileType = 156
	FileType_FILE_TYPE_XHTMLFILE    FileType = 157
	FileType_FILE_TYPE_XLLFILE      FileType = 158
	FileType_FILE_TYPE_XLSFILE      FileType = 159
	FileType_FILE_TYPE_XLSXFILE     FileType = 160
	FileType_FILE_TYPE_XMLFILE      FileType = 161
	FileType_FILE_TYPE_YUVFILE      FileType = 162
	FileType_FILE_TYPE_ZIPFILE      FileType = 163
	FileType_FILE_TYPE_ZIPXFILE     FileType = 164
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0:   "FILE_TYPE_UNSPECIFIED",
		1:   "FILE_TYPE_E_3DMFILE",
		2:   "FILE_TYPE_E_3G2FILE",
		3:   "FILE_TYPE_E_3GPFILE",
		4:   "FILE_TYPE_E_7ZFILE",
		5:   "FILE_TYPE_E_8BIFILE",
		6:   "FILE_TYPE_AACFILE",
		7:   "FILE_TYPE_ACCDBFILE",
		8:   "FILE_TYPE_AIFFILE",
		9:   "FILE_TYPE_AIFILE",
		10:  "FILE_TYPE_ANAFILE",
		11:  "FILE_TYPE_APPFILE",
		12:  "FILE_TYPE_ASFFILE",
		13:  "FILE_TYPE_ASPFILE",
		14:  "FILE_TYPE_ASXFILE",
		15:  "FILE_TYPE_AUDFILE",
		16:  "FILE_TYPE_AVIFILE",
		17:  "FILE_TYPE_BAKFILE",
		18:  "FILE_TYPE_BATFILE",
		19:  "FILE_TYPE_BINFILE",
		20:  "FILE_TYPE_BMPFILE",
		21:  "FILE_TYPE_BTFILE",
		22:  "FILE_TYPE_BWFFILE",
		23:  "FILE_TYPE_CABFILE",
		24:  "FILE_TYPE_CERFILE",
		25:  "FILE_TYPE_CFGFILE",
		26:  "FILE_TYPE_CFILE",
		27:  "FILE_TYPE_CGIFILE",
		28:  "FILE_TYPE_CLASSFILE",
		29:  "FILE_TYPE_COMFILE",
		30:  "FILE_TYPE_CPLFILE",
		31:  "FILE_TYPE_CPPFILE",
		32:  "FILE_TYPE_CSFILE",
		33:  "FILE_TYPE_CSRFILE",
		34:  "FILE_TYPE_CSSFILE",
		35:  "FILE_TYPE_CSVFILE",
		36:  "FILE_TYPE_CURFILE",
		37:  "FILE_TYPE_DATFILE",
		38:  "FILE_TYPE_DBFILE",
		39:  "FILE_TYPE_DBXFILE",
		40:  "FILE_TYPE_DEBFILE",
		41:  "FILE_TYPE_DLLFILE",
		42:  "FILE_TYPE_DMGFILE",
		43:  "FILE_TYPE_DMPFILE",
		44:  "FILE_TYPE_DOCFILE",
		45:  "FILE_TYPE_DOCXFILE",
		46:  "FILE_TYPE_DRVFILE",
		47:  "FILE_TYPE_DRWFILE",
		48:  "FILE_TYPE_DSDFILE",
		49:  "FILE_TYPE_DTDFILE",
		50:  "FILE_TYPE_DVFILE",
		51:  "FILE_TYPE_DWGFILE",
		52:  "FILE_TYPE_DXFFILE",
		53:  "FILE_TYPE_EFXFILE",
		54:  "FILE_TYPE_EPSFILE",
		55:  "FILE_TYPE_EXEFILE",
		56:  "FILE_TYPE_FLAFILE",
		57:  "FILE_TYPE_FLVFILE",
		58:  "FILE_TYPE_FNTFILE",
		59:  "FILE_TYPE_FONFILE",
		60:  "FILE_TYPE_GADGETFILE",
		61:  "FILE_TYPE_GAMFILE",
		62:  "FILE_TYPE_GHOFILE",
		63:  "FILE_TYPE_GIFFILE",
		64:  "FILE_TYPE_GPXFILE",
		65:  "FILE_TYPE_GZFILE",
		66:  "FILE_TYPE_HQXFILE",
		67:  "FILE_TYPE_HTMFILE",
		68:  "FILE_TYPE_HTMLFILE",
		69:  "FILE_TYPE_IFFFILE",
		70:  "FILE_TYPE_INDDFILE",
		71:  "FILE_TYPE_INIFILE",
		72:  "FILE_TYPE_ISOFILE",
		73:  "FILE_TYPE_JARFILE",
		74:  "FILE_TYPE_JAVAFILE",
		75:  "FILE_TYPE_JPGFILE",
		76:  "FILE_TYPE_JSFILE",
		77:  "FILE_TYPE_JSPFILE",
		78:  "FILE_TYPE_KEYCHAINFILE",
		79:  "FILE_TYPE_KEYFILE",
		80:  "FILE_TYPE_KMLFILE",
		81:  "FILE_TYPE_LNKFILE",
		82:  "FILE_TYPE_LOGFILE",
		83:  "FILE_TYPE_M3UFILE",
		84:  "FILE_TYPE_MAXFILE",
		85:  "FILE_TYPE_MDBFILE",
		86:  "FILE_TYPE_MFILE",
		87:  "FILE_TYPE_MIDFILE",
		88:  "FILE_TYPE_MIMFILE",
		89:  "FILE_TYPE_MOVFILE",
		90:  "FILE_TYPE_MP3FILE",
		91:  "FILE_TYPE_MP4FILE",
		92:  "FILE_TYPE_MPAFILE",
		93:  "FILE_TYPE_MPGFILE",
		94:  "FILE_TYPE_MSGFILE",
		95:  "FILE_TYPE_NESFILE",
		96:  "FILE_TYPE_NEUFILE",
		97:  "FILE_TYPE_ORIFILE",
		98:  "FILE_TYPE_OTFFILE",
		99:  "FILE_TYPE_PAGESFILE",
		100: "FILE_TYPE_PCMFILE",
		101: "FILE_TYPE_PCTFILE",
		102: "FILE_TYPE_PDBFILE",
		103: "FILE_TYPE_PDFFILE",
		104: "FILE_TYPE_PHPFILE",
		105: "FILE_TYPE_PIFFILE",
		106: "FILE_TYPE_PKGFILE",
		107: "FILE_TYPE_PLFILE",
		108: "FILE_TYPE_PLNFILE",
		109: "FILE_TYPE_PLUGINFILE",
		110: "FILE_TYPE_PNGFILE",
		111: "FILE_TYPE_PPSFILE",
		112: "FILE_TYPE_PPTFILE",
		113: "FILE_TYPE_PPTXFILE",
		114: "FILE_TYPE_PRFFILE",
		115: "FILE_TYPE_PSDFILE",
		116: "FILE_TYPE_PSFILE",
		117: "FILE_TYPE_PSPIMAGEFILE",
		118: "FILE_TYPE_PTSFILE",
		119: "FILE_TYPE_QXDFILE",
		120: "FILE_TYPE_QXPFILE",
		121: "FILE_TYPE_RAFILE",
		122: "FILE_TYPE_RARFILE",
		123: "FILE_TYPE_RELSFILE",
		124: "FILE_TYPE_RMFILE",
		125: "FILE_TYPE_ROMFILE",
		126: "FILE_TYPE_RSSFILE",
		127: "FILE_TYPE_RTFFILE",
		128: "FILE_TYPE_SAVFILE",
		129: "FILE_TYPE_SD2FILE",
		130: "FILE_TYPE_SDFFILE",
		131: "FILE_TYPE_SITFILE",
		132: "FILE_TYPE_SITXFILE",
		133: "FILE_TYPE_SQLFILE",
		134: "FILE_TYPE_SVGFILE",
		135: "FILE_TYPE_SWFFILE",
		136: "FILE_TYPE_SYSFILE",
		137: "FILE_TYPE_TARFILE",
		138: "FILE_TYPE_TARGZFILE",
		139: "FILE_TYPE_THMFILE",
		140: "FILE_TYPE_TIFFILE",
		141: "FILE_TYPE_TMPFILE",
		142: "FILE_TYPE_TOASTFILE",
		143: "FILE_TYPE_TTFFILE",
		144: "FILE_TYPE_TXTFILE",
		145: "FILE_TYPE_UUEFILE",
		146: "FILE_TYPE_VBFILE",
		147: "FILE_TYPE_VCDFILE",
		148: "FILE_TYPE_VCFFILE",
		149: "FILE_TYPE_VOBFILE",
		150: "FILE_TYPE_WAVFILE",
		151: "FILE_TYPE_WKSFILE",
		152: "FILE_TYPE_WMAFILE",
		153: "FILE_TYPE_WMVFILE",
		154: "FILE_TYPE_WPDFILE",
		155: "FILE_TYPE_WPSFILE",
		156: "FILE_TYPE_WSFFILE",
		157: "FILE_TYPE_XHTMLFILE",
		158: "FILE_TYPE_XLLFILE",
		159: "FILE_TYPE_XLSFILE",
		160: "FILE_TYPE_XLSXFILE",
		161: "FILE_TYPE_XMLFILE",
		162: "FILE_TYPE_YUVFILE",
		163: "FILE_TYPE_ZIPFILE",
		164: "FILE_TYPE_ZIPXFILE",
	}
	FileType_value = map[string]int32{
		"FILE_TYPE_UNSPECIFIED":  0,
		"FILE_TYPE_E_3DMFILE":    1,
		"FILE_TYPE_E_3G2FILE":    2,
		"FILE_TYPE_E_3GPFILE":    3,
		"FILE_TYPE_E_7ZFILE":     4,
		"FILE_TYPE_E_8BIFILE":    5,
		"FILE_TYPE_AACFILE":      6,
		"FILE_TYPE_ACCDBFILE":    7,
		"FILE_TYPE_AIFFILE":      8,
		"FILE_TYPE_AIFILE":       9,
		"FILE_TYPE_ANAFILE":      10,
		"FILE_TYPE_APPFILE":      11,
		"FILE_TYPE_ASFFILE":      12,
		"FILE_TYPE_ASPFILE":      13,
		"FILE_TYPE_ASXFILE":      14,
		"FILE_TYPE_AUDFILE":      15,
		"FILE_TYPE_AVIFILE":      16,
		"FILE_TYPE_BAKFILE":      17,
		"FILE_TYPE_BATFILE":      18,
		"FILE_TYPE_BINFILE":      19,
		"FILE_TYPE_BMPFILE":      20,
		"FILE_TYPE_BTFILE":       21,
		"FILE_TYPE_BWFFILE":      22,
		"FILE_TYPE_CABFILE":      23,
		"FILE_TYPE_CERFILE":      24,
		"FILE_TYPE_CFGFILE":      25,
		"FILE_TYPE_CFILE":        26,
		"FILE_TYPE_CGIFILE":      27,
		"FILE_TYPE_CLASSFILE":    28,
		"FILE_TYPE_COMFILE":      29,
		"FILE_TYPE_CPLFILE":      30,
		"FILE_TYPE_CPPFILE":      31,
		"FILE_TYPE_CSFILE":       32,
		"FILE_TYPE_CSRFILE":      33,
		"FILE_TYPE_CSSFILE":      34,
		"FILE_TYPE_CSVFILE":      35,
		"FILE_TYPE_CURFILE":      36,
		"FILE_TYPE_DATFILE":      37,
		"FILE_TYPE_DBFILE":       38,
		"FILE_TYPE_DBXFILE":      39,
		"FILE_TYPE_DEBFILE":      40,
		"FILE_TYPE_DLLFILE":      41,
		"FILE_TYPE_DMGFILE":      42,
		"FILE_TYPE_DMPFILE":      43,
		"FILE_TYPE_DOCFILE":      44,
		"FILE_TYPE_DOCXFILE":     45,
		"FILE_TYPE_DRVFILE":      46,
		"FILE_TYPE_DRWFILE":      47,
		"FILE_TYPE_DSDFILE":      48,
		"FILE_TYPE_DTDFILE":      49,
		"FILE_TYPE_DVFILE":       50,
		"FILE_TYPE_DWGFILE":      51,
		"FILE_TYPE_DXFFILE":      52,
		"FILE_TYPE_EFXFILE":      53,
		"FILE_TYPE_EPSFILE":      54,
		"FILE_TYPE_EXEFILE":      55,
		"FILE_TYPE_FLAFILE":      56,
		"FILE_TYPE_FLVFILE":      57,
		"FILE_TYPE_FNTFILE":      58,
		"FILE_TYPE_FONFILE":      59,
		"FILE_TYPE_GADGETFILE":   60,
		"FILE_TYPE_GAMFILE":      61,
		"FILE_TYPE_GHOFILE":      62,
		"FILE_TYPE_GIFFILE":      63,
		"FILE_TYPE_GPXFILE":      64,
		"FILE_TYPE_GZFILE":       65,
		"FILE_TYPE_HQXFILE":      66,
		"FILE_TYPE_HTMFILE":      67,
		"FILE_TYPE_HTMLFILE":     68,
		"FILE_TYPE_IFFFILE":      69,
		"FILE_TYPE_INDDFILE":     70,
		"FILE_TYPE_INIFILE":      71,
		"FILE_TYPE_ISOFILE":      72,
		"FILE_TYPE_JARFILE":      73,
		"FILE_TYPE_JAVAFILE":     74,
		"FILE_TYPE_JPGFILE":      75,
		"FILE_TYPE_JSFILE":       76,
		"FILE_TYPE_JSPFILE":      77,
		"FILE_TYPE_KEYCHAINFILE": 78,
		"FILE_TYPE_KEYFILE":      79,
		"FILE_TYPE_KMLFILE":      80,
		"FILE_TYPE_LNKFILE":      81,
		"FILE_TYPE_LOGFILE":      82,
		"FILE_TYPE_M3UFILE":      83,
		"FILE_TYPE_MAXFILE":      84,
		"FILE_TYPE_MDBFILE":      85,
		"FILE_TYPE_MFILE":        86,
		"FILE_TYPE_MIDFILE":      87,
		"FILE_TYPE_MIMFILE":      88,
		"FILE_TYPE_MOVFILE":      89,
		"FILE_TYPE_MP3FILE":      90,
		"FILE_TYPE_MP4FILE":      91,
		"FILE_TYPE_MPAFILE":      92,
		"FILE_TYPE_MPGFILE":      93,
		"FILE_TYPE_MSGFILE":      94,
		"FILE_TYPE_NESFILE":      95,
		"FILE_TYPE_NEUFILE":      96,
		"FILE_TYPE_ORIFILE":      97,
		"FILE_TYPE_OTFFILE":      98,
		"FILE_TYPE_PAGESFILE":    99,
		"FILE_TYPE_PCMFILE":      100,
		"FILE_TYPE_PCTFILE":      101,
		"FILE_TYPE_PDBFILE":      102,
		"FILE_TYPE_PDFFILE":      103,
		"FILE_TYPE_PHPFILE":      104,
		"FILE_TYPE_PIFFILE":      105,
		"FILE_TYPE_PKGFILE":      106,
		"FILE_TYPE_PLFILE":       107,
		"FILE_TYPE_PLNFILE":      108,
		"FILE_TYPE_PLUGINFILE":   109,
		"FILE_TYPE_PNGFILE":      110,
		"FILE_TYPE_PPSFILE":      111,
		"FILE_TYPE_PPTFILE":      112,
		"FILE_TYPE_PPTXFILE":     113,
		"FILE_TYPE_PRFFILE":      114,
		"FILE_TYPE_PSDFILE":      115,
		"FILE_TYPE_PSFILE":       116,
		"FILE_TYPE_PSPIMAGEFILE": 117,
		"FILE_TYPE_PTSFILE":      118,
		"FILE_TYPE_QXDFILE":      119,
		"FILE_TYPE_QXPFILE":      120,
		"FILE_TYPE_RAFILE":       121,
		"FILE_TYPE_RARFILE":      122,
		"FILE_TYPE_RELSFILE":     123,
		"FILE_TYPE_RMFILE":       124,
		"FILE_TYPE_ROMFILE":      125,
		"FILE_TYPE_RSSFILE":      126,
		"FILE_TYPE_RTFFILE":      127,
		"FILE_TYPE_SAVFILE":      128,
		"FILE_TYPE_SD2FILE":      129,
		"FILE_TYPE_SDFFILE":      130,
		"FILE_TYPE_SITFILE":      131,
		"FILE_TYPE_SITXFILE":     132,
		"FILE_TYPE_SQLFILE":      133,
		"FILE_TYPE_SVGFILE":      134,
		"FILE_TYPE_SWFFILE":      135,
		"FILE_TYPE_SYSFILE":      136,
		"FILE_TYPE_TARFILE":      137,
		"FILE_TYPE_TARGZFILE":    138,
		"FILE_TYPE_THMFILE":      139,
		"FILE_TYPE_TIFFILE":      140,
		"FILE_TYPE_TMPFILE":      141,
		"FILE_TYPE_TOASTFILE":    142,
		"FILE_TYPE_TTFFILE":      143,
		"FILE_TYPE_TXTFILE":      144,
		"FILE_TYPE_UUEFILE":      145,
		"FILE_TYPE_VBFILE":       146,
		"FILE_TYPE_VCDFILE":      147,
		"FILE_TYPE_VCFFILE":      148,
		"FILE_TYPE_VOBFILE":      149,
		"FILE_TYPE_WAVFILE":      150,
		"FILE_TYPE_WKSFILE":      151,
		"FILE_TYPE_WMAFILE":      152,
		"FILE_TYPE_WMVFILE":      153,
		"FILE_TYPE_WPDFILE":      154,
		"FILE_TYPE_WPSFILE":      155,
		"FILE_TYPE_WSFFILE":      156,
		"FILE_TYPE_XHTMLFILE":    157,
		"FILE_TYPE_XLLFILE":      158,
		"FILE_TYPE_XLSFILE":      159,
		"FILE_TYPE_XLSXFILE":     160,
		"FILE_TYPE_XMLFILE":      161,
		"FILE_TYPE_YUVFILE":      162,
		"FILE_TYPE_ZIPFILE":      163,
		"FILE_TYPE_ZIPXFILE":     164,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[90].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[90]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{90}
}

type FingerprintAlgorithmType int32

const (
	FingerprintAlgorithmType_FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED FingerprintAlgorithmType = 0
	FingerprintAlgorithmType_FINGERPRINT_ALGORITHM_TYPE_ISCC        FingerprintAlgorithmType = 1
	FingerprintAlgorithmType_FINGERPRINT_ALGORITHM_TYPE_USERDEFINED FingerprintAlgorithmType = 2
)

// Enum value maps for FingerprintAlgorithmType.
var (
	FingerprintAlgorithmType_name = map[int32]string{
		0: "FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED",
		1: "FINGERPRINT_ALGORITHM_TYPE_ISCC",
		2: "FINGERPRINT_ALGORITHM_TYPE_USERDEFINED",
	}
	FingerprintAlgorithmType_value = map[string]int32{
		"FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED": 0,
		"FINGERPRINT_ALGORITHM_TYPE_ISCC":        1,
		"FINGERPRINT_ALGORITHM_TYPE_USERDEFINED": 2,
	}
)

func (x FingerprintAlgorithmType) Enum() *FingerprintAlgorithmType {
	p := new(FingerprintAlgorithmType)
	*p = x
	return p
}

func (x FingerprintAlgorithmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FingerprintAlgorithmType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[91].Descriptor()
}

func (FingerprintAlgorithmType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[91]
}

func (x FingerprintAlgorithmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FingerprintAlgorithmType.Descriptor instead.
func (FingerprintAlgorithmType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{91}
}

type FrameRate int32

const (
	FrameRate_FRAME_RATE_UNSPECIFIED FrameRate = 0
	FrameRate_FRAME_RATE_E_24        FrameRate = 1
	FrameRate_FRAME_RATE_E_25        FrameRate = 2
	FrameRate_FRAME_RATE_E_29_97     FrameRate = 3
	FrameRate_FRAME_RATE_E_30        FrameRate = 4
)

// Enum value maps for FrameRate.
var (
	FrameRate_name = map[int32]string{
		0: "FRAME_RATE_UNSPECIFIED",
		1: "FRAME_RATE_E_24",
		2: "FRAME_RATE_E_25",
		3: "FRAME_RATE_E_29_97",
		4: "FRAME_RATE_E_30",
	}
	FrameRate_value = map[string]int32{
		"FRAME_RATE_UNSPECIFIED": 0,
		"FRAME_RATE_E_24":        1,
		"FRAME_RATE_E_25":        2,
		"FRAME_RATE_E_29_97":     3,
		"FRAME_RATE_E_30":        4,
	}
)

func (x FrameRate) Enum() *FrameRate {
	p := new(FrameRate)
	*p = x
	return p
}

func (x FrameRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrameRate) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[92].Descriptor()
}

func (FrameRate) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[92]
}

func (x FrameRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrameRate.Descriptor instead.
func (FrameRate) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{92}
}

type Gender int32

const (
	Gender_GENDER_UNSPECIFIED Gender = 0
	Gender_GENDER_ANDROGYNOUS Gender = 1
	Gender_GENDER_FEMININE    Gender = 2
	Gender_GENDER_MASCULINE   Gender = 3
	Gender_GENDER_UNKNOWN     Gender = 4
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_UNSPECIFIED",
		1: "GENDER_ANDROGYNOUS",
		2: "GENDER_FEMININE",
		3: "GENDER_MASCULINE",
		4: "GENDER_UNKNOWN",
	}
	Gender_value = map[string]int32{
		"GENDER_UNSPECIFIED": 0,
		"GENDER_ANDROGYNOUS": 1,
		"GENDER_FEMININE":    2,
		"GENDER_MASCULINE":   3,
		"GENDER_UNKNOWN":     4,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[93].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[93]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{93}
}

type GenderPIE int32

const (
	GenderPIE_GENDER_P_I_E_UNSPECIFIED    GenderPIE = 0
	GenderPIE_GENDER_P_I_E_FEMALE         GenderPIE = 1
	GenderPIE_GENDER_P_I_E_MALE           GenderPIE = 2
	GenderPIE_GENDER_P_I_E_NOTAPPLICABLE  GenderPIE = 3
	GenderPIE_GENDER_P_I_E_NONBINARY      GenderPIE = 4
	GenderPIE_GENDER_P_I_E_NOTSTATED      GenderPIE = 5
	GenderPIE_GENDER_P_I_E_PREFERNOTTOSAY GenderPIE = 6
	GenderPIE_GENDER_P_I_E_UNKNOWN        GenderPIE = 7
	GenderPIE_GENDER_P_I_E_USERDEFINED    GenderPIE = 8
)

// Enum value maps for GenderPIE.
var (
	GenderPIE_name = map[int32]string{
		0: "GENDER_P_I_E_UNSPECIFIED",
		1: "GENDER_P_I_E_FEMALE",
		2: "GENDER_P_I_E_MALE",
		3: "GENDER_P_I_E_NOTAPPLICABLE",
		4: "GENDER_P_I_E_NONBINARY",
		5: "GENDER_P_I_E_NOTSTATED",
		6: "GENDER_P_I_E_PREFERNOTTOSAY",
		7: "GENDER_P_I_E_UNKNOWN",
		8: "GENDER_P_I_E_USERDEFINED",
	}
	GenderPIE_value = map[string]int32{
		"GENDER_P_I_E_UNSPECIFIED":    0,
		"GENDER_P_I_E_FEMALE":         1,
		"GENDER_P_I_E_MALE":           2,
		"GENDER_P_I_E_NOTAPPLICABLE":  3,
		"GENDER_P_I_E_NONBINARY":      4,
		"GENDER_P_I_E_NOTSTATED":      5,
		"GENDER_P_I_E_PREFERNOTTOSAY": 6,
		"GENDER_P_I_E_UNKNOWN":        7,
		"GENDER_P_I_E_USERDEFINED":    8,
	}
)

func (x GenderPIE) Enum() *GenderPIE {
	p := new(GenderPIE)
	*p = x
	return p
}

func (x GenderPIE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenderPIE) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[94].Descriptor()
}

func (GenderPIE) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[94]
}

func (x GenderPIE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenderPIE.Descriptor instead.
func (GenderPIE) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{94}
}

type GoverningAgreementType int32

const (
	GoverningAgreementType_GOVERNING_AGREEMENT_TYPE_UNSPECIFIED                GoverningAgreementType = 0
	GoverningAgreementType_GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT GoverningAgreementType = 1
	GoverningAgreementType_GOVERNING_AGREEMENT_TYPE_USERDEFINED                GoverningAgreementType = 2
)

// Enum value maps for GoverningAgreementType.
var (
	GoverningAgreementType_name = map[int32]string{
		0: "GOVERNING_AGREEMENT_TYPE_UNSPECIFIED",
		1: "GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT",
		2: "GOVERNING_AGREEMENT_TYPE_USERDEFINED",
	}
	GoverningAgreementType_value = map[string]int32{
		"GOVERNING_AGREEMENT_TYPE_UNSPECIFIED":                0,
		"GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT": 1,
		"GOVERNING_AGREEMENT_TYPE_USERDEFINED":                2,
	}
)

func (x GoverningAgreementType) Enum() *GoverningAgreementType {
	p := new(GoverningAgreementType)
	*p = x
	return p
}

func (x GoverningAgreementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoverningAgreementType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[95].Descriptor()
}

func (GoverningAgreementType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[95]
}

func (x GoverningAgreementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoverningAgreementType.Descriptor instead.
func (GoverningAgreementType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{95}
}

type HdrVideoDynamicMetadataType int32

const (
	HdrVideoDynamicMetadataType_HDR_VIDEO_DYNAMIC_METADATA_TYPE_UNSPECIFIED           HdrVideoDynamicMetadataType = 0
	HdrVideoDynamicMetadataType_HDR_VIDEO_DYNAMIC_METADATA_TYPE_DOLBYVISIONEMBEDDED   HdrVideoDynamicMetadataType = 1
	HdrVideoDynamicMetadataType_HDR_VIDEO_DYNAMIC_METADATA_TYPE_DOLBYVISIONSTANDALONE HdrVideoDynamicMetadataType = 2
)

// Enum value maps for HdrVideoDynamicMetadataType.
var (
	HdrVideoDynamicMetadataType_name = map[int32]string{
		0: "HDR_VIDEO_DYNAMIC_METADATA_TYPE_UNSPECIFIED",
		1: "HDR_VIDEO_DYNAMIC_METADATA_TYPE_DOLBYVISIONEMBEDDED",
		2: "HDR_VIDEO_DYNAMIC_METADATA_TYPE_DOLBYVISIONSTANDALONE",
	}
	HdrVideoDynamicMetadataType_value = map[string]int32{
		"HDR_VIDEO_DYNAMIC_METADATA_TYPE_UNSPECIFIED":           0,
		"HDR_VIDEO_DYNAMIC_METADATA_TYPE_DOLBYVISIONEMBEDDED":   1,
		"HDR_VIDEO_DYNAMIC_METADATA_TYPE_DOLBYVISIONSTANDALONE": 2,
	}
)

func (x HdrVideoDynamicMetadataType) Enum() *HdrVideoDynamicMetadataType {
	p := new(HdrVideoDynamicMetadataType)
	*p = x
	return p
}

func (x HdrVideoDynamicMetadataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HdrVideoDynamicMetadataType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[96].Descriptor()
}

func (HdrVideoDynamicMetadataType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[96]
}

func (x HdrVideoDynamicMetadataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HdrVideoDynamicMetadataType.Descriptor instead.
func (HdrVideoDynamicMetadataType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{96}
}

type HdrVideoStaticMetadataType int32

const (
	HdrVideoStaticMetadataType_HDR_VIDEO_STATIC_METADATA_TYPE_UNSPECIFIED HdrVideoStaticMetadataType = 0
	HdrVideoStaticMetadataType_HDR_VIDEO_STATIC_METADATA_TYPE_MAXCLL      HdrVideoStaticMetadataType = 1
	HdrVideoStaticMetadataType_HDR_VIDEO_STATIC_METADATA_TYPE_MAXFALL     HdrVideoStaticMetadataType = 2
)

// Enum value maps for HdrVideoStaticMetadataType.
var (
	HdrVideoStaticMetadataType_name = map[int32]string{
		0: "HDR_VIDEO_STATIC_METADATA_TYPE_UNSPECIFIED",
		1: "HDR_VIDEO_STATIC_METADATA_TYPE_MAXCLL",
		2: "HDR_VIDEO_STATIC_METADATA_TYPE_MAXFALL",
	}
	HdrVideoStaticMetadataType_value = map[string]int32{
		"HDR_VIDEO_STATIC_METADATA_TYPE_UNSPECIFIED": 0,
		"HDR_VIDEO_STATIC_METADATA_TYPE_MAXCLL":      1,
		"HDR_VIDEO_STATIC_METADATA_TYPE_MAXFALL":     2,
	}
)

func (x HdrVideoStaticMetadataType) Enum() *HdrVideoStaticMetadataType {
	p := new(HdrVideoStaticMetadataType)
	*p = x
	return p
}

func (x HdrVideoStaticMetadataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HdrVideoStaticMetadataType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[97].Descriptor()
}

func (HdrVideoStaticMetadataType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[97]
}

func (x HdrVideoStaticMetadataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HdrVideoStaticMetadataType.Descriptor instead.
func (HdrVideoStaticMetadataType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{97}
}

type ImageCodecType int32

const (
	ImageCodecType_IMAGE_CODEC_TYPE_UNSPECIFIED ImageCodecType = 0
	ImageCodecType_IMAGE_CODEC_TYPE_GIF         ImageCodecType = 1
	ImageCodecType_IMAGE_CODEC_TYPE_JPEG        ImageCodecType = 2
	ImageCodecType_IMAGE_CODEC_TYPE_JPEG2000    ImageCodecType = 3
	ImageCodecType_IMAGE_CODEC_TYPE_PNG         ImageCodecType = 4
	ImageCodecType_IMAGE_CODEC_TYPE_TIFF        ImageCodecType = 5
	ImageCodecType_IMAGE_CODEC_TYPE_UNKNOWN     ImageCodecType = 6
	ImageCodecType_IMAGE_CODEC_TYPE_USERDEFINED ImageCodecType = 7
)

// Enum value maps for ImageCodecType.
var (
	ImageCodecType_name = map[int32]string{
		0: "IMAGE_CODEC_TYPE_UNSPECIFIED",
		1: "IMAGE_CODEC_TYPE_GIF",
		2: "IMAGE_CODEC_TYPE_JPEG",
		3: "IMAGE_CODEC_TYPE_JPEG2000",
		4: "IMAGE_CODEC_TYPE_PNG",
		5: "IMAGE_CODEC_TYPE_TIFF",
		6: "IMAGE_CODEC_TYPE_UNKNOWN",
		7: "IMAGE_CODEC_TYPE_USERDEFINED",
	}
	ImageCodecType_value = map[string]int32{
		"IMAGE_CODEC_TYPE_UNSPECIFIED": 0,
		"IMAGE_CODEC_TYPE_GIF":         1,
		"IMAGE_CODEC_TYPE_JPEG":        2,
		"IMAGE_CODEC_TYPE_JPEG2000":    3,
		"IMAGE_CODEC_TYPE_PNG":         4,
		"IMAGE_CODEC_TYPE_TIFF":        5,
		"IMAGE_CODEC_TYPE_UNKNOWN":     6,
		"IMAGE_CODEC_TYPE_USERDEFINED": 7,
	}
)

func (x ImageCodecType) Enum() *ImageCodecType {
	p := new(ImageCodecType)
	*p = x
	return p
}

func (x ImageCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[98].Descriptor()
}

func (ImageCodecType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[98]
}

func (x ImageCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageCodecType.Descriptor instead.
func (ImageCodecType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{98}
}

type InstrumentManufacturer int32

const (
	InstrumentManufacturer_INSTRUMENT_MANUFACTURER_UNSPECIFIED InstrumentManufacturer = 0
	InstrumentManufacturer_INSTRUMENT_MANUFACTURER_USERDEFINED InstrumentManufacturer = 1
)

// Enum value maps for InstrumentManufacturer.
var (
	InstrumentManufacturer_name = map[int32]string{
		0: "INSTRUMENT_MANUFACTURER_UNSPECIFIED",
		1: "INSTRUMENT_MANUFACTURER_USERDEFINED",
	}
	InstrumentManufacturer_value = map[string]int32{
		"INSTRUMENT_MANUFACTURER_UNSPECIFIED": 0,
		"INSTRUMENT_MANUFACTURER_USERDEFINED": 1,
	}
)

func (x InstrumentManufacturer) Enum() *InstrumentManufacturer {
	p := new(InstrumentManufacturer)
	*p = x
	return p
}

func (x InstrumentManufacturer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentManufacturer) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[99].Descriptor()
}

func (InstrumentManufacturer) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[99]
}

func (x InstrumentManufacturer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentManufacturer.Descriptor instead.
func (InstrumentManufacturer) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{99}
}

type InstrumentModel int32

const (
	InstrumentModel_INSTRUMENT_MODEL_UNSPECIFIED InstrumentModel = 0
	InstrumentModel_INSTRUMENT_MODEL_USERDEFINED InstrumentModel = 1
)

// Enum value maps for InstrumentModel.
var (
	InstrumentModel_name = map[int32]string{
		0: "INSTRUMENT_MODEL_UNSPECIFIED",
		1: "INSTRUMENT_MODEL_USERDEFINED",
	}
	InstrumentModel_value = map[string]int32{
		"INSTRUMENT_MODEL_UNSPECIFIED": 0,
		"INSTRUMENT_MODEL_USERDEFINED": 1,
	}
)

func (x InstrumentModel) Enum() *InstrumentModel {
	p := new(InstrumentModel)
	*p = x
	return p
}

func (x InstrumentModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentModel) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[100].Descriptor()
}

func (InstrumentModel) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[100]
}

func (x InstrumentModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentModel.Descriptor instead.
func (InstrumentModel) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{100}
}

type InstrumentType int32

const (
	InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED                   InstrumentType = 0
	InstrumentType_INSTRUMENT_TYPE_ACCORDION                     InstrumentType = 1
	InstrumentType_INSTRUMENT_TYPE_BANDONEON                     InstrumentType = 2
	InstrumentType_INSTRUMENT_TYPE_CHROMATICBUTTONACCORDION      InstrumentType = 3
	InstrumentType_INSTRUMENT_TYPE_CONCERTINA                    InstrumentType = 4
	InstrumentType_INSTRUMENT_TYPE_CORDOVOX                      InstrumentType = 5
	InstrumentType_INSTRUMENT_TYPE_MELODEON                      InstrumentType = 6
	InstrumentType_INSTRUMENT_TYPE_MUSETTE                       InstrumentType = 7
	InstrumentType_INSTRUMENT_TYPE_PIANOACCORDION                InstrumentType = 8
	InstrumentType_INSTRUMENT_TYPE_TOYACCORDION                  InstrumentType = 9
	InstrumentType_INSTRUMENT_TYPE_ACOUSTICBASSGUITAR            InstrumentType = 10
	InstrumentType_INSTRUMENT_TYPE_BABYBASS                      InstrumentType = 11
	InstrumentType_INSTRUMENT_TYPE_BASS                          InstrumentType = 12
	InstrumentType_INSTRUMENT_TYPE_BASSGUITAR                    InstrumentType = 13
	InstrumentType_INSTRUMENT_TYPE_ELECTRICBASSGUITAR            InstrumentType = 14
	InstrumentType_INSTRUMENT_TYPE_FRETLESSBASSGUITAR            InstrumentType = 15
	InstrumentType_INSTRUMENT_TYPE_PICCOLOBASS                   InstrumentType = 16
	InstrumentType_INSTRUMENT_TYPE_UPRIGHTBASS                   InstrumentType = 17
	InstrumentType_INSTRUMENT_TYPE_WASHTUBBASS                   InstrumentType = 18
	InstrumentType_INSTRUMENT_TYPE_DRUMMACHINE                   InstrumentType = 19
	InstrumentType_INSTRUMENT_TYPE_BREAKBEAT                     InstrumentType = 20
	InstrumentType_INSTRUMENT_TYPE_DRUMKIT                       InstrumentType = 21
	InstrumentType_INSTRUMENT_TYPE_DRUMSAMPLE                    InstrumentType = 22
	InstrumentType_INSTRUMENT_TYPE_E_12_STRINGELECTRICGUITAR     InstrumentType = 23
	InstrumentType_INSTRUMENT_TYPE_E_12_STRINGGUITAR             InstrumentType = 24
	InstrumentType_INSTRUMENT_TYPE_ACOUSTICGUITAR                InstrumentType = 25
	InstrumentType_INSTRUMENT_TYPE_BAHIANGUITAR                  InstrumentType = 26
	InstrumentType_INSTRUMENT_TYPE_BAJOSEXTO                     InstrumentType = 27
	InstrumentType_INSTRUMENT_TYPE_BARITONEGUITAR                InstrumentType = 28
	InstrumentType_INSTRUMENT_TYPE_BAROQUEGUITAR                 InstrumentType = 29
	InstrumentType_INSTRUMENT_TYPE_CHAPMANSTICK                  InstrumentType = 30
	InstrumentType_INSTRUMENT_TYPE_NYLONSTRINGGUITAR             InstrumentType = 31
	InstrumentType_INSTRUMENT_TYPE_DOBROGUITAR                   InstrumentType = 32
	InstrumentType_INSTRUMENT_TYPE_ELECTRICGUITAR                InstrumentType = 33
	InstrumentType_INSTRUMENT_TYPE_ELECTRICSITAR                 InstrumentType = 34
	InstrumentType_INSTRUMENT_TYPE_FRYINGPANGUITAR               InstrumentType = 35
	InstrumentType_INSTRUMENT_TYPE_GUITAR                        InstrumentType = 36
	InstrumentType_INSTRUMENT_TYPE_GUITARRON                     InstrumentType = 37
	InstrumentType_INSTRUMENT_TYPE_LAPSTEELGUITAR                InstrumentType = 38
	InstrumentType_INSTRUMENT_TYPE_PEDABRO                       InstrumentType = 39
	InstrumentType_INSTRUMENT_TYPE_PEDALSTEELGUITAR              InstrumentType = 40
	InstrumentType_INSTRUMENT_TYPE_PORTUGUESEGUITAR              InstrumentType = 41
	InstrumentType_INSTRUMENT_TYPE_RENAISSANCEGUITAR             InstrumentType = 42
	InstrumentType_INSTRUMENT_TYPE_ROMANTICGUITAR                InstrumentType = 43
	InstrumentType_INSTRUMENT_TYPE_TENORGUITAR                   InstrumentType = 44
	InstrumentType_INSTRUMENT_TYPE_TIPLE                         InstrumentType = 45
	InstrumentType_INSTRUMENT_TYPE_TOUCHGUITAR                   InstrumentType = 46
	InstrumentType_INSTRUMENT_TYPE_TRES                          InstrumentType = 47
	InstrumentType_INSTRUMENT_TYPE_VIOLACAIPIRA                  InstrumentType = 48
	InstrumentType_INSTRUMENT_TYPE_ACOUSTICKEYBOARD              InstrumentType = 49
	InstrumentType_INSTRUMENT_TYPE_CELESTA                       InstrumentType = 50
	InstrumentType_INSTRUMENT_TYPE_CHAMBERLIN                    InstrumentType = 51
	InstrumentType_INSTRUMENT_TYPE_CLAVICHORD                    InstrumentType = 52
	InstrumentType_INSTRUMENT_TYPE_CLAVINET                      InstrumentType = 53
	InstrumentType_INSTRUMENT_TYPE_DULCITONE                     InstrumentType = 54
	InstrumentType_INSTRUMENT_TYPE_ELECTRICPIANO                 InstrumentType = 55
	InstrumentType_INSTRUMENT_TYPE_HARPSICHORD                   InstrumentType = 56
	InstrumentType_INSTRUMENT_TYPE_KEYBOARD                      InstrumentType = 57
	InstrumentType_INSTRUMENT_TYPE_KLAVIER                       InstrumentType = 58
	InstrumentType_INSTRUMENT_TYPE_MELLOTRON                     InstrumentType = 59
	InstrumentType_INSTRUMENT_TYPE_OPTIGAN                       InstrumentType = 60
	InstrumentType_INSTRUMENT_TYPE_PIANET                        InstrumentType = 61
	InstrumentType_INSTRUMENT_TYPE_RHODES                        InstrumentType = 62
	InstrumentType_INSTRUMENT_TYPE_SAMPLEDKEYBOARD               InstrumentType = 63
	InstrumentType_INSTRUMENT_TYPE_SPINET                        InstrumentType = 64
	InstrumentType_INSTRUMENT_TYPE_VAKOORCHESTRON                InstrumentType = 65
	InstrumentType_INSTRUMENT_TYPE_VIRGINALS                     InstrumentType = 66
	InstrumentType_INSTRUMENT_TYPE_ELECTRICORGAN                 InstrumentType = 67
	InstrumentType_INSTRUMENT_TYPE_HAMMONDORGAN                  InstrumentType = 68
	InstrumentType_INSTRUMENT_TYPE_LOWREYORGAN                   InstrumentType = 69
	InstrumentType_INSTRUMENT_TYPE_ORGAN                         InstrumentType = 70
	InstrumentType_INSTRUMENT_TYPE_PIPEORGAN                     InstrumentType = 71
	InstrumentType_INSTRUMENT_TYPE_POSITIVEORGAN                 InstrumentType = 72
	InstrumentType_INSTRUMENT_TYPE_PUMPORGAN                     InstrumentType = 73
	InstrumentType_INSTRUMENT_TYPE_BARRELORGAN                   InstrumentType = 74
	InstrumentType_INSTRUMENT_TYPE_BICYCLEPUMP                   InstrumentType = 75
	InstrumentType_INSTRUMENT_TYPE_CHURCHBELLS                   InstrumentType = 76
	InstrumentType_INSTRUMENT_TYPE_COMB                          InstrumentType = 77
	InstrumentType_INSTRUMENT_TYPE_DICTOPHONE                    InstrumentType = 78
	InstrumentType_INSTRUMENT_TYPE_HOHNERGUITARET                InstrumentType = 79
	InstrumentType_INSTRUMENT_TYPE_JEWSHARP                      InstrumentType = 80
	InstrumentType_INSTRUMENT_TYPE_KAZOO                         InstrumentType = 81
	InstrumentType_INSTRUMENT_TYPE_MUSICBOX                      InstrumentType = 82
	InstrumentType_INSTRUMENT_TYPE_OMNICHORD                     InstrumentType = 83
	InstrumentType_INSTRUMENT_TYPE_OTHERINSTRUMENT               InstrumentType = 84
	InstrumentType_INSTRUMENT_TYPE_SPECTRASONICSOMNISPHERE       InstrumentType = 85
	InstrumentType_INSTRUMENT_TYPE_TOYPIANO                      InstrumentType = 86
	InstrumentType_INSTRUMENT_TYPE_TURNTABLE                     InstrumentType = 87
	InstrumentType_INSTRUMENT_TYPE_AFRICANPERCUSSION             InstrumentType = 88
	InstrumentType_INSTRUMENT_TYPE_AGOGOBELLS                    InstrumentType = 89
	InstrumentType_INSTRUMENT_TYPE_ANGKLUNG                      InstrumentType = 90
	InstrumentType_INSTRUMENT_TYPE_ANVIL                         InstrumentType = 91
	InstrumentType_INSTRUMENT_TYPE_ATUMPAN                       InstrumentType = 92
	InstrumentType_INSTRUMENT_TYPE_BALAFON                       InstrumentType = 93
	InstrumentType_INSTRUMENT_TYPE_BASSDRUM_CONCERT              InstrumentType = 94
	InstrumentType_INSTRUMENT_TYPE_BASSDRUM_KICK                 InstrumentType = 95
	InstrumentType_INSTRUMENT_TYPE_BATA                          InstrumentType = 96
	InstrumentType_INSTRUMENT_TYPE_BELLS                         InstrumentType = 97
	InstrumentType_INSTRUMENT_TYPE_BELLTREE                      InstrumentType = 98
	InstrumentType_INSTRUMENT_TYPE_BENDIR                        InstrumentType = 99
	InstrumentType_INSTRUMENT_TYPE_BERIMBAU                      InstrumentType = 100
	InstrumentType_INSTRUMENT_TYPE_BINGHIDRUM                    InstrumentType = 101
	InstrumentType_INSTRUMENT_TYPE_BODHRAN                       InstrumentType = 102
	InstrumentType_INSTRUMENT_TYPE_BODYPERCUSSION                InstrumentType = 103
	InstrumentType_INSTRUMENT_TYPE_BOMBO                         InstrumentType = 104
	InstrumentType_INSTRUMENT_TYPE_BOMBOLEGUERO                  InstrumentType = 105
	InstrumentType_INSTRUMENT_TYPE_BONES                         InstrumentType = 106
	InstrumentType_INSTRUMENT_TYPE_BONGOS                        InstrumentType = 107
	InstrumentType_INSTRUMENT_TYPE_BOTTLES                       InstrumentType = 108
	InstrumentType_INSTRUMENT_TYPE_BRAZILIANPERCUSSION           InstrumentType = 109
	InstrumentType_INSTRUMENT_TYPE_CABASA                        InstrumentType = 110
	InstrumentType_INSTRUMENT_TYPE_CAIXA                         InstrumentType = 111
	InstrumentType_INSTRUMENT_TYPE_CAJA                          InstrumentType = 112
	InstrumentType_INSTRUMENT_TYPE_CAJON                         InstrumentType = 113
	InstrumentType_INSTRUMENT_TYPE_CALABASH                      InstrumentType = 114
	InstrumentType_INSTRUMENT_TYPE_CARILLON                      InstrumentType = 115
	InstrumentType_INSTRUMENT_TYPE_CASTANET                      InstrumentType = 116
	InstrumentType_INSTRUMENT_TYPE_CAXIXI                        InstrumentType = 117
	InstrumentType_INSTRUMENT_TYPE_CHIMES                        InstrumentType = 118
	InstrumentType_INSTRUMENT_TYPE_CHOCALHO                      InstrumentType = 119
	InstrumentType_INSTRUMENT_TYPE_CLAPSTICK                     InstrumentType = 120
	InstrumentType_INSTRUMENT_TYPE_CLAVES                        InstrumentType = 121
	InstrumentType_INSTRUMENT_TYPE_CLAYPOT                       InstrumentType = 122
	InstrumentType_INSTRUMENT_TYPE_CONGAS                        InstrumentType = 123
	InstrumentType_INSTRUMENT_TYPE_COWBELL                       InstrumentType = 124
	InstrumentType_INSTRUMENT_TYPE_CROTALES                      InstrumentType = 125
	InstrumentType_INSTRUMENT_TYPE_CUICA                         InstrumentType = 126
	InstrumentType_INSTRUMENT_TYPE_CYMBAL_CRASH                  InstrumentType = 127
	InstrumentType_INSTRUMENT_TYPE_CYMBAL_RIDE                   InstrumentType = 128
	InstrumentType_INSTRUMENT_TYPE_CYMBAL_SUSPENDED              InstrumentType = 129
	InstrumentType_INSTRUMENT_TYPE_CYMBALS                       InstrumentType = 130
	InstrumentType_INSTRUMENT_TYPE_DAF                           InstrumentType = 131
	InstrumentType_INSTRUMENT_TYPE_DAMARU                        InstrumentType = 132
	InstrumentType_INSTRUMENT_TYPE_DAVUL                         InstrumentType = 133
	InstrumentType_INSTRUMENT_TYPE_DAYEREH                       InstrumentType = 134
	InstrumentType_INSTRUMENT_TYPE_DEFI                          InstrumentType = 135
	InstrumentType_INSTRUMENT_TYPE_DHOL                          InstrumentType = 136
	InstrumentType_INSTRUMENT_TYPE_DHOLAK                        InstrumentType = 137
	InstrumentType_INSTRUMENT_TYPE_DJEMBE                        InstrumentType = 138
	InstrumentType_INSTRUMENT_TYPE_DOHOL                         InstrumentType = 139
	InstrumentType_INSTRUMENT_TYPE_DOUMBEK                       InstrumentType = 140
	InstrumentType_INSTRUMENT_TYPE_DRUM                          InstrumentType = 141
	InstrumentType_INSTRUMENT_TYPE_DRUMSTICKS                    InstrumentType = 142
	InstrumentType_INSTRUMENT_TYPE_DUGGI                         InstrumentType = 143
	InstrumentType_INSTRUMENT_TYPE_DUNUN                         InstrumentType = 144
	InstrumentType_INSTRUMENT_TYPE_ELEPHANTBELL                  InstrumentType = 145
	InstrumentType_INSTRUMENT_TYPE_FINGERCLICKS                  InstrumentType = 146
	InstrumentType_INSTRUMENT_TYPE_FINGERCYMBALS                 InstrumentType = 147
	InstrumentType_INSTRUMENT_TYPE_FINGERSNAPS                   InstrumentType = 148
	InstrumentType_INSTRUMENT_TYPE_FLEXATONE                     InstrumentType = 149
	InstrumentType_INSTRUMENT_TYPE_FOLKLORICPERCUSSION           InstrumentType = 150
	InstrumentType_INSTRUMENT_TYPE_FOOTSTOMP                     InstrumentType = 151
	InstrumentType_INSTRUMENT_TYPE_FROG                          InstrumentType = 152
	InstrumentType_INSTRUMENT_TYPE_GAMBANG                       InstrumentType = 153
	InstrumentType_INSTRUMENT_TYPE_GAMELAN                       InstrumentType = 154
	InstrumentType_INSTRUMENT_TYPE_GANGA                         InstrumentType = 155
	InstrumentType_INSTRUMENT_TYPE_GLASSHARMONICA                InstrumentType = 156
	InstrumentType_INSTRUMENT_TYPE_GLASSHARP                     InstrumentType = 157
	InstrumentType_INSTRUMENT_TYPE_GLOCKENSPIEL                  InstrumentType = 158
	InstrumentType_INSTRUMENT_TYPE_GONG                          InstrumentType = 159
	InstrumentType_INSTRUMENT_TYPE_GUACHARACA                    InstrumentType = 160
	InstrumentType_INSTRUMENT_TYPE_GUACHE                        InstrumentType = 161
	InstrumentType_INSTRUMENT_TYPE_GUIRA                         InstrumentType = 162
	InstrumentType_INSTRUMENT_TYPE_GUIRO                         InstrumentType = 163
	InstrumentType_INSTRUMENT_TYPE_HANDBELLS                     InstrumentType = 164
	InstrumentType_INSTRUMENT_TYPE_HANDCHIMES                    InstrumentType = 165
	InstrumentType_INSTRUMENT_TYPE_HANDCLAPS                     InstrumentType = 166
	InstrumentType_INSTRUMENT_TYPE_HIHATCYMBAL                   InstrumentType = 167
	InstrumentType_INSTRUMENT_TYPE_JAMBLOCK                      InstrumentType = 168
	InstrumentType_INSTRUMENT_TYPE_JAWBONE                       InstrumentType = 169
	InstrumentType_INSTRUMENT_TYPE_JAWHARP                       InstrumentType = 170
	InstrumentType_INSTRUMENT_TYPE_JUG                           InstrumentType = 171
	InstrumentType_INSTRUMENT_TYPE_KALIMBA                       InstrumentType = 172
	InstrumentType_INSTRUMENT_TYPE_KANJIRA                       InstrumentType = 173
	InstrumentType_INSTRUMENT_TYPE_KATSA                         InstrumentType = 174
	InstrumentType_INSTRUMENT_TYPE_KENDANG                       InstrumentType = 175
	InstrumentType_INSTRUMENT_TYPE_KHAMAK                        InstrumentType = 176
	InstrumentType_INSTRUMENT_TYPE_KHARTAL                       InstrumentType = 177
	InstrumentType_INSTRUMENT_TYPE_KHOL                          InstrumentType = 178
	InstrumentType_INSTRUMENT_TYPE_KHONGWONGLEK                  InstrumentType = 179
	InstrumentType_INSTRUMENT_TYPE_KHONGWONGYAI                  InstrumentType = 180
	InstrumentType_INSTRUMENT_TYPE_KNUCKLES                      InstrumentType = 181
	InstrumentType_INSTRUMENT_TYPE_LATINPERCUSSION               InstrumentType = 182
	InstrumentType_INSTRUMENT_TYPE_LITHOPHONE                    InstrumentType = 183
	InstrumentType_INSTRUMENT_TYPE_LOKOLE                        InstrumentType = 184
	InstrumentType_INSTRUMENT_TYPE_MADAL                         InstrumentType = 185
	InstrumentType_INSTRUMENT_TYPE_MARACAS                       InstrumentType = 186
	InstrumentType_INSTRUMENT_TYPE_MARIMBA                       InstrumentType = 187
	InstrumentType_INSTRUMENT_TYPE_MARIMBAPHONE                  InstrumentType = 188
	InstrumentType_INSTRUMENT_TYPE_MARIMBULA                     InstrumentType = 189
	InstrumentType_INSTRUMENT_TYPE_MAZHAR                        InstrumentType = 190
	InstrumentType_INSTRUMENT_TYPE_MBIRA                         InstrumentType = 191
	InstrumentType_INSTRUMENT_TYPE_METALCANS                     InstrumentType = 192
	InstrumentType_INSTRUMENT_TYPE_MOUTHPERCUSSION               InstrumentType = 193
	InstrumentType_INSTRUMENT_TYPE_MRIDANGAM                     InstrumentType = 194
	InstrumentType_INSTRUMENT_TYPE_MUHARSING                     InstrumentType = 195
	InstrumentType_INSTRUMENT_TYPE_NAAL                          InstrumentType = 196
	InstrumentType_INSTRUMENT_TYPE_NAGARA                        InstrumentType = 197
	InstrumentType_INSTRUMENT_TYPE_OBOROMDRUM                    InstrumentType = 198
	InstrumentType_INSTRUMENT_TYPE_OCTOBAN                       InstrumentType = 199
	InstrumentType_INSTRUMENT_TYPE_ORCHESTRALPERCUSSION          InstrumentType = 200
	InstrumentType_INSTRUMENT_TYPE_PADDLEDRUMS                   InstrumentType = 201
	InstrumentType_INSTRUMENT_TYPE_PANDEIRO                      InstrumentType = 202
	InstrumentType_INSTRUMENT_TYPE_PERCUSSIONINSTRUMENT          InstrumentType = 203
	InstrumentType_INSTRUMENT_TYPE_PITCHEDPERCUSSIONINSTRUMENT   InstrumentType = 204
	InstrumentType_INSTRUMENT_TYPE_PONGLANG                      InstrumentType = 205
	InstrumentType_INSTRUMENT_TYPE_POTSANDPANS                   InstrumentType = 206
	InstrumentType_INSTRUMENT_TYPE_QARKABEB                      InstrumentType = 207
	InstrumentType_INSTRUMENT_TYPE_RAINSTICK                     InstrumentType = 208
	InstrumentType_INSTRUMENT_TYPE_RANAT                         InstrumentType = 209
	InstrumentType_INSTRUMENT_TYPE_RATCHET                       InstrumentType = 210
	InstrumentType_INSTRUMENT_TYPE_RATTLE                        InstrumentType = 211
	InstrumentType_INSTRUMENT_TYPE_RECORECO                      InstrumentType = 212
	InstrumentType_INSTRUMENT_TYPE_REPINIQUE                     InstrumentType = 213
	InstrumentType_INSTRUMENT_TYPE_RHYTHMSTICK                   InstrumentType = 214
	InstrumentType_INSTRUMENT_TYPE_RIQ                           InstrumentType = 215
	InstrumentType_INSTRUMENT_TYPE_RNGA                          InstrumentType = 216
	InstrumentType_INSTRUMENT_TYPE_ROLMO                         InstrumentType = 217
	InstrumentType_INSTRUMENT_TYPE_ROTOTOMS                      InstrumentType = 218
	InstrumentType_INSTRUMENT_TYPE_SABAR                         InstrumentType = 219
	InstrumentType_INSTRUMENT_TYPE_SANDBLOCKS                    InstrumentType = 220
	InstrumentType_INSTRUMENT_TYPE_SAW                           InstrumentType = 221
	InstrumentType_INSTRUMENT_TYPE_SCRATCHER                     InstrumentType = 222
	InstrumentType_INSTRUMENT_TYPE_SHAKER                        InstrumentType = 223
	InstrumentType_INSTRUMENT_TYPE_SHEKERE                       InstrumentType = 224
	InstrumentType_INSTRUMENT_TYPE_SINGINGBOWLS                  InstrumentType = 225
	InstrumentType_INSTRUMENT_TYPE_SISTRUM                       InstrumentType = 226
	InstrumentType_INSTRUMENT_TYPE_SLAPSTICK                     InstrumentType = 227
	InstrumentType_INSTRUMENT_TYPE_SLEIGHBELLS                   InstrumentType = 228
	InstrumentType_INSTRUMENT_TYPE_SNAREDRUM                     InstrumentType = 229
	InstrumentType_INSTRUMENT_TYPE_SNAREDRUM_MARCHING            InstrumentType = 230
	InstrumentType_INSTRUMENT_TYPE_SPOONS                        InstrumentType = 231
	InstrumentType_INSTRUMENT_TYPE_SPRINGDRUM                    InstrumentType = 232
	InstrumentType_INSTRUMENT_TYPE_STEELDRUMS                    InstrumentType = 233
	InstrumentType_INSTRUMENT_TYPE_STICKS                        InstrumentType = 234
	InstrumentType_INSTRUMENT_TYPE_SURDO                         InstrumentType = 235
	InstrumentType_INSTRUMENT_TYPE_TAAL                          InstrumentType = 236
	InstrumentType_INSTRUMENT_TYPE_TAARIJA                       InstrumentType = 237
	InstrumentType_INSTRUMENT_TYPE_TABLA                         InstrumentType = 238
	InstrumentType_INSTRUMENT_TYPE_TABOR                         InstrumentType = 239
	InstrumentType_INSTRUMENT_TYPE_TAIKO                         InstrumentType = 240
	InstrumentType_INSTRUMENT_TYPE_TALKINGDRUM                   InstrumentType = 241
	InstrumentType_INSTRUMENT_TYPE_TAMBORA                       InstrumentType = 242
	InstrumentType_INSTRUMENT_TYPE_TAMBORIM                      InstrumentType = 243
	InstrumentType_INSTRUMENT_TYPE_TAMBOUR                       InstrumentType = 244
	InstrumentType_INSTRUMENT_TYPE_TAMBOURINE                    InstrumentType = 245
	InstrumentType_INSTRUMENT_TYPE_TAMTAM                        InstrumentType = 246
	InstrumentType_INSTRUMENT_TYPE_TAONGAPUORO                   InstrumentType = 247
	InstrumentType_INSTRUMENT_TYPE_TAR_PERCUSSION                InstrumentType = 248
	InstrumentType_INSTRUMENT_TYPE_TAROL                         InstrumentType = 249
	InstrumentType_INSTRUMENT_TYPE_TEMPLEBELL                    InstrumentType = 250
	InstrumentType_INSTRUMENT_TYPE_TEMPLEBLOCKS                  InstrumentType = 251
	InstrumentType_INSTRUMENT_TYPE_TENORDRUM                     InstrumentType = 252
	InstrumentType_INSTRUMENT_TYPE_THAVIL                        InstrumentType = 253
	InstrumentType_INSTRUMENT_TYPE_THUNDERSHEET                  InstrumentType = 254
	InstrumentType_INSTRUMENT_TYPE_TIBETANBELLS                  InstrumentType = 255
	InstrumentType_INSTRUMENT_TYPE_TIMBALES                      InstrumentType = 256
	InstrumentType_INSTRUMENT_TYPE_TIMBAU                        InstrumentType = 257
	InstrumentType_INSTRUMENT_TYPE_TIMPANI                       InstrumentType = 258
	InstrumentType_INSTRUMENT_TYPE_TINGSHA                       InstrumentType = 259
	InstrumentType_INSTRUMENT_TYPE_TOMPAK                        InstrumentType = 260
	InstrumentType_INSTRUMENT_TYPE_TOMS                          InstrumentType = 261
	InstrumentType_INSTRUMENT_TYPE_TONGUEDRUM                    InstrumentType = 262
	InstrumentType_INSTRUMENT_TYPE_TRIANGLE                      InstrumentType = 263
	InstrumentType_INSTRUMENT_TYPE_TXALAPARTA                    InstrumentType = 264
	InstrumentType_INSTRUMENT_TYPE_UDU                           InstrumentType = 265
	InstrumentType_INSTRUMENT_TYPE_ULIULI                        InstrumentType = 266
	InstrumentType_INSTRUMENT_TYPE_UNPITCHEDPERCUSSIONINSTRUMENT InstrumentType = 267
	InstrumentType_INSTRUMENT_TYPE_URUMEE                        InstrumentType = 268
	InstrumentType_INSTRUMENT_TYPE_VIBRAPHONE                    InstrumentType = 269
	InstrumentType_INSTRUMENT_TYPE_VIBRASLAP                     InstrumentType = 270
	InstrumentType_INSTRUMENT_TYPE_WASHBOARD                     InstrumentType = 271
	InstrumentType_INSTRUMENT_TYPE_WATERPHONE                    InstrumentType = 272
	InstrumentType_INSTRUMENT_TYPE_WINDCHIMES                    InstrumentType = 273
	InstrumentType_INSTRUMENT_TYPE_WINDMACHINE                   InstrumentType = 274
	InstrumentType_INSTRUMENT_TYPE_WOBBLEBOARD                   InstrumentType = 275
	InstrumentType_INSTRUMENT_TYPE_WOODBLOCK                     InstrumentType = 276
	InstrumentType_INSTRUMENT_TYPE_XYLOPHONE                     InstrumentType = 277
	InstrumentType_INSTRUMENT_TYPE_XYLORIMBA                     InstrumentType = 278
	InstrumentType_INSTRUMENT_TYPE_ZERBAGHALI                    InstrumentType = 279
	InstrumentType_INSTRUMENT_TYPE_ZYDECORUBBOARD                InstrumentType = 280
	InstrumentType_INSTRUMENT_TYPE_FORTEPIANO                    InstrumentType = 281
	InstrumentType_INSTRUMENT_TYPE_GRANDPIANO                    InstrumentType = 282
	InstrumentType_INSTRUMENT_TYPE_LUTHEAL                       InstrumentType = 283
	InstrumentType_INSTRUMENT_TYPE_PIANO                         InstrumentType = 284
	InstrumentType_INSTRUMENT_TYPE_PIANOHARP                     InstrumentType = 285
	InstrumentType_INSTRUMENT_TYPE_PIANOLA                       InstrumentType = 286
	InstrumentType_INSTRUMENT_TYPE_PREPAREDPIANO                 InstrumentType = 287
	InstrumentType_INSTRUMENT_TYPE_SQUAREPIANO                   InstrumentType = 288
	InstrumentType_INSTRUMENT_TYPE_TACKPIANO                     InstrumentType = 289
	InstrumentType_INSTRUMENT_TYPE_UPRIGHTPIANO                  InstrumentType = 290
	InstrumentType_INSTRUMENT_TYPE_ANIMALSOUNDS                  InstrumentType = 291
	InstrumentType_INSTRUMENT_TYPE_APPLAUSE                      InstrumentType = 292
	InstrumentType_INSTRUMENT_TYPE_BIRDSONG                      InstrumentType = 293
	InstrumentType_INSTRUMENT_TYPE_CARSOUNDS                     InstrumentType = 294
	InstrumentType_INSTRUMENT_TYPE_CHATTER                       InstrumentType = 295
	InstrumentType_INSTRUMENT_TYPE_CHEWINGSOUNDS                 InstrumentType = 296
	InstrumentType_INSTRUMENT_TYPE_GIZMO                         InstrumentType = 297
	InstrumentType_INSTRUMENT_TYPE_GUNSHOTS                      InstrumentType = 298
	InstrumentType_INSTRUMENT_TYPE_MAGNETICTAPETREATMENTS        InstrumentType = 299
	InstrumentType_INSTRUMENT_TYPE_ORCHESTRALHIT                 InstrumentType = 300
	InstrumentType_INSTRUMENT_TYPE_RECORDNOISE                   InstrumentType = 301
	InstrumentType_INSTRUMENT_TYPE_SIREN                         InstrumentType = 302
	InstrumentType_INSTRUMENT_TYPE_SOUNDDESIGN                   InstrumentType = 303
	InstrumentType_INSTRUMENT_TYPE_SOUNDEFFECTS                  InstrumentType = 304
	InstrumentType_INSTRUMENT_TYPE_TRAINSOUNDS                   InstrumentType = 305
	InstrumentType_INSTRUMENT_TYPE_TREATMENTS                    InstrumentType = 306
	InstrumentType_INSTRUMENT_TYPE_UNINTENDEDARTIFACTS           InstrumentType = 307
	InstrumentType_INSTRUMENT_TYPE_E_5_STRINGBANJO               InstrumentType = 308
	InstrumentType_INSTRUMENT_TYPE_AFRICANHARP                   InstrumentType = 309
	InstrumentType_INSTRUMENT_TYPE_ALTOVIOL                      InstrumentType = 310
	InstrumentType_INSTRUMENT_TYPE_ANDEANHARP                    InstrumentType = 311
	InstrumentType_INSTRUMENT_TYPE_ARCHLUTE                      InstrumentType = 312
	InstrumentType_INSTRUMENT_TYPE_AUTOHARP                      InstrumentType = 313
	InstrumentType_INSTRUMENT_TYPE_BAGLAMA                       InstrumentType = 314
	InstrumentType_INSTRUMENT_TYPE_BALALAIKA                     InstrumentType = 315
	InstrumentType_INSTRUMENT_TYPE_BANDURA                       InstrumentType = 316
	InstrumentType_INSTRUMENT_TYPE_BANDURRIA                     InstrumentType = 317
	InstrumentType_INSTRUMENT_TYPE_BANHU                         InstrumentType = 318
	InstrumentType_INSTRUMENT_TYPE_BANJO                         InstrumentType = 319
	InstrumentType_INSTRUMENT_TYPE_BANJOGUITAR                   InstrumentType = 320
	InstrumentType_INSTRUMENT_TYPE_BANJOLIN                      InstrumentType = 321
	InstrumentType_INSTRUMENT_TYPE_BAROQUECELLO                  InstrumentType = 322
	InstrumentType_INSTRUMENT_TYPE_BAROQUEVIOLA                  InstrumentType = 323
	InstrumentType_INSTRUMENT_TYPE_BAROQUEVIOLIN                 InstrumentType = 324
	InstrumentType_INSTRUMENT_TYPE_BARYTON                       InstrumentType = 325
	InstrumentType_INSTRUMENT_TYPE_BASSBANJO                     InstrumentType = 326
	InstrumentType_INSTRUMENT_TYPE_BASSCITTERN                   InstrumentType = 327
	InstrumentType_INSTRUMENT_TYPE_BASSREBEC                     InstrumentType = 328
	InstrumentType_INSTRUMENT_TYPE_BASSVIOL                      InstrumentType = 329
	InstrumentType_INSTRUMENT_TYPE_BASSODABRACCIO                InstrumentType = 330
	InstrumentType_INSTRUMENT_TYPE_BIWA                          InstrumentType = 331
	InstrumentType_INSTRUMENT_TYPE_BOUZOUKI                      InstrumentType = 332
	InstrumentType_INSTRUMENT_TYPE_BOWEDSTRINGS                  InstrumentType = 333
	InstrumentType_INSTRUMENT_TYPE_BOZOQ                         InstrumentType = 334
	InstrumentType_INSTRUMENT_TYPE_BUFOBASS                      InstrumentType = 335
	InstrumentType_INSTRUMENT_TYPE_CAVAQUINHO                    InstrumentType = 336
	InstrumentType_INSTRUMENT_TYPE_CELLO                         InstrumentType = 337
	InstrumentType_INSTRUMENT_TYPE_CELLOBANJO                    InstrumentType = 338
	InstrumentType_INSTRUMENT_TYPE_CELTICHARP                    InstrumentType = 339
	InstrumentType_INSTRUMENT_TYPE_CHARANGO                      InstrumentType = 340
	InstrumentType_INSTRUMENT_TYPE_CIMBALOM                      InstrumentType = 341
	InstrumentType_INSTRUMENT_TYPE_CITOLE                        InstrumentType = 342
	InstrumentType_INSTRUMENT_TYPE_CITTERN                       InstrumentType = 343
	InstrumentType_INSTRUMENT_TYPE_CONCERTHARP                   InstrumentType = 344
	InstrumentType_INSTRUMENT_TYPE_CRAVIOLA                      InstrumentType = 345
	InstrumentType_INSTRUMENT_TYPE_CRWTH                         InstrumentType = 346
	InstrumentType_INSTRUMENT_TYPE_CUATRO                        InstrumentType = 347
	InstrumentType_INSTRUMENT_TYPE_CUMBUS                        InstrumentType = 348
	InstrumentType_INSTRUMENT_TYPE_DANBAU                        InstrumentType = 349
	InstrumentType_INSTRUMENT_TYPE_DANTRANH                      InstrumentType = 350
	InstrumentType_INSTRUMENT_TYPE_DILRUBA                       InstrumentType = 351
	InstrumentType_INSTRUMENT_TYPE_DOMBRA                        InstrumentType = 352
	InstrumentType_INSTRUMENT_TYPE_DOMRA                         InstrumentType = 353
	InstrumentType_INSTRUMENT_TYPE_DOUBLEBASS                    InstrumentType = 354
	InstrumentType_INSTRUMENT_TYPE_DOUBLEHARP                    InstrumentType = 355
	InstrumentType_INSTRUMENT_TYPE_DOUBLEVIOLIN                  InstrumentType = 356
	InstrumentType_INSTRUMENT_TYPE_DOUBLEBASSVIOL                InstrumentType = 357
	InstrumentType_INSTRUMENT_TYPE_DRANYEN                       InstrumentType = 358
	InstrumentType_INSTRUMENT_TYPE_DUTAR                         InstrumentType = 359
	InstrumentType_INSTRUMENT_TYPE_DZUDDAHORD                    InstrumentType = 360
	InstrumentType_INSTRUMENT_TYPE_EKTARA                        InstrumentType = 361
	InstrumentType_INSTRUMENT_TYPE_ELECTRIC6STRINGVIOLIN         InstrumentType = 362
	InstrumentType_INSTRUMENT_TYPE_ELECTRICCELLO                 InstrumentType = 363
	InstrumentType_INSTRUMENT_TYPE_ELECTRICHARP                  InstrumentType = 364
	InstrumentType_INSTRUMENT_TYPE_ELECTRICMANDOLIN              InstrumentType = 365
	InstrumentType_INSTRUMENT_TYPE_ELECTRICVIOLA                 InstrumentType = 366
	InstrumentType_INSTRUMENT_TYPE_ELECTRICVIOLIN                InstrumentType = 367
	InstrumentType_INSTRUMENT_TYPE_ELECTROACOUSTICHURDYGURDY     InstrumentType = 368
	InstrumentType_INSTRUMENT_TYPE_ENNANGA                       InstrumentType = 369
	InstrumentType_INSTRUMENT_TYPE_EPINETTEDESVOSGES             InstrumentType = 370
	InstrumentType_INSTRUMENT_TYPE_ERHU                          InstrumentType = 371
	InstrumentType_INSTRUMENT_TYPE_ESRAJ                         InstrumentType = 372
	InstrumentType_INSTRUMENT_TYPE_FIDDLE                        InstrumentType = 373
	InstrumentType_INSTRUMENT_TYPE_FOLKHARP                      InstrumentType = 374
	InstrumentType_INSTRUMENT_TYPE_GADULKA                       InstrumentType = 375
	InstrumentType_INSTRUMENT_TYPE_GARDON                        InstrumentType = 376
	InstrumentType_INSTRUMENT_TYPE_GAYAGEUM                      InstrumentType = 377
	InstrumentType_INSTRUMENT_TYPE_GHAYCHAK                      InstrumentType = 378
	InstrumentType_INSTRUMENT_TYPE_GITTERN                       InstrumentType = 379
	InstrumentType_INSTRUMENT_TYPE_GUQIN                         InstrumentType = 380
	InstrumentType_INSTRUMENT_TYPE_GUSLI                         InstrumentType = 381
	InstrumentType_INSTRUMENT_TYPE_GUZHENG                       InstrumentType = 382
	InstrumentType_INSTRUMENT_TYPE_HAEGEUM                       InstrumentType = 383
	InstrumentType_INSTRUMENT_TYPE_HAMMEREDDULCIMER              InstrumentType = 384
	InstrumentType_INSTRUMENT_TYPE_HAMMEREDSTRINGS               InstrumentType = 385
	InstrumentType_INSTRUMENT_TYPE_HARDANGERFIDDLE               InstrumentType = 386
	InstrumentType_INSTRUMENT_TYPE_HARP                          InstrumentType = 387
	InstrumentType_INSTRUMENT_TYPE_HUAPANGUERA                   InstrumentType = 388
	InstrumentType_INSTRUMENT_TYPE_HURDYGURDY                    InstrumentType = 389
	InstrumentType_INSTRUMENT_TYPE_IRISHBOUZOUKI                 InstrumentType = 390
	InstrumentType_INSTRUMENT_TYPE_JAKHAY                        InstrumentType = 391
	InstrumentType_INSTRUMENT_TYPE_JARANAJAROCHA                 InstrumentType = 392
	InstrumentType_INSTRUMENT_TYPE_JINGHU                        InstrumentType = 393
	InstrumentType_INSTRUMENT_TYPE_KACAPI                        InstrumentType = 394
	InstrumentType_INSTRUMENT_TYPE_KANTELE                       InstrumentType = 395
	InstrumentType_INSTRUMENT_TYPE_KANUN                         InstrumentType = 396
	InstrumentType_INSTRUMENT_TYPE_KEMENCHE                      InstrumentType = 397
	InstrumentType_INSTRUMENT_TYPE_KHIM                          InstrumentType = 398
	InstrumentType_INSTRUMENT_TYPE_KORA                          InstrumentType = 399
	InstrumentType_INSTRUMENT_TYPE_KOTO                          InstrumentType = 400
	InstrumentType_INSTRUMENT_TYPE_KUGO                          InstrumentType = 401
	InstrumentType_INSTRUMENT_TYPE_LANGELEIK                     InstrumentType = 402
	InstrumentType_INSTRUMENT_TYPE_LAOUTO                        InstrumentType = 403
	InstrumentType_INSTRUMENT_TYPE_LEONA                         InstrumentType = 404
	InstrumentType_INSTRUMENT_TYPE_LIRONE                        InstrumentType = 405
	InstrumentType_INSTRUMENT_TYPE_LUTE                          InstrumentType = 406
	InstrumentType_INSTRUMENT_TYPE_LYRAVIOL                      InstrumentType = 407
	InstrumentType_INSTRUMENT_TYPE_LYRE                          InstrumentType = 408
	InstrumentType_INSTRUMENT_TYPE_MANDOCELLO                    InstrumentType = 409
	InstrumentType_INSTRUMENT_TYPE_MANDOLA                       InstrumentType = 410
	InstrumentType_INSTRUMENT_TYPE_MANDOLELE                     InstrumentType = 411
	InstrumentType_INSTRUMENT_TYPE_MANDOLIN                      InstrumentType = 412
	InstrumentType_INSTRUMENT_TYPE_MANDOLINO                     InstrumentType = 413
	InstrumentType_INSTRUMENT_TYPE_MANDORE                       InstrumentType = 414
	InstrumentType_INSTRUMENT_TYPE_MARXOPHONE                    InstrumentType = 415
	InstrumentType_INSTRUMENT_TYPE_MEDIEVALFIDDLE                InstrumentType = 416
	InstrumentType_INSTRUMENT_TYPE_MEDIEVALHARP                  InstrumentType = 417
	InstrumentType_INSTRUMENT_TYPE_MOHANVEENA                    InstrumentType = 418
	InstrumentType_INSTRUMENT_TYPE_MUSICALBOW                    InstrumentType = 419
	InstrumentType_INSTRUMENT_TYPE_NGONI                         InstrumentType = 420
	InstrumentType_INSTRUMENT_TYPE_NJARKA                        InstrumentType = 421
	InstrumentType_INSTRUMENT_TYPE_NYATITI                       InstrumentType = 422
	InstrumentType_INSTRUMENT_TYPE_NYCKELHARPA                   InstrumentType = 423
	InstrumentType_INSTRUMENT_TYPE_ORGANISTRUM                   InstrumentType = 424
	InstrumentType_INSTRUMENT_TYPE_ORPHARION                     InstrumentType = 425
	InstrumentType_INSTRUMENT_TYPE_OUD                           InstrumentType = 426
	InstrumentType_INSTRUMENT_TYPE_PANDURA                       InstrumentType = 427
	InstrumentType_INSTRUMENT_TYPE_PARAGUAYANHARP                InstrumentType = 428
	InstrumentType_INSTRUMENT_TYPE_PHIN                          InstrumentType = 429
	InstrumentType_INSTRUMENT_TYPE_PHONOFIDDLE                   InstrumentType = 430
	InstrumentType_INSTRUMENT_TYPE_PIPA                          InstrumentType = 431
	InstrumentType_INSTRUMENT_TYPE_PLUCKEDDULCIMER               InstrumentType = 432
	InstrumentType_INSTRUMENT_TYPE_PLUCKEDSTRINGS                InstrumentType = 433
	InstrumentType_INSTRUMENT_TYPE_PSALTERY                      InstrumentType = 434
	InstrumentType_INSTRUMENT_TYPE_RABEL                         InstrumentType = 435
	InstrumentType_INSTRUMENT_TYPE_REBAB                         InstrumentType = 436
	InstrumentType_INSTRUMENT_TYPE_REBEC                         InstrumentType = 437
	InstrumentType_INSTRUMENT_TYPE_RUAN                          InstrumentType = 438
	InstrumentType_INSTRUMENT_TYPE_SANTOOR                       InstrumentType = 439
	InstrumentType_INSTRUMENT_TYPE_SARANGI                       InstrumentType = 440
	InstrumentType_INSTRUMENT_TYPE_SAROD                         InstrumentType = 441
	InstrumentType_INSTRUMENT_TYPE_SAUNG                         InstrumentType = 442
	InstrumentType_INSTRUMENT_TYPE_SAWDUANG                      InstrumentType = 443
	InstrumentType_INSTRUMENT_TYPE_SHAMISEN                      InstrumentType = 444
	InstrumentType_INSTRUMENT_TYPE_SIMSIMIYYA                    InstrumentType = 445
	InstrumentType_INSTRUMENT_TYPE_SINTIR                        InstrumentType = 446
	InstrumentType_INSTRUMENT_TYPE_SITAR                         InstrumentType = 447
	InstrumentType_INSTRUMENT_TYPE_SOPRANODOMRA                  InstrumentType = 448
	InstrumentType_INSTRUMENT_TYPE_STRINGINSTRUMENT              InstrumentType = 449
	InstrumentType_INSTRUMENT_TYPE_STROHLVIOLIN                  InstrumentType = 450
	InstrumentType_INSTRUMENT_TYPE_SURBAHAR                      InstrumentType = 451
	InstrumentType_INSTRUMENT_TYPE_SWARMANDAL                    InstrumentType = 452
	InstrumentType_INSTRUMENT_TYPE_TAMBURA                       InstrumentType = 453
	InstrumentType_INSTRUMENT_TYPE_TANBOUR                       InstrumentType = 454
	InstrumentType_INSTRUMENT_TYPE_TANPURA                       InstrumentType = 455
	InstrumentType_INSTRUMENT_TYPE_TAR_STRING                    InstrumentType = 456
	InstrumentType_INSTRUMENT_TYPE_TENORBANJO                    InstrumentType = 457
	InstrumentType_INSTRUMENT_TYPE_TENORREBEC                    InstrumentType = 458
	InstrumentType_INSTRUMENT_TYPE_TENORVIOL                     InstrumentType = 459
	InstrumentType_INSTRUMENT_TYPE_THEORBO                       InstrumentType = 460
	InstrumentType_INSTRUMENT_TYPE_TIMPLE                        InstrumentType = 461
	InstrumentType_INSTRUMENT_TYPE_TOGAMANGUITARVIOL             InstrumentType = 462
	InstrumentType_INSTRUMENT_TYPE_TREBLEREBEC                   InstrumentType = 463
	InstrumentType_INSTRUMENT_TYPE_TREBLEVIOL                    InstrumentType = 464
	InstrumentType_INSTRUMENT_TYPE_TROMBAMARINA                  InstrumentType = 465
	InstrumentType_INSTRUMENT_TYPE_TUMBI                         InstrumentType = 466
	InstrumentType_INSTRUMENT_TYPE_TZOURAS                       InstrumentType = 467
	InstrumentType_INSTRUMENT_TYPE_UKULELE                       InstrumentType = 468
	InstrumentType_INSTRUMENT_TYPE_VALIHA                        InstrumentType = 469
	InstrumentType_INSTRUMENT_TYPE_VEENA                         InstrumentType = 470
	InstrumentType_INSTRUMENT_TYPE_VENEZUELANHARP                InstrumentType = 471
	InstrumentType_INSTRUMENT_TYPE_VERACRUZHARP                  InstrumentType = 472
	InstrumentType_INSTRUMENT_TYPE_VITAR                         InstrumentType = 473
	InstrumentType_INSTRUMENT_TYPE_VICHITRAVEENA                 InstrumentType = 474
	InstrumentType_INSTRUMENT_TYPE_VIELLE                        InstrumentType = 475
	InstrumentType_INSTRUMENT_TYPE_VIHUELA                       InstrumentType = 476
	InstrumentType_INSTRUMENT_TYPE_VIOL                          InstrumentType = 477
	InstrumentType_INSTRUMENT_TYPE_VIOLA                         InstrumentType = 478
	InstrumentType_INSTRUMENT_TYPE_VIOLADAMORE                   InstrumentType = 479
	InstrumentType_INSTRUMENT_TYPE_VIOLADAGAMBA                  InstrumentType = 480
	InstrumentType_INSTRUMENT_TYPE_VIOLAPOMPOSA                  InstrumentType = 481
	InstrumentType_INSTRUMENT_TYPE_VIOLIN                        InstrumentType = 482
	InstrumentType_INSTRUMENT_TYPE_VIOLINOPICCOLO                InstrumentType = 483
	InstrumentType_INSTRUMENT_TYPE_WELSHTRIPLEHARP               InstrumentType = 484
	InstrumentType_INSTRUMENT_TYPE_WIRESTRUNGHARP                InstrumentType = 485
	InstrumentType_INSTRUMENT_TYPE_XALAM                         InstrumentType = 486
	InstrumentType_INSTRUMENT_TYPE_YANGQIN                       InstrumentType = 487
	InstrumentType_INSTRUMENT_TYPE_YAYLITAMBUR                   InstrumentType = 488
	InstrumentType_INSTRUMENT_TYPE_YOKIN                         InstrumentType = 489
	InstrumentType_INSTRUMENT_TYPE_YUEQIN                        InstrumentType = 490
	InstrumentType_INSTRUMENT_TYPE_ZEZE                          InstrumentType = 491
	InstrumentType_INSTRUMENT_TYPE_ZHONGHU                       InstrumentType = 492
	InstrumentType_INSTRUMENT_TYPE_ZITHER                        InstrumentType = 493
	InstrumentType_INSTRUMENT_TYPE_ARPEGGIATINGSYNTH             InstrumentType = 494
	InstrumentType_INSTRUMENT_TYPE_ONDESMARTENOT                 InstrumentType = 495
	InstrumentType_INSTRUMENT_TYPE_SAMPLER                       InstrumentType = 496
	InstrumentType_INSTRUMENT_TYPE_SYNTHBASS                     InstrumentType = 497
	InstrumentType_INSTRUMENT_TYPE_SYNTHBRASS                    InstrumentType = 498
	InstrumentType_INSTRUMENT_TYPE_SYNTHCHOIR                    InstrumentType = 499
	InstrumentType_INSTRUMENT_TYPE_SYNTHFX                       InstrumentType = 500
	InstrumentType_INSTRUMENT_TYPE_SYNTHLEAD                     InstrumentType = 501
	InstrumentType_INSTRUMENT_TYPE_SYNTHPAD                      InstrumentType = 502
	InstrumentType_INSTRUMENT_TYPE_SYNTHSTEELDRUMS               InstrumentType = 503
	InstrumentType_INSTRUMENT_TYPE_SYNTHSTRINGS                  InstrumentType = 504
	InstrumentType_INSTRUMENT_TYPE_SYNTHESIZER                   InstrumentType = 505
	InstrumentType_INSTRUMENT_TYPE_THEREMIN                      InstrumentType = 506
	InstrumentType_INSTRUMENT_TYPE_GROUPBACKGROUNDVOCALISTS      InstrumentType = 507
	InstrumentType_INSTRUMENT_TYPE_BOYVOICE                      InstrumentType = 508
	InstrumentType_INSTRUMENT_TYPE_CHILDVOICE                    InstrumentType = 509
	InstrumentType_INSTRUMENT_TYPE_CHILDRENSBACKGROUNDVOCALIST   InstrumentType = 510
	InstrumentType_INSTRUMENT_TYPE_FEMALEVOICE                   InstrumentType = 511
	InstrumentType_INSTRUMENT_TYPE_FEMALEBACKGROUNDVOCALIST      InstrumentType = 512
	InstrumentType_INSTRUMENT_TYPE_GIRLVOICE                     InstrumentType = 513
	InstrumentType_INSTRUMENT_TYPE_LEADVOCALIST                  InstrumentType = 514
	InstrumentType_INSTRUMENT_TYPE_MALEVOICE                     InstrumentType = 515
	InstrumentType_INSTRUMENT_TYPE_MALEBACKGROUNDVOCALIST        InstrumentType = 516
	InstrumentType_INSTRUMENT_TYPE_MIXEDVOICE                    InstrumentType = 517
	InstrumentType_INSTRUMENT_TYPE_MIXEDBACKGROUNDVOCALIST       InstrumentType = 518
	InstrumentType_INSTRUMENT_TYPE_NEUTRALVOICE                  InstrumentType = 519
	InstrumentType_INSTRUMENT_TYPE_VOICE                         InstrumentType = 520
	InstrumentType_INSTRUMENT_TYPE_ALBOKA                        InstrumentType = 521
	InstrumentType_INSTRUMENT_TYPE_ALPENHORN                     InstrumentType = 522
	InstrumentType_INSTRUMENT_TYPE_ALTOCLARINET                  InstrumentType = 523
	InstrumentType_INSTRUMENT_TYPE_ALTOCRUMHORN                  InstrumentType = 524
	InstrumentType_INSTRUMENT_TYPE_ALTOFLUTE                     InstrumentType = 525
	InstrumentType_INSTRUMENT_TYPE_ALTOHORN                      InstrumentType = 526
	InstrumentType_INSTRUMENT_TYPE_ALTORECORDER                  InstrumentType = 527
	InstrumentType_INSTRUMENT_TYPE_ALTOSACKBUT                   InstrumentType = 528
	InstrumentType_INSTRUMENT_TYPE_ALTOSAXOPHONE                 InstrumentType = 529
	InstrumentType_INSTRUMENT_TYPE_ALTOSHAWM                     InstrumentType = 530
	InstrumentType_INSTRUMENT_TYPE_ALTOTROMBONE                  InstrumentType = 531
	InstrumentType_INSTRUMENT_TYPE_APITO                         InstrumentType = 532
	InstrumentType_INSTRUMENT_TYPE_ARGHUL                        InstrumentType = 533
	InstrumentType_INSTRUMENT_TYPE_AULOCHROME                    InstrumentType = 534
	InstrumentType_INSTRUMENT_TYPE_BAGPIPES                      InstrumentType = 535
	InstrumentType_INSTRUMENT_TYPE_BANSURI                       InstrumentType = 536
	InstrumentType_INSTRUMENT_TYPE_BARITONEHORN                  InstrumentType = 537
	InstrumentType_INSTRUMENT_TYPE_BARITONEOBOE                  InstrumentType = 538
	InstrumentType_INSTRUMENT_TYPE_BARITONESAXOPHONE             InstrumentType = 539
	InstrumentType_INSTRUMENT_TYPE_BAROQUEBASSOON                InstrumentType = 540
	InstrumentType_INSTRUMENT_TYPE_BAROQUECLARINET               InstrumentType = 541
	InstrumentType_INSTRUMENT_TYPE_BAROQUEFLUTE                  InstrumentType = 542
	InstrumentType_INSTRUMENT_TYPE_BAROQUEOBOE                   InstrumentType = 543
	InstrumentType_INSTRUMENT_TYPE_BAROQUERECORDER               InstrumentType = 544
	InstrumentType_INSTRUMENT_TYPE_BASSCLARINET                  InstrumentType = 545
	InstrumentType_INSTRUMENT_TYPE_BASSDULCIAN                   InstrumentType = 546
	InstrumentType_INSTRUMENT_TYPE_BASSFLUTE                     InstrumentType = 547
	InstrumentType_INSTRUMENT_TYPE_BASSHARMONICA                 InstrumentType = 548
	InstrumentType_INSTRUMENT_TYPE_BASSOBOE                      InstrumentType = 549
	InstrumentType_INSTRUMENT_TYPE_BASSRECORDER                  InstrumentType = 550
	InstrumentType_INSTRUMENT_TYPE_BASSSACKBUT                   InstrumentType = 551
	InstrumentType_INSTRUMENT_TYPE_BASSSAXOPHONE                 InstrumentType = 552
	InstrumentType_INSTRUMENT_TYPE_BASSSHAWM                     InstrumentType = 553
	InstrumentType_INSTRUMENT_TYPE_BASSTROMBONE                  InstrumentType = 554
	InstrumentType_INSTRUMENT_TYPE_BASSTRUMPET                   InstrumentType = 555
	InstrumentType_INSTRUMENT_TYPE_BASSTUBA                      InstrumentType = 556
	InstrumentType_INSTRUMENT_TYPE_BASSETCLARINET                InstrumentType = 557
	InstrumentType_INSTRUMENT_TYPE_BASSETHORN                    InstrumentType = 558
	InstrumentType_INSTRUMENT_TYPE_BASSOON                       InstrumentType = 559
	InstrumentType_INSTRUMENT_TYPE_BAWU                          InstrumentType = 560
	InstrumentType_INSTRUMENT_TYPE_BIRDWHISTLE                   InstrumentType = 561
	InstrumentType_INSTRUMENT_TYPE_BOMBARD                       InstrumentType = 562
	InstrumentType_INSTRUMENT_TYPE_BOSUNSWHISTLE                 InstrumentType = 563
	InstrumentType_INSTRUMENT_TYPE_BRASSINSTRUMENT               InstrumentType = 564
	InstrumentType_INSTRUMENT_TYPE_BUGLE                         InstrumentType = 565
	InstrumentType_INSTRUMENT_TYPE_CALLIOPE                      InstrumentType = 566
	InstrumentType_INSTRUMENT_TYPE_CHALUMEAU                     InstrumentType = 567
	InstrumentType_INSTRUMENT_TYPE_CHROMATICHARMONICA            InstrumentType = 568
	InstrumentType_INSTRUMENT_TYPE_CIMBASSO                      InstrumentType = 569
	InstrumentType_INSTRUMENT_TYPE_CLARINET                      InstrumentType = 570
	InstrumentType_INSTRUMENT_TYPE_CLARINOTRUMPET                InstrumentType = 571
	InstrumentType_INSTRUMENT_TYPE_CONCHSHELL                    InstrumentType = 572
	InstrumentType_INSTRUMENT_TYPE_CONTRAALTOCLARINET            InstrumentType = 573
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSCLARINET            InstrumentType = 574
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSRECORDER            InstrumentType = 575
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSSARRUSOPHONE        InstrumentType = 576
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSSAXOPHONE           InstrumentType = 577
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSTROMBONE            InstrumentType = 578
	InstrumentType_INSTRUMENT_TYPE_CONTRABASSOON                 InstrumentType = 579
	InstrumentType_INSTRUMENT_TYPE_CORNET                        InstrumentType = 580
	InstrumentType_INSTRUMENT_TYPE_CORNETTO                      InstrumentType = 581
	InstrumentType_INSTRUMENT_TYPE_CRUMHORN                      InstrumentType = 582
	InstrumentType_INSTRUMENT_TYPE_DAEGEUM                       InstrumentType = 583
	InstrumentType_INSTRUMENT_TYPE_DIDGERIDOO                    InstrumentType = 584
	InstrumentType_INSTRUMENT_TYPE_DIPLE                         InstrumentType = 585
	InstrumentType_INSTRUMENT_TYPE_DIZI                          InstrumentType = 586
	InstrumentType_INSTRUMENT_TYPE_DUDUK                         InstrumentType = 587
	InstrumentType_INSTRUMENT_TYPE_DULCIAN                       InstrumentType = 588
	InstrumentType_INSTRUMENT_TYPE_DUNGCHEN                      InstrumentType = 589
	InstrumentType_INSTRUMENT_TYPE_ENGLISHHORN                   InstrumentType = 590
	InstrumentType_INSTRUMENT_TYPE_EUPHONIUM                     InstrumentType = 591
	InstrumentType_INSTRUMENT_TYPE_FIFE                          InstrumentType = 592
	InstrumentType_INSTRUMENT_TYPE_FISCORN                       InstrumentType = 593
	InstrumentType_INSTRUMENT_TYPE_FLABIOL                       InstrumentType = 594
	InstrumentType_INSTRUMENT_TYPE_FLAGEOLET                     InstrumentType = 595
	InstrumentType_INSTRUMENT_TYPE_FLOYERA                       InstrumentType = 596
	InstrumentType_INSTRUMENT_TYPE_FLUGELHORN                    InstrumentType = 597
	InstrumentType_INSTRUMENT_TYPE_FLUTE                         InstrumentType = 598
	InstrumentType_INSTRUMENT_TYPE_FRENCHHORN                    InstrumentType = 599
	InstrumentType_INSTRUMENT_TYPE_FUJARA                        InstrumentType = 600
	InstrumentType_INSTRUMENT_TYPE_GASBA                         InstrumentType = 601
	InstrumentType_INSTRUMENT_TYPE_GEMSHORN                      InstrumentType = 602
	InstrumentType_INSTRUMENT_TYPE_GERMANFLUTE                   InstrumentType = 603
	InstrumentType_INSTRUMENT_TYPE_GHAITA                        InstrumentType = 604
	InstrumentType_INSTRUMENT_TYPE_GREATBASSRECORDER             InstrumentType = 605
	InstrumentType_INSTRUMENT_TYPE_GUANZI                        InstrumentType = 606
	InstrumentType_INSTRUMENT_TYPE_GYALING                       InstrumentType = 607
	InstrumentType_INSTRUMENT_TYPE_HARMONICA                     InstrumentType = 608
	InstrumentType_INSTRUMENT_TYPE_HARMONIUM                     InstrumentType = 609
	InstrumentType_INSTRUMENT_TYPE_HECKELPHONE                   InstrumentType = 610
	InstrumentType_INSTRUMENT_TYPE_HELICON                       InstrumentType = 611
	InstrumentType_INSTRUMENT_TYPE_HERALDTRUMPET                 InstrumentType = 612
	InstrumentType_INSTRUMENT_TYPE_HIGHLANDPIPES                 InstrumentType = 613
	InstrumentType_INSTRUMENT_TYPE_HORN                          InstrumentType = 614
	InstrumentType_INSTRUMENT_TYPE_HOTFOUNTAINPEN                InstrumentType = 615
	InstrumentType_INSTRUMENT_TYPE_IRISHLOWWHISTLE               InstrumentType = 616
	InstrumentType_INSTRUMENT_TYPE_JAGDHORN                      InstrumentType = 617
	InstrumentType_INSTRUMENT_TYPE_KAVAL                         InstrumentType = 618
	InstrumentType_INSTRUMENT_TYPE_KEYEDTRUMPET                  InstrumentType = 619
	InstrumentType_INSTRUMENT_TYPE_KHENE                         InstrumentType = 620
	InstrumentType_INSTRUMENT_TYPE_KHLUI                         InstrumentType = 621
	InstrumentType_INSTRUMENT_TYPE_LAUNEDDAS                     InstrumentType = 622
	InstrumentType_INSTRUMENT_TYPE_LUR                           InstrumentType = 623
	InstrumentType_INSTRUMENT_TYPE_MELLOPHONE                    InstrumentType = 624
	InstrumentType_INSTRUMENT_TYPE_MELODICA                      InstrumentType = 625
	InstrumentType_INSTRUMENT_TYPE_MIJWIZ                        InstrumentType = 626
	InstrumentType_INSTRUMENT_TYPE_MINIATUREKHENE                InstrumentType = 627
	InstrumentType_INSTRUMENT_TYPE_MIZMAR                        InstrumentType = 628
	InstrumentType_INSTRUMENT_TYPE_MOUTHORGAN                    InstrumentType = 629
	InstrumentType_INSTRUMENT_TYPE_NADASWARAM                    InstrumentType = 630
	InstrumentType_INSTRUMENT_TYPE_NAI                           InstrumentType = 631
	InstrumentType_INSTRUMENT_TYPE_NATIVEAMERICANFLUTE           InstrumentType = 632
	InstrumentType_INSTRUMENT_TYPE_NATURALHORN                   InstrumentType = 633
	InstrumentType_INSTRUMENT_TYPE_NATURALTRUMPET                InstrumentType = 634
	InstrumentType_INSTRUMENT_TYPE_NEYFLUTE                      InstrumentType = 635
	InstrumentType_INSTRUMENT_TYPE_OBOE                          InstrumentType = 636
	InstrumentType_INSTRUMENT_TYPE_OBOEDAMORE                    InstrumentType = 637
	InstrumentType_INSTRUMENT_TYPE_OBOEDACACCIA                  InstrumentType = 638
	InstrumentType_INSTRUMENT_TYPE_OCARINA                       InstrumentType = 639
	InstrumentType_INSTRUMENT_TYPE_OPHICLEIDE                    InstrumentType = 640
	InstrumentType_INSTRUMENT_TYPE_PAIXIAO                       InstrumentType = 641
	InstrumentType_INSTRUMENT_TYPE_PANFLUTE                      InstrumentType = 642
	InstrumentType_INSTRUMENT_TYPE_PI                            InstrumentType = 643
	InstrumentType_INSTRUMENT_TYPE_PICCOLOCLARINET               InstrumentType = 644
	InstrumentType_INSTRUMENT_TYPE_PICCOLOFLUTE                  InstrumentType = 645
	InstrumentType_INSTRUMENT_TYPE_PICCOLOTRUMPET                InstrumentType = 646
	InstrumentType_INSTRUMENT_TYPE_PINKILLU                      InstrumentType = 647
	InstrumentType_INSTRUMENT_TYPE_POCKETTRUMPET                 InstrumentType = 648
	InstrumentType_INSTRUMENT_TYPE_POLICEWHISTLE                 InstrumentType = 649
	InstrumentType_INSTRUMENT_TYPE_POSTHORN                      InstrumentType = 650
	InstrumentType_INSTRUMENT_TYPE_PUNGI                         InstrumentType = 651
	InstrumentType_INSTRUMENT_TYPE_QUENA                         InstrumentType = 652
	InstrumentType_INSTRUMENT_TYPE_QUENACHO                      InstrumentType = 653
	InstrumentType_INSTRUMENT_TYPE_RACKETT                       InstrumentType = 654
	InstrumentType_INSTRUMENT_TYPE_RAUSCHPFEIFE                  InstrumentType = 655
	InstrumentType_INSTRUMENT_TYPE_RECORDER                      InstrumentType = 656
	InstrumentType_INSTRUMENT_TYPE_REEDINSTRUMENT                InstrumentType = 657
	InstrumentType_INSTRUMENT_TYPE_REGAL                         InstrumentType = 658
	InstrumentType_INSTRUMENT_TYPE_RONDADOR                      InstrumentType = 659
	InstrumentType_INSTRUMENT_TYPE_SACKBUT                       InstrumentType = 660
	InstrumentType_INSTRUMENT_TYPE_SARRUSOPHONE                  InstrumentType = 661
	InstrumentType_INSTRUMENT_TYPE_SAXOPHONE                     InstrumentType = 662
	InstrumentType_INSTRUMENT_TYPE_SERPENT                       InstrumentType = 663
	InstrumentType_INSTRUMENT_TYPE_SHAKUHACHI                    InstrumentType = 664
	InstrumentType_INSTRUMENT_TYPE_SHAWM                         InstrumentType = 665
	InstrumentType_INSTRUMENT_TYPE_SHENAI                        InstrumentType = 666
	InstrumentType_INSTRUMENT_TYPE_SHELLTONE                     InstrumentType = 667
	InstrumentType_INSTRUMENT_TYPE_SHENG                         InstrumentType = 668
	InstrumentType_INSTRUMENT_TYPE_SHO                           InstrumentType = 669
	InstrumentType_INSTRUMENT_TYPE_SHOFAR                        InstrumentType = 670
	InstrumentType_INSTRUMENT_TYPE_SHRUTIBOX                     InstrumentType = 671
	InstrumentType_INSTRUMENT_TYPE_SHVIWHISTLE                   InstrumentType = 672
	InstrumentType_INSTRUMENT_TYPE_SIKU                          InstrumentType = 673
	InstrumentType_INSTRUMENT_TYPE_SLIDESAXOPHONE                InstrumentType = 674
	InstrumentType_INSTRUMENT_TYPE_SLIDETRUMPET                  InstrumentType = 675
	InstrumentType_INSTRUMENT_TYPE_SLIDEWHISTLE                  InstrumentType = 676
	InstrumentType_INSTRUMENT_TYPE_SOPRANINORECORDER             InstrumentType = 677
	InstrumentType_INSTRUMENT_TYPE_SOPRANINOSAXOPHONE            InstrumentType = 678
	InstrumentType_INSTRUMENT_TYPE_SOPRANOCLARINET               InstrumentType = 679
	InstrumentType_INSTRUMENT_TYPE_SOPRANOCORNET                 InstrumentType = 680
	InstrumentType_INSTRUMENT_TYPE_SOPRANOCRUMHORN               InstrumentType = 681
	InstrumentType_INSTRUMENT_TYPE_SOPRANODULCIAN                InstrumentType = 682
	InstrumentType_INSTRUMENT_TYPE_SOPRANORECORDER               InstrumentType = 683
	InstrumentType_INSTRUMENT_TYPE_SOPRANOSAXOPHONE              InstrumentType = 684
	InstrumentType_INSTRUMENT_TYPE_SOPRANOSHAWM                  InstrumentType = 685
	InstrumentType_INSTRUMENT_TYPE_SOPRANOTRUMPET                InstrumentType = 686
	InstrumentType_INSTRUMENT_TYPE_SORDUN                        InstrumentType = 687
	InstrumentType_INSTRUMENT_TYPE_SOUSAPHONE                    InstrumentType = 688
	InstrumentType_INSTRUMENT_TYPE_SULING                        InstrumentType = 689
	InstrumentType_INSTRUMENT_TYPE_SUONA                         InstrumentType = 690
	InstrumentType_INSTRUMENT_TYPE_TARKA                         InstrumentType = 691
	InstrumentType_INSTRUMENT_TYPE_TAROGATO                      InstrumentType = 692
	InstrumentType_INSTRUMENT_TYPE_TENORCRUMHORN                 InstrumentType = 693
	InstrumentType_INSTRUMENT_TYPE_TENORDULCIAN                  InstrumentType = 694
	InstrumentType_INSTRUMENT_TYPE_TENORFLUTE                    InstrumentType = 695
	InstrumentType_INSTRUMENT_TYPE_TENORRECORDER                 InstrumentType = 696
	InstrumentType_INSTRUMENT_TYPE_TENORSACKBUT                  InstrumentType = 697
	InstrumentType_INSTRUMENT_TYPE_TENORSAXOPHONE                InstrumentType = 698
	InstrumentType_INSTRUMENT_TYPE_TENORSHAWM                    InstrumentType = 699
	InstrumentType_INSTRUMENT_TYPE_TENORTROMBONE                 InstrumentType = 700
	InstrumentType_INSTRUMENT_TYPE_TINWHISTLE                    InstrumentType = 701
	InstrumentType_INSTRUMENT_TYPE_TROMBONE                      InstrumentType = 702
	InstrumentType_INSTRUMENT_TYPE_TRUMPET                       InstrumentType = 703
	InstrumentType_INSTRUMENT_TYPE_TUBA                          InstrumentType = 704
	InstrumentType_INSTRUMENT_TYPE_TUSSELFLOYTE                  InstrumentType = 705
	InstrumentType_INSTRUMENT_TYPE_UILLEANPIPES                  InstrumentType = 706
	InstrumentType_INSTRUMENT_TYPE_VALVETROMBONE                 InstrumentType = 707
	InstrumentType_INSTRUMENT_TYPE_VUVUZELA                      InstrumentType = 708
	InstrumentType_INSTRUMENT_TYPE_WAGNERTUBA                    InstrumentType = 709
	InstrumentType_INSTRUMENT_TYPE_WILLOWFLUTE                   InstrumentType = 710
	InstrumentType_INSTRUMENT_TYPE_WINDINSTRUMENT                InstrumentType = 711
	InstrumentType_INSTRUMENT_TYPE_WOODFLUTE                     InstrumentType = 712
	InstrumentType_INSTRUMENT_TYPE_WOODTRUMPET                   InstrumentType = 713
	InstrumentType_INSTRUMENT_TYPE_WOT                           InstrumentType = 714
	InstrumentType_INSTRUMENT_TYPE_XAPHOON                       InstrumentType = 715
	InstrumentType_INSTRUMENT_TYPE_XIAO                          InstrumentType = 716
	InstrumentType_INSTRUMENT_TYPE_XUN                           InstrumentType = 717
	InstrumentType_INSTRUMENT_TYPE_ZUMMARA                       InstrumentType = 718
	InstrumentType_INSTRUMENT_TYPE_ZURNA                         InstrumentType = 719
	InstrumentType_INSTRUMENT_TYPE_CHOIR                         InstrumentType = 720
	InstrumentType_INSTRUMENT_TYPE_PERCUSSIONSECTION             InstrumentType = 721
	InstrumentType_INSTRUMENT_TYPE_STRINGSECTION                 InstrumentType = 722
	InstrumentType_INSTRUMENT_TYPE_WINDSECTION                   InstrumentType = 723
	InstrumentType_INSTRUMENT_TYPE_USERDEFINED                   InstrumentType = 724
)

// Enum value maps for InstrumentType.
var (
	InstrumentType_name = map[int32]string{
		0:   "INSTRUMENT_TYPE_UNSPECIFIED",
		1:   "INSTRUMENT_TYPE_ACCORDION",
		2:   "INSTRUMENT_TYPE_BANDONEON",
		3:   "INSTRUMENT_TYPE_CHROMATICBUTTONACCORDION",
		4:   "INSTRUMENT_TYPE_CONCERTINA",
		5:   "INSTRUMENT_TYPE_CORDOVOX",
		6:   "INSTRUMENT_TYPE_MELODEON",
		7:   "INSTRUMENT_TYPE_MUSETTE",
		8:   "INSTRUMENT_TYPE_PIANOACCORDION",
		9:   "INSTRUMENT_TYPE_TOYACCORDION",
		10:  "INSTRUMENT_TYPE_ACOUSTICBASSGUITAR",
		11:  "INSTRUMENT_TYPE_BABYBASS",
		12:  "INSTRUMENT_TYPE_BASS",
		13:  "INSTRUMENT_TYPE_BASSGUITAR",
		14:  "INSTRUMENT_TYPE_ELECTRICBASSGUITAR",
		15:  "INSTRUMENT_TYPE_FRETLESSBASSGUITAR",
		16:  "INSTRUMENT_TYPE_PICCOLOBASS",
		17:  "INSTRUMENT_TYPE_UPRIGHTBASS",
		18:  "INSTRUMENT_TYPE_WASHTUBBASS",
		19:  "INSTRUMENT_TYPE_DRUMMACHINE",
		20:  "INSTRUMENT_TYPE_BREAKBEAT",
		21:  "INSTRUMENT_TYPE_DRUMKIT",
		22:  "INSTRUMENT_TYPE_DRUMSAMPLE",
		23:  "INSTRUMENT_TYPE_E_12_STRINGELECTRICGUITAR",
		24:  "INSTRUMENT_TYPE_E_12_STRINGGUITAR",
		25:  "INSTRUMENT_TYPE_ACOUSTICGUITAR",
		26:  "INSTRUMENT_TYPE_BAHIANGUITAR",
		27:  "INSTRUMENT_TYPE_BAJOSEXTO",
		28:  "INSTRUMENT_TYPE_BARITONEGUITAR",
		29:  "INSTRUMENT_TYPE_BAROQUEGUITAR",
		30:  "INSTRUMENT_TYPE_CHAPMANSTICK",
		31:  "INSTRUMENT_TYPE_NYLONSTRINGGUITAR",
		32:  "INSTRUMENT_TYPE_DOBROGUITAR",
		33:  "INSTRUMENT_TYPE_ELECTRICGUITAR",
		34:  "INSTRUMENT_TYPE_ELECTRICSITAR",
		35:  "INSTRUMENT_TYPE_FRYINGPANGUITAR",
		36:  "INSTRUMENT_TYPE_GUITAR",
		37:  "INSTRUMENT_TYPE_GUITARRON",
		38:  "INSTRUMENT_TYPE_LAPSTEELGUITAR",
		39:  "INSTRUMENT_TYPE_PEDABRO",
		40:  "INSTRUMENT_TYPE_PEDALSTEELGUITAR",
		41:  "INSTRUMENT_TYPE_PORTUGUESEGUITAR",
		42:  "INSTRUMENT_TYPE_RENAISSANCEGUITAR",
		43:  "INSTRUMENT_TYPE_ROMANTICGUITAR",
		44:  "INSTRUMENT_TYPE_TENORGUITAR",
		45:  "INSTRUMENT_TYPE_TIPLE",
		46:  "INSTRUMENT_TYPE_TOUCHGUITAR",
		47:  "INSTRUMENT_TYPE_TRES",
		48:  "INSTRUMENT_TYPE_VIOLACAIPIRA",
		49:  "INSTRUMENT_TYPE_ACOUSTICKEYBOARD",
		50:  "INSTRUMENT_TYPE_CELESTA",
		51:  "INSTRUMENT_TYPE_CHAMBERLIN",
		52:  "INSTRUMENT_TYPE_CLAVICHORD",
		53:  "INSTRUMENT_TYPE_CLAVINET",
		54:  "INSTRUMENT_TYPE_DULCITONE",
		55:  "INSTRUMENT_TYPE_ELECTRICPIANO",
		56:  "INSTRUMENT_TYPE_HARPSICHORD",
		57:  "INSTRUMENT_TYPE_KEYBOARD",
		58:  "INSTRUMENT_TYPE_KLAVIER",
		59:  "INSTRUMENT_TYPE_MELLOTRON",
		60:  "INSTRUMENT_TYPE_OPTIGAN",
		61:  "INSTRUMENT_TYPE_PIANET",
		62:  "INSTRUMENT_TYPE_RHODES",
		63:  "INSTRUMENT_TYPE_SAMPLEDKEYBOARD",
		64:  "INSTRUMENT_TYPE_SPINET",
		65:  "INSTRUMENT_TYPE_VAKOORCHESTRON",
		66:  "INSTRUMENT_TYPE_VIRGINALS",
		67:  "INSTRUMENT_TYPE_ELECTRICORGAN",
		68:  "INSTRUMENT_TYPE_HAMMONDORGAN",
		69:  "INSTRUMENT_TYPE_LOWREYORGAN",
		70:  "INSTRUMENT_TYPE_ORGAN",
		71:  "INSTRUMENT_TYPE_PIPEORGAN",
		72:  "INSTRUMENT_TYPE_POSITIVEORGAN",
		73:  "INSTRUMENT_TYPE_PUMPORGAN",
		74:  "INSTRUMENT_TYPE_BARRELORGAN",
		75:  "INSTRUMENT_TYPE_BICYCLEPUMP",
		76:  "INSTRUMENT_TYPE_CHURCHBELLS",
		77:  "INSTRUMENT_TYPE_COMB",
		78:  "INSTRUMENT_TYPE_DICTOPHONE",
		79:  "INSTRUMENT_TYPE_HOHNERGUITARET",
		80:  "INSTRUMENT_TYPE_JEWSHARP",
		81:  "INSTRUMENT_TYPE_KAZOO",
		82:  "INSTRUMENT_TYPE_MUSICBOX",
		83:  "INSTRUMENT_TYPE_OMNICHORD",
		84:  "INSTRUMENT_TYPE_OTHERINSTRUMENT",
		85:  "INSTRUMENT_TYPE_SPECTRASONICSOMNISPHERE",
		86:  "INSTRUMENT_TYPE_TOYPIANO",
		87:  "INSTRUMENT_TYPE_TURNTABLE",
		88:  "INSTRUMENT_TYPE_AFRICANPERCUSSION",
		89:  "INSTRUMENT_TYPE_AGOGOBELLS",
		90:  "INSTRUMENT_TYPE_ANGKLUNG",
		91:  "INSTRUMENT_TYPE_ANVIL",
		92:  "INSTRUMENT_TYPE_ATUMPAN",
		93:  "INSTRUMENT_TYPE_BALAFON",
		94:  "INSTRUMENT_TYPE_BASSDRUM_CONCERT",
		95:  "INSTRUMENT_TYPE_BASSDRUM_KICK",
		96:  "INSTRUMENT_TYPE_BATA",
		97:  "INSTRUMENT_TYPE_BELLS",
		98:  "INSTRUMENT_TYPE_BELLTREE",
		99:  "INSTRUMENT_TYPE_BENDIR",
		100: "INSTRUMENT_TYPE_BERIMBAU",
		101: "INSTRUMENT_TYPE_BINGHIDRUM",
		102: "INSTRUMENT_TYPE_BODHRAN",
		103: "INSTRUMENT_TYPE_BODYPERCUSSION",
		104: "INSTRUMENT_TYPE_BOMBO",
		105: "INSTRUMENT_TYPE_BOMBOLEGUERO",
		106: "INSTRUMENT_TYPE_BONES",
		107: "INSTRUMENT_TYPE_BONGOS",
		108: "INSTRUMENT_TYPE_BOTTLES",
		109: "INSTRUMENT_TYPE_BRAZILIANPERCUSSION",
		110: "INSTRUMENT_TYPE_CABASA",
		111: "INSTRUMENT_TYPE_CAIXA",
		112: "INSTRUMENT_TYPE_CAJA",
		113: "INSTRUMENT_TYPE_CAJON",
		114: "INSTRUMENT_TYPE_CALABASH",
		115: "INSTRUMENT_TYPE_CARILLON",
		116: "INSTRUMENT_TYPE_CASTANET",
		117: "INSTRUMENT_TYPE_CAXIXI",
		118: "INSTRUMENT_TYPE_CHIMES",
		119: "INSTRUMENT_TYPE_CHOCALHO",
		120: "INSTRUMENT_TYPE_CLAPSTICK",
		121: "INSTRUMENT_TYPE_CLAVES",
		122: "INSTRUMENT_TYPE_CLAYPOT",
		123: "INSTRUMENT_TYPE_CONGAS",
		124: "INSTRUMENT_TYPE_COWBELL",
		125: "INSTRUMENT_TYPE_CROTALES",
		126: "INSTRUMENT_TYPE_CUICA",
		127: "INSTRUMENT_TYPE_CYMBAL_CRASH",
		128: "INSTRUMENT_TYPE_CYMBAL_RIDE",
		129: "INSTRUMENT_TYPE_CYMBAL_SUSPENDED",
		130: "INSTRUMENT_TYPE_CYMBALS",
		131: "INSTRUMENT_TYPE_DAF",
		132: "INSTRUMENT_TYPE_DAMARU",
		133: "INSTRUMENT_TYPE_DAVUL",
		134: "INSTRUMENT_TYPE_DAYEREH",
		135: "INSTRUMENT_TYPE_DEFI",
		136: "INSTRUMENT_TYPE_DHOL",
		137: "INSTRUMENT_TYPE_DHOLAK",
		138: "INSTRUMENT_TYPE_DJEMBE",
		139: "INSTRUMENT_TYPE_DOHOL",
		140: "INSTRUMENT_TYPE_DOUMBEK",
		141: "INSTRUMENT_TYPE_DRUM",
		142: "INSTRUMENT_TYPE_DRUMSTICKS",
		143: "INSTRUMENT_TYPE_DUGGI",
		144: "INSTRUMENT_TYPE_DUNUN",
		145: "INSTRUMENT_TYPE_ELEPHANTBELL",
		146: "INSTRUMENT_TYPE_FINGERCLICKS",
		147: "INSTRUMENT_TYPE_FINGERCYMBALS",
		148: "INSTRUMENT_TYPE_FINGERSNAPS",
		149: "INSTRUMENT_TYPE_FLEXATONE",
		150: "INSTRUMENT_TYPE_FOLKLORICPERCUSSION",
		151: "INSTRUMENT_TYPE_FOOTSTOMP",
		152: "INSTRUMENT_TYPE_FROG",
		153: "INSTRUMENT_TYPE_GAMBANG",
		154: "INSTRUMENT_TYPE_GAMELAN",
		155: "INSTRUMENT_TYPE_GANGA",
		156: "INSTRUMENT_TYPE_GLASSHARMONICA",
		157: "INSTRUMENT_TYPE_GLASSHARP",
		158: "INSTRUMENT_TYPE_GLOCKENSPIEL",
		159: "INSTRUMENT_TYPE_GONG",
		160: "INSTRUMENT_TYPE_GUACHARACA",
		161: "INSTRUMENT_TYPE_GUACHE",
		162: "INSTRUMENT_TYPE_GUIRA",
		163: "INSTRUMENT_TYPE_GUIRO",
		164: "INSTRUMENT_TYPE_HANDBELLS",
		165: "INSTRUMENT_TYPE_HANDCHIMES",
		166: "INSTRUMENT_TYPE_HANDCLAPS",
		167: "INSTRUMENT_TYPE_HIHATCYMBAL",
		168: "INSTRUMENT_TYPE_JAMBLOCK",
		169: "INSTRUMENT_TYPE_JAWBONE",
		170: "INSTRUMENT_TYPE_JAWHARP",
		171: "INSTRUMENT_TYPE_JUG",
		172: "INSTRUMENT_TYPE_KALIMBA",
		173: "INSTRUMENT_TYPE_KANJIRA",
		174: "INSTRUMENT_TYPE_KATSA",
		175: "INSTRUMENT_TYPE_KENDANG",
		176: "INSTRUMENT_TYPE_KHAMAK",
		177: "INSTRUMENT_TYPE_KHARTAL",
		178: "INSTRUMENT_TYPE_KHOL",
		179: "INSTRUMENT_TYPE_KHONGWONGLEK",
		180: "INSTRUMENT_TYPE_KHONGWONGYAI",
		181: "INSTRUMENT_TYPE_KNUCKLES",
		182: "INSTRUMENT_TYPE_LATINPERCUSSION",
		183: "INSTRUMENT_TYPE_LITHOPHONE",
		184: "INSTRUMENT_TYPE_LOKOLE",
		185: "INSTRUMENT_TYPE_MADAL",
		186: "INSTRUMENT_TYPE_MARACAS",
		187: "INSTRUMENT_TYPE_MARIMBA",
		188: "INSTRUMENT_TYPE_MARIMBAPHONE",
		189: "INSTRUMENT_TYPE_MARIMBULA",
		190: "INSTRUMENT_TYPE_MAZHAR",
		191: "INSTRUMENT_TYPE_MBIRA",
		192: "INSTRUMENT_TYPE_METALCANS",
		193: "INSTRUMENT_TYPE_MOUTHPERCUSSION",
		194: "INSTRUMENT_TYPE_MRIDANGAM",
		195: "INSTRUMENT_TYPE_MUHARSING",
		196: "INSTRUMENT_TYPE_NAAL",
		197: "INSTRUMENT_TYPE_NAGARA",
		198: "INSTRUMENT_TYPE_OBOROMDRUM",
		199: "INSTRUMENT_TYPE_OCTOBAN",
		200: "INSTRUMENT_TYPE_ORCHESTRALPERCUSSION",
		201: "INSTRUMENT_TYPE_PADDLEDRUMS",
		202: "INSTRUMENT_TYPE_PANDEIRO",
		203: "INSTRUMENT_TYPE_PERCUSSIONINSTRUMENT",
		204: "INSTRUMENT_TYPE_PITCHEDPERCUSSIONINSTRUMENT",
		205: "INSTRUMENT_TYPE_PONGLANG",
		206: "INSTRUMENT_TYPE_POTSANDPANS",
		207: "INSTRUMENT_TYPE_QARKABEB",
		208: "INSTRUMENT_TYPE_RAINSTICK",
		209: "INSTRUMENT_TYPE_RANAT",
		210: "INSTRUMENT_TYPE_RATCHET",
		211: "INSTRUMENT_TYPE_RATTLE",
		212: "INSTRUMENT_TYPE_RECORECO",
		213: "INSTRUMENT_TYPE_REPINIQUE",
		214: "INSTRUMENT_TYPE_RHYTHMSTICK",
		215: "INSTRUMENT_TYPE_RIQ",
		216: "INSTRUMENT_TYPE_RNGA",
		217: "INSTRUMENT_TYPE_ROLMO",
		218: "INSTRUMENT_TYPE_ROTOTOMS",
		219: "INSTRUMENT_TYPE_SABAR",
		220: "INSTRUMENT_TYPE_SANDBLOCKS",
		221: "INSTRUMENT_TYPE_SAW",
		222: "INSTRUMENT_TYPE_SCRATCHER",
		223: "INSTRUMENT_TYPE_SHAKER",
		224: "INSTRUMENT_TYPE_SHEKERE",
		225: "INSTRUMENT_TYPE_SINGINGBOWLS",
		226: "INSTRUMENT_TYPE_SISTRUM",
		227: "INSTRUMENT_TYPE_SLAPSTICK",
		228: "INSTRUMENT_TYPE_SLEIGHBELLS",
		229: "INSTRUMENT_TYPE_SNAREDRUM",
		230: "INSTRUMENT_TYPE_SNAREDRUM_MARCHING",
		231: "INSTRUMENT_TYPE_SPOONS",
		232: "INSTRUMENT_TYPE_SPRINGDRUM",
		233: "INSTRUMENT_TYPE_STEELDRUMS",
		234: "INSTRUMENT_TYPE_STICKS",
		235: "INSTRUMENT_TYPE_SURDO",
		236: "INSTRUMENT_TYPE_TAAL",
		237: "INSTRUMENT_TYPE_TAARIJA",
		238: "INSTRUMENT_TYPE_TABLA",
		239: "INSTRUMENT_TYPE_TABOR",
		240: "INSTRUMENT_TYPE_TAIKO",
		241: "INSTRUMENT_TYPE_TALKINGDRUM",
		242: "INSTRUMENT_TYPE_TAMBORA",
		243: "INSTRUMENT_TYPE_TAMBORIM",
		244: "INSTRUMENT_TYPE_TAMBOUR",
		245: "INSTRUMENT_TYPE_TAMBOURINE",
		246: "INSTRUMENT_TYPE_TAMTAM",
		247: "INSTRUMENT_TYPE_TAONGAPUORO",
		248: "INSTRUMENT_TYPE_TAR_PERCUSSION",
		249: "INSTRUMENT_TYPE_TAROL",
		250: "INSTRUMENT_TYPE_TEMPLEBELL",
		251: "INSTRUMENT_TYPE_TEMPLEBLOCKS",
		252: "INSTRUMENT_TYPE_TENORDRUM",
		253: "INSTRUMENT_TYPE_THAVIL",
		254: "INSTRUMENT_TYPE_THUNDERSHEET",
		255: "INSTRUMENT_TYPE_TIBETANBELLS",
		256: "INSTRUMENT_TYPE_TIMBALES",
		257: "INSTRUMENT_TYPE_TIMBAU",
		258: "INSTRUMENT_TYPE_TIMPANI",
		259: "INSTRUMENT_TYPE_TINGSHA",
		260: "INSTRUMENT_TYPE_TOMPAK",
		261: "INSTRUMENT_TYPE_TOMS",
		262: "INSTRUMENT_TYPE_TONGUEDRUM",
		263: "INSTRUMENT_TYPE_TRIANGLE",
		264: "INSTRUMENT_TYPE_TXALAPARTA",
		265: "INSTRUMENT_TYPE_UDU",
		266: "INSTRUMENT_TYPE_ULIULI",
		267: "INSTRUMENT_TYPE_UNPITCHEDPERCUSSIONINSTRUMENT",
		268: "INSTRUMENT_TYPE_URUMEE",
		269: "INSTRUMENT_TYPE_VIBRAPHONE",
		270: "INSTRUMENT_TYPE_VIBRASLAP",
		271: "INSTRUMENT_TYPE_WASHBOARD",
		272: "INSTRUMENT_TYPE_WATERPHONE",
		273: "INSTRUMENT_TYPE_WINDCHIMES",
		274: "INSTRUMENT_TYPE_WINDMACHINE",
		275: "INSTRUMENT_TYPE_WOBBLEBOARD",
		276: "INSTRUMENT_TYPE_WOODBLOCK",
		277: "INSTRUMENT_TYPE_XYLOPHONE",
		278: "INSTRUMENT_TYPE_XYLORIMBA",
		279: "INSTRUMENT_TYPE_ZERBAGHALI",
		280: "INSTRUMENT_TYPE_ZYDECORUBBOARD",
		281: "INSTRUMENT_TYPE_FORTEPIANO",
		282: "INSTRUMENT_TYPE_GRANDPIANO",
		283: "INSTRUMENT_TYPE_LUTHEAL",
		284: "INSTRUMENT_TYPE_PIANO",
		285: "INSTRUMENT_TYPE_PIANOHARP",
		286: "INSTRUMENT_TYPE_PIANOLA",
		287: "INSTRUMENT_TYPE_PREPAREDPIANO",
		288: "INSTRUMENT_TYPE_SQUAREPIANO",
		289: "INSTRUMENT_TYPE_TACKPIANO",
		290: "INSTRUMENT_TYPE_UPRIGHTPIANO",
		291: "INSTRUMENT_TYPE_ANIMALSOUNDS",
		292: "INSTRUMENT_TYPE_APPLAUSE",
		293: "INSTRUMENT_TYPE_BIRDSONG",
		294: "INSTRUMENT_TYPE_CARSOUNDS",
		295: "INSTRUMENT_TYPE_CHATTER",
		296: "INSTRUMENT_TYPE_CHEWINGSOUNDS",
		297: "INSTRUMENT_TYPE_GIZMO",
		298: "INSTRUMENT_TYPE_GUNSHOTS",
		299: "INSTRUMENT_TYPE_MAGNETICTAPETREATMENTS",
		300: "INSTRUMENT_TYPE_ORCHESTRALHIT",
		301: "INSTRUMENT_TYPE_RECORDNOISE",
		302: "INSTRUMENT_TYPE_SIREN",
		303: "INSTRUMENT_TYPE_SOUNDDESIGN",
		304: "INSTRUMENT_TYPE_SOUNDEFFECTS",
		305: "INSTRUMENT_TYPE_TRAINSOUNDS",
		306: "INSTRUMENT_TYPE_TREATMENTS",
		307: "INSTRUMENT_TYPE_UNINTENDEDARTIFACTS",
		308: "INSTRUMENT_TYPE_E_5_STRINGBANJO",
		309: "INSTRUMENT_TYPE_AFRICANHARP",
		310: "INSTRUMENT_TYPE_ALTOVIOL",
		311: "INSTRUMENT_TYPE_ANDEANHARP",
		312: "INSTRUMENT_TYPE_ARCHLUTE",
		313: "INSTRUMENT_TYPE_AUTOHARP",
		314: "INSTRUMENT_TYPE_BAGLAMA",
		315: "INSTRUMENT_TYPE_BALALAIKA",
		316: "INSTRUMENT_TYPE_BANDURA",
		317: "INSTRUMENT_TYPE_BANDURRIA",
		318: "INSTRUMENT_TYPE_BANHU",
		319: "INSTRUMENT_TYPE_BANJO",
		320: "INSTRUMENT_TYPE_BANJOGUITAR",
		321: "INSTRUMENT_TYPE_BANJOLIN",
		322: "INSTRUMENT_TYPE_BAROQUECELLO",
		323: "INSTRUMENT_TYPE_BAROQUEVIOLA",
		324: "INSTRUMENT_TYPE_BAROQUEVIOLIN",
		325: "INSTRUMENT_TYPE_BARYTON",
		326: "INSTRUMENT_TYPE_BASSBANJO",
		327: "INSTRUMENT_TYPE_BASSCITTERN",
		328: "INSTRUMENT_TYPE_BASSREBEC",
		329: "INSTRUMENT_TYPE_BASSVIOL",
		330: "INSTRUMENT_TYPE_BASSODABRACCIO",
		331: "INSTRUMENT_TYPE_BIWA",
		332: "INSTRUMENT_TYPE_BOUZOUKI",
		333: "INSTRUMENT_TYPE_BOWEDSTRINGS",
		334: "INSTRUMENT_TYPE_BOZOQ",
		335: "INSTRUMENT_TYPE_BUFOBASS",
		336: "INSTRUMENT_TYPE_CAVAQUINHO",
		337: "INSTRUMENT_TYPE_CELLO",
		338: "INSTRUMENT_TYPE_CELLOBANJO",
		339: "INSTRUMENT_TYPE_CELTICHARP",
		340: "INSTRUMENT_TYPE_CHARANGO",
		341: "INSTRUMENT_TYPE_CIMBALOM",
		342: "INSTRUMENT_TYPE_CITOLE",
		343: "INSTRUMENT_TYPE_CITTERN",
		344: "INSTRUMENT_TYPE_CONCERTHARP",
		345: "INSTRUMENT_TYPE_CRAVIOLA",
		346: "INSTRUMENT_TYPE_CRWTH",
		347: "INSTRUMENT_TYPE_CUATRO",
		348: "INSTRUMENT_TYPE_CUMBUS",
		349: "INSTRUMENT_TYPE_DANBAU",
		350: "INSTRUMENT_TYPE_DANTRANH",
		351: "INSTRUMENT_TYPE_DILRUBA",
		352: "INSTRUMENT_TYPE_DOMBRA",
		353: "INSTRUMENT_TYPE_DOMRA",
		354: "INSTRUMENT_TYPE_DOUBLEBASS",
		355: "INSTRUMENT_TYPE_DOUBLEHARP",
		356: "INSTRUMENT_TYPE_DOUBLEVIOLIN",
		357: "INSTRUMENT_TYPE_DOUBLEBASSVIOL",
		358: "INSTRUMENT_TYPE_DRANYEN",
		359: "INSTRUMENT_TYPE_DUTAR",
		360: "INSTRUMENT_TYPE_DZUDDAHORD",
		361: "INSTRUMENT_TYPE_EKTARA",
		362: "INSTRUMENT_TYPE_ELECTRIC6STRINGVIOLIN",
		363: "INSTRUMENT_TYPE_ELECTRICCELLO",
		364: "INSTRUMENT_TYPE_ELECTRICHARP",
		365: "INSTRUMENT_TYPE_ELECTRICMANDOLIN",
		366: "INSTRUMENT_TYPE_ELECTRICVIOLA",
		367: "INSTRUMENT_TYPE_ELECTRICVIOLIN",
		368: "INSTRUMENT_TYPE_ELECTROACOUSTICHURDYGURDY",
		369: "INSTRUMENT_TYPE_ENNANGA",
		370: "INSTRUMENT_TYPE_EPINETTEDESVOSGES",
		371: "INSTRUMENT_TYPE_ERHU",
		372: "INSTRUMENT_TYPE_ESRAJ",
		373: "INSTRUMENT_TYPE_FIDDLE",
		374: "INSTRUMENT_TYPE_FOLKHARP",
		375: "INSTRUMENT_TYPE_GADULKA",
		376: "INSTRUMENT_TYPE_GARDON",
		377: "INSTRUMENT_TYPE_GAYAGEUM",
		378: "INSTRUMENT_TYPE_GHAYCHAK",
		379: "INSTRUMENT_TYPE_GITTERN",
		380: "INSTRUMENT_TYPE_GUQIN",
		381: "INSTRUMENT_TYPE_GUSLI",
		382: "INSTRUMENT_TYPE_GUZHENG",
		383: "INSTRUMENT_TYPE_HAEGEUM",
		384: "INSTRUMENT_TYPE_HAMMEREDDULCIMER",
		385: "INSTRUMENT_TYPE_HAMMEREDSTRINGS",
		386: "INSTRUMENT_TYPE_HARDANGERFIDDLE",
		387: "INSTRUMENT_TYPE_HARP",
		388: "INSTRUMENT_TYPE_HUAPANGUERA",
		389: "INSTRUMENT_TYPE_HURDYGURDY",
		390: "INSTRUMENT_TYPE_IRISHBOUZOUKI",
		391: "INSTRUMENT_TYPE_JAKHAY",
		392: "INSTRUMENT_TYPE_JARANAJAROCHA",
		393: "INSTRUMENT_TYPE_JINGHU",
		394: "INSTRUMENT_TYPE_KACAPI",
		395: "INSTRUMENT_TYPE_KANTELE",
		396: "INSTRUMENT_TYPE_KANUN",
		397: "INSTRUMENT_TYPE_KEMENCHE",
		398: "INSTRUMENT_TYPE_KHIM",
		399: "INSTRUMENT_TYPE_KORA",
		400: "INSTRUMENT_TYPE_KOTO",
		401: "INSTRUMENT_TYPE_KUGO",
		402: "INSTRUMENT_TYPE_LANGELEIK",
		403: "INSTRUMENT_TYPE_LAOUTO",
		404: "INSTRUMENT_TYPE_LEONA",
		405: "INSTRUMENT_TYPE_LIRONE",
		406: "INSTRUMENT_TYPE_LUTE",
		407: "INSTRUMENT_TYPE_LYRAVIOL",
		408: "INSTRUMENT_TYPE_LYRE",
		409: "INSTRUMENT_TYPE_MANDOCELLO",
		410: "INSTRUMENT_TYPE_MANDOLA",
		411: "INSTRUMENT_TYPE_MANDOLELE",
		412: "INSTRUMENT_TYPE_MANDOLIN",
		413: "INSTRUMENT_TYPE_MANDOLINO",
		414: "INSTRUMENT_TYPE_MANDORE",
		415: "INSTRUMENT_TYPE_MARXOPHONE",
		416: "INSTRUMENT_TYPE_MEDIEVALFIDDLE",
		417: "INSTRUMENT_TYPE_MEDIEVALHARP",
		418: "INSTRUMENT_TYPE_MOHANVEENA",
		419: "INSTRUMENT_TYPE_MUSICALBOW",
		420: "INSTRUMENT_TYPE_NGONI",
		421: "INSTRUMENT_TYPE_NJARKA",
		422: "INSTRUMENT_TYPE_NYATITI",
		423: "INSTRUMENT_TYPE_NYCKELHARPA",
		424: "INSTRUMENT_TYPE_ORGANISTRUM",
		425: "INSTRUMENT_TYPE_ORPHARION",
		426: "INSTRUMENT_TYPE_OUD",
		427: "INSTRUMENT_TYPE_PANDURA",
		428: "INSTRUMENT_TYPE_PARAGUAYANHARP",
		429: "INSTRUMENT_TYPE_PHIN",
		430: "INSTRUMENT_TYPE_PHONOFIDDLE",
		431: "INSTRUMENT_TYPE_PIPA",
		432: "INSTRUMENT_TYPE_PLUCKEDDULCIMER",
		433: "INSTRUMENT_TYPE_PLUCKEDSTRINGS",
		434: "INSTRUMENT_TYPE_PSALTERY",
		435: "INSTRUMENT_TYPE_RABEL",
		436: "INSTRUMENT_TYPE_REBAB",
		437: "INSTRUMENT_TYPE_REBEC",
		438: "INSTRUMENT_TYPE_RUAN",
		439: "INSTRUMENT_TYPE_SANTOOR",
		440: "INSTRUMENT_TYPE_SARANGI",
		441: "INSTRUMENT_TYPE_SAROD",
		442: "INSTRUMENT_TYPE_SAUNG",
		443: "INSTRUMENT_TYPE_SAWDUANG",
		444: "INSTRUMENT_TYPE_SHAMISEN",
		445: "INSTRUMENT_TYPE_SIMSIMIYYA",
		446: "INSTRUMENT_TYPE_SINTIR",
		447: "INSTRUMENT_TYPE_SITAR",
		448: "INSTRUMENT_TYPE_SOPRANODOMRA",
		449: "INSTRUMENT_TYPE_STRINGINSTRUMENT",
		450: "INSTRUMENT_TYPE_STROHLVIOLIN",
		451: "INSTRUMENT_TYPE_SURBAHAR",
		452: "INSTRUMENT_TYPE_SWARMANDAL",
		453: "INSTRUMENT_TYPE_TAMBURA",
		454: "INSTRUMENT_TYPE_TANBOUR",
		455: "INSTRUMENT_TYPE_TANPURA",
		456: "INSTRUMENT_TYPE_TAR_STRING",
		457: "INSTRUMENT_TYPE_TENORBANJO",
		458: "INSTRUMENT_TYPE_TENORREBEC",
		459: "INSTRUMENT_TYPE_TENORVIOL",
		460: "INSTRUMENT_TYPE_THEORBO",
		461: "INSTRUMENT_TYPE_TIMPLE",
		462: "INSTRUMENT_TYPE_TOGAMANGUITARVIOL",
		463: "INSTRUMENT_TYPE_TREBLEREBEC",
		464: "INSTRUMENT_TYPE_TREBLEVIOL",
		465: "INSTRUMENT_TYPE_TROMBAMARINA",
		466: "INSTRUMENT_TYPE_TUMBI",
		467: "INSTRUMENT_TYPE_TZOURAS",
		468: "INSTRUMENT_TYPE_UKULELE",
		469: "INSTRUMENT_TYPE_VALIHA",
		470: "INSTRUMENT_TYPE_VEENA",
		471: "INSTRUMENT_TYPE_VENEZUELANHARP",
		472: "INSTRUMENT_TYPE_VERACRUZHARP",
		473: "INSTRUMENT_TYPE_VITAR",
		474: "INSTRUMENT_TYPE_VICHITRAVEENA",
		475: "INSTRUMENT_TYPE_VIELLE",
		476: "INSTRUMENT_TYPE_VIHUELA",
		477: "INSTRUMENT_TYPE_VIOL",
		478: "INSTRUMENT_TYPE_VIOLA",
		479: "INSTRUMENT_TYPE_VIOLADAMORE",
		480: "INSTRUMENT_TYPE_VIOLADAGAMBA",
		481: "INSTRUMENT_TYPE_VIOLAPOMPOSA",
		482: "INSTRUMENT_TYPE_VIOLIN",
		483: "INSTRUMENT_TYPE_VIOLINOPICCOLO",
		484: "INSTRUMENT_TYPE_WELSHTRIPLEHARP",
		485: "INSTRUMENT_TYPE_WIRESTRUNGHARP",
		486: "INSTRUMENT_TYPE_XALAM",
		487: "INSTRUMENT_TYPE_YANGQIN",
		488: "INSTRUMENT_TYPE_YAYLITAMBUR",
		489: "INSTRUMENT_TYPE_YOKIN",
		490: "INSTRUMENT_TYPE_YUEQIN",
		491: "INSTRUMENT_TYPE_ZEZE",
		492: "INSTRUMENT_TYPE_ZHONGHU",
		493: "INSTRUMENT_TYPE_ZITHER",
		494: "INSTRUMENT_TYPE_ARPEGGIATINGSYNTH",
		495: "INSTRUMENT_TYPE_ONDESMARTENOT",
		496: "INSTRUMENT_TYPE_SAMPLER",
		497: "INSTRUMENT_TYPE_SYNTHBASS",
		498: "INSTRUMENT_TYPE_SYNTHBRASS",
		499: "INSTRUMENT_TYPE_SYNTHCHOIR",
		500: "INSTRUMENT_TYPE_SYNTHFX",
		501: "INSTRUMENT_TYPE_SYNTHLEAD",
		502: "INSTRUMENT_TYPE_SYNTHPAD",
		503: "INSTRUMENT_TYPE_SYNTHSTEELDRUMS",
		504: "INSTRUMENT_TYPE_SYNTHSTRINGS",
		505: "INSTRUMENT_TYPE_SYNTHESIZER",
		506: "INSTRUMENT_TYPE_THEREMIN",
		507: "INSTRUMENT_TYPE_GROUPBACKGROUNDVOCALISTS",
		508: "INSTRUMENT_TYPE_BOYVOICE",
		509: "INSTRUMENT_TYPE_CHILDVOICE",
		510: "INSTRUMENT_TYPE_CHILDRENSBACKGROUNDVOCALIST",
		511: "INSTRUMENT_TYPE_FEMALEVOICE",
		512: "INSTRUMENT_TYPE_FEMALEBACKGROUNDVOCALIST",
		513: "INSTRUMENT_TYPE_GIRLVOICE",
		514: "INSTRUMENT_TYPE_LEADVOCALIST",
		515: "INSTRUMENT_TYPE_MALEVOICE",
		516: "INSTRUMENT_TYPE_MALEBACKGROUNDVOCALIST",
		517: "INSTRUMENT_TYPE_MIXEDVOICE",
		518: "INSTRUMENT_TYPE_MIXEDBACKGROUNDVOCALIST",
		519: "INSTRUMENT_TYPE_NEUTRALVOICE",
		520: "INSTRUMENT_TYPE_VOICE",
		521: "INSTRUMENT_TYPE_ALBOKA",
		522: "INSTRUMENT_TYPE_ALPENHORN",
		523: "INSTRUMENT_TYPE_ALTOCLARINET",
		524: "INSTRUMENT_TYPE_ALTOCRUMHORN",
		525: "INSTRUMENT_TYPE_ALTOFLUTE",
		526: "INSTRUMENT_TYPE_ALTOHORN",
		527: "INSTRUMENT_TYPE_ALTORECORDER",
		528: "INSTRUMENT_TYPE_ALTOSACKBUT",
		529: "INSTRUMENT_TYPE_ALTOSAXOPHONE",
		530: "INSTRUMENT_TYPE_ALTOSHAWM",
		531: "INSTRUMENT_TYPE_ALTOTROMBONE",
		532: "INSTRUMENT_TYPE_APITO",
		533: "INSTRUMENT_TYPE_ARGHUL",
		534: "INSTRUMENT_TYPE_AULOCHROME",
		535: "INSTRUMENT_TYPE_BAGPIPES",
		536: "INSTRUMENT_TYPE_BANSURI",
		537: "INSTRUMENT_TYPE_BARITONEHORN",
		538: "INSTRUMENT_TYPE_BARITONEOBOE",
		539: "INSTRUMENT_TYPE_BARITONESAXOPHONE",
		540: "INSTRUMENT_TYPE_BAROQUEBASSOON",
		541: "INSTRUMENT_TYPE_BAROQUECLARINET",
		542: "INSTRUMENT_TYPE_BAROQUEFLUTE",
		543: "INSTRUMENT_TYPE_BAROQUEOBOE",
		544: "INSTRUMENT_TYPE_BAROQUERECORDER",
		545: "INSTRUMENT_TYPE_BASSCLARINET",
		546: "INSTRUMENT_TYPE_BASSDULCIAN",
		547: "INSTRUMENT_TYPE_BASSFLUTE",
		548: "INSTRUMENT_TYPE_BASSHARMONICA",
		549: "INSTRUMENT_TYPE_BASSOBOE",
		550: "INSTRUMENT_TYPE_BASSRECORDER",
		551: "INSTRUMENT_TYPE_BASSSACKBUT",
		552: "INSTRUMENT_TYPE_BASSSAXOPHONE",
		553: "INSTRUMENT_TYPE_BASSSHAWM",
		554: "INSTRUMENT_TYPE_BASSTROMBONE",
		555: "INSTRUMENT_TYPE_BASSTRUMPET",
		556: "INSTRUMENT_TYPE_BASSTUBA",
		557: "INSTRUMENT_TYPE_BASSETCLARINET",
		558: "INSTRUMENT_TYPE_BASSETHORN",
		559: "INSTRUMENT_TYPE_BASSOON",
		560: "INSTRUMENT_TYPE_BAWU",
		561: "INSTRUMENT_TYPE_BIRDWHISTLE",
		562: "INSTRUMENT_TYPE_BOMBARD",
		563: "INSTRUMENT_TYPE_BOSUNSWHISTLE",
		564: "INSTRUMENT_TYPE_BRASSINSTRUMENT",
		565: "INSTRUMENT_TYPE_BUGLE",
		566: "INSTRUMENT_TYPE_CALLIOPE",
		567: "INSTRUMENT_TYPE_CHALUMEAU",
		568: "INSTRUMENT_TYPE_CHROMATICHARMONICA",
		569: "INSTRUMENT_TYPE_CIMBASSO",
		570: "INSTRUMENT_TYPE_CLARINET",
		571: "INSTRUMENT_TYPE_CLARINOTRUMPET",
		572: "INSTRUMENT_TYPE_CONCHSHELL",
		573: "INSTRUMENT_TYPE_CONTRAALTOCLARINET",
		574: "INSTRUMENT_TYPE_CONTRABASSCLARINET",
		575: "INSTRUMENT_TYPE_CONTRABASSRECORDER",
		576: "INSTRUMENT_TYPE_CONTRABASSSARRUSOPHONE",
		577: "INSTRUMENT_TYPE_CONTRABASSSAXOPHONE",
		578: "INSTRUMENT_TYPE_CONTRABASSTROMBONE",
		579: "INSTRUMENT_TYPE_CONTRABASSOON",
		580: "INSTRUMENT_TYPE_CORNET",
		581: "INSTRUMENT_TYPE_CORNETTO",
		582: "INSTRUMENT_TYPE_CRUMHORN",
		583: "INSTRUMENT_TYPE_DAEGEUM",
		584: "INSTRUMENT_TYPE_DIDGERIDOO",
		585: "INSTRUMENT_TYPE_DIPLE",
		586: "INSTRUMENT_TYPE_DIZI",
		587: "INSTRUMENT_TYPE_DUDUK",
		588: "INSTRUMENT_TYPE_DULCIAN",
		589: "INSTRUMENT_TYPE_DUNGCHEN",
		590: "INSTRUMENT_TYPE_ENGLISHHORN",
		591: "INSTRUMENT_TYPE_EUPHONIUM",
		592: "INSTRUMENT_TYPE_FIFE",
		593: "INSTRUMENT_TYPE_FISCORN",
		594: "INSTRUMENT_TYPE_FLABIOL",
		595: "INSTRUMENT_TYPE_FLAGEOLET",
		596: "INSTRUMENT_TYPE_FLOYERA",
		597: "INSTRUMENT_TYPE_FLUGELHORN",
		598: "INSTRUMENT_TYPE_FLUTE",
		599: "INSTRUMENT_TYPE_FRENCHHORN",
		600: "INSTRUMENT_TYPE_FUJARA",
		601: "INSTRUMENT_TYPE_GASBA",
		602: "INSTRUMENT_TYPE_GEMSHORN",
		603: "INSTRUMENT_TYPE_GERMANFLUTE",
		604: "INSTRUMENT_TYPE_GHAITA",
		605: "INSTRUMENT_TYPE_GREATBASSRECORDER",
		606: "INSTRUMENT_TYPE_GUANZI",
		607: "INSTRUMENT_TYPE_GYALING",
		608: "INSTRUMENT_TYPE_HARMONICA",
		609: "INSTRUMENT_TYPE_HARMONIUM",
		610: "INSTRUMENT_TYPE_HECKELPHONE",
		611: "INSTRUMENT_TYPE_HELICON",
		612: "INSTRUMENT_TYPE_HERALDTRUMPET",
		613: "INSTRUMENT_TYPE_HIGHLANDPIPES",
		614: "INSTRUMENT_TYPE_HORN",
		615: "INSTRUMENT_TYPE_HOTFOUNTAINPEN",
		616: "INSTRUMENT_TYPE_IRISHLOWWHISTLE",
		617: "INSTRUMENT_TYPE_JAGDHORN",
		618: "INSTRUMENT_TYPE_KAVAL",
		619: "INSTRUMENT_TYPE_KEYEDTRUMPET",
		620: "INSTRUMENT_TYPE_KHENE",
		621: "INSTRUMENT_TYPE_KHLUI",
		622: "INSTRUMENT_TYPE_LAUNEDDAS",
		623: "INSTRUMENT_TYPE_LUR",
		624: "INSTRUMENT_TYPE_MELLOPHONE",
		625: "INSTRUMENT_TYPE_MELODICA",
		626: "INSTRUMENT_TYPE_MIJWIZ",
		627: "INSTRUMENT_TYPE_MINIATUREKHENE",
		628: "INSTRUMENT_TYPE_MIZMAR",
		629: "INSTRUMENT_TYPE_MOUTHORGAN",
		630: "INSTRUMENT_TYPE_NADASWARAM",
		631: "INSTRUMENT_TYPE_NAI",
		632: "INSTRUMENT_TYPE_NATIVEAMERICANFLUTE",
		633: "INSTRUMENT_TYPE_NATURALHORN",
		634: "INSTRUMENT_TYPE_NATURALTRUMPET",
		635: "INSTRUMENT_TYPE_NEYFLUTE",
		636: "INSTRUMENT_TYPE_OBOE",
		637: "INSTRUMENT_TYPE_OBOEDAMORE",
		638: "INSTRUMENT_TYPE_OBOEDACACCIA",
		639: "INSTRUMENT_TYPE_OCARINA",
		640: "INSTRUMENT_TYPE_OPHICLEIDE",
		641: "INSTRUMENT_TYPE_PAIXIAO",
		642: "INSTRUMENT_TYPE_PANFLUTE",
		643: "INSTRUMENT_TYPE_PI",
		644: "INSTRUMENT_TYPE_PICCOLOCLARINET",
		645: "INSTRUMENT_TYPE_PICCOLOFLUTE",
		646: "INSTRUMENT_TYPE_PICCOLOTRUMPET",
		647: "INSTRUMENT_TYPE_PINKILLU",
		648: "INSTRUMENT_TYPE_POCKETTRUMPET",
		649: "INSTRUMENT_TYPE_POLICEWHISTLE",
		650: "INSTRUMENT_TYPE_POSTHORN",
		651: "INSTRUMENT_TYPE_PUNGI",
		652: "INSTRUMENT_TYPE_QUENA",
		653: "INSTRUMENT_TYPE_QUENACHO",
		654: "INSTRUMENT_TYPE_RACKETT",
		655: "INSTRUMENT_TYPE_RAUSCHPFEIFE",
		656: "INSTRUMENT_TYPE_RECORDER",
		657: "INSTRUMENT_TYPE_REEDINSTRUMENT",
		658: "INSTRUMENT_TYPE_REGAL",
		659: "INSTRUMENT_TYPE_RONDADOR",
		660: "INSTRUMENT_TYPE_SACKBUT",
		661: "INSTRUMENT_TYPE_SARRUSOPHONE",
		662: "INSTRUMENT_TYPE_SAXOPHONE",
		663: "INSTRUMENT_TYPE_SERPENT",
		664: "INSTRUMENT_TYPE_SHAKUHACHI",
		665: "INSTRUMENT_TYPE_SHAWM",
		666: "INSTRUMENT_TYPE_SHENAI",
		667: "INSTRUMENT_TYPE_SHELLTONE",
		668: "INSTRUMENT_TYPE_SHENG",
		669: "INSTRUMENT_TYPE_SHO",
		670: "INSTRUMENT_TYPE_SHOFAR",
		671: "INSTRUMENT_TYPE_SHRUTIBOX",
		672: "INSTRUMENT_TYPE_SHVIWHISTLE",
		673: "INSTRUMENT_TYPE_SIKU",
		674: "INSTRUMENT_TYPE_SLIDESAXOPHONE",
		675: "INSTRUMENT_TYPE_SLIDETRUMPET",
		676: "INSTRUMENT_TYPE_SLIDEWHISTLE",
		677: "INSTRUMENT_TYPE_SOPRANINORECORDER",
		678: "INSTRUMENT_TYPE_SOPRANINOSAXOPHONE",
		679: "INSTRUMENT_TYPE_SOPRANOCLARINET",
		680: "INSTRUMENT_TYPE_SOPRANOCORNET",
		681: "INSTRUMENT_TYPE_SOPRANOCRUMHORN",
		682: "INSTRUMENT_TYPE_SOPRANODULCIAN",
		683: "INSTRUMENT_TYPE_SOPRANORECORDER",
		684: "INSTRUMENT_TYPE_SOPRANOSAXOPHONE",
		685: "INSTRUMENT_TYPE_SOPRANOSHAWM",
		686: "INSTRUMENT_TYPE_SOPRANOTRUMPET",
		687: "INSTRUMENT_TYPE_SORDUN",
		688: "INSTRUMENT_TYPE_SOUSAPHONE",
		689: "INSTRUMENT_TYPE_SULING",
		690: "INSTRUMENT_TYPE_SUONA",
		691: "INSTRUMENT_TYPE_TARKA",
		692: "INSTRUMENT_TYPE_TAROGATO",
		693: "INSTRUMENT_TYPE_TENORCRUMHORN",
		694: "INSTRUMENT_TYPE_TENORDULCIAN",
		695: "INSTRUMENT_TYPE_TENORFLUTE",
		696: "INSTRUMENT_TYPE_TENORRECORDER",
		697: "INSTRUMENT_TYPE_TENORSACKBUT",
		698: "INSTRUMENT_TYPE_TENORSAXOPHONE",
		699: "INSTRUMENT_TYPE_TENORSHAWM",
		700: "INSTRUMENT_TYPE_TENORTROMBONE",
		701: "INSTRUMENT_TYPE_TINWHISTLE",
		702: "INSTRUMENT_TYPE_TROMBONE",
		703: "INSTRUMENT_TYPE_TRUMPET",
		704: "INSTRUMENT_TYPE_TUBA",
		705: "INSTRUMENT_TYPE_TUSSELFLOYTE",
		706: "INSTRUMENT_TYPE_UILLEANPIPES",
		707: "INSTRUMENT_TYPE_VALVETROMBONE",
		708: "INSTRUMENT_TYPE_VUVUZELA",
		709: "INSTRUMENT_TYPE_WAGNERTUBA",
		710: "INSTRUMENT_TYPE_WILLOWFLUTE",
		711: "INSTRUMENT_TYPE_WINDINSTRUMENT",
		712: "INSTRUMENT_TYPE_WOODFLUTE",
		713: "INSTRUMENT_TYPE_WOODTRUMPET",
		714: "INSTRUMENT_TYPE_WOT",
		715: "INSTRUMENT_TYPE_XAPHOON",
		716: "INSTRUMENT_TYPE_XIAO",
		717: "INSTRUMENT_TYPE_XUN",
		718: "INSTRUMENT_TYPE_ZUMMARA",
		719: "INSTRUMENT_TYPE_ZURNA",
		720: "INSTRUMENT_TYPE_CHOIR",
		721: "INSTRUMENT_TYPE_PERCUSSIONSECTION",
		722: "INSTRUMENT_TYPE_STRINGSECTION",
		723: "INSTRUMENT_TYPE_WINDSECTION",
		724: "INSTRUMENT_TYPE_USERDEFINED",
	}
	InstrumentType_value = map[string]int32{
		"INSTRUMENT_TYPE_UNSPECIFIED":                   0,
		"INSTRUMENT_TYPE_ACCORDION":                     1,
		"INSTRUMENT_TYPE_BANDONEON":                     2,
		"INSTRUMENT_TYPE_CHROMATICBUTTONACCORDION":      3,
		"INSTRUMENT_TYPE_CONCERTINA":                    4,
		"INSTRUMENT_TYPE_CORDOVOX":                      5,
		"INSTRUMENT_TYPE_MELODEON":                      6,
		"INSTRUMENT_TYPE_MUSETTE":                       7,
		"INSTRUMENT_TYPE_PIANOACCORDION":                8,
		"INSTRUMENT_TYPE_TOYACCORDION":                  9,
		"INSTRUMENT_TYPE_ACOUSTICBASSGUITAR":            10,
		"INSTRUMENT_TYPE_BABYBASS":                      11,
		"INSTRUMENT_TYPE_BASS":                          12,
		"INSTRUMENT_TYPE_BASSGUITAR":                    13,
		"INSTRUMENT_TYPE_ELECTRICBASSGUITAR":            14,
		"INSTRUMENT_TYPE_FRETLESSBASSGUITAR":            15,
		"INSTRUMENT_TYPE_PICCOLOBASS":                   16,
		"INSTRUMENT_TYPE_UPRIGHTBASS":                   17,
		"INSTRUMENT_TYPE_WASHTUBBASS":                   18,
		"INSTRUMENT_TYPE_DRUMMACHINE":                   19,
		"INSTRUMENT_TYPE_BREAKBEAT":                     20,
		"INSTRUMENT_TYPE_DRUMKIT":                       21,
		"INSTRUMENT_TYPE_DRUMSAMPLE":                    22,
		"INSTRUMENT_TYPE_E_12_STRINGELECTRICGUITAR":     23,
		"INSTRUMENT_TYPE_E_12_STRINGGUITAR":             24,
		"INSTRUMENT_TYPE_ACOUSTICGUITAR":                25,
		"INSTRUMENT_TYPE_BAHIANGUITAR":                  26,
		"INSTRUMENT_TYPE_BAJOSEXTO":                     27,
		"INSTRUMENT_TYPE_BARITONEGUITAR":                28,
		"INSTRUMENT_TYPE_BAROQUEGUITAR":                 29,
		"INSTRUMENT_TYPE_CHAPMANSTICK":                  30,
		"INSTRUMENT_TYPE_NYLONSTRINGGUITAR":             31,
		"INSTRUMENT_TYPE_DOBROGUITAR":                   32,
		"INSTRUMENT_TYPE_ELECTRICGUITAR":                33,
		"INSTRUMENT_TYPE_ELECTRICSITAR":                 34,
		"INSTRUMENT_TYPE_FRYINGPANGUITAR":               35,
		"INSTRUMENT_TYPE_GUITAR":                        36,
		"INSTRUMENT_TYPE_GUITARRON":                     37,
		"INSTRUMENT_TYPE_LAPSTEELGUITAR":                38,
		"INSTRUMENT_TYPE_PEDABRO":                       39,
		"INSTRUMENT_TYPE_PEDALSTEELGUITAR":              40,
		"INSTRUMENT_TYPE_PORTUGUESEGUITAR":              41,
		"INSTRUMENT_TYPE_RENAISSANCEGUITAR":             42,
		"INSTRUMENT_TYPE_ROMANTICGUITAR":                43,
		"INSTRUMENT_TYPE_TENORGUITAR":                   44,
		"INSTRUMENT_TYPE_TIPLE":                         45,
		"INSTRUMENT_TYPE_TOUCHGUITAR":                   46,
		"INSTRUMENT_TYPE_TRES":                          47,
		"INSTRUMENT_TYPE_VIOLACAIPIRA":                  48,
		"INSTRUMENT_TYPE_ACOUSTICKEYBOARD":              49,
		"INSTRUMENT_TYPE_CELESTA":                       50,
		"INSTRUMENT_TYPE_CHAMBERLIN":                    51,
		"INSTRUMENT_TYPE_CLAVICHORD":                    52,
		"INSTRUMENT_TYPE_CLAVINET":                      53,
		"INSTRUMENT_TYPE_DULCITONE":                     54,
		"INSTRUMENT_TYPE_ELECTRICPIANO":                 55,
		"INSTRUMENT_TYPE_HARPSICHORD":                   56,
		"INSTRUMENT_TYPE_KEYBOARD":                      57,
		"INSTRUMENT_TYPE_KLAVIER":                       58,
		"INSTRUMENT_TYPE_MELLOTRON":                     59,
		"INSTRUMENT_TYPE_OPTIGAN":                       60,
		"INSTRUMENT_TYPE_PIANET":                        61,
		"INSTRUMENT_TYPE_RHODES":                        62,
		"INSTRUMENT_TYPE_SAMPLEDKEYBOARD":               63,
		"INSTRUMENT_TYPE_SPINET":                        64,
		"INSTRUMENT_TYPE_VAKOORCHESTRON":                65,
		"INSTRUMENT_TYPE_VIRGINALS":                     66,
		"INSTRUMENT_TYPE_ELECTRICORGAN":                 67,
		"INSTRUMENT_TYPE_HAMMONDORGAN":                  68,
		"INSTRUMENT_TYPE_LOWREYORGAN":                   69,
		"INSTRUMENT_TYPE_ORGAN":                         70,
		"INSTRUMENT_TYPE_PIPEORGAN":                     71,
		"INSTRUMENT_TYPE_POSITIVEORGAN":                 72,
		"INSTRUMENT_TYPE_PUMPORGAN":                     73,
		"INSTRUMENT_TYPE_BARRELORGAN":                   74,
		"INSTRUMENT_TYPE_BICYCLEPUMP":                   75,
		"INSTRUMENT_TYPE_CHURCHBELLS":                   76,
		"INSTRUMENT_TYPE_COMB":                          77,
		"INSTRUMENT_TYPE_DICTOPHONE":                    78,
		"INSTRUMENT_TYPE_HOHNERGUITARET":                79,
		"INSTRUMENT_TYPE_JEWSHARP":                      80,
		"INSTRUMENT_TYPE_KAZOO":                         81,
		"INSTRUMENT_TYPE_MUSICBOX":                      82,
		"INSTRUMENT_TYPE_OMNICHORD":                     83,
		"INSTRUMENT_TYPE_OTHERINSTRUMENT":               84,
		"INSTRUMENT_TYPE_SPECTRASONICSOMNISPHERE":       85,
		"INSTRUMENT_TYPE_TOYPIANO":                      86,
		"INSTRUMENT_TYPE_TURNTABLE":                     87,
		"INSTRUMENT_TYPE_AFRICANPERCUSSION":             88,
		"INSTRUMENT_TYPE_AGOGOBELLS":                    89,
		"INSTRUMENT_TYPE_ANGKLUNG":                      90,
		"INSTRUMENT_TYPE_ANVIL":                         91,
		"INSTRUMENT_TYPE_ATUMPAN":                       92,
		"INSTRUMENT_TYPE_BALAFON":                       93,
		"INSTRUMENT_TYPE_BASSDRUM_CONCERT":              94,
		"INSTRUMENT_TYPE_BASSDRUM_KICK":                 95,
		"INSTRUMENT_TYPE_BATA":                          96,
		"INSTRUMENT_TYPE_BELLS":                         97,
		"INSTRUMENT_TYPE_BELLTREE":                      98,
		"INSTRUMENT_TYPE_BENDIR":                        99,
		"INSTRUMENT_TYPE_BERIMBAU":                      100,
		"INSTRUMENT_TYPE_BINGHIDRUM":                    101,
		"INSTRUMENT_TYPE_BODHRAN":                       102,
		"INSTRUMENT_TYPE_BODYPERCUSSION":                103,
		"INSTRUMENT_TYPE_BOMBO":                         104,
		"INSTRUMENT_TYPE_BOMBOLEGUERO":                  105,
		"INSTRUMENT_TYPE_BONES":                         106,
		"INSTRUMENT_TYPE_BONGOS":                        107,
		"INSTRUMENT_TYPE_BOTTLES":                       108,
		"INSTRUMENT_TYPE_BRAZILIANPERCUSSION":           109,
		"INSTRUMENT_TYPE_CABASA":                        110,
		"INSTRUMENT_TYPE_CAIXA":                         111,
		"INSTRUMENT_TYPE_CAJA":                          112,
		"INSTRUMENT_TYPE_CAJON":                         113,
		"INSTRUMENT_TYPE_CALABASH":                      114,
		"INSTRUMENT_TYPE_CARILLON":                      115,
		"INSTRUMENT_TYPE_CASTANET":                      116,
		"INSTRUMENT_TYPE_CAXIXI":                        117,
		"INSTRUMENT_TYPE_CHIMES":                        118,
		"INSTRUMENT_TYPE_CHOCALHO":                      119,
		"INSTRUMENT_TYPE_CLAPSTICK":                     120,
		"INSTRUMENT_TYPE_CLAVES":                        121,
		"INSTRUMENT_TYPE_CLAYPOT":                       122,
		"INSTRUMENT_TYPE_CONGAS":                        123,
		"INSTRUMENT_TYPE_COWBELL":                       124,
		"INSTRUMENT_TYPE_CROTALES":                      125,
		"INSTRUMENT_TYPE_CUICA":                         126,
		"INSTRUMENT_TYPE_CYMBAL_CRASH":                  127,
		"INSTRUMENT_TYPE_CYMBAL_RIDE":                   128,
		"INSTRUMENT_TYPE_CYMBAL_SUSPENDED":              129,
		"INSTRUMENT_TYPE_CYMBALS":                       130,
		"INSTRUMENT_TYPE_DAF":                           131,
		"INSTRUMENT_TYPE_DAMARU":                        132,
		"INSTRUMENT_TYPE_DAVUL":                         133,
		"INSTRUMENT_TYPE_DAYEREH":                       134,
		"INSTRUMENT_TYPE_DEFI":                          135,
		"INSTRUMENT_TYPE_DHOL":                          136,
		"INSTRUMENT_TYPE_DHOLAK":                        137,
		"INSTRUMENT_TYPE_DJEMBE":                        138,
		"INSTRUMENT_TYPE_DOHOL":                         139,
		"INSTRUMENT_TYPE_DOUMBEK":                       140,
		"INSTRUMENT_TYPE_DRUM":                          141,
		"INSTRUMENT_TYPE_DRUMSTICKS":                    142,
		"INSTRUMENT_TYPE_DUGGI":                         143,
		"INSTRUMENT_TYPE_DUNUN":                         144,
		"INSTRUMENT_TYPE_ELEPHANTBELL":                  145,
		"INSTRUMENT_TYPE_FINGERCLICKS":                  146,
		"INSTRUMENT_TYPE_FINGERCYMBALS":                 147,
		"INSTRUMENT_TYPE_FINGERSNAPS":                   148,
		"INSTRUMENT_TYPE_FLEXATONE":                     149,
		"INSTRUMENT_TYPE_FOLKLORICPERCUSSION":           150,
		"INSTRUMENT_TYPE_FOOTSTOMP":                     151,
		"INSTRUMENT_TYPE_FROG":                          152,
		"INSTRUMENT_TYPE_GAMBANG":                       153,
		"INSTRUMENT_TYPE_GAMELAN":                       154,
		"INSTRUMENT_TYPE_GANGA":                         155,
		"INSTRUMENT_TYPE_GLASSHARMONICA":                156,
		"INSTRUMENT_TYPE_GLASSHARP":                     157,
		"INSTRUMENT_TYPE_GLOCKENSPIEL":                  158,
		"INSTRUMENT_TYPE_GONG":                          159,
		"INSTRUMENT_TYPE_GUACHARACA":                    160,
		"INSTRUMENT_TYPE_GUACHE":                        161,
		"INSTRUMENT_TYPE_GUIRA":                         162,
		"INSTRUMENT_TYPE_GUIRO":                         163,
		"INSTRUMENT_TYPE_HANDBELLS":                     164,
		"INSTRUMENT_TYPE_HANDCHIMES":                    165,
		"INSTRUMENT_TYPE_HANDCLAPS":                     166,
		"INSTRUMENT_TYPE_HIHATCYMBAL":                   167,
		"INSTRUMENT_TYPE_JAMBLOCK":                      168,
		"INSTRUMENT_TYPE_JAWBONE":                       169,
		"INSTRUMENT_TYPE_JAWHARP":                       170,
		"INSTRUMENT_TYPE_JUG":                           171,
		"INSTRUMENT_TYPE_KALIMBA":                       172,
		"INSTRUMENT_TYPE_KANJIRA":                       173,
		"INSTRUMENT_TYPE_KATSA":                         174,
		"INSTRUMENT_TYPE_KENDANG":                       175,
		"INSTRUMENT_TYPE_KHAMAK":                        176,
		"INSTRUMENT_TYPE_KHARTAL":                       177,
		"INSTRUMENT_TYPE_KHOL":                          178,
		"INSTRUMENT_TYPE_KHONGWONGLEK":                  179,
		"INSTRUMENT_TYPE_KHONGWONGYAI":                  180,
		"INSTRUMENT_TYPE_KNUCKLES":                      181,
		"INSTRUMENT_TYPE_LATINPERCUSSION":               182,
		"INSTRUMENT_TYPE_LITHOPHONE":                    183,
		"INSTRUMENT_TYPE_LOKOLE":                        184,
		"INSTRUMENT_TYPE_MADAL":                         185,
		"INSTRUMENT_TYPE_MARACAS":                       186,
		"INSTRUMENT_TYPE_MARIMBA":                       187,
		"INSTRUMENT_TYPE_MARIMBAPHONE":                  188,
		"INSTRUMENT_TYPE_MARIMBULA":                     189,
		"INSTRUMENT_TYPE_MAZHAR":                        190,
		"INSTRUMENT_TYPE_MBIRA":                         191,
		"INSTRUMENT_TYPE_METALCANS":                     192,
		"INSTRUMENT_TYPE_MOUTHPERCUSSION":               193,
		"INSTRUMENT_TYPE_MRIDANGAM":                     194,
		"INSTRUMENT_TYPE_MUHARSING":                     195,
		"INSTRUMENT_TYPE_NAAL":                          196,
		"INSTRUMENT_TYPE_NAGARA":                        197,
		"INSTRUMENT_TYPE_OBOROMDRUM":                    198,
		"INSTRUMENT_TYPE_OCTOBAN":                       199,
		"INSTRUMENT_TYPE_ORCHESTRALPERCUSSION":          200,
		"INSTRUMENT_TYPE_PADDLEDRUMS":                   201,
		"INSTRUMENT_TYPE_PANDEIRO":                      202,
		"INSTRUMENT_TYPE_PERCUSSIONINSTRUMENT":          203,
		"INSTRUMENT_TYPE_PITCHEDPERCUSSIONINSTRUMENT":   204,
		"INSTRUMENT_TYPE_PONGLANG":                      205,
		"INSTRUMENT_TYPE_POTSANDPANS":                   206,
		"INSTRUMENT_TYPE_QARKABEB":                      207,
		"INSTRUMENT_TYPE_RAINSTICK":                     208,
		"INSTRUMENT_TYPE_RANAT":                         209,
		"INSTRUMENT_TYPE_RATCHET":                       210,
		"INSTRUMENT_TYPE_RATTLE":                        211,
		"INSTRUMENT_TYPE_RECORECO":                      212,
		"INSTRUMENT_TYPE_REPINIQUE":                     213,
		"INSTRUMENT_TYPE_RHYTHMSTICK":                   214,
		"INSTRUMENT_TYPE_RIQ":                           215,
		"INSTRUMENT_TYPE_RNGA":                          216,
		"INSTRUMENT_TYPE_ROLMO":                         217,
		"INSTRUMENT_TYPE_ROTOTOMS":                      218,
		"INSTRUMENT_TYPE_SABAR":                         219,
		"INSTRUMENT_TYPE_SANDBLOCKS":                    220,
		"INSTRUMENT_TYPE_SAW":                           221,
		"INSTRUMENT_TYPE_SCRATCHER":                     222,
		"INSTRUMENT_TYPE_SHAKER":                        223,
		"INSTRUMENT_TYPE_SHEKERE":                       224,
		"INSTRUMENT_TYPE_SINGINGBOWLS":                  225,
		"INSTRUMENT_TYPE_SISTRUM":                       226,
		"INSTRUMENT_TYPE_SLAPSTICK":                     227,
		"INSTRUMENT_TYPE_SLEIGHBELLS":                   228,
		"INSTRUMENT_TYPE_SNAREDRUM":                     229,
		"INSTRUMENT_TYPE_SNAREDRUM_MARCHING":            230,
		"INSTRUMENT_TYPE_SPOONS":                        231,
		"INSTRUMENT_TYPE_SPRINGDRUM":                    232,
		"INSTRUMENT_TYPE_STEELDRUMS":                    233,
		"INSTRUMENT_TYPE_STICKS":                        234,
		"INSTRUMENT_TYPE_SURDO":                         235,
		"INSTRUMENT_TYPE_TAAL":                          236,
		"INSTRUMENT_TYPE_TAARIJA":                       237,
		"INSTRUMENT_TYPE_TABLA":                         238,
		"INSTRUMENT_TYPE_TABOR":                         239,
		"INSTRUMENT_TYPE_TAIKO":                         240,
		"INSTRUMENT_TYPE_TALKINGDRUM":                   241,
		"INSTRUMENT_TYPE_TAMBORA":                       242,
		"INSTRUMENT_TYPE_TAMBORIM":                      243,
		"INSTRUMENT_TYPE_TAMBOUR":                       244,
		"INSTRUMENT_TYPE_TAMBOURINE":                    245,
		"INSTRUMENT_TYPE_TAMTAM":                        246,
		"INSTRUMENT_TYPE_TAONGAPUORO":                   247,
		"INSTRUMENT_TYPE_TAR_PERCUSSION":                248,
		"INSTRUMENT_TYPE_TAROL":                         249,
		"INSTRUMENT_TYPE_TEMPLEBELL":                    250,
		"INSTRUMENT_TYPE_TEMPLEBLOCKS":                  251,
		"INSTRUMENT_TYPE_TENORDRUM":                     252,
		"INSTRUMENT_TYPE_THAVIL":                        253,
		"INSTRUMENT_TYPE_THUNDERSHEET":                  254,
		"INSTRUMENT_TYPE_TIBETANBELLS":                  255,
		"INSTRUMENT_TYPE_TIMBALES":                      256,
		"INSTRUMENT_TYPE_TIMBAU":                        257,
		"INSTRUMENT_TYPE_TIMPANI":                       258,
		"INSTRUMENT_TYPE_TINGSHA":                       259,
		"INSTRUMENT_TYPE_TOMPAK":                        260,
		"INSTRUMENT_TYPE_TOMS":                          261,
		"INSTRUMENT_TYPE_TONGUEDRUM":                    262,
		"INSTRUMENT_TYPE_TRIANGLE":                      263,
		"INSTRUMENT_TYPE_TXALAPARTA":                    264,
		"INSTRUMENT_TYPE_UDU":                           265,
		"INSTRUMENT_TYPE_ULIULI":                        266,
		"INSTRUMENT_TYPE_UNPITCHEDPERCUSSIONINSTRUMENT": 267,
		"INSTRUMENT_TYPE_URUMEE":                        268,
		"INSTRUMENT_TYPE_VIBRAPHONE":                    269,
		"INSTRUMENT_TYPE_VIBRASLAP":                     270,
		"INSTRUMENT_TYPE_WASHBOARD":                     271,
		"INSTRUMENT_TYPE_WATERPHONE":                    272,
		"INSTRUMENT_TYPE_WINDCHIMES":                    273,
		"INSTRUMENT_TYPE_WINDMACHINE":                   274,
		"INSTRUMENT_TYPE_WOBBLEBOARD":                   275,
		"INSTRUMENT_TYPE_WOODBLOCK":                     276,
		"INSTRUMENT_TYPE_XYLOPHONE":                     277,
		"INSTRUMENT_TYPE_XYLORIMBA":                     278,
		"INSTRUMENT_TYPE_ZERBAGHALI":                    279,
		"INSTRUMENT_TYPE_ZYDECORUBBOARD":                280,
		"INSTRUMENT_TYPE_FORTEPIANO":                    281,
		"INSTRUMENT_TYPE_GRANDPIANO":                    282,
		"INSTRUMENT_TYPE_LUTHEAL":                       283,
		"INSTRUMENT_TYPE_PIANO":                         284,
		"INSTRUMENT_TYPE_PIANOHARP":                     285,
		"INSTRUMENT_TYPE_PIANOLA":                       286,
		"INSTRUMENT_TYPE_PREPAREDPIANO":                 287,
		"INSTRUMENT_TYPE_SQUAREPIANO":                   288,
		"INSTRUMENT_TYPE_TACKPIANO":                     289,
		"INSTRUMENT_TYPE_UPRIGHTPIANO":                  290,
		"INSTRUMENT_TYPE_ANIMALSOUNDS":                  291,
		"INSTRUMENT_TYPE_APPLAUSE":                      292,
		"INSTRUMENT_TYPE_BIRDSONG":                      293,
		"INSTRUMENT_TYPE_CARSOUNDS":                     294,
		"INSTRUMENT_TYPE_CHATTER":                       295,
		"INSTRUMENT_TYPE_CHEWINGSOUNDS":                 296,
		"INSTRUMENT_TYPE_GIZMO":                         297,
		"INSTRUMENT_TYPE_GUNSHOTS":                      298,
		"INSTRUMENT_TYPE_MAGNETICTAPETREATMENTS":        299,
		"INSTRUMENT_TYPE_ORCHESTRALHIT":                 300,
		"INSTRUMENT_TYPE_RECORDNOISE":                   301,
		"INSTRUMENT_TYPE_SIREN":                         302,
		"INSTRUMENT_TYPE_SOUNDDESIGN":                   303,
		"INSTRUMENT_TYPE_SOUNDEFFECTS":                  304,
		"INSTRUMENT_TYPE_TRAINSOUNDS":                   305,
		"INSTRUMENT_TYPE_TREATMENTS":                    306,
		"INSTRUMENT_TYPE_UNINTENDEDARTIFACTS":           307,
		"INSTRUMENT_TYPE_E_5_STRINGBANJO":               308,
		"INSTRUMENT_TYPE_AFRICANHARP":                   309,
		"INSTRUMENT_TYPE_ALTOVIOL":                      310,
		"INSTRUMENT_TYPE_ANDEANHARP":                    311,
		"INSTRUMENT_TYPE_ARCHLUTE":                      312,
		"INSTRUMENT_TYPE_AUTOHARP":                      313,
		"INSTRUMENT_TYPE_BAGLAMA":                       314,
		"INSTRUMENT_TYPE_BALALAIKA":                     315,
		"INSTRUMENT_TYPE_BANDURA":                       316,
		"INSTRUMENT_TYPE_BANDURRIA":                     317,
		"INSTRUMENT_TYPE_BANHU":                         318,
		"INSTRUMENT_TYPE_BANJO":                         319,
		"INSTRUMENT_TYPE_BANJOGUITAR":                   320,
		"INSTRUMENT_TYPE_BANJOLIN":                      321,
		"INSTRUMENT_TYPE_BAROQUECELLO":                  322,
		"INSTRUMENT_TYPE_BAROQUEVIOLA":                  323,
		"INSTRUMENT_TYPE_BAROQUEVIOLIN":                 324,
		"INSTRUMENT_TYPE_BARYTON":                       325,
		"INSTRUMENT_TYPE_BASSBANJO":                     326,
		"INSTRUMENT_TYPE_BASSCITTERN":                   327,
		"INSTRUMENT_TYPE_BASSREBEC":                     328,
		"INSTRUMENT_TYPE_BASSVIOL":                      329,
		"INSTRUMENT_TYPE_BASSODABRACCIO":                330,
		"INSTRUMENT_TYPE_BIWA":                          331,
		"INSTRUMENT_TYPE_BOUZOUKI":                      332,
		"INSTRUMENT_TYPE_BOWEDSTRINGS":                  333,
		"INSTRUMENT_TYPE_BOZOQ":                         334,
		"INSTRUMENT_TYPE_BUFOBASS":                      335,
		"INSTRUMENT_TYPE_CAVAQUINHO":                    336,
		"INSTRUMENT_TYPE_CELLO":                         337,
		"INSTRUMENT_TYPE_CELLOBANJO":                    338,
		"INSTRUMENT_TYPE_CELTICHARP":                    339,
		"INSTRUMENT_TYPE_CHARANGO":                      340,
		"INSTRUMENT_TYPE_CIMBALOM":                      341,
		"INSTRUMENT_TYPE_CITOLE":                        342,
		"INSTRUMENT_TYPE_CITTERN":                       343,
		"INSTRUMENT_TYPE_CONCERTHARP":                   344,
		"INSTRUMENT_TYPE_CRAVIOLA":                      345,
		"INSTRUMENT_TYPE_CRWTH":                         346,
		"INSTRUMENT_TYPE_CUATRO":                        347,
		"INSTRUMENT_TYPE_CUMBUS":                        348,
		"INSTRUMENT_TYPE_DANBAU":                        349,
		"INSTRUMENT_TYPE_DANTRANH":                      350,
		"INSTRUMENT_TYPE_DILRUBA":                       351,
		"INSTRUMENT_TYPE_DOMBRA":                        352,
		"INSTRUMENT_TYPE_DOMRA":                         353,
		"INSTRUMENT_TYPE_DOUBLEBASS":                    354,
		"INSTRUMENT_TYPE_DOUBLEHARP":                    355,
		"INSTRUMENT_TYPE_DOUBLEVIOLIN":                  356,
		"INSTRUMENT_TYPE_DOUBLEBASSVIOL":                357,
		"INSTRUMENT_TYPE_DRANYEN":                       358,
		"INSTRUMENT_TYPE_DUTAR":                         359,
		"INSTRUMENT_TYPE_DZUDDAHORD":                    360,
		"INSTRUMENT_TYPE_EKTARA":                        361,
		"INSTRUMENT_TYPE_ELECTRIC6STRINGVIOLIN":         362,
		"INSTRUMENT_TYPE_ELECTRICCELLO":                 363,
		"INSTRUMENT_TYPE_ELECTRICHARP":                  364,
		"INSTRUMENT_TYPE_ELECTRICMANDOLIN":              365,
		"INSTRUMENT_TYPE_ELECTRICVIOLA":                 366,
		"INSTRUMENT_TYPE_ELECTRICVIOLIN":                367,
		"INSTRUMENT_TYPE_ELECTROACOUSTICHURDYGURDY":     368,
		"INSTRUMENT_TYPE_ENNANGA":                       369,
		"INSTRUMENT_TYPE_EPINETTEDESVOSGES":             370,
		"INSTRUMENT_TYPE_ERHU":                          371,
		"INSTRUMENT_TYPE_ESRAJ":                         372,
		"INSTRUMENT_TYPE_FIDDLE":                        373,
		"INSTRUMENT_TYPE_FOLKHARP":                      374,
		"INSTRUMENT_TYPE_GADULKA":                       375,
		"INSTRUMENT_TYPE_GARDON":                        376,
		"INSTRUMENT_TYPE_GAYAGEUM":                      377,
		"INSTRUMENT_TYPE_GHAYCHAK":                      378,
		"INSTRUMENT_TYPE_GITTERN":                       379,
		"INSTRUMENT_TYPE_GUQIN":                         380,
		"INSTRUMENT_TYPE_GUSLI":                         381,
		"INSTRUMENT_TYPE_GUZHENG":                       382,
		"INSTRUMENT_TYPE_HAEGEUM":                       383,
		"INSTRUMENT_TYPE_HAMMEREDDULCIMER":              384,
		"INSTRUMENT_TYPE_HAMMEREDSTRINGS":               385,
		"INSTRUMENT_TYPE_HARDANGERFIDDLE":               386,
		"INSTRUMENT_TYPE_HARP":                          387,
		"INSTRUMENT_TYPE_HUAPANGUERA":                   388,
		"INSTRUMENT_TYPE_HURDYGURDY":                    389,
		"INSTRUMENT_TYPE_IRISHBOUZOUKI":                 390,
		"INSTRUMENT_TYPE_JAKHAY":                        391,
		"INSTRUMENT_TYPE_JARANAJAROCHA":                 392,
		"INSTRUMENT_TYPE_JINGHU":                        393,
		"INSTRUMENT_TYPE_KACAPI":                        394,
		"INSTRUMENT_TYPE_KANTELE":                       395,
		"INSTRUMENT_TYPE_KANUN":                         396,
		"INSTRUMENT_TYPE_KEMENCHE":                      397,
		"INSTRUMENT_TYPE_KHIM":                          398,
		"INSTRUMENT_TYPE_KORA":                          399,
		"INSTRUMENT_TYPE_KOTO":                          400,
		"INSTRUMENT_TYPE_KUGO":                          401,
		"INSTRUMENT_TYPE_LANGELEIK":                     402,
		"INSTRUMENT_TYPE_LAOUTO":                        403,
		"INSTRUMENT_TYPE_LEONA":                         404,
		"INSTRUMENT_TYPE_LIRONE":                        405,
		"INSTRUMENT_TYPE_LUTE":                          406,
		"INSTRUMENT_TYPE_LYRAVIOL":                      407,
		"INSTRUMENT_TYPE_LYRE":                          408,
		"INSTRUMENT_TYPE_MANDOCELLO":                    409,
		"INSTRUMENT_TYPE_MANDOLA":                       410,
		"INSTRUMENT_TYPE_MANDOLELE":                     411,
		"INSTRUMENT_TYPE_MANDOLIN":                      412,
		"INSTRUMENT_TYPE_MANDOLINO":                     413,
		"INSTRUMENT_TYPE_MANDORE":                       414,
		"INSTRUMENT_TYPE_MARXOPHONE":                    415,
		"INSTRUMENT_TYPE_MEDIEVALFIDDLE":                416,
		"INSTRUMENT_TYPE_MEDIEVALHARP":                  417,
		"INSTRUMENT_TYPE_MOHANVEENA":                    418,
		"INSTRUMENT_TYPE_MUSICALBOW":                    419,
		"INSTRUMENT_TYPE_NGONI":                         420,
		"INSTRUMENT_TYPE_NJARKA":                        421,
		"INSTRUMENT_TYPE_NYATITI":                       422,
		"INSTRUMENT_TYPE_NYCKELHARPA":                   423,
		"INSTRUMENT_TYPE_ORGANISTRUM":                   424,
		"INSTRUMENT_TYPE_ORPHARION":                     425,
		"INSTRUMENT_TYPE_OUD":                           426,
		"INSTRUMENT_TYPE_PANDURA":                       427,
		"INSTRUMENT_TYPE_PARAGUAYANHARP":                428,
		"INSTRUMENT_TYPE_PHIN":                          429,
		"INSTRUMENT_TYPE_PHONOFIDDLE":                   430,
		"INSTRUMENT_TYPE_PIPA":                          431,
		"INSTRUMENT_TYPE_PLUCKEDDULCIMER":               432,
		"INSTRUMENT_TYPE_PLUCKEDSTRINGS":                433,
		"INSTRUMENT_TYPE_PSALTERY":                      434,
		"INSTRUMENT_TYPE_RABEL":                         435,
		"INSTRUMENT_TYPE_REBAB":                         436,
		"INSTRUMENT_TYPE_REBEC":                         437,
		"INSTRUMENT_TYPE_RUAN":                          438,
		"INSTRUMENT_TYPE_SANTOOR":                       439,
		"INSTRUMENT_TYPE_SARANGI":                       440,
		"INSTRUMENT_TYPE_SAROD":                         441,
		"INSTRUMENT_TYPE_SAUNG":                         442,
		"INSTRUMENT_TYPE_SAWDUANG":                      443,
		"INSTRUMENT_TYPE_SHAMISEN":                      444,
		"INSTRUMENT_TYPE_SIMSIMIYYA":                    445,
		"INSTRUMENT_TYPE_SINTIR":                        446,
		"INSTRUMENT_TYPE_SITAR":                         447,
		"INSTRUMENT_TYPE_SOPRANODOMRA":                  448,
		"INSTRUMENT_TYPE_STRINGINSTRUMENT":              449,
		"INSTRUMENT_TYPE_STROHLVIOLIN":                  450,
		"INSTRUMENT_TYPE_SURBAHAR":                      451,
		"INSTRUMENT_TYPE_SWARMANDAL":                    452,
		"INSTRUMENT_TYPE_TAMBURA":                       453,
		"INSTRUMENT_TYPE_TANBOUR":                       454,
		"INSTRUMENT_TYPE_TANPURA":                       455,
		"INSTRUMENT_TYPE_TAR_STRING":                    456,
		"INSTRUMENT_TYPE_TENORBANJO":                    457,
		"INSTRUMENT_TYPE_TENORREBEC":                    458,
		"INSTRUMENT_TYPE_TENORVIOL":                     459,
		"INSTRUMENT_TYPE_THEORBO":                       460,
		"INSTRUMENT_TYPE_TIMPLE":                        461,
		"INSTRUMENT_TYPE_TOGAMANGUITARVIOL":             462,
		"INSTRUMENT_TYPE_TREBLEREBEC":                   463,
		"INSTRUMENT_TYPE_TREBLEVIOL":                    464,
		"INSTRUMENT_TYPE_TROMBAMARINA":                  465,
		"INSTRUMENT_TYPE_TUMBI":                         466,
		"INSTRUMENT_TYPE_TZOURAS":                       467,
		"INSTRUMENT_TYPE_UKULELE":                       468,
		"INSTRUMENT_TYPE_VALIHA":                        469,
		"INSTRUMENT_TYPE_VEENA":                         470,
		"INSTRUMENT_TYPE_VENEZUELANHARP":                471,
		"INSTRUMENT_TYPE_VERACRUZHARP":                  472,
		"INSTRUMENT_TYPE_VITAR":                         473,
		"INSTRUMENT_TYPE_VICHITRAVEENA":                 474,
		"INSTRUMENT_TYPE_VIELLE":                        475,
		"INSTRUMENT_TYPE_VIHUELA":                       476,
		"INSTRUMENT_TYPE_VIOL":                          477,
		"INSTRUMENT_TYPE_VIOLA":                         478,
		"INSTRUMENT_TYPE_VIOLADAMORE":                   479,
		"INSTRUMENT_TYPE_VIOLADAGAMBA":                  480,
		"INSTRUMENT_TYPE_VIOLAPOMPOSA":                  481,
		"INSTRUMENT_TYPE_VIOLIN":                        482,
		"INSTRUMENT_TYPE_VIOLINOPICCOLO":                483,
		"INSTRUMENT_TYPE_WELSHTRIPLEHARP":               484,
		"INSTRUMENT_TYPE_WIRESTRUNGHARP":                485,
		"INSTRUMENT_TYPE_XALAM":                         486,
		"INSTRUMENT_TYPE_YANGQIN":                       487,
		"INSTRUMENT_TYPE_YAYLITAMBUR":                   488,
		"INSTRUMENT_TYPE_YOKIN":                         489,
		"INSTRUMENT_TYPE_YUEQIN":                        490,
		"INSTRUMENT_TYPE_ZEZE":                          491,
		"INSTRUMENT_TYPE_ZHONGHU":                       492,
		"INSTRUMENT_TYPE_ZITHER":                        493,
		"INSTRUMENT_TYPE_ARPEGGIATINGSYNTH":             494,
		"INSTRUMENT_TYPE_ONDESMARTENOT":                 495,
		"INSTRUMENT_TYPE_SAMPLER":                       496,
		"INSTRUMENT_TYPE_SYNTHBASS":                     497,
		"INSTRUMENT_TYPE_SYNTHBRASS":                    498,
		"INSTRUMENT_TYPE_SYNTHCHOIR":                    499,
		"INSTRUMENT_TYPE_SYNTHFX":                       500,
		"INSTRUMENT_TYPE_SYNTHLEAD":                     501,
		"INSTRUMENT_TYPE_SYNTHPAD":                      502,
		"INSTRUMENT_TYPE_SYNTHSTEELDRUMS":               503,
		"INSTRUMENT_TYPE_SYNTHSTRINGS":                  504,
		"INSTRUMENT_TYPE_SYNTHESIZER":                   505,
		"INSTRUMENT_TYPE_THEREMIN":                      506,
		"INSTRUMENT_TYPE_GROUPBACKGROUNDVOCALISTS":      507,
		"INSTRUMENT_TYPE_BOYVOICE":                      508,
		"INSTRUMENT_TYPE_CHILDVOICE":                    509,
		"INSTRUMENT_TYPE_CHILDRENSBACKGROUNDVOCALIST":   510,
		"INSTRUMENT_TYPE_FEMALEVOICE":                   511,
		"INSTRUMENT_TYPE_FEMALEBACKGROUNDVOCALIST":      512,
		"INSTRUMENT_TYPE_GIRLVOICE":                     513,
		"INSTRUMENT_TYPE_LEADVOCALIST":                  514,
		"INSTRUMENT_TYPE_MALEVOICE":                     515,
		"INSTRUMENT_TYPE_MALEBACKGROUNDVOCALIST":        516,
		"INSTRUMENT_TYPE_MIXEDVOICE":                    517,
		"INSTRUMENT_TYPE_MIXEDBACKGROUNDVOCALIST":       518,
		"INSTRUMENT_TYPE_NEUTRALVOICE":                  519,
		"INSTRUMENT_TYPE_VOICE":                         520,
		"INSTRUMENT_TYPE_ALBOKA":                        521,
		"INSTRUMENT_TYPE_ALPENHORN":                     522,
		"INSTRUMENT_TYPE_ALTOCLARINET":                  523,
		"INSTRUMENT_TYPE_ALTOCRUMHORN":                  524,
		"INSTRUMENT_TYPE_ALTOFLUTE":                     525,
		"INSTRUMENT_TYPE_ALTOHORN":                      526,
		"INSTRUMENT_TYPE_ALTORECORDER":                  527,
		"INSTRUMENT_TYPE_ALTOSACKBUT":                   528,
		"INSTRUMENT_TYPE_ALTOSAXOPHONE":                 529,
		"INSTRUMENT_TYPE_ALTOSHAWM":                     530,
		"INSTRUMENT_TYPE_ALTOTROMBONE":                  531,
		"INSTRUMENT_TYPE_APITO":                         532,
		"INSTRUMENT_TYPE_ARGHUL":                        533,
		"INSTRUMENT_TYPE_AULOCHROME":                    534,
		"INSTRUMENT_TYPE_BAGPIPES":                      535,
		"INSTRUMENT_TYPE_BANSURI":                       536,
		"INSTRUMENT_TYPE_BARITONEHORN":                  537,
		"INSTRUMENT_TYPE_BARITONEOBOE":                  538,
		"INSTRUMENT_TYPE_BARITONESAXOPHONE":             539,
		"INSTRUMENT_TYPE_BAROQUEBASSOON":                540,
		"INSTRUMENT_TYPE_BAROQUECLARINET":               541,
		"INSTRUMENT_TYPE_BAROQUEFLUTE":                  542,
		"INSTRUMENT_TYPE_BAROQUEOBOE":                   543,
		"INSTRUMENT_TYPE_BAROQUERECORDER":               544,
		"INSTRUMENT_TYPE_BASSCLARINET":                  545,
		"INSTRUMENT_TYPE_BASSDULCIAN":                   546,
		"INSTRUMENT_TYPE_BASSFLUTE":                     547,
		"INSTRUMENT_TYPE_BASSHARMONICA":                 548,
		"INSTRUMENT_TYPE_BASSOBOE":                      549,
		"INSTRUMENT_TYPE_BASSRECORDER":                  550,
		"INSTRUMENT_TYPE_BASSSACKBUT":                   551,
		"INSTRUMENT_TYPE_BASSSAXOPHONE":                 552,
		"INSTRUMENT_TYPE_BASSSHAWM":                     553,
		"INSTRUMENT_TYPE_BASSTROMBONE":                  554,
		"INSTRUMENT_TYPE_BASSTRUMPET":                   555,
		"INSTRUMENT_TYPE_BASSTUBA":                      556,
		"INSTRUMENT_TYPE_BASSETCLARINET":                557,
		"INSTRUMENT_TYPE_BASSETHORN":                    558,
		"INSTRUMENT_TYPE_BASSOON":                       559,
		"INSTRUMENT_TYPE_BAWU":                          560,
		"INSTRUMENT_TYPE_BIRDWHISTLE":                   561,
		"INSTRUMENT_TYPE_BOMBARD":                       562,
		"INSTRUMENT_TYPE_BOSUNSWHISTLE":                 563,
		"INSTRUMENT_TYPE_BRASSINSTRUMENT":               564,
		"INSTRUMENT_TYPE_BUGLE":                         565,
		"INSTRUMENT_TYPE_CALLIOPE":                      566,
		"INSTRUMENT_TYPE_CHALUMEAU":                     567,
		"INSTRUMENT_TYPE_CHROMATICHARMONICA":            568,
		"INSTRUMENT_TYPE_CIMBASSO":                      569,
		"INSTRUMENT_TYPE_CLARINET":                      570,
		"INSTRUMENT_TYPE_CLARINOTRUMPET":                571,
		"INSTRUMENT_TYPE_CONCHSHELL":                    572,
		"INSTRUMENT_TYPE_CONTRAALTOCLARINET":            573,
		"INSTRUMENT_TYPE_CONTRABASSCLARINET":            574,
		"INSTRUMENT_TYPE_CONTRABASSRECORDER":            575,
		"INSTRUMENT_TYPE_CONTRABASSSARRUSOPHONE":        576,
		"INSTRUMENT_TYPE_CONTRABASSSAXOPHONE":           577,
		"INSTRUMENT_TYPE_CONTRABASSTROMBONE":            578,
		"INSTRUMENT_TYPE_CONTRABASSOON":                 579,
		"INSTRUMENT_TYPE_CORNET":                        580,
		"INSTRUMENT_TYPE_CORNETTO":                      581,
		"INSTRUMENT_TYPE_CRUMHORN":                      582,
		"INSTRUMENT_TYPE_DAEGEUM":                       583,
		"INSTRUMENT_TYPE_DIDGERIDOO":                    584,
		"INSTRUMENT_TYPE_DIPLE":                         585,
		"INSTRUMENT_TYPE_DIZI":                          586,
		"INSTRUMENT_TYPE_DUDUK":                         587,
		"INSTRUMENT_TYPE_DULCIAN":                       588,
		"INSTRUMENT_TYPE_DUNGCHEN":                      589,
		"INSTRUMENT_TYPE_ENGLISHHORN":                   590,
		"INSTRUMENT_TYPE_EUPHONIUM":                     591,
		"INSTRUMENT_TYPE_FIFE":                          592,
		"INSTRUMENT_TYPE_FISCORN":                       593,
		"INSTRUMENT_TYPE_FLABIOL":                       594,
		"INSTRUMENT_TYPE_FLAGEOLET":                     595,
		"INSTRUMENT_TYPE_FLOYERA":                       596,
		"INSTRUMENT_TYPE_FLUGELHORN":                    597,
		"INSTRUMENT_TYPE_FLUTE":                         598,
		"INSTRUMENT_TYPE_FRENCHHORN":                    599,
		"INSTRUMENT_TYPE_FUJARA":                        600,
		"INSTRUMENT_TYPE_GASBA":                         601,
		"INSTRUMENT_TYPE_GEMSHORN":                      602,
		"INSTRUMENT_TYPE_GERMANFLUTE":                   603,
		"INSTRUMENT_TYPE_GHAITA":                        604,
		"INSTRUMENT_TYPE_GREATBASSRECORDER":             605,
		"INSTRUMENT_TYPE_GUANZI":                        606,
		"INSTRUMENT_TYPE_GYALING":                       607,
		"INSTRUMENT_TYPE_HARMONICA":                     608,
		"INSTRUMENT_TYPE_HARMONIUM":                     609,
		"INSTRUMENT_TYPE_HECKELPHONE":                   610,
		"INSTRUMENT_TYPE_HELICON":                       611,
		"INSTRUMENT_TYPE_HERALDTRUMPET":                 612,
		"INSTRUMENT_TYPE_HIGHLANDPIPES":                 613,
		"INSTRUMENT_TYPE_HORN":                          614,
		"INSTRUMENT_TYPE_HOTFOUNTAINPEN":                615,
		"INSTRUMENT_TYPE_IRISHLOWWHISTLE":               616,
		"INSTRUMENT_TYPE_JAGDHORN":                      617,
		"INSTRUMENT_TYPE_KAVAL":                         618,
		"INSTRUMENT_TYPE_KEYEDTRUMPET":                  619,
		"INSTRUMENT_TYPE_KHENE":                         620,
		"INSTRUMENT_TYPE_KHLUI":                         621,
		"INSTRUMENT_TYPE_LAUNEDDAS":                     622,
		"INSTRUMENT_TYPE_LUR":                           623,
		"INSTRUMENT_TYPE_MELLOPHONE":                    624,
		"INSTRUMENT_TYPE_MELODICA":                      625,
		"INSTRUMENT_TYPE_MIJWIZ":                        626,
		"INSTRUMENT_TYPE_MINIATUREKHENE":                627,
		"INSTRUMENT_TYPE_MIZMAR":                        628,
		"INSTRUMENT_TYPE_MOUTHORGAN":                    629,
		"INSTRUMENT_TYPE_NADASWARAM":                    630,
		"INSTRUMENT_TYPE_NAI":                           631,
		"INSTRUMENT_TYPE_NATIVEAMERICANFLUTE":           632,
		"INSTRUMENT_TYPE_NATURALHORN":                   633,
		"INSTRUMENT_TYPE_NATURALTRUMPET":                634,
		"INSTRUMENT_TYPE_NEYFLUTE":                      635,
		"INSTRUMENT_TYPE_OBOE":                          636,
		"INSTRUMENT_TYPE_OBOEDAMORE":                    637,
		"INSTRUMENT_TYPE_OBOEDACACCIA":                  638,
		"INSTRUMENT_TYPE_OCARINA":                       639,
		"INSTRUMENT_TYPE_OPHICLEIDE":                    640,
		"INSTRUMENT_TYPE_PAIXIAO":                       641,
		"INSTRUMENT_TYPE_PANFLUTE":                      642,
		"INSTRUMENT_TYPE_PI":                            643,
		"INSTRUMENT_TYPE_PICCOLOCLARINET":               644,
		"INSTRUMENT_TYPE_PICCOLOFLUTE":                  645,
		"INSTRUMENT_TYPE_PICCOLOTRUMPET":                646,
		"INSTRUMENT_TYPE_PINKILLU":                      647,
		"INSTRUMENT_TYPE_POCKETTRUMPET":                 648,
		"INSTRUMENT_TYPE_POLICEWHISTLE":                 649,
		"INSTRUMENT_TYPE_POSTHORN":                      650,
		"INSTRUMENT_TYPE_PUNGI":                         651,
		"INSTRUMENT_TYPE_QUENA":                         652,
		"INSTRUMENT_TYPE_QUENACHO":                      653,
		"INSTRUMENT_TYPE_RACKETT":                       654,
		"INSTRUMENT_TYPE_RAUSCHPFEIFE":                  655,
		"INSTRUMENT_TYPE_RECORDER":                      656,
		"INSTRUMENT_TYPE_REEDINSTRUMENT":                657,
		"INSTRUMENT_TYPE_REGAL":                         658,
		"INSTRUMENT_TYPE_RONDADOR":                      659,
		"INSTRUMENT_TYPE_SACKBUT":                       660,
		"INSTRUMENT_TYPE_SARRUSOPHONE":                  661,
		"INSTRUMENT_TYPE_SAXOPHONE":                     662,
		"INSTRUMENT_TYPE_SERPENT":                       663,
		"INSTRUMENT_TYPE_SHAKUHACHI":                    664,
		"INSTRUMENT_TYPE_SHAWM":                         665,
		"INSTRUMENT_TYPE_SHENAI":                        666,
		"INSTRUMENT_TYPE_SHELLTONE":                     667,
		"INSTRUMENT_TYPE_SHENG":                         668,
		"INSTRUMENT_TYPE_SHO":                           669,
		"INSTRUMENT_TYPE_SHOFAR":                        670,
		"INSTRUMENT_TYPE_SHRUTIBOX":                     671,
		"INSTRUMENT_TYPE_SHVIWHISTLE":                   672,
		"INSTRUMENT_TYPE_SIKU":                          673,
		"INSTRUMENT_TYPE_SLIDESAXOPHONE":                674,
		"INSTRUMENT_TYPE_SLIDETRUMPET":                  675,
		"INSTRUMENT_TYPE_SLIDEWHISTLE":                  676,
		"INSTRUMENT_TYPE_SOPRANINORECORDER":             677,
		"INSTRUMENT_TYPE_SOPRANINOSAXOPHONE":            678,
		"INSTRUMENT_TYPE_SOPRANOCLARINET":               679,
		"INSTRUMENT_TYPE_SOPRANOCORNET":                 680,
		"INSTRUMENT_TYPE_SOPRANOCRUMHORN":               681,
		"INSTRUMENT_TYPE_SOPRANODULCIAN":                682,
		"INSTRUMENT_TYPE_SOPRANORECORDER":               683,
		"INSTRUMENT_TYPE_SOPRANOSAXOPHONE":              684,
		"INSTRUMENT_TYPE_SOPRANOSHAWM":                  685,
		"INSTRUMENT_TYPE_SOPRANOTRUMPET":                686,
		"INSTRUMENT_TYPE_SORDUN":                        687,
		"INSTRUMENT_TYPE_SOUSAPHONE":                    688,
		"INSTRUMENT_TYPE_SULING":                        689,
		"INSTRUMENT_TYPE_SUONA":                         690,
		"INSTRUMENT_TYPE_TARKA":                         691,
		"INSTRUMENT_TYPE_TAROGATO":                      692,
		"INSTRUMENT_TYPE_TENORCRUMHORN":                 693,
		"INSTRUMENT_TYPE_TENORDULCIAN":                  694,
		"INSTRUMENT_TYPE_TENORFLUTE":                    695,
		"INSTRUMENT_TYPE_TENORRECORDER":                 696,
		"INSTRUMENT_TYPE_TENORSACKBUT":                  697,
		"INSTRUMENT_TYPE_TENORSAXOPHONE":                698,
		"INSTRUMENT_TYPE_TENORSHAWM":                    699,
		"INSTRUMENT_TYPE_TENORTROMBONE":                 700,
		"INSTRUMENT_TYPE_TINWHISTLE":                    701,
		"INSTRUMENT_TYPE_TROMBONE":                      702,
		"INSTRUMENT_TYPE_TRUMPET":                       703,
		"INSTRUMENT_TYPE_TUBA":                          704,
		"INSTRUMENT_TYPE_TUSSELFLOYTE":                  705,
		"INSTRUMENT_TYPE_UILLEANPIPES":                  706,
		"INSTRUMENT_TYPE_VALVETROMBONE":                 707,
		"INSTRUMENT_TYPE_VUVUZELA":                      708,
		"INSTRUMENT_TYPE_WAGNERTUBA":                    709,
		"INSTRUMENT_TYPE_WILLOWFLUTE":                   710,
		"INSTRUMENT_TYPE_WINDINSTRUMENT":                711,
		"INSTRUMENT_TYPE_WOODFLUTE":                     712,
		"INSTRUMENT_TYPE_WOODTRUMPET":                   713,
		"INSTRUMENT_TYPE_WOT":                           714,
		"INSTRUMENT_TYPE_XAPHOON":                       715,
		"INSTRUMENT_TYPE_XIAO":                          716,
		"INSTRUMENT_TYPE_XUN":                           717,
		"INSTRUMENT_TYPE_ZUMMARA":                       718,
		"INSTRUMENT_TYPE_ZURNA":                         719,
		"INSTRUMENT_TYPE_CHOIR":                         720,
		"INSTRUMENT_TYPE_PERCUSSIONSECTION":             721,
		"INSTRUMENT_TYPE_STRINGSECTION":                 722,
		"INSTRUMENT_TYPE_WINDSECTION":                   723,
		"INSTRUMENT_TYPE_USERDEFINED":                   724,
	}
)

func (x InstrumentType) Enum() *InstrumentType {
	p := new(InstrumentType)
	*p = x
	return p
}

func (x InstrumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[101].Descriptor()
}

func (InstrumentType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[101]
}

func (x InstrumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentType.Descriptor instead.
func (InstrumentType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{101}
}

type Iso31661TerritoryCode int32

const (
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_UNSPECIFIED Iso31661TerritoryCode = 0
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AD          Iso31661TerritoryCode = 1
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AE          Iso31661TerritoryCode = 2
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AF          Iso31661TerritoryCode = 3
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AG          Iso31661TerritoryCode = 4
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AI          Iso31661TerritoryCode = 5
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AL          Iso31661TerritoryCode = 6
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AM          Iso31661TerritoryCode = 7
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AN          Iso31661TerritoryCode = 8
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AO          Iso31661TerritoryCode = 9
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AQ          Iso31661TerritoryCode = 10
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AR          Iso31661TerritoryCode = 11
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AS          Iso31661TerritoryCode = 12
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AT          Iso31661TerritoryCode = 13
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AU          Iso31661TerritoryCode = 14
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AW          Iso31661TerritoryCode = 15
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AX          Iso31661TerritoryCode = 16
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_AZ          Iso31661TerritoryCode = 17
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BA          Iso31661TerritoryCode = 18
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BB          Iso31661TerritoryCode = 19
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BD          Iso31661TerritoryCode = 20
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BE          Iso31661TerritoryCode = 21
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BF          Iso31661TerritoryCode = 22
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BG          Iso31661TerritoryCode = 23
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BH          Iso31661TerritoryCode = 24
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BI          Iso31661TerritoryCode = 25
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BJ          Iso31661TerritoryCode = 26
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BL          Iso31661TerritoryCode = 27
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BM          Iso31661TerritoryCode = 28
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BN          Iso31661TerritoryCode = 29
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BO          Iso31661TerritoryCode = 30
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BQ          Iso31661TerritoryCode = 31
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BR          Iso31661TerritoryCode = 32
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BS          Iso31661TerritoryCode = 33
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BT          Iso31661TerritoryCode = 34
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BV          Iso31661TerritoryCode = 35
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BW          Iso31661TerritoryCode = 36
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BY          Iso31661TerritoryCode = 37
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_BZ          Iso31661TerritoryCode = 38
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CA          Iso31661TerritoryCode = 39
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CC          Iso31661TerritoryCode = 40
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CD          Iso31661TerritoryCode = 41
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CF          Iso31661TerritoryCode = 42
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CG          Iso31661TerritoryCode = 43
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CH          Iso31661TerritoryCode = 44
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CI          Iso31661TerritoryCode = 45
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CK          Iso31661TerritoryCode = 46
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CL          Iso31661TerritoryCode = 47
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CM          Iso31661TerritoryCode = 48
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CN          Iso31661TerritoryCode = 49
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CO          Iso31661TerritoryCode = 50
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CR          Iso31661TerritoryCode = 51
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CS          Iso31661TerritoryCode = 52
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CU          Iso31661TerritoryCode = 53
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CV          Iso31661TerritoryCode = 54
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CW          Iso31661TerritoryCode = 55
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CX          Iso31661TerritoryCode = 56
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CY          Iso31661TerritoryCode = 57
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_CZ          Iso31661TerritoryCode = 58
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_DE          Iso31661TerritoryCode = 59
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_DJ          Iso31661TerritoryCode = 60
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_DK          Iso31661TerritoryCode = 61
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_DM          Iso31661TerritoryCode = 62
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_DO          Iso31661TerritoryCode = 63
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_DZ          Iso31661TerritoryCode = 64
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_EC          Iso31661TerritoryCode = 65
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_EE          Iso31661TerritoryCode = 66
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_EG          Iso31661TerritoryCode = 67
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_EH          Iso31661TerritoryCode = 68
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_ER          Iso31661TerritoryCode = 69
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_ES          Iso31661TerritoryCode = 70
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_ET          Iso31661TerritoryCode = 71
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_FI          Iso31661TerritoryCode = 72
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_FJ          Iso31661TerritoryCode = 73
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_FK          Iso31661TerritoryCode = 74
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_FM          Iso31661TerritoryCode = 75
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_FO          Iso31661TerritoryCode = 76
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_FR          Iso31661TerritoryCode = 77
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GA          Iso31661TerritoryCode = 78
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GB          Iso31661TerritoryCode = 79
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GD          Iso31661TerritoryCode = 80
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GE          Iso31661TerritoryCode = 81
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GF          Iso31661TerritoryCode = 82
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GG          Iso31661TerritoryCode = 83
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GH          Iso31661TerritoryCode = 84
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GI          Iso31661TerritoryCode = 85
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GL          Iso31661TerritoryCode = 86
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GM          Iso31661TerritoryCode = 87
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GN          Iso31661TerritoryCode = 88
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GP          Iso31661TerritoryCode = 89
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GQ          Iso31661TerritoryCode = 90
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GR          Iso31661TerritoryCode = 91
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GS          Iso31661TerritoryCode = 92
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GT          Iso31661TerritoryCode = 93
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GU          Iso31661TerritoryCode = 94
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GW          Iso31661TerritoryCode = 95
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_GY          Iso31661TerritoryCode = 96
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_HK          Iso31661TerritoryCode = 97
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_HM          Iso31661TerritoryCode = 98
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_HN          Iso31661TerritoryCode = 99
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_HR          Iso31661TerritoryCode = 100
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_HT          Iso31661TerritoryCode = 101
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_HU          Iso31661TerritoryCode = 102
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_ID          Iso31661TerritoryCode = 103
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_IE          Iso31661TerritoryCode = 104
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_IL          Iso31661TerritoryCode = 105
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_IM          Iso31661TerritoryCode = 106
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_IN          Iso31661TerritoryCode = 107
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_IO          Iso31661TerritoryCode = 108
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_IQ          Iso31661TerritoryCode = 109
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_IR          Iso31661TerritoryCode = 110
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_IS          Iso31661TerritoryCode = 111
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_IT          Iso31661TerritoryCode = 112
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_JE          Iso31661TerritoryCode = 113
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_JM          Iso31661TerritoryCode = 114
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_JO          Iso31661TerritoryCode = 115
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_JP          Iso31661TerritoryCode = 116
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_KE          Iso31661TerritoryCode = 117
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_KG          Iso31661TerritoryCode = 118
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_KH          Iso31661TerritoryCode = 119
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_KI          Iso31661TerritoryCode = 120
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_KM          Iso31661TerritoryCode = 121
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_KN          Iso31661TerritoryCode = 122
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_KP          Iso31661TerritoryCode = 123
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_KR          Iso31661TerritoryCode = 124
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_KW          Iso31661TerritoryCode = 125
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_KY          Iso31661TerritoryCode = 126
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_KZ          Iso31661TerritoryCode = 127
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_LA          Iso31661TerritoryCode = 128
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_LB          Iso31661TerritoryCode = 129
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_LC          Iso31661TerritoryCode = 130
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_LI          Iso31661TerritoryCode = 131
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_LK          Iso31661TerritoryCode = 132
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_LR          Iso31661TerritoryCode = 133
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_LS          Iso31661TerritoryCode = 134
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_LT          Iso31661TerritoryCode = 135
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_LU          Iso31661TerritoryCode = 136
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_LV          Iso31661TerritoryCode = 137
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_LY          Iso31661TerritoryCode = 138
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MA          Iso31661TerritoryCode = 139
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MC          Iso31661TerritoryCode = 140
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MD          Iso31661TerritoryCode = 141
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_ME          Iso31661TerritoryCode = 142
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MF          Iso31661TerritoryCode = 143
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MG          Iso31661TerritoryCode = 144
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MH          Iso31661TerritoryCode = 145
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MK          Iso31661TerritoryCode = 146
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_ML          Iso31661TerritoryCode = 147
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MM          Iso31661TerritoryCode = 148
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MN          Iso31661TerritoryCode = 149
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MO          Iso31661TerritoryCode = 150
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MP          Iso31661TerritoryCode = 151
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MQ          Iso31661TerritoryCode = 152
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MR          Iso31661TerritoryCode = 153
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MS          Iso31661TerritoryCode = 154
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MT          Iso31661TerritoryCode = 155
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MU          Iso31661TerritoryCode = 156
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MV          Iso31661TerritoryCode = 157
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MW          Iso31661TerritoryCode = 158
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MX          Iso31661TerritoryCode = 159
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MY          Iso31661TerritoryCode = 160
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_MZ          Iso31661TerritoryCode = 161
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NA          Iso31661TerritoryCode = 162
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NC          Iso31661TerritoryCode = 163
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NE          Iso31661TerritoryCode = 164
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NF          Iso31661TerritoryCode = 165
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NG          Iso31661TerritoryCode = 166
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NI          Iso31661TerritoryCode = 167
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NL          Iso31661TerritoryCode = 168
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NO          Iso31661TerritoryCode = 169
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NP          Iso31661TerritoryCode = 170
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NR          Iso31661TerritoryCode = 171
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NU          Iso31661TerritoryCode = 172
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_NZ          Iso31661TerritoryCode = 173
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_OM          Iso31661TerritoryCode = 174
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PA          Iso31661TerritoryCode = 175
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PE          Iso31661TerritoryCode = 176
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PF          Iso31661TerritoryCode = 177
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PG          Iso31661TerritoryCode = 178
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PH          Iso31661TerritoryCode = 179
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PK          Iso31661TerritoryCode = 180
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PL          Iso31661TerritoryCode = 181
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PM          Iso31661TerritoryCode = 182
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PN          Iso31661TerritoryCode = 183
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PR          Iso31661TerritoryCode = 184
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PS          Iso31661TerritoryCode = 185
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PT          Iso31661TerritoryCode = 186
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PW          Iso31661TerritoryCode = 187
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_PY          Iso31661TerritoryCode = 188
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_QA          Iso31661TerritoryCode = 189
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_RE          Iso31661TerritoryCode = 190
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_RO          Iso31661TerritoryCode = 191
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_RS          Iso31661TerritoryCode = 192
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_RU          Iso31661TerritoryCode = 193
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_RW          Iso31661TerritoryCode = 194
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SA          Iso31661TerritoryCode = 195
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SB          Iso31661TerritoryCode = 196
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SC          Iso31661TerritoryCode = 197
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SD          Iso31661TerritoryCode = 198
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SE          Iso31661TerritoryCode = 199
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SG          Iso31661TerritoryCode = 200
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SH          Iso31661TerritoryCode = 201
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SI          Iso31661TerritoryCode = 202
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SJ          Iso31661TerritoryCode = 203
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SK          Iso31661TerritoryCode = 204
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SL          Iso31661TerritoryCode = 205
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SM          Iso31661TerritoryCode = 206
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SN          Iso31661TerritoryCode = 207
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SO          Iso31661TerritoryCode = 208
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SR          Iso31661TerritoryCode = 209
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SS          Iso31661TerritoryCode = 210
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_ST          Iso31661TerritoryCode = 211
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SV          Iso31661TerritoryCode = 212
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SX          Iso31661TerritoryCode = 213
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SY          Iso31661TerritoryCode = 214
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_SZ          Iso31661TerritoryCode = 215
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TC          Iso31661TerritoryCode = 216
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TD          Iso31661TerritoryCode = 217
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TF          Iso31661TerritoryCode = 218
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TG          Iso31661TerritoryCode = 219
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TH          Iso31661TerritoryCode = 220
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TJ          Iso31661TerritoryCode = 221
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TK          Iso31661TerritoryCode = 222
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TL          Iso31661TerritoryCode = 223
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TM          Iso31661TerritoryCode = 224
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TN          Iso31661TerritoryCode = 225
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TO          Iso31661TerritoryCode = 226
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TR          Iso31661TerritoryCode = 227
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TT          Iso31661TerritoryCode = 228
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TV          Iso31661TerritoryCode = 229
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TW          Iso31661TerritoryCode = 230
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_TZ          Iso31661TerritoryCode = 231
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_UA          Iso31661TerritoryCode = 232
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_UG          Iso31661TerritoryCode = 233
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_UM          Iso31661TerritoryCode = 234
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_US          Iso31661TerritoryCode = 235
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_UY          Iso31661TerritoryCode = 236
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_UZ          Iso31661TerritoryCode = 237
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_VA          Iso31661TerritoryCode = 238
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_VC          Iso31661TerritoryCode = 239
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_VE          Iso31661TerritoryCode = 240
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_VG          Iso31661TerritoryCode = 241
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_VI          Iso31661TerritoryCode = 242
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_VN          Iso31661TerritoryCode = 243
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_VU          Iso31661TerritoryCode = 244
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_WF          Iso31661TerritoryCode = 245
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_WS          Iso31661TerritoryCode = 246
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_YE          Iso31661TerritoryCode = 247
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_YT          Iso31661TerritoryCode = 248
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_ZA          Iso31661TerritoryCode = 249
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_ZM          Iso31661TerritoryCode = 250
	Iso31661TerritoryCode_ISO31661_TERRITORY_CODE_ZW          Iso31661TerritoryCode = 251
)

// Enum value maps for Iso31661TerritoryCode.
var (
	Iso31661TerritoryCode_name = map[int32]string{
		0:   "ISO31661_TERRITORY_CODE_UNSPECIFIED",
		1:   "ISO31661_TERRITORY_CODE_AD",
		2:   "ISO31661_TERRITORY_CODE_AE",
		3:   "ISO31661_TERRITORY_CODE_AF",
		4:   "ISO31661_TERRITORY_CODE_AG",
		5:   "ISO31661_TERRITORY_CODE_AI",
		6:   "ISO31661_TERRITORY_CODE_AL",
		7:   "ISO31661_TERRITORY_CODE_AM",
		8:   "ISO31661_TERRITORY_CODE_AN",
		9:   "ISO31661_TERRITORY_CODE_AO",
		10:  "ISO31661_TERRITORY_CODE_AQ",
		11:  "ISO31661_TERRITORY_CODE_AR",
		12:  "ISO31661_TERRITORY_CODE_AS",
		13:  "ISO31661_TERRITORY_CODE_AT",
		14:  "ISO31661_TERRITORY_CODE_AU",
		15:  "ISO31661_TERRITORY_CODE_AW",
		16:  "ISO31661_TERRITORY_CODE_AX",
		17:  "ISO31661_TERRITORY_CODE_AZ",
		18:  "ISO31661_TERRITORY_CODE_BA",
		19:  "ISO31661_TERRITORY_CODE_BB",
		20:  "ISO31661_TERRITORY_CODE_BD",
		21:  "ISO31661_TERRITORY_CODE_BE",
		22:  "ISO31661_TERRITORY_CODE_BF",
		23:  "ISO31661_TERRITORY_CODE_BG",
		24:  "ISO31661_TERRITORY_CODE_BH",
		25:  "ISO31661_TERRITORY_CODE_BI",
		26:  "ISO31661_TERRITORY_CODE_BJ",
		27:  "ISO31661_TERRITORY_CODE_BL",
		28:  "ISO31661_TERRITORY_CODE_BM",
		29:  "ISO31661_TERRITORY_CODE_BN",
		30:  "ISO31661_TERRITORY_CODE_BO",
		31:  "ISO31661_TERRITORY_CODE_BQ",
		32:  "ISO31661_TERRITORY_CODE_BR",
		33:  "ISO31661_TERRITORY_CODE_BS",
		34:  "ISO31661_TERRITORY_CODE_BT",
		35:  "ISO31661_TERRITORY_CODE_BV",
		36:  "ISO31661_TERRITORY_CODE_BW",
		37:  "ISO31661_TERRITORY_CODE_BY",
		38:  "ISO31661_TERRITORY_CODE_BZ",
		39:  "ISO31661_TERRITORY_CODE_CA",
		40:  "ISO31661_TERRITORY_CODE_CC",
		41:  "ISO31661_TERRITORY_CODE_CD",
		42:  "ISO31661_TERRITORY_CODE_CF",
		43:  "ISO31661_TERRITORY_CODE_CG",
		44:  "ISO31661_TERRITORY_CODE_CH",
		45:  "ISO31661_TERRITORY_CODE_CI",
		46:  "ISO31661_TERRITORY_CODE_CK",
		47:  "ISO31661_TERRITORY_CODE_CL",
		48:  "ISO31661_TERRITORY_CODE_CM",
		49:  "ISO31661_TERRITORY_CODE_CN",
		50:  "ISO31661_TERRITORY_CODE_CO",
		51:  "ISO31661_TERRITORY_CODE_CR",
		52:  "ISO31661_TERRITORY_CODE_CS",
		53:  "ISO31661_TERRITORY_CODE_CU",
		54:  "ISO31661_TERRITORY_CODE_CV",
		55:  "ISO31661_TERRITORY_CODE_CW",
		56:  "ISO31661_TERRITORY_CODE_CX",
		57:  "ISO31661_TERRITORY_CODE_CY",
		58:  "ISO31661_TERRITORY_CODE_CZ",
		59:  "ISO31661_TERRITORY_CODE_DE",
		60:  "ISO31661_TERRITORY_CODE_DJ",
		61:  "ISO31661_TERRITORY_CODE_DK",
		62:  "ISO31661_TERRITORY_CODE_DM",
		63:  "ISO31661_TERRITORY_CODE_DO",
		64:  "ISO31661_TERRITORY_CODE_DZ",
		65:  "ISO31661_TERRITORY_CODE_EC",
		66:  "ISO31661_TERRITORY_CODE_EE",
		67:  "ISO31661_TERRITORY_CODE_EG",
		68:  "ISO31661_TERRITORY_CODE_EH",
		69:  "ISO31661_TERRITORY_CODE_ER",
		70:  "ISO31661_TERRITORY_CODE_ES",
		71:  "ISO31661_TERRITORY_CODE_ET",
		72:  "ISO31661_TERRITORY_CODE_FI",
		73:  "ISO31661_TERRITORY_CODE_FJ",
		74:  "ISO31661_TERRITORY_CODE_FK",
		75:  "ISO31661_TERRITORY_CODE_FM",
		76:  "ISO31661_TERRITORY_CODE_FO",
		77:  "ISO31661_TERRITORY_CODE_FR",
		78:  "ISO31661_TERRITORY_CODE_GA",
		79:  "ISO31661_TERRITORY_CODE_GB",
		80:  "ISO31661_TERRITORY_CODE_GD",
		81:  "ISO31661_TERRITORY_CODE_GE",
		82:  "ISO31661_TERRITORY_CODE_GF",
		83:  "ISO31661_TERRITORY_CODE_GG",
		84:  "ISO31661_TERRITORY_CODE_GH",
		85:  "ISO31661_TERRITORY_CODE_GI",
		86:  "ISO31661_TERRITORY_CODE_GL",
		87:  "ISO31661_TERRITORY_CODE_GM",
		88:  "ISO31661_TERRITORY_CODE_GN",
		89:  "ISO31661_TERRITORY_CODE_GP",
		90:  "ISO31661_TERRITORY_CODE_GQ",
		91:  "ISO31661_TERRITORY_CODE_GR",
		92:  "ISO31661_TERRITORY_CODE_GS",
		93:  "ISO31661_TERRITORY_CODE_GT",
		94:  "ISO31661_TERRITORY_CODE_GU",
		95:  "ISO31661_TERRITORY_CODE_GW",
		96:  "ISO31661_TERRITORY_CODE_GY",
		97:  "ISO31661_TERRITORY_CODE_HK",
		98:  "ISO31661_TERRITORY_CODE_HM",
		99:  "ISO31661_TERRITORY_CODE_HN",
		100: "ISO31661_TERRITORY_CODE_HR",
		101: "ISO31661_TERRITORY_CODE_HT",
		102: "ISO31661_TERRITORY_CODE_HU",
		103: "ISO31661_TERRITORY_CODE_ID",
		104: "ISO31661_TERRITORY_CODE_IE",
		105: "ISO31661_TERRITORY_CODE_IL",
		106: "ISO31661_TERRITORY_CODE_IM",
		107: "ISO31661_TERRITORY_CODE_IN",
		108: "ISO31661_TERRITORY_CODE_IO",
		109: "ISO31661_TERRITORY_CODE_IQ",
		110: "ISO31661_TERRITORY_CODE_IR",
		111: "ISO31661_TERRITORY_CODE_IS",
		112: "ISO31661_TERRITORY_CODE_IT",
		113: "ISO31661_TERRITORY_CODE_JE",
		114: "ISO31661_TERRITORY_CODE_JM",
		115: "ISO31661_TERRITORY_CODE_JO",
		116: "ISO31661_TERRITORY_CODE_JP",
		117: "ISO31661_TERRITORY_CODE_KE",
		118: "ISO31661_TERRITORY_CODE_KG",
		119: "ISO31661_TERRITORY_CODE_KH",
		120: "ISO31661_TERRITORY_CODE_KI",
		121: "ISO31661_TERRITORY_CODE_KM",
		122: "ISO31661_TERRITORY_CODE_KN",
		123: "ISO31661_TERRITORY_CODE_KP",
		124: "ISO31661_TERRITORY_CODE_KR",
		125: "ISO31661_TERRITORY_CODE_KW",
		126: "ISO31661_TERRITORY_CODE_KY",
		127: "ISO31661_TERRITORY_CODE_KZ",
		128: "ISO31661_TERRITORY_CODE_LA",
		129: "ISO31661_TERRITORY_CODE_LB",
		130: "ISO31661_TERRITORY_CODE_LC",
		131: "ISO31661_TERRITORY_CODE_LI",
		132: "ISO31661_TERRITORY_CODE_LK",
		133: "ISO31661_TERRITORY_CODE_LR",
		134: "ISO31661_TERRITORY_CODE_LS",
		135: "ISO31661_TERRITORY_CODE_LT",
		136: "ISO31661_TERRITORY_CODE_LU",
		137: "ISO31661_TERRITORY_CODE_LV",
		138: "ISO31661_TERRITORY_CODE_LY",
		139: "ISO31661_TERRITORY_CODE_MA",
		140: "ISO31661_TERRITORY_CODE_MC",
		141: "ISO31661_TERRITORY_CODE_MD",
		142: "ISO31661_TERRITORY_CODE_ME",
		143: "ISO31661_TERRITORY_CODE_MF",
		144: "ISO31661_TERRITORY_CODE_MG",
		145: "ISO31661_TERRITORY_CODE_MH",
		146: "ISO31661_TERRITORY_CODE_MK",
		147: "ISO31661_TERRITORY_CODE_ML",
		148: "ISO31661_TERRITORY_CODE_MM",
		149: "ISO31661_TERRITORY_CODE_MN",
		150: "ISO31661_TERRITORY_CODE_MO",
		151: "ISO31661_TERRITORY_CODE_MP",
		152: "ISO31661_TERRITORY_CODE_MQ",
		153: "ISO31661_TERRITORY_CODE_MR",
		154: "ISO31661_TERRITORY_CODE_MS",
		155: "ISO31661_TERRITORY_CODE_MT",
		156: "ISO31661_TERRITORY_CODE_MU",
		157: "ISO31661_TERRITORY_CODE_MV",
		158: "ISO31661_TERRITORY_CODE_MW",
		159: "ISO31661_TERRITORY_CODE_MX",
		160: "ISO31661_TERRITORY_CODE_MY",
		161: "ISO31661_TERRITORY_CODE_MZ",
		162: "ISO31661_TERRITORY_CODE_NA",
		163: "ISO31661_TERRITORY_CODE_NC",
		164: "ISO31661_TERRITORY_CODE_NE",
		165: "ISO31661_TERRITORY_CODE_NF",
		166: "ISO31661_TERRITORY_CODE_NG",
		167: "ISO31661_TERRITORY_CODE_NI",
		168: "ISO31661_TERRITORY_CODE_NL",
		169: "ISO31661_TERRITORY_CODE_NO",
		170: "ISO31661_TERRITORY_CODE_NP",
		171: "ISO31661_TERRITORY_CODE_NR",
		172: "ISO31661_TERRITORY_CODE_NU",
		173: "ISO31661_TERRITORY_CODE_NZ",
		174: "ISO31661_TERRITORY_CODE_OM",
		175: "ISO31661_TERRITORY_CODE_PA",
		176: "ISO31661_TERRITORY_CODE_PE",
		177: "ISO31661_TERRITORY_CODE_PF",
		178: "ISO31661_TERRITORY_CODE_PG",
		179: "ISO31661_TERRITORY_CODE_PH",
		180: "ISO31661_TERRITORY_CODE_PK",
		181: "ISO31661_TERRITORY_CODE_PL",
		182: "ISO31661_TERRITORY_CODE_PM",
		183: "ISO31661_TERRITORY_CODE_PN",
		184: "ISO31661_TERRITORY_CODE_PR",
		185: "ISO31661_TERRITORY_CODE_PS",
		186: "ISO31661_TERRITORY_CODE_PT",
		187: "ISO31661_TERRITORY_CODE_PW",
		188: "ISO31661_TERRITORY_CODE_PY",
		189: "ISO31661_TERRITORY_CODE_QA",
		190: "ISO31661_TERRITORY_CODE_RE",
		191: "ISO31661_TERRITORY_CODE_RO",
		192: "ISO31661_TERRITORY_CODE_RS",
		193: "ISO31661_TERRITORY_CODE_RU",
		194: "ISO31661_TERRITORY_CODE_RW",
		195: "ISO31661_TERRITORY_CODE_SA",
		196: "ISO31661_TERRITORY_CODE_SB",
		197: "ISO31661_TERRITORY_CODE_SC",
		198: "ISO31661_TERRITORY_CODE_SD",
		199: "ISO31661_TERRITORY_CODE_SE",
		200: "ISO31661_TERRITORY_CODE_SG",
		201: "ISO31661_TERRITORY_CODE_SH",
		202: "ISO31661_TERRITORY_CODE_SI",
		203: "ISO31661_TERRITORY_CODE_SJ",
		204: "ISO31661_TERRITORY_CODE_SK",
		205: "ISO31661_TERRITORY_CODE_SL",
		206: "ISO31661_TERRITORY_CODE_SM",
		207: "ISO31661_TERRITORY_CODE_SN",
		208: "ISO31661_TERRITORY_CODE_SO",
		209: "ISO31661_TERRITORY_CODE_SR",
		210: "ISO31661_TERRITORY_CODE_SS",
		211: "ISO31661_TERRITORY_CODE_ST",
		212: "ISO31661_TERRITORY_CODE_SV",
		213: "ISO31661_TERRITORY_CODE_SX",
		214: "ISO31661_TERRITORY_CODE_SY",
		215: "ISO31661_TERRITORY_CODE_SZ",
		216: "ISO31661_TERRITORY_CODE_TC",
		217: "ISO31661_TERRITORY_CODE_TD",
		218: "ISO31661_TERRITORY_CODE_TF",
		219: "ISO31661_TERRITORY_CODE_TG",
		220: "ISO31661_TERRITORY_CODE_TH",
		221: "ISO31661_TERRITORY_CODE_TJ",
		222: "ISO31661_TERRITORY_CODE_TK",
		223: "ISO31661_TERRITORY_CODE_TL",
		224: "ISO31661_TERRITORY_CODE_TM",
		225: "ISO31661_TERRITORY_CODE_TN",
		226: "ISO31661_TERRITORY_CODE_TO",
		227: "ISO31661_TERRITORY_CODE_TR",
		228: "ISO31661_TERRITORY_CODE_TT",
		229: "ISO31661_TERRITORY_CODE_TV",
		230: "ISO31661_TERRITORY_CODE_TW",
		231: "ISO31661_TERRITORY_CODE_TZ",
		232: "ISO31661_TERRITORY_CODE_UA",
		233: "ISO31661_TERRITORY_CODE_UG",
		234: "ISO31661_TERRITORY_CODE_UM",
		235: "ISO31661_TERRITORY_CODE_US",
		236: "ISO31661_TERRITORY_CODE_UY",
		237: "ISO31661_TERRITORY_CODE_UZ",
		238: "ISO31661_TERRITORY_CODE_VA",
		239: "ISO31661_TERRITORY_CODE_VC",
		240: "ISO31661_TERRITORY_CODE_VE",
		241: "ISO31661_TERRITORY_CODE_VG",
		242: "ISO31661_TERRITORY_CODE_VI",
		243: "ISO31661_TERRITORY_CODE_VN",
		244: "ISO31661_TERRITORY_CODE_VU",
		245: "ISO31661_TERRITORY_CODE_WF",
		246: "ISO31661_TERRITORY_CODE_WS",
		247: "ISO31661_TERRITORY_CODE_YE",
		248: "ISO31661_TERRITORY_CODE_YT",
		249: "ISO31661_TERRITORY_CODE_ZA",
		250: "ISO31661_TERRITORY_CODE_ZM",
		251: "ISO31661_TERRITORY_CODE_ZW",
	}
	Iso31661TerritoryCode_value = map[string]int32{
		"ISO31661_TERRITORY_CODE_UNSPECIFIED": 0,
		"ISO31661_TERRITORY_CODE_AD":          1,
		"ISO31661_TERRITORY_CODE_AE":          2,
		"ISO31661_TERRITORY_CODE_AF":          3,
		"ISO31661_TERRITORY_CODE_AG":          4,
		"ISO31661_TERRITORY_CODE_AI":          5,
		"ISO31661_TERRITORY_CODE_AL":          6,
		"ISO31661_TERRITORY_CODE_AM":          7,
		"ISO31661_TERRITORY_CODE_AN":          8,
		"ISO31661_TERRITORY_CODE_AO":          9,
		"ISO31661_TERRITORY_CODE_AQ":          10,
		"ISO31661_TERRITORY_CODE_AR":          11,
		"ISO31661_TERRITORY_CODE_AS":          12,
		"ISO31661_TERRITORY_CODE_AT":          13,
		"ISO31661_TERRITORY_CODE_AU":          14,
		"ISO31661_TERRITORY_CODE_AW":          15,
		"ISO31661_TERRITORY_CODE_AX":          16,
		"ISO31661_TERRITORY_CODE_AZ":          17,
		"ISO31661_TERRITORY_CODE_BA":          18,
		"ISO31661_TERRITORY_CODE_BB":          19,
		"ISO31661_TERRITORY_CODE_BD":          20,
		"ISO31661_TERRITORY_CODE_BE":          21,
		"ISO31661_TERRITORY_CODE_BF":          22,
		"ISO31661_TERRITORY_CODE_BG":          23,
		"ISO31661_TERRITORY_CODE_BH":          24,
		"ISO31661_TERRITORY_CODE_BI":          25,
		"ISO31661_TERRITORY_CODE_BJ":          26,
		"ISO31661_TERRITORY_CODE_BL":          27,
		"ISO31661_TERRITORY_CODE_BM":          28,
		"ISO31661_TERRITORY_CODE_BN":          29,
		"ISO31661_TERRITORY_CODE_BO":          30,
		"ISO31661_TERRITORY_CODE_BQ":          31,
		"ISO31661_TERRITORY_CODE_BR":          32,
		"ISO31661_TERRITORY_CODE_BS":          33,
		"ISO31661_TERRITORY_CODE_BT":          34,
		"ISO31661_TERRITORY_CODE_BV":          35,
		"ISO31661_TERRITORY_CODE_BW":          36,
		"ISO31661_TERRITORY_CODE_BY":          37,
		"ISO31661_TERRITORY_CODE_BZ":          38,
		"ISO31661_TERRITORY_CODE_CA":          39,
		"ISO31661_TERRITORY_CODE_CC":          40,
		"ISO31661_TERRITORY_CODE_CD":          41,
		"ISO31661_TERRITORY_CODE_CF":          42,
		"ISO31661_TERRITORY_CODE_CG":          43,
		"ISO31661_TERRITORY_CODE_CH":          44,
		"ISO31661_TERRITORY_CODE_CI":          45,
		"ISO31661_TERRITORY_CODE_CK":          46,
		"ISO31661_TERRITORY_CODE_CL":          47,
		"ISO31661_TERRITORY_CODE_CM":          48,
		"ISO31661_TERRITORY_CODE_CN":          49,
		"ISO31661_TERRITORY_CODE_CO":          50,
		"ISO31661_TERRITORY_CODE_CR":          51,
		"ISO31661_TERRITORY_CODE_CS":          52,
		"ISO31661_TERRITORY_CODE_CU":          53,
		"ISO31661_TERRITORY_CODE_CV":          54,
		"ISO31661_TERRITORY_CODE_CW":          55,
		"ISO31661_TERRITORY_CODE_CX":          56,
		"ISO31661_TERRITORY_CODE_CY":          57,
		"ISO31661_TERRITORY_CODE_CZ":          58,
		"ISO31661_TERRITORY_CODE_DE":          59,
		"ISO31661_TERRITORY_CODE_DJ":          60,
		"ISO31661_TERRITORY_CODE_DK":          61,
		"ISO31661_TERRITORY_CODE_DM":          62,
		"ISO31661_TERRITORY_CODE_DO":          63,
		"ISO31661_TERRITORY_CODE_DZ":          64,
		"ISO31661_TERRITORY_CODE_EC":          65,
		"ISO31661_TERRITORY_CODE_EE":          66,
		"ISO31661_TERRITORY_CODE_EG":          67,
		"ISO31661_TERRITORY_CODE_EH":          68,
		"ISO31661_TERRITORY_CODE_ER":          69,
		"ISO31661_TERRITORY_CODE_ES":          70,
		"ISO31661_TERRITORY_CODE_ET":          71,
		"ISO31661_TERRITORY_CODE_FI":          72,
		"ISO31661_TERRITORY_CODE_FJ":          73,
		"ISO31661_TERRITORY_CODE_FK":          74,
		"ISO31661_TERRITORY_CODE_FM":          75,
		"ISO31661_TERRITORY_CODE_FO":          76,
		"ISO31661_TERRITORY_CODE_FR":          77,
		"ISO31661_TERRITORY_CODE_GA":          78,
		"ISO31661_TERRITORY_CODE_GB":          79,
		"ISO31661_TERRITORY_CODE_GD":          80,
		"ISO31661_TERRITORY_CODE_GE":          81,
		"ISO31661_TERRITORY_CODE_GF":          82,
		"ISO31661_TERRITORY_CODE_GG":          83,
		"ISO31661_TERRITORY_CODE_GH":          84,
		"ISO31661_TERRITORY_CODE_GI":          85,
		"ISO31661_TERRITORY_CODE_GL":          86,
		"ISO31661_TERRITORY_CODE_GM":          87,
		"ISO31661_TERRITORY_CODE_GN":          88,
		"ISO31661_TERRITORY_CODE_GP":          89,
		"ISO31661_TERRITORY_CODE_GQ":          90,
		"ISO31661_TERRITORY_CODE_GR":          91,
		"ISO31661_TERRITORY_CODE_GS":          92,
		"ISO31661_TERRITORY_CODE_GT":          93,
		"ISO31661_TERRITORY_CODE_GU":          94,
		"ISO31661_TERRITORY_CODE_GW":          95,
		"ISO31661_TERRITORY_CODE_GY":          96,
		"ISO31661_TERRITORY_CODE_HK":          97,
		"ISO31661_TERRITORY_CODE_HM":          98,
		"ISO31661_TERRITORY_CODE_HN":          99,
		"ISO31661_TERRITORY_CODE_HR":          100,
		"ISO31661_TERRITORY_CODE_HT":          101,
		"ISO31661_TERRITORY_CODE_HU":          102,
		"ISO31661_TERRITORY_CODE_ID":          103,
		"ISO31661_TERRITORY_CODE_IE":          104,
		"ISO31661_TERRITORY_CODE_IL":          105,
		"ISO31661_TERRITORY_CODE_IM":          106,
		"ISO31661_TERRITORY_CODE_IN":          107,
		"ISO31661_TERRITORY_CODE_IO":          108,
		"ISO31661_TERRITORY_CODE_IQ":          109,
		"ISO31661_TERRITORY_CODE_IR":          110,
		"ISO31661_TERRITORY_CODE_IS":          111,
		"ISO31661_TERRITORY_CODE_IT":          112,
		"ISO31661_TERRITORY_CODE_JE":          113,
		"ISO31661_TERRITORY_CODE_JM":          114,
		"ISO31661_TERRITORY_CODE_JO":          115,
		"ISO31661_TERRITORY_CODE_JP":          116,
		"ISO31661_TERRITORY_CODE_KE":          117,
		"ISO31661_TERRITORY_CODE_KG":          118,
		"ISO31661_TERRITORY_CODE_KH":          119,
		"ISO31661_TERRITORY_CODE_KI":          120,
		"ISO31661_TERRITORY_CODE_KM":          121,
		"ISO31661_TERRITORY_CODE_KN":          122,
		"ISO31661_TERRITORY_CODE_KP":          123,
		"ISO31661_TERRITORY_CODE_KR":          124,
		"ISO31661_TERRITORY_CODE_KW":          125,
		"ISO31661_TERRITORY_CODE_KY":          126,
		"ISO31661_TERRITORY_CODE_KZ":          127,
		"ISO31661_TERRITORY_CODE_LA":          128,
		"ISO31661_TERRITORY_CODE_LB":          129,
		"ISO31661_TERRITORY_CODE_LC":          130,
		"ISO31661_TERRITORY_CODE_LI":          131,
		"ISO31661_TERRITORY_CODE_LK":          132,
		"ISO31661_TERRITORY_CODE_LR":          133,
		"ISO31661_TERRITORY_CODE_LS":          134,
		"ISO31661_TERRITORY_CODE_LT":          135,
		"ISO31661_TERRITORY_CODE_LU":          136,
		"ISO31661_TERRITORY_CODE_LV":          137,
		"ISO31661_TERRITORY_CODE_LY":          138,
		"ISO31661_TERRITORY_CODE_MA":          139,
		"ISO31661_TERRITORY_CODE_MC":          140,
		"ISO31661_TERRITORY_CODE_MD":          141,
		"ISO31661_TERRITORY_CODE_ME":          142,
		"ISO31661_TERRITORY_CODE_MF":          143,
		"ISO31661_TERRITORY_CODE_MG":          144,
		"ISO31661_TERRITORY_CODE_MH":          145,
		"ISO31661_TERRITORY_CODE_MK":          146,
		"ISO31661_TERRITORY_CODE_ML":          147,
		"ISO31661_TERRITORY_CODE_MM":          148,
		"ISO31661_TERRITORY_CODE_MN":          149,
		"ISO31661_TERRITORY_CODE_MO":          150,
		"ISO31661_TERRITORY_CODE_MP":          151,
		"ISO31661_TERRITORY_CODE_MQ":          152,
		"ISO31661_TERRITORY_CODE_MR":          153,
		"ISO31661_TERRITORY_CODE_MS":          154,
		"ISO31661_TERRITORY_CODE_MT":          155,
		"ISO31661_TERRITORY_CODE_MU":          156,
		"ISO31661_TERRITORY_CODE_MV":          157,
		"ISO31661_TERRITORY_CODE_MW":          158,
		"ISO31661_TERRITORY_CODE_MX":          159,
		"ISO31661_TERRITORY_CODE_MY":          160,
		"ISO31661_TERRITORY_CODE_MZ":          161,
		"ISO31661_TERRITORY_CODE_NA":          162,
		"ISO31661_TERRITORY_CODE_NC":          163,
		"ISO31661_TERRITORY_CODE_NE":          164,
		"ISO31661_TERRITORY_CODE_NF":          165,
		"ISO31661_TERRITORY_CODE_NG":          166,
		"ISO31661_TERRITORY_CODE_NI":          167,
		"ISO31661_TERRITORY_CODE_NL":          168,
		"ISO31661_TERRITORY_CODE_NO":          169,
		"ISO31661_TERRITORY_CODE_NP":          170,
		"ISO31661_TERRITORY_CODE_NR":          171,
		"ISO31661_TERRITORY_CODE_NU":          172,
		"ISO31661_TERRITORY_CODE_NZ":          173,
		"ISO31661_TERRITORY_CODE_OM":          174,
		"ISO31661_TERRITORY_CODE_PA":          175,
		"ISO31661_TERRITORY_CODE_PE":          176,
		"ISO31661_TERRITORY_CODE_PF":          177,
		"ISO31661_TERRITORY_CODE_PG":          178,
		"ISO31661_TERRITORY_CODE_PH":          179,
		"ISO31661_TERRITORY_CODE_PK":          180,
		"ISO31661_TERRITORY_CODE_PL":          181,
		"ISO31661_TERRITORY_CODE_PM":          182,
		"ISO31661_TERRITORY_CODE_PN":          183,
		"ISO31661_TERRITORY_CODE_PR":          184,
		"ISO31661_TERRITORY_CODE_PS":          185,
		"ISO31661_TERRITORY_CODE_PT":          186,
		"ISO31661_TERRITORY_CODE_PW":          187,
		"ISO31661_TERRITORY_CODE_PY":          188,
		"ISO31661_TERRITORY_CODE_QA":          189,
		"ISO31661_TERRITORY_CODE_RE":          190,
		"ISO31661_TERRITORY_CODE_RO":          191,
		"ISO31661_TERRITORY_CODE_RS":          192,
		"ISO31661_TERRITORY_CODE_RU":          193,
		"ISO31661_TERRITORY_CODE_RW":          194,
		"ISO31661_TERRITORY_CODE_SA":          195,
		"ISO31661_TERRITORY_CODE_SB":          196,
		"ISO31661_TERRITORY_CODE_SC":          197,
		"ISO31661_TERRITORY_CODE_SD":          198,
		"ISO31661_TERRITORY_CODE_SE":          199,
		"ISO31661_TERRITORY_CODE_SG":          200,
		"ISO31661_TERRITORY_CODE_SH":          201,
		"ISO31661_TERRITORY_CODE_SI":          202,
		"ISO31661_TERRITORY_CODE_SJ":          203,
		"ISO31661_TERRITORY_CODE_SK":          204,
		"ISO31661_TERRITORY_CODE_SL":          205,
		"ISO31661_TERRITORY_CODE_SM":          206,
		"ISO31661_TERRITORY_CODE_SN":          207,
		"ISO31661_TERRITORY_CODE_SO":          208,
		"ISO31661_TERRITORY_CODE_SR":          209,
		"ISO31661_TERRITORY_CODE_SS":          210,
		"ISO31661_TERRITORY_CODE_ST":          211,
		"ISO31661_TERRITORY_CODE_SV":          212,
		"ISO31661_TERRITORY_CODE_SX":          213,
		"ISO31661_TERRITORY_CODE_SY":          214,
		"ISO31661_TERRITORY_CODE_SZ":          215,
		"ISO31661_TERRITORY_CODE_TC":          216,
		"ISO31661_TERRITORY_CODE_TD":          217,
		"ISO31661_TERRITORY_CODE_TF":          218,
		"ISO31661_TERRITORY_CODE_TG":          219,
		"ISO31661_TERRITORY_CODE_TH":          220,
		"ISO31661_TERRITORY_CODE_TJ":          221,
		"ISO31661_TERRITORY_CODE_TK":          222,
		"ISO31661_TERRITORY_CODE_TL":          223,
		"ISO31661_TERRITORY_CODE_TM":          224,
		"ISO31661_TERRITORY_CODE_TN":          225,
		"ISO31661_TERRITORY_CODE_TO":          226,
		"ISO31661_TERRITORY_CODE_TR":          227,
		"ISO31661_TERRITORY_CODE_TT":          228,
		"ISO31661_TERRITORY_CODE_TV":          229,
		"ISO31661_TERRITORY_CODE_TW":          230,
		"ISO31661_TERRITORY_CODE_TZ":          231,
		"ISO31661_TERRITORY_CODE_UA":          232,
		"ISO31661_TERRITORY_CODE_UG":          233,
		"ISO31661_TERRITORY_CODE_UM":          234,
		"ISO31661_TERRITORY_CODE_US":          235,
		"ISO31661_TERRITORY_CODE_UY":          236,
		"ISO31661_TERRITORY_CODE_UZ":          237,
		"ISO31661_TERRITORY_CODE_VA":          238,
		"ISO31661_TERRITORY_CODE_VC":          239,
		"ISO31661_TERRITORY_CODE_VE":          240,
		"ISO31661_TERRITORY_CODE_VG":          241,
		"ISO31661_TERRITORY_CODE_VI":          242,
		"ISO31661_TERRITORY_CODE_VN":          243,
		"ISO31661_TERRITORY_CODE_VU":          244,
		"ISO31661_TERRITORY_CODE_WF":          245,
		"ISO31661_TERRITORY_CODE_WS":          246,
		"ISO31661_TERRITORY_CODE_YE":          247,
		"ISO31661_TERRITORY_CODE_YT":          248,
		"ISO31661_TERRITORY_CODE_ZA":          249,
		"ISO31661_TERRITORY_CODE_ZM":          250,
		"ISO31661_TERRITORY_CODE_ZW":          251,
	}
)

func (x Iso31661TerritoryCode) Enum() *Iso31661TerritoryCode {
	p := new(Iso31661TerritoryCode)
	*p = x
	return p
}

func (x Iso31661TerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Iso31661TerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[102].Descriptor()
}

func (Iso31661TerritoryCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[102]
}

func (x Iso31661TerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Iso31661TerritoryCode.Descriptor instead.
func (Iso31661TerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{102}
}

type Iso639Part12LanguageCode int32

const (
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UNSPECIFIED Iso639Part12LanguageCode = 0
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AA          Iso639Part12LanguageCode = 1
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AAR         Iso639Part12LanguageCode = 2
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AB          Iso639Part12LanguageCode = 3
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ABK         Iso639Part12LanguageCode = 4
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AE          Iso639Part12LanguageCode = 5
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AVE         Iso639Part12LanguageCode = 6
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AF          Iso639Part12LanguageCode = 7
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AFR         Iso639Part12LanguageCode = 8
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AK          Iso639Part12LanguageCode = 9
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AKA         Iso639Part12LanguageCode = 10
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AM          Iso639Part12LanguageCode = 11
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AMH         Iso639Part12LanguageCode = 12
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AN          Iso639Part12LanguageCode = 13
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARG         Iso639Part12LanguageCode = 14
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AR          Iso639Part12LanguageCode = 15
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARA         Iso639Part12LanguageCode = 16
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AS          Iso639Part12LanguageCode = 17
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ASM         Iso639Part12LanguageCode = 18
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AV          Iso639Part12LanguageCode = 19
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AVA         Iso639Part12LanguageCode = 20
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AY          Iso639Part12LanguageCode = 21
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AYM         Iso639Part12LanguageCode = 22
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AZ          Iso639Part12LanguageCode = 23
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AZE         Iso639Part12LanguageCode = 24
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BA          Iso639Part12LanguageCode = 25
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAK         Iso639Part12LanguageCode = 26
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BE          Iso639Part12LanguageCode = 27
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BEL         Iso639Part12LanguageCode = 28
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BG          Iso639Part12LanguageCode = 29
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BUL         Iso639Part12LanguageCode = 30
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BH          Iso639Part12LanguageCode = 31
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BIH         Iso639Part12LanguageCode = 32
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BI          Iso639Part12LanguageCode = 33
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BIS         Iso639Part12LanguageCode = 34
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BM          Iso639Part12LanguageCode = 35
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAM         Iso639Part12LanguageCode = 36
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BN          Iso639Part12LanguageCode = 37
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BEN         Iso639Part12LanguageCode = 38
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BO          Iso639Part12LanguageCode = 39
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BOD         Iso639Part12LanguageCode = 40
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BR          Iso639Part12LanguageCode = 41
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BRE         Iso639Part12LanguageCode = 42
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BS          Iso639Part12LanguageCode = 43
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BOS         Iso639Part12LanguageCode = 44
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CA          Iso639Part12LanguageCode = 45
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CAT         Iso639Part12LanguageCode = 46
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CE          Iso639Part12LanguageCode = 47
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHE         Iso639Part12LanguageCode = 48
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CH          Iso639Part12LanguageCode = 49
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHA         Iso639Part12LanguageCode = 50
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CO          Iso639Part12LanguageCode = 51
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_COS         Iso639Part12LanguageCode = 52
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CR          Iso639Part12LanguageCode = 53
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CRE         Iso639Part12LanguageCode = 54
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CS          Iso639Part12LanguageCode = 55
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CES         Iso639Part12LanguageCode = 56
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CU          Iso639Part12LanguageCode = 57
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHU         Iso639Part12LanguageCode = 58
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CV          Iso639Part12LanguageCode = 59
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHV         Iso639Part12LanguageCode = 60
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CY          Iso639Part12LanguageCode = 61
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CYM         Iso639Part12LanguageCode = 62
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DA          Iso639Part12LanguageCode = 63
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DAN         Iso639Part12LanguageCode = 64
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DE          Iso639Part12LanguageCode = 65
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DEU         Iso639Part12LanguageCode = 66
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DV          Iso639Part12LanguageCode = 67
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DIV         Iso639Part12LanguageCode = 68
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DZ          Iso639Part12LanguageCode = 69
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DZO         Iso639Part12LanguageCode = 70
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EE          Iso639Part12LanguageCode = 71
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EWE         Iso639Part12LanguageCode = 72
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EL          Iso639Part12LanguageCode = 73
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ELL         Iso639Part12LanguageCode = 74
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EN          Iso639Part12LanguageCode = 75
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ENG         Iso639Part12LanguageCode = 76
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EO          Iso639Part12LanguageCode = 77
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EPO         Iso639Part12LanguageCode = 78
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ES          Iso639Part12LanguageCode = 79
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SPA         Iso639Part12LanguageCode = 80
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ET          Iso639Part12LanguageCode = 81
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EST         Iso639Part12LanguageCode = 82
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EU          Iso639Part12LanguageCode = 83
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EUS         Iso639Part12LanguageCode = 84
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FA          Iso639Part12LanguageCode = 85
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FAS         Iso639Part12LanguageCode = 86
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FF          Iso639Part12LanguageCode = 87
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FUL         Iso639Part12LanguageCode = 88
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FI          Iso639Part12LanguageCode = 89
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FIN         Iso639Part12LanguageCode = 90
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FJ          Iso639Part12LanguageCode = 91
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FIJ         Iso639Part12LanguageCode = 92
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FO          Iso639Part12LanguageCode = 93
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FAO         Iso639Part12LanguageCode = 94
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FR          Iso639Part12LanguageCode = 95
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRA         Iso639Part12LanguageCode = 96
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FY          Iso639Part12LanguageCode = 97
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRY         Iso639Part12LanguageCode = 98
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GA          Iso639Part12LanguageCode = 99
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GLE         Iso639Part12LanguageCode = 100
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GD          Iso639Part12LanguageCode = 101
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GLA         Iso639Part12LanguageCode = 102
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GL          Iso639Part12LanguageCode = 103
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GLG         Iso639Part12LanguageCode = 104
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GN          Iso639Part12LanguageCode = 105
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GRN         Iso639Part12LanguageCode = 106
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GU          Iso639Part12LanguageCode = 107
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GUJ         Iso639Part12LanguageCode = 108
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GV          Iso639Part12LanguageCode = 109
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GLV         Iso639Part12LanguageCode = 110
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HA          Iso639Part12LanguageCode = 111
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HAU         Iso639Part12LanguageCode = 112
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HE          Iso639Part12LanguageCode = 113
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HEB         Iso639Part12LanguageCode = 114
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HI          Iso639Part12LanguageCode = 115
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HIN         Iso639Part12LanguageCode = 116
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HO          Iso639Part12LanguageCode = 117
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HMO         Iso639Part12LanguageCode = 118
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HR          Iso639Part12LanguageCode = 119
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HRV         Iso639Part12LanguageCode = 120
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HT          Iso639Part12LanguageCode = 121
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HAT         Iso639Part12LanguageCode = 122
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HU          Iso639Part12LanguageCode = 123
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HUN         Iso639Part12LanguageCode = 124
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HY          Iso639Part12LanguageCode = 125
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HYE         Iso639Part12LanguageCode = 126
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HZ          Iso639Part12LanguageCode = 127
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HER         Iso639Part12LanguageCode = 128
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IA          Iso639Part12LanguageCode = 129
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_INA         Iso639Part12LanguageCode = 130
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ID          Iso639Part12LanguageCode = 131
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IND         Iso639Part12LanguageCode = 132
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IE          Iso639Part12LanguageCode = 133
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ILE         Iso639Part12LanguageCode = 134
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IG          Iso639Part12LanguageCode = 135
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IBO         Iso639Part12LanguageCode = 136
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_II          Iso639Part12LanguageCode = 137
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_III         Iso639Part12LanguageCode = 138
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IK          Iso639Part12LanguageCode = 139
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IPK         Iso639Part12LanguageCode = 140
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IO          Iso639Part12LanguageCode = 141
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IDO         Iso639Part12LanguageCode = 142
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IS          Iso639Part12LanguageCode = 143
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ISL         Iso639Part12LanguageCode = 144
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IT          Iso639Part12LanguageCode = 145
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ITA         Iso639Part12LanguageCode = 146
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IU          Iso639Part12LanguageCode = 147
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IKU         Iso639Part12LanguageCode = 148
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JA          Iso639Part12LanguageCode = 149
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JPN         Iso639Part12LanguageCode = 150
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JV          Iso639Part12LanguageCode = 151
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JAV         Iso639Part12LanguageCode = 152
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KA          Iso639Part12LanguageCode = 153
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAT         Iso639Part12LanguageCode = 154
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KG          Iso639Part12LanguageCode = 155
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KON         Iso639Part12LanguageCode = 156
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KI          Iso639Part12LanguageCode = 157
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KIK         Iso639Part12LanguageCode = 158
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KJ          Iso639Part12LanguageCode = 159
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KUA         Iso639Part12LanguageCode = 160
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KK          Iso639Part12LanguageCode = 161
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAZ         Iso639Part12LanguageCode = 162
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KL          Iso639Part12LanguageCode = 163
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAL         Iso639Part12LanguageCode = 164
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KM          Iso639Part12LanguageCode = 165
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KHM         Iso639Part12LanguageCode = 166
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KN          Iso639Part12LanguageCode = 167
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAN         Iso639Part12LanguageCode = 168
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KO          Iso639Part12LanguageCode = 169
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KOR         Iso639Part12LanguageCode = 170
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KR          Iso639Part12LanguageCode = 171
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAU         Iso639Part12LanguageCode = 172
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KS          Iso639Part12LanguageCode = 173
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAS         Iso639Part12LanguageCode = 174
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KU          Iso639Part12LanguageCode = 175
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KUR         Iso639Part12LanguageCode = 176
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KV          Iso639Part12LanguageCode = 177
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KOM         Iso639Part12LanguageCode = 178
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KW          Iso639Part12LanguageCode = 179
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_COR         Iso639Part12LanguageCode = 180
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KY          Iso639Part12LanguageCode = 181
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KIR         Iso639Part12LanguageCode = 182
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LA          Iso639Part12LanguageCode = 183
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAT         Iso639Part12LanguageCode = 184
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LB          Iso639Part12LanguageCode = 185
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LTZ         Iso639Part12LanguageCode = 186
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LG          Iso639Part12LanguageCode = 187
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUG         Iso639Part12LanguageCode = 188
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LI          Iso639Part12LanguageCode = 189
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LIM         Iso639Part12LanguageCode = 190
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LN          Iso639Part12LanguageCode = 191
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LIN         Iso639Part12LanguageCode = 192
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LO          Iso639Part12LanguageCode = 193
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAO         Iso639Part12LanguageCode = 194
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LT          Iso639Part12LanguageCode = 195
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LIT         Iso639Part12LanguageCode = 196
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LU          Iso639Part12LanguageCode = 197
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUB         Iso639Part12LanguageCode = 198
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LV          Iso639Part12LanguageCode = 199
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAV         Iso639Part12LanguageCode = 200
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MG          Iso639Part12LanguageCode = 201
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MLG         Iso639Part12LanguageCode = 202
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MH          Iso639Part12LanguageCode = 203
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAH         Iso639Part12LanguageCode = 204
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MI          Iso639Part12LanguageCode = 205
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MRI         Iso639Part12LanguageCode = 206
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MK          Iso639Part12LanguageCode = 207
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MKD         Iso639Part12LanguageCode = 208
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ML          Iso639Part12LanguageCode = 209
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAL         Iso639Part12LanguageCode = 210
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MN          Iso639Part12LanguageCode = 211
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MON         Iso639Part12LanguageCode = 212
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MO          Iso639Part12LanguageCode = 213
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MR          Iso639Part12LanguageCode = 214
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAR         Iso639Part12LanguageCode = 215
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MS          Iso639Part12LanguageCode = 216
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MSA         Iso639Part12LanguageCode = 217
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MT          Iso639Part12LanguageCode = 218
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MLT         Iso639Part12LanguageCode = 219
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MY          Iso639Part12LanguageCode = 220
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MYA         Iso639Part12LanguageCode = 221
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NA          Iso639Part12LanguageCode = 222
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NAU         Iso639Part12LanguageCode = 223
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NB          Iso639Part12LanguageCode = 224
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NOB         Iso639Part12LanguageCode = 225
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ND          Iso639Part12LanguageCode = 226
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NDE         Iso639Part12LanguageCode = 227
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NE          Iso639Part12LanguageCode = 228
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NEP         Iso639Part12LanguageCode = 229
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NG          Iso639Part12LanguageCode = 230
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NDO         Iso639Part12LanguageCode = 231
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NL          Iso639Part12LanguageCode = 232
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NLD         Iso639Part12LanguageCode = 233
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NN          Iso639Part12LanguageCode = 234
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NNO         Iso639Part12LanguageCode = 235
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NO          Iso639Part12LanguageCode = 236
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NOR         Iso639Part12LanguageCode = 237
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NR          Iso639Part12LanguageCode = 238
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NBL         Iso639Part12LanguageCode = 239
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NV          Iso639Part12LanguageCode = 240
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NAV         Iso639Part12LanguageCode = 241
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NY          Iso639Part12LanguageCode = 242
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NYA         Iso639Part12LanguageCode = 243
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OC          Iso639Part12LanguageCode = 244
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OCI         Iso639Part12LanguageCode = 245
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OJ          Iso639Part12LanguageCode = 246
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OJI         Iso639Part12LanguageCode = 247
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OM          Iso639Part12LanguageCode = 248
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ORM         Iso639Part12LanguageCode = 249
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OR          Iso639Part12LanguageCode = 250
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ORI         Iso639Part12LanguageCode = 251
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OS          Iso639Part12LanguageCode = 252
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OSS         Iso639Part12LanguageCode = 253
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PA          Iso639Part12LanguageCode = 254
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAN         Iso639Part12LanguageCode = 255
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PI          Iso639Part12LanguageCode = 256
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PLI         Iso639Part12LanguageCode = 257
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PL          Iso639Part12LanguageCode = 258
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_POL         Iso639Part12LanguageCode = 259
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PS          Iso639Part12LanguageCode = 260
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PUS         Iso639Part12LanguageCode = 261
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PT          Iso639Part12LanguageCode = 262
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_POR         Iso639Part12LanguageCode = 263
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QU          Iso639Part12LanguageCode = 264
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QUE         Iso639Part12LanguageCode = 265
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RM          Iso639Part12LanguageCode = 266
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ROH         Iso639Part12LanguageCode = 267
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RN          Iso639Part12LanguageCode = 268
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RUN         Iso639Part12LanguageCode = 269
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RO          Iso639Part12LanguageCode = 270
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RON         Iso639Part12LanguageCode = 271
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RU          Iso639Part12LanguageCode = 272
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RUS         Iso639Part12LanguageCode = 273
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RW          Iso639Part12LanguageCode = 274
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KIN         Iso639Part12LanguageCode = 275
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SA          Iso639Part12LanguageCode = 276
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAN         Iso639Part12LanguageCode = 277
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SC          Iso639Part12LanguageCode = 278
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SRD         Iso639Part12LanguageCode = 279
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SD          Iso639Part12LanguageCode = 280
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SND         Iso639Part12LanguageCode = 281
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SE          Iso639Part12LanguageCode = 282
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SME         Iso639Part12LanguageCode = 283
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SG          Iso639Part12LanguageCode = 284
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAG         Iso639Part12LanguageCode = 285
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SI          Iso639Part12LanguageCode = 286
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SIN         Iso639Part12LanguageCode = 287
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SK          Iso639Part12LanguageCode = 288
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SLK         Iso639Part12LanguageCode = 289
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SL          Iso639Part12LanguageCode = 290
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SLV         Iso639Part12LanguageCode = 291
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SM          Iso639Part12LanguageCode = 292
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMO         Iso639Part12LanguageCode = 293
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SN          Iso639Part12LanguageCode = 294
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SNA         Iso639Part12LanguageCode = 295
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SO          Iso639Part12LanguageCode = 296
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SOM         Iso639Part12LanguageCode = 297
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SQ          Iso639Part12LanguageCode = 298
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SQI         Iso639Part12LanguageCode = 299
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SR          Iso639Part12LanguageCode = 300
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SRP         Iso639Part12LanguageCode = 301
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SS          Iso639Part12LanguageCode = 302
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SSW         Iso639Part12LanguageCode = 303
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ST          Iso639Part12LanguageCode = 304
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SOT         Iso639Part12LanguageCode = 305
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SU          Iso639Part12LanguageCode = 306
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SUN         Iso639Part12LanguageCode = 307
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SV          Iso639Part12LanguageCode = 308
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SWE         Iso639Part12LanguageCode = 309
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SW          Iso639Part12LanguageCode = 310
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SWA         Iso639Part12LanguageCode = 311
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TA          Iso639Part12LanguageCode = 312
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TAM         Iso639Part12LanguageCode = 313
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TE          Iso639Part12LanguageCode = 314
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TEL         Iso639Part12LanguageCode = 315
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TG          Iso639Part12LanguageCode = 316
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TGK         Iso639Part12LanguageCode = 317
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TH          Iso639Part12LanguageCode = 318
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_THA         Iso639Part12LanguageCode = 319
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TI          Iso639Part12LanguageCode = 320
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TIR         Iso639Part12LanguageCode = 321
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TK          Iso639Part12LanguageCode = 322
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TUK         Iso639Part12LanguageCode = 323
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TL          Iso639Part12LanguageCode = 324
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TGL         Iso639Part12LanguageCode = 325
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TN          Iso639Part12LanguageCode = 326
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TSN         Iso639Part12LanguageCode = 327
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TO          Iso639Part12LanguageCode = 328
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TON         Iso639Part12LanguageCode = 329
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TR          Iso639Part12LanguageCode = 330
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TUR         Iso639Part12LanguageCode = 331
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TS          Iso639Part12LanguageCode = 332
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TSO         Iso639Part12LanguageCode = 333
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TT          Iso639Part12LanguageCode = 334
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TAT         Iso639Part12LanguageCode = 335
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TW          Iso639Part12LanguageCode = 336
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TWI         Iso639Part12LanguageCode = 337
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TY          Iso639Part12LanguageCode = 338
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TAH         Iso639Part12LanguageCode = 339
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UG          Iso639Part12LanguageCode = 340
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UIG         Iso639Part12LanguageCode = 341
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UK          Iso639Part12LanguageCode = 342
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UKR         Iso639Part12LanguageCode = 343
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UR          Iso639Part12LanguageCode = 344
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_URD         Iso639Part12LanguageCode = 345
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UZ          Iso639Part12LanguageCode = 346
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UZB         Iso639Part12LanguageCode = 347
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VE          Iso639Part12LanguageCode = 348
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VEN         Iso639Part12LanguageCode = 349
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VI          Iso639Part12LanguageCode = 350
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VIE         Iso639Part12LanguageCode = 351
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VO          Iso639Part12LanguageCode = 352
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VOL         Iso639Part12LanguageCode = 353
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WA          Iso639Part12LanguageCode = 354
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WLN         Iso639Part12LanguageCode = 355
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WO          Iso639Part12LanguageCode = 356
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WOL         Iso639Part12LanguageCode = 357
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_XH          Iso639Part12LanguageCode = 358
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_XHO         Iso639Part12LanguageCode = 359
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YI          Iso639Part12LanguageCode = 360
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YID         Iso639Part12LanguageCode = 361
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YO          Iso639Part12LanguageCode = 362
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YOR         Iso639Part12LanguageCode = 363
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZA          Iso639Part12LanguageCode = 364
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZHA         Iso639Part12LanguageCode = 365
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZH          Iso639Part12LanguageCode = 366
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZHO         Iso639Part12LanguageCode = 367
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZU          Iso639Part12LanguageCode = 368
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZUL         Iso639Part12LanguageCode = 369
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ACE         Iso639Part12LanguageCode = 370
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ACH         Iso639Part12LanguageCode = 371
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ADA         Iso639Part12LanguageCode = 372
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ADY         Iso639Part12LanguageCode = 373
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AFA         Iso639Part12LanguageCode = 374
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AFH         Iso639Part12LanguageCode = 375
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AIN         Iso639Part12LanguageCode = 376
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AKK         Iso639Part12LanguageCode = 377
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ALE         Iso639Part12LanguageCode = 378
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ALG         Iso639Part12LanguageCode = 379
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ALT         Iso639Part12LanguageCode = 380
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ANG         Iso639Part12LanguageCode = 381
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ANP         Iso639Part12LanguageCode = 382
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_APA         Iso639Part12LanguageCode = 383
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARC         Iso639Part12LanguageCode = 384
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARN         Iso639Part12LanguageCode = 385
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARP         Iso639Part12LanguageCode = 386
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ART         Iso639Part12LanguageCode = 387
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ARW         Iso639Part12LanguageCode = 388
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AST         Iso639Part12LanguageCode = 389
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ATH         Iso639Part12LanguageCode = 390
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AUS         Iso639Part12LanguageCode = 391
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_AWA         Iso639Part12LanguageCode = 392
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAD         Iso639Part12LanguageCode = 393
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAI         Iso639Part12LanguageCode = 394
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAL         Iso639Part12LanguageCode = 395
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAN         Iso639Part12LanguageCode = 396
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAS         Iso639Part12LanguageCode = 397
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BAT         Iso639Part12LanguageCode = 398
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BEJ         Iso639Part12LanguageCode = 399
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BEM         Iso639Part12LanguageCode = 400
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BER         Iso639Part12LanguageCode = 401
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BGC         Iso639Part12LanguageCode = 402
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BHO         Iso639Part12LanguageCode = 403
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BIK         Iso639Part12LanguageCode = 404
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BIN         Iso639Part12LanguageCode = 405
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BLA         Iso639Part12LanguageCode = 406
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BNT         Iso639Part12LanguageCode = 407
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BRA         Iso639Part12LanguageCode = 408
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BTK         Iso639Part12LanguageCode = 409
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BUA         Iso639Part12LanguageCode = 410
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BUG         Iso639Part12LanguageCode = 411
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_BYN         Iso639Part12LanguageCode = 412
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CAD         Iso639Part12LanguageCode = 413
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CAI         Iso639Part12LanguageCode = 414
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CAR         Iso639Part12LanguageCode = 415
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CAU         Iso639Part12LanguageCode = 416
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CEB         Iso639Part12LanguageCode = 417
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CEL         Iso639Part12LanguageCode = 418
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHB         Iso639Part12LanguageCode = 419
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHG         Iso639Part12LanguageCode = 420
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHK         Iso639Part12LanguageCode = 421
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHM         Iso639Part12LanguageCode = 422
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHN         Iso639Part12LanguageCode = 423
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHO         Iso639Part12LanguageCode = 424
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHP         Iso639Part12LanguageCode = 425
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHR         Iso639Part12LanguageCode = 426
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CHY         Iso639Part12LanguageCode = 427
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CMC         Iso639Part12LanguageCode = 428
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CNR         Iso639Part12LanguageCode = 429
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_COP         Iso639Part12LanguageCode = 430
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CPE         Iso639Part12LanguageCode = 431
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CPF         Iso639Part12LanguageCode = 432
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CPP         Iso639Part12LanguageCode = 433
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CRH         Iso639Part12LanguageCode = 434
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CRP         Iso639Part12LanguageCode = 435
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CSB         Iso639Part12LanguageCode = 436
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_CUS         Iso639Part12LanguageCode = 437
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DAK         Iso639Part12LanguageCode = 438
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DAR         Iso639Part12LanguageCode = 439
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DAY         Iso639Part12LanguageCode = 440
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DEL         Iso639Part12LanguageCode = 441
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DEN         Iso639Part12LanguageCode = 442
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DGR         Iso639Part12LanguageCode = 443
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DIN         Iso639Part12LanguageCode = 444
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DOI         Iso639Part12LanguageCode = 445
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DRA         Iso639Part12LanguageCode = 446
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DSB         Iso639Part12LanguageCode = 447
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DUA         Iso639Part12LanguageCode = 448
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DUM         Iso639Part12LanguageCode = 449
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_DYU         Iso639Part12LanguageCode = 450
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EFI         Iso639Part12LanguageCode = 451
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EGY         Iso639Part12LanguageCode = 452
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EKA         Iso639Part12LanguageCode = 453
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ELX         Iso639Part12LanguageCode = 454
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ENM         Iso639Part12LanguageCode = 455
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_EWO         Iso639Part12LanguageCode = 456
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FAN         Iso639Part12LanguageCode = 457
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FAT         Iso639Part12LanguageCode = 458
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FIL         Iso639Part12LanguageCode = 459
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FIU         Iso639Part12LanguageCode = 460
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FON         Iso639Part12LanguageCode = 461
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRM         Iso639Part12LanguageCode = 462
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRO         Iso639Part12LanguageCode = 463
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRR         Iso639Part12LanguageCode = 464
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FRS         Iso639Part12LanguageCode = 465
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_FUR         Iso639Part12LanguageCode = 466
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GAA         Iso639Part12LanguageCode = 467
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GAY         Iso639Part12LanguageCode = 468
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GBA         Iso639Part12LanguageCode = 469
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GEM         Iso639Part12LanguageCode = 470
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GEZ         Iso639Part12LanguageCode = 471
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GIL         Iso639Part12LanguageCode = 472
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GMH         Iso639Part12LanguageCode = 473
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GOH         Iso639Part12LanguageCode = 474
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GON         Iso639Part12LanguageCode = 475
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GOR         Iso639Part12LanguageCode = 476
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GOT         Iso639Part12LanguageCode = 477
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GRB         Iso639Part12LanguageCode = 478
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GRC         Iso639Part12LanguageCode = 479
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GSW         Iso639Part12LanguageCode = 480
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_GWI         Iso639Part12LanguageCode = 481
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HAI         Iso639Part12LanguageCode = 482
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HAW         Iso639Part12LanguageCode = 483
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HIL         Iso639Part12LanguageCode = 484
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HIM         Iso639Part12LanguageCode = 485
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HIT         Iso639Part12LanguageCode = 486
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HMN         Iso639Part12LanguageCode = 487
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HSB         Iso639Part12LanguageCode = 488
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_HUP         Iso639Part12LanguageCode = 489
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IBA         Iso639Part12LanguageCode = 490
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IJO         Iso639Part12LanguageCode = 491
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ILO         Iso639Part12LanguageCode = 492
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_INC         Iso639Part12LanguageCode = 493
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_INE         Iso639Part12LanguageCode = 494
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_INH         Iso639Part12LanguageCode = 495
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IRA         Iso639Part12LanguageCode = 496
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_IRO         Iso639Part12LanguageCode = 497
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JBO         Iso639Part12LanguageCode = 498
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JPR         Iso639Part12LanguageCode = 499
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_JRB         Iso639Part12LanguageCode = 500
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAA         Iso639Part12LanguageCode = 501
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAB         Iso639Part12LanguageCode = 502
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAC         Iso639Part12LanguageCode = 503
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAM         Iso639Part12LanguageCode = 504
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAR         Iso639Part12LanguageCode = 505
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KAW         Iso639Part12LanguageCode = 506
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KBD         Iso639Part12LanguageCode = 507
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KHA         Iso639Part12LanguageCode = 508
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KHI         Iso639Part12LanguageCode = 509
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KHO         Iso639Part12LanguageCode = 510
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KMB         Iso639Part12LanguageCode = 511
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KOK         Iso639Part12LanguageCode = 512
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KOS         Iso639Part12LanguageCode = 513
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KPE         Iso639Part12LanguageCode = 514
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KRC         Iso639Part12LanguageCode = 515
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KRL         Iso639Part12LanguageCode = 516
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KRO         Iso639Part12LanguageCode = 517
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KRU         Iso639Part12LanguageCode = 518
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KUM         Iso639Part12LanguageCode = 519
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_KUT         Iso639Part12LanguageCode = 520
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAD         Iso639Part12LanguageCode = 521
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAH         Iso639Part12LanguageCode = 522
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LAM         Iso639Part12LanguageCode = 523
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LEZ         Iso639Part12LanguageCode = 524
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LOL         Iso639Part12LanguageCode = 525
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LOZ         Iso639Part12LanguageCode = 526
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUA         Iso639Part12LanguageCode = 527
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUI         Iso639Part12LanguageCode = 528
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUN         Iso639Part12LanguageCode = 529
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUO         Iso639Part12LanguageCode = 530
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_LUS         Iso639Part12LanguageCode = 531
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAD         Iso639Part12LanguageCode = 532
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAG         Iso639Part12LanguageCode = 533
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAI         Iso639Part12LanguageCode = 534
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAK         Iso639Part12LanguageCode = 535
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAN         Iso639Part12LanguageCode = 536
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAP         Iso639Part12LanguageCode = 537
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MAS         Iso639Part12LanguageCode = 538
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MDF         Iso639Part12LanguageCode = 539
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MDR         Iso639Part12LanguageCode = 540
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MEN         Iso639Part12LanguageCode = 541
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MGA         Iso639Part12LanguageCode = 542
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MIC         Iso639Part12LanguageCode = 543
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MIN         Iso639Part12LanguageCode = 544
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MIS         Iso639Part12LanguageCode = 545
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MKH         Iso639Part12LanguageCode = 546
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MNC         Iso639Part12LanguageCode = 547
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MNI         Iso639Part12LanguageCode = 548
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MNO         Iso639Part12LanguageCode = 549
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MOH         Iso639Part12LanguageCode = 550
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MOS         Iso639Part12LanguageCode = 551
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MUL         Iso639Part12LanguageCode = 552
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MUN         Iso639Part12LanguageCode = 553
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MUS         Iso639Part12LanguageCode = 554
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MWL         Iso639Part12LanguageCode = 555
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MWR         Iso639Part12LanguageCode = 556
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MYN         Iso639Part12LanguageCode = 557
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_MYV         Iso639Part12LanguageCode = 558
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NAH         Iso639Part12LanguageCode = 559
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NAI         Iso639Part12LanguageCode = 560
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NAP         Iso639Part12LanguageCode = 561
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NDS         Iso639Part12LanguageCode = 562
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NEW         Iso639Part12LanguageCode = 563
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NIA         Iso639Part12LanguageCode = 564
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NIC         Iso639Part12LanguageCode = 565
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NIU         Iso639Part12LanguageCode = 566
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NOG         Iso639Part12LanguageCode = 567
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NON         Iso639Part12LanguageCode = 568
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NQO         Iso639Part12LanguageCode = 569
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NSO         Iso639Part12LanguageCode = 570
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NUB         Iso639Part12LanguageCode = 571
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NWC         Iso639Part12LanguageCode = 572
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NYM         Iso639Part12LanguageCode = 573
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NYN         Iso639Part12LanguageCode = 574
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NYO         Iso639Part12LanguageCode = 575
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_NZI         Iso639Part12LanguageCode = 576
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OSA         Iso639Part12LanguageCode = 577
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OTA         Iso639Part12LanguageCode = 578
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_OTO         Iso639Part12LanguageCode = 579
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAA         Iso639Part12LanguageCode = 580
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAG         Iso639Part12LanguageCode = 581
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAL         Iso639Part12LanguageCode = 582
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAM         Iso639Part12LanguageCode = 583
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAP         Iso639Part12LanguageCode = 584
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PAU         Iso639Part12LanguageCode = 585
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PEO         Iso639Part12LanguageCode = 586
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PHI         Iso639Part12LanguageCode = 587
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PHN         Iso639Part12LanguageCode = 588
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PON         Iso639Part12LanguageCode = 589
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PRA         Iso639Part12LanguageCode = 590
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_PRO         Iso639Part12LanguageCode = 591
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQA         Iso639Part12LanguageCode = 592
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQB         Iso639Part12LanguageCode = 593
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQC         Iso639Part12LanguageCode = 594
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQD         Iso639Part12LanguageCode = 595
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQE         Iso639Part12LanguageCode = 596
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQF         Iso639Part12LanguageCode = 597
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQG         Iso639Part12LanguageCode = 598
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQH         Iso639Part12LanguageCode = 599
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQI         Iso639Part12LanguageCode = 600
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_QQJ         Iso639Part12LanguageCode = 601
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RAJ         Iso639Part12LanguageCode = 602
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RAP         Iso639Part12LanguageCode = 603
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RAR         Iso639Part12LanguageCode = 604
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ROA         Iso639Part12LanguageCode = 605
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ROM         Iso639Part12LanguageCode = 606
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_RUP         Iso639Part12LanguageCode = 607
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAD         Iso639Part12LanguageCode = 608
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAH         Iso639Part12LanguageCode = 609
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAI         Iso639Part12LanguageCode = 610
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAL         Iso639Part12LanguageCode = 611
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAM         Iso639Part12LanguageCode = 612
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAS         Iso639Part12LanguageCode = 613
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SAT         Iso639Part12LanguageCode = 614
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SCN         Iso639Part12LanguageCode = 615
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SCO         Iso639Part12LanguageCode = 616
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SEL         Iso639Part12LanguageCode = 617
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SEM         Iso639Part12LanguageCode = 618
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SGA         Iso639Part12LanguageCode = 619
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SGN         Iso639Part12LanguageCode = 620
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SHN         Iso639Part12LanguageCode = 621
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SID         Iso639Part12LanguageCode = 622
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SIO         Iso639Part12LanguageCode = 623
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SIT         Iso639Part12LanguageCode = 624
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SLA         Iso639Part12LanguageCode = 625
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMA         Iso639Part12LanguageCode = 626
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMI         Iso639Part12LanguageCode = 627
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMJ         Iso639Part12LanguageCode = 628
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMN         Iso639Part12LanguageCode = 629
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SMS         Iso639Part12LanguageCode = 630
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SNK         Iso639Part12LanguageCode = 631
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SOG         Iso639Part12LanguageCode = 632
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SON         Iso639Part12LanguageCode = 633
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SRN         Iso639Part12LanguageCode = 634
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SRR         Iso639Part12LanguageCode = 635
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SSA         Iso639Part12LanguageCode = 636
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SUK         Iso639Part12LanguageCode = 637
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SUS         Iso639Part12LanguageCode = 638
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SUX         Iso639Part12LanguageCode = 639
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SYC         Iso639Part12LanguageCode = 640
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_SYR         Iso639Part12LanguageCode = 641
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TAI         Iso639Part12LanguageCode = 642
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TEM         Iso639Part12LanguageCode = 643
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TER         Iso639Part12LanguageCode = 644
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TET         Iso639Part12LanguageCode = 645
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TIG         Iso639Part12LanguageCode = 646
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TIV         Iso639Part12LanguageCode = 647
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TKL         Iso639Part12LanguageCode = 648
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TLH         Iso639Part12LanguageCode = 649
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TLI         Iso639Part12LanguageCode = 650
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TMH         Iso639Part12LanguageCode = 651
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TOG         Iso639Part12LanguageCode = 652
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TPI         Iso639Part12LanguageCode = 653
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TSI         Iso639Part12LanguageCode = 654
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TUM         Iso639Part12LanguageCode = 655
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TUP         Iso639Part12LanguageCode = 656
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TUT         Iso639Part12LanguageCode = 657
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TVL         Iso639Part12LanguageCode = 658
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_TYV         Iso639Part12LanguageCode = 659
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UDM         Iso639Part12LanguageCode = 660
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UGA         Iso639Part12LanguageCode = 661
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UMB         Iso639Part12LanguageCode = 662
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_UND         Iso639Part12LanguageCode = 663
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VAI         Iso639Part12LanguageCode = 664
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_VOT         Iso639Part12LanguageCode = 665
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WAK         Iso639Part12LanguageCode = 666
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WAL         Iso639Part12LanguageCode = 667
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WAR         Iso639Part12LanguageCode = 668
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WAS         Iso639Part12LanguageCode = 669
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_WEN         Iso639Part12LanguageCode = 670
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_XAL         Iso639Part12LanguageCode = 671
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YAO         Iso639Part12LanguageCode = 672
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YAP         Iso639Part12LanguageCode = 673
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_YPK         Iso639Part12LanguageCode = 674
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZAP         Iso639Part12LanguageCode = 675
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZBL         Iso639Part12LanguageCode = 676
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZEN         Iso639Part12LanguageCode = 677
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZGH         Iso639Part12LanguageCode = 678
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZND         Iso639Part12LanguageCode = 679
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZUN         Iso639Part12LanguageCode = 680
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZXX         Iso639Part12LanguageCode = 681
	Iso639Part12LanguageCode_ISO639_PART12_LANGUAGE_CODE_ZZA         Iso639Part12LanguageCode = 682
)

// Enum value maps for Iso639Part12LanguageCode.
var (
	Iso639Part12LanguageCode_name = map[int32]string{
		0:   "ISO639_PART12_LANGUAGE_CODE_UNSPECIFIED",
		1:   "ISO639_PART12_LANGUAGE_CODE_AA",
		2:   "ISO639_PART12_LANGUAGE_CODE_AAR",
		3:   "ISO639_PART12_LANGUAGE_CODE_AB",
		4:   "ISO639_PART12_LANGUAGE_CODE_ABK",
		5:   "ISO639_PART12_LANGUAGE_CODE_AE",
		6:   "ISO639_PART12_LANGUAGE_CODE_AVE",
		7:   "ISO639_PART12_LANGUAGE_CODE_AF",
		8:   "ISO639_PART12_LANGUAGE_CODE_AFR",
		9:   "ISO639_PART12_LANGUAGE_CODE_AK",
		10:  "ISO639_PART12_LANGUAGE_CODE_AKA",
		11:  "ISO639_PART12_LANGUAGE_CODE_AM",
		12:  "ISO639_PART12_LANGUAGE_CODE_AMH",
		13:  "ISO639_PART12_LANGUAGE_CODE_AN",
		14:  "ISO639_PART12_LANGUAGE_CODE_ARG",
		15:  "ISO639_PART12_LANGUAGE_CODE_AR",
		16:  "ISO639_PART12_LANGUAGE_CODE_ARA",
		17:  "ISO639_PART12_LANGUAGE_CODE_AS",
		18:  "ISO639_PART12_LANGUAGE_CODE_ASM",
		19:  "ISO639_PART12_LANGUAGE_CODE_AV",
		20:  "ISO639_PART12_LANGUAGE_CODE_AVA",
		21:  "ISO639_PART12_LANGUAGE_CODE_AY",
		22:  "ISO639_PART12_LANGUAGE_CODE_AYM",
		23:  "ISO639_PART12_LANGUAGE_CODE_AZ",
		24:  "ISO639_PART12_LANGUAGE_CODE_AZE",
		25:  "ISO639_PART12_LANGUAGE_CODE_BA",
		26:  "ISO639_PART12_LANGUAGE_CODE_BAK",
		27:  "ISO639_PART12_LANGUAGE_CODE_BE",
		28:  "ISO639_PART12_LANGUAGE_CODE_BEL",
		29:  "ISO639_PART12_LANGUAGE_CODE_BG",
		30:  "ISO639_PART12_LANGUAGE_CODE_BUL",
		31:  "ISO639_PART12_LANGUAGE_CODE_BH",
		32:  "ISO639_PART12_LANGUAGE_CODE_BIH",
		33:  "ISO639_PART12_LANGUAGE_CODE_BI",
		34:  "ISO639_PART12_LANGUAGE_CODE_BIS",
		35:  "ISO639_PART12_LANGUAGE_CODE_BM",
		36:  "ISO639_PART12_LANGUAGE_CODE_BAM",
		37:  "ISO639_PART12_LANGUAGE_CODE_BN",
		38:  "ISO639_PART12_LANGUAGE_CODE_BEN",
		39:  "ISO639_PART12_LANGUAGE_CODE_BO",
		40:  "ISO639_PART12_LANGUAGE_CODE_BOD",
		41:  "ISO639_PART12_LANGUAGE_CODE_BR",
		42:  "ISO639_PART12_LANGUAGE_CODE_BRE",
		43:  "ISO639_PART12_LANGUAGE_CODE_BS",
		44:  "ISO639_PART12_LANGUAGE_CODE_BOS",
		45:  "ISO639_PART12_LANGUAGE_CODE_CA",
		46:  "ISO639_PART12_LANGUAGE_CODE_CAT",
		47:  "ISO639_PART12_LANGUAGE_CODE_CE",
		48:  "ISO639_PART12_LANGUAGE_CODE_CHE",
		49:  "ISO639_PART12_LANGUAGE_CODE_CH",
		50:  "ISO639_PART12_LANGUAGE_CODE_CHA",
		51:  "ISO639_PART12_LANGUAGE_CODE_CO",
		52:  "ISO639_PART12_LANGUAGE_CODE_COS",
		53:  "ISO639_PART12_LANGUAGE_CODE_CR",
		54:  "ISO639_PART12_LANGUAGE_CODE_CRE",
		55:  "ISO639_PART12_LANGUAGE_CODE_CS",
		56:  "ISO639_PART12_LANGUAGE_CODE_CES",
		57:  "ISO639_PART12_LANGUAGE_CODE_CU",
		58:  "ISO639_PART12_LANGUAGE_CODE_CHU",
		59:  "ISO639_PART12_LANGUAGE_CODE_CV",
		60:  "ISO639_PART12_LANGUAGE_CODE_CHV",
		61:  "ISO639_PART12_LANGUAGE_CODE_CY",
		62:  "ISO639_PART12_LANGUAGE_CODE_CYM",
		63:  "ISO639_PART12_LANGUAGE_CODE_DA",
		64:  "ISO639_PART12_LANGUAGE_CODE_DAN",
		65:  "ISO639_PART12_LANGUAGE_CODE_DE",
		66:  "ISO639_PART12_LANGUAGE_CODE_DEU",
		67:  "ISO639_PART12_LANGUAGE_CODE_DV",
		68:  "ISO639_PART12_LANGUAGE_CODE_DIV",
		69:  "ISO639_PART12_LANGUAGE_CODE_DZ",
		70:  "ISO639_PART12_LANGUAGE_CODE_DZO",
		71:  "ISO639_PART12_LANGUAGE_CODE_EE",
		72:  "ISO639_PART12_LANGUAGE_CODE_EWE",
		73:  "ISO639_PART12_LANGUAGE_CODE_EL",
		74:  "ISO639_PART12_LANGUAGE_CODE_ELL",
		75:  "ISO639_PART12_LANGUAGE_CODE_EN",
		76:  "ISO639_PART12_LANGUAGE_CODE_ENG",
		77:  "ISO639_PART12_LANGUAGE_CODE_EO",
		78:  "ISO639_PART12_LANGUAGE_CODE_EPO",
		79:  "ISO639_PART12_LANGUAGE_CODE_ES",
		80:  "ISO639_PART12_LANGUAGE_CODE_SPA",
		81:  "ISO639_PART12_LANGUAGE_CODE_ET",
		82:  "ISO639_PART12_LANGUAGE_CODE_EST",
		83:  "ISO639_PART12_LANGUAGE_CODE_EU",
		84:  "ISO639_PART12_LANGUAGE_CODE_EUS",
		85:  "ISO639_PART12_LANGUAGE_CODE_FA",
		86:  "ISO639_PART12_LANGUAGE_CODE_FAS",
		87:  "ISO639_PART12_LANGUAGE_CODE_FF",
		88:  "ISO639_PART12_LANGUAGE_CODE_FUL",
		89:  "ISO639_PART12_LANGUAGE_CODE_FI",
		90:  "ISO639_PART12_LANGUAGE_CODE_FIN",
		91:  "ISO639_PART12_LANGUAGE_CODE_FJ",
		92:  "ISO639_PART12_LANGUAGE_CODE_FIJ",
		93:  "ISO639_PART12_LANGUAGE_CODE_FO",
		94:  "ISO639_PART12_LANGUAGE_CODE_FAO",
		95:  "ISO639_PART12_LANGUAGE_CODE_FR",
		96:  "ISO639_PART12_LANGUAGE_CODE_FRA",
		97:  "ISO639_PART12_LANGUAGE_CODE_FY",
		98:  "ISO639_PART12_LANGUAGE_CODE_FRY",
		99:  "ISO639_PART12_LANGUAGE_CODE_GA",
		100: "ISO639_PART12_LANGUAGE_CODE_GLE",
		101: "ISO639_PART12_LANGUAGE_CODE_GD",
		102: "ISO639_PART12_LANGUAGE_CODE_GLA",
		103: "ISO639_PART12_LANGUAGE_CODE_GL",
		104: "ISO639_PART12_LANGUAGE_CODE_GLG",
		105: "ISO639_PART12_LANGUAGE_CODE_GN",
		106: "ISO639_PART12_LANGUAGE_CODE_GRN",
		107: "ISO639_PART12_LANGUAGE_CODE_GU",
		108: "ISO639_PART12_LANGUAGE_CODE_GUJ",
		109: "ISO639_PART12_LANGUAGE_CODE_GV",
		110: "ISO639_PART12_LANGUAGE_CODE_GLV",
		111: "ISO639_PART12_LANGUAGE_CODE_HA",
		112: "ISO639_PART12_LANGUAGE_CODE_HAU",
		113: "ISO639_PART12_LANGUAGE_CODE_HE",
		114: "ISO639_PART12_LANGUAGE_CODE_HEB",
		115: "ISO639_PART12_LANGUAGE_CODE_HI",
		116: "ISO639_PART12_LANGUAGE_CODE_HIN",
		117: "ISO639_PART12_LANGUAGE_CODE_HO",
		118: "ISO639_PART12_LANGUAGE_CODE_HMO",
		119: "ISO639_PART12_LANGUAGE_CODE_HR",
		120: "ISO639_PART12_LANGUAGE_CODE_HRV",
		121: "ISO639_PART12_LANGUAGE_CODE_HT",
		122: "ISO639_PART12_LANGUAGE_CODE_HAT",
		123: "ISO639_PART12_LANGUAGE_CODE_HU",
		124: "ISO639_PART12_LANGUAGE_CODE_HUN",
		125: "ISO639_PART12_LANGUAGE_CODE_HY",
		126: "ISO639_PART12_LANGUAGE_CODE_HYE",
		127: "ISO639_PART12_LANGUAGE_CODE_HZ",
		128: "ISO639_PART12_LANGUAGE_CODE_HER",
		129: "ISO639_PART12_LANGUAGE_CODE_IA",
		130: "ISO639_PART12_LANGUAGE_CODE_INA",
		131: "ISO639_PART12_LANGUAGE_CODE_ID",
		132: "ISO639_PART12_LANGUAGE_CODE_IND",
		133: "ISO639_PART12_LANGUAGE_CODE_IE",
		134: "ISO639_PART12_LANGUAGE_CODE_ILE",
		135: "ISO639_PART12_LANGUAGE_CODE_IG",
		136: "ISO639_PART12_LANGUAGE_CODE_IBO",
		137: "ISO639_PART12_LANGUAGE_CODE_II",
		138: "ISO639_PART12_LANGUAGE_CODE_III",
		139: "ISO639_PART12_LANGUAGE_CODE_IK",
		140: "ISO639_PART12_LANGUAGE_CODE_IPK",
		141: "ISO639_PART12_LANGUAGE_CODE_IO",
		142: "ISO639_PART12_LANGUAGE_CODE_IDO",
		143: "ISO639_PART12_LANGUAGE_CODE_IS",
		144: "ISO639_PART12_LANGUAGE_CODE_ISL",
		145: "ISO639_PART12_LANGUAGE_CODE_IT",
		146: "ISO639_PART12_LANGUAGE_CODE_ITA",
		147: "ISO639_PART12_LANGUAGE_CODE_IU",
		148: "ISO639_PART12_LANGUAGE_CODE_IKU",
		149: "ISO639_PART12_LANGUAGE_CODE_JA",
		150: "ISO639_PART12_LANGUAGE_CODE_JPN",
		151: "ISO639_PART12_LANGUAGE_CODE_JV",
		152: "ISO639_PART12_LANGUAGE_CODE_JAV",
		153: "ISO639_PART12_LANGUAGE_CODE_KA",
		154: "ISO639_PART12_LANGUAGE_CODE_KAT",
		155: "ISO639_PART12_LANGUAGE_CODE_KG",
		156: "ISO639_PART12_LANGUAGE_CODE_KON",
		157: "ISO639_PART12_LANGUAGE_CODE_KI",
		158: "ISO639_PART12_LANGUAGE_CODE_KIK",
		159: "ISO639_PART12_LANGUAGE_CODE_KJ",
		160: "ISO639_PART12_LANGUAGE_CODE_KUA",
		161: "ISO639_PART12_LANGUAGE_CODE_KK",
		162: "ISO639_PART12_LANGUAGE_CODE_KAZ",
		163: "ISO639_PART12_LANGUAGE_CODE_KL",
		164: "ISO639_PART12_LANGUAGE_CODE_KAL",
		165: "ISO639_PART12_LANGUAGE_CODE_KM",
		166: "ISO639_PART12_LANGUAGE_CODE_KHM",
		167: "ISO639_PART12_LANGUAGE_CODE_KN",
		168: "ISO639_PART12_LANGUAGE_CODE_KAN",
		169: "ISO639_PART12_LANGUAGE_CODE_KO",
		170: "ISO639_PART12_LANGUAGE_CODE_KOR",
		171: "ISO639_PART12_LANGUAGE_CODE_KR",
		172: "ISO639_PART12_LANGUAGE_CODE_KAU",
		173: "ISO639_PART12_LANGUAGE_CODE_KS",
		174: "ISO639_PART12_LANGUAGE_CODE_KAS",
		175: "ISO639_PART12_LANGUAGE_CODE_KU",
		176: "ISO639_PART12_LANGUAGE_CODE_KUR",
		177: "ISO639_PART12_LANGUAGE_CODE_KV",
		178: "ISO639_PART12_LANGUAGE_CODE_KOM",
		179: "ISO639_PART12_LANGUAGE_CODE_KW",
		180: "ISO639_PART12_LANGUAGE_CODE_COR",
		181: "ISO639_PART12_LANGUAGE_CODE_KY",
		182: "ISO639_PART12_LANGUAGE_CODE_KIR",
		183: "ISO639_PART12_LANGUAGE_CODE_LA",
		184: "ISO639_PART12_LANGUAGE_CODE_LAT",
		185: "ISO639_PART12_LANGUAGE_CODE_LB",
		186: "ISO639_PART12_LANGUAGE_CODE_LTZ",
		187: "ISO639_PART12_LANGUAGE_CODE_LG",
		188: "ISO639_PART12_LANGUAGE_CODE_LUG",
		189: "ISO639_PART12_LANGUAGE_CODE_LI",
		190: "ISO639_PART12_LANGUAGE_CODE_LIM",
		191: "ISO639_PART12_LANGUAGE_CODE_LN",
		192: "ISO639_PART12_LANGUAGE_CODE_LIN",
		193: "ISO639_PART12_LANGUAGE_CODE_LO",
		194: "ISO639_PART12_LANGUAGE_CODE_LAO",
		195: "ISO639_PART12_LANGUAGE_CODE_LT",
		196: "ISO639_PART12_LANGUAGE_CODE_LIT",
		197: "ISO639_PART12_LANGUAGE_CODE_LU",
		198: "ISO639_PART12_LANGUAGE_CODE_LUB",
		199: "ISO639_PART12_LANGUAGE_CODE_LV",
		200: "ISO639_PART12_LANGUAGE_CODE_LAV",
		201: "ISO639_PART12_LANGUAGE_CODE_MG",
		202: "ISO639_PART12_LANGUAGE_CODE_MLG",
		203: "ISO639_PART12_LANGUAGE_CODE_MH",
		204: "ISO639_PART12_LANGUAGE_CODE_MAH",
		205: "ISO639_PART12_LANGUAGE_CODE_MI",
		206: "ISO639_PART12_LANGUAGE_CODE_MRI",
		207: "ISO639_PART12_LANGUAGE_CODE_MK",
		208: "ISO639_PART12_LANGUAGE_CODE_MKD",
		209: "ISO639_PART12_LANGUAGE_CODE_ML",
		210: "ISO639_PART12_LANGUAGE_CODE_MAL",
		211: "ISO639_PART12_LANGUAGE_CODE_MN",
		212: "ISO639_PART12_LANGUAGE_CODE_MON",
		213: "ISO639_PART12_LANGUAGE_CODE_MO",
		214: "ISO639_PART12_LANGUAGE_CODE_MR",
		215: "ISO639_PART12_LANGUAGE_CODE_MAR",
		216: "ISO639_PART12_LANGUAGE_CODE_MS",
		217: "ISO639_PART12_LANGUAGE_CODE_MSA",
		218: "ISO639_PART12_LANGUAGE_CODE_MT",
		219: "ISO639_PART12_LANGUAGE_CODE_MLT",
		220: "ISO639_PART12_LANGUAGE_CODE_MY",
		221: "ISO639_PART12_LANGUAGE_CODE_MYA",
		222: "ISO639_PART12_LANGUAGE_CODE_NA",
		223: "ISO639_PART12_LANGUAGE_CODE_NAU",
		224: "ISO639_PART12_LANGUAGE_CODE_NB",
		225: "ISO639_PART12_LANGUAGE_CODE_NOB",
		226: "ISO639_PART12_LANGUAGE_CODE_ND",
		227: "ISO639_PART12_LANGUAGE_CODE_NDE",
		228: "ISO639_PART12_LANGUAGE_CODE_NE",
		229: "ISO639_PART12_LANGUAGE_CODE_NEP",
		230: "ISO639_PART12_LANGUAGE_CODE_NG",
		231: "ISO639_PART12_LANGUAGE_CODE_NDO",
		232: "ISO639_PART12_LANGUAGE_CODE_NL",
		233: "ISO639_PART12_LANGUAGE_CODE_NLD",
		234: "ISO639_PART12_LANGUAGE_CODE_NN",
		235: "ISO639_PART12_LANGUAGE_CODE_NNO",
		236: "ISO639_PART12_LANGUAGE_CODE_NO",
		237: "ISO639_PART12_LANGUAGE_CODE_NOR",
		238: "ISO639_PART12_LANGUAGE_CODE_NR",
		239: "ISO639_PART12_LANGUAGE_CODE_NBL",
		240: "ISO639_PART12_LANGUAGE_CODE_NV",
		241: "ISO639_PART12_LANGUAGE_CODE_NAV",
		242: "ISO639_PART12_LANGUAGE_CODE_NY",
		243: "ISO639_PART12_LANGUAGE_CODE_NYA",
		244: "ISO639_PART12_LANGUAGE_CODE_OC",
		245: "ISO639_PART12_LANGUAGE_CODE_OCI",
		246: "ISO639_PART12_LANGUAGE_CODE_OJ",
		247: "ISO639_PART12_LANGUAGE_CODE_OJI",
		248: "ISO639_PART12_LANGUAGE_CODE_OM",
		249: "ISO639_PART12_LANGUAGE_CODE_ORM",
		250: "ISO639_PART12_LANGUAGE_CODE_OR",
		251: "ISO639_PART12_LANGUAGE_CODE_ORI",
		252: "ISO639_PART12_LANGUAGE_CODE_OS",
		253: "ISO639_PART12_LANGUAGE_CODE_OSS",
		254: "ISO639_PART12_LANGUAGE_CODE_PA",
		255: "ISO639_PART12_LANGUAGE_CODE_PAN",
		256: "ISO639_PART12_LANGUAGE_CODE_PI",
		257: "ISO639_PART12_LANGUAGE_CODE_PLI",
		258: "ISO639_PART12_LANGUAGE_CODE_PL",
		259: "ISO639_PART12_LANGUAGE_CODE_POL",
		260: "ISO639_PART12_LANGUAGE_CODE_PS",
		261: "ISO639_PART12_LANGUAGE_CODE_PUS",
		262: "ISO639_PART12_LANGUAGE_CODE_PT",
		263: "ISO639_PART12_LANGUAGE_CODE_POR",
		264: "ISO639_PART12_LANGUAGE_CODE_QU",
		265: "ISO639_PART12_LANGUAGE_CODE_QUE",
		266: "ISO639_PART12_LANGUAGE_CODE_RM",
		267: "ISO639_PART12_LANGUAGE_CODE_ROH",
		268: "ISO639_PART12_LANGUAGE_CODE_RN",
		269: "ISO639_PART12_LANGUAGE_CODE_RUN",
		270: "ISO639_PART12_LANGUAGE_CODE_RO",
		271: "ISO639_PART12_LANGUAGE_CODE_RON",
		272: "ISO639_PART12_LANGUAGE_CODE_RU",
		273: "ISO639_PART12_LANGUAGE_CODE_RUS",
		274: "ISO639_PART12_LANGUAGE_CODE_RW",
		275: "ISO639_PART12_LANGUAGE_CODE_KIN",
		276: "ISO639_PART12_LANGUAGE_CODE_SA",
		277: "ISO639_PART12_LANGUAGE_CODE_SAN",
		278: "ISO639_PART12_LANGUAGE_CODE_SC",
		279: "ISO639_PART12_LANGUAGE_CODE_SRD",
		280: "ISO639_PART12_LANGUAGE_CODE_SD",
		281: "ISO639_PART12_LANGUAGE_CODE_SND",
		282: "ISO639_PART12_LANGUAGE_CODE_SE",
		283: "ISO639_PART12_LANGUAGE_CODE_SME",
		284: "ISO639_PART12_LANGUAGE_CODE_SG",
		285: "ISO639_PART12_LANGUAGE_CODE_SAG",
		286: "ISO639_PART12_LANGUAGE_CODE_SI",
		287: "ISO639_PART12_LANGUAGE_CODE_SIN",
		288: "ISO639_PART12_LANGUAGE_CODE_SK",
		289: "ISO639_PART12_LANGUAGE_CODE_SLK",
		290: "ISO639_PART12_LANGUAGE_CODE_SL",
		291: "ISO639_PART12_LANGUAGE_CODE_SLV",
		292: "ISO639_PART12_LANGUAGE_CODE_SM",
		293: "ISO639_PART12_LANGUAGE_CODE_SMO",
		294: "ISO639_PART12_LANGUAGE_CODE_SN",
		295: "ISO639_PART12_LANGUAGE_CODE_SNA",
		296: "ISO639_PART12_LANGUAGE_CODE_SO",
		297: "ISO639_PART12_LANGUAGE_CODE_SOM",
		298: "ISO639_PART12_LANGUAGE_CODE_SQ",
		299: "ISO639_PART12_LANGUAGE_CODE_SQI",
		300: "ISO639_PART12_LANGUAGE_CODE_SR",
		301: "ISO639_PART12_LANGUAGE_CODE_SRP",
		302: "ISO639_PART12_LANGUAGE_CODE_SS",
		303: "ISO639_PART12_LANGUAGE_CODE_SSW",
		304: "ISO639_PART12_LANGUAGE_CODE_ST",
		305: "ISO639_PART12_LANGUAGE_CODE_SOT",
		306: "ISO639_PART12_LANGUAGE_CODE_SU",
		307: "ISO639_PART12_LANGUAGE_CODE_SUN",
		308: "ISO639_PART12_LANGUAGE_CODE_SV",
		309: "ISO639_PART12_LANGUAGE_CODE_SWE",
		310: "ISO639_PART12_LANGUAGE_CODE_SW",
		311: "ISO639_PART12_LANGUAGE_CODE_SWA",
		312: "ISO639_PART12_LANGUAGE_CODE_TA",
		313: "ISO639_PART12_LANGUAGE_CODE_TAM",
		314: "ISO639_PART12_LANGUAGE_CODE_TE",
		315: "ISO639_PART12_LANGUAGE_CODE_TEL",
		316: "ISO639_PART12_LANGUAGE_CODE_TG",
		317: "ISO639_PART12_LANGUAGE_CODE_TGK",
		318: "ISO639_PART12_LANGUAGE_CODE_TH",
		319: "ISO639_PART12_LANGUAGE_CODE_THA",
		320: "ISO639_PART12_LANGUAGE_CODE_TI",
		321: "ISO639_PART12_LANGUAGE_CODE_TIR",
		322: "ISO639_PART12_LANGUAGE_CODE_TK",
		323: "ISO639_PART12_LANGUAGE_CODE_TUK",
		324: "ISO639_PART12_LANGUAGE_CODE_TL",
		325: "ISO639_PART12_LANGUAGE_CODE_TGL",
		326: "ISO639_PART12_LANGUAGE_CODE_TN",
		327: "ISO639_PART12_LANGUAGE_CODE_TSN",
		328: "ISO639_PART12_LANGUAGE_CODE_TO",
		329: "ISO639_PART12_LANGUAGE_CODE_TON",
		330: "ISO639_PART12_LANGUAGE_CODE_TR",
		331: "ISO639_PART12_LANGUAGE_CODE_TUR",
		332: "ISO639_PART12_LANGUAGE_CODE_TS",
		333: "ISO639_PART12_LANGUAGE_CODE_TSO",
		334: "ISO639_PART12_LANGUAGE_CODE_TT",
		335: "ISO639_PART12_LANGUAGE_CODE_TAT",
		336: "ISO639_PART12_LANGUAGE_CODE_TW",
		337: "ISO639_PART12_LANGUAGE_CODE_TWI",
		338: "ISO639_PART12_LANGUAGE_CODE_TY",
		339: "ISO639_PART12_LANGUAGE_CODE_TAH",
		340: "ISO639_PART12_LANGUAGE_CODE_UG",
		341: "ISO639_PART12_LANGUAGE_CODE_UIG",
		342: "ISO639_PART12_LANGUAGE_CODE_UK",
		343: "ISO639_PART12_LANGUAGE_CODE_UKR",
		344: "ISO639_PART12_LANGUAGE_CODE_UR",
		345: "ISO639_PART12_LANGUAGE_CODE_URD",
		346: "ISO639_PART12_LANGUAGE_CODE_UZ",
		347: "ISO639_PART12_LANGUAGE_CODE_UZB",
		348: "ISO639_PART12_LANGUAGE_CODE_VE",
		349: "ISO639_PART12_LANGUAGE_CODE_VEN",
		350: "ISO639_PART12_LANGUAGE_CODE_VI",
		351: "ISO639_PART12_LANGUAGE_CODE_VIE",
		352: "ISO639_PART12_LANGUAGE_CODE_VO",
		353: "ISO639_PART12_LANGUAGE_CODE_VOL",
		354: "ISO639_PART12_LANGUAGE_CODE_WA",
		355: "ISO639_PART12_LANGUAGE_CODE_WLN",
		356: "ISO639_PART12_LANGUAGE_CODE_WO",
		357: "ISO639_PART12_LANGUAGE_CODE_WOL",
		358: "ISO639_PART12_LANGUAGE_CODE_XH",
		359: "ISO639_PART12_LANGUAGE_CODE_XHO",
		360: "ISO639_PART12_LANGUAGE_CODE_YI",
		361: "ISO639_PART12_LANGUAGE_CODE_YID",
		362: "ISO639_PART12_LANGUAGE_CODE_YO",
		363: "ISO639_PART12_LANGUAGE_CODE_YOR",
		364: "ISO639_PART12_LANGUAGE_CODE_ZA",
		365: "ISO639_PART12_LANGUAGE_CODE_ZHA",
		366: "ISO639_PART12_LANGUAGE_CODE_ZH",
		367: "ISO639_PART12_LANGUAGE_CODE_ZHO",
		368: "ISO639_PART12_LANGUAGE_CODE_ZU",
		369: "ISO639_PART12_LANGUAGE_CODE_ZUL",
		370: "ISO639_PART12_LANGUAGE_CODE_ACE",
		371: "ISO639_PART12_LANGUAGE_CODE_ACH",
		372: "ISO639_PART12_LANGUAGE_CODE_ADA",
		373: "ISO639_PART12_LANGUAGE_CODE_ADY",
		374: "ISO639_PART12_LANGUAGE_CODE_AFA",
		375: "ISO639_PART12_LANGUAGE_CODE_AFH",
		376: "ISO639_PART12_LANGUAGE_CODE_AIN",
		377: "ISO639_PART12_LANGUAGE_CODE_AKK",
		378: "ISO639_PART12_LANGUAGE_CODE_ALE",
		379: "ISO639_PART12_LANGUAGE_CODE_ALG",
		380: "ISO639_PART12_LANGUAGE_CODE_ALT",
		381: "ISO639_PART12_LANGUAGE_CODE_ANG",
		382: "ISO639_PART12_LANGUAGE_CODE_ANP",
		383: "ISO639_PART12_LANGUAGE_CODE_APA",
		384: "ISO639_PART12_LANGUAGE_CODE_ARC",
		385: "ISO639_PART12_LANGUAGE_CODE_ARN",
		386: "ISO639_PART12_LANGUAGE_CODE_ARP",
		387: "ISO639_PART12_LANGUAGE_CODE_ART",
		388: "ISO639_PART12_LANGUAGE_CODE_ARW",
		389: "ISO639_PART12_LANGUAGE_CODE_AST",
		390: "ISO639_PART12_LANGUAGE_CODE_ATH",
		391: "ISO639_PART12_LANGUAGE_CODE_AUS",
		392: "ISO639_PART12_LANGUAGE_CODE_AWA",
		393: "ISO639_PART12_LANGUAGE_CODE_BAD",
		394: "ISO639_PART12_LANGUAGE_CODE_BAI",
		395: "ISO639_PART12_LANGUAGE_CODE_BAL",
		396: "ISO639_PART12_LANGUAGE_CODE_BAN",
		397: "ISO639_PART12_LANGUAGE_CODE_BAS",
		398: "ISO639_PART12_LANGUAGE_CODE_BAT",
		399: "ISO639_PART12_LANGUAGE_CODE_BEJ",
		400: "ISO639_PART12_LANGUAGE_CODE_BEM",
		401: "ISO639_PART12_LANGUAGE_CODE_BER",
		402: "ISO639_PART12_LANGUAGE_CODE_BGC",
		403: "ISO639_PART12_LANGUAGE_CODE_BHO",
		404: "ISO639_PART12_LANGUAGE_CODE_BIK",
		405: "ISO639_PART12_LANGUAGE_CODE_BIN",
		406: "ISO639_PART12_LANGUAGE_CODE_BLA",
		407: "ISO639_PART12_LANGUAGE_CODE_BNT",
		408: "ISO639_PART12_LANGUAGE_CODE_BRA",
		409: "ISO639_PART12_LANGUAGE_CODE_BTK",
		410: "ISO639_PART12_LANGUAGE_CODE_BUA",
		411: "ISO639_PART12_LANGUAGE_CODE_BUG",
		412: "ISO639_PART12_LANGUAGE_CODE_BYN",
		413: "ISO639_PART12_LANGUAGE_CODE_CAD",
		414: "ISO639_PART12_LANGUAGE_CODE_CAI",
		415: "ISO639_PART12_LANGUAGE_CODE_CAR",
		416: "ISO639_PART12_LANGUAGE_CODE_CAU",
		417: "ISO639_PART12_LANGUAGE_CODE_CEB",
		418: "ISO639_PART12_LANGUAGE_CODE_CEL",
		419: "ISO639_PART12_LANGUAGE_CODE_CHB",
		420: "ISO639_PART12_LANGUAGE_CODE_CHG",
		421: "ISO639_PART12_LANGUAGE_CODE_CHK",
		422: "ISO639_PART12_LANGUAGE_CODE_CHM",
		423: "ISO639_PART12_LANGUAGE_CODE_CHN",
		424: "ISO639_PART12_LANGUAGE_CODE_CHO",
		425: "ISO639_PART12_LANGUAGE_CODE_CHP",
		426: "ISO639_PART12_LANGUAGE_CODE_CHR",
		427: "ISO639_PART12_LANGUAGE_CODE_CHY",
		428: "ISO639_PART12_LANGUAGE_CODE_CMC",
		429: "ISO639_PART12_LANGUAGE_CODE_CNR",
		430: "ISO639_PART12_LANGUAGE_CODE_COP",
		431: "ISO639_PART12_LANGUAGE_CODE_CPE",
		432: "ISO639_PART12_LANGUAGE_CODE_CPF",
		433: "ISO639_PART12_LANGUAGE_CODE_CPP",
		434: "ISO639_PART12_LANGUAGE_CODE_CRH",
		435: "ISO639_PART12_LANGUAGE_CODE_CRP",
		436: "ISO639_PART12_LANGUAGE_CODE_CSB",
		437: "ISO639_PART12_LANGUAGE_CODE_CUS",
		438: "ISO639_PART12_LANGUAGE_CODE_DAK",
		439: "ISO639_PART12_LANGUAGE_CODE_DAR",
		440: "ISO639_PART12_LANGUAGE_CODE_DAY",
		441: "ISO639_PART12_LANGUAGE_CODE_DEL",
		442: "ISO639_PART12_LANGUAGE_CODE_DEN",
		443: "ISO639_PART12_LANGUAGE_CODE_DGR",
		444: "ISO639_PART12_LANGUAGE_CODE_DIN",
		445: "ISO639_PART12_LANGUAGE_CODE_DOI",
		446: "ISO639_PART12_LANGUAGE_CODE_DRA",
		447: "ISO639_PART12_LANGUAGE_CODE_DSB",
		448: "ISO639_PART12_LANGUAGE_CODE_DUA",
		449: "ISO639_PART12_LANGUAGE_CODE_DUM",
		450: "ISO639_PART12_LANGUAGE_CODE_DYU",
		451: "ISO639_PART12_LANGUAGE_CODE_EFI",
		452: "ISO639_PART12_LANGUAGE_CODE_EGY",
		453: "ISO639_PART12_LANGUAGE_CODE_EKA",
		454: "ISO639_PART12_LANGUAGE_CODE_ELX",
		455: "ISO639_PART12_LANGUAGE_CODE_ENM",
		456: "ISO639_PART12_LANGUAGE_CODE_EWO",
		457: "ISO639_PART12_LANGUAGE_CODE_FAN",
		458: "ISO639_PART12_LANGUAGE_CODE_FAT",
		459: "ISO639_PART12_LANGUAGE_CODE_FIL",
		460: "ISO639_PART12_LANGUAGE_CODE_FIU",
		461: "ISO639_PART12_LANGUAGE_CODE_FON",
		462: "ISO639_PART12_LANGUAGE_CODE_FRM",
		463: "ISO639_PART12_LANGUAGE_CODE_FRO",
		464: "ISO639_PART12_LANGUAGE_CODE_FRR",
		465: "ISO639_PART12_LANGUAGE_CODE_FRS",
		466: "ISO639_PART12_LANGUAGE_CODE_FUR",
		467: "ISO639_PART12_LANGUAGE_CODE_GAA",
		468: "ISO639_PART12_LANGUAGE_CODE_GAY",
		469: "ISO639_PART12_LANGUAGE_CODE_GBA",
		470: "ISO639_PART12_LANGUAGE_CODE_GEM",
		471: "ISO639_PART12_LANGUAGE_CODE_GEZ",
		472: "ISO639_PART12_LANGUAGE_CODE_GIL",
		473: "ISO639_PART12_LANGUAGE_CODE_GMH",
		474: "ISO639_PART12_LANGUAGE_CODE_GOH",
		475: "ISO639_PART12_LANGUAGE_CODE_GON",
		476: "ISO639_PART12_LANGUAGE_CODE_GOR",
		477: "ISO639_PART12_LANGUAGE_CODE_GOT",
		478: "ISO639_PART12_LANGUAGE_CODE_GRB",
		479: "ISO639_PART12_LANGUAGE_CODE_GRC",
		480: "ISO639_PART12_LANGUAGE_CODE_GSW",
		481: "ISO639_PART12_LANGUAGE_CODE_GWI",
		482: "ISO639_PART12_LANGUAGE_CODE_HAI",
		483: "ISO639_PART12_LANGUAGE_CODE_HAW",
		484: "ISO639_PART12_LANGUAGE_CODE_HIL",
		485: "ISO639_PART12_LANGUAGE_CODE_HIM",
		486: "ISO639_PART12_LANGUAGE_CODE_HIT",
		487: "ISO639_PART12_LANGUAGE_CODE_HMN",
		488: "ISO639_PART12_LANGUAGE_CODE_HSB",
		489: "ISO639_PART12_LANGUAGE_CODE_HUP",
		490: "ISO639_PART12_LANGUAGE_CODE_IBA",
		491: "ISO639_PART12_LANGUAGE_CODE_IJO",
		492: "ISO639_PART12_LANGUAGE_CODE_ILO",
		493: "ISO639_PART12_LANGUAGE_CODE_INC",
		494: "ISO639_PART12_LANGUAGE_CODE_INE",
		495: "ISO639_PART12_LANGUAGE_CODE_INH",
		496: "ISO639_PART12_LANGUAGE_CODE_IRA",
		497: "ISO639_PART12_LANGUAGE_CODE_IRO",
		498: "ISO639_PART12_LANGUAGE_CODE_JBO",
		499: "ISO639_PART12_LANGUAGE_CODE_JPR",
		500: "ISO639_PART12_LANGUAGE_CODE_JRB",
		501: "ISO639_PART12_LANGUAGE_CODE_KAA",
		502: "ISO639_PART12_LANGUAGE_CODE_KAB",
		503: "ISO639_PART12_LANGUAGE_CODE_KAC",
		504: "ISO639_PART12_LANGUAGE_CODE_KAM",
		505: "ISO639_PART12_LANGUAGE_CODE_KAR",
		506: "ISO639_PART12_LANGUAGE_CODE_KAW",
		507: "ISO639_PART12_LANGUAGE_CODE_KBD",
		508: "ISO639_PART12_LANGUAGE_CODE_KHA",
		509: "ISO639_PART12_LANGUAGE_CODE_KHI",
		510: "ISO639_PART12_LANGUAGE_CODE_KHO",
		511: "ISO639_PART12_LANGUAGE_CODE_KMB",
		512: "ISO639_PART12_LANGUAGE_CODE_KOK",
		513: "ISO639_PART12_LANGUAGE_CODE_KOS",
		514: "ISO639_PART12_LANGUAGE_CODE_KPE",
		515: "ISO639_PART12_LANGUAGE_CODE_KRC",
		516: "ISO639_PART12_LANGUAGE_CODE_KRL",
		517: "ISO639_PART12_LANGUAGE_CODE_KRO",
		518: "ISO639_PART12_LANGUAGE_CODE_KRU",
		519: "ISO639_PART12_LANGUAGE_CODE_KUM",
		520: "ISO639_PART12_LANGUAGE_CODE_KUT",
		521: "ISO639_PART12_LANGUAGE_CODE_LAD",
		522: "ISO639_PART12_LANGUAGE_CODE_LAH",
		523: "ISO639_PART12_LANGUAGE_CODE_LAM",
		524: "ISO639_PART12_LANGUAGE_CODE_LEZ",
		525: "ISO639_PART12_LANGUAGE_CODE_LOL",
		526: "ISO639_PART12_LANGUAGE_CODE_LOZ",
		527: "ISO639_PART12_LANGUAGE_CODE_LUA",
		528: "ISO639_PART12_LANGUAGE_CODE_LUI",
		529: "ISO639_PART12_LANGUAGE_CODE_LUN",
		530: "ISO639_PART12_LANGUAGE_CODE_LUO",
		531: "ISO639_PART12_LANGUAGE_CODE_LUS",
		532: "ISO639_PART12_LANGUAGE_CODE_MAD",
		533: "ISO639_PART12_LANGUAGE_CODE_MAG",
		534: "ISO639_PART12_LANGUAGE_CODE_MAI",
		535: "ISO639_PART12_LANGUAGE_CODE_MAK",
		536: "ISO639_PART12_LANGUAGE_CODE_MAN",
		537: "ISO639_PART12_LANGUAGE_CODE_MAP",
		538: "ISO639_PART12_LANGUAGE_CODE_MAS",
		539: "ISO639_PART12_LANGUAGE_CODE_MDF",
		540: "ISO639_PART12_LANGUAGE_CODE_MDR",
		541: "ISO639_PART12_LANGUAGE_CODE_MEN",
		542: "ISO639_PART12_LANGUAGE_CODE_MGA",
		543: "ISO639_PART12_LANGUAGE_CODE_MIC",
		544: "ISO639_PART12_LANGUAGE_CODE_MIN",
		545: "ISO639_PART12_LANGUAGE_CODE_MIS",
		546: "ISO639_PART12_LANGUAGE_CODE_MKH",
		547: "ISO639_PART12_LANGUAGE_CODE_MNC",
		548: "ISO639_PART12_LANGUAGE_CODE_MNI",
		549: "ISO639_PART12_LANGUAGE_CODE_MNO",
		550: "ISO639_PART12_LANGUAGE_CODE_MOH",
		551: "ISO639_PART12_LANGUAGE_CODE_MOS",
		552: "ISO639_PART12_LANGUAGE_CODE_MUL",
		553: "ISO639_PART12_LANGUAGE_CODE_MUN",
		554: "ISO639_PART12_LANGUAGE_CODE_MUS",
		555: "ISO639_PART12_LANGUAGE_CODE_MWL",
		556: "ISO639_PART12_LANGUAGE_CODE_MWR",
		557: "ISO639_PART12_LANGUAGE_CODE_MYN",
		558: "ISO639_PART12_LANGUAGE_CODE_MYV",
		559: "ISO639_PART12_LANGUAGE_CODE_NAH",
		560: "ISO639_PART12_LANGUAGE_CODE_NAI",
		561: "ISO639_PART12_LANGUAGE_CODE_NAP",
		562: "ISO639_PART12_LANGUAGE_CODE_NDS",
		563: "ISO639_PART12_LANGUAGE_CODE_NEW",
		564: "ISO639_PART12_LANGUAGE_CODE_NIA",
		565: "ISO639_PART12_LANGUAGE_CODE_NIC",
		566: "ISO639_PART12_LANGUAGE_CODE_NIU",
		567: "ISO639_PART12_LANGUAGE_CODE_NOG",
		568: "ISO639_PART12_LANGUAGE_CODE_NON",
		569: "ISO639_PART12_LANGUAGE_CODE_NQO",
		570: "ISO639_PART12_LANGUAGE_CODE_NSO",
		571: "ISO639_PART12_LANGUAGE_CODE_NUB",
		572: "ISO639_PART12_LANGUAGE_CODE_NWC",
		573: "ISO639_PART12_LANGUAGE_CODE_NYM",
		574: "ISO639_PART12_LANGUAGE_CODE_NYN",
		575: "ISO639_PART12_LANGUAGE_CODE_NYO",
		576: "ISO639_PART12_LANGUAGE_CODE_NZI",
		577: "ISO639_PART12_LANGUAGE_CODE_OSA",
		578: "ISO639_PART12_LANGUAGE_CODE_OTA",
		579: "ISO639_PART12_LANGUAGE_CODE_OTO",
		580: "ISO639_PART12_LANGUAGE_CODE_PAA",
		581: "ISO639_PART12_LANGUAGE_CODE_PAG",
		582: "ISO639_PART12_LANGUAGE_CODE_PAL",
		583: "ISO639_PART12_LANGUAGE_CODE_PAM",
		584: "ISO639_PART12_LANGUAGE_CODE_PAP",
		585: "ISO639_PART12_LANGUAGE_CODE_PAU",
		586: "ISO639_PART12_LANGUAGE_CODE_PEO",
		587: "ISO639_PART12_LANGUAGE_CODE_PHI",
		588: "ISO639_PART12_LANGUAGE_CODE_PHN",
		589: "ISO639_PART12_LANGUAGE_CODE_PON",
		590: "ISO639_PART12_LANGUAGE_CODE_PRA",
		591: "ISO639_PART12_LANGUAGE_CODE_PRO",
		592: "ISO639_PART12_LANGUAGE_CODE_QQA",
		593: "ISO639_PART12_LANGUAGE_CODE_QQB",
		594: "ISO639_PART12_LANGUAGE_CODE_QQC",
		595: "ISO639_PART12_LANGUAGE_CODE_QQD",
		596: "ISO639_PART12_LANGUAGE_CODE_QQE",
		597: "ISO639_PART12_LANGUAGE_CODE_QQF",
		598: "ISO639_PART12_LANGUAGE_CODE_QQG",
		599: "ISO639_PART12_LANGUAGE_CODE_QQH",
		600: "ISO639_PART12_LANGUAGE_CODE_QQI",
		601: "ISO639_PART12_LANGUAGE_CODE_QQJ",
		602: "ISO639_PART12_LANGUAGE_CODE_RAJ",
		603: "ISO639_PART12_LANGUAGE_CODE_RAP",
		604: "ISO639_PART12_LANGUAGE_CODE_RAR",
		605: "ISO639_PART12_LANGUAGE_CODE_ROA",
		606: "ISO639_PART12_LANGUAGE_CODE_ROM",
		607: "ISO639_PART12_LANGUAGE_CODE_RUP",
		608: "ISO639_PART12_LANGUAGE_CODE_SAD",
		609: "ISO639_PART12_LANGUAGE_CODE_SAH",
		610: "ISO639_PART12_LANGUAGE_CODE_SAI",
		611: "ISO639_PART12_LANGUAGE_CODE_SAL",
		612: "ISO639_PART12_LANGUAGE_CODE_SAM",
		613: "ISO639_PART12_LANGUAGE_CODE_SAS",
		614: "ISO639_PART12_LANGUAGE_CODE_SAT",
		615: "ISO639_PART12_LANGUAGE_CODE_SCN",
		616: "ISO639_PART12_LANGUAGE_CODE_SCO",
		617: "ISO639_PART12_LANGUAGE_CODE_SEL",
		618: "ISO639_PART12_LANGUAGE_CODE_SEM",
		619: "ISO639_PART12_LANGUAGE_CODE_SGA",
		620: "ISO639_PART12_LANGUAGE_CODE_SGN",
		621: "ISO639_PART12_LANGUAGE_CODE_SHN",
		622: "ISO639_PART12_LANGUAGE_CODE_SID",
		623: "ISO639_PART12_LANGUAGE_CODE_SIO",
		624: "ISO639_PART12_LANGUAGE_CODE_SIT",
		625: "ISO639_PART12_LANGUAGE_CODE_SLA",
		626: "ISO639_PART12_LANGUAGE_CODE_SMA",
		627: "ISO639_PART12_LANGUAGE_CODE_SMI",
		628: "ISO639_PART12_LANGUAGE_CODE_SMJ",
		629: "ISO639_PART12_LANGUAGE_CODE_SMN",
		630: "ISO639_PART12_LANGUAGE_CODE_SMS",
		631: "ISO639_PART12_LANGUAGE_CODE_SNK",
		632: "ISO639_PART12_LANGUAGE_CODE_SOG",
		633: "ISO639_PART12_LANGUAGE_CODE_SON",
		634: "ISO639_PART12_LANGUAGE_CODE_SRN",
		635: "ISO639_PART12_LANGUAGE_CODE_SRR",
		636: "ISO639_PART12_LANGUAGE_CODE_SSA",
		637: "ISO639_PART12_LANGUAGE_CODE_SUK",
		638: "ISO639_PART12_LANGUAGE_CODE_SUS",
		639: "ISO639_PART12_LANGUAGE_CODE_SUX",
		640: "ISO639_PART12_LANGUAGE_CODE_SYC",
		641: "ISO639_PART12_LANGUAGE_CODE_SYR",
		642: "ISO639_PART12_LANGUAGE_CODE_TAI",
		643: "ISO639_PART12_LANGUAGE_CODE_TEM",
		644: "ISO639_PART12_LANGUAGE_CODE_TER",
		645: "ISO639_PART12_LANGUAGE_CODE_TET",
		646: "ISO639_PART12_LANGUAGE_CODE_TIG",
		647: "ISO639_PART12_LANGUAGE_CODE_TIV",
		648: "ISO639_PART12_LANGUAGE_CODE_TKL",
		649: "ISO639_PART12_LANGUAGE_CODE_TLH",
		650: "ISO639_PART12_LANGUAGE_CODE_TLI",
		651: "ISO639_PART12_LANGUAGE_CODE_TMH",
		652: "ISO639_PART12_LANGUAGE_CODE_TOG",
		653: "ISO639_PART12_LANGUAGE_CODE_TPI",
		654: "ISO639_PART12_LANGUAGE_CODE_TSI",
		655: "ISO639_PART12_LANGUAGE_CODE_TUM",
		656: "ISO639_PART12_LANGUAGE_CODE_TUP",
		657: "ISO639_PART12_LANGUAGE_CODE_TUT",
		658: "ISO639_PART12_LANGUAGE_CODE_TVL",
		659: "ISO639_PART12_LANGUAGE_CODE_TYV",
		660: "ISO639_PART12_LANGUAGE_CODE_UDM",
		661: "ISO639_PART12_LANGUAGE_CODE_UGA",
		662: "ISO639_PART12_LANGUAGE_CODE_UMB",
		663: "ISO639_PART12_LANGUAGE_CODE_UND",
		664: "ISO639_PART12_LANGUAGE_CODE_VAI",
		665: "ISO639_PART12_LANGUAGE_CODE_VOT",
		666: "ISO639_PART12_LANGUAGE_CODE_WAK",
		667: "ISO639_PART12_LANGUAGE_CODE_WAL",
		668: "ISO639_PART12_LANGUAGE_CODE_WAR",
		669: "ISO639_PART12_LANGUAGE_CODE_WAS",
		670: "ISO639_PART12_LANGUAGE_CODE_WEN",
		671: "ISO639_PART12_LANGUAGE_CODE_XAL",
		672: "ISO639_PART12_LANGUAGE_CODE_YAO",
		673: "ISO639_PART12_LANGUAGE_CODE_YAP",
		674: "ISO639_PART12_LANGUAGE_CODE_YPK",
		675: "ISO639_PART12_LANGUAGE_CODE_ZAP",
		676: "ISO639_PART12_LANGUAGE_CODE_ZBL",
		677: "ISO639_PART12_LANGUAGE_CODE_ZEN",
		678: "ISO639_PART12_LANGUAGE_CODE_ZGH",
		679: "ISO639_PART12_LANGUAGE_CODE_ZND",
		680: "ISO639_PART12_LANGUAGE_CODE_ZUN",
		681: "ISO639_PART12_LANGUAGE_CODE_ZXX",
		682: "ISO639_PART12_LANGUAGE_CODE_ZZA",
	}
	Iso639Part12LanguageCode_value = map[string]int32{
		"ISO639_PART12_LANGUAGE_CODE_UNSPECIFIED": 0,
		"ISO639_PART12_LANGUAGE_CODE_AA":          1,
		"ISO639_PART12_LANGUAGE_CODE_AAR":         2,
		"ISO639_PART12_LANGUAGE_CODE_AB":          3,
		"ISO639_PART12_LANGUAGE_CODE_ABK":         4,
		"ISO639_PART12_LANGUAGE_CODE_AE":          5,
		"ISO639_PART12_LANGUAGE_CODE_AVE":         6,
		"ISO639_PART12_LANGUAGE_CODE_AF":          7,
		"ISO639_PART12_LANGUAGE_CODE_AFR":         8,
		"ISO639_PART12_LANGUAGE_CODE_AK":          9,
		"ISO639_PART12_LANGUAGE_CODE_AKA":         10,
		"ISO639_PART12_LANGUAGE_CODE_AM":          11,
		"ISO639_PART12_LANGUAGE_CODE_AMH":         12,
		"ISO639_PART12_LANGUAGE_CODE_AN":          13,
		"ISO639_PART12_LANGUAGE_CODE_ARG":         14,
		"ISO639_PART12_LANGUAGE_CODE_AR":          15,
		"ISO639_PART12_LANGUAGE_CODE_ARA":         16,
		"ISO639_PART12_LANGUAGE_CODE_AS":          17,
		"ISO639_PART12_LANGUAGE_CODE_ASM":         18,
		"ISO639_PART12_LANGUAGE_CODE_AV":          19,
		"ISO639_PART12_LANGUAGE_CODE_AVA":         20,
		"ISO639_PART12_LANGUAGE_CODE_AY":          21,
		"ISO639_PART12_LANGUAGE_CODE_AYM":         22,
		"ISO639_PART12_LANGUAGE_CODE_AZ":          23,
		"ISO639_PART12_LANGUAGE_CODE_AZE":         24,
		"ISO639_PART12_LANGUAGE_CODE_BA":          25,
		"ISO639_PART12_LANGUAGE_CODE_BAK":         26,
		"ISO639_PART12_LANGUAGE_CODE_BE":          27,
		"ISO639_PART12_LANGUAGE_CODE_BEL":         28,
		"ISO639_PART12_LANGUAGE_CODE_BG":          29,
		"ISO639_PART12_LANGUAGE_CODE_BUL":         30,
		"ISO639_PART12_LANGUAGE_CODE_BH":          31,
		"ISO639_PART12_LANGUAGE_CODE_BIH":         32,
		"ISO639_PART12_LANGUAGE_CODE_BI":          33,
		"ISO639_PART12_LANGUAGE_CODE_BIS":         34,
		"ISO639_PART12_LANGUAGE_CODE_BM":          35,
		"ISO639_PART12_LANGUAGE_CODE_BAM":         36,
		"ISO639_PART12_LANGUAGE_CODE_BN":          37,
		"ISO639_PART12_LANGUAGE_CODE_BEN":         38,
		"ISO639_PART12_LANGUAGE_CODE_BO":          39,
		"ISO639_PART12_LANGUAGE_CODE_BOD":         40,
		"ISO639_PART12_LANGUAGE_CODE_BR":          41,
		"ISO639_PART12_LANGUAGE_CODE_BRE":         42,
		"ISO639_PART12_LANGUAGE_CODE_BS":          43,
		"ISO639_PART12_LANGUAGE_CODE_BOS":         44,
		"ISO639_PART12_LANGUAGE_CODE_CA":          45,
		"ISO639_PART12_LANGUAGE_CODE_CAT":         46,
		"ISO639_PART12_LANGUAGE_CODE_CE":          47,
		"ISO639_PART12_LANGUAGE_CODE_CHE":         48,
		"ISO639_PART12_LANGUAGE_CODE_CH":          49,
		"ISO639_PART12_LANGUAGE_CODE_CHA":         50,
		"ISO639_PART12_LANGUAGE_CODE_CO":          51,
		"ISO639_PART12_LANGUAGE_CODE_COS":         52,
		"ISO639_PART12_LANGUAGE_CODE_CR":          53,
		"ISO639_PART12_LANGUAGE_CODE_CRE":         54,
		"ISO639_PART12_LANGUAGE_CODE_CS":          55,
		"ISO639_PART12_LANGUAGE_CODE_CES":         56,
		"ISO639_PART12_LANGUAGE_CODE_CU":          57,
		"ISO639_PART12_LANGUAGE_CODE_CHU":         58,
		"ISO639_PART12_LANGUAGE_CODE_CV":          59,
		"ISO639_PART12_LANGUAGE_CODE_CHV":         60,
		"ISO639_PART12_LANGUAGE_CODE_CY":          61,
		"ISO639_PART12_LANGUAGE_CODE_CYM":         62,
		"ISO639_PART12_LANGUAGE_CODE_DA":          63,
		"ISO639_PART12_LANGUAGE_CODE_DAN":         64,
		"ISO639_PART12_LANGUAGE_CODE_DE":          65,
		"ISO639_PART12_LANGUAGE_CODE_DEU":         66,
		"ISO639_PART12_LANGUAGE_CODE_DV":          67,
		"ISO639_PART12_LANGUAGE_CODE_DIV":         68,
		"ISO639_PART12_LANGUAGE_CODE_DZ":          69,
		"ISO639_PART12_LANGUAGE_CODE_DZO":         70,
		"ISO639_PART12_LANGUAGE_CODE_EE":          71,
		"ISO639_PART12_LANGUAGE_CODE_EWE":         72,
		"ISO639_PART12_LANGUAGE_CODE_EL":          73,
		"ISO639_PART12_LANGUAGE_CODE_ELL":         74,
		"ISO639_PART12_LANGUAGE_CODE_EN":          75,
		"ISO639_PART12_LANGUAGE_CODE_ENG":         76,
		"ISO639_PART12_LANGUAGE_CODE_EO":          77,
		"ISO639_PART12_LANGUAGE_CODE_EPO":         78,
		"ISO639_PART12_LANGUAGE_CODE_ES":          79,
		"ISO639_PART12_LANGUAGE_CODE_SPA":         80,
		"ISO639_PART12_LANGUAGE_CODE_ET":          81,
		"ISO639_PART12_LANGUAGE_CODE_EST":         82,
		"ISO639_PART12_LANGUAGE_CODE_EU":          83,
		"ISO639_PART12_LANGUAGE_CODE_EUS":         84,
		"ISO639_PART12_LANGUAGE_CODE_FA":          85,
		"ISO639_PART12_LANGUAGE_CODE_FAS":         86,
		"ISO639_PART12_LANGUAGE_CODE_FF":          87,
		"ISO639_PART12_LANGUAGE_CODE_FUL":         88,
		"ISO639_PART12_LANGUAGE_CODE_FI":          89,
		"ISO639_PART12_LANGUAGE_CODE_FIN":         90,
		"ISO639_PART12_LANGUAGE_CODE_FJ":          91,
		"ISO639_PART12_LANGUAGE_CODE_FIJ":         92,
		"ISO639_PART12_LANGUAGE_CODE_FO":          93,
		"ISO639_PART12_LANGUAGE_CODE_FAO":         94,
		"ISO639_PART12_LANGUAGE_CODE_FR":          95,
		"ISO639_PART12_LANGUAGE_CODE_FRA":         96,
		"ISO639_PART12_LANGUAGE_CODE_FY":          97,
		"ISO639_PART12_LANGUAGE_CODE_FRY":         98,
		"ISO639_PART12_LANGUAGE_CODE_GA":          99,
		"ISO639_PART12_LANGUAGE_CODE_GLE":         100,
		"ISO639_PART12_LANGUAGE_CODE_GD":          101,
		"ISO639_PART12_LANGUAGE_CODE_GLA":         102,
		"ISO639_PART12_LANGUAGE_CODE_GL":          103,
		"ISO639_PART12_LANGUAGE_CODE_GLG":         104,
		"ISO639_PART12_LANGUAGE_CODE_GN":          105,
		"ISO639_PART12_LANGUAGE_CODE_GRN":         106,
		"ISO639_PART12_LANGUAGE_CODE_GU":          107,
		"ISO639_PART12_LANGUAGE_CODE_GUJ":         108,
		"ISO639_PART12_LANGUAGE_CODE_GV":          109,
		"ISO639_PART12_LANGUAGE_CODE_GLV":         110,
		"ISO639_PART12_LANGUAGE_CODE_HA":          111,
		"ISO639_PART12_LANGUAGE_CODE_HAU":         112,
		"ISO639_PART12_LANGUAGE_CODE_HE":          113,
		"ISO639_PART12_LANGUAGE_CODE_HEB":         114,
		"ISO639_PART12_LANGUAGE_CODE_HI":          115,
		"ISO639_PART12_LANGUAGE_CODE_HIN":         116,
		"ISO639_PART12_LANGUAGE_CODE_HO":          117,
		"ISO639_PART12_LANGUAGE_CODE_HMO":         118,
		"ISO639_PART12_LANGUAGE_CODE_HR":          119,
		"ISO639_PART12_LANGUAGE_CODE_HRV":         120,
		"ISO639_PART12_LANGUAGE_CODE_HT":          121,
		"ISO639_PART12_LANGUAGE_CODE_HAT":         122,
		"ISO639_PART12_LANGUAGE_CODE_HU":          123,
		"ISO639_PART12_LANGUAGE_CODE_HUN":         124,
		"ISO639_PART12_LANGUAGE_CODE_HY":          125,
		"ISO639_PART12_LANGUAGE_CODE_HYE":         126,
		"ISO639_PART12_LANGUAGE_CODE_HZ":          127,
		"ISO639_PART12_LANGUAGE_CODE_HER":         128,
		"ISO639_PART12_LANGUAGE_CODE_IA":          129,
		"ISO639_PART12_LANGUAGE_CODE_INA":         130,
		"ISO639_PART12_LANGUAGE_CODE_ID":          131,
		"ISO639_PART12_LANGUAGE_CODE_IND":         132,
		"ISO639_PART12_LANGUAGE_CODE_IE":          133,
		"ISO639_PART12_LANGUAGE_CODE_ILE":         134,
		"ISO639_PART12_LANGUAGE_CODE_IG":          135,
		"ISO639_PART12_LANGUAGE_CODE_IBO":         136,
		"ISO639_PART12_LANGUAGE_CODE_II":          137,
		"ISO639_PART12_LANGUAGE_CODE_III":         138,
		"ISO639_PART12_LANGUAGE_CODE_IK":          139,
		"ISO639_PART12_LANGUAGE_CODE_IPK":         140,
		"ISO639_PART12_LANGUAGE_CODE_IO":          141,
		"ISO639_PART12_LANGUAGE_CODE_IDO":         142,
		"ISO639_PART12_LANGUAGE_CODE_IS":          143,
		"ISO639_PART12_LANGUAGE_CODE_ISL":         144,
		"ISO639_PART12_LANGUAGE_CODE_IT":          145,
		"ISO639_PART12_LANGUAGE_CODE_ITA":         146,
		"ISO639_PART12_LANGUAGE_CODE_IU":          147,
		"ISO639_PART12_LANGUAGE_CODE_IKU":         148,
		"ISO639_PART12_LANGUAGE_CODE_JA":          149,
		"ISO639_PART12_LANGUAGE_CODE_JPN":         150,
		"ISO639_PART12_LANGUAGE_CODE_JV":          151,
		"ISO639_PART12_LANGUAGE_CODE_JAV":         152,
		"ISO639_PART12_LANGUAGE_CODE_KA":          153,
		"ISO639_PART12_LANGUAGE_CODE_KAT":         154,
		"ISO639_PART12_LANGUAGE_CODE_KG":          155,
		"ISO639_PART12_LANGUAGE_CODE_KON":         156,
		"ISO639_PART12_LANGUAGE_CODE_KI":          157,
		"ISO639_PART12_LANGUAGE_CODE_KIK":         158,
		"ISO639_PART12_LANGUAGE_CODE_KJ":          159,
		"ISO639_PART12_LANGUAGE_CODE_KUA":         160,
		"ISO639_PART12_LANGUAGE_CODE_KK":          161,
		"ISO639_PART12_LANGUAGE_CODE_KAZ":         162,
		"ISO639_PART12_LANGUAGE_CODE_KL":          163,
		"ISO639_PART12_LANGUAGE_CODE_KAL":         164,
		"ISO639_PART12_LANGUAGE_CODE_KM":          165,
		"ISO639_PART12_LANGUAGE_CODE_KHM":         166,
		"ISO639_PART12_LANGUAGE_CODE_KN":          167,
		"ISO639_PART12_LANGUAGE_CODE_KAN":         168,
		"ISO639_PART12_LANGUAGE_CODE_KO":          169,
		"ISO639_PART12_LANGUAGE_CODE_KOR":         170,
		"ISO639_PART12_LANGUAGE_CODE_KR":          171,
		"ISO639_PART12_LANGUAGE_CODE_KAU":         172,
		"ISO639_PART12_LANGUAGE_CODE_KS":          173,
		"ISO639_PART12_LANGUAGE_CODE_KAS":         174,
		"ISO639_PART12_LANGUAGE_CODE_KU":          175,
		"ISO639_PART12_LANGUAGE_CODE_KUR":         176,
		"ISO639_PART12_LANGUAGE_CODE_KV":          177,
		"ISO639_PART12_LANGUAGE_CODE_KOM":         178,
		"ISO639_PART12_LANGUAGE_CODE_KW":          179,
		"ISO639_PART12_LANGUAGE_CODE_COR":         180,
		"ISO639_PART12_LANGUAGE_CODE_KY":          181,
		"ISO639_PART12_LANGUAGE_CODE_KIR":         182,
		"ISO639_PART12_LANGUAGE_CODE_LA":          183,
		"ISO639_PART12_LANGUAGE_CODE_LAT":         184,
		"ISO639_PART12_LANGUAGE_CODE_LB":          185,
		"ISO639_PART12_LANGUAGE_CODE_LTZ":         186,
		"ISO639_PART12_LANGUAGE_CODE_LG":          187,
		"ISO639_PART12_LANGUAGE_CODE_LUG":         188,
		"ISO639_PART12_LANGUAGE_CODE_LI":          189,
		"ISO639_PART12_LANGUAGE_CODE_LIM":         190,
		"ISO639_PART12_LANGUAGE_CODE_LN":          191,
		"ISO639_PART12_LANGUAGE_CODE_LIN":         192,
		"ISO639_PART12_LANGUAGE_CODE_LO":          193,
		"ISO639_PART12_LANGUAGE_CODE_LAO":         194,
		"ISO639_PART12_LANGUAGE_CODE_LT":          195,
		"ISO639_PART12_LANGUAGE_CODE_LIT":         196,
		"ISO639_PART12_LANGUAGE_CODE_LU":          197,
		"ISO639_PART12_LANGUAGE_CODE_LUB":         198,
		"ISO639_PART12_LANGUAGE_CODE_LV":          199,
		"ISO639_PART12_LANGUAGE_CODE_LAV":         200,
		"ISO639_PART12_LANGUAGE_CODE_MG":          201,
		"ISO639_PART12_LANGUAGE_CODE_MLG":         202,
		"ISO639_PART12_LANGUAGE_CODE_MH":          203,
		"ISO639_PART12_LANGUAGE_CODE_MAH":         204,
		"ISO639_PART12_LANGUAGE_CODE_MI":          205,
		"ISO639_PART12_LANGUAGE_CODE_MRI":         206,
		"ISO639_PART12_LANGUAGE_CODE_MK":          207,
		"ISO639_PART12_LANGUAGE_CODE_MKD":         208,
		"ISO639_PART12_LANGUAGE_CODE_ML":          209,
		"ISO639_PART12_LANGUAGE_CODE_MAL":         210,
		"ISO639_PART12_LANGUAGE_CODE_MN":          211,
		"ISO639_PART12_LANGUAGE_CODE_MON":         212,
		"ISO639_PART12_LANGUAGE_CODE_MO":          213,
		"ISO639_PART12_LANGUAGE_CODE_MR":          214,
		"ISO639_PART12_LANGUAGE_CODE_MAR":         215,
		"ISO639_PART12_LANGUAGE_CODE_MS":          216,
		"ISO639_PART12_LANGUAGE_CODE_MSA":         217,
		"ISO639_PART12_LANGUAGE_CODE_MT":          218,
		"ISO639_PART12_LANGUAGE_CODE_MLT":         219,
		"ISO639_PART12_LANGUAGE_CODE_MY":          220,
		"ISO639_PART12_LANGUAGE_CODE_MYA":         221,
		"ISO639_PART12_LANGUAGE_CODE_NA":          222,
		"ISO639_PART12_LANGUAGE_CODE_NAU":         223,
		"ISO639_PART12_LANGUAGE_CODE_NB":          224,
		"ISO639_PART12_LANGUAGE_CODE_NOB":         225,
		"ISO639_PART12_LANGUAGE_CODE_ND":          226,
		"ISO639_PART12_LANGUAGE_CODE_NDE":         227,
		"ISO639_PART12_LANGUAGE_CODE_NE":          228,
		"ISO639_PART12_LANGUAGE_CODE_NEP":         229,
		"ISO639_PART12_LANGUAGE_CODE_NG":          230,
		"ISO639_PART12_LANGUAGE_CODE_NDO":         231,
		"ISO639_PART12_LANGUAGE_CODE_NL":          232,
		"ISO639_PART12_LANGUAGE_CODE_NLD":         233,
		"ISO639_PART12_LANGUAGE_CODE_NN":          234,
		"ISO639_PART12_LANGUAGE_CODE_NNO":         235,
		"ISO639_PART12_LANGUAGE_CODE_NO":          236,
		"ISO639_PART12_LANGUAGE_CODE_NOR":         237,
		"ISO639_PART12_LANGUAGE_CODE_NR":          238,
		"ISO639_PART12_LANGUAGE_CODE_NBL":         239,
		"ISO639_PART12_LANGUAGE_CODE_NV":          240,
		"ISO639_PART12_LANGUAGE_CODE_NAV":         241,
		"ISO639_PART12_LANGUAGE_CODE_NY":          242,
		"ISO639_PART12_LANGUAGE_CODE_NYA":         243,
		"ISO639_PART12_LANGUAGE_CODE_OC":          244,
		"ISO639_PART12_LANGUAGE_CODE_OCI":         245,
		"ISO639_PART12_LANGUAGE_CODE_OJ":          246,
		"ISO639_PART12_LANGUAGE_CODE_OJI":         247,
		"ISO639_PART12_LANGUAGE_CODE_OM":          248,
		"ISO639_PART12_LANGUAGE_CODE_ORM":         249,
		"ISO639_PART12_LANGUAGE_CODE_OR":          250,
		"ISO639_PART12_LANGUAGE_CODE_ORI":         251,
		"ISO639_PART12_LANGUAGE_CODE_OS":          252,
		"ISO639_PART12_LANGUAGE_CODE_OSS":         253,
		"ISO639_PART12_LANGUAGE_CODE_PA":          254,
		"ISO639_PART12_LANGUAGE_CODE_PAN":         255,
		"ISO639_PART12_LANGUAGE_CODE_PI":          256,
		"ISO639_PART12_LANGUAGE_CODE_PLI":         257,
		"ISO639_PART12_LANGUAGE_CODE_PL":          258,
		"ISO639_PART12_LANGUAGE_CODE_POL":         259,
		"ISO639_PART12_LANGUAGE_CODE_PS":          260,
		"ISO639_PART12_LANGUAGE_CODE_PUS":         261,
		"ISO639_PART12_LANGUAGE_CODE_PT":          262,
		"ISO639_PART12_LANGUAGE_CODE_POR":         263,
		"ISO639_PART12_LANGUAGE_CODE_QU":          264,
		"ISO639_PART12_LANGUAGE_CODE_QUE":         265,
		"ISO639_PART12_LANGUAGE_CODE_RM":          266,
		"ISO639_PART12_LANGUAGE_CODE_ROH":         267,
		"ISO639_PART12_LANGUAGE_CODE_RN":          268,
		"ISO639_PART12_LANGUAGE_CODE_RUN":         269,
		"ISO639_PART12_LANGUAGE_CODE_RO":          270,
		"ISO639_PART12_LANGUAGE_CODE_RON":         271,
		"ISO639_PART12_LANGUAGE_CODE_RU":          272,
		"ISO639_PART12_LANGUAGE_CODE_RUS":         273,
		"ISO639_PART12_LANGUAGE_CODE_RW":          274,
		"ISO639_PART12_LANGUAGE_CODE_KIN":         275,
		"ISO639_PART12_LANGUAGE_CODE_SA":          276,
		"ISO639_PART12_LANGUAGE_CODE_SAN":         277,
		"ISO639_PART12_LANGUAGE_CODE_SC":          278,
		"ISO639_PART12_LANGUAGE_CODE_SRD":         279,
		"ISO639_PART12_LANGUAGE_CODE_SD":          280,
		"ISO639_PART12_LANGUAGE_CODE_SND":         281,
		"ISO639_PART12_LANGUAGE_CODE_SE":          282,
		"ISO639_PART12_LANGUAGE_CODE_SME":         283,
		"ISO639_PART12_LANGUAGE_CODE_SG":          284,
		"ISO639_PART12_LANGUAGE_CODE_SAG":         285,
		"ISO639_PART12_LANGUAGE_CODE_SI":          286,
		"ISO639_PART12_LANGUAGE_CODE_SIN":         287,
		"ISO639_PART12_LANGUAGE_CODE_SK":          288,
		"ISO639_PART12_LANGUAGE_CODE_SLK":         289,
		"ISO639_PART12_LANGUAGE_CODE_SL":          290,
		"ISO639_PART12_LANGUAGE_CODE_SLV":         291,
		"ISO639_PART12_LANGUAGE_CODE_SM":          292,
		"ISO639_PART12_LANGUAGE_CODE_SMO":         293,
		"ISO639_PART12_LANGUAGE_CODE_SN":          294,
		"ISO639_PART12_LANGUAGE_CODE_SNA":         295,
		"ISO639_PART12_LANGUAGE_CODE_SO":          296,
		"ISO639_PART12_LANGUAGE_CODE_SOM":         297,
		"ISO639_PART12_LANGUAGE_CODE_SQ":          298,
		"ISO639_PART12_LANGUAGE_CODE_SQI":         299,
		"ISO639_PART12_LANGUAGE_CODE_SR":          300,
		"ISO639_PART12_LANGUAGE_CODE_SRP":         301,
		"ISO639_PART12_LANGUAGE_CODE_SS":          302,
		"ISO639_PART12_LANGUAGE_CODE_SSW":         303,
		"ISO639_PART12_LANGUAGE_CODE_ST":          304,
		"ISO639_PART12_LANGUAGE_CODE_SOT":         305,
		"ISO639_PART12_LANGUAGE_CODE_SU":          306,
		"ISO639_PART12_LANGUAGE_CODE_SUN":         307,
		"ISO639_PART12_LANGUAGE_CODE_SV":          308,
		"ISO639_PART12_LANGUAGE_CODE_SWE":         309,
		"ISO639_PART12_LANGUAGE_CODE_SW":          310,
		"ISO639_PART12_LANGUAGE_CODE_SWA":         311,
		"ISO639_PART12_LANGUAGE_CODE_TA":          312,
		"ISO639_PART12_LANGUAGE_CODE_TAM":         313,
		"ISO639_PART12_LANGUAGE_CODE_TE":          314,
		"ISO639_PART12_LANGUAGE_CODE_TEL":         315,
		"ISO639_PART12_LANGUAGE_CODE_TG":          316,
		"ISO639_PART12_LANGUAGE_CODE_TGK":         317,
		"ISO639_PART12_LANGUAGE_CODE_TH":          318,
		"ISO639_PART12_LANGUAGE_CODE_THA":         319,
		"ISO639_PART12_LANGUAGE_CODE_TI":          320,
		"ISO639_PART12_LANGUAGE_CODE_TIR":         321,
		"ISO639_PART12_LANGUAGE_CODE_TK":          322,
		"ISO639_PART12_LANGUAGE_CODE_TUK":         323,
		"ISO639_PART12_LANGUAGE_CODE_TL":          324,
		"ISO639_PART12_LANGUAGE_CODE_TGL":         325,
		"ISO639_PART12_LANGUAGE_CODE_TN":          326,
		"ISO639_PART12_LANGUAGE_CODE_TSN":         327,
		"ISO639_PART12_LANGUAGE_CODE_TO":          328,
		"ISO639_PART12_LANGUAGE_CODE_TON":         329,
		"ISO639_PART12_LANGUAGE_CODE_TR":          330,
		"ISO639_PART12_LANGUAGE_CODE_TUR":         331,
		"ISO639_PART12_LANGUAGE_CODE_TS":          332,
		"ISO639_PART12_LANGUAGE_CODE_TSO":         333,
		"ISO639_PART12_LANGUAGE_CODE_TT":          334,
		"ISO639_PART12_LANGUAGE_CODE_TAT":         335,
		"ISO639_PART12_LANGUAGE_CODE_TW":          336,
		"ISO639_PART12_LANGUAGE_CODE_TWI":         337,
		"ISO639_PART12_LANGUAGE_CODE_TY":          338,
		"ISO639_PART12_LANGUAGE_CODE_TAH":         339,
		"ISO639_PART12_LANGUAGE_CODE_UG":          340,
		"ISO639_PART12_LANGUAGE_CODE_UIG":         341,
		"ISO639_PART12_LANGUAGE_CODE_UK":          342,
		"ISO639_PART12_LANGUAGE_CODE_UKR":         343,
		"ISO639_PART12_LANGUAGE_CODE_UR":          344,
		"ISO639_PART12_LANGUAGE_CODE_URD":         345,
		"ISO639_PART12_LANGUAGE_CODE_UZ":          346,
		"ISO639_PART12_LANGUAGE_CODE_UZB":         347,
		"ISO639_PART12_LANGUAGE_CODE_VE":          348,
		"ISO639_PART12_LANGUAGE_CODE_VEN":         349,
		"ISO639_PART12_LANGUAGE_CODE_VI":          350,
		"ISO639_PART12_LANGUAGE_CODE_VIE":         351,
		"ISO639_PART12_LANGUAGE_CODE_VO":          352,
		"ISO639_PART12_LANGUAGE_CODE_VOL":         353,
		"ISO639_PART12_LANGUAGE_CODE_WA":          354,
		"ISO639_PART12_LANGUAGE_CODE_WLN":         355,
		"ISO639_PART12_LANGUAGE_CODE_WO":          356,
		"ISO639_PART12_LANGUAGE_CODE_WOL":         357,
		"ISO639_PART12_LANGUAGE_CODE_XH":          358,
		"ISO639_PART12_LANGUAGE_CODE_XHO":         359,
		"ISO639_PART12_LANGUAGE_CODE_YI":          360,
		"ISO639_PART12_LANGUAGE_CODE_YID":         361,
		"ISO639_PART12_LANGUAGE_CODE_YO":          362,
		"ISO639_PART12_LANGUAGE_CODE_YOR":         363,
		"ISO639_PART12_LANGUAGE_CODE_ZA":          364,
		"ISO639_PART12_LANGUAGE_CODE_ZHA":         365,
		"ISO639_PART12_LANGUAGE_CODE_ZH":          366,
		"ISO639_PART12_LANGUAGE_CODE_ZHO":         367,
		"ISO639_PART12_LANGUAGE_CODE_ZU":          368,
		"ISO639_PART12_LANGUAGE_CODE_ZUL":         369,
		"ISO639_PART12_LANGUAGE_CODE_ACE":         370,
		"ISO639_PART12_LANGUAGE_CODE_ACH":         371,
		"ISO639_PART12_LANGUAGE_CODE_ADA":         372,
		"ISO639_PART12_LANGUAGE_CODE_ADY":         373,
		"ISO639_PART12_LANGUAGE_CODE_AFA":         374,
		"ISO639_PART12_LANGUAGE_CODE_AFH":         375,
		"ISO639_PART12_LANGUAGE_CODE_AIN":         376,
		"ISO639_PART12_LANGUAGE_CODE_AKK":         377,
		"ISO639_PART12_LANGUAGE_CODE_ALE":         378,
		"ISO639_PART12_LANGUAGE_CODE_ALG":         379,
		"ISO639_PART12_LANGUAGE_CODE_ALT":         380,
		"ISO639_PART12_LANGUAGE_CODE_ANG":         381,
		"ISO639_PART12_LANGUAGE_CODE_ANP":         382,
		"ISO639_PART12_LANGUAGE_CODE_APA":         383,
		"ISO639_PART12_LANGUAGE_CODE_ARC":         384,
		"ISO639_PART12_LANGUAGE_CODE_ARN":         385,
		"ISO639_PART12_LANGUAGE_CODE_ARP":         386,
		"ISO639_PART12_LANGUAGE_CODE_ART":         387,
		"ISO639_PART12_LANGUAGE_CODE_ARW":         388,
		"ISO639_PART12_LANGUAGE_CODE_AST":         389,
		"ISO639_PART12_LANGUAGE_CODE_ATH":         390,
		"ISO639_PART12_LANGUAGE_CODE_AUS":         391,
		"ISO639_PART12_LANGUAGE_CODE_AWA":         392,
		"ISO639_PART12_LANGUAGE_CODE_BAD":         393,
		"ISO639_PART12_LANGUAGE_CODE_BAI":         394,
		"ISO639_PART12_LANGUAGE_CODE_BAL":         395,
		"ISO639_PART12_LANGUAGE_CODE_BAN":         396,
		"ISO639_PART12_LANGUAGE_CODE_BAS":         397,
		"ISO639_PART12_LANGUAGE_CODE_BAT":         398,
		"ISO639_PART12_LANGUAGE_CODE_BEJ":         399,
		"ISO639_PART12_LANGUAGE_CODE_BEM":         400,
		"ISO639_PART12_LANGUAGE_CODE_BER":         401,
		"ISO639_PART12_LANGUAGE_CODE_BGC":         402,
		"ISO639_PART12_LANGUAGE_CODE_BHO":         403,
		"ISO639_PART12_LANGUAGE_CODE_BIK":         404,
		"ISO639_PART12_LANGUAGE_CODE_BIN":         405,
		"ISO639_PART12_LANGUAGE_CODE_BLA":         406,
		"ISO639_PART12_LANGUAGE_CODE_BNT":         407,
		"ISO639_PART12_LANGUAGE_CODE_BRA":         408,
		"ISO639_PART12_LANGUAGE_CODE_BTK":         409,
		"ISO639_PART12_LANGUAGE_CODE_BUA":         410,
		"ISO639_PART12_LANGUAGE_CODE_BUG":         411,
		"ISO639_PART12_LANGUAGE_CODE_BYN":         412,
		"ISO639_PART12_LANGUAGE_CODE_CAD":         413,
		"ISO639_PART12_LANGUAGE_CODE_CAI":         414,
		"ISO639_PART12_LANGUAGE_CODE_CAR":         415,
		"ISO639_PART12_LANGUAGE_CODE_CAU":         416,
		"ISO639_PART12_LANGUAGE_CODE_CEB":         417,
		"ISO639_PART12_LANGUAGE_CODE_CEL":         418,
		"ISO639_PART12_LANGUAGE_CODE_CHB":         419,
		"ISO639_PART12_LANGUAGE_CODE_CHG":         420,
		"ISO639_PART12_LANGUAGE_CODE_CHK":         421,
		"ISO639_PART12_LANGUAGE_CODE_CHM":         422,
		"ISO639_PART12_LANGUAGE_CODE_CHN":         423,
		"ISO639_PART12_LANGUAGE_CODE_CHO":         424,
		"ISO639_PART12_LANGUAGE_CODE_CHP":         425,
		"ISO639_PART12_LANGUAGE_CODE_CHR":         426,
		"ISO639_PART12_LANGUAGE_CODE_CHY":         427,
		"ISO639_PART12_LANGUAGE_CODE_CMC":         428,
		"ISO639_PART12_LANGUAGE_CODE_CNR":         429,
		"ISO639_PART12_LANGUAGE_CODE_COP":         430,
		"ISO639_PART12_LANGUAGE_CODE_CPE":         431,
		"ISO639_PART12_LANGUAGE_CODE_CPF":         432,
		"ISO639_PART12_LANGUAGE_CODE_CPP":         433,
		"ISO639_PART12_LANGUAGE_CODE_CRH":         434,
		"ISO639_PART12_LANGUAGE_CODE_CRP":         435,
		"ISO639_PART12_LANGUAGE_CODE_CSB":         436,
		"ISO639_PART12_LANGUAGE_CODE_CUS":         437,
		"ISO639_PART12_LANGUAGE_CODE_DAK":         438,
		"ISO639_PART12_LANGUAGE_CODE_DAR":         439,
		"ISO639_PART12_LANGUAGE_CODE_DAY":         440,
		"ISO639_PART12_LANGUAGE_CODE_DEL":         441,
		"ISO639_PART12_LANGUAGE_CODE_DEN":         442,
		"ISO639_PART12_LANGUAGE_CODE_DGR":         443,
		"ISO639_PART12_LANGUAGE_CODE_DIN":         444,
		"ISO639_PART12_LANGUAGE_CODE_DOI":         445,
		"ISO639_PART12_LANGUAGE_CODE_DRA":         446,
		"ISO639_PART12_LANGUAGE_CODE_DSB":         447,
		"ISO639_PART12_LANGUAGE_CODE_DUA":         448,
		"ISO639_PART12_LANGUAGE_CODE_DUM":         449,
		"ISO639_PART12_LANGUAGE_CODE_DYU":         450,
		"ISO639_PART12_LANGUAGE_CODE_EFI":         451,
		"ISO639_PART12_LANGUAGE_CODE_EGY":         452,
		"ISO639_PART12_LANGUAGE_CODE_EKA":         453,
		"ISO639_PART12_LANGUAGE_CODE_ELX":         454,
		"ISO639_PART12_LANGUAGE_CODE_ENM":         455,
		"ISO639_PART12_LANGUAGE_CODE_EWO":         456,
		"ISO639_PART12_LANGUAGE_CODE_FAN":         457,
		"ISO639_PART12_LANGUAGE_CODE_FAT":         458,
		"ISO639_PART12_LANGUAGE_CODE_FIL":         459,
		"ISO639_PART12_LANGUAGE_CODE_FIU":         460,
		"ISO639_PART12_LANGUAGE_CODE_FON":         461,
		"ISO639_PART12_LANGUAGE_CODE_FRM":         462,
		"ISO639_PART12_LANGUAGE_CODE_FRO":         463,
		"ISO639_PART12_LANGUAGE_CODE_FRR":         464,
		"ISO639_PART12_LANGUAGE_CODE_FRS":         465,
		"ISO639_PART12_LANGUAGE_CODE_FUR":         466,
		"ISO639_PART12_LANGUAGE_CODE_GAA":         467,
		"ISO639_PART12_LANGUAGE_CODE_GAY":         468,
		"ISO639_PART12_LANGUAGE_CODE_GBA":         469,
		"ISO639_PART12_LANGUAGE_CODE_GEM":         470,
		"ISO639_PART12_LANGUAGE_CODE_GEZ":         471,
		"ISO639_PART12_LANGUAGE_CODE_GIL":         472,
		"ISO639_PART12_LANGUAGE_CODE_GMH":         473,
		"ISO639_PART12_LANGUAGE_CODE_GOH":         474,
		"ISO639_PART12_LANGUAGE_CODE_GON":         475,
		"ISO639_PART12_LANGUAGE_CODE_GOR":         476,
		"ISO639_PART12_LANGUAGE_CODE_GOT":         477,
		"ISO639_PART12_LANGUAGE_CODE_GRB":         478,
		"ISO639_PART12_LANGUAGE_CODE_GRC":         479,
		"ISO639_PART12_LANGUAGE_CODE_GSW":         480,
		"ISO639_PART12_LANGUAGE_CODE_GWI":         481,
		"ISO639_PART12_LANGUAGE_CODE_HAI":         482,
		"ISO639_PART12_LANGUAGE_CODE_HAW":         483,
		"ISO639_PART12_LANGUAGE_CODE_HIL":         484,
		"ISO639_PART12_LANGUAGE_CODE_HIM":         485,
		"ISO639_PART12_LANGUAGE_CODE_HIT":         486,
		"ISO639_PART12_LANGUAGE_CODE_HMN":         487,
		"ISO639_PART12_LANGUAGE_CODE_HSB":         488,
		"ISO639_PART12_LANGUAGE_CODE_HUP":         489,
		"ISO639_PART12_LANGUAGE_CODE_IBA":         490,
		"ISO639_PART12_LANGUAGE_CODE_IJO":         491,
		"ISO639_PART12_LANGUAGE_CODE_ILO":         492,
		"ISO639_PART12_LANGUAGE_CODE_INC":         493,
		"ISO639_PART12_LANGUAGE_CODE_INE":         494,
		"ISO639_PART12_LANGUAGE_CODE_INH":         495,
		"ISO639_PART12_LANGUAGE_CODE_IRA":         496,
		"ISO639_PART12_LANGUAGE_CODE_IRO":         497,
		"ISO639_PART12_LANGUAGE_CODE_JBO":         498,
		"ISO639_PART12_LANGUAGE_CODE_JPR":         499,
		"ISO639_PART12_LANGUAGE_CODE_JRB":         500,
		"ISO639_PART12_LANGUAGE_CODE_KAA":         501,
		"ISO639_PART12_LANGUAGE_CODE_KAB":         502,
		"ISO639_PART12_LANGUAGE_CODE_KAC":         503,
		"ISO639_PART12_LANGUAGE_CODE_KAM":         504,
		"ISO639_PART12_LANGUAGE_CODE_KAR":         505,
		"ISO639_PART12_LANGUAGE_CODE_KAW":         506,
		"ISO639_PART12_LANGUAGE_CODE_KBD":         507,
		"ISO639_PART12_LANGUAGE_CODE_KHA":         508,
		"ISO639_PART12_LANGUAGE_CODE_KHI":         509,
		"ISO639_PART12_LANGUAGE_CODE_KHO":         510,
		"ISO639_PART12_LANGUAGE_CODE_KMB":         511,
		"ISO639_PART12_LANGUAGE_CODE_KOK":         512,
		"ISO639_PART12_LANGUAGE_CODE_KOS":         513,
		"ISO639_PART12_LANGUAGE_CODE_KPE":         514,
		"ISO639_PART12_LANGUAGE_CODE_KRC":         515,
		"ISO639_PART12_LANGUAGE_CODE_KRL":         516,
		"ISO639_PART12_LANGUAGE_CODE_KRO":         517,
		"ISO639_PART12_LANGUAGE_CODE_KRU":         518,
		"ISO639_PART12_LANGUAGE_CODE_KUM":         519,
		"ISO639_PART12_LANGUAGE_CODE_KUT":         520,
		"ISO639_PART12_LANGUAGE_CODE_LAD":         521,
		"ISO639_PART12_LANGUAGE_CODE_LAH":         522,
		"ISO639_PART12_LANGUAGE_CODE_LAM":         523,
		"ISO639_PART12_LANGUAGE_CODE_LEZ":         524,
		"ISO639_PART12_LANGUAGE_CODE_LOL":         525,
		"ISO639_PART12_LANGUAGE_CODE_LOZ":         526,
		"ISO639_PART12_LANGUAGE_CODE_LUA":         527,
		"ISO639_PART12_LANGUAGE_CODE_LUI":         528,
		"ISO639_PART12_LANGUAGE_CODE_LUN":         529,
		"ISO639_PART12_LANGUAGE_CODE_LUO":         530,
		"ISO639_PART12_LANGUAGE_CODE_LUS":         531,
		"ISO639_PART12_LANGUAGE_CODE_MAD":         532,
		"ISO639_PART12_LANGUAGE_CODE_MAG":         533,
		"ISO639_PART12_LANGUAGE_CODE_MAI":         534,
		"ISO639_PART12_LANGUAGE_CODE_MAK":         535,
		"ISO639_PART12_LANGUAGE_CODE_MAN":         536,
		"ISO639_PART12_LANGUAGE_CODE_MAP":         537,
		"ISO639_PART12_LANGUAGE_CODE_MAS":         538,
		"ISO639_PART12_LANGUAGE_CODE_MDF":         539,
		"ISO639_PART12_LANGUAGE_CODE_MDR":         540,
		"ISO639_PART12_LANGUAGE_CODE_MEN":         541,
		"ISO639_PART12_LANGUAGE_CODE_MGA":         542,
		"ISO639_PART12_LANGUAGE_CODE_MIC":         543,
		"ISO639_PART12_LANGUAGE_CODE_MIN":         544,
		"ISO639_PART12_LANGUAGE_CODE_MIS":         545,
		"ISO639_PART12_LANGUAGE_CODE_MKH":         546,
		"ISO639_PART12_LANGUAGE_CODE_MNC":         547,
		"ISO639_PART12_LANGUAGE_CODE_MNI":         548,
		"ISO639_PART12_LANGUAGE_CODE_MNO":         549,
		"ISO639_PART12_LANGUAGE_CODE_MOH":         550,
		"ISO639_PART12_LANGUAGE_CODE_MOS":         551,
		"ISO639_PART12_LANGUAGE_CODE_MUL":         552,
		"ISO639_PART12_LANGUAGE_CODE_MUN":         553,
		"ISO639_PART12_LANGUAGE_CODE_MUS":         554,
		"ISO639_PART12_LANGUAGE_CODE_MWL":         555,
		"ISO639_PART12_LANGUAGE_CODE_MWR":         556,
		"ISO639_PART12_LANGUAGE_CODE_MYN":         557,
		"ISO639_PART12_LANGUAGE_CODE_MYV":         558,
		"ISO639_PART12_LANGUAGE_CODE_NAH":         559,
		"ISO639_PART12_LANGUAGE_CODE_NAI":         560,
		"ISO639_PART12_LANGUAGE_CODE_NAP":         561,
		"ISO639_PART12_LANGUAGE_CODE_NDS":         562,
		"ISO639_PART12_LANGUAGE_CODE_NEW":         563,
		"ISO639_PART12_LANGUAGE_CODE_NIA":         564,
		"ISO639_PART12_LANGUAGE_CODE_NIC":         565,
		"ISO639_PART12_LANGUAGE_CODE_NIU":         566,
		"ISO639_PART12_LANGUAGE_CODE_NOG":         567,
		"ISO639_PART12_LANGUAGE_CODE_NON":         568,
		"ISO639_PART12_LANGUAGE_CODE_NQO":         569,
		"ISO639_PART12_LANGUAGE_CODE_NSO":         570,
		"ISO639_PART12_LANGUAGE_CODE_NUB":         571,
		"ISO639_PART12_LANGUAGE_CODE_NWC":         572,
		"ISO639_PART12_LANGUAGE_CODE_NYM":         573,
		"ISO639_PART12_LANGUAGE_CODE_NYN":         574,
		"ISO639_PART12_LANGUAGE_CODE_NYO":         575,
		"ISO639_PART12_LANGUAGE_CODE_NZI":         576,
		"ISO639_PART12_LANGUAGE_CODE_OSA":         577,
		"ISO639_PART12_LANGUAGE_CODE_OTA":         578,
		"ISO639_PART12_LANGUAGE_CODE_OTO":         579,
		"ISO639_PART12_LANGUAGE_CODE_PAA":         580,
		"ISO639_PART12_LANGUAGE_CODE_PAG":         581,
		"ISO639_PART12_LANGUAGE_CODE_PAL":         582,
		"ISO639_PART12_LANGUAGE_CODE_PAM":         583,
		"ISO639_PART12_LANGUAGE_CODE_PAP":         584,
		"ISO639_PART12_LANGUAGE_CODE_PAU":         585,
		"ISO639_PART12_LANGUAGE_CODE_PEO":         586,
		"ISO639_PART12_LANGUAGE_CODE_PHI":         587,
		"ISO639_PART12_LANGUAGE_CODE_PHN":         588,
		"ISO639_PART12_LANGUAGE_CODE_PON":         589,
		"ISO639_PART12_LANGUAGE_CODE_PRA":         590,
		"ISO639_PART12_LANGUAGE_CODE_PRO":         591,
		"ISO639_PART12_LANGUAGE_CODE_QQA":         592,
		"ISO639_PART12_LANGUAGE_CODE_QQB":         593,
		"ISO639_PART12_LANGUAGE_CODE_QQC":         594,
		"ISO639_PART12_LANGUAGE_CODE_QQD":         595,
		"ISO639_PART12_LANGUAGE_CODE_QQE":         596,
		"ISO639_PART12_LANGUAGE_CODE_QQF":         597,
		"ISO639_PART12_LANGUAGE_CODE_QQG":         598,
		"ISO639_PART12_LANGUAGE_CODE_QQH":         599,
		"ISO639_PART12_LANGUAGE_CODE_QQI":         600,
		"ISO639_PART12_LANGUAGE_CODE_QQJ":         601,
		"ISO639_PART12_LANGUAGE_CODE_RAJ":         602,
		"ISO639_PART12_LANGUAGE_CODE_RAP":         603,
		"ISO639_PART12_LANGUAGE_CODE_RAR":         604,
		"ISO639_PART12_LANGUAGE_CODE_ROA":         605,
		"ISO639_PART12_LANGUAGE_CODE_ROM":         606,
		"ISO639_PART12_LANGUAGE_CODE_RUP":         607,
		"ISO639_PART12_LANGUAGE_CODE_SAD":         608,
		"ISO639_PART12_LANGUAGE_CODE_SAH":         609,
		"ISO639_PART12_LANGUAGE_CODE_SAI":         610,
		"ISO639_PART12_LANGUAGE_CODE_SAL":         611,
		"ISO639_PART12_LANGUAGE_CODE_SAM":         612,
		"ISO639_PART12_LANGUAGE_CODE_SAS":         613,
		"ISO639_PART12_LANGUAGE_CODE_SAT":         614,
		"ISO639_PART12_LANGUAGE_CODE_SCN":         615,
		"ISO639_PART12_LANGUAGE_CODE_SCO":         616,
		"ISO639_PART12_LANGUAGE_CODE_SEL":         617,
		"ISO639_PART12_LANGUAGE_CODE_SEM":         618,
		"ISO639_PART12_LANGUAGE_CODE_SGA":         619,
		"ISO639_PART12_LANGUAGE_CODE_SGN":         620,
		"ISO639_PART12_LANGUAGE_CODE_SHN":         621,
		"ISO639_PART12_LANGUAGE_CODE_SID":         622,
		"ISO639_PART12_LANGUAGE_CODE_SIO":         623,
		"ISO639_PART12_LANGUAGE_CODE_SIT":         624,
		"ISO639_PART12_LANGUAGE_CODE_SLA":         625,
		"ISO639_PART12_LANGUAGE_CODE_SMA":         626,
		"ISO639_PART12_LANGUAGE_CODE_SMI":         627,
		"ISO639_PART12_LANGUAGE_CODE_SMJ":         628,
		"ISO639_PART12_LANGUAGE_CODE_SMN":         629,
		"ISO639_PART12_LANGUAGE_CODE_SMS":         630,
		"ISO639_PART12_LANGUAGE_CODE_SNK":         631,
		"ISO639_PART12_LANGUAGE_CODE_SOG":         632,
		"ISO639_PART12_LANGUAGE_CODE_SON":         633,
		"ISO639_PART12_LANGUAGE_CODE_SRN":         634,
		"ISO639_PART12_LANGUAGE_CODE_SRR":         635,
		"ISO639_PART12_LANGUAGE_CODE_SSA":         636,
		"ISO639_PART12_LANGUAGE_CODE_SUK":         637,
		"ISO639_PART12_LANGUAGE_CODE_SUS":         638,
		"ISO639_PART12_LANGUAGE_CODE_SUX":         639,
		"ISO639_PART12_LANGUAGE_CODE_SYC":         640,
		"ISO639_PART12_LANGUAGE_CODE_SYR":         641,
		"ISO639_PART12_LANGUAGE_CODE_TAI":         642,
		"ISO639_PART12_LANGUAGE_CODE_TEM":         643,
		"ISO639_PART12_LANGUAGE_CODE_TER":         644,
		"ISO639_PART12_LANGUAGE_CODE_TET":         645,
		"ISO639_PART12_LANGUAGE_CODE_TIG":         646,
		"ISO639_PART12_LANGUAGE_CODE_TIV":         647,
		"ISO639_PART12_LANGUAGE_CODE_TKL":         648,
		"ISO639_PART12_LANGUAGE_CODE_TLH":         649,
		"ISO639_PART12_LANGUAGE_CODE_TLI":         650,
		"ISO639_PART12_LANGUAGE_CODE_TMH":         651,
		"ISO639_PART12_LANGUAGE_CODE_TOG":         652,
		"ISO639_PART12_LANGUAGE_CODE_TPI":         653,
		"ISO639_PART12_LANGUAGE_CODE_TSI":         654,
		"ISO639_PART12_LANGUAGE_CODE_TUM":         655,
		"ISO639_PART12_LANGUAGE_CODE_TUP":         656,
		"ISO639_PART12_LANGUAGE_CODE_TUT":         657,
		"ISO639_PART12_LANGUAGE_CODE_TVL":         658,
		"ISO639_PART12_LANGUAGE_CODE_TYV":         659,
		"ISO639_PART12_LANGUAGE_CODE_UDM":         660,
		"ISO639_PART12_LANGUAGE_CODE_UGA":         661,
		"ISO639_PART12_LANGUAGE_CODE_UMB":         662,
		"ISO639_PART12_LANGUAGE_CODE_UND":         663,
		"ISO639_PART12_LANGUAGE_CODE_VAI":         664,
		"ISO639_PART12_LANGUAGE_CODE_VOT":         665,
		"ISO639_PART12_LANGUAGE_CODE_WAK":         666,
		"ISO639_PART12_LANGUAGE_CODE_WAL":         667,
		"ISO639_PART12_LANGUAGE_CODE_WAR":         668,
		"ISO639_PART12_LANGUAGE_CODE_WAS":         669,
		"ISO639_PART12_LANGUAGE_CODE_WEN":         670,
		"ISO639_PART12_LANGUAGE_CODE_XAL":         671,
		"ISO639_PART12_LANGUAGE_CODE_YAO":         672,
		"ISO639_PART12_LANGUAGE_CODE_YAP":         673,
		"ISO639_PART12_LANGUAGE_CODE_YPK":         674,
		"ISO639_PART12_LANGUAGE_CODE_ZAP":         675,
		"ISO639_PART12_LANGUAGE_CODE_ZBL":         676,
		"ISO639_PART12_LANGUAGE_CODE_ZEN":         677,
		"ISO639_PART12_LANGUAGE_CODE_ZGH":         678,
		"ISO639_PART12_LANGUAGE_CODE_ZND":         679,
		"ISO639_PART12_LANGUAGE_CODE_ZUN":         680,
		"ISO639_PART12_LANGUAGE_CODE_ZXX":         681,
		"ISO639_PART12_LANGUAGE_CODE_ZZA":         682,
	}
)

func (x Iso639Part12LanguageCode) Enum() *Iso639Part12LanguageCode {
	p := new(Iso639Part12LanguageCode)
	*p = x
	return p
}

func (x Iso639Part12LanguageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Iso639Part12LanguageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[103].Descriptor()
}

func (Iso639Part12LanguageCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[103]
}

func (x Iso639Part12LanguageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Iso639Part12LanguageCode.Descriptor instead.
func (Iso639Part12LanguageCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{103}
}

type Iso639Part3LanguageCode int32

const (
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_UNSPECIFIED Iso639Part3LanguageCode = 0
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_AAA         Iso639Part3LanguageCode = 1
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_CMN         Iso639Part3LanguageCode = 2
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_GBM         Iso639Part3LanguageCode = 3
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_GCF         Iso639Part3LanguageCode = 4
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_HNE         Iso639Part3LanguageCode = 5
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_JAM         Iso639Part3LanguageCode = 6
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_KFY         Iso639Part3LanguageCode = 7
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_KHW         Iso639Part3LanguageCode = 8
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_MCM         Iso639Part3LanguageCode = 9
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_MUP         Iso639Part3LanguageCode = 10
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_SCK         Iso639Part3LanguageCode = 11
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_SCL         Iso639Part3LanguageCode = 12
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_SPV         Iso639Part3LanguageCode = 13
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_TCY         Iso639Part3LanguageCode = 14
	Iso639Part3LanguageCode_ISO639_PART3_LANGUAGE_CODE_YUE         Iso639Part3LanguageCode = 15
)

// Enum value maps for Iso639Part3LanguageCode.
var (
	Iso639Part3LanguageCode_name = map[int32]string{
		0:  "ISO639_PART3_LANGUAGE_CODE_UNSPECIFIED",
		1:  "ISO639_PART3_LANGUAGE_CODE_AAA",
		2:  "ISO639_PART3_LANGUAGE_CODE_CMN",
		3:  "ISO639_PART3_LANGUAGE_CODE_GBM",
		4:  "ISO639_PART3_LANGUAGE_CODE_GCF",
		5:  "ISO639_PART3_LANGUAGE_CODE_HNE",
		6:  "ISO639_PART3_LANGUAGE_CODE_JAM",
		7:  "ISO639_PART3_LANGUAGE_CODE_KFY",
		8:  "ISO639_PART3_LANGUAGE_CODE_KHW",
		9:  "ISO639_PART3_LANGUAGE_CODE_MCM",
		10: "ISO639_PART3_LANGUAGE_CODE_MUP",
		11: "ISO639_PART3_LANGUAGE_CODE_SCK",
		12: "ISO639_PART3_LANGUAGE_CODE_SCL",
		13: "ISO639_PART3_LANGUAGE_CODE_SPV",
		14: "ISO639_PART3_LANGUAGE_CODE_TCY",
		15: "ISO639_PART3_LANGUAGE_CODE_YUE",
	}
	Iso639Part3LanguageCode_value = map[string]int32{
		"ISO639_PART3_LANGUAGE_CODE_UNSPECIFIED": 0,
		"ISO639_PART3_LANGUAGE_CODE_AAA":         1,
		"ISO639_PART3_LANGUAGE_CODE_CMN":         2,
		"ISO639_PART3_LANGUAGE_CODE_GBM":         3,
		"ISO639_PART3_LANGUAGE_CODE_GCF":         4,
		"ISO639_PART3_LANGUAGE_CODE_HNE":         5,
		"ISO639_PART3_LANGUAGE_CODE_JAM":         6,
		"ISO639_PART3_LANGUAGE_CODE_KFY":         7,
		"ISO639_PART3_LANGUAGE_CODE_KHW":         8,
		"ISO639_PART3_LANGUAGE_CODE_MCM":         9,
		"ISO639_PART3_LANGUAGE_CODE_MUP":         10,
		"ISO639_PART3_LANGUAGE_CODE_SCK":         11,
		"ISO639_PART3_LANGUAGE_CODE_SCL":         12,
		"ISO639_PART3_LANGUAGE_CODE_SPV":         13,
		"ISO639_PART3_LANGUAGE_CODE_TCY":         14,
		"ISO639_PART3_LANGUAGE_CODE_YUE":         15,
	}
)

func (x Iso639Part3LanguageCode) Enum() *Iso639Part3LanguageCode {
	p := new(Iso639Part3LanguageCode)
	*p = x
	return p
}

func (x Iso639Part3LanguageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Iso639Part3LanguageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[104].Descriptor()
}

func (Iso639Part3LanguageCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[104]
}

func (x Iso639Part3LanguageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Iso639Part3LanguageCode.Descriptor instead.
func (Iso639Part3LanguageCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{104}
}

type IsoCurrencyCode int32

const (
	IsoCurrencyCode_ISO_CURRENCY_CODE_UNSPECIFIED IsoCurrencyCode = 0
	IsoCurrencyCode_ISO_CURRENCY_CODE_AED         IsoCurrencyCode = 1
	IsoCurrencyCode_ISO_CURRENCY_CODE_AFN         IsoCurrencyCode = 2
	IsoCurrencyCode_ISO_CURRENCY_CODE_ALL         IsoCurrencyCode = 3
	IsoCurrencyCode_ISO_CURRENCY_CODE_AMD         IsoCurrencyCode = 4
	IsoCurrencyCode_ISO_CURRENCY_CODE_AOA         IsoCurrencyCode = 5
	IsoCurrencyCode_ISO_CURRENCY_CODE_ARS         IsoCurrencyCode = 6
	IsoCurrencyCode_ISO_CURRENCY_CODE_AUD         IsoCurrencyCode = 7
	IsoCurrencyCode_ISO_CURRENCY_CODE_AWG         IsoCurrencyCode = 8
	IsoCurrencyCode_ISO_CURRENCY_CODE_AZN         IsoCurrencyCode = 9
	IsoCurrencyCode_ISO_CURRENCY_CODE_BAM         IsoCurrencyCode = 10
	IsoCurrencyCode_ISO_CURRENCY_CODE_BBD         IsoCurrencyCode = 11
	IsoCurrencyCode_ISO_CURRENCY_CODE_BDT         IsoCurrencyCode = 12
	IsoCurrencyCode_ISO_CURRENCY_CODE_BGN         IsoCurrencyCode = 13
	IsoCurrencyCode_ISO_CURRENCY_CODE_BHD         IsoCurrencyCode = 14
	IsoCurrencyCode_ISO_CURRENCY_CODE_BIF         IsoCurrencyCode = 15
	IsoCurrencyCode_ISO_CURRENCY_CODE_BMD         IsoCurrencyCode = 16
	IsoCurrencyCode_ISO_CURRENCY_CODE_BND         IsoCurrencyCode = 17
	IsoCurrencyCode_ISO_CURRENCY_CODE_BOB         IsoCurrencyCode = 18
	IsoCurrencyCode_ISO_CURRENCY_CODE_BOV         IsoCurrencyCode = 19
	IsoCurrencyCode_ISO_CURRENCY_CODE_BRL         IsoCurrencyCode = 20
	IsoCurrencyCode_ISO_CURRENCY_CODE_BSD         IsoCurrencyCode = 21
	IsoCurrencyCode_ISO_CURRENCY_CODE_BTN         IsoCurrencyCode = 22
	IsoCurrencyCode_ISO_CURRENCY_CODE_BWP         IsoCurrencyCode = 23
	IsoCurrencyCode_ISO_CURRENCY_CODE_BYR         IsoCurrencyCode = 24
	IsoCurrencyCode_ISO_CURRENCY_CODE_BZD         IsoCurrencyCode = 25
	IsoCurrencyCode_ISO_CURRENCY_CODE_CAD         IsoCurrencyCode = 26
	IsoCurrencyCode_ISO_CURRENCY_CODE_CDF         IsoCurrencyCode = 27
	IsoCurrencyCode_ISO_CURRENCY_CODE_CHF         IsoCurrencyCode = 28
	IsoCurrencyCode_ISO_CURRENCY_CODE_CLF         IsoCurrencyCode = 29
	IsoCurrencyCode_ISO_CURRENCY_CODE_CLP         IsoCurrencyCode = 30
	IsoCurrencyCode_ISO_CURRENCY_CODE_CNY         IsoCurrencyCode = 31
	IsoCurrencyCode_ISO_CURRENCY_CODE_COP         IsoCurrencyCode = 32
	IsoCurrencyCode_ISO_CURRENCY_CODE_COU         IsoCurrencyCode = 33
	IsoCurrencyCode_ISO_CURRENCY_CODE_CRC         IsoCurrencyCode = 34
	IsoCurrencyCode_ISO_CURRENCY_CODE_CUP         IsoCurrencyCode = 35
	IsoCurrencyCode_ISO_CURRENCY_CODE_CVE         IsoCurrencyCode = 36
	IsoCurrencyCode_ISO_CURRENCY_CODE_CZK         IsoCurrencyCode = 37
	IsoCurrencyCode_ISO_CURRENCY_CODE_DJF         IsoCurrencyCode = 38
	IsoCurrencyCode_ISO_CURRENCY_CODE_DKK         IsoCurrencyCode = 39
	IsoCurrencyCode_ISO_CURRENCY_CODE_DOP         IsoCurrencyCode = 40
	IsoCurrencyCode_ISO_CURRENCY_CODE_DZD         IsoCurrencyCode = 41
	IsoCurrencyCode_ISO_CURRENCY_CODE_EGP         IsoCurrencyCode = 42
	IsoCurrencyCode_ISO_CURRENCY_CODE_ERN         IsoCurrencyCode = 43
	IsoCurrencyCode_ISO_CURRENCY_CODE_ETB         IsoCurrencyCode = 44
	IsoCurrencyCode_ISO_CURRENCY_CODE_EUR         IsoCurrencyCode = 45
	IsoCurrencyCode_ISO_CURRENCY_CODE_FJD         IsoCurrencyCode = 46
	IsoCurrencyCode_ISO_CURRENCY_CODE_FKP         IsoCurrencyCode = 47
	IsoCurrencyCode_ISO_CURRENCY_CODE_GBP         IsoCurrencyCode = 48
	IsoCurrencyCode_ISO_CURRENCY_CODE_GEL         IsoCurrencyCode = 49
	IsoCurrencyCode_ISO_CURRENCY_CODE_GHS         IsoCurrencyCode = 50
	IsoCurrencyCode_ISO_CURRENCY_CODE_GIP         IsoCurrencyCode = 51
	IsoCurrencyCode_ISO_CURRENCY_CODE_GMD         IsoCurrencyCode = 52
	IsoCurrencyCode_ISO_CURRENCY_CODE_GNF         IsoCurrencyCode = 53
	IsoCurrencyCode_ISO_CURRENCY_CODE_GTQ         IsoCurrencyCode = 54
	IsoCurrencyCode_ISO_CURRENCY_CODE_GYD         IsoCurrencyCode = 55
	IsoCurrencyCode_ISO_CURRENCY_CODE_HKD         IsoCurrencyCode = 56
	IsoCurrencyCode_ISO_CURRENCY_CODE_HNL         IsoCurrencyCode = 57
	IsoCurrencyCode_ISO_CURRENCY_CODE_HTG         IsoCurrencyCode = 58
	IsoCurrencyCode_ISO_CURRENCY_CODE_HUF         IsoCurrencyCode = 59
	IsoCurrencyCode_ISO_CURRENCY_CODE_IDR         IsoCurrencyCode = 60
	IsoCurrencyCode_ISO_CURRENCY_CODE_ILS         IsoCurrencyCode = 61
	IsoCurrencyCode_ISO_CURRENCY_CODE_INR         IsoCurrencyCode = 62
	IsoCurrencyCode_ISO_CURRENCY_CODE_IQD         IsoCurrencyCode = 63
	IsoCurrencyCode_ISO_CURRENCY_CODE_IRR         IsoCurrencyCode = 64
	IsoCurrencyCode_ISO_CURRENCY_CODE_ISK         IsoCurrencyCode = 65
	IsoCurrencyCode_ISO_CURRENCY_CODE_JMD         IsoCurrencyCode = 66
	IsoCurrencyCode_ISO_CURRENCY_CODE_JOD         IsoCurrencyCode = 67
	IsoCurrencyCode_ISO_CURRENCY_CODE_JPY         IsoCurrencyCode = 68
	IsoCurrencyCode_ISO_CURRENCY_CODE_KES         IsoCurrencyCode = 69
	IsoCurrencyCode_ISO_CURRENCY_CODE_KGS         IsoCurrencyCode = 70
	IsoCurrencyCode_ISO_CURRENCY_CODE_KHR         IsoCurrencyCode = 71
	IsoCurrencyCode_ISO_CURRENCY_CODE_KMF         IsoCurrencyCode = 72
	IsoCurrencyCode_ISO_CURRENCY_CODE_KPW         IsoCurrencyCode = 73
	IsoCurrencyCode_ISO_CURRENCY_CODE_KRW         IsoCurrencyCode = 74
	IsoCurrencyCode_ISO_CURRENCY_CODE_KWD         IsoCurrencyCode = 75
	IsoCurrencyCode_ISO_CURRENCY_CODE_KYD         IsoCurrencyCode = 76
	IsoCurrencyCode_ISO_CURRENCY_CODE_KZT         IsoCurrencyCode = 77
	IsoCurrencyCode_ISO_CURRENCY_CODE_LAK         IsoCurrencyCode = 78
	IsoCurrencyCode_ISO_CURRENCY_CODE_LBP         IsoCurrencyCode = 79
	IsoCurrencyCode_ISO_CURRENCY_CODE_LKR         IsoCurrencyCode = 80
	IsoCurrencyCode_ISO_CURRENCY_CODE_LRD         IsoCurrencyCode = 81
	IsoCurrencyCode_ISO_CURRENCY_CODE_LSL         IsoCurrencyCode = 82
	IsoCurrencyCode_ISO_CURRENCY_CODE_LYD         IsoCurrencyCode = 83
	IsoCurrencyCode_ISO_CURRENCY_CODE_MAD         IsoCurrencyCode = 84
	IsoCurrencyCode_ISO_CURRENCY_CODE_MDL         IsoCurrencyCode = 85
	IsoCurrencyCode_ISO_CURRENCY_CODE_MGA         IsoCurrencyCode = 86
	IsoCurrencyCode_ISO_CURRENCY_CODE_MKD         IsoCurrencyCode = 87
	IsoCurrencyCode_ISO_CURRENCY_CODE_MMK         IsoCurrencyCode = 88
	IsoCurrencyCode_ISO_CURRENCY_CODE_MNT         IsoCurrencyCode = 89
	IsoCurrencyCode_ISO_CURRENCY_CODE_MOP         IsoCurrencyCode = 90
	IsoCurrencyCode_ISO_CURRENCY_CODE_MRU         IsoCurrencyCode = 91
	IsoCurrencyCode_ISO_CURRENCY_CODE_MUR         IsoCurrencyCode = 92
	IsoCurrencyCode_ISO_CURRENCY_CODE_MVR         IsoCurrencyCode = 93
	IsoCurrencyCode_ISO_CURRENCY_CODE_MWK         IsoCurrencyCode = 94
	IsoCurrencyCode_ISO_CURRENCY_CODE_MXN         IsoCurrencyCode = 95
	IsoCurrencyCode_ISO_CURRENCY_CODE_MXV         IsoCurrencyCode = 96
	IsoCurrencyCode_ISO_CURRENCY_CODE_MYR         IsoCurrencyCode = 97
	IsoCurrencyCode_ISO_CURRENCY_CODE_MZN         IsoCurrencyCode = 98
	IsoCurrencyCode_ISO_CURRENCY_CODE_NAD         IsoCurrencyCode = 99
	IsoCurrencyCode_ISO_CURRENCY_CODE_NGN         IsoCurrencyCode = 100
	IsoCurrencyCode_ISO_CURRENCY_CODE_NIO         IsoCurrencyCode = 101
	IsoCurrencyCode_ISO_CURRENCY_CODE_NOK         IsoCurrencyCode = 102
	IsoCurrencyCode_ISO_CURRENCY_CODE_NPR         IsoCurrencyCode = 103
	IsoCurrencyCode_ISO_CURRENCY_CODE_NZD         IsoCurrencyCode = 104
	IsoCurrencyCode_ISO_CURRENCY_CODE_OMR         IsoCurrencyCode = 105
	IsoCurrencyCode_ISO_CURRENCY_CODE_PAB         IsoCurrencyCode = 106
	IsoCurrencyCode_ISO_CURRENCY_CODE_PEN         IsoCurrencyCode = 107
	IsoCurrencyCode_ISO_CURRENCY_CODE_PGK         IsoCurrencyCode = 108
	IsoCurrencyCode_ISO_CURRENCY_CODE_PHP         IsoCurrencyCode = 109
	IsoCurrencyCode_ISO_CURRENCY_CODE_PKR         IsoCurrencyCode = 110
	IsoCurrencyCode_ISO_CURRENCY_CODE_PLN         IsoCurrencyCode = 111
	IsoCurrencyCode_ISO_CURRENCY_CODE_PYG         IsoCurrencyCode = 112
	IsoCurrencyCode_ISO_CURRENCY_CODE_QAR         IsoCurrencyCode = 113
	IsoCurrencyCode_ISO_CURRENCY_CODE_RON         IsoCurrencyCode = 114
	IsoCurrencyCode_ISO_CURRENCY_CODE_RSD         IsoCurrencyCode = 115
	IsoCurrencyCode_ISO_CURRENCY_CODE_RUB         IsoCurrencyCode = 116
	IsoCurrencyCode_ISO_CURRENCY_CODE_RWF         IsoCurrencyCode = 117
	IsoCurrencyCode_ISO_CURRENCY_CODE_SAR         IsoCurrencyCode = 118
	IsoCurrencyCode_ISO_CURRENCY_CODE_SBD         IsoCurrencyCode = 119
	IsoCurrencyCode_ISO_CURRENCY_CODE_SCR         IsoCurrencyCode = 120
	IsoCurrencyCode_ISO_CURRENCY_CODE_SDG         IsoCurrencyCode = 121
	IsoCurrencyCode_ISO_CURRENCY_CODE_SEK         IsoCurrencyCode = 122
	IsoCurrencyCode_ISO_CURRENCY_CODE_SGD         IsoCurrencyCode = 123
	IsoCurrencyCode_ISO_CURRENCY_CODE_SHP         IsoCurrencyCode = 124
	IsoCurrencyCode_ISO_CURRENCY_CODE_SLE         IsoCurrencyCode = 125
	IsoCurrencyCode_ISO_CURRENCY_CODE_SOS         IsoCurrencyCode = 126
	IsoCurrencyCode_ISO_CURRENCY_CODE_SRD         IsoCurrencyCode = 127
	IsoCurrencyCode_ISO_CURRENCY_CODE_SSP         IsoCurrencyCode = 128
	IsoCurrencyCode_ISO_CURRENCY_CODE_STN         IsoCurrencyCode = 129
	IsoCurrencyCode_ISO_CURRENCY_CODE_SVC         IsoCurrencyCode = 130
	IsoCurrencyCode_ISO_CURRENCY_CODE_SYP         IsoCurrencyCode = 131
	IsoCurrencyCode_ISO_CURRENCY_CODE_SZL         IsoCurrencyCode = 132
	IsoCurrencyCode_ISO_CURRENCY_CODE_THB         IsoCurrencyCode = 133
	IsoCurrencyCode_ISO_CURRENCY_CODE_TJS         IsoCurrencyCode = 134
	IsoCurrencyCode_ISO_CURRENCY_CODE_TMT         IsoCurrencyCode = 135
	IsoCurrencyCode_ISO_CURRENCY_CODE_TND         IsoCurrencyCode = 136
	IsoCurrencyCode_ISO_CURRENCY_CODE_TOP         IsoCurrencyCode = 137
	IsoCurrencyCode_ISO_CURRENCY_CODE_TRY         IsoCurrencyCode = 138
	IsoCurrencyCode_ISO_CURRENCY_CODE_TTD         IsoCurrencyCode = 139
	IsoCurrencyCode_ISO_CURRENCY_CODE_TWD         IsoCurrencyCode = 140
	IsoCurrencyCode_ISO_CURRENCY_CODE_TZS         IsoCurrencyCode = 141
	IsoCurrencyCode_ISO_CURRENCY_CODE_UAH         IsoCurrencyCode = 142
	IsoCurrencyCode_ISO_CURRENCY_CODE_UGX         IsoCurrencyCode = 143
	IsoCurrencyCode_ISO_CURRENCY_CODE_USD         IsoCurrencyCode = 144
	IsoCurrencyCode_ISO_CURRENCY_CODE_UYI         IsoCurrencyCode = 145
	IsoCurrencyCode_ISO_CURRENCY_CODE_UYU         IsoCurrencyCode = 146
	IsoCurrencyCode_ISO_CURRENCY_CODE_UZS         IsoCurrencyCode = 147
	IsoCurrencyCode_ISO_CURRENCY_CODE_VED         IsoCurrencyCode = 148
	IsoCurrencyCode_ISO_CURRENCY_CODE_VES         IsoCurrencyCode = 149
	IsoCurrencyCode_ISO_CURRENCY_CODE_VND         IsoCurrencyCode = 150
	IsoCurrencyCode_ISO_CURRENCY_CODE_VUV         IsoCurrencyCode = 151
	IsoCurrencyCode_ISO_CURRENCY_CODE_WST         IsoCurrencyCode = 152
	IsoCurrencyCode_ISO_CURRENCY_CODE_XAD         IsoCurrencyCode = 153
	IsoCurrencyCode_ISO_CURRENCY_CODE_XAF         IsoCurrencyCode = 154
	IsoCurrencyCode_ISO_CURRENCY_CODE_XCD         IsoCurrencyCode = 155
	IsoCurrencyCode_ISO_CURRENCY_CODE_XCG         IsoCurrencyCode = 156
	IsoCurrencyCode_ISO_CURRENCY_CODE_XOF         IsoCurrencyCode = 157
	IsoCurrencyCode_ISO_CURRENCY_CODE_XPF         IsoCurrencyCode = 158
	IsoCurrencyCode_ISO_CURRENCY_CODE_YER         IsoCurrencyCode = 159
	IsoCurrencyCode_ISO_CURRENCY_CODE_ZAR         IsoCurrencyCode = 160
	IsoCurrencyCode_ISO_CURRENCY_CODE_ZMW         IsoCurrencyCode = 161
	IsoCurrencyCode_ISO_CURRENCY_CODE_ZWG         IsoCurrencyCode = 162
)

// Enum value maps for IsoCurrencyCode.
var (
	IsoCurrencyCode_name = map[int32]string{
		0:   "ISO_CURRENCY_CODE_UNSPECIFIED",
		1:   "ISO_CURRENCY_CODE_AED",
		2:   "ISO_CURRENCY_CODE_AFN",
		3:   "ISO_CURRENCY_CODE_ALL",
		4:   "ISO_CURRENCY_CODE_AMD",
		5:   "ISO_CURRENCY_CODE_AOA",
		6:   "ISO_CURRENCY_CODE_ARS",
		7:   "ISO_CURRENCY_CODE_AUD",
		8:   "ISO_CURRENCY_CODE_AWG",
		9:   "ISO_CURRENCY_CODE_AZN",
		10:  "ISO_CURRENCY_CODE_BAM",
		11:  "ISO_CURRENCY_CODE_BBD",
		12:  "ISO_CURRENCY_CODE_BDT",
		13:  "ISO_CURRENCY_CODE_BGN",
		14:  "ISO_CURRENCY_CODE_BHD",
		15:  "ISO_CURRENCY_CODE_BIF",
		16:  "ISO_CURRENCY_CODE_BMD",
		17:  "ISO_CURRENCY_CODE_BND",
		18:  "ISO_CURRENCY_CODE_BOB",
		19:  "ISO_CURRENCY_CODE_BOV",
		20:  "ISO_CURRENCY_CODE_BRL",
		21:  "ISO_CURRENCY_CODE_BSD",
		22:  "ISO_CURRENCY_CODE_BTN",
		23:  "ISO_CURRENCY_CODE_BWP",
		24:  "ISO_CURRENCY_CODE_BYR",
		25:  "ISO_CURRENCY_CODE_BZD",
		26:  "ISO_CURRENCY_CODE_CAD",
		27:  "ISO_CURRENCY_CODE_CDF",
		28:  "ISO_CURRENCY_CODE_CHF",
		29:  "ISO_CURRENCY_CODE_CLF",
		30:  "ISO_CURRENCY_CODE_CLP",
		31:  "ISO_CURRENCY_CODE_CNY",
		32:  "ISO_CURRENCY_CODE_COP",
		33:  "ISO_CURRENCY_CODE_COU",
		34:  "ISO_CURRENCY_CODE_CRC",
		35:  "ISO_CURRENCY_CODE_CUP",
		36:  "ISO_CURRENCY_CODE_CVE",
		37:  "ISO_CURRENCY_CODE_CZK",
		38:  "ISO_CURRENCY_CODE_DJF",
		39:  "ISO_CURRENCY_CODE_DKK",
		40:  "ISO_CURRENCY_CODE_DOP",
		41:  "ISO_CURRENCY_CODE_DZD",
		42:  "ISO_CURRENCY_CODE_EGP",
		43:  "ISO_CURRENCY_CODE_ERN",
		44:  "ISO_CURRENCY_CODE_ETB",
		45:  "ISO_CURRENCY_CODE_EUR",
		46:  "ISO_CURRENCY_CODE_FJD",
		47:  "ISO_CURRENCY_CODE_FKP",
		48:  "ISO_CURRENCY_CODE_GBP",
		49:  "ISO_CURRENCY_CODE_GEL",
		50:  "ISO_CURRENCY_CODE_GHS",
		51:  "ISO_CURRENCY_CODE_GIP",
		52:  "ISO_CURRENCY_CODE_GMD",
		53:  "ISO_CURRENCY_CODE_GNF",
		54:  "ISO_CURRENCY_CODE_GTQ",
		55:  "ISO_CURRENCY_CODE_GYD",
		56:  "ISO_CURRENCY_CODE_HKD",
		57:  "ISO_CURRENCY_CODE_HNL",
		58:  "ISO_CURRENCY_CODE_HTG",
		59:  "ISO_CURRENCY_CODE_HUF",
		60:  "ISO_CURRENCY_CODE_IDR",
		61:  "ISO_CURRENCY_CODE_ILS",
		62:  "ISO_CURRENCY_CODE_INR",
		63:  "ISO_CURRENCY_CODE_IQD",
		64:  "ISO_CURRENCY_CODE_IRR",
		65:  "ISO_CURRENCY_CODE_ISK",
		66:  "ISO_CURRENCY_CODE_JMD",
		67:  "ISO_CURRENCY_CODE_JOD",
		68:  "ISO_CURRENCY_CODE_JPY",
		69:  "ISO_CURRENCY_CODE_KES",
		70:  "ISO_CURRENCY_CODE_KGS",
		71:  "ISO_CURRENCY_CODE_KHR",
		72:  "ISO_CURRENCY_CODE_KMF",
		73:  "ISO_CURRENCY_CODE_KPW",
		74:  "ISO_CURRENCY_CODE_KRW",
		75:  "ISO_CURRENCY_CODE_KWD",
		76:  "ISO_CURRENCY_CODE_KYD",
		77:  "ISO_CURRENCY_CODE_KZT",
		78:  "ISO_CURRENCY_CODE_LAK",
		79:  "ISO_CURRENCY_CODE_LBP",
		80:  "ISO_CURRENCY_CODE_LKR",
		81:  "ISO_CURRENCY_CODE_LRD",
		82:  "ISO_CURRENCY_CODE_LSL",
		83:  "ISO_CURRENCY_CODE_LYD",
		84:  "ISO_CURRENCY_CODE_MAD",
		85:  "ISO_CURRENCY_CODE_MDL",
		86:  "ISO_CURRENCY_CODE_MGA",
		87:  "ISO_CURRENCY_CODE_MKD",
		88:  "ISO_CURRENCY_CODE_MMK",
		89:  "ISO_CURRENCY_CODE_MNT",
		90:  "ISO_CURRENCY_CODE_MOP",
		91:  "ISO_CURRENCY_CODE_MRU",
		92:  "ISO_CURRENCY_CODE_MUR",
		93:  "ISO_CURRENCY_CODE_MVR",
		94:  "ISO_CURRENCY_CODE_MWK",
		95:  "ISO_CURRENCY_CODE_MXN",
		96:  "ISO_CURRENCY_CODE_MXV",
		97:  "ISO_CURRENCY_CODE_MYR",
		98:  "ISO_CURRENCY_CODE_MZN",
		99:  "ISO_CURRENCY_CODE_NAD",
		100: "ISO_CURRENCY_CODE_NGN",
		101: "ISO_CURRENCY_CODE_NIO",
		102: "ISO_CURRENCY_CODE_NOK",
		103: "ISO_CURRENCY_CODE_NPR",
		104: "ISO_CURRENCY_CODE_NZD",
		105: "ISO_CURRENCY_CODE_OMR",
		106: "ISO_CURRENCY_CODE_PAB",
		107: "ISO_CURRENCY_CODE_PEN",
		108: "ISO_CURRENCY_CODE_PGK",
		109: "ISO_CURRENCY_CODE_PHP",
		110: "ISO_CURRENCY_CODE_PKR",
		111: "ISO_CURRENCY_CODE_PLN",
		112: "ISO_CURRENCY_CODE_PYG",
		113: "ISO_CURRENCY_CODE_QAR",
		114: "ISO_CURRENCY_CODE_RON",
		115: "ISO_CURRENCY_CODE_RSD",
		116: "ISO_CURRENCY_CODE_RUB",
		117: "ISO_CURRENCY_CODE_RWF",
		118: "ISO_CURRENCY_CODE_SAR",
		119: "ISO_CURRENCY_CODE_SBD",
		120: "ISO_CURRENCY_CODE_SCR",
		121: "ISO_CURRENCY_CODE_SDG",
		122: "ISO_CURRENCY_CODE_SEK",
		123: "ISO_CURRENCY_CODE_SGD",
		124: "ISO_CURRENCY_CODE_SHP",
		125: "ISO_CURRENCY_CODE_SLE",
		126: "ISO_CURRENCY_CODE_SOS",
		127: "ISO_CURRENCY_CODE_SRD",
		128: "ISO_CURRENCY_CODE_SSP",
		129: "ISO_CURRENCY_CODE_STN",
		130: "ISO_CURRENCY_CODE_SVC",
		131: "ISO_CURRENCY_CODE_SYP",
		132: "ISO_CURRENCY_CODE_SZL",
		133: "ISO_CURRENCY_CODE_THB",
		134: "ISO_CURRENCY_CODE_TJS",
		135: "ISO_CURRENCY_CODE_TMT",
		136: "ISO_CURRENCY_CODE_TND",
		137: "ISO_CURRENCY_CODE_TOP",
		138: "ISO_CURRENCY_CODE_TRY",
		139: "ISO_CURRENCY_CODE_TTD",
		140: "ISO_CURRENCY_CODE_TWD",
		141: "ISO_CURRENCY_CODE_TZS",
		142: "ISO_CURRENCY_CODE_UAH",
		143: "ISO_CURRENCY_CODE_UGX",
		144: "ISO_CURRENCY_CODE_USD",
		145: "ISO_CURRENCY_CODE_UYI",
		146: "ISO_CURRENCY_CODE_UYU",
		147: "ISO_CURRENCY_CODE_UZS",
		148: "ISO_CURRENCY_CODE_VED",
		149: "ISO_CURRENCY_CODE_VES",
		150: "ISO_CURRENCY_CODE_VND",
		151: "ISO_CURRENCY_CODE_VUV",
		152: "ISO_CURRENCY_CODE_WST",
		153: "ISO_CURRENCY_CODE_XAD",
		154: "ISO_CURRENCY_CODE_XAF",
		155: "ISO_CURRENCY_CODE_XCD",
		156: "ISO_CURRENCY_CODE_XCG",
		157: "ISO_CURRENCY_CODE_XOF",
		158: "ISO_CURRENCY_CODE_XPF",
		159: "ISO_CURRENCY_CODE_YER",
		160: "ISO_CURRENCY_CODE_ZAR",
		161: "ISO_CURRENCY_CODE_ZMW",
		162: "ISO_CURRENCY_CODE_ZWG",
	}
	IsoCurrencyCode_value = map[string]int32{
		"ISO_CURRENCY_CODE_UNSPECIFIED": 0,
		"ISO_CURRENCY_CODE_AED":         1,
		"ISO_CURRENCY_CODE_AFN":         2,
		"ISO_CURRENCY_CODE_ALL":         3,
		"ISO_CURRENCY_CODE_AMD":         4,
		"ISO_CURRENCY_CODE_AOA":         5,
		"ISO_CURRENCY_CODE_ARS":         6,
		"ISO_CURRENCY_CODE_AUD":         7,
		"ISO_CURRENCY_CODE_AWG":         8,
		"ISO_CURRENCY_CODE_AZN":         9,
		"ISO_CURRENCY_CODE_BAM":         10,
		"ISO_CURRENCY_CODE_BBD":         11,
		"ISO_CURRENCY_CODE_BDT":         12,
		"ISO_CURRENCY_CODE_BGN":         13,
		"ISO_CURRENCY_CODE_BHD":         14,
		"ISO_CURRENCY_CODE_BIF":         15,
		"ISO_CURRENCY_CODE_BMD":         16,
		"ISO_CURRENCY_CODE_BND":         17,
		"ISO_CURRENCY_CODE_BOB":         18,
		"ISO_CURRENCY_CODE_BOV":         19,
		"ISO_CURRENCY_CODE_BRL":         20,
		"ISO_CURRENCY_CODE_BSD":         21,
		"ISO_CURRENCY_CODE_BTN":         22,
		"ISO_CURRENCY_CODE_BWP":         23,
		"ISO_CURRENCY_CODE_BYR":         24,
		"ISO_CURRENCY_CODE_BZD":         25,
		"ISO_CURRENCY_CODE_CAD":         26,
		"ISO_CURRENCY_CODE_CDF":         27,
		"ISO_CURRENCY_CODE_CHF":         28,
		"ISO_CURRENCY_CODE_CLF":         29,
		"ISO_CURRENCY_CODE_CLP":         30,
		"ISO_CURRENCY_CODE_CNY":         31,
		"ISO_CURRENCY_CODE_COP":         32,
		"ISO_CURRENCY_CODE_COU":         33,
		"ISO_CURRENCY_CODE_CRC":         34,
		"ISO_CURRENCY_CODE_CUP":         35,
		"ISO_CURRENCY_CODE_CVE":         36,
		"ISO_CURRENCY_CODE_CZK":         37,
		"ISO_CURRENCY_CODE_DJF":         38,
		"ISO_CURRENCY_CODE_DKK":         39,
		"ISO_CURRENCY_CODE_DOP":         40,
		"ISO_CURRENCY_CODE_DZD":         41,
		"ISO_CURRENCY_CODE_EGP":         42,
		"ISO_CURRENCY_CODE_ERN":         43,
		"ISO_CURRENCY_CODE_ETB":         44,
		"ISO_CURRENCY_CODE_EUR":         45,
		"ISO_CURRENCY_CODE_FJD":         46,
		"ISO_CURRENCY_CODE_FKP":         47,
		"ISO_CURRENCY_CODE_GBP":         48,
		"ISO_CURRENCY_CODE_GEL":         49,
		"ISO_CURRENCY_CODE_GHS":         50,
		"ISO_CURRENCY_CODE_GIP":         51,
		"ISO_CURRENCY_CODE_GMD":         52,
		"ISO_CURRENCY_CODE_GNF":         53,
		"ISO_CURRENCY_CODE_GTQ":         54,
		"ISO_CURRENCY_CODE_GYD":         55,
		"ISO_CURRENCY_CODE_HKD":         56,
		"ISO_CURRENCY_CODE_HNL":         57,
		"ISO_CURRENCY_CODE_HTG":         58,
		"ISO_CURRENCY_CODE_HUF":         59,
		"ISO_CURRENCY_CODE_IDR":         60,
		"ISO_CURRENCY_CODE_ILS":         61,
		"ISO_CURRENCY_CODE_INR":         62,
		"ISO_CURRENCY_CODE_IQD":         63,
		"ISO_CURRENCY_CODE_IRR":         64,
		"ISO_CURRENCY_CODE_ISK":         65,
		"ISO_CURRENCY_CODE_JMD":         66,
		"ISO_CURRENCY_CODE_JOD":         67,
		"ISO_CURRENCY_CODE_JPY":         68,
		"ISO_CURRENCY_CODE_KES":         69,
		"ISO_CURRENCY_CODE_KGS":         70,
		"ISO_CURRENCY_CODE_KHR":         71,
		"ISO_CURRENCY_CODE_KMF":         72,
		"ISO_CURRENCY_CODE_KPW":         73,
		"ISO_CURRENCY_CODE_KRW":         74,
		"ISO_CURRENCY_CODE_KWD":         75,
		"ISO_CURRENCY_CODE_KYD":         76,
		"ISO_CURRENCY_CODE_KZT":         77,
		"ISO_CURRENCY_CODE_LAK":         78,
		"ISO_CURRENCY_CODE_LBP":         79,
		"ISO_CURRENCY_CODE_LKR":         80,
		"ISO_CURRENCY_CODE_LRD":         81,
		"ISO_CURRENCY_CODE_LSL":         82,
		"ISO_CURRENCY_CODE_LYD":         83,
		"ISO_CURRENCY_CODE_MAD":         84,
		"ISO_CURRENCY_CODE_MDL":         85,
		"ISO_CURRENCY_CODE_MGA":         86,
		"ISO_CURRENCY_CODE_MKD":         87,
		"ISO_CURRENCY_CODE_MMK":         88,
		"ISO_CURRENCY_CODE_MNT":         89,
		"ISO_CURRENCY_CODE_MOP":         90,
		"ISO_CURRENCY_CODE_MRU":         91,
		"ISO_CURRENCY_CODE_MUR":         92,
		"ISO_CURRENCY_CODE_MVR":         93,
		"ISO_CURRENCY_CODE_MWK":         94,
		"ISO_CURRENCY_CODE_MXN":         95,
		"ISO_CURRENCY_CODE_MXV":         96,
		"ISO_CURRENCY_CODE_MYR":         97,
		"ISO_CURRENCY_CODE_MZN":         98,
		"ISO_CURRENCY_CODE_NAD":         99,
		"ISO_CURRENCY_CODE_NGN":         100,
		"ISO_CURRENCY_CODE_NIO":         101,
		"ISO_CURRENCY_CODE_NOK":         102,
		"ISO_CURRENCY_CODE_NPR":         103,
		"ISO_CURRENCY_CODE_NZD":         104,
		"ISO_CURRENCY_CODE_OMR":         105,
		"ISO_CURRENCY_CODE_PAB":         106,
		"ISO_CURRENCY_CODE_PEN":         107,
		"ISO_CURRENCY_CODE_PGK":         108,
		"ISO_CURRENCY_CODE_PHP":         109,
		"ISO_CURRENCY_CODE_PKR":         110,
		"ISO_CURRENCY_CODE_PLN":         111,
		"ISO_CURRENCY_CODE_PYG":         112,
		"ISO_CURRENCY_CODE_QAR":         113,
		"ISO_CURRENCY_CODE_RON":         114,
		"ISO_CURRENCY_CODE_RSD":         115,
		"ISO_CURRENCY_CODE_RUB":         116,
		"ISO_CURRENCY_CODE_RWF":         117,
		"ISO_CURRENCY_CODE_SAR":         118,
		"ISO_CURRENCY_CODE_SBD":         119,
		"ISO_CURRENCY_CODE_SCR":         120,
		"ISO_CURRENCY_CODE_SDG":         121,
		"ISO_CURRENCY_CODE_SEK":         122,
		"ISO_CURRENCY_CODE_SGD":         123,
		"ISO_CURRENCY_CODE_SHP":         124,
		"ISO_CURRENCY_CODE_SLE":         125,
		"ISO_CURRENCY_CODE_SOS":         126,
		"ISO_CURRENCY_CODE_SRD":         127,
		"ISO_CURRENCY_CODE_SSP":         128,
		"ISO_CURRENCY_CODE_STN":         129,
		"ISO_CURRENCY_CODE_SVC":         130,
		"ISO_CURRENCY_CODE_SYP":         131,
		"ISO_CURRENCY_CODE_SZL":         132,
		"ISO_CURRENCY_CODE_THB":         133,
		"ISO_CURRENCY_CODE_TJS":         134,
		"ISO_CURRENCY_CODE_TMT":         135,
		"ISO_CURRENCY_CODE_TND":         136,
		"ISO_CURRENCY_CODE_TOP":         137,
		"ISO_CURRENCY_CODE_TRY":         138,
		"ISO_CURRENCY_CODE_TTD":         139,
		"ISO_CURRENCY_CODE_TWD":         140,
		"ISO_CURRENCY_CODE_TZS":         141,
		"ISO_CURRENCY_CODE_UAH":         142,
		"ISO_CURRENCY_CODE_UGX":         143,
		"ISO_CURRENCY_CODE_USD":         144,
		"ISO_CURRENCY_CODE_UYI":         145,
		"ISO_CURRENCY_CODE_UYU":         146,
		"ISO_CURRENCY_CODE_UZS":         147,
		"ISO_CURRENCY_CODE_VED":         148,
		"ISO_CURRENCY_CODE_VES":         149,
		"ISO_CURRENCY_CODE_VND":         150,
		"ISO_CURRENCY_CODE_VUV":         151,
		"ISO_CURRENCY_CODE_WST":         152,
		"ISO_CURRENCY_CODE_XAD":         153,
		"ISO_CURRENCY_CODE_XAF":         154,
		"ISO_CURRENCY_CODE_XCD":         155,
		"ISO_CURRENCY_CODE_XCG":         156,
		"ISO_CURRENCY_CODE_XOF":         157,
		"ISO_CURRENCY_CODE_XPF":         158,
		"ISO_CURRENCY_CODE_YER":         159,
		"ISO_CURRENCY_CODE_ZAR":         160,
		"ISO_CURRENCY_CODE_ZMW":         161,
		"ISO_CURRENCY_CODE_ZWG":         162,
	}
)

func (x IsoCurrencyCode) Enum() *IsoCurrencyCode {
	p := new(IsoCurrencyCode)
	*p = x
	return p
}

func (x IsoCurrencyCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoCurrencyCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[105].Descriptor()
}

func (IsoCurrencyCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[105]
}

func (x IsoCurrencyCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoCurrencyCode.Descriptor instead.
func (IsoCurrencyCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{105}
}

type IsoLanguageCode int32

const (
	IsoLanguageCode_ISO_LANGUAGE_CODE_UNSPECIFIED IsoLanguageCode = 0
	IsoLanguageCode_ISO_LANGUAGE_CODE_AA          IsoLanguageCode = 1
	IsoLanguageCode_ISO_LANGUAGE_CODE_AAR         IsoLanguageCode = 2
	IsoLanguageCode_ISO_LANGUAGE_CODE_AB          IsoLanguageCode = 3
	IsoLanguageCode_ISO_LANGUAGE_CODE_ABK         IsoLanguageCode = 4
	IsoLanguageCode_ISO_LANGUAGE_CODE_AE          IsoLanguageCode = 5
	IsoLanguageCode_ISO_LANGUAGE_CODE_AVE         IsoLanguageCode = 6
	IsoLanguageCode_ISO_LANGUAGE_CODE_AF          IsoLanguageCode = 7
	IsoLanguageCode_ISO_LANGUAGE_CODE_AFR         IsoLanguageCode = 8
	IsoLanguageCode_ISO_LANGUAGE_CODE_AK          IsoLanguageCode = 9
	IsoLanguageCode_ISO_LANGUAGE_CODE_AKA         IsoLanguageCode = 10
	IsoLanguageCode_ISO_LANGUAGE_CODE_AM          IsoLanguageCode = 11
	IsoLanguageCode_ISO_LANGUAGE_CODE_AMH         IsoLanguageCode = 12
	IsoLanguageCode_ISO_LANGUAGE_CODE_AN          IsoLanguageCode = 13
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARG         IsoLanguageCode = 14
	IsoLanguageCode_ISO_LANGUAGE_CODE_AR          IsoLanguageCode = 15
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARA         IsoLanguageCode = 16
	IsoLanguageCode_ISO_LANGUAGE_CODE_AS          IsoLanguageCode = 17
	IsoLanguageCode_ISO_LANGUAGE_CODE_ASM         IsoLanguageCode = 18
	IsoLanguageCode_ISO_LANGUAGE_CODE_AV          IsoLanguageCode = 19
	IsoLanguageCode_ISO_LANGUAGE_CODE_AVA         IsoLanguageCode = 20
	IsoLanguageCode_ISO_LANGUAGE_CODE_AY          IsoLanguageCode = 21
	IsoLanguageCode_ISO_LANGUAGE_CODE_AYM         IsoLanguageCode = 22
	IsoLanguageCode_ISO_LANGUAGE_CODE_AZ          IsoLanguageCode = 23
	IsoLanguageCode_ISO_LANGUAGE_CODE_AZE         IsoLanguageCode = 24
	IsoLanguageCode_ISO_LANGUAGE_CODE_BA          IsoLanguageCode = 25
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAK         IsoLanguageCode = 26
	IsoLanguageCode_ISO_LANGUAGE_CODE_BE          IsoLanguageCode = 27
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEL         IsoLanguageCode = 28
	IsoLanguageCode_ISO_LANGUAGE_CODE_BG          IsoLanguageCode = 29
	IsoLanguageCode_ISO_LANGUAGE_CODE_BUL         IsoLanguageCode = 30
	IsoLanguageCode_ISO_LANGUAGE_CODE_BH          IsoLanguageCode = 31
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIH         IsoLanguageCode = 32
	IsoLanguageCode_ISO_LANGUAGE_CODE_BI          IsoLanguageCode = 33
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIS         IsoLanguageCode = 34
	IsoLanguageCode_ISO_LANGUAGE_CODE_BM          IsoLanguageCode = 35
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAM         IsoLanguageCode = 36
	IsoLanguageCode_ISO_LANGUAGE_CODE_BN          IsoLanguageCode = 37
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEN         IsoLanguageCode = 38
	IsoLanguageCode_ISO_LANGUAGE_CODE_BO          IsoLanguageCode = 39
	IsoLanguageCode_ISO_LANGUAGE_CODE_BOD         IsoLanguageCode = 40
	IsoLanguageCode_ISO_LANGUAGE_CODE_BR          IsoLanguageCode = 41
	IsoLanguageCode_ISO_LANGUAGE_CODE_BRE         IsoLanguageCode = 42
	IsoLanguageCode_ISO_LANGUAGE_CODE_BS          IsoLanguageCode = 43
	IsoLanguageCode_ISO_LANGUAGE_CODE_BOS         IsoLanguageCode = 44
	IsoLanguageCode_ISO_LANGUAGE_CODE_CA          IsoLanguageCode = 45
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAT         IsoLanguageCode = 46
	IsoLanguageCode_ISO_LANGUAGE_CODE_CE          IsoLanguageCode = 47
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHE         IsoLanguageCode = 48
	IsoLanguageCode_ISO_LANGUAGE_CODE_CH          IsoLanguageCode = 49
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHA         IsoLanguageCode = 50
	IsoLanguageCode_ISO_LANGUAGE_CODE_CO          IsoLanguageCode = 51
	IsoLanguageCode_ISO_LANGUAGE_CODE_COS         IsoLanguageCode = 52
	IsoLanguageCode_ISO_LANGUAGE_CODE_CR          IsoLanguageCode = 53
	IsoLanguageCode_ISO_LANGUAGE_CODE_CRE         IsoLanguageCode = 54
	IsoLanguageCode_ISO_LANGUAGE_CODE_CS          IsoLanguageCode = 55
	IsoLanguageCode_ISO_LANGUAGE_CODE_CES         IsoLanguageCode = 56
	IsoLanguageCode_ISO_LANGUAGE_CODE_CU          IsoLanguageCode = 57
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHU         IsoLanguageCode = 58
	IsoLanguageCode_ISO_LANGUAGE_CODE_CV          IsoLanguageCode = 59
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHV         IsoLanguageCode = 60
	IsoLanguageCode_ISO_LANGUAGE_CODE_CY          IsoLanguageCode = 61
	IsoLanguageCode_ISO_LANGUAGE_CODE_CYM         IsoLanguageCode = 62
	IsoLanguageCode_ISO_LANGUAGE_CODE_DA          IsoLanguageCode = 63
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAN         IsoLanguageCode = 64
	IsoLanguageCode_ISO_LANGUAGE_CODE_DE          IsoLanguageCode = 65
	IsoLanguageCode_ISO_LANGUAGE_CODE_DEU         IsoLanguageCode = 66
	IsoLanguageCode_ISO_LANGUAGE_CODE_DV          IsoLanguageCode = 67
	IsoLanguageCode_ISO_LANGUAGE_CODE_DIV         IsoLanguageCode = 68
	IsoLanguageCode_ISO_LANGUAGE_CODE_DZ          IsoLanguageCode = 69
	IsoLanguageCode_ISO_LANGUAGE_CODE_DZO         IsoLanguageCode = 70
	IsoLanguageCode_ISO_LANGUAGE_CODE_EE          IsoLanguageCode = 71
	IsoLanguageCode_ISO_LANGUAGE_CODE_EWE         IsoLanguageCode = 72
	IsoLanguageCode_ISO_LANGUAGE_CODE_EL          IsoLanguageCode = 73
	IsoLanguageCode_ISO_LANGUAGE_CODE_ELL         IsoLanguageCode = 74
	IsoLanguageCode_ISO_LANGUAGE_CODE_EN          IsoLanguageCode = 75
	IsoLanguageCode_ISO_LANGUAGE_CODE_ENG         IsoLanguageCode = 76
	IsoLanguageCode_ISO_LANGUAGE_CODE_EO          IsoLanguageCode = 77
	IsoLanguageCode_ISO_LANGUAGE_CODE_EPO         IsoLanguageCode = 78
	IsoLanguageCode_ISO_LANGUAGE_CODE_ES          IsoLanguageCode = 79
	IsoLanguageCode_ISO_LANGUAGE_CODE_SPA         IsoLanguageCode = 80
	IsoLanguageCode_ISO_LANGUAGE_CODE_ET          IsoLanguageCode = 81
	IsoLanguageCode_ISO_LANGUAGE_CODE_EST         IsoLanguageCode = 82
	IsoLanguageCode_ISO_LANGUAGE_CODE_EU          IsoLanguageCode = 83
	IsoLanguageCode_ISO_LANGUAGE_CODE_EUS         IsoLanguageCode = 84
	IsoLanguageCode_ISO_LANGUAGE_CODE_FA          IsoLanguageCode = 85
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAS         IsoLanguageCode = 86
	IsoLanguageCode_ISO_LANGUAGE_CODE_FF          IsoLanguageCode = 87
	IsoLanguageCode_ISO_LANGUAGE_CODE_FUL         IsoLanguageCode = 88
	IsoLanguageCode_ISO_LANGUAGE_CODE_FI          IsoLanguageCode = 89
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIN         IsoLanguageCode = 90
	IsoLanguageCode_ISO_LANGUAGE_CODE_FJ          IsoLanguageCode = 91
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIJ         IsoLanguageCode = 92
	IsoLanguageCode_ISO_LANGUAGE_CODE_FO          IsoLanguageCode = 93
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAO         IsoLanguageCode = 94
	IsoLanguageCode_ISO_LANGUAGE_CODE_FR          IsoLanguageCode = 95
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRA         IsoLanguageCode = 96
	IsoLanguageCode_ISO_LANGUAGE_CODE_FY          IsoLanguageCode = 97
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRY         IsoLanguageCode = 98
	IsoLanguageCode_ISO_LANGUAGE_CODE_GA          IsoLanguageCode = 99
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLE         IsoLanguageCode = 100
	IsoLanguageCode_ISO_LANGUAGE_CODE_GD          IsoLanguageCode = 101
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLA         IsoLanguageCode = 102
	IsoLanguageCode_ISO_LANGUAGE_CODE_GL          IsoLanguageCode = 103
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLG         IsoLanguageCode = 104
	IsoLanguageCode_ISO_LANGUAGE_CODE_GN          IsoLanguageCode = 105
	IsoLanguageCode_ISO_LANGUAGE_CODE_GRN         IsoLanguageCode = 106
	IsoLanguageCode_ISO_LANGUAGE_CODE_GU          IsoLanguageCode = 107
	IsoLanguageCode_ISO_LANGUAGE_CODE_GUJ         IsoLanguageCode = 108
	IsoLanguageCode_ISO_LANGUAGE_CODE_GV          IsoLanguageCode = 109
	IsoLanguageCode_ISO_LANGUAGE_CODE_GLV         IsoLanguageCode = 110
	IsoLanguageCode_ISO_LANGUAGE_CODE_HA          IsoLanguageCode = 111
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAU         IsoLanguageCode = 112
	IsoLanguageCode_ISO_LANGUAGE_CODE_HE          IsoLanguageCode = 113
	IsoLanguageCode_ISO_LANGUAGE_CODE_HEB         IsoLanguageCode = 114
	IsoLanguageCode_ISO_LANGUAGE_CODE_HI          IsoLanguageCode = 115
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIN         IsoLanguageCode = 116
	IsoLanguageCode_ISO_LANGUAGE_CODE_HO          IsoLanguageCode = 117
	IsoLanguageCode_ISO_LANGUAGE_CODE_HMO         IsoLanguageCode = 118
	IsoLanguageCode_ISO_LANGUAGE_CODE_HR          IsoLanguageCode = 119
	IsoLanguageCode_ISO_LANGUAGE_CODE_HRV         IsoLanguageCode = 120
	IsoLanguageCode_ISO_LANGUAGE_CODE_HT          IsoLanguageCode = 121
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAT         IsoLanguageCode = 122
	IsoLanguageCode_ISO_LANGUAGE_CODE_HU          IsoLanguageCode = 123
	IsoLanguageCode_ISO_LANGUAGE_CODE_HUN         IsoLanguageCode = 124
	IsoLanguageCode_ISO_LANGUAGE_CODE_HY          IsoLanguageCode = 125
	IsoLanguageCode_ISO_LANGUAGE_CODE_HYE         IsoLanguageCode = 126
	IsoLanguageCode_ISO_LANGUAGE_CODE_HZ          IsoLanguageCode = 127
	IsoLanguageCode_ISO_LANGUAGE_CODE_HER         IsoLanguageCode = 128
	IsoLanguageCode_ISO_LANGUAGE_CODE_IA          IsoLanguageCode = 129
	IsoLanguageCode_ISO_LANGUAGE_CODE_INA         IsoLanguageCode = 130
	IsoLanguageCode_ISO_LANGUAGE_CODE_ID          IsoLanguageCode = 131
	IsoLanguageCode_ISO_LANGUAGE_CODE_IND         IsoLanguageCode = 132
	IsoLanguageCode_ISO_LANGUAGE_CODE_IE          IsoLanguageCode = 133
	IsoLanguageCode_ISO_LANGUAGE_CODE_ILE         IsoLanguageCode = 134
	IsoLanguageCode_ISO_LANGUAGE_CODE_IG          IsoLanguageCode = 135
	IsoLanguageCode_ISO_LANGUAGE_CODE_IBO         IsoLanguageCode = 136
	IsoLanguageCode_ISO_LANGUAGE_CODE_II          IsoLanguageCode = 137
	IsoLanguageCode_ISO_LANGUAGE_CODE_III         IsoLanguageCode = 138
	IsoLanguageCode_ISO_LANGUAGE_CODE_IK          IsoLanguageCode = 139
	IsoLanguageCode_ISO_LANGUAGE_CODE_IPK         IsoLanguageCode = 140
	IsoLanguageCode_ISO_LANGUAGE_CODE_IO          IsoLanguageCode = 141
	IsoLanguageCode_ISO_LANGUAGE_CODE_IDO         IsoLanguageCode = 142
	IsoLanguageCode_ISO_LANGUAGE_CODE_IS          IsoLanguageCode = 143
	IsoLanguageCode_ISO_LANGUAGE_CODE_ISL         IsoLanguageCode = 144
	IsoLanguageCode_ISO_LANGUAGE_CODE_IT          IsoLanguageCode = 145
	IsoLanguageCode_ISO_LANGUAGE_CODE_ITA         IsoLanguageCode = 146
	IsoLanguageCode_ISO_LANGUAGE_CODE_IU          IsoLanguageCode = 147
	IsoLanguageCode_ISO_LANGUAGE_CODE_IKU         IsoLanguageCode = 148
	IsoLanguageCode_ISO_LANGUAGE_CODE_JA          IsoLanguageCode = 149
	IsoLanguageCode_ISO_LANGUAGE_CODE_JPN         IsoLanguageCode = 150
	IsoLanguageCode_ISO_LANGUAGE_CODE_JV          IsoLanguageCode = 151
	IsoLanguageCode_ISO_LANGUAGE_CODE_JAV         IsoLanguageCode = 152
	IsoLanguageCode_ISO_LANGUAGE_CODE_KA          IsoLanguageCode = 153
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAT         IsoLanguageCode = 154
	IsoLanguageCode_ISO_LANGUAGE_CODE_KG          IsoLanguageCode = 155
	IsoLanguageCode_ISO_LANGUAGE_CODE_KON         IsoLanguageCode = 156
	IsoLanguageCode_ISO_LANGUAGE_CODE_KI          IsoLanguageCode = 157
	IsoLanguageCode_ISO_LANGUAGE_CODE_KIK         IsoLanguageCode = 158
	IsoLanguageCode_ISO_LANGUAGE_CODE_KJ          IsoLanguageCode = 159
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUA         IsoLanguageCode = 160
	IsoLanguageCode_ISO_LANGUAGE_CODE_KK          IsoLanguageCode = 161
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAZ         IsoLanguageCode = 162
	IsoLanguageCode_ISO_LANGUAGE_CODE_KL          IsoLanguageCode = 163
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAL         IsoLanguageCode = 164
	IsoLanguageCode_ISO_LANGUAGE_CODE_KM          IsoLanguageCode = 165
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHM         IsoLanguageCode = 166
	IsoLanguageCode_ISO_LANGUAGE_CODE_KN          IsoLanguageCode = 167
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAN         IsoLanguageCode = 168
	IsoLanguageCode_ISO_LANGUAGE_CODE_KO          IsoLanguageCode = 169
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOR         IsoLanguageCode = 170
	IsoLanguageCode_ISO_LANGUAGE_CODE_KR          IsoLanguageCode = 171
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAU         IsoLanguageCode = 172
	IsoLanguageCode_ISO_LANGUAGE_CODE_KS          IsoLanguageCode = 173
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAS         IsoLanguageCode = 174
	IsoLanguageCode_ISO_LANGUAGE_CODE_KU          IsoLanguageCode = 175
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUR         IsoLanguageCode = 176
	IsoLanguageCode_ISO_LANGUAGE_CODE_KV          IsoLanguageCode = 177
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOM         IsoLanguageCode = 178
	IsoLanguageCode_ISO_LANGUAGE_CODE_KW          IsoLanguageCode = 179
	IsoLanguageCode_ISO_LANGUAGE_CODE_COR         IsoLanguageCode = 180
	IsoLanguageCode_ISO_LANGUAGE_CODE_KY          IsoLanguageCode = 181
	IsoLanguageCode_ISO_LANGUAGE_CODE_KIR         IsoLanguageCode = 182
	IsoLanguageCode_ISO_LANGUAGE_CODE_LA          IsoLanguageCode = 183
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAT         IsoLanguageCode = 184
	IsoLanguageCode_ISO_LANGUAGE_CODE_LB          IsoLanguageCode = 185
	IsoLanguageCode_ISO_LANGUAGE_CODE_LTZ         IsoLanguageCode = 186
	IsoLanguageCode_ISO_LANGUAGE_CODE_LG          IsoLanguageCode = 187
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUG         IsoLanguageCode = 188
	IsoLanguageCode_ISO_LANGUAGE_CODE_LI          IsoLanguageCode = 189
	IsoLanguageCode_ISO_LANGUAGE_CODE_LIM         IsoLanguageCode = 190
	IsoLanguageCode_ISO_LANGUAGE_CODE_LN          IsoLanguageCode = 191
	IsoLanguageCode_ISO_LANGUAGE_CODE_LIN         IsoLanguageCode = 192
	IsoLanguageCode_ISO_LANGUAGE_CODE_LO          IsoLanguageCode = 193
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAO         IsoLanguageCode = 194
	IsoLanguageCode_ISO_LANGUAGE_CODE_LT          IsoLanguageCode = 195
	IsoLanguageCode_ISO_LANGUAGE_CODE_LIT         IsoLanguageCode = 196
	IsoLanguageCode_ISO_LANGUAGE_CODE_LU          IsoLanguageCode = 197
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUB         IsoLanguageCode = 198
	IsoLanguageCode_ISO_LANGUAGE_CODE_LV          IsoLanguageCode = 199
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAV         IsoLanguageCode = 200
	IsoLanguageCode_ISO_LANGUAGE_CODE_MG          IsoLanguageCode = 201
	IsoLanguageCode_ISO_LANGUAGE_CODE_MLG         IsoLanguageCode = 202
	IsoLanguageCode_ISO_LANGUAGE_CODE_MH          IsoLanguageCode = 203
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAH         IsoLanguageCode = 204
	IsoLanguageCode_ISO_LANGUAGE_CODE_MI          IsoLanguageCode = 205
	IsoLanguageCode_ISO_LANGUAGE_CODE_MRI         IsoLanguageCode = 206
	IsoLanguageCode_ISO_LANGUAGE_CODE_MK          IsoLanguageCode = 207
	IsoLanguageCode_ISO_LANGUAGE_CODE_MKD         IsoLanguageCode = 208
	IsoLanguageCode_ISO_LANGUAGE_CODE_ML          IsoLanguageCode = 209
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAL         IsoLanguageCode = 210
	IsoLanguageCode_ISO_LANGUAGE_CODE_MN          IsoLanguageCode = 211
	IsoLanguageCode_ISO_LANGUAGE_CODE_MON         IsoLanguageCode = 212
	IsoLanguageCode_ISO_LANGUAGE_CODE_MO          IsoLanguageCode = 213
	IsoLanguageCode_ISO_LANGUAGE_CODE_MR          IsoLanguageCode = 214
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAR         IsoLanguageCode = 215
	IsoLanguageCode_ISO_LANGUAGE_CODE_MS          IsoLanguageCode = 216
	IsoLanguageCode_ISO_LANGUAGE_CODE_MSA         IsoLanguageCode = 217
	IsoLanguageCode_ISO_LANGUAGE_CODE_MT          IsoLanguageCode = 218
	IsoLanguageCode_ISO_LANGUAGE_CODE_MLT         IsoLanguageCode = 219
	IsoLanguageCode_ISO_LANGUAGE_CODE_MY          IsoLanguageCode = 220
	IsoLanguageCode_ISO_LANGUAGE_CODE_MYA         IsoLanguageCode = 221
	IsoLanguageCode_ISO_LANGUAGE_CODE_NA          IsoLanguageCode = 222
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAU         IsoLanguageCode = 223
	IsoLanguageCode_ISO_LANGUAGE_CODE_NB          IsoLanguageCode = 224
	IsoLanguageCode_ISO_LANGUAGE_CODE_NOB         IsoLanguageCode = 225
	IsoLanguageCode_ISO_LANGUAGE_CODE_ND          IsoLanguageCode = 226
	IsoLanguageCode_ISO_LANGUAGE_CODE_NDE         IsoLanguageCode = 227
	IsoLanguageCode_ISO_LANGUAGE_CODE_NE          IsoLanguageCode = 228
	IsoLanguageCode_ISO_LANGUAGE_CODE_NEP         IsoLanguageCode = 229
	IsoLanguageCode_ISO_LANGUAGE_CODE_NG          IsoLanguageCode = 230
	IsoLanguageCode_ISO_LANGUAGE_CODE_NDO         IsoLanguageCode = 231
	IsoLanguageCode_ISO_LANGUAGE_CODE_NL          IsoLanguageCode = 232
	IsoLanguageCode_ISO_LANGUAGE_CODE_NLD         IsoLanguageCode = 233
	IsoLanguageCode_ISO_LANGUAGE_CODE_NN          IsoLanguageCode = 234
	IsoLanguageCode_ISO_LANGUAGE_CODE_NNO         IsoLanguageCode = 235
	IsoLanguageCode_ISO_LANGUAGE_CODE_NO          IsoLanguageCode = 236
	IsoLanguageCode_ISO_LANGUAGE_CODE_NOR         IsoLanguageCode = 237
	IsoLanguageCode_ISO_LANGUAGE_CODE_NR          IsoLanguageCode = 238
	IsoLanguageCode_ISO_LANGUAGE_CODE_NBL         IsoLanguageCode = 239
	IsoLanguageCode_ISO_LANGUAGE_CODE_NV          IsoLanguageCode = 240
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAV         IsoLanguageCode = 241
	IsoLanguageCode_ISO_LANGUAGE_CODE_NY          IsoLanguageCode = 242
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYA         IsoLanguageCode = 243
	IsoLanguageCode_ISO_LANGUAGE_CODE_OC          IsoLanguageCode = 244
	IsoLanguageCode_ISO_LANGUAGE_CODE_OCI         IsoLanguageCode = 245
	IsoLanguageCode_ISO_LANGUAGE_CODE_OJ          IsoLanguageCode = 246
	IsoLanguageCode_ISO_LANGUAGE_CODE_OJI         IsoLanguageCode = 247
	IsoLanguageCode_ISO_LANGUAGE_CODE_OM          IsoLanguageCode = 248
	IsoLanguageCode_ISO_LANGUAGE_CODE_ORM         IsoLanguageCode = 249
	IsoLanguageCode_ISO_LANGUAGE_CODE_OR          IsoLanguageCode = 250
	IsoLanguageCode_ISO_LANGUAGE_CODE_ORI         IsoLanguageCode = 251
	IsoLanguageCode_ISO_LANGUAGE_CODE_OS          IsoLanguageCode = 252
	IsoLanguageCode_ISO_LANGUAGE_CODE_OSS         IsoLanguageCode = 253
	IsoLanguageCode_ISO_LANGUAGE_CODE_PA          IsoLanguageCode = 254
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAN         IsoLanguageCode = 255
	IsoLanguageCode_ISO_LANGUAGE_CODE_PI          IsoLanguageCode = 256
	IsoLanguageCode_ISO_LANGUAGE_CODE_PLI         IsoLanguageCode = 257
	IsoLanguageCode_ISO_LANGUAGE_CODE_PL          IsoLanguageCode = 258
	IsoLanguageCode_ISO_LANGUAGE_CODE_POL         IsoLanguageCode = 259
	IsoLanguageCode_ISO_LANGUAGE_CODE_PS          IsoLanguageCode = 260
	IsoLanguageCode_ISO_LANGUAGE_CODE_PUS         IsoLanguageCode = 261
	IsoLanguageCode_ISO_LANGUAGE_CODE_PT          IsoLanguageCode = 262
	IsoLanguageCode_ISO_LANGUAGE_CODE_POR         IsoLanguageCode = 263
	IsoLanguageCode_ISO_LANGUAGE_CODE_QU          IsoLanguageCode = 264
	IsoLanguageCode_ISO_LANGUAGE_CODE_QUE         IsoLanguageCode = 265
	IsoLanguageCode_ISO_LANGUAGE_CODE_RM          IsoLanguageCode = 266
	IsoLanguageCode_ISO_LANGUAGE_CODE_ROH         IsoLanguageCode = 267
	IsoLanguageCode_ISO_LANGUAGE_CODE_RN          IsoLanguageCode = 268
	IsoLanguageCode_ISO_LANGUAGE_CODE_RUN         IsoLanguageCode = 269
	IsoLanguageCode_ISO_LANGUAGE_CODE_RO          IsoLanguageCode = 270
	IsoLanguageCode_ISO_LANGUAGE_CODE_RON         IsoLanguageCode = 271
	IsoLanguageCode_ISO_LANGUAGE_CODE_RU          IsoLanguageCode = 272
	IsoLanguageCode_ISO_LANGUAGE_CODE_RUS         IsoLanguageCode = 273
	IsoLanguageCode_ISO_LANGUAGE_CODE_RW          IsoLanguageCode = 274
	IsoLanguageCode_ISO_LANGUAGE_CODE_KIN         IsoLanguageCode = 275
	IsoLanguageCode_ISO_LANGUAGE_CODE_SA          IsoLanguageCode = 276
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAN         IsoLanguageCode = 277
	IsoLanguageCode_ISO_LANGUAGE_CODE_SC          IsoLanguageCode = 278
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRD         IsoLanguageCode = 279
	IsoLanguageCode_ISO_LANGUAGE_CODE_SD          IsoLanguageCode = 280
	IsoLanguageCode_ISO_LANGUAGE_CODE_SND         IsoLanguageCode = 281
	IsoLanguageCode_ISO_LANGUAGE_CODE_SE          IsoLanguageCode = 282
	IsoLanguageCode_ISO_LANGUAGE_CODE_SME         IsoLanguageCode = 283
	IsoLanguageCode_ISO_LANGUAGE_CODE_SG          IsoLanguageCode = 284
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAG         IsoLanguageCode = 285
	IsoLanguageCode_ISO_LANGUAGE_CODE_SI          IsoLanguageCode = 286
	IsoLanguageCode_ISO_LANGUAGE_CODE_SIN         IsoLanguageCode = 287
	IsoLanguageCode_ISO_LANGUAGE_CODE_SK          IsoLanguageCode = 288
	IsoLanguageCode_ISO_LANGUAGE_CODE_SLK         IsoLanguageCode = 289
	IsoLanguageCode_ISO_LANGUAGE_CODE_SL          IsoLanguageCode = 290
	IsoLanguageCode_ISO_LANGUAGE_CODE_SLV         IsoLanguageCode = 291
	IsoLanguageCode_ISO_LANGUAGE_CODE_SM          IsoLanguageCode = 292
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMO         IsoLanguageCode = 293
	IsoLanguageCode_ISO_LANGUAGE_CODE_SN          IsoLanguageCode = 294
	IsoLanguageCode_ISO_LANGUAGE_CODE_SNA         IsoLanguageCode = 295
	IsoLanguageCode_ISO_LANGUAGE_CODE_SO          IsoLanguageCode = 296
	IsoLanguageCode_ISO_LANGUAGE_CODE_SOM         IsoLanguageCode = 297
	IsoLanguageCode_ISO_LANGUAGE_CODE_SQ          IsoLanguageCode = 298
	IsoLanguageCode_ISO_LANGUAGE_CODE_SQI         IsoLanguageCode = 299
	IsoLanguageCode_ISO_LANGUAGE_CODE_SR          IsoLanguageCode = 300
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRP         IsoLanguageCode = 301
	IsoLanguageCode_ISO_LANGUAGE_CODE_SS          IsoLanguageCode = 302
	IsoLanguageCode_ISO_LANGUAGE_CODE_SSW         IsoLanguageCode = 303
	IsoLanguageCode_ISO_LANGUAGE_CODE_ST          IsoLanguageCode = 304
	IsoLanguageCode_ISO_LANGUAGE_CODE_SOT         IsoLanguageCode = 305
	IsoLanguageCode_ISO_LANGUAGE_CODE_SU          IsoLanguageCode = 306
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUN         IsoLanguageCode = 307
	IsoLanguageCode_ISO_LANGUAGE_CODE_SV          IsoLanguageCode = 308
	IsoLanguageCode_ISO_LANGUAGE_CODE_SWE         IsoLanguageCode = 309
	IsoLanguageCode_ISO_LANGUAGE_CODE_SW          IsoLanguageCode = 310
	IsoLanguageCode_ISO_LANGUAGE_CODE_SWA         IsoLanguageCode = 311
	IsoLanguageCode_ISO_LANGUAGE_CODE_TA          IsoLanguageCode = 312
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAM         IsoLanguageCode = 313
	IsoLanguageCode_ISO_LANGUAGE_CODE_TE          IsoLanguageCode = 314
	IsoLanguageCode_ISO_LANGUAGE_CODE_TEL         IsoLanguageCode = 315
	IsoLanguageCode_ISO_LANGUAGE_CODE_TG          IsoLanguageCode = 316
	IsoLanguageCode_ISO_LANGUAGE_CODE_TGK         IsoLanguageCode = 317
	IsoLanguageCode_ISO_LANGUAGE_CODE_TH          IsoLanguageCode = 318
	IsoLanguageCode_ISO_LANGUAGE_CODE_THA         IsoLanguageCode = 319
	IsoLanguageCode_ISO_LANGUAGE_CODE_TI          IsoLanguageCode = 320
	IsoLanguageCode_ISO_LANGUAGE_CODE_TIR         IsoLanguageCode = 321
	IsoLanguageCode_ISO_LANGUAGE_CODE_TK          IsoLanguageCode = 322
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUK         IsoLanguageCode = 323
	IsoLanguageCode_ISO_LANGUAGE_CODE_TL          IsoLanguageCode = 324
	IsoLanguageCode_ISO_LANGUAGE_CODE_TGL         IsoLanguageCode = 325
	IsoLanguageCode_ISO_LANGUAGE_CODE_TN          IsoLanguageCode = 326
	IsoLanguageCode_ISO_LANGUAGE_CODE_TSN         IsoLanguageCode = 327
	IsoLanguageCode_ISO_LANGUAGE_CODE_TO          IsoLanguageCode = 328
	IsoLanguageCode_ISO_LANGUAGE_CODE_TON         IsoLanguageCode = 329
	IsoLanguageCode_ISO_LANGUAGE_CODE_TR          IsoLanguageCode = 330
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUR         IsoLanguageCode = 331
	IsoLanguageCode_ISO_LANGUAGE_CODE_TS          IsoLanguageCode = 332
	IsoLanguageCode_ISO_LANGUAGE_CODE_TSO         IsoLanguageCode = 333
	IsoLanguageCode_ISO_LANGUAGE_CODE_TT          IsoLanguageCode = 334
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAT         IsoLanguageCode = 335
	IsoLanguageCode_ISO_LANGUAGE_CODE_TW          IsoLanguageCode = 336
	IsoLanguageCode_ISO_LANGUAGE_CODE_TWI         IsoLanguageCode = 337
	IsoLanguageCode_ISO_LANGUAGE_CODE_TY          IsoLanguageCode = 338
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAH         IsoLanguageCode = 339
	IsoLanguageCode_ISO_LANGUAGE_CODE_UG          IsoLanguageCode = 340
	IsoLanguageCode_ISO_LANGUAGE_CODE_UIG         IsoLanguageCode = 341
	IsoLanguageCode_ISO_LANGUAGE_CODE_UK          IsoLanguageCode = 342
	IsoLanguageCode_ISO_LANGUAGE_CODE_UKR         IsoLanguageCode = 343
	IsoLanguageCode_ISO_LANGUAGE_CODE_UR          IsoLanguageCode = 344
	IsoLanguageCode_ISO_LANGUAGE_CODE_URD         IsoLanguageCode = 345
	IsoLanguageCode_ISO_LANGUAGE_CODE_UZ          IsoLanguageCode = 346
	IsoLanguageCode_ISO_LANGUAGE_CODE_UZB         IsoLanguageCode = 347
	IsoLanguageCode_ISO_LANGUAGE_CODE_VE          IsoLanguageCode = 348
	IsoLanguageCode_ISO_LANGUAGE_CODE_VEN         IsoLanguageCode = 349
	IsoLanguageCode_ISO_LANGUAGE_CODE_VI          IsoLanguageCode = 350
	IsoLanguageCode_ISO_LANGUAGE_CODE_VIE         IsoLanguageCode = 351
	IsoLanguageCode_ISO_LANGUAGE_CODE_VO          IsoLanguageCode = 352
	IsoLanguageCode_ISO_LANGUAGE_CODE_VOL         IsoLanguageCode = 353
	IsoLanguageCode_ISO_LANGUAGE_CODE_WA          IsoLanguageCode = 354
	IsoLanguageCode_ISO_LANGUAGE_CODE_WLN         IsoLanguageCode = 355
	IsoLanguageCode_ISO_LANGUAGE_CODE_WO          IsoLanguageCode = 356
	IsoLanguageCode_ISO_LANGUAGE_CODE_WOL         IsoLanguageCode = 357
	IsoLanguageCode_ISO_LANGUAGE_CODE_XH          IsoLanguageCode = 358
	IsoLanguageCode_ISO_LANGUAGE_CODE_XHO         IsoLanguageCode = 359
	IsoLanguageCode_ISO_LANGUAGE_CODE_YI          IsoLanguageCode = 360
	IsoLanguageCode_ISO_LANGUAGE_CODE_YID         IsoLanguageCode = 361
	IsoLanguageCode_ISO_LANGUAGE_CODE_YO          IsoLanguageCode = 362
	IsoLanguageCode_ISO_LANGUAGE_CODE_YOR         IsoLanguageCode = 363
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZA          IsoLanguageCode = 364
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZHA         IsoLanguageCode = 365
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZH          IsoLanguageCode = 366
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZHO         IsoLanguageCode = 367
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZU          IsoLanguageCode = 368
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZUL         IsoLanguageCode = 369
	IsoLanguageCode_ISO_LANGUAGE_CODE_ACE         IsoLanguageCode = 370
	IsoLanguageCode_ISO_LANGUAGE_CODE_ACH         IsoLanguageCode = 371
	IsoLanguageCode_ISO_LANGUAGE_CODE_ADA         IsoLanguageCode = 372
	IsoLanguageCode_ISO_LANGUAGE_CODE_ADY         IsoLanguageCode = 373
	IsoLanguageCode_ISO_LANGUAGE_CODE_AFA         IsoLanguageCode = 374
	IsoLanguageCode_ISO_LANGUAGE_CODE_AFH         IsoLanguageCode = 375
	IsoLanguageCode_ISO_LANGUAGE_CODE_AIN         IsoLanguageCode = 376
	IsoLanguageCode_ISO_LANGUAGE_CODE_AKK         IsoLanguageCode = 377
	IsoLanguageCode_ISO_LANGUAGE_CODE_ALE         IsoLanguageCode = 378
	IsoLanguageCode_ISO_LANGUAGE_CODE_ALG         IsoLanguageCode = 379
	IsoLanguageCode_ISO_LANGUAGE_CODE_ALT         IsoLanguageCode = 380
	IsoLanguageCode_ISO_LANGUAGE_CODE_ANG         IsoLanguageCode = 381
	IsoLanguageCode_ISO_LANGUAGE_CODE_ANP         IsoLanguageCode = 382
	IsoLanguageCode_ISO_LANGUAGE_CODE_APA         IsoLanguageCode = 383
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARC         IsoLanguageCode = 384
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARN         IsoLanguageCode = 385
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARP         IsoLanguageCode = 386
	IsoLanguageCode_ISO_LANGUAGE_CODE_ART         IsoLanguageCode = 387
	IsoLanguageCode_ISO_LANGUAGE_CODE_ARW         IsoLanguageCode = 388
	IsoLanguageCode_ISO_LANGUAGE_CODE_AST         IsoLanguageCode = 389
	IsoLanguageCode_ISO_LANGUAGE_CODE_ATH         IsoLanguageCode = 390
	IsoLanguageCode_ISO_LANGUAGE_CODE_AUS         IsoLanguageCode = 391
	IsoLanguageCode_ISO_LANGUAGE_CODE_AWA         IsoLanguageCode = 392
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAD         IsoLanguageCode = 393
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAI         IsoLanguageCode = 394
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAL         IsoLanguageCode = 395
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAN         IsoLanguageCode = 396
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAS         IsoLanguageCode = 397
	IsoLanguageCode_ISO_LANGUAGE_CODE_BAT         IsoLanguageCode = 398
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEJ         IsoLanguageCode = 399
	IsoLanguageCode_ISO_LANGUAGE_CODE_BEM         IsoLanguageCode = 400
	IsoLanguageCode_ISO_LANGUAGE_CODE_BER         IsoLanguageCode = 401
	IsoLanguageCode_ISO_LANGUAGE_CODE_BGC         IsoLanguageCode = 402
	IsoLanguageCode_ISO_LANGUAGE_CODE_BHO         IsoLanguageCode = 403
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIK         IsoLanguageCode = 404
	IsoLanguageCode_ISO_LANGUAGE_CODE_BIN         IsoLanguageCode = 405
	IsoLanguageCode_ISO_LANGUAGE_CODE_BLA         IsoLanguageCode = 406
	IsoLanguageCode_ISO_LANGUAGE_CODE_BNT         IsoLanguageCode = 407
	IsoLanguageCode_ISO_LANGUAGE_CODE_BRA         IsoLanguageCode = 408
	IsoLanguageCode_ISO_LANGUAGE_CODE_BTK         IsoLanguageCode = 409
	IsoLanguageCode_ISO_LANGUAGE_CODE_BUA         IsoLanguageCode = 410
	IsoLanguageCode_ISO_LANGUAGE_CODE_BUG         IsoLanguageCode = 411
	IsoLanguageCode_ISO_LANGUAGE_CODE_BYN         IsoLanguageCode = 412
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAD         IsoLanguageCode = 413
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAI         IsoLanguageCode = 414
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAR         IsoLanguageCode = 415
	IsoLanguageCode_ISO_LANGUAGE_CODE_CAU         IsoLanguageCode = 416
	IsoLanguageCode_ISO_LANGUAGE_CODE_CEB         IsoLanguageCode = 417
	IsoLanguageCode_ISO_LANGUAGE_CODE_CEL         IsoLanguageCode = 418
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHB         IsoLanguageCode = 419
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHG         IsoLanguageCode = 420
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHK         IsoLanguageCode = 421
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHM         IsoLanguageCode = 422
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHN         IsoLanguageCode = 423
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHO         IsoLanguageCode = 424
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHP         IsoLanguageCode = 425
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHR         IsoLanguageCode = 426
	IsoLanguageCode_ISO_LANGUAGE_CODE_CHY         IsoLanguageCode = 427
	IsoLanguageCode_ISO_LANGUAGE_CODE_CMC         IsoLanguageCode = 428
	IsoLanguageCode_ISO_LANGUAGE_CODE_CNR         IsoLanguageCode = 429
	IsoLanguageCode_ISO_LANGUAGE_CODE_COP         IsoLanguageCode = 430
	IsoLanguageCode_ISO_LANGUAGE_CODE_CPE         IsoLanguageCode = 431
	IsoLanguageCode_ISO_LANGUAGE_CODE_CPF         IsoLanguageCode = 432
	IsoLanguageCode_ISO_LANGUAGE_CODE_CPP         IsoLanguageCode = 433
	IsoLanguageCode_ISO_LANGUAGE_CODE_CRH         IsoLanguageCode = 434
	IsoLanguageCode_ISO_LANGUAGE_CODE_CRP         IsoLanguageCode = 435
	IsoLanguageCode_ISO_LANGUAGE_CODE_CSB         IsoLanguageCode = 436
	IsoLanguageCode_ISO_LANGUAGE_CODE_CUS         IsoLanguageCode = 437
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAK         IsoLanguageCode = 438
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAR         IsoLanguageCode = 439
	IsoLanguageCode_ISO_LANGUAGE_CODE_DAY         IsoLanguageCode = 440
	IsoLanguageCode_ISO_LANGUAGE_CODE_DEL         IsoLanguageCode = 441
	IsoLanguageCode_ISO_LANGUAGE_CODE_DEN         IsoLanguageCode = 442
	IsoLanguageCode_ISO_LANGUAGE_CODE_DGR         IsoLanguageCode = 443
	IsoLanguageCode_ISO_LANGUAGE_CODE_DIN         IsoLanguageCode = 444
	IsoLanguageCode_ISO_LANGUAGE_CODE_DOI         IsoLanguageCode = 445
	IsoLanguageCode_ISO_LANGUAGE_CODE_DRA         IsoLanguageCode = 446
	IsoLanguageCode_ISO_LANGUAGE_CODE_DSB         IsoLanguageCode = 447
	IsoLanguageCode_ISO_LANGUAGE_CODE_DUA         IsoLanguageCode = 448
	IsoLanguageCode_ISO_LANGUAGE_CODE_DUM         IsoLanguageCode = 449
	IsoLanguageCode_ISO_LANGUAGE_CODE_DYU         IsoLanguageCode = 450
	IsoLanguageCode_ISO_LANGUAGE_CODE_EFI         IsoLanguageCode = 451
	IsoLanguageCode_ISO_LANGUAGE_CODE_EGY         IsoLanguageCode = 452
	IsoLanguageCode_ISO_LANGUAGE_CODE_EKA         IsoLanguageCode = 453
	IsoLanguageCode_ISO_LANGUAGE_CODE_ELX         IsoLanguageCode = 454
	IsoLanguageCode_ISO_LANGUAGE_CODE_ENM         IsoLanguageCode = 455
	IsoLanguageCode_ISO_LANGUAGE_CODE_EWO         IsoLanguageCode = 456
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAN         IsoLanguageCode = 457
	IsoLanguageCode_ISO_LANGUAGE_CODE_FAT         IsoLanguageCode = 458
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIL         IsoLanguageCode = 459
	IsoLanguageCode_ISO_LANGUAGE_CODE_FIU         IsoLanguageCode = 460
	IsoLanguageCode_ISO_LANGUAGE_CODE_FON         IsoLanguageCode = 461
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRM         IsoLanguageCode = 462
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRO         IsoLanguageCode = 463
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRR         IsoLanguageCode = 464
	IsoLanguageCode_ISO_LANGUAGE_CODE_FRS         IsoLanguageCode = 465
	IsoLanguageCode_ISO_LANGUAGE_CODE_FUR         IsoLanguageCode = 466
	IsoLanguageCode_ISO_LANGUAGE_CODE_GAA         IsoLanguageCode = 467
	IsoLanguageCode_ISO_LANGUAGE_CODE_GAY         IsoLanguageCode = 468
	IsoLanguageCode_ISO_LANGUAGE_CODE_GBA         IsoLanguageCode = 469
	IsoLanguageCode_ISO_LANGUAGE_CODE_GEM         IsoLanguageCode = 470
	IsoLanguageCode_ISO_LANGUAGE_CODE_GEZ         IsoLanguageCode = 471
	IsoLanguageCode_ISO_LANGUAGE_CODE_GIL         IsoLanguageCode = 472
	IsoLanguageCode_ISO_LANGUAGE_CODE_GMH         IsoLanguageCode = 473
	IsoLanguageCode_ISO_LANGUAGE_CODE_GOH         IsoLanguageCode = 474
	IsoLanguageCode_ISO_LANGUAGE_CODE_GON         IsoLanguageCode = 475
	IsoLanguageCode_ISO_LANGUAGE_CODE_GOR         IsoLanguageCode = 476
	IsoLanguageCode_ISO_LANGUAGE_CODE_GOT         IsoLanguageCode = 477
	IsoLanguageCode_ISO_LANGUAGE_CODE_GRB         IsoLanguageCode = 478
	IsoLanguageCode_ISO_LANGUAGE_CODE_GRC         IsoLanguageCode = 479
	IsoLanguageCode_ISO_LANGUAGE_CODE_GSW         IsoLanguageCode = 480
	IsoLanguageCode_ISO_LANGUAGE_CODE_GWI         IsoLanguageCode = 481
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAI         IsoLanguageCode = 482
	IsoLanguageCode_ISO_LANGUAGE_CODE_HAW         IsoLanguageCode = 483
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIL         IsoLanguageCode = 484
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIM         IsoLanguageCode = 485
	IsoLanguageCode_ISO_LANGUAGE_CODE_HIT         IsoLanguageCode = 486
	IsoLanguageCode_ISO_LANGUAGE_CODE_HMN         IsoLanguageCode = 487
	IsoLanguageCode_ISO_LANGUAGE_CODE_HSB         IsoLanguageCode = 488
	IsoLanguageCode_ISO_LANGUAGE_CODE_HUP         IsoLanguageCode = 489
	IsoLanguageCode_ISO_LANGUAGE_CODE_IBA         IsoLanguageCode = 490
	IsoLanguageCode_ISO_LANGUAGE_CODE_IJO         IsoLanguageCode = 491
	IsoLanguageCode_ISO_LANGUAGE_CODE_ILO         IsoLanguageCode = 492
	IsoLanguageCode_ISO_LANGUAGE_CODE_INC         IsoLanguageCode = 493
	IsoLanguageCode_ISO_LANGUAGE_CODE_INE         IsoLanguageCode = 494
	IsoLanguageCode_ISO_LANGUAGE_CODE_INH         IsoLanguageCode = 495
	IsoLanguageCode_ISO_LANGUAGE_CODE_IRA         IsoLanguageCode = 496
	IsoLanguageCode_ISO_LANGUAGE_CODE_IRO         IsoLanguageCode = 497
	IsoLanguageCode_ISO_LANGUAGE_CODE_JBO         IsoLanguageCode = 498
	IsoLanguageCode_ISO_LANGUAGE_CODE_JPR         IsoLanguageCode = 499
	IsoLanguageCode_ISO_LANGUAGE_CODE_JRB         IsoLanguageCode = 500
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAA         IsoLanguageCode = 501
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAB         IsoLanguageCode = 502
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAC         IsoLanguageCode = 503
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAM         IsoLanguageCode = 504
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAR         IsoLanguageCode = 505
	IsoLanguageCode_ISO_LANGUAGE_CODE_KAW         IsoLanguageCode = 506
	IsoLanguageCode_ISO_LANGUAGE_CODE_KBD         IsoLanguageCode = 507
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHA         IsoLanguageCode = 508
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHI         IsoLanguageCode = 509
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHO         IsoLanguageCode = 510
	IsoLanguageCode_ISO_LANGUAGE_CODE_KMB         IsoLanguageCode = 511
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOK         IsoLanguageCode = 512
	IsoLanguageCode_ISO_LANGUAGE_CODE_KOS         IsoLanguageCode = 513
	IsoLanguageCode_ISO_LANGUAGE_CODE_KPE         IsoLanguageCode = 514
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRC         IsoLanguageCode = 515
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRL         IsoLanguageCode = 516
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRO         IsoLanguageCode = 517
	IsoLanguageCode_ISO_LANGUAGE_CODE_KRU         IsoLanguageCode = 518
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUM         IsoLanguageCode = 519
	IsoLanguageCode_ISO_LANGUAGE_CODE_KUT         IsoLanguageCode = 520
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAD         IsoLanguageCode = 521
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAH         IsoLanguageCode = 522
	IsoLanguageCode_ISO_LANGUAGE_CODE_LAM         IsoLanguageCode = 523
	IsoLanguageCode_ISO_LANGUAGE_CODE_LEZ         IsoLanguageCode = 524
	IsoLanguageCode_ISO_LANGUAGE_CODE_LOL         IsoLanguageCode = 525
	IsoLanguageCode_ISO_LANGUAGE_CODE_LOZ         IsoLanguageCode = 526
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUA         IsoLanguageCode = 527
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUI         IsoLanguageCode = 528
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUN         IsoLanguageCode = 529
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUO         IsoLanguageCode = 530
	IsoLanguageCode_ISO_LANGUAGE_CODE_LUS         IsoLanguageCode = 531
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAD         IsoLanguageCode = 532
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAG         IsoLanguageCode = 533
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAI         IsoLanguageCode = 534
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAK         IsoLanguageCode = 535
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAN         IsoLanguageCode = 536
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAP         IsoLanguageCode = 537
	IsoLanguageCode_ISO_LANGUAGE_CODE_MAS         IsoLanguageCode = 538
	IsoLanguageCode_ISO_LANGUAGE_CODE_MDF         IsoLanguageCode = 539
	IsoLanguageCode_ISO_LANGUAGE_CODE_MDR         IsoLanguageCode = 540
	IsoLanguageCode_ISO_LANGUAGE_CODE_MEN         IsoLanguageCode = 541
	IsoLanguageCode_ISO_LANGUAGE_CODE_MGA         IsoLanguageCode = 542
	IsoLanguageCode_ISO_LANGUAGE_CODE_MIC         IsoLanguageCode = 543
	IsoLanguageCode_ISO_LANGUAGE_CODE_MIN         IsoLanguageCode = 544
	IsoLanguageCode_ISO_LANGUAGE_CODE_MIS         IsoLanguageCode = 545
	IsoLanguageCode_ISO_LANGUAGE_CODE_MKH         IsoLanguageCode = 546
	IsoLanguageCode_ISO_LANGUAGE_CODE_MNC         IsoLanguageCode = 547
	IsoLanguageCode_ISO_LANGUAGE_CODE_MNI         IsoLanguageCode = 548
	IsoLanguageCode_ISO_LANGUAGE_CODE_MNO         IsoLanguageCode = 549
	IsoLanguageCode_ISO_LANGUAGE_CODE_MOH         IsoLanguageCode = 550
	IsoLanguageCode_ISO_LANGUAGE_CODE_MOS         IsoLanguageCode = 551
	IsoLanguageCode_ISO_LANGUAGE_CODE_MUL         IsoLanguageCode = 552
	IsoLanguageCode_ISO_LANGUAGE_CODE_MUN         IsoLanguageCode = 553
	IsoLanguageCode_ISO_LANGUAGE_CODE_MUS         IsoLanguageCode = 554
	IsoLanguageCode_ISO_LANGUAGE_CODE_MWL         IsoLanguageCode = 555
	IsoLanguageCode_ISO_LANGUAGE_CODE_MWR         IsoLanguageCode = 556
	IsoLanguageCode_ISO_LANGUAGE_CODE_MYN         IsoLanguageCode = 557
	IsoLanguageCode_ISO_LANGUAGE_CODE_MYV         IsoLanguageCode = 558
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAH         IsoLanguageCode = 559
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAI         IsoLanguageCode = 560
	IsoLanguageCode_ISO_LANGUAGE_CODE_NAP         IsoLanguageCode = 561
	IsoLanguageCode_ISO_LANGUAGE_CODE_NDS         IsoLanguageCode = 562
	IsoLanguageCode_ISO_LANGUAGE_CODE_NEW         IsoLanguageCode = 563
	IsoLanguageCode_ISO_LANGUAGE_CODE_NIA         IsoLanguageCode = 564
	IsoLanguageCode_ISO_LANGUAGE_CODE_NIC         IsoLanguageCode = 565
	IsoLanguageCode_ISO_LANGUAGE_CODE_NIU         IsoLanguageCode = 566
	IsoLanguageCode_ISO_LANGUAGE_CODE_NOG         IsoLanguageCode = 567
	IsoLanguageCode_ISO_LANGUAGE_CODE_NON         IsoLanguageCode = 568
	IsoLanguageCode_ISO_LANGUAGE_CODE_NQO         IsoLanguageCode = 569
	IsoLanguageCode_ISO_LANGUAGE_CODE_NSO         IsoLanguageCode = 570
	IsoLanguageCode_ISO_LANGUAGE_CODE_NUB         IsoLanguageCode = 571
	IsoLanguageCode_ISO_LANGUAGE_CODE_NWC         IsoLanguageCode = 572
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYM         IsoLanguageCode = 573
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYN         IsoLanguageCode = 574
	IsoLanguageCode_ISO_LANGUAGE_CODE_NYO         IsoLanguageCode = 575
	IsoLanguageCode_ISO_LANGUAGE_CODE_NZI         IsoLanguageCode = 576
	IsoLanguageCode_ISO_LANGUAGE_CODE_OSA         IsoLanguageCode = 577
	IsoLanguageCode_ISO_LANGUAGE_CODE_OTA         IsoLanguageCode = 578
	IsoLanguageCode_ISO_LANGUAGE_CODE_OTO         IsoLanguageCode = 579
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAA         IsoLanguageCode = 580
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAG         IsoLanguageCode = 581
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAL         IsoLanguageCode = 582
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAM         IsoLanguageCode = 583
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAP         IsoLanguageCode = 584
	IsoLanguageCode_ISO_LANGUAGE_CODE_PAU         IsoLanguageCode = 585
	IsoLanguageCode_ISO_LANGUAGE_CODE_PEO         IsoLanguageCode = 586
	IsoLanguageCode_ISO_LANGUAGE_CODE_PHI         IsoLanguageCode = 587
	IsoLanguageCode_ISO_LANGUAGE_CODE_PHN         IsoLanguageCode = 588
	IsoLanguageCode_ISO_LANGUAGE_CODE_PON         IsoLanguageCode = 589
	IsoLanguageCode_ISO_LANGUAGE_CODE_PRA         IsoLanguageCode = 590
	IsoLanguageCode_ISO_LANGUAGE_CODE_PRO         IsoLanguageCode = 591
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQA         IsoLanguageCode = 592
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQB         IsoLanguageCode = 593
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQC         IsoLanguageCode = 594
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQD         IsoLanguageCode = 595
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQE         IsoLanguageCode = 596
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQF         IsoLanguageCode = 597
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQG         IsoLanguageCode = 598
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQH         IsoLanguageCode = 599
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQI         IsoLanguageCode = 600
	IsoLanguageCode_ISO_LANGUAGE_CODE_QQJ         IsoLanguageCode = 601
	IsoLanguageCode_ISO_LANGUAGE_CODE_RAJ         IsoLanguageCode = 602
	IsoLanguageCode_ISO_LANGUAGE_CODE_RAP         IsoLanguageCode = 603
	IsoLanguageCode_ISO_LANGUAGE_CODE_RAR         IsoLanguageCode = 604
	IsoLanguageCode_ISO_LANGUAGE_CODE_ROA         IsoLanguageCode = 605
	IsoLanguageCode_ISO_LANGUAGE_CODE_ROM         IsoLanguageCode = 606
	IsoLanguageCode_ISO_LANGUAGE_CODE_RUP         IsoLanguageCode = 607
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAD         IsoLanguageCode = 608
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAH         IsoLanguageCode = 609
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAI         IsoLanguageCode = 610
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAL         IsoLanguageCode = 611
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAM         IsoLanguageCode = 612
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAS         IsoLanguageCode = 613
	IsoLanguageCode_ISO_LANGUAGE_CODE_SAT         IsoLanguageCode = 614
	IsoLanguageCode_ISO_LANGUAGE_CODE_SCN         IsoLanguageCode = 615
	IsoLanguageCode_ISO_LANGUAGE_CODE_SCO         IsoLanguageCode = 616
	IsoLanguageCode_ISO_LANGUAGE_CODE_SEL         IsoLanguageCode = 617
	IsoLanguageCode_ISO_LANGUAGE_CODE_SEM         IsoLanguageCode = 618
	IsoLanguageCode_ISO_LANGUAGE_CODE_SGA         IsoLanguageCode = 619
	IsoLanguageCode_ISO_LANGUAGE_CODE_SGN         IsoLanguageCode = 620
	IsoLanguageCode_ISO_LANGUAGE_CODE_SHN         IsoLanguageCode = 621
	IsoLanguageCode_ISO_LANGUAGE_CODE_SID         IsoLanguageCode = 622
	IsoLanguageCode_ISO_LANGUAGE_CODE_SIO         IsoLanguageCode = 623
	IsoLanguageCode_ISO_LANGUAGE_CODE_SIT         IsoLanguageCode = 624
	IsoLanguageCode_ISO_LANGUAGE_CODE_SLA         IsoLanguageCode = 625
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMA         IsoLanguageCode = 626
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMI         IsoLanguageCode = 627
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMJ         IsoLanguageCode = 628
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMN         IsoLanguageCode = 629
	IsoLanguageCode_ISO_LANGUAGE_CODE_SMS         IsoLanguageCode = 630
	IsoLanguageCode_ISO_LANGUAGE_CODE_SNK         IsoLanguageCode = 631
	IsoLanguageCode_ISO_LANGUAGE_CODE_SOG         IsoLanguageCode = 632
	IsoLanguageCode_ISO_LANGUAGE_CODE_SON         IsoLanguageCode = 633
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRN         IsoLanguageCode = 634
	IsoLanguageCode_ISO_LANGUAGE_CODE_SRR         IsoLanguageCode = 635
	IsoLanguageCode_ISO_LANGUAGE_CODE_SSA         IsoLanguageCode = 636
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUK         IsoLanguageCode = 637
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUS         IsoLanguageCode = 638
	IsoLanguageCode_ISO_LANGUAGE_CODE_SUX         IsoLanguageCode = 639
	IsoLanguageCode_ISO_LANGUAGE_CODE_SYC         IsoLanguageCode = 640
	IsoLanguageCode_ISO_LANGUAGE_CODE_SYR         IsoLanguageCode = 641
	IsoLanguageCode_ISO_LANGUAGE_CODE_TAI         IsoLanguageCode = 642
	IsoLanguageCode_ISO_LANGUAGE_CODE_TEM         IsoLanguageCode = 643
	IsoLanguageCode_ISO_LANGUAGE_CODE_TER         IsoLanguageCode = 644
	IsoLanguageCode_ISO_LANGUAGE_CODE_TET         IsoLanguageCode = 645
	IsoLanguageCode_ISO_LANGUAGE_CODE_TIG         IsoLanguageCode = 646
	IsoLanguageCode_ISO_LANGUAGE_CODE_TIV         IsoLanguageCode = 647
	IsoLanguageCode_ISO_LANGUAGE_CODE_TKL         IsoLanguageCode = 648
	IsoLanguageCode_ISO_LANGUAGE_CODE_TLH         IsoLanguageCode = 649
	IsoLanguageCode_ISO_LANGUAGE_CODE_TLI         IsoLanguageCode = 650
	IsoLanguageCode_ISO_LANGUAGE_CODE_TMH         IsoLanguageCode = 651
	IsoLanguageCode_ISO_LANGUAGE_CODE_TOG         IsoLanguageCode = 652
	IsoLanguageCode_ISO_LANGUAGE_CODE_TPI         IsoLanguageCode = 653
	IsoLanguageCode_ISO_LANGUAGE_CODE_TSI         IsoLanguageCode = 654
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUM         IsoLanguageCode = 655
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUP         IsoLanguageCode = 656
	IsoLanguageCode_ISO_LANGUAGE_CODE_TUT         IsoLanguageCode = 657
	IsoLanguageCode_ISO_LANGUAGE_CODE_TVL         IsoLanguageCode = 658
	IsoLanguageCode_ISO_LANGUAGE_CODE_TYV         IsoLanguageCode = 659
	IsoLanguageCode_ISO_LANGUAGE_CODE_UDM         IsoLanguageCode = 660
	IsoLanguageCode_ISO_LANGUAGE_CODE_UGA         IsoLanguageCode = 661
	IsoLanguageCode_ISO_LANGUAGE_CODE_UMB         IsoLanguageCode = 662
	IsoLanguageCode_ISO_LANGUAGE_CODE_UND         IsoLanguageCode = 663
	IsoLanguageCode_ISO_LANGUAGE_CODE_VAI         IsoLanguageCode = 664
	IsoLanguageCode_ISO_LANGUAGE_CODE_VOT         IsoLanguageCode = 665
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAK         IsoLanguageCode = 666
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAL         IsoLanguageCode = 667
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAR         IsoLanguageCode = 668
	IsoLanguageCode_ISO_LANGUAGE_CODE_WAS         IsoLanguageCode = 669
	IsoLanguageCode_ISO_LANGUAGE_CODE_WEN         IsoLanguageCode = 670
	IsoLanguageCode_ISO_LANGUAGE_CODE_XAL         IsoLanguageCode = 671
	IsoLanguageCode_ISO_LANGUAGE_CODE_YAO         IsoLanguageCode = 672
	IsoLanguageCode_ISO_LANGUAGE_CODE_YAP         IsoLanguageCode = 673
	IsoLanguageCode_ISO_LANGUAGE_CODE_YPK         IsoLanguageCode = 674
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZAP         IsoLanguageCode = 675
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZBL         IsoLanguageCode = 676
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZEN         IsoLanguageCode = 677
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZGH         IsoLanguageCode = 678
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZND         IsoLanguageCode = 679
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZUN         IsoLanguageCode = 680
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZXX         IsoLanguageCode = 681
	IsoLanguageCode_ISO_LANGUAGE_CODE_ZZA         IsoLanguageCode = 682
	IsoLanguageCode_ISO_LANGUAGE_CODE_AAA         IsoLanguageCode = 683
	IsoLanguageCode_ISO_LANGUAGE_CODE_CMN         IsoLanguageCode = 684
	IsoLanguageCode_ISO_LANGUAGE_CODE_GBM         IsoLanguageCode = 685
	IsoLanguageCode_ISO_LANGUAGE_CODE_GCF         IsoLanguageCode = 686
	IsoLanguageCode_ISO_LANGUAGE_CODE_HNE         IsoLanguageCode = 687
	IsoLanguageCode_ISO_LANGUAGE_CODE_JAM         IsoLanguageCode = 688
	IsoLanguageCode_ISO_LANGUAGE_CODE_KFY         IsoLanguageCode = 689
	IsoLanguageCode_ISO_LANGUAGE_CODE_KHW         IsoLanguageCode = 690
	IsoLanguageCode_ISO_LANGUAGE_CODE_MCM         IsoLanguageCode = 691
	IsoLanguageCode_ISO_LANGUAGE_CODE_MUP         IsoLanguageCode = 692
	IsoLanguageCode_ISO_LANGUAGE_CODE_SCK         IsoLanguageCode = 693
	IsoLanguageCode_ISO_LANGUAGE_CODE_SCL         IsoLanguageCode = 694
	IsoLanguageCode_ISO_LANGUAGE_CODE_SPV         IsoLanguageCode = 695
	IsoLanguageCode_ISO_LANGUAGE_CODE_TCY         IsoLanguageCode = 696
	IsoLanguageCode_ISO_LANGUAGE_CODE_YUE         IsoLanguageCode = 697
)

// Enum value maps for IsoLanguageCode.
var (
	IsoLanguageCode_name = map[int32]string{
		0:   "ISO_LANGUAGE_CODE_UNSPECIFIED",
		1:   "ISO_LANGUAGE_CODE_AA",
		2:   "ISO_LANGUAGE_CODE_AAR",
		3:   "ISO_LANGUAGE_CODE_AB",
		4:   "ISO_LANGUAGE_CODE_ABK",
		5:   "ISO_LANGUAGE_CODE_AE",
		6:   "ISO_LANGUAGE_CODE_AVE",
		7:   "ISO_LANGUAGE_CODE_AF",
		8:   "ISO_LANGUAGE_CODE_AFR",
		9:   "ISO_LANGUAGE_CODE_AK",
		10:  "ISO_LANGUAGE_CODE_AKA",
		11:  "ISO_LANGUAGE_CODE_AM",
		12:  "ISO_LANGUAGE_CODE_AMH",
		13:  "ISO_LANGUAGE_CODE_AN",
		14:  "ISO_LANGUAGE_CODE_ARG",
		15:  "ISO_LANGUAGE_CODE_AR",
		16:  "ISO_LANGUAGE_CODE_ARA",
		17:  "ISO_LANGUAGE_CODE_AS",
		18:  "ISO_LANGUAGE_CODE_ASM",
		19:  "ISO_LANGUAGE_CODE_AV",
		20:  "ISO_LANGUAGE_CODE_AVA",
		21:  "ISO_LANGUAGE_CODE_AY",
		22:  "ISO_LANGUAGE_CODE_AYM",
		23:  "ISO_LANGUAGE_CODE_AZ",
		24:  "ISO_LANGUAGE_CODE_AZE",
		25:  "ISO_LANGUAGE_CODE_BA",
		26:  "ISO_LANGUAGE_CODE_BAK",
		27:  "ISO_LANGUAGE_CODE_BE",
		28:  "ISO_LANGUAGE_CODE_BEL",
		29:  "ISO_LANGUAGE_CODE_BG",
		30:  "ISO_LANGUAGE_CODE_BUL",
		31:  "ISO_LANGUAGE_CODE_BH",
		32:  "ISO_LANGUAGE_CODE_BIH",
		33:  "ISO_LANGUAGE_CODE_BI",
		34:  "ISO_LANGUAGE_CODE_BIS",
		35:  "ISO_LANGUAGE_CODE_BM",
		36:  "ISO_LANGUAGE_CODE_BAM",
		37:  "ISO_LANGUAGE_CODE_BN",
		38:  "ISO_LANGUAGE_CODE_BEN",
		39:  "ISO_LANGUAGE_CODE_BO",
		40:  "ISO_LANGUAGE_CODE_BOD",
		41:  "ISO_LANGUAGE_CODE_BR",
		42:  "ISO_LANGUAGE_CODE_BRE",
		43:  "ISO_LANGUAGE_CODE_BS",
		44:  "ISO_LANGUAGE_CODE_BOS",
		45:  "ISO_LANGUAGE_CODE_CA",
		46:  "ISO_LANGUAGE_CODE_CAT",
		47:  "ISO_LANGUAGE_CODE_CE",
		48:  "ISO_LANGUAGE_CODE_CHE",
		49:  "ISO_LANGUAGE_CODE_CH",
		50:  "ISO_LANGUAGE_CODE_CHA",
		51:  "ISO_LANGUAGE_CODE_CO",
		52:  "ISO_LANGUAGE_CODE_COS",
		53:  "ISO_LANGUAGE_CODE_CR",
		54:  "ISO_LANGUAGE_CODE_CRE",
		55:  "ISO_LANGUAGE_CODE_CS",
		56:  "ISO_LANGUAGE_CODE_CES",
		57:  "ISO_LANGUAGE_CODE_CU",
		58:  "ISO_LANGUAGE_CODE_CHU",
		59:  "ISO_LANGUAGE_CODE_CV",
		60:  "ISO_LANGUAGE_CODE_CHV",
		61:  "ISO_LANGUAGE_CODE_CY",
		62:  "ISO_LANGUAGE_CODE_CYM",
		63:  "ISO_LANGUAGE_CODE_DA",
		64:  "ISO_LANGUAGE_CODE_DAN",
		65:  "ISO_LANGUAGE_CODE_DE",
		66:  "ISO_LANGUAGE_CODE_DEU",
		67:  "ISO_LANGUAGE_CODE_DV",
		68:  "ISO_LANGUAGE_CODE_DIV",
		69:  "ISO_LANGUAGE_CODE_DZ",
		70:  "ISO_LANGUAGE_CODE_DZO",
		71:  "ISO_LANGUAGE_CODE_EE",
		72:  "ISO_LANGUAGE_CODE_EWE",
		73:  "ISO_LANGUAGE_CODE_EL",
		74:  "ISO_LANGUAGE_CODE_ELL",
		75:  "ISO_LANGUAGE_CODE_EN",
		76:  "ISO_LANGUAGE_CODE_ENG",
		77:  "ISO_LANGUAGE_CODE_EO",
		78:  "ISO_LANGUAGE_CODE_EPO",
		79:  "ISO_LANGUAGE_CODE_ES",
		80:  "ISO_LANGUAGE_CODE_SPA",
		81:  "ISO_LANGUAGE_CODE_ET",
		82:  "ISO_LANGUAGE_CODE_EST",
		83:  "ISO_LANGUAGE_CODE_EU",
		84:  "ISO_LANGUAGE_CODE_EUS",
		85:  "ISO_LANGUAGE_CODE_FA",
		86:  "ISO_LANGUAGE_CODE_FAS",
		87:  "ISO_LANGUAGE_CODE_FF",
		88:  "ISO_LANGUAGE_CODE_FUL",
		89:  "ISO_LANGUAGE_CODE_FI",
		90:  "ISO_LANGUAGE_CODE_FIN",
		91:  "ISO_LANGUAGE_CODE_FJ",
		92:  "ISO_LANGUAGE_CODE_FIJ",
		93:  "ISO_LANGUAGE_CODE_FO",
		94:  "ISO_LANGUAGE_CODE_FAO",
		95:  "ISO_LANGUAGE_CODE_FR",
		96:  "ISO_LANGUAGE_CODE_FRA",
		97:  "ISO_LANGUAGE_CODE_FY",
		98:  "ISO_LANGUAGE_CODE_FRY",
		99:  "ISO_LANGUAGE_CODE_GA",
		100: "ISO_LANGUAGE_CODE_GLE",
		101: "ISO_LANGUAGE_CODE_GD",
		102: "ISO_LANGUAGE_CODE_GLA",
		103: "ISO_LANGUAGE_CODE_GL",
		104: "ISO_LANGUAGE_CODE_GLG",
		105: "ISO_LANGUAGE_CODE_GN",
		106: "ISO_LANGUAGE_CODE_GRN",
		107: "ISO_LANGUAGE_CODE_GU",
		108: "ISO_LANGUAGE_CODE_GUJ",
		109: "ISO_LANGUAGE_CODE_GV",
		110: "ISO_LANGUAGE_CODE_GLV",
		111: "ISO_LANGUAGE_CODE_HA",
		112: "ISO_LANGUAGE_CODE_HAU",
		113: "ISO_LANGUAGE_CODE_HE",
		114: "ISO_LANGUAGE_CODE_HEB",
		115: "ISO_LANGUAGE_CODE_HI",
		116: "ISO_LANGUAGE_CODE_HIN",
		117: "ISO_LANGUAGE_CODE_HO",
		118: "ISO_LANGUAGE_CODE_HMO",
		119: "ISO_LANGUAGE_CODE_HR",
		120: "ISO_LANGUAGE_CODE_HRV",
		121: "ISO_LANGUAGE_CODE_HT",
		122: "ISO_LANGUAGE_CODE_HAT",
		123: "ISO_LANGUAGE_CODE_HU",
		124: "ISO_LANGUAGE_CODE_HUN",
		125: "ISO_LANGUAGE_CODE_HY",
		126: "ISO_LANGUAGE_CODE_HYE",
		127: "ISO_LANGUAGE_CODE_HZ",
		128: "ISO_LANGUAGE_CODE_HER",
		129: "ISO_LANGUAGE_CODE_IA",
		130: "ISO_LANGUAGE_CODE_INA",
		131: "ISO_LANGUAGE_CODE_ID",
		132: "ISO_LANGUAGE_CODE_IND",
		133: "ISO_LANGUAGE_CODE_IE",
		134: "ISO_LANGUAGE_CODE_ILE",
		135: "ISO_LANGUAGE_CODE_IG",
		136: "ISO_LANGUAGE_CODE_IBO",
		137: "ISO_LANGUAGE_CODE_II",
		138: "ISO_LANGUAGE_CODE_III",
		139: "ISO_LANGUAGE_CODE_IK",
		140: "ISO_LANGUAGE_CODE_IPK",
		141: "ISO_LANGUAGE_CODE_IO",
		142: "ISO_LANGUAGE_CODE_IDO",
		143: "ISO_LANGUAGE_CODE_IS",
		144: "ISO_LANGUAGE_CODE_ISL",
		145: "ISO_LANGUAGE_CODE_IT",
		146: "ISO_LANGUAGE_CODE_ITA",
		147: "ISO_LANGUAGE_CODE_IU",
		148: "ISO_LANGUAGE_CODE_IKU",
		149: "ISO_LANGUAGE_CODE_JA",
		150: "ISO_LANGUAGE_CODE_JPN",
		151: "ISO_LANGUAGE_CODE_JV",
		152: "ISO_LANGUAGE_CODE_JAV",
		153: "ISO_LANGUAGE_CODE_KA",
		154: "ISO_LANGUAGE_CODE_KAT",
		155: "ISO_LANGUAGE_CODE_KG",
		156: "ISO_LANGUAGE_CODE_KON",
		157: "ISO_LANGUAGE_CODE_KI",
		158: "ISO_LANGUAGE_CODE_KIK",
		159: "ISO_LANGUAGE_CODE_KJ",
		160: "ISO_LANGUAGE_CODE_KUA",
		161: "ISO_LANGUAGE_CODE_KK",
		162: "ISO_LANGUAGE_CODE_KAZ",
		163: "ISO_LANGUAGE_CODE_KL",
		164: "ISO_LANGUAGE_CODE_KAL",
		165: "ISO_LANGUAGE_CODE_KM",
		166: "ISO_LANGUAGE_CODE_KHM",
		167: "ISO_LANGUAGE_CODE_KN",
		168: "ISO_LANGUAGE_CODE_KAN",
		169: "ISO_LANGUAGE_CODE_KO",
		170: "ISO_LANGUAGE_CODE_KOR",
		171: "ISO_LANGUAGE_CODE_KR",
		172: "ISO_LANGUAGE_CODE_KAU",
		173: "ISO_LANGUAGE_CODE_KS",
		174: "ISO_LANGUAGE_CODE_KAS",
		175: "ISO_LANGUAGE_CODE_KU",
		176: "ISO_LANGUAGE_CODE_KUR",
		177: "ISO_LANGUAGE_CODE_KV",
		178: "ISO_LANGUAGE_CODE_KOM",
		179: "ISO_LANGUAGE_CODE_KW",
		180: "ISO_LANGUAGE_CODE_COR",
		181: "ISO_LANGUAGE_CODE_KY",
		182: "ISO_LANGUAGE_CODE_KIR",
		183: "ISO_LANGUAGE_CODE_LA",
		184: "ISO_LANGUAGE_CODE_LAT",
		185: "ISO_LANGUAGE_CODE_LB",
		186: "ISO_LANGUAGE_CODE_LTZ",
		187: "ISO_LANGUAGE_CODE_LG",
		188: "ISO_LANGUAGE_CODE_LUG",
		189: "ISO_LANGUAGE_CODE_LI",
		190: "ISO_LANGUAGE_CODE_LIM",
		191: "ISO_LANGUAGE_CODE_LN",
		192: "ISO_LANGUAGE_CODE_LIN",
		193: "ISO_LANGUAGE_CODE_LO",
		194: "ISO_LANGUAGE_CODE_LAO",
		195: "ISO_LANGUAGE_CODE_LT",
		196: "ISO_LANGUAGE_CODE_LIT",
		197: "ISO_LANGUAGE_CODE_LU",
		198: "ISO_LANGUAGE_CODE_LUB",
		199: "ISO_LANGUAGE_CODE_LV",
		200: "ISO_LANGUAGE_CODE_LAV",
		201: "ISO_LANGUAGE_CODE_MG",
		202: "ISO_LANGUAGE_CODE_MLG",
		203: "ISO_LANGUAGE_CODE_MH",
		204: "ISO_LANGUAGE_CODE_MAH",
		205: "ISO_LANGUAGE_CODE_MI",
		206: "ISO_LANGUAGE_CODE_MRI",
		207: "ISO_LANGUAGE_CODE_MK",
		208: "ISO_LANGUAGE_CODE_MKD",
		209: "ISO_LANGUAGE_CODE_ML",
		210: "ISO_LANGUAGE_CODE_MAL",
		211: "ISO_LANGUAGE_CODE_MN",
		212: "ISO_LANGUAGE_CODE_MON",
		213: "ISO_LANGUAGE_CODE_MO",
		214: "ISO_LANGUAGE_CODE_MR",
		215: "ISO_LANGUAGE_CODE_MAR",
		216: "ISO_LANGUAGE_CODE_MS",
		217: "ISO_LANGUAGE_CODE_MSA",
		218: "ISO_LANGUAGE_CODE_MT",
		219: "ISO_LANGUAGE_CODE_MLT",
		220: "ISO_LANGUAGE_CODE_MY",
		221: "ISO_LANGUAGE_CODE_MYA",
		222: "ISO_LANGUAGE_CODE_NA",
		223: "ISO_LANGUAGE_CODE_NAU",
		224: "ISO_LANGUAGE_CODE_NB",
		225: "ISO_LANGUAGE_CODE_NOB",
		226: "ISO_LANGUAGE_CODE_ND",
		227: "ISO_LANGUAGE_CODE_NDE",
		228: "ISO_LANGUAGE_CODE_NE",
		229: "ISO_LANGUAGE_CODE_NEP",
		230: "ISO_LANGUAGE_CODE_NG",
		231: "ISO_LANGUAGE_CODE_NDO",
		232: "ISO_LANGUAGE_CODE_NL",
		233: "ISO_LANGUAGE_CODE_NLD",
		234: "ISO_LANGUAGE_CODE_NN",
		235: "ISO_LANGUAGE_CODE_NNO",
		236: "ISO_LANGUAGE_CODE_NO",
		237: "ISO_LANGUAGE_CODE_NOR",
		238: "ISO_LANGUAGE_CODE_NR",
		239: "ISO_LANGUAGE_CODE_NBL",
		240: "ISO_LANGUAGE_CODE_NV",
		241: "ISO_LANGUAGE_CODE_NAV",
		242: "ISO_LANGUAGE_CODE_NY",
		243: "ISO_LANGUAGE_CODE_NYA",
		244: "ISO_LANGUAGE_CODE_OC",
		245: "ISO_LANGUAGE_CODE_OCI",
		246: "ISO_LANGUAGE_CODE_OJ",
		247: "ISO_LANGUAGE_CODE_OJI",
		248: "ISO_LANGUAGE_CODE_OM",
		249: "ISO_LANGUAGE_CODE_ORM",
		250: "ISO_LANGUAGE_CODE_OR",
		251: "ISO_LANGUAGE_CODE_ORI",
		252: "ISO_LANGUAGE_CODE_OS",
		253: "ISO_LANGUAGE_CODE_OSS",
		254: "ISO_LANGUAGE_CODE_PA",
		255: "ISO_LANGUAGE_CODE_PAN",
		256: "ISO_LANGUAGE_CODE_PI",
		257: "ISO_LANGUAGE_CODE_PLI",
		258: "ISO_LANGUAGE_CODE_PL",
		259: "ISO_LANGUAGE_CODE_POL",
		260: "ISO_LANGUAGE_CODE_PS",
		261: "ISO_LANGUAGE_CODE_PUS",
		262: "ISO_LANGUAGE_CODE_PT",
		263: "ISO_LANGUAGE_CODE_POR",
		264: "ISO_LANGUAGE_CODE_QU",
		265: "ISO_LANGUAGE_CODE_QUE",
		266: "ISO_LANGUAGE_CODE_RM",
		267: "ISO_LANGUAGE_CODE_ROH",
		268: "ISO_LANGUAGE_CODE_RN",
		269: "ISO_LANGUAGE_CODE_RUN",
		270: "ISO_LANGUAGE_CODE_RO",
		271: "ISO_LANGUAGE_CODE_RON",
		272: "ISO_LANGUAGE_CODE_RU",
		273: "ISO_LANGUAGE_CODE_RUS",
		274: "ISO_LANGUAGE_CODE_RW",
		275: "ISO_LANGUAGE_CODE_KIN",
		276: "ISO_LANGUAGE_CODE_SA",
		277: "ISO_LANGUAGE_CODE_SAN",
		278: "ISO_LANGUAGE_CODE_SC",
		279: "ISO_LANGUAGE_CODE_SRD",
		280: "ISO_LANGUAGE_CODE_SD",
		281: "ISO_LANGUAGE_CODE_SND",
		282: "ISO_LANGUAGE_CODE_SE",
		283: "ISO_LANGUAGE_CODE_SME",
		284: "ISO_LANGUAGE_CODE_SG",
		285: "ISO_LANGUAGE_CODE_SAG",
		286: "ISO_LANGUAGE_CODE_SI",
		287: "ISO_LANGUAGE_CODE_SIN",
		288: "ISO_LANGUAGE_CODE_SK",
		289: "ISO_LANGUAGE_CODE_SLK",
		290: "ISO_LANGUAGE_CODE_SL",
		291: "ISO_LANGUAGE_CODE_SLV",
		292: "ISO_LANGUAGE_CODE_SM",
		293: "ISO_LANGUAGE_CODE_SMO",
		294: "ISO_LANGUAGE_CODE_SN",
		295: "ISO_LANGUAGE_CODE_SNA",
		296: "ISO_LANGUAGE_CODE_SO",
		297: "ISO_LANGUAGE_CODE_SOM",
		298: "ISO_LANGUAGE_CODE_SQ",
		299: "ISO_LANGUAGE_CODE_SQI",
		300: "ISO_LANGUAGE_CODE_SR",
		301: "ISO_LANGUAGE_CODE_SRP",
		302: "ISO_LANGUAGE_CODE_SS",
		303: "ISO_LANGUAGE_CODE_SSW",
		304: "ISO_LANGUAGE_CODE_ST",
		305: "ISO_LANGUAGE_CODE_SOT",
		306: "ISO_LANGUAGE_CODE_SU",
		307: "ISO_LANGUAGE_CODE_SUN",
		308: "ISO_LANGUAGE_CODE_SV",
		309: "ISO_LANGUAGE_CODE_SWE",
		310: "ISO_LANGUAGE_CODE_SW",
		311: "ISO_LANGUAGE_CODE_SWA",
		312: "ISO_LANGUAGE_CODE_TA",
		313: "ISO_LANGUAGE_CODE_TAM",
		314: "ISO_LANGUAGE_CODE_TE",
		315: "ISO_LANGUAGE_CODE_TEL",
		316: "ISO_LANGUAGE_CODE_TG",
		317: "ISO_LANGUAGE_CODE_TGK",
		318: "ISO_LANGUAGE_CODE_TH",
		319: "ISO_LANGUAGE_CODE_THA",
		320: "ISO_LANGUAGE_CODE_TI",
		321: "ISO_LANGUAGE_CODE_TIR",
		322: "ISO_LANGUAGE_CODE_TK",
		323: "ISO_LANGUAGE_CODE_TUK",
		324: "ISO_LANGUAGE_CODE_TL",
		325: "ISO_LANGUAGE_CODE_TGL",
		326: "ISO_LANGUAGE_CODE_TN",
		327: "ISO_LANGUAGE_CODE_TSN",
		328: "ISO_LANGUAGE_CODE_TO",
		329: "ISO_LANGUAGE_CODE_TON",
		330: "ISO_LANGUAGE_CODE_TR",
		331: "ISO_LANGUAGE_CODE_TUR",
		332: "ISO_LANGUAGE_CODE_TS",
		333: "ISO_LANGUAGE_CODE_TSO",
		334: "ISO_LANGUAGE_CODE_TT",
		335: "ISO_LANGUAGE_CODE_TAT",
		336: "ISO_LANGUAGE_CODE_TW",
		337: "ISO_LANGUAGE_CODE_TWI",
		338: "ISO_LANGUAGE_CODE_TY",
		339: "ISO_LANGUAGE_CODE_TAH",
		340: "ISO_LANGUAGE_CODE_UG",
		341: "ISO_LANGUAGE_CODE_UIG",
		342: "ISO_LANGUAGE_CODE_UK",
		343: "ISO_LANGUAGE_CODE_UKR",
		344: "ISO_LANGUAGE_CODE_UR",
		345: "ISO_LANGUAGE_CODE_URD",
		346: "ISO_LANGUAGE_CODE_UZ",
		347: "ISO_LANGUAGE_CODE_UZB",
		348: "ISO_LANGUAGE_CODE_VE",
		349: "ISO_LANGUAGE_CODE_VEN",
		350: "ISO_LANGUAGE_CODE_VI",
		351: "ISO_LANGUAGE_CODE_VIE",
		352: "ISO_LANGUAGE_CODE_VO",
		353: "ISO_LANGUAGE_CODE_VOL",
		354: "ISO_LANGUAGE_CODE_WA",
		355: "ISO_LANGUAGE_CODE_WLN",
		356: "ISO_LANGUAGE_CODE_WO",
		357: "ISO_LANGUAGE_CODE_WOL",
		358: "ISO_LANGUAGE_CODE_XH",
		359: "ISO_LANGUAGE_CODE_XHO",
		360: "ISO_LANGUAGE_CODE_YI",
		361: "ISO_LANGUAGE_CODE_YID",
		362: "ISO_LANGUAGE_CODE_YO",
		363: "ISO_LANGUAGE_CODE_YOR",
		364: "ISO_LANGUAGE_CODE_ZA",
		365: "ISO_LANGUAGE_CODE_ZHA",
		366: "ISO_LANGUAGE_CODE_ZH",
		367: "ISO_LANGUAGE_CODE_ZHO",
		368: "ISO_LANGUAGE_CODE_ZU",
		369: "ISO_LANGUAGE_CODE_ZUL",
		370: "ISO_LANGUAGE_CODE_ACE",
		371: "ISO_LANGUAGE_CODE_ACH",
		372: "ISO_LANGUAGE_CODE_ADA",
		373: "ISO_LANGUAGE_CODE_ADY",
		374: "ISO_LANGUAGE_CODE_AFA",
		375: "ISO_LANGUAGE_CODE_AFH",
		376: "ISO_LANGUAGE_CODE_AIN",
		377: "ISO_LANGUAGE_CODE_AKK",
		378: "ISO_LANGUAGE_CODE_ALE",
		379: "ISO_LANGUAGE_CODE_ALG",
		380: "ISO_LANGUAGE_CODE_ALT",
		381: "ISO_LANGUAGE_CODE_ANG",
		382: "ISO_LANGUAGE_CODE_ANP",
		383: "ISO_LANGUAGE_CODE_APA",
		384: "ISO_LANGUAGE_CODE_ARC",
		385: "ISO_LANGUAGE_CODE_ARN",
		386: "ISO_LANGUAGE_CODE_ARP",
		387: "ISO_LANGUAGE_CODE_ART",
		388: "ISO_LANGUAGE_CODE_ARW",
		389: "ISO_LANGUAGE_CODE_AST",
		390: "ISO_LANGUAGE_CODE_ATH",
		391: "ISO_LANGUAGE_CODE_AUS",
		392: "ISO_LANGUAGE_CODE_AWA",
		393: "ISO_LANGUAGE_CODE_BAD",
		394: "ISO_LANGUAGE_CODE_BAI",
		395: "ISO_LANGUAGE_CODE_BAL",
		396: "ISO_LANGUAGE_CODE_BAN",
		397: "ISO_LANGUAGE_CODE_BAS",
		398: "ISO_LANGUAGE_CODE_BAT",
		399: "ISO_LANGUAGE_CODE_BEJ",
		400: "ISO_LANGUAGE_CODE_BEM",
		401: "ISO_LANGUAGE_CODE_BER",
		402: "ISO_LANGUAGE_CODE_BGC",
		403: "ISO_LANGUAGE_CODE_BHO",
		404: "ISO_LANGUAGE_CODE_BIK",
		405: "ISO_LANGUAGE_CODE_BIN",
		406: "ISO_LANGUAGE_CODE_BLA",
		407: "ISO_LANGUAGE_CODE_BNT",
		408: "ISO_LANGUAGE_CODE_BRA",
		409: "ISO_LANGUAGE_CODE_BTK",
		410: "ISO_LANGUAGE_CODE_BUA",
		411: "ISO_LANGUAGE_CODE_BUG",
		412: "ISO_LANGUAGE_CODE_BYN",
		413: "ISO_LANGUAGE_CODE_CAD",
		414: "ISO_LANGUAGE_CODE_CAI",
		415: "ISO_LANGUAGE_CODE_CAR",
		416: "ISO_LANGUAGE_CODE_CAU",
		417: "ISO_LANGUAGE_CODE_CEB",
		418: "ISO_LANGUAGE_CODE_CEL",
		419: "ISO_LANGUAGE_CODE_CHB",
		420: "ISO_LANGUAGE_CODE_CHG",
		421: "ISO_LANGUAGE_CODE_CHK",
		422: "ISO_LANGUAGE_CODE_CHM",
		423: "ISO_LANGUAGE_CODE_CHN",
		424: "ISO_LANGUAGE_CODE_CHO",
		425: "ISO_LANGUAGE_CODE_CHP",
		426: "ISO_LANGUAGE_CODE_CHR",
		427: "ISO_LANGUAGE_CODE_CHY",
		428: "ISO_LANGUAGE_CODE_CMC",
		429: "ISO_LANGUAGE_CODE_CNR",
		430: "ISO_LANGUAGE_CODE_COP",
		431: "ISO_LANGUAGE_CODE_CPE",
		432: "ISO_LANGUAGE_CODE_CPF",
		433: "ISO_LANGUAGE_CODE_CPP",
		434: "ISO_LANGUAGE_CODE_CRH",
		435: "ISO_LANGUAGE_CODE_CRP",
		436: "ISO_LANGUAGE_CODE_CSB",
		437: "ISO_LANGUAGE_CODE_CUS",
		438: "ISO_LANGUAGE_CODE_DAK",
		439: "ISO_LANGUAGE_CODE_DAR",
		440: "ISO_LANGUAGE_CODE_DAY",
		441: "ISO_LANGUAGE_CODE_DEL",
		442: "ISO_LANGUAGE_CODE_DEN",
		443: "ISO_LANGUAGE_CODE_DGR",
		444: "ISO_LANGUAGE_CODE_DIN",
		445: "ISO_LANGUAGE_CODE_DOI",
		446: "ISO_LANGUAGE_CODE_DRA",
		447: "ISO_LANGUAGE_CODE_DSB",
		448: "ISO_LANGUAGE_CODE_DUA",
		449: "ISO_LANGUAGE_CODE_DUM",
		450: "ISO_LANGUAGE_CODE_DYU",
		451: "ISO_LANGUAGE_CODE_EFI",
		452: "ISO_LANGUAGE_CODE_EGY",
		453: "ISO_LANGUAGE_CODE_EKA",
		454: "ISO_LANGUAGE_CODE_ELX",
		455: "ISO_LANGUAGE_CODE_ENM",
		456: "ISO_LANGUAGE_CODE_EWO",
		457: "ISO_LANGUAGE_CODE_FAN",
		458: "ISO_LANGUAGE_CODE_FAT",
		459: "ISO_LANGUAGE_CODE_FIL",
		460: "ISO_LANGUAGE_CODE_FIU",
		461: "ISO_LANGUAGE_CODE_FON",
		462: "ISO_LANGUAGE_CODE_FRM",
		463: "ISO_LANGUAGE_CODE_FRO",
		464: "ISO_LANGUAGE_CODE_FRR",
		465: "ISO_LANGUAGE_CODE_FRS",
		466: "ISO_LANGUAGE_CODE_FUR",
		467: "ISO_LANGUAGE_CODE_GAA",
		468: "ISO_LANGUAGE_CODE_GAY",
		469: "ISO_LANGUAGE_CODE_GBA",
		470: "ISO_LANGUAGE_CODE_GEM",
		471: "ISO_LANGUAGE_CODE_GEZ",
		472: "ISO_LANGUAGE_CODE_GIL",
		473: "ISO_LANGUAGE_CODE_GMH",
		474: "ISO_LANGUAGE_CODE_GOH",
		475: "ISO_LANGUAGE_CODE_GON",
		476: "ISO_LANGUAGE_CODE_GOR",
		477: "ISO_LANGUAGE_CODE_GOT",
		478: "ISO_LANGUAGE_CODE_GRB",
		479: "ISO_LANGUAGE_CODE_GRC",
		480: "ISO_LANGUAGE_CODE_GSW",
		481: "ISO_LANGUAGE_CODE_GWI",
		482: "ISO_LANGUAGE_CODE_HAI",
		483: "ISO_LANGUAGE_CODE_HAW",
		484: "ISO_LANGUAGE_CODE_HIL",
		485: "ISO_LANGUAGE_CODE_HIM",
		486: "ISO_LANGUAGE_CODE_HIT",
		487: "ISO_LANGUAGE_CODE_HMN",
		488: "ISO_LANGUAGE_CODE_HSB",
		489: "ISO_LANGUAGE_CODE_HUP",
		490: "ISO_LANGUAGE_CODE_IBA",
		491: "ISO_LANGUAGE_CODE_IJO",
		492: "ISO_LANGUAGE_CODE_ILO",
		493: "ISO_LANGUAGE_CODE_INC",
		494: "ISO_LANGUAGE_CODE_INE",
		495: "ISO_LANGUAGE_CODE_INH",
		496: "ISO_LANGUAGE_CODE_IRA",
		497: "ISO_LANGUAGE_CODE_IRO",
		498: "ISO_LANGUAGE_CODE_JBO",
		499: "ISO_LANGUAGE_CODE_JPR",
		500: "ISO_LANGUAGE_CODE_JRB",
		501: "ISO_LANGUAGE_CODE_KAA",
		502: "ISO_LANGUAGE_CODE_KAB",
		503: "ISO_LANGUAGE_CODE_KAC",
		504: "ISO_LANGUAGE_CODE_KAM",
		505: "ISO_LANGUAGE_CODE_KAR",
		506: "ISO_LANGUAGE_CODE_KAW",
		507: "ISO_LANGUAGE_CODE_KBD",
		508: "ISO_LANGUAGE_CODE_KHA",
		509: "ISO_LANGUAGE_CODE_KHI",
		510: "ISO_LANGUAGE_CODE_KHO",
		511: "ISO_LANGUAGE_CODE_KMB",
		512: "ISO_LANGUAGE_CODE_KOK",
		513: "ISO_LANGUAGE_CODE_KOS",
		514: "ISO_LANGUAGE_CODE_KPE",
		515: "ISO_LANGUAGE_CODE_KRC",
		516: "ISO_LANGUAGE_CODE_KRL",
		517: "ISO_LANGUAGE_CODE_KRO",
		518: "ISO_LANGUAGE_CODE_KRU",
		519: "ISO_LANGUAGE_CODE_KUM",
		520: "ISO_LANGUAGE_CODE_KUT",
		521: "ISO_LANGUAGE_CODE_LAD",
		522: "ISO_LANGUAGE_CODE_LAH",
		523: "ISO_LANGUAGE_CODE_LAM",
		524: "ISO_LANGUAGE_CODE_LEZ",
		525: "ISO_LANGUAGE_CODE_LOL",
		526: "ISO_LANGUAGE_CODE_LOZ",
		527: "ISO_LANGUAGE_CODE_LUA",
		528: "ISO_LANGUAGE_CODE_LUI",
		529: "ISO_LANGUAGE_CODE_LUN",
		530: "ISO_LANGUAGE_CODE_LUO",
		531: "ISO_LANGUAGE_CODE_LUS",
		532: "ISO_LANGUAGE_CODE_MAD",
		533: "ISO_LANGUAGE_CODE_MAG",
		534: "ISO_LANGUAGE_CODE_MAI",
		535: "ISO_LANGUAGE_CODE_MAK",
		536: "ISO_LANGUAGE_CODE_MAN",
		537: "ISO_LANGUAGE_CODE_MAP",
		538: "ISO_LANGUAGE_CODE_MAS",
		539: "ISO_LANGUAGE_CODE_MDF",
		540: "ISO_LANGUAGE_CODE_MDR",
		541: "ISO_LANGUAGE_CODE_MEN",
		542: "ISO_LANGUAGE_CODE_MGA",
		543: "ISO_LANGUAGE_CODE_MIC",
		544: "ISO_LANGUAGE_CODE_MIN",
		545: "ISO_LANGUAGE_CODE_MIS",
		546: "ISO_LANGUAGE_CODE_MKH",
		547: "ISO_LANGUAGE_CODE_MNC",
		548: "ISO_LANGUAGE_CODE_MNI",
		549: "ISO_LANGUAGE_CODE_MNO",
		550: "ISO_LANGUAGE_CODE_MOH",
		551: "ISO_LANGUAGE_CODE_MOS",
		552: "ISO_LANGUAGE_CODE_MUL",
		553: "ISO_LANGUAGE_CODE_MUN",
		554: "ISO_LANGUAGE_CODE_MUS",
		555: "ISO_LANGUAGE_CODE_MWL",
		556: "ISO_LANGUAGE_CODE_MWR",
		557: "ISO_LANGUAGE_CODE_MYN",
		558: "ISO_LANGUAGE_CODE_MYV",
		559: "ISO_LANGUAGE_CODE_NAH",
		560: "ISO_LANGUAGE_CODE_NAI",
		561: "ISO_LANGUAGE_CODE_NAP",
		562: "ISO_LANGUAGE_CODE_NDS",
		563: "ISO_LANGUAGE_CODE_NEW",
		564: "ISO_LANGUAGE_CODE_NIA",
		565: "ISO_LANGUAGE_CODE_NIC",
		566: "ISO_LANGUAGE_CODE_NIU",
		567: "ISO_LANGUAGE_CODE_NOG",
		568: "ISO_LANGUAGE_CODE_NON",
		569: "ISO_LANGUAGE_CODE_NQO",
		570: "ISO_LANGUAGE_CODE_NSO",
		571: "ISO_LANGUAGE_CODE_NUB",
		572: "ISO_LANGUAGE_CODE_NWC",
		573: "ISO_LANGUAGE_CODE_NYM",
		574: "ISO_LANGUAGE_CODE_NYN",
		575: "ISO_LANGUAGE_CODE_NYO",
		576: "ISO_LANGUAGE_CODE_NZI",
		577: "ISO_LANGUAGE_CODE_OSA",
		578: "ISO_LANGUAGE_CODE_OTA",
		579: "ISO_LANGUAGE_CODE_OTO",
		580: "ISO_LANGUAGE_CODE_PAA",
		581: "ISO_LANGUAGE_CODE_PAG",
		582: "ISO_LANGUAGE_CODE_PAL",
		583: "ISO_LANGUAGE_CODE_PAM",
		584: "ISO_LANGUAGE_CODE_PAP",
		585: "ISO_LANGUAGE_CODE_PAU",
		586: "ISO_LANGUAGE_CODE_PEO",
		587: "ISO_LANGUAGE_CODE_PHI",
		588: "ISO_LANGUAGE_CODE_PHN",
		589: "ISO_LANGUAGE_CODE_PON",
		590: "ISO_LANGUAGE_CODE_PRA",
		591: "ISO_LANGUAGE_CODE_PRO",
		592: "ISO_LANGUAGE_CODE_QQA",
		593: "ISO_LANGUAGE_CODE_QQB",
		594: "ISO_LANGUAGE_CODE_QQC",
		595: "ISO_LANGUAGE_CODE_QQD",
		596: "ISO_LANGUAGE_CODE_QQE",
		597: "ISO_LANGUAGE_CODE_QQF",
		598: "ISO_LANGUAGE_CODE_QQG",
		599: "ISO_LANGUAGE_CODE_QQH",
		600: "ISO_LANGUAGE_CODE_QQI",
		601: "ISO_LANGUAGE_CODE_QQJ",
		602: "ISO_LANGUAGE_CODE_RAJ",
		603: "ISO_LANGUAGE_CODE_RAP",
		604: "ISO_LANGUAGE_CODE_RAR",
		605: "ISO_LANGUAGE_CODE_ROA",
		606: "ISO_LANGUAGE_CODE_ROM",
		607: "ISO_LANGUAGE_CODE_RUP",
		608: "ISO_LANGUAGE_CODE_SAD",
		609: "ISO_LANGUAGE_CODE_SAH",
		610: "ISO_LANGUAGE_CODE_SAI",
		611: "ISO_LANGUAGE_CODE_SAL",
		612: "ISO_LANGUAGE_CODE_SAM",
		613: "ISO_LANGUAGE_CODE_SAS",
		614: "ISO_LANGUAGE_CODE_SAT",
		615: "ISO_LANGUAGE_CODE_SCN",
		616: "ISO_LANGUAGE_CODE_SCO",
		617: "ISO_LANGUAGE_CODE_SEL",
		618: "ISO_LANGUAGE_CODE_SEM",
		619: "ISO_LANGUAGE_CODE_SGA",
		620: "ISO_LANGUAGE_CODE_SGN",
		621: "ISO_LANGUAGE_CODE_SHN",
		622: "ISO_LANGUAGE_CODE_SID",
		623: "ISO_LANGUAGE_CODE_SIO",
		624: "ISO_LANGUAGE_CODE_SIT",
		625: "ISO_LANGUAGE_CODE_SLA",
		626: "ISO_LANGUAGE_CODE_SMA",
		627: "ISO_LANGUAGE_CODE_SMI",
		628: "ISO_LANGUAGE_CODE_SMJ",
		629: "ISO_LANGUAGE_CODE_SMN",
		630: "ISO_LANGUAGE_CODE_SMS",
		631: "ISO_LANGUAGE_CODE_SNK",
		632: "ISO_LANGUAGE_CODE_SOG",
		633: "ISO_LANGUAGE_CODE_SON",
		634: "ISO_LANGUAGE_CODE_SRN",
		635: "ISO_LANGUAGE_CODE_SRR",
		636: "ISO_LANGUAGE_CODE_SSA",
		637: "ISO_LANGUAGE_CODE_SUK",
		638: "ISO_LANGUAGE_CODE_SUS",
		639: "ISO_LANGUAGE_CODE_SUX",
		640: "ISO_LANGUAGE_CODE_SYC",
		641: "ISO_LANGUAGE_CODE_SYR",
		642: "ISO_LANGUAGE_CODE_TAI",
		643: "ISO_LANGUAGE_CODE_TEM",
		644: "ISO_LANGUAGE_CODE_TER",
		645: "ISO_LANGUAGE_CODE_TET",
		646: "ISO_LANGUAGE_CODE_TIG",
		647: "ISO_LANGUAGE_CODE_TIV",
		648: "ISO_LANGUAGE_CODE_TKL",
		649: "ISO_LANGUAGE_CODE_TLH",
		650: "ISO_LANGUAGE_CODE_TLI",
		651: "ISO_LANGUAGE_CODE_TMH",
		652: "ISO_LANGUAGE_CODE_TOG",
		653: "ISO_LANGUAGE_CODE_TPI",
		654: "ISO_LANGUAGE_CODE_TSI",
		655: "ISO_LANGUAGE_CODE_TUM",
		656: "ISO_LANGUAGE_CODE_TUP",
		657: "ISO_LANGUAGE_CODE_TUT",
		658: "ISO_LANGUAGE_CODE_TVL",
		659: "ISO_LANGUAGE_CODE_TYV",
		660: "ISO_LANGUAGE_CODE_UDM",
		661: "ISO_LANGUAGE_CODE_UGA",
		662: "ISO_LANGUAGE_CODE_UMB",
		663: "ISO_LANGUAGE_CODE_UND",
		664: "ISO_LANGUAGE_CODE_VAI",
		665: "ISO_LANGUAGE_CODE_VOT",
		666: "ISO_LANGUAGE_CODE_WAK",
		667: "ISO_LANGUAGE_CODE_WAL",
		668: "ISO_LANGUAGE_CODE_WAR",
		669: "ISO_LANGUAGE_CODE_WAS",
		670: "ISO_LANGUAGE_CODE_WEN",
		671: "ISO_LANGUAGE_CODE_XAL",
		672: "ISO_LANGUAGE_CODE_YAO",
		673: "ISO_LANGUAGE_CODE_YAP",
		674: "ISO_LANGUAGE_CODE_YPK",
		675: "ISO_LANGUAGE_CODE_ZAP",
		676: "ISO_LANGUAGE_CODE_ZBL",
		677: "ISO_LANGUAGE_CODE_ZEN",
		678: "ISO_LANGUAGE_CODE_ZGH",
		679: "ISO_LANGUAGE_CODE_ZND",
		680: "ISO_LANGUAGE_CODE_ZUN",
		681: "ISO_LANGUAGE_CODE_ZXX",
		682: "ISO_LANGUAGE_CODE_ZZA",
		683: "ISO_LANGUAGE_CODE_AAA",
		684: "ISO_LANGUAGE_CODE_CMN",
		685: "ISO_LANGUAGE_CODE_GBM",
		686: "ISO_LANGUAGE_CODE_GCF",
		687: "ISO_LANGUAGE_CODE_HNE",
		688: "ISO_LANGUAGE_CODE_JAM",
		689: "ISO_LANGUAGE_CODE_KFY",
		690: "ISO_LANGUAGE_CODE_KHW",
		691: "ISO_LANGUAGE_CODE_MCM",
		692: "ISO_LANGUAGE_CODE_MUP",
		693: "ISO_LANGUAGE_CODE_SCK",
		694: "ISO_LANGUAGE_CODE_SCL",
		695: "ISO_LANGUAGE_CODE_SPV",
		696: "ISO_LANGUAGE_CODE_TCY",
		697: "ISO_LANGUAGE_CODE_YUE",
	}
	IsoLanguageCode_value = map[string]int32{
		"ISO_LANGUAGE_CODE_UNSPECIFIED": 0,
		"ISO_LANGUAGE_CODE_AA":          1,
		"ISO_LANGUAGE_CODE_AAR":         2,
		"ISO_LANGUAGE_CODE_AB":          3,
		"ISO_LANGUAGE_CODE_ABK":         4,
		"ISO_LANGUAGE_CODE_AE":          5,
		"ISO_LANGUAGE_CODE_AVE":         6,
		"ISO_LANGUAGE_CODE_AF":          7,
		"ISO_LANGUAGE_CODE_AFR":         8,
		"ISO_LANGUAGE_CODE_AK":          9,
		"ISO_LANGUAGE_CODE_AKA":         10,
		"ISO_LANGUAGE_CODE_AM":          11,
		"ISO_LANGUAGE_CODE_AMH":         12,
		"ISO_LANGUAGE_CODE_AN":          13,
		"ISO_LANGUAGE_CODE_ARG":         14,
		"ISO_LANGUAGE_CODE_AR":          15,
		"ISO_LANGUAGE_CODE_ARA":         16,
		"ISO_LANGUAGE_CODE_AS":          17,
		"ISO_LANGUAGE_CODE_ASM":         18,
		"ISO_LANGUAGE_CODE_AV":          19,
		"ISO_LANGUAGE_CODE_AVA":         20,
		"ISO_LANGUAGE_CODE_AY":          21,
		"ISO_LANGUAGE_CODE_AYM":         22,
		"ISO_LANGUAGE_CODE_AZ":          23,
		"ISO_LANGUAGE_CODE_AZE":         24,
		"ISO_LANGUAGE_CODE_BA":          25,
		"ISO_LANGUAGE_CODE_BAK":         26,
		"ISO_LANGUAGE_CODE_BE":          27,
		"ISO_LANGUAGE_CODE_BEL":         28,
		"ISO_LANGUAGE_CODE_BG":          29,
		"ISO_LANGUAGE_CODE_BUL":         30,
		"ISO_LANGUAGE_CODE_BH":          31,
		"ISO_LANGUAGE_CODE_BIH":         32,
		"ISO_LANGUAGE_CODE_BI":          33,
		"ISO_LANGUAGE_CODE_BIS":         34,
		"ISO_LANGUAGE_CODE_BM":          35,
		"ISO_LANGUAGE_CODE_BAM":         36,
		"ISO_LANGUAGE_CODE_BN":          37,
		"ISO_LANGUAGE_CODE_BEN":         38,
		"ISO_LANGUAGE_CODE_BO":          39,
		"ISO_LANGUAGE_CODE_BOD":         40,
		"ISO_LANGUAGE_CODE_BR":          41,
		"ISO_LANGUAGE_CODE_BRE":         42,
		"ISO_LANGUAGE_CODE_BS":          43,
		"ISO_LANGUAGE_CODE_BOS":         44,
		"ISO_LANGUAGE_CODE_CA":          45,
		"ISO_LANGUAGE_CODE_CAT":         46,
		"ISO_LANGUAGE_CODE_CE":          47,
		"ISO_LANGUAGE_CODE_CHE":         48,
		"ISO_LANGUAGE_CODE_CH":          49,
		"ISO_LANGUAGE_CODE_CHA":         50,
		"ISO_LANGUAGE_CODE_CO":          51,
		"ISO_LANGUAGE_CODE_COS":         52,
		"ISO_LANGUAGE_CODE_CR":          53,
		"ISO_LANGUAGE_CODE_CRE":         54,
		"ISO_LANGUAGE_CODE_CS":          55,
		"ISO_LANGUAGE_CODE_CES":         56,
		"ISO_LANGUAGE_CODE_CU":          57,
		"ISO_LANGUAGE_CODE_CHU":         58,
		"ISO_LANGUAGE_CODE_CV":          59,
		"ISO_LANGUAGE_CODE_CHV":         60,
		"ISO_LANGUAGE_CODE_CY":          61,
		"ISO_LANGUAGE_CODE_CYM":         62,
		"ISO_LANGUAGE_CODE_DA":          63,
		"ISO_LANGUAGE_CODE_DAN":         64,
		"ISO_LANGUAGE_CODE_DE":          65,
		"ISO_LANGUAGE_CODE_DEU":         66,
		"ISO_LANGUAGE_CODE_DV":          67,
		"ISO_LANGUAGE_CODE_DIV":         68,
		"ISO_LANGUAGE_CODE_DZ":          69,
		"ISO_LANGUAGE_CODE_DZO":         70,
		"ISO_LANGUAGE_CODE_EE":          71,
		"ISO_LANGUAGE_CODE_EWE":         72,
		"ISO_LANGUAGE_CODE_EL":          73,
		"ISO_LANGUAGE_CODE_ELL":         74,
		"ISO_LANGUAGE_CODE_EN":          75,
		"ISO_LANGUAGE_CODE_ENG":         76,
		"ISO_LANGUAGE_CODE_EO":          77,
		"ISO_LANGUAGE_CODE_EPO":         78,
		"ISO_LANGUAGE_CODE_ES":          79,
		"ISO_LANGUAGE_CODE_SPA":         80,
		"ISO_LANGUAGE_CODE_ET":          81,
		"ISO_LANGUAGE_CODE_EST":         82,
		"ISO_LANGUAGE_CODE_EU":          83,
		"ISO_LANGUAGE_CODE_EUS":         84,
		"ISO_LANGUAGE_CODE_FA":          85,
		"ISO_LANGUAGE_CODE_FAS":         86,
		"ISO_LANGUAGE_CODE_FF":          87,
		"ISO_LANGUAGE_CODE_FUL":         88,
		"ISO_LANGUAGE_CODE_FI":          89,
		"ISO_LANGUAGE_CODE_FIN":         90,
		"ISO_LANGUAGE_CODE_FJ":          91,
		"ISO_LANGUAGE_CODE_FIJ":         92,
		"ISO_LANGUAGE_CODE_FO":          93,
		"ISO_LANGUAGE_CODE_FAO":         94,
		"ISO_LANGUAGE_CODE_FR":          95,
		"ISO_LANGUAGE_CODE_FRA":         96,
		"ISO_LANGUAGE_CODE_FY":          97,
		"ISO_LANGUAGE_CODE_FRY":         98,
		"ISO_LANGUAGE_CODE_GA":          99,
		"ISO_LANGUAGE_CODE_GLE":         100,
		"ISO_LANGUAGE_CODE_GD":          101,
		"ISO_LANGUAGE_CODE_GLA":         102,
		"ISO_LANGUAGE_CODE_GL":          103,
		"ISO_LANGUAGE_CODE_GLG":         104,
		"ISO_LANGUAGE_CODE_GN":          105,
		"ISO_LANGUAGE_CODE_GRN":         106,
		"ISO_LANGUAGE_CODE_GU":          107,
		"ISO_LANGUAGE_CODE_GUJ":         108,
		"ISO_LANGUAGE_CODE_GV":          109,
		"ISO_LANGUAGE_CODE_GLV":         110,
		"ISO_LANGUAGE_CODE_HA":          111,
		"ISO_LANGUAGE_CODE_HAU":         112,
		"ISO_LANGUAGE_CODE_HE":          113,
		"ISO_LANGUAGE_CODE_HEB":         114,
		"ISO_LANGUAGE_CODE_HI":          115,
		"ISO_LANGUAGE_CODE_HIN":         116,
		"ISO_LANGUAGE_CODE_HO":          117,
		"ISO_LANGUAGE_CODE_HMO":         118,
		"ISO_LANGUAGE_CODE_HR":          119,
		"ISO_LANGUAGE_CODE_HRV":         120,
		"ISO_LANGUAGE_CODE_HT":          121,
		"ISO_LANGUAGE_CODE_HAT":         122,
		"ISO_LANGUAGE_CODE_HU":          123,
		"ISO_LANGUAGE_CODE_HUN":         124,
		"ISO_LANGUAGE_CODE_HY":          125,
		"ISO_LANGUAGE_CODE_HYE":         126,
		"ISO_LANGUAGE_CODE_HZ":          127,
		"ISO_LANGUAGE_CODE_HER":         128,
		"ISO_LANGUAGE_CODE_IA":          129,
		"ISO_LANGUAGE_CODE_INA":         130,
		"ISO_LANGUAGE_CODE_ID":          131,
		"ISO_LANGUAGE_CODE_IND":         132,
		"ISO_LANGUAGE_CODE_IE":          133,
		"ISO_LANGUAGE_CODE_ILE":         134,
		"ISO_LANGUAGE_CODE_IG":          135,
		"ISO_LANGUAGE_CODE_IBO":         136,
		"ISO_LANGUAGE_CODE_II":          137,
		"ISO_LANGUAGE_CODE_III":         138,
		"ISO_LANGUAGE_CODE_IK":          139,
		"ISO_LANGUAGE_CODE_IPK":         140,
		"ISO_LANGUAGE_CODE_IO":          141,
		"ISO_LANGUAGE_CODE_IDO":         142,
		"ISO_LANGUAGE_CODE_IS":          143,
		"ISO_LANGUAGE_CODE_ISL":         144,
		"ISO_LANGUAGE_CODE_IT":          145,
		"ISO_LANGUAGE_CODE_ITA":         146,
		"ISO_LANGUAGE_CODE_IU":          147,
		"ISO_LANGUAGE_CODE_IKU":         148,
		"ISO_LANGUAGE_CODE_JA":          149,
		"ISO_LANGUAGE_CODE_JPN":         150,
		"ISO_LANGUAGE_CODE_JV":          151,
		"ISO_LANGUAGE_CODE_JAV":         152,
		"ISO_LANGUAGE_CODE_KA":          153,
		"ISO_LANGUAGE_CODE_KAT":         154,
		"ISO_LANGUAGE_CODE_KG":          155,
		"ISO_LANGUAGE_CODE_KON":         156,
		"ISO_LANGUAGE_CODE_KI":          157,
		"ISO_LANGUAGE_CODE_KIK":         158,
		"ISO_LANGUAGE_CODE_KJ":          159,
		"ISO_LANGUAGE_CODE_KUA":         160,
		"ISO_LANGUAGE_CODE_KK":          161,
		"ISO_LANGUAGE_CODE_KAZ":         162,
		"ISO_LANGUAGE_CODE_KL":          163,
		"ISO_LANGUAGE_CODE_KAL":         164,
		"ISO_LANGUAGE_CODE_KM":          165,
		"ISO_LANGUAGE_CODE_KHM":         166,
		"ISO_LANGUAGE_CODE_KN":          167,
		"ISO_LANGUAGE_CODE_KAN":         168,
		"ISO_LANGUAGE_CODE_KO":          169,
		"ISO_LANGUAGE_CODE_KOR":         170,
		"ISO_LANGUAGE_CODE_KR":          171,
		"ISO_LANGUAGE_CODE_KAU":         172,
		"ISO_LANGUAGE_CODE_KS":          173,
		"ISO_LANGUAGE_CODE_KAS":         174,
		"ISO_LANGUAGE_CODE_KU":          175,
		"ISO_LANGUAGE_CODE_KUR":         176,
		"ISO_LANGUAGE_CODE_KV":          177,
		"ISO_LANGUAGE_CODE_KOM":         178,
		"ISO_LANGUAGE_CODE_KW":          179,
		"ISO_LANGUAGE_CODE_COR":         180,
		"ISO_LANGUAGE_CODE_KY":          181,
		"ISO_LANGUAGE_CODE_KIR":         182,
		"ISO_LANGUAGE_CODE_LA":          183,
		"ISO_LANGUAGE_CODE_LAT":         184,
		"ISO_LANGUAGE_CODE_LB":          185,
		"ISO_LANGUAGE_CODE_LTZ":         186,
		"ISO_LANGUAGE_CODE_LG":          187,
		"ISO_LANGUAGE_CODE_LUG":         188,
		"ISO_LANGUAGE_CODE_LI":          189,
		"ISO_LANGUAGE_CODE_LIM":         190,
		"ISO_LANGUAGE_CODE_LN":          191,
		"ISO_LANGUAGE_CODE_LIN":         192,
		"ISO_LANGUAGE_CODE_LO":          193,
		"ISO_LANGUAGE_CODE_LAO":         194,
		"ISO_LANGUAGE_CODE_LT":          195,
		"ISO_LANGUAGE_CODE_LIT":         196,
		"ISO_LANGUAGE_CODE_LU":          197,
		"ISO_LANGUAGE_CODE_LUB":         198,
		"ISO_LANGUAGE_CODE_LV":          199,
		"ISO_LANGUAGE_CODE_LAV":         200,
		"ISO_LANGUAGE_CODE_MG":          201,
		"ISO_LANGUAGE_CODE_MLG":         202,
		"ISO_LANGUAGE_CODE_MH":          203,
		"ISO_LANGUAGE_CODE_MAH":         204,
		"ISO_LANGUAGE_CODE_MI":          205,
		"ISO_LANGUAGE_CODE_MRI":         206,
		"ISO_LANGUAGE_CODE_MK":          207,
		"ISO_LANGUAGE_CODE_MKD":         208,
		"ISO_LANGUAGE_CODE_ML":          209,
		"ISO_LANGUAGE_CODE_MAL":         210,
		"ISO_LANGUAGE_CODE_MN":          211,
		"ISO_LANGUAGE_CODE_MON":         212,
		"ISO_LANGUAGE_CODE_MO":          213,
		"ISO_LANGUAGE_CODE_MR":          214,
		"ISO_LANGUAGE_CODE_MAR":         215,
		"ISO_LANGUAGE_CODE_MS":          216,
		"ISO_LANGUAGE_CODE_MSA":         217,
		"ISO_LANGUAGE_CODE_MT":          218,
		"ISO_LANGUAGE_CODE_MLT":         219,
		"ISO_LANGUAGE_CODE_MY":          220,
		"ISO_LANGUAGE_CODE_MYA":         221,
		"ISO_LANGUAGE_CODE_NA":          222,
		"ISO_LANGUAGE_CODE_NAU":         223,
		"ISO_LANGUAGE_CODE_NB":          224,
		"ISO_LANGUAGE_CODE_NOB":         225,
		"ISO_LANGUAGE_CODE_ND":          226,
		"ISO_LANGUAGE_CODE_NDE":         227,
		"ISO_LANGUAGE_CODE_NE":          228,
		"ISO_LANGUAGE_CODE_NEP":         229,
		"ISO_LANGUAGE_CODE_NG":          230,
		"ISO_LANGUAGE_CODE_NDO":         231,
		"ISO_LANGUAGE_CODE_NL":          232,
		"ISO_LANGUAGE_CODE_NLD":         233,
		"ISO_LANGUAGE_CODE_NN":          234,
		"ISO_LANGUAGE_CODE_NNO":         235,
		"ISO_LANGUAGE_CODE_NO":          236,
		"ISO_LANGUAGE_CODE_NOR":         237,
		"ISO_LANGUAGE_CODE_NR":          238,
		"ISO_LANGUAGE_CODE_NBL":         239,
		"ISO_LANGUAGE_CODE_NV":          240,
		"ISO_LANGUAGE_CODE_NAV":         241,
		"ISO_LANGUAGE_CODE_NY":          242,
		"ISO_LANGUAGE_CODE_NYA":         243,
		"ISO_LANGUAGE_CODE_OC":          244,
		"ISO_LANGUAGE_CODE_OCI":         245,
		"ISO_LANGUAGE_CODE_OJ":          246,
		"ISO_LANGUAGE_CODE_OJI":         247,
		"ISO_LANGUAGE_CODE_OM":          248,
		"ISO_LANGUAGE_CODE_ORM":         249,
		"ISO_LANGUAGE_CODE_OR":          250,
		"ISO_LANGUAGE_CODE_ORI":         251,
		"ISO_LANGUAGE_CODE_OS":          252,
		"ISO_LANGUAGE_CODE_OSS":         253,
		"ISO_LANGUAGE_CODE_PA":          254,
		"ISO_LANGUAGE_CODE_PAN":         255,
		"ISO_LANGUAGE_CODE_PI":          256,
		"ISO_LANGUAGE_CODE_PLI":         257,
		"ISO_LANGUAGE_CODE_PL":          258,
		"ISO_LANGUAGE_CODE_POL":         259,
		"ISO_LANGUAGE_CODE_PS":          260,
		"ISO_LANGUAGE_CODE_PUS":         261,
		"ISO_LANGUAGE_CODE_PT":          262,
		"ISO_LANGUAGE_CODE_POR":         263,
		"ISO_LANGUAGE_CODE_QU":          264,
		"ISO_LANGUAGE_CODE_QUE":         265,
		"ISO_LANGUAGE_CODE_RM":          266,
		"ISO_LANGUAGE_CODE_ROH":         267,
		"ISO_LANGUAGE_CODE_RN":          268,
		"ISO_LANGUAGE_CODE_RUN":         269,
		"ISO_LANGUAGE_CODE_RO":          270,
		"ISO_LANGUAGE_CODE_RON":         271,
		"ISO_LANGUAGE_CODE_RU":          272,
		"ISO_LANGUAGE_CODE_RUS":         273,
		"ISO_LANGUAGE_CODE_RW":          274,
		"ISO_LANGUAGE_CODE_KIN":         275,
		"ISO_LANGUAGE_CODE_SA":          276,
		"ISO_LANGUAGE_CODE_SAN":         277,
		"ISO_LANGUAGE_CODE_SC":          278,
		"ISO_LANGUAGE_CODE_SRD":         279,
		"ISO_LANGUAGE_CODE_SD":          280,
		"ISO_LANGUAGE_CODE_SND":         281,
		"ISO_LANGUAGE_CODE_SE":          282,
		"ISO_LANGUAGE_CODE_SME":         283,
		"ISO_LANGUAGE_CODE_SG":          284,
		"ISO_LANGUAGE_CODE_SAG":         285,
		"ISO_LANGUAGE_CODE_SI":          286,
		"ISO_LANGUAGE_CODE_SIN":         287,
		"ISO_LANGUAGE_CODE_SK":          288,
		"ISO_LANGUAGE_CODE_SLK":         289,
		"ISO_LANGUAGE_CODE_SL":          290,
		"ISO_LANGUAGE_CODE_SLV":         291,
		"ISO_LANGUAGE_CODE_SM":          292,
		"ISO_LANGUAGE_CODE_SMO":         293,
		"ISO_LANGUAGE_CODE_SN":          294,
		"ISO_LANGUAGE_CODE_SNA":         295,
		"ISO_LANGUAGE_CODE_SO":          296,
		"ISO_LANGUAGE_CODE_SOM":         297,
		"ISO_LANGUAGE_CODE_SQ":          298,
		"ISO_LANGUAGE_CODE_SQI":         299,
		"ISO_LANGUAGE_CODE_SR":          300,
		"ISO_LANGUAGE_CODE_SRP":         301,
		"ISO_LANGUAGE_CODE_SS":          302,
		"ISO_LANGUAGE_CODE_SSW":         303,
		"ISO_LANGUAGE_CODE_ST":          304,
		"ISO_LANGUAGE_CODE_SOT":         305,
		"ISO_LANGUAGE_CODE_SU":          306,
		"ISO_LANGUAGE_CODE_SUN":         307,
		"ISO_LANGUAGE_CODE_SV":          308,
		"ISO_LANGUAGE_CODE_SWE":         309,
		"ISO_LANGUAGE_CODE_SW":          310,
		"ISO_LANGUAGE_CODE_SWA":         311,
		"ISO_LANGUAGE_CODE_TA":          312,
		"ISO_LANGUAGE_CODE_TAM":         313,
		"ISO_LANGUAGE_CODE_TE":          314,
		"ISO_LANGUAGE_CODE_TEL":         315,
		"ISO_LANGUAGE_CODE_TG":          316,
		"ISO_LANGUAGE_CODE_TGK":         317,
		"ISO_LANGUAGE_CODE_TH":          318,
		"ISO_LANGUAGE_CODE_THA":         319,
		"ISO_LANGUAGE_CODE_TI":          320,
		"ISO_LANGUAGE_CODE_TIR":         321,
		"ISO_LANGUAGE_CODE_TK":          322,
		"ISO_LANGUAGE_CODE_TUK":         323,
		"ISO_LANGUAGE_CODE_TL":          324,
		"ISO_LANGUAGE_CODE_TGL":         325,
		"ISO_LANGUAGE_CODE_TN":          326,
		"ISO_LANGUAGE_CODE_TSN":         327,
		"ISO_LANGUAGE_CODE_TO":          328,
		"ISO_LANGUAGE_CODE_TON":         329,
		"ISO_LANGUAGE_CODE_TR":          330,
		"ISO_LANGUAGE_CODE_TUR":         331,
		"ISO_LANGUAGE_CODE_TS":          332,
		"ISO_LANGUAGE_CODE_TSO":         333,
		"ISO_LANGUAGE_CODE_TT":          334,
		"ISO_LANGUAGE_CODE_TAT":         335,
		"ISO_LANGUAGE_CODE_TW":          336,
		"ISO_LANGUAGE_CODE_TWI":         337,
		"ISO_LANGUAGE_CODE_TY":          338,
		"ISO_LANGUAGE_CODE_TAH":         339,
		"ISO_LANGUAGE_CODE_UG":          340,
		"ISO_LANGUAGE_CODE_UIG":         341,
		"ISO_LANGUAGE_CODE_UK":          342,
		"ISO_LANGUAGE_CODE_UKR":         343,
		"ISO_LANGUAGE_CODE_UR":          344,
		"ISO_LANGUAGE_CODE_URD":         345,
		"ISO_LANGUAGE_CODE_UZ":          346,
		"ISO_LANGUAGE_CODE_UZB":         347,
		"ISO_LANGUAGE_CODE_VE":          348,
		"ISO_LANGUAGE_CODE_VEN":         349,
		"ISO_LANGUAGE_CODE_VI":          350,
		"ISO_LANGUAGE_CODE_VIE":         351,
		"ISO_LANGUAGE_CODE_VO":          352,
		"ISO_LANGUAGE_CODE_VOL":         353,
		"ISO_LANGUAGE_CODE_WA":          354,
		"ISO_LANGUAGE_CODE_WLN":         355,
		"ISO_LANGUAGE_CODE_WO":          356,
		"ISO_LANGUAGE_CODE_WOL":         357,
		"ISO_LANGUAGE_CODE_XH":          358,
		"ISO_LANGUAGE_CODE_XHO":         359,
		"ISO_LANGUAGE_CODE_YI":          360,
		"ISO_LANGUAGE_CODE_YID":         361,
		"ISO_LANGUAGE_CODE_YO":          362,
		"ISO_LANGUAGE_CODE_YOR":         363,
		"ISO_LANGUAGE_CODE_ZA":          364,
		"ISO_LANGUAGE_CODE_ZHA":         365,
		"ISO_LANGUAGE_CODE_ZH":          366,
		"ISO_LANGUAGE_CODE_ZHO":         367,
		"ISO_LANGUAGE_CODE_ZU":          368,
		"ISO_LANGUAGE_CODE_ZUL":         369,
		"ISO_LANGUAGE_CODE_ACE":         370,
		"ISO_LANGUAGE_CODE_ACH":         371,
		"ISO_LANGUAGE_CODE_ADA":         372,
		"ISO_LANGUAGE_CODE_ADY":         373,
		"ISO_LANGUAGE_CODE_AFA":         374,
		"ISO_LANGUAGE_CODE_AFH":         375,
		"ISO_LANGUAGE_CODE_AIN":         376,
		"ISO_LANGUAGE_CODE_AKK":         377,
		"ISO_LANGUAGE_CODE_ALE":         378,
		"ISO_LANGUAGE_CODE_ALG":         379,
		"ISO_LANGUAGE_CODE_ALT":         380,
		"ISO_LANGUAGE_CODE_ANG":         381,
		"ISO_LANGUAGE_CODE_ANP":         382,
		"ISO_LANGUAGE_CODE_APA":         383,
		"ISO_LANGUAGE_CODE_ARC":         384,
		"ISO_LANGUAGE_CODE_ARN":         385,
		"ISO_LANGUAGE_CODE_ARP":         386,
		"ISO_LANGUAGE_CODE_ART":         387,
		"ISO_LANGUAGE_CODE_ARW":         388,
		"ISO_LANGUAGE_CODE_AST":         389,
		"ISO_LANGUAGE_CODE_ATH":         390,
		"ISO_LANGUAGE_CODE_AUS":         391,
		"ISO_LANGUAGE_CODE_AWA":         392,
		"ISO_LANGUAGE_CODE_BAD":         393,
		"ISO_LANGUAGE_CODE_BAI":         394,
		"ISO_LANGUAGE_CODE_BAL":         395,
		"ISO_LANGUAGE_CODE_BAN":         396,
		"ISO_LANGUAGE_CODE_BAS":         397,
		"ISO_LANGUAGE_CODE_BAT":         398,
		"ISO_LANGUAGE_CODE_BEJ":         399,
		"ISO_LANGUAGE_CODE_BEM":         400,
		"ISO_LANGUAGE_CODE_BER":         401,
		"ISO_LANGUAGE_CODE_BGC":         402,
		"ISO_LANGUAGE_CODE_BHO":         403,
		"ISO_LANGUAGE_CODE_BIK":         404,
		"ISO_LANGUAGE_CODE_BIN":         405,
		"ISO_LANGUAGE_CODE_BLA":         406,
		"ISO_LANGUAGE_CODE_BNT":         407,
		"ISO_LANGUAGE_CODE_BRA":         408,
		"ISO_LANGUAGE_CODE_BTK":         409,
		"ISO_LANGUAGE_CODE_BUA":         410,
		"ISO_LANGUAGE_CODE_BUG":         411,
		"ISO_LANGUAGE_CODE_BYN":         412,
		"ISO_LANGUAGE_CODE_CAD":         413,
		"ISO_LANGUAGE_CODE_CAI":         414,
		"ISO_LANGUAGE_CODE_CAR":         415,
		"ISO_LANGUAGE_CODE_CAU":         416,
		"ISO_LANGUAGE_CODE_CEB":         417,
		"ISO_LANGUAGE_CODE_CEL":         418,
		"ISO_LANGUAGE_CODE_CHB":         419,
		"ISO_LANGUAGE_CODE_CHG":         420,
		"ISO_LANGUAGE_CODE_CHK":         421,
		"ISO_LANGUAGE_CODE_CHM":         422,
		"ISO_LANGUAGE_CODE_CHN":         423,
		"ISO_LANGUAGE_CODE_CHO":         424,
		"ISO_LANGUAGE_CODE_CHP":         425,
		"ISO_LANGUAGE_CODE_CHR":         426,
		"ISO_LANGUAGE_CODE_CHY":         427,
		"ISO_LANGUAGE_CODE_CMC":         428,
		"ISO_LANGUAGE_CODE_CNR":         429,
		"ISO_LANGUAGE_CODE_COP":         430,
		"ISO_LANGUAGE_CODE_CPE":         431,
		"ISO_LANGUAGE_CODE_CPF":         432,
		"ISO_LANGUAGE_CODE_CPP":         433,
		"ISO_LANGUAGE_CODE_CRH":         434,
		"ISO_LANGUAGE_CODE_CRP":         435,
		"ISO_LANGUAGE_CODE_CSB":         436,
		"ISO_LANGUAGE_CODE_CUS":         437,
		"ISO_LANGUAGE_CODE_DAK":         438,
		"ISO_LANGUAGE_CODE_DAR":         439,
		"ISO_LANGUAGE_CODE_DAY":         440,
		"ISO_LANGUAGE_CODE_DEL":         441,
		"ISO_LANGUAGE_CODE_DEN":         442,
		"ISO_LANGUAGE_CODE_DGR":         443,
		"ISO_LANGUAGE_CODE_DIN":         444,
		"ISO_LANGUAGE_CODE_DOI":         445,
		"ISO_LANGUAGE_CODE_DRA":         446,
		"ISO_LANGUAGE_CODE_DSB":         447,
		"ISO_LANGUAGE_CODE_DUA":         448,
		"ISO_LANGUAGE_CODE_DUM":         449,
		"ISO_LANGUAGE_CODE_DYU":         450,
		"ISO_LANGUAGE_CODE_EFI":         451,
		"ISO_LANGUAGE_CODE_EGY":         452,
		"ISO_LANGUAGE_CODE_EKA":         453,
		"ISO_LANGUAGE_CODE_ELX":         454,
		"ISO_LANGUAGE_CODE_ENM":         455,
		"ISO_LANGUAGE_CODE_EWO":         456,
		"ISO_LANGUAGE_CODE_FAN":         457,
		"ISO_LANGUAGE_CODE_FAT":         458,
		"ISO_LANGUAGE_CODE_FIL":         459,
		"ISO_LANGUAGE_CODE_FIU":         460,
		"ISO_LANGUAGE_CODE_FON":         461,
		"ISO_LANGUAGE_CODE_FRM":         462,
		"ISO_LANGUAGE_CODE_FRO":         463,
		"ISO_LANGUAGE_CODE_FRR":         464,
		"ISO_LANGUAGE_CODE_FRS":         465,
		"ISO_LANGUAGE_CODE_FUR":         466,
		"ISO_LANGUAGE_CODE_GAA":         467,
		"ISO_LANGUAGE_CODE_GAY":         468,
		"ISO_LANGUAGE_CODE_GBA":         469,
		"ISO_LANGUAGE_CODE_GEM":         470,
		"ISO_LANGUAGE_CODE_GEZ":         471,
		"ISO_LANGUAGE_CODE_GIL":         472,
		"ISO_LANGUAGE_CODE_GMH":         473,
		"ISO_LANGUAGE_CODE_GOH":         474,
		"ISO_LANGUAGE_CODE_GON":         475,
		"ISO_LANGUAGE_CODE_GOR":         476,
		"ISO_LANGUAGE_CODE_GOT":         477,
		"ISO_LANGUAGE_CODE_GRB":         478,
		"ISO_LANGUAGE_CODE_GRC":         479,
		"ISO_LANGUAGE_CODE_GSW":         480,
		"ISO_LANGUAGE_CODE_GWI":         481,
		"ISO_LANGUAGE_CODE_HAI":         482,
		"ISO_LANGUAGE_CODE_HAW":         483,
		"ISO_LANGUAGE_CODE_HIL":         484,
		"ISO_LANGUAGE_CODE_HIM":         485,
		"ISO_LANGUAGE_CODE_HIT":         486,
		"ISO_LANGUAGE_CODE_HMN":         487,
		"ISO_LANGUAGE_CODE_HSB":         488,
		"ISO_LANGUAGE_CODE_HUP":         489,
		"ISO_LANGUAGE_CODE_IBA":         490,
		"ISO_LANGUAGE_CODE_IJO":         491,
		"ISO_LANGUAGE_CODE_ILO":         492,
		"ISO_LANGUAGE_CODE_INC":         493,
		"ISO_LANGUAGE_CODE_INE":         494,
		"ISO_LANGUAGE_CODE_INH":         495,
		"ISO_LANGUAGE_CODE_IRA":         496,
		"ISO_LANGUAGE_CODE_IRO":         497,
		"ISO_LANGUAGE_CODE_JBO":         498,
		"ISO_LANGUAGE_CODE_JPR":         499,
		"ISO_LANGUAGE_CODE_JRB":         500,
		"ISO_LANGUAGE_CODE_KAA":         501,
		"ISO_LANGUAGE_CODE_KAB":         502,
		"ISO_LANGUAGE_CODE_KAC":         503,
		"ISO_LANGUAGE_CODE_KAM":         504,
		"ISO_LANGUAGE_CODE_KAR":         505,
		"ISO_LANGUAGE_CODE_KAW":         506,
		"ISO_LANGUAGE_CODE_KBD":         507,
		"ISO_LANGUAGE_CODE_KHA":         508,
		"ISO_LANGUAGE_CODE_KHI":         509,
		"ISO_LANGUAGE_CODE_KHO":         510,
		"ISO_LANGUAGE_CODE_KMB":         511,
		"ISO_LANGUAGE_CODE_KOK":         512,
		"ISO_LANGUAGE_CODE_KOS":         513,
		"ISO_LANGUAGE_CODE_KPE":         514,
		"ISO_LANGUAGE_CODE_KRC":         515,
		"ISO_LANGUAGE_CODE_KRL":         516,
		"ISO_LANGUAGE_CODE_KRO":         517,
		"ISO_LANGUAGE_CODE_KRU":         518,
		"ISO_LANGUAGE_CODE_KUM":         519,
		"ISO_LANGUAGE_CODE_KUT":         520,
		"ISO_LANGUAGE_CODE_LAD":         521,
		"ISO_LANGUAGE_CODE_LAH":         522,
		"ISO_LANGUAGE_CODE_LAM":         523,
		"ISO_LANGUAGE_CODE_LEZ":         524,
		"ISO_LANGUAGE_CODE_LOL":         525,
		"ISO_LANGUAGE_CODE_LOZ":         526,
		"ISO_LANGUAGE_CODE_LUA":         527,
		"ISO_LANGUAGE_CODE_LUI":         528,
		"ISO_LANGUAGE_CODE_LUN":         529,
		"ISO_LANGUAGE_CODE_LUO":         530,
		"ISO_LANGUAGE_CODE_LUS":         531,
		"ISO_LANGUAGE_CODE_MAD":         532,
		"ISO_LANGUAGE_CODE_MAG":         533,
		"ISO_LANGUAGE_CODE_MAI":         534,
		"ISO_LANGUAGE_CODE_MAK":         535,
		"ISO_LANGUAGE_CODE_MAN":         536,
		"ISO_LANGUAGE_CODE_MAP":         537,
		"ISO_LANGUAGE_CODE_MAS":         538,
		"ISO_LANGUAGE_CODE_MDF":         539,
		"ISO_LANGUAGE_CODE_MDR":         540,
		"ISO_LANGUAGE_CODE_MEN":         541,
		"ISO_LANGUAGE_CODE_MGA":         542,
		"ISO_LANGUAGE_CODE_MIC":         543,
		"ISO_LANGUAGE_CODE_MIN":         544,
		"ISO_LANGUAGE_CODE_MIS":         545,
		"ISO_LANGUAGE_CODE_MKH":         546,
		"ISO_LANGUAGE_CODE_MNC":         547,
		"ISO_LANGUAGE_CODE_MNI":         548,
		"ISO_LANGUAGE_CODE_MNO":         549,
		"ISO_LANGUAGE_CODE_MOH":         550,
		"ISO_LANGUAGE_CODE_MOS":         551,
		"ISO_LANGUAGE_CODE_MUL":         552,
		"ISO_LANGUAGE_CODE_MUN":         553,
		"ISO_LANGUAGE_CODE_MUS":         554,
		"ISO_LANGUAGE_CODE_MWL":         555,
		"ISO_LANGUAGE_CODE_MWR":         556,
		"ISO_LANGUAGE_CODE_MYN":         557,
		"ISO_LANGUAGE_CODE_MYV":         558,
		"ISO_LANGUAGE_CODE_NAH":         559,
		"ISO_LANGUAGE_CODE_NAI":         560,
		"ISO_LANGUAGE_CODE_NAP":         561,
		"ISO_LANGUAGE_CODE_NDS":         562,
		"ISO_LANGUAGE_CODE_NEW":         563,
		"ISO_LANGUAGE_CODE_NIA":         564,
		"ISO_LANGUAGE_CODE_NIC":         565,
		"ISO_LANGUAGE_CODE_NIU":         566,
		"ISO_LANGUAGE_CODE_NOG":         567,
		"ISO_LANGUAGE_CODE_NON":         568,
		"ISO_LANGUAGE_CODE_NQO":         569,
		"ISO_LANGUAGE_CODE_NSO":         570,
		"ISO_LANGUAGE_CODE_NUB":         571,
		"ISO_LANGUAGE_CODE_NWC":         572,
		"ISO_LANGUAGE_CODE_NYM":         573,
		"ISO_LANGUAGE_CODE_NYN":         574,
		"ISO_LANGUAGE_CODE_NYO":         575,
		"ISO_LANGUAGE_CODE_NZI":         576,
		"ISO_LANGUAGE_CODE_OSA":         577,
		"ISO_LANGUAGE_CODE_OTA":         578,
		"ISO_LANGUAGE_CODE_OTO":         579,
		"ISO_LANGUAGE_CODE_PAA":         580,
		"ISO_LANGUAGE_CODE_PAG":         581,
		"ISO_LANGUAGE_CODE_PAL":         582,
		"ISO_LANGUAGE_CODE_PAM":         583,
		"ISO_LANGUAGE_CODE_PAP":         584,
		"ISO_LANGUAGE_CODE_PAU":         585,
		"ISO_LANGUAGE_CODE_PEO":         586,
		"ISO_LANGUAGE_CODE_PHI":         587,
		"ISO_LANGUAGE_CODE_PHN":         588,
		"ISO_LANGUAGE_CODE_PON":         589,
		"ISO_LANGUAGE_CODE_PRA":         590,
		"ISO_LANGUAGE_CODE_PRO":         591,
		"ISO_LANGUAGE_CODE_QQA":         592,
		"ISO_LANGUAGE_CODE_QQB":         593,
		"ISO_LANGUAGE_CODE_QQC":         594,
		"ISO_LANGUAGE_CODE_QQD":         595,
		"ISO_LANGUAGE_CODE_QQE":         596,
		"ISO_LANGUAGE_CODE_QQF":         597,
		"ISO_LANGUAGE_CODE_QQG":         598,
		"ISO_LANGUAGE_CODE_QQH":         599,
		"ISO_LANGUAGE_CODE_QQI":         600,
		"ISO_LANGUAGE_CODE_QQJ":         601,
		"ISO_LANGUAGE_CODE_RAJ":         602,
		"ISO_LANGUAGE_CODE_RAP":         603,
		"ISO_LANGUAGE_CODE_RAR":         604,
		"ISO_LANGUAGE_CODE_ROA":         605,
		"ISO_LANGUAGE_CODE_ROM":         606,
		"ISO_LANGUAGE_CODE_RUP":         607,
		"ISO_LANGUAGE_CODE_SAD":         608,
		"ISO_LANGUAGE_CODE_SAH":         609,
		"ISO_LANGUAGE_CODE_SAI":         610,
		"ISO_LANGUAGE_CODE_SAL":         611,
		"ISO_LANGUAGE_CODE_SAM":         612,
		"ISO_LANGUAGE_CODE_SAS":         613,
		"ISO_LANGUAGE_CODE_SAT":         614,
		"ISO_LANGUAGE_CODE_SCN":         615,
		"ISO_LANGUAGE_CODE_SCO":         616,
		"ISO_LANGUAGE_CODE_SEL":         617,
		"ISO_LANGUAGE_CODE_SEM":         618,
		"ISO_LANGUAGE_CODE_SGA":         619,
		"ISO_LANGUAGE_CODE_SGN":         620,
		"ISO_LANGUAGE_CODE_SHN":         621,
		"ISO_LANGUAGE_CODE_SID":         622,
		"ISO_LANGUAGE_CODE_SIO":         623,
		"ISO_LANGUAGE_CODE_SIT":         624,
		"ISO_LANGUAGE_CODE_SLA":         625,
		"ISO_LANGUAGE_CODE_SMA":         626,
		"ISO_LANGUAGE_CODE_SMI":         627,
		"ISO_LANGUAGE_CODE_SMJ":         628,
		"ISO_LANGUAGE_CODE_SMN":         629,
		"ISO_LANGUAGE_CODE_SMS":         630,
		"ISO_LANGUAGE_CODE_SNK":         631,
		"ISO_LANGUAGE_CODE_SOG":         632,
		"ISO_LANGUAGE_CODE_SON":         633,
		"ISO_LANGUAGE_CODE_SRN":         634,
		"ISO_LANGUAGE_CODE_SRR":         635,
		"ISO_LANGUAGE_CODE_SSA":         636,
		"ISO_LANGUAGE_CODE_SUK":         637,
		"ISO_LANGUAGE_CODE_SUS":         638,
		"ISO_LANGUAGE_CODE_SUX":         639,
		"ISO_LANGUAGE_CODE_SYC":         640,
		"ISO_LANGUAGE_CODE_SYR":         641,
		"ISO_LANGUAGE_CODE_TAI":         642,
		"ISO_LANGUAGE_CODE_TEM":         643,
		"ISO_LANGUAGE_CODE_TER":         644,
		"ISO_LANGUAGE_CODE_TET":         645,
		"ISO_LANGUAGE_CODE_TIG":         646,
		"ISO_LANGUAGE_CODE_TIV":         647,
		"ISO_LANGUAGE_CODE_TKL":         648,
		"ISO_LANGUAGE_CODE_TLH":         649,
		"ISO_LANGUAGE_CODE_TLI":         650,
		"ISO_LANGUAGE_CODE_TMH":         651,
		"ISO_LANGUAGE_CODE_TOG":         652,
		"ISO_LANGUAGE_CODE_TPI":         653,
		"ISO_LANGUAGE_CODE_TSI":         654,
		"ISO_LANGUAGE_CODE_TUM":         655,
		"ISO_LANGUAGE_CODE_TUP":         656,
		"ISO_LANGUAGE_CODE_TUT":         657,
		"ISO_LANGUAGE_CODE_TVL":         658,
		"ISO_LANGUAGE_CODE_TYV":         659,
		"ISO_LANGUAGE_CODE_UDM":         660,
		"ISO_LANGUAGE_CODE_UGA":         661,
		"ISO_LANGUAGE_CODE_UMB":         662,
		"ISO_LANGUAGE_CODE_UND":         663,
		"ISO_LANGUAGE_CODE_VAI":         664,
		"ISO_LANGUAGE_CODE_VOT":         665,
		"ISO_LANGUAGE_CODE_WAK":         666,
		"ISO_LANGUAGE_CODE_WAL":         667,
		"ISO_LANGUAGE_CODE_WAR":         668,
		"ISO_LANGUAGE_CODE_WAS":         669,
		"ISO_LANGUAGE_CODE_WEN":         670,
		"ISO_LANGUAGE_CODE_XAL":         671,
		"ISO_LANGUAGE_CODE_YAO":         672,
		"ISO_LANGUAGE_CODE_YAP":         673,
		"ISO_LANGUAGE_CODE_YPK":         674,
		"ISO_LANGUAGE_CODE_ZAP":         675,
		"ISO_LANGUAGE_CODE_ZBL":         676,
		"ISO_LANGUAGE_CODE_ZEN":         677,
		"ISO_LANGUAGE_CODE_ZGH":         678,
		"ISO_LANGUAGE_CODE_ZND":         679,
		"ISO_LANGUAGE_CODE_ZUN":         680,
		"ISO_LANGUAGE_CODE_ZXX":         681,
		"ISO_LANGUAGE_CODE_ZZA":         682,
		"ISO_LANGUAGE_CODE_AAA":         683,
		"ISO_LANGUAGE_CODE_CMN":         684,
		"ISO_LANGUAGE_CODE_GBM":         685,
		"ISO_LANGUAGE_CODE_GCF":         686,
		"ISO_LANGUAGE_CODE_HNE":         687,
		"ISO_LANGUAGE_CODE_JAM":         688,
		"ISO_LANGUAGE_CODE_KFY":         689,
		"ISO_LANGUAGE_CODE_KHW":         690,
		"ISO_LANGUAGE_CODE_MCM":         691,
		"ISO_LANGUAGE_CODE_MUP":         692,
		"ISO_LANGUAGE_CODE_SCK":         693,
		"ISO_LANGUAGE_CODE_SCL":         694,
		"ISO_LANGUAGE_CODE_SPV":         695,
		"ISO_LANGUAGE_CODE_TCY":         696,
		"ISO_LANGUAGE_CODE_YUE":         697,
	}
)

func (x IsoLanguageCode) Enum() *IsoLanguageCode {
	p := new(IsoLanguageCode)
	*p = x
	return p
}

func (x IsoLanguageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoLanguageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[106].Descriptor()
}

func (IsoLanguageCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[106]
}

func (x IsoLanguageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoLanguageCode.Descriptor instead.
func (IsoLanguageCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{106}
}

type IsoTerritoryCode int32

const (
	IsoTerritoryCode_ISO_TERRITORY_CODE_UNSPECIFIED IsoTerritoryCode = 0
	IsoTerritoryCode_ISO_TERRITORY_CODE_AD          IsoTerritoryCode = 1
	IsoTerritoryCode_ISO_TERRITORY_CODE_AE          IsoTerritoryCode = 2
	IsoTerritoryCode_ISO_TERRITORY_CODE_AF          IsoTerritoryCode = 3
	IsoTerritoryCode_ISO_TERRITORY_CODE_AG          IsoTerritoryCode = 4
	IsoTerritoryCode_ISO_TERRITORY_CODE_AI          IsoTerritoryCode = 5
	IsoTerritoryCode_ISO_TERRITORY_CODE_AL          IsoTerritoryCode = 6
	IsoTerritoryCode_ISO_TERRITORY_CODE_AM          IsoTerritoryCode = 7
	IsoTerritoryCode_ISO_TERRITORY_CODE_AN          IsoTerritoryCode = 8
	IsoTerritoryCode_ISO_TERRITORY_CODE_AO          IsoTerritoryCode = 9
	IsoTerritoryCode_ISO_TERRITORY_CODE_AQ          IsoTerritoryCode = 10
	IsoTerritoryCode_ISO_TERRITORY_CODE_AR          IsoTerritoryCode = 11
	IsoTerritoryCode_ISO_TERRITORY_CODE_AS          IsoTerritoryCode = 12
	IsoTerritoryCode_ISO_TERRITORY_CODE_AT          IsoTerritoryCode = 13
	IsoTerritoryCode_ISO_TERRITORY_CODE_AU          IsoTerritoryCode = 14
	IsoTerritoryCode_ISO_TERRITORY_CODE_AW          IsoTerritoryCode = 15
	IsoTerritoryCode_ISO_TERRITORY_CODE_AX          IsoTerritoryCode = 16
	IsoTerritoryCode_ISO_TERRITORY_CODE_AZ          IsoTerritoryCode = 17
	IsoTerritoryCode_ISO_TERRITORY_CODE_BA          IsoTerritoryCode = 18
	IsoTerritoryCode_ISO_TERRITORY_CODE_BB          IsoTerritoryCode = 19
	IsoTerritoryCode_ISO_TERRITORY_CODE_BD          IsoTerritoryCode = 20
	IsoTerritoryCode_ISO_TERRITORY_CODE_BE          IsoTerritoryCode = 21
	IsoTerritoryCode_ISO_TERRITORY_CODE_BF          IsoTerritoryCode = 22
	IsoTerritoryCode_ISO_TERRITORY_CODE_BG          IsoTerritoryCode = 23
	IsoTerritoryCode_ISO_TERRITORY_CODE_BH          IsoTerritoryCode = 24
	IsoTerritoryCode_ISO_TERRITORY_CODE_BI          IsoTerritoryCode = 25
	IsoTerritoryCode_ISO_TERRITORY_CODE_BJ          IsoTerritoryCode = 26
	IsoTerritoryCode_ISO_TERRITORY_CODE_BL          IsoTerritoryCode = 27
	IsoTerritoryCode_ISO_TERRITORY_CODE_BM          IsoTerritoryCode = 28
	IsoTerritoryCode_ISO_TERRITORY_CODE_BN          IsoTerritoryCode = 29
	IsoTerritoryCode_ISO_TERRITORY_CODE_BO          IsoTerritoryCode = 30
	IsoTerritoryCode_ISO_TERRITORY_CODE_BQ          IsoTerritoryCode = 31
	IsoTerritoryCode_ISO_TERRITORY_CODE_BR          IsoTerritoryCode = 32
	IsoTerritoryCode_ISO_TERRITORY_CODE_BS          IsoTerritoryCode = 33
	IsoTerritoryCode_ISO_TERRITORY_CODE_BT          IsoTerritoryCode = 34
	IsoTerritoryCode_ISO_TERRITORY_CODE_BV          IsoTerritoryCode = 35
	IsoTerritoryCode_ISO_TERRITORY_CODE_BW          IsoTerritoryCode = 36
	IsoTerritoryCode_ISO_TERRITORY_CODE_BY          IsoTerritoryCode = 37
	IsoTerritoryCode_ISO_TERRITORY_CODE_BZ          IsoTerritoryCode = 38
	IsoTerritoryCode_ISO_TERRITORY_CODE_CA          IsoTerritoryCode = 39
	IsoTerritoryCode_ISO_TERRITORY_CODE_CC          IsoTerritoryCode = 40
	IsoTerritoryCode_ISO_TERRITORY_CODE_CD          IsoTerritoryCode = 41
	IsoTerritoryCode_ISO_TERRITORY_CODE_CF          IsoTerritoryCode = 42
	IsoTerritoryCode_ISO_TERRITORY_CODE_CG          IsoTerritoryCode = 43
	IsoTerritoryCode_ISO_TERRITORY_CODE_CH          IsoTerritoryCode = 44
	IsoTerritoryCode_ISO_TERRITORY_CODE_CI          IsoTerritoryCode = 45
	IsoTerritoryCode_ISO_TERRITORY_CODE_CK          IsoTerritoryCode = 46
	IsoTerritoryCode_ISO_TERRITORY_CODE_CL          IsoTerritoryCode = 47
	IsoTerritoryCode_ISO_TERRITORY_CODE_CM          IsoTerritoryCode = 48
	IsoTerritoryCode_ISO_TERRITORY_CODE_CN          IsoTerritoryCode = 49
	IsoTerritoryCode_ISO_TERRITORY_CODE_CO          IsoTerritoryCode = 50
	IsoTerritoryCode_ISO_TERRITORY_CODE_CR          IsoTerritoryCode = 51
	IsoTerritoryCode_ISO_TERRITORY_CODE_CS          IsoTerritoryCode = 52
	IsoTerritoryCode_ISO_TERRITORY_CODE_CU          IsoTerritoryCode = 53
	IsoTerritoryCode_ISO_TERRITORY_CODE_CV          IsoTerritoryCode = 54
	IsoTerritoryCode_ISO_TERRITORY_CODE_CW          IsoTerritoryCode = 55
	IsoTerritoryCode_ISO_TERRITORY_CODE_CX          IsoTerritoryCode = 56
	IsoTerritoryCode_ISO_TERRITORY_CODE_CY          IsoTerritoryCode = 57
	IsoTerritoryCode_ISO_TERRITORY_CODE_CZ          IsoTerritoryCode = 58
	IsoTerritoryCode_ISO_TERRITORY_CODE_DE          IsoTerritoryCode = 59
	IsoTerritoryCode_ISO_TERRITORY_CODE_DJ          IsoTerritoryCode = 60
	IsoTerritoryCode_ISO_TERRITORY_CODE_DK          IsoTerritoryCode = 61
	IsoTerritoryCode_ISO_TERRITORY_CODE_DM          IsoTerritoryCode = 62
	IsoTerritoryCode_ISO_TERRITORY_CODE_DO          IsoTerritoryCode = 63
	IsoTerritoryCode_ISO_TERRITORY_CODE_DZ          IsoTerritoryCode = 64
	IsoTerritoryCode_ISO_TERRITORY_CODE_EC          IsoTerritoryCode = 65
	IsoTerritoryCode_ISO_TERRITORY_CODE_EE          IsoTerritoryCode = 66
	IsoTerritoryCode_ISO_TERRITORY_CODE_EG          IsoTerritoryCode = 67
	IsoTerritoryCode_ISO_TERRITORY_CODE_EH          IsoTerritoryCode = 68
	IsoTerritoryCode_ISO_TERRITORY_CODE_ER          IsoTerritoryCode = 69
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES          IsoTerritoryCode = 70
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES_CE       IsoTerritoryCode = 71
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES_CN       IsoTerritoryCode = 72
	IsoTerritoryCode_ISO_TERRITORY_CODE_ES_ML       IsoTerritoryCode = 73
	IsoTerritoryCode_ISO_TERRITORY_CODE_ET          IsoTerritoryCode = 74
	IsoTerritoryCode_ISO_TERRITORY_CODE_FI          IsoTerritoryCode = 75
	IsoTerritoryCode_ISO_TERRITORY_CODE_FJ          IsoTerritoryCode = 76
	IsoTerritoryCode_ISO_TERRITORY_CODE_FK          IsoTerritoryCode = 77
	IsoTerritoryCode_ISO_TERRITORY_CODE_FM          IsoTerritoryCode = 78
	IsoTerritoryCode_ISO_TERRITORY_CODE_FO          IsoTerritoryCode = 79
	IsoTerritoryCode_ISO_TERRITORY_CODE_FR          IsoTerritoryCode = 80
	IsoTerritoryCode_ISO_TERRITORY_CODE_GA          IsoTerritoryCode = 81
	IsoTerritoryCode_ISO_TERRITORY_CODE_GB          IsoTerritoryCode = 82
	IsoTerritoryCode_ISO_TERRITORY_CODE_GD          IsoTerritoryCode = 83
	IsoTerritoryCode_ISO_TERRITORY_CODE_GE          IsoTerritoryCode = 84
	IsoTerritoryCode_ISO_TERRITORY_CODE_GF          IsoTerritoryCode = 85
	IsoTerritoryCode_ISO_TERRITORY_CODE_GG          IsoTerritoryCode = 86
	IsoTerritoryCode_ISO_TERRITORY_CODE_GH          IsoTerritoryCode = 87
	IsoTerritoryCode_ISO_TERRITORY_CODE_GI          IsoTerritoryCode = 88
	IsoTerritoryCode_ISO_TERRITORY_CODE_GL          IsoTerritoryCode = 89
	IsoTerritoryCode_ISO_TERRITORY_CODE_GM          IsoTerritoryCode = 90
	IsoTerritoryCode_ISO_TERRITORY_CODE_GN          IsoTerritoryCode = 91
	IsoTerritoryCode_ISO_TERRITORY_CODE_GP          IsoTerritoryCode = 92
	IsoTerritoryCode_ISO_TERRITORY_CODE_GQ          IsoTerritoryCode = 93
	IsoTerritoryCode_ISO_TERRITORY_CODE_GR          IsoTerritoryCode = 94
	IsoTerritoryCode_ISO_TERRITORY_CODE_GS          IsoTerritoryCode = 95
	IsoTerritoryCode_ISO_TERRITORY_CODE_GT          IsoTerritoryCode = 96
	IsoTerritoryCode_ISO_TERRITORY_CODE_GU          IsoTerritoryCode = 97
	IsoTerritoryCode_ISO_TERRITORY_CODE_GW          IsoTerritoryCode = 98
	IsoTerritoryCode_ISO_TERRITORY_CODE_GY          IsoTerritoryCode = 99
	IsoTerritoryCode_ISO_TERRITORY_CODE_HK          IsoTerritoryCode = 100
	IsoTerritoryCode_ISO_TERRITORY_CODE_HM          IsoTerritoryCode = 101
	IsoTerritoryCode_ISO_TERRITORY_CODE_HN          IsoTerritoryCode = 102
	IsoTerritoryCode_ISO_TERRITORY_CODE_HR          IsoTerritoryCode = 103
	IsoTerritoryCode_ISO_TERRITORY_CODE_HT          IsoTerritoryCode = 104
	IsoTerritoryCode_ISO_TERRITORY_CODE_HU          IsoTerritoryCode = 105
	IsoTerritoryCode_ISO_TERRITORY_CODE_ID          IsoTerritoryCode = 106
	IsoTerritoryCode_ISO_TERRITORY_CODE_IE          IsoTerritoryCode = 107
	IsoTerritoryCode_ISO_TERRITORY_CODE_IL          IsoTerritoryCode = 108
	IsoTerritoryCode_ISO_TERRITORY_CODE_IM          IsoTerritoryCode = 109
	IsoTerritoryCode_ISO_TERRITORY_CODE_IN          IsoTerritoryCode = 110
	IsoTerritoryCode_ISO_TERRITORY_CODE_IO          IsoTerritoryCode = 111
	IsoTerritoryCode_ISO_TERRITORY_CODE_IQ          IsoTerritoryCode = 112
	IsoTerritoryCode_ISO_TERRITORY_CODE_IR          IsoTerritoryCode = 113
	IsoTerritoryCode_ISO_TERRITORY_CODE_IS          IsoTerritoryCode = 114
	IsoTerritoryCode_ISO_TERRITORY_CODE_IT          IsoTerritoryCode = 115
	IsoTerritoryCode_ISO_TERRITORY_CODE_JE          IsoTerritoryCode = 116
	IsoTerritoryCode_ISO_TERRITORY_CODE_JM          IsoTerritoryCode = 117
	IsoTerritoryCode_ISO_TERRITORY_CODE_JO          IsoTerritoryCode = 118
	IsoTerritoryCode_ISO_TERRITORY_CODE_JP          IsoTerritoryCode = 119
	IsoTerritoryCode_ISO_TERRITORY_CODE_KE          IsoTerritoryCode = 120
	IsoTerritoryCode_ISO_TERRITORY_CODE_KG          IsoTerritoryCode = 121
	IsoTerritoryCode_ISO_TERRITORY_CODE_KH          IsoTerritoryCode = 122
	IsoTerritoryCode_ISO_TERRITORY_CODE_KI          IsoTerritoryCode = 123
	IsoTerritoryCode_ISO_TERRITORY_CODE_KM          IsoTerritoryCode = 124
	IsoTerritoryCode_ISO_TERRITORY_CODE_KN          IsoTerritoryCode = 125
	IsoTerritoryCode_ISO_TERRITORY_CODE_KP          IsoTerritoryCode = 126
	IsoTerritoryCode_ISO_TERRITORY_CODE_KR          IsoTerritoryCode = 127
	IsoTerritoryCode_ISO_TERRITORY_CODE_KW          IsoTerritoryCode = 128
	IsoTerritoryCode_ISO_TERRITORY_CODE_KY          IsoTerritoryCode = 129
	IsoTerritoryCode_ISO_TERRITORY_CODE_KZ          IsoTerritoryCode = 130
	IsoTerritoryCode_ISO_TERRITORY_CODE_LA          IsoTerritoryCode = 131
	IsoTerritoryCode_ISO_TERRITORY_CODE_LB          IsoTerritoryCode = 132
	IsoTerritoryCode_ISO_TERRITORY_CODE_LC          IsoTerritoryCode = 133
	IsoTerritoryCode_ISO_TERRITORY_CODE_LI          IsoTerritoryCode = 134
	IsoTerritoryCode_ISO_TERRITORY_CODE_LK          IsoTerritoryCode = 135
	IsoTerritoryCode_ISO_TERRITORY_CODE_LR          IsoTerritoryCode = 136
	IsoTerritoryCode_ISO_TERRITORY_CODE_LS          IsoTerritoryCode = 137
	IsoTerritoryCode_ISO_TERRITORY_CODE_LT          IsoTerritoryCode = 138
	IsoTerritoryCode_ISO_TERRITORY_CODE_LU          IsoTerritoryCode = 139
	IsoTerritoryCode_ISO_TERRITORY_CODE_LV          IsoTerritoryCode = 140
	IsoTerritoryCode_ISO_TERRITORY_CODE_LY          IsoTerritoryCode = 141
	IsoTerritoryCode_ISO_TERRITORY_CODE_MA          IsoTerritoryCode = 142
	IsoTerritoryCode_ISO_TERRITORY_CODE_MC          IsoTerritoryCode = 143
	IsoTerritoryCode_ISO_TERRITORY_CODE_MD          IsoTerritoryCode = 144
	IsoTerritoryCode_ISO_TERRITORY_CODE_ME          IsoTerritoryCode = 145
	IsoTerritoryCode_ISO_TERRITORY_CODE_MF          IsoTerritoryCode = 146
	IsoTerritoryCode_ISO_TERRITORY_CODE_MG          IsoTerritoryCode = 147
	IsoTerritoryCode_ISO_TERRITORY_CODE_MH          IsoTerritoryCode = 148
	IsoTerritoryCode_ISO_TERRITORY_CODE_MK          IsoTerritoryCode = 149
	IsoTerritoryCode_ISO_TERRITORY_CODE_ML          IsoTerritoryCode = 150
	IsoTerritoryCode_ISO_TERRITORY_CODE_MM          IsoTerritoryCode = 151
	IsoTerritoryCode_ISO_TERRITORY_CODE_MN          IsoTerritoryCode = 152
	IsoTerritoryCode_ISO_TERRITORY_CODE_MO          IsoTerritoryCode = 153
	IsoTerritoryCode_ISO_TERRITORY_CODE_MP          IsoTerritoryCode = 154
	IsoTerritoryCode_ISO_TERRITORY_CODE_MQ          IsoTerritoryCode = 155
	IsoTerritoryCode_ISO_TERRITORY_CODE_MR          IsoTerritoryCode = 156
	IsoTerritoryCode_ISO_TERRITORY_CODE_MS          IsoTerritoryCode = 157
	IsoTerritoryCode_ISO_TERRITORY_CODE_MT          IsoTerritoryCode = 158
	IsoTerritoryCode_ISO_TERRITORY_CODE_MU          IsoTerritoryCode = 159
	IsoTerritoryCode_ISO_TERRITORY_CODE_MV          IsoTerritoryCode = 160
	IsoTerritoryCode_ISO_TERRITORY_CODE_MW          IsoTerritoryCode = 161
	IsoTerritoryCode_ISO_TERRITORY_CODE_MX          IsoTerritoryCode = 162
	IsoTerritoryCode_ISO_TERRITORY_CODE_MY          IsoTerritoryCode = 163
	IsoTerritoryCode_ISO_TERRITORY_CODE_MZ          IsoTerritoryCode = 164
	IsoTerritoryCode_ISO_TERRITORY_CODE_NA          IsoTerritoryCode = 165
	IsoTerritoryCode_ISO_TERRITORY_CODE_NC          IsoTerritoryCode = 166
	IsoTerritoryCode_ISO_TERRITORY_CODE_NE          IsoTerritoryCode = 167
	IsoTerritoryCode_ISO_TERRITORY_CODE_NF          IsoTerritoryCode = 168
	IsoTerritoryCode_ISO_TERRITORY_CODE_NG          IsoTerritoryCode = 169
	IsoTerritoryCode_ISO_TERRITORY_CODE_NI          IsoTerritoryCode = 170
	IsoTerritoryCode_ISO_TERRITORY_CODE_NL          IsoTerritoryCode = 171
	IsoTerritoryCode_ISO_TERRITORY_CODE_NO          IsoTerritoryCode = 172
	IsoTerritoryCode_ISO_TERRITORY_CODE_NP          IsoTerritoryCode = 173
	IsoTerritoryCode_ISO_TERRITORY_CODE_NR          IsoTerritoryCode = 174
	IsoTerritoryCode_ISO_TERRITORY_CODE_NU          IsoTerritoryCode = 175
	IsoTerritoryCode_ISO_TERRITORY_CODE_NZ          IsoTerritoryCode = 176
	IsoTerritoryCode_ISO_TERRITORY_CODE_OM          IsoTerritoryCode = 177
	IsoTerritoryCode_ISO_TERRITORY_CODE_PA          IsoTerritoryCode = 178
	IsoTerritoryCode_ISO_TERRITORY_CODE_PE          IsoTerritoryCode = 179
	IsoTerritoryCode_ISO_TERRITORY_CODE_PF          IsoTerritoryCode = 180
	IsoTerritoryCode_ISO_TERRITORY_CODE_PG          IsoTerritoryCode = 181
	IsoTerritoryCode_ISO_TERRITORY_CODE_PH          IsoTerritoryCode = 182
	IsoTerritoryCode_ISO_TERRITORY_CODE_PK          IsoTerritoryCode = 183
	IsoTerritoryCode_ISO_TERRITORY_CODE_PL          IsoTerritoryCode = 184
	IsoTerritoryCode_ISO_TERRITORY_CODE_PM          IsoTerritoryCode = 185
	IsoTerritoryCode_ISO_TERRITORY_CODE_PN          IsoTerritoryCode = 186
	IsoTerritoryCode_ISO_TERRITORY_CODE_PR          IsoTerritoryCode = 187
	IsoTerritoryCode_ISO_TERRITORY_CODE_PS          IsoTerritoryCode = 188
	IsoTerritoryCode_ISO_TERRITORY_CODE_PT          IsoTerritoryCode = 189
	IsoTerritoryCode_ISO_TERRITORY_CODE_PW          IsoTerritoryCode = 190
	IsoTerritoryCode_ISO_TERRITORY_CODE_PY          IsoTerritoryCode = 191
	IsoTerritoryCode_ISO_TERRITORY_CODE_QA          IsoTerritoryCode = 192
	IsoTerritoryCode_ISO_TERRITORY_CODE_RE          IsoTerritoryCode = 193
	IsoTerritoryCode_ISO_TERRITORY_CODE_RO          IsoTerritoryCode = 194
	IsoTerritoryCode_ISO_TERRITORY_CODE_RS          IsoTerritoryCode = 195
	IsoTerritoryCode_ISO_TERRITORY_CODE_RU          IsoTerritoryCode = 196
	IsoTerritoryCode_ISO_TERRITORY_CODE_RW          IsoTerritoryCode = 197
	IsoTerritoryCode_ISO_TERRITORY_CODE_SA          IsoTerritoryCode = 198
	IsoTerritoryCode_ISO_TERRITORY_CODE_SB          IsoTerritoryCode = 199
	IsoTerritoryCode_ISO_TERRITORY_CODE_SC          IsoTerritoryCode = 200
	IsoTerritoryCode_ISO_TERRITORY_CODE_SD          IsoTerritoryCode = 201
	IsoTerritoryCode_ISO_TERRITORY_CODE_SE          IsoTerritoryCode = 202
	IsoTerritoryCode_ISO_TERRITORY_CODE_SG          IsoTerritoryCode = 203
	IsoTerritoryCode_ISO_TERRITORY_CODE_SH          IsoTerritoryCode = 204
	IsoTerritoryCode_ISO_TERRITORY_CODE_SI          IsoTerritoryCode = 205
	IsoTerritoryCode_ISO_TERRITORY_CODE_SJ          IsoTerritoryCode = 206
	IsoTerritoryCode_ISO_TERRITORY_CODE_SK          IsoTerritoryCode = 207
	IsoTerritoryCode_ISO_TERRITORY_CODE_SL          IsoTerritoryCode = 208
	IsoTerritoryCode_ISO_TERRITORY_CODE_SM          IsoTerritoryCode = 209
	IsoTerritoryCode_ISO_TERRITORY_CODE_SN          IsoTerritoryCode = 210
	IsoTerritoryCode_ISO_TERRITORY_CODE_SO          IsoTerritoryCode = 211
	IsoTerritoryCode_ISO_TERRITORY_CODE_SR          IsoTerritoryCode = 212
	IsoTerritoryCode_ISO_TERRITORY_CODE_SS          IsoTerritoryCode = 213
	IsoTerritoryCode_ISO_TERRITORY_CODE_ST          IsoTerritoryCode = 214
	IsoTerritoryCode_ISO_TERRITORY_CODE_SV          IsoTerritoryCode = 215
	IsoTerritoryCode_ISO_TERRITORY_CODE_SX          IsoTerritoryCode = 216
	IsoTerritoryCode_ISO_TERRITORY_CODE_SY          IsoTerritoryCode = 217
	IsoTerritoryCode_ISO_TERRITORY_CODE_SZ          IsoTerritoryCode = 218
	IsoTerritoryCode_ISO_TERRITORY_CODE_TC          IsoTerritoryCode = 219
	IsoTerritoryCode_ISO_TERRITORY_CODE_TD          IsoTerritoryCode = 220
	IsoTerritoryCode_ISO_TERRITORY_CODE_TF          IsoTerritoryCode = 221
	IsoTerritoryCode_ISO_TERRITORY_CODE_TG          IsoTerritoryCode = 222
	IsoTerritoryCode_ISO_TERRITORY_CODE_TH          IsoTerritoryCode = 223
	IsoTerritoryCode_ISO_TERRITORY_CODE_TJ          IsoTerritoryCode = 224
	IsoTerritoryCode_ISO_TERRITORY_CODE_TK          IsoTerritoryCode = 225
	IsoTerritoryCode_ISO_TERRITORY_CODE_TL          IsoTerritoryCode = 226
	IsoTerritoryCode_ISO_TERRITORY_CODE_TM          IsoTerritoryCode = 227
	IsoTerritoryCode_ISO_TERRITORY_CODE_TN          IsoTerritoryCode = 228
	IsoTerritoryCode_ISO_TERRITORY_CODE_TO          IsoTerritoryCode = 229
	IsoTerritoryCode_ISO_TERRITORY_CODE_TR          IsoTerritoryCode = 230
	IsoTerritoryCode_ISO_TERRITORY_CODE_TT          IsoTerritoryCode = 231
	IsoTerritoryCode_ISO_TERRITORY_CODE_TV          IsoTerritoryCode = 232
	IsoTerritoryCode_ISO_TERRITORY_CODE_TW          IsoTerritoryCode = 233
	IsoTerritoryCode_ISO_TERRITORY_CODE_TZ          IsoTerritoryCode = 234
	IsoTerritoryCode_ISO_TERRITORY_CODE_UA          IsoTerritoryCode = 235
	IsoTerritoryCode_ISO_TERRITORY_CODE_UG          IsoTerritoryCode = 236
	IsoTerritoryCode_ISO_TERRITORY_CODE_UM          IsoTerritoryCode = 237
	IsoTerritoryCode_ISO_TERRITORY_CODE_US          IsoTerritoryCode = 238
	IsoTerritoryCode_ISO_TERRITORY_CODE_UY          IsoTerritoryCode = 239
	IsoTerritoryCode_ISO_TERRITORY_CODE_UZ          IsoTerritoryCode = 240
	IsoTerritoryCode_ISO_TERRITORY_CODE_VA          IsoTerritoryCode = 241
	IsoTerritoryCode_ISO_TERRITORY_CODE_VC          IsoTerritoryCode = 242
	IsoTerritoryCode_ISO_TERRITORY_CODE_VE          IsoTerritoryCode = 243
	IsoTerritoryCode_ISO_TERRITORY_CODE_VG          IsoTerritoryCode = 244
	IsoTerritoryCode_ISO_TERRITORY_CODE_VI          IsoTerritoryCode = 245
	IsoTerritoryCode_ISO_TERRITORY_CODE_VN          IsoTerritoryCode = 246
	IsoTerritoryCode_ISO_TERRITORY_CODE_VU          IsoTerritoryCode = 247
	IsoTerritoryCode_ISO_TERRITORY_CODE_WF          IsoTerritoryCode = 248
	IsoTerritoryCode_ISO_TERRITORY_CODE_WS          IsoTerritoryCode = 249
	IsoTerritoryCode_ISO_TERRITORY_CODE_YE          IsoTerritoryCode = 250
	IsoTerritoryCode_ISO_TERRITORY_CODE_YT          IsoTerritoryCode = 251
	IsoTerritoryCode_ISO_TERRITORY_CODE_ZA          IsoTerritoryCode = 252
	IsoTerritoryCode_ISO_TERRITORY_CODE_ZM          IsoTerritoryCode = 253
	IsoTerritoryCode_ISO_TERRITORY_CODE_ZW          IsoTerritoryCode = 254
)

// Enum value maps for IsoTerritoryCode.
var (
	IsoTerritoryCode_name = map[int32]string{
		0:   "ISO_TERRITORY_CODE_UNSPECIFIED",
		1:   "ISO_TERRITORY_CODE_AD",
		2:   "ISO_TERRITORY_CODE_AE",
		3:   "ISO_TERRITORY_CODE_AF",
		4:   "ISO_TERRITORY_CODE_AG",
		5:   "ISO_TERRITORY_CODE_AI",
		6:   "ISO_TERRITORY_CODE_AL",
		7:   "ISO_TERRITORY_CODE_AM",
		8:   "ISO_TERRITORY_CODE_AN",
		9:   "ISO_TERRITORY_CODE_AO",
		10:  "ISO_TERRITORY_CODE_AQ",
		11:  "ISO_TERRITORY_CODE_AR",
		12:  "ISO_TERRITORY_CODE_AS",
		13:  "ISO_TERRITORY_CODE_AT",
		14:  "ISO_TERRITORY_CODE_AU",
		15:  "ISO_TERRITORY_CODE_AW",
		16:  "ISO_TERRITORY_CODE_AX",
		17:  "ISO_TERRITORY_CODE_AZ",
		18:  "ISO_TERRITORY_CODE_BA",
		19:  "ISO_TERRITORY_CODE_BB",
		20:  "ISO_TERRITORY_CODE_BD",
		21:  "ISO_TERRITORY_CODE_BE",
		22:  "ISO_TERRITORY_CODE_BF",
		23:  "ISO_TERRITORY_CODE_BG",
		24:  "ISO_TERRITORY_CODE_BH",
		25:  "ISO_TERRITORY_CODE_BI",
		26:  "ISO_TERRITORY_CODE_BJ",
		27:  "ISO_TERRITORY_CODE_BL",
		28:  "ISO_TERRITORY_CODE_BM",
		29:  "ISO_TERRITORY_CODE_BN",
		30:  "ISO_TERRITORY_CODE_BO",
		31:  "ISO_TERRITORY_CODE_BQ",
		32:  "ISO_TERRITORY_CODE_BR",
		33:  "ISO_TERRITORY_CODE_BS",
		34:  "ISO_TERRITORY_CODE_BT",
		35:  "ISO_TERRITORY_CODE_BV",
		36:  "ISO_TERRITORY_CODE_BW",
		37:  "ISO_TERRITORY_CODE_BY",
		38:  "ISO_TERRITORY_CODE_BZ",
		39:  "ISO_TERRITORY_CODE_CA",
		40:  "ISO_TERRITORY_CODE_CC",
		41:  "ISO_TERRITORY_CODE_CD",
		42:  "ISO_TERRITORY_CODE_CF",
		43:  "ISO_TERRITORY_CODE_CG",
		44:  "ISO_TERRITORY_CODE_CH",
		45:  "ISO_TERRITORY_CODE_CI",
		46:  "ISO_TERRITORY_CODE_CK",
		47:  "ISO_TERRITORY_CODE_CL",
		48:  "ISO_TERRITORY_CODE_CM",
		49:  "ISO_TERRITORY_CODE_CN",
		50:  "ISO_TERRITORY_CODE_CO",
		51:  "ISO_TERRITORY_CODE_CR",
		52:  "ISO_TERRITORY_CODE_CS",
		53:  "ISO_TERRITORY_CODE_CU",
		54:  "ISO_TERRITORY_CODE_CV",
		55:  "ISO_TERRITORY_CODE_CW",
		56:  "ISO_TERRITORY_CODE_CX",
		57:  "ISO_TERRITORY_CODE_CY",
		58:  "ISO_TERRITORY_CODE_CZ",
		59:  "ISO_TERRITORY_CODE_DE",
		60:  "ISO_TERRITORY_CODE_DJ",
		61:  "ISO_TERRITORY_CODE_DK",
		62:  "ISO_TERRITORY_CODE_DM",
		63:  "ISO_TERRITORY_CODE_DO",
		64:  "ISO_TERRITORY_CODE_DZ",
		65:  "ISO_TERRITORY_CODE_EC",
		66:  "ISO_TERRITORY_CODE_EE",
		67:  "ISO_TERRITORY_CODE_EG",
		68:  "ISO_TERRITORY_CODE_EH",
		69:  "ISO_TERRITORY_CODE_ER",
		70:  "ISO_TERRITORY_CODE_ES",
		71:  "ISO_TERRITORY_CODE_ES_CE",
		72:  "ISO_TERRITORY_CODE_ES_CN",
		73:  "ISO_TERRITORY_CODE_ES_ML",
		74:  "ISO_TERRITORY_CODE_ET",
		75:  "ISO_TERRITORY_CODE_FI",
		76:  "ISO_TERRITORY_CODE_FJ",
		77:  "ISO_TERRITORY_CODE_FK",
		78:  "ISO_TERRITORY_CODE_FM",
		79:  "ISO_TERRITORY_CODE_FO",
		80:  "ISO_TERRITORY_CODE_FR",
		81:  "ISO_TERRITORY_CODE_GA",
		82:  "ISO_TERRITORY_CODE_GB",
		83:  "ISO_TERRITORY_CODE_GD",
		84:  "ISO_TERRITORY_CODE_GE",
		85:  "ISO_TERRITORY_CODE_GF",
		86:  "ISO_TERRITORY_CODE_GG",
		87:  "ISO_TERRITORY_CODE_GH",
		88:  "ISO_TERRITORY_CODE_GI",
		89:  "ISO_TERRITORY_CODE_GL",
		90:  "ISO_TERRITORY_CODE_GM",
		91:  "ISO_TERRITORY_CODE_GN",
		92:  "ISO_TERRITORY_CODE_GP",
		93:  "ISO_TERRITORY_CODE_GQ",
		94:  "ISO_TERRITORY_CODE_GR",
		95:  "ISO_TERRITORY_CODE_GS",
		96:  "ISO_TERRITORY_CODE_GT",
		97:  "ISO_TERRITORY_CODE_GU",
		98:  "ISO_TERRITORY_CODE_GW",
		99:  "ISO_TERRITORY_CODE_GY",
		100: "ISO_TERRITORY_CODE_HK",
		101: "ISO_TERRITORY_CODE_HM",
		102: "ISO_TERRITORY_CODE_HN",
		103: "ISO_TERRITORY_CODE_HR",
		104: "ISO_TERRITORY_CODE_HT",
		105: "ISO_TERRITORY_CODE_HU",
		106: "ISO_TERRITORY_CODE_ID",
		107: "ISO_TERRITORY_CODE_IE",
		108: "ISO_TERRITORY_CODE_IL",
		109: "ISO_TERRITORY_CODE_IM",
		110: "ISO_TERRITORY_CODE_IN",
		111: "ISO_TERRITORY_CODE_IO",
		112: "ISO_TERRITORY_CODE_IQ",
		113: "ISO_TERRITORY_CODE_IR",
		114: "ISO_TERRITORY_CODE_IS",
		115: "ISO_TERRITORY_CODE_IT",
		116: "ISO_TERRITORY_CODE_JE",
		117: "ISO_TERRITORY_CODE_JM",
		118: "ISO_TERRITORY_CODE_JO",
		119: "ISO_TERRITORY_CODE_JP",
		120: "ISO_TERRITORY_CODE_KE",
		121: "ISO_TERRITORY_CODE_KG",
		122: "ISO_TERRITORY_CODE_KH",
		123: "ISO_TERRITORY_CODE_KI",
		124: "ISO_TERRITORY_CODE_KM",
		125: "ISO_TERRITORY_CODE_KN",
		126: "ISO_TERRITORY_CODE_KP",
		127: "ISO_TERRITORY_CODE_KR",
		128: "ISO_TERRITORY_CODE_KW",
		129: "ISO_TERRITORY_CODE_KY",
		130: "ISO_TERRITORY_CODE_KZ",
		131: "ISO_TERRITORY_CODE_LA",
		132: "ISO_TERRITORY_CODE_LB",
		133: "ISO_TERRITORY_CODE_LC",
		134: "ISO_TERRITORY_CODE_LI",
		135: "ISO_TERRITORY_CODE_LK",
		136: "ISO_TERRITORY_CODE_LR",
		137: "ISO_TERRITORY_CODE_LS",
		138: "ISO_TERRITORY_CODE_LT",
		139: "ISO_TERRITORY_CODE_LU",
		140: "ISO_TERRITORY_CODE_LV",
		141: "ISO_TERRITORY_CODE_LY",
		142: "ISO_TERRITORY_CODE_MA",
		143: "ISO_TERRITORY_CODE_MC",
		144: "ISO_TERRITORY_CODE_MD",
		145: "ISO_TERRITORY_CODE_ME",
		146: "ISO_TERRITORY_CODE_MF",
		147: "ISO_TERRITORY_CODE_MG",
		148: "ISO_TERRITORY_CODE_MH",
		149: "ISO_TERRITORY_CODE_MK",
		150: "ISO_TERRITORY_CODE_ML",
		151: "ISO_TERRITORY_CODE_MM",
		152: "ISO_TERRITORY_CODE_MN",
		153: "ISO_TERRITORY_CODE_MO",
		154: "ISO_TERRITORY_CODE_MP",
		155: "ISO_TERRITORY_CODE_MQ",
		156: "ISO_TERRITORY_CODE_MR",
		157: "ISO_TERRITORY_CODE_MS",
		158: "ISO_TERRITORY_CODE_MT",
		159: "ISO_TERRITORY_CODE_MU",
		160: "ISO_TERRITORY_CODE_MV",
		161: "ISO_TERRITORY_CODE_MW",
		162: "ISO_TERRITORY_CODE_MX",
		163: "ISO_TERRITORY_CODE_MY",
		164: "ISO_TERRITORY_CODE_MZ",
		165: "ISO_TERRITORY_CODE_NA",
		166: "ISO_TERRITORY_CODE_NC",
		167: "ISO_TERRITORY_CODE_NE",
		168: "ISO_TERRITORY_CODE_NF",
		169: "ISO_TERRITORY_CODE_NG",
		170: "ISO_TERRITORY_CODE_NI",
		171: "ISO_TERRITORY_CODE_NL",
		172: "ISO_TERRITORY_CODE_NO",
		173: "ISO_TERRITORY_CODE_NP",
		174: "ISO_TERRITORY_CODE_NR",
		175: "ISO_TERRITORY_CODE_NU",
		176: "ISO_TERRITORY_CODE_NZ",
		177: "ISO_TERRITORY_CODE_OM",
		178: "ISO_TERRITORY_CODE_PA",
		179: "ISO_TERRITORY_CODE_PE",
		180: "ISO_TERRITORY_CODE_PF",
		181: "ISO_TERRITORY_CODE_PG",
		182: "ISO_TERRITORY_CODE_PH",
		183: "ISO_TERRITORY_CODE_PK",
		184: "ISO_TERRITORY_CODE_PL",
		185: "ISO_TERRITORY_CODE_PM",
		186: "ISO_TERRITORY_CODE_PN",
		187: "ISO_TERRITORY_CODE_PR",
		188: "ISO_TERRITORY_CODE_PS",
		189: "ISO_TERRITORY_CODE_PT",
		190: "ISO_TERRITORY_CODE_PW",
		191: "ISO_TERRITORY_CODE_PY",
		192: "ISO_TERRITORY_CODE_QA",
		193: "ISO_TERRITORY_CODE_RE",
		194: "ISO_TERRITORY_CODE_RO",
		195: "ISO_TERRITORY_CODE_RS",
		196: "ISO_TERRITORY_CODE_RU",
		197: "ISO_TERRITORY_CODE_RW",
		198: "ISO_TERRITORY_CODE_SA",
		199: "ISO_TERRITORY_CODE_SB",
		200: "ISO_TERRITORY_CODE_SC",
		201: "ISO_TERRITORY_CODE_SD",
		202: "ISO_TERRITORY_CODE_SE",
		203: "ISO_TERRITORY_CODE_SG",
		204: "ISO_TERRITORY_CODE_SH",
		205: "ISO_TERRITORY_CODE_SI",
		206: "ISO_TERRITORY_CODE_SJ",
		207: "ISO_TERRITORY_CODE_SK",
		208: "ISO_TERRITORY_CODE_SL",
		209: "ISO_TERRITORY_CODE_SM",
		210: "ISO_TERRITORY_CODE_SN",
		211: "ISO_TERRITORY_CODE_SO",
		212: "ISO_TERRITORY_CODE_SR",
		213: "ISO_TERRITORY_CODE_SS",
		214: "ISO_TERRITORY_CODE_ST",
		215: "ISO_TERRITORY_CODE_SV",
		216: "ISO_TERRITORY_CODE_SX",
		217: "ISO_TERRITORY_CODE_SY",
		218: "ISO_TERRITORY_CODE_SZ",
		219: "ISO_TERRITORY_CODE_TC",
		220: "ISO_TERRITORY_CODE_TD",
		221: "ISO_TERRITORY_CODE_TF",
		222: "ISO_TERRITORY_CODE_TG",
		223: "ISO_TERRITORY_CODE_TH",
		224: "ISO_TERRITORY_CODE_TJ",
		225: "ISO_TERRITORY_CODE_TK",
		226: "ISO_TERRITORY_CODE_TL",
		227: "ISO_TERRITORY_CODE_TM",
		228: "ISO_TERRITORY_CODE_TN",
		229: "ISO_TERRITORY_CODE_TO",
		230: "ISO_TERRITORY_CODE_TR",
		231: "ISO_TERRITORY_CODE_TT",
		232: "ISO_TERRITORY_CODE_TV",
		233: "ISO_TERRITORY_CODE_TW",
		234: "ISO_TERRITORY_CODE_TZ",
		235: "ISO_TERRITORY_CODE_UA",
		236: "ISO_TERRITORY_CODE_UG",
		237: "ISO_TERRITORY_CODE_UM",
		238: "ISO_TERRITORY_CODE_US",
		239: "ISO_TERRITORY_CODE_UY",
		240: "ISO_TERRITORY_CODE_UZ",
		241: "ISO_TERRITORY_CODE_VA",
		242: "ISO_TERRITORY_CODE_VC",
		243: "ISO_TERRITORY_CODE_VE",
		244: "ISO_TERRITORY_CODE_VG",
		245: "ISO_TERRITORY_CODE_VI",
		246: "ISO_TERRITORY_CODE_VN",
		247: "ISO_TERRITORY_CODE_VU",
		248: "ISO_TERRITORY_CODE_WF",
		249: "ISO_TERRITORY_CODE_WS",
		250: "ISO_TERRITORY_CODE_YE",
		251: "ISO_TERRITORY_CODE_YT",
		252: "ISO_TERRITORY_CODE_ZA",
		253: "ISO_TERRITORY_CODE_ZM",
		254: "ISO_TERRITORY_CODE_ZW",
	}
	IsoTerritoryCode_value = map[string]int32{
		"ISO_TERRITORY_CODE_UNSPECIFIED": 0,
		"ISO_TERRITORY_CODE_AD":          1,
		"ISO_TERRITORY_CODE_AE":          2,
		"ISO_TERRITORY_CODE_AF":          3,
		"ISO_TERRITORY_CODE_AG":          4,
		"ISO_TERRITORY_CODE_AI":          5,
		"ISO_TERRITORY_CODE_AL":          6,
		"ISO_TERRITORY_CODE_AM":          7,
		"ISO_TERRITORY_CODE_AN":          8,
		"ISO_TERRITORY_CODE_AO":          9,
		"ISO_TERRITORY_CODE_AQ":          10,
		"ISO_TERRITORY_CODE_AR":          11,
		"ISO_TERRITORY_CODE_AS":          12,
		"ISO_TERRITORY_CODE_AT":          13,
		"ISO_TERRITORY_CODE_AU":          14,
		"ISO_TERRITORY_CODE_AW":          15,
		"ISO_TERRITORY_CODE_AX":          16,
		"ISO_TERRITORY_CODE_AZ":          17,
		"ISO_TERRITORY_CODE_BA":          18,
		"ISO_TERRITORY_CODE_BB":          19,
		"ISO_TERRITORY_CODE_BD":          20,
		"ISO_TERRITORY_CODE_BE":          21,
		"ISO_TERRITORY_CODE_BF":          22,
		"ISO_TERRITORY_CODE_BG":          23,
		"ISO_TERRITORY_CODE_BH":          24,
		"ISO_TERRITORY_CODE_BI":          25,
		"ISO_TERRITORY_CODE_BJ":          26,
		"ISO_TERRITORY_CODE_BL":          27,
		"ISO_TERRITORY_CODE_BM":          28,
		"ISO_TERRITORY_CODE_BN":          29,
		"ISO_TERRITORY_CODE_BO":          30,
		"ISO_TERRITORY_CODE_BQ":          31,
		"ISO_TERRITORY_CODE_BR":          32,
		"ISO_TERRITORY_CODE_BS":          33,
		"ISO_TERRITORY_CODE_BT":          34,
		"ISO_TERRITORY_CODE_BV":          35,
		"ISO_TERRITORY_CODE_BW":          36,
		"ISO_TERRITORY_CODE_BY":          37,
		"ISO_TERRITORY_CODE_BZ":          38,
		"ISO_TERRITORY_CODE_CA":          39,
		"ISO_TERRITORY_CODE_CC":          40,
		"ISO_TERRITORY_CODE_CD":          41,
		"ISO_TERRITORY_CODE_CF":          42,
		"ISO_TERRITORY_CODE_CG":          43,
		"ISO_TERRITORY_CODE_CH":          44,
		"ISO_TERRITORY_CODE_CI":          45,
		"ISO_TERRITORY_CODE_CK":          46,
		"ISO_TERRITORY_CODE_CL":          47,
		"ISO_TERRITORY_CODE_CM":          48,
		"ISO_TERRITORY_CODE_CN":          49,
		"ISO_TERRITORY_CODE_CO":          50,
		"ISO_TERRITORY_CODE_CR":          51,
		"ISO_TERRITORY_CODE_CS":          52,
		"ISO_TERRITORY_CODE_CU":          53,
		"ISO_TERRITORY_CODE_CV":          54,
		"ISO_TERRITORY_CODE_CW":          55,
		"ISO_TERRITORY_CODE_CX":          56,
		"ISO_TERRITORY_CODE_CY":          57,
		"ISO_TERRITORY_CODE_CZ":          58,
		"ISO_TERRITORY_CODE_DE":          59,
		"ISO_TERRITORY_CODE_DJ":          60,
		"ISO_TERRITORY_CODE_DK":          61,
		"ISO_TERRITORY_CODE_DM":          62,
		"ISO_TERRITORY_CODE_DO":          63,
		"ISO_TERRITORY_CODE_DZ":          64,
		"ISO_TERRITORY_CODE_EC":          65,
		"ISO_TERRITORY_CODE_EE":          66,
		"ISO_TERRITORY_CODE_EG":          67,
		"ISO_TERRITORY_CODE_EH":          68,
		"ISO_TERRITORY_CODE_ER":          69,
		"ISO_TERRITORY_CODE_ES":          70,
		"ISO_TERRITORY_CODE_ES_CE":       71,
		"ISO_TERRITORY_CODE_ES_CN":       72,
		"ISO_TERRITORY_CODE_ES_ML":       73,
		"ISO_TERRITORY_CODE_ET":          74,
		"ISO_TERRITORY_CODE_FI":          75,
		"ISO_TERRITORY_CODE_FJ":          76,
		"ISO_TERRITORY_CODE_FK":          77,
		"ISO_TERRITORY_CODE_FM":          78,
		"ISO_TERRITORY_CODE_FO":          79,
		"ISO_TERRITORY_CODE_FR":          80,
		"ISO_TERRITORY_CODE_GA":          81,
		"ISO_TERRITORY_CODE_GB":          82,
		"ISO_TERRITORY_CODE_GD":          83,
		"ISO_TERRITORY_CODE_GE":          84,
		"ISO_TERRITORY_CODE_GF":          85,
		"ISO_TERRITORY_CODE_GG":          86,
		"ISO_TERRITORY_CODE_GH":          87,
		"ISO_TERRITORY_CODE_GI":          88,
		"ISO_TERRITORY_CODE_GL":          89,
		"ISO_TERRITORY_CODE_GM":          90,
		"ISO_TERRITORY_CODE_GN":          91,
		"ISO_TERRITORY_CODE_GP":          92,
		"ISO_TERRITORY_CODE_GQ":          93,
		"ISO_TERRITORY_CODE_GR":          94,
		"ISO_TERRITORY_CODE_GS":          95,
		"ISO_TERRITORY_CODE_GT":          96,
		"ISO_TERRITORY_CODE_GU":          97,
		"ISO_TERRITORY_CODE_GW":          98,
		"ISO_TERRITORY_CODE_GY":          99,
		"ISO_TERRITORY_CODE_HK":          100,
		"ISO_TERRITORY_CODE_HM":          101,
		"ISO_TERRITORY_CODE_HN":          102,
		"ISO_TERRITORY_CODE_HR":          103,
		"ISO_TERRITORY_CODE_HT":          104,
		"ISO_TERRITORY_CODE_HU":          105,
		"ISO_TERRITORY_CODE_ID":          106,
		"ISO_TERRITORY_CODE_IE":          107,
		"ISO_TERRITORY_CODE_IL":          108,
		"ISO_TERRITORY_CODE_IM":          109,
		"ISO_TERRITORY_CODE_IN":          110,
		"ISO_TERRITORY_CODE_IO":          111,
		"ISO_TERRITORY_CODE_IQ":          112,
		"ISO_TERRITORY_CODE_IR":          113,
		"ISO_TERRITORY_CODE_IS":          114,
		"ISO_TERRITORY_CODE_IT":          115,
		"ISO_TERRITORY_CODE_JE":          116,
		"ISO_TERRITORY_CODE_JM":          117,
		"ISO_TERRITORY_CODE_JO":          118,
		"ISO_TERRITORY_CODE_JP":          119,
		"ISO_TERRITORY_CODE_KE":          120,
		"ISO_TERRITORY_CODE_KG":          121,
		"ISO_TERRITORY_CODE_KH":          122,
		"ISO_TERRITORY_CODE_KI":          123,
		"ISO_TERRITORY_CODE_KM":          124,
		"ISO_TERRITORY_CODE_KN":          125,
		"ISO_TERRITORY_CODE_KP":          126,
		"ISO_TERRITORY_CODE_KR":          127,
		"ISO_TERRITORY_CODE_KW":          128,
		"ISO_TERRITORY_CODE_KY":          129,
		"ISO_TERRITORY_CODE_KZ":          130,
		"ISO_TERRITORY_CODE_LA":          131,
		"ISO_TERRITORY_CODE_LB":          132,
		"ISO_TERRITORY_CODE_LC":          133,
		"ISO_TERRITORY_CODE_LI":          134,
		"ISO_TERRITORY_CODE_LK":          135,
		"ISO_TERRITORY_CODE_LR":          136,
		"ISO_TERRITORY_CODE_LS":          137,
		"ISO_TERRITORY_CODE_LT":          138,
		"ISO_TERRITORY_CODE_LU":          139,
		"ISO_TERRITORY_CODE_LV":          140,
		"ISO_TERRITORY_CODE_LY":          141,
		"ISO_TERRITORY_CODE_MA":          142,
		"ISO_TERRITORY_CODE_MC":          143,
		"ISO_TERRITORY_CODE_MD":          144,
		"ISO_TERRITORY_CODE_ME":          145,
		"ISO_TERRITORY_CODE_MF":          146,
		"ISO_TERRITORY_CODE_MG":          147,
		"ISO_TERRITORY_CODE_MH":          148,
		"ISO_TERRITORY_CODE_MK":          149,
		"ISO_TERRITORY_CODE_ML":          150,
		"ISO_TERRITORY_CODE_MM":          151,
		"ISO_TERRITORY_CODE_MN":          152,
		"ISO_TERRITORY_CODE_MO":          153,
		"ISO_TERRITORY_CODE_MP":          154,
		"ISO_TERRITORY_CODE_MQ":          155,
		"ISO_TERRITORY_CODE_MR":          156,
		"ISO_TERRITORY_CODE_MS":          157,
		"ISO_TERRITORY_CODE_MT":          158,
		"ISO_TERRITORY_CODE_MU":          159,
		"ISO_TERRITORY_CODE_MV":          160,
		"ISO_TERRITORY_CODE_MW":          161,
		"ISO_TERRITORY_CODE_MX":          162,
		"ISO_TERRITORY_CODE_MY":          163,
		"ISO_TERRITORY_CODE_MZ":          164,
		"ISO_TERRITORY_CODE_NA":          165,
		"ISO_TERRITORY_CODE_NC":          166,
		"ISO_TERRITORY_CODE_NE":          167,
		"ISO_TERRITORY_CODE_NF":          168,
		"ISO_TERRITORY_CODE_NG":          169,
		"ISO_TERRITORY_CODE_NI":          170,
		"ISO_TERRITORY_CODE_NL":          171,
		"ISO_TERRITORY_CODE_NO":          172,
		"ISO_TERRITORY_CODE_NP":          173,
		"ISO_TERRITORY_CODE_NR":          174,
		"ISO_TERRITORY_CODE_NU":          175,
		"ISO_TERRITORY_CODE_NZ":          176,
		"ISO_TERRITORY_CODE_OM":          177,
		"ISO_TERRITORY_CODE_PA":          178,
		"ISO_TERRITORY_CODE_PE":          179,
		"ISO_TERRITORY_CODE_PF":          180,
		"ISO_TERRITORY_CODE_PG":          181,
		"ISO_TERRITORY_CODE_PH":          182,
		"ISO_TERRITORY_CODE_PK":          183,
		"ISO_TERRITORY_CODE_PL":          184,
		"ISO_TERRITORY_CODE_PM":          185,
		"ISO_TERRITORY_CODE_PN":          186,
		"ISO_TERRITORY_CODE_PR":          187,
		"ISO_TERRITORY_CODE_PS":          188,
		"ISO_TERRITORY_CODE_PT":          189,
		"ISO_TERRITORY_CODE_PW":          190,
		"ISO_TERRITORY_CODE_PY":          191,
		"ISO_TERRITORY_CODE_QA":          192,
		"ISO_TERRITORY_CODE_RE":          193,
		"ISO_TERRITORY_CODE_RO":          194,
		"ISO_TERRITORY_CODE_RS":          195,
		"ISO_TERRITORY_CODE_RU":          196,
		"ISO_TERRITORY_CODE_RW":          197,
		"ISO_TERRITORY_CODE_SA":          198,
		"ISO_TERRITORY_CODE_SB":          199,
		"ISO_TERRITORY_CODE_SC":          200,
		"ISO_TERRITORY_CODE_SD":          201,
		"ISO_TERRITORY_CODE_SE":          202,
		"ISO_TERRITORY_CODE_SG":          203,
		"ISO_TERRITORY_CODE_SH":          204,
		"ISO_TERRITORY_CODE_SI":          205,
		"ISO_TERRITORY_CODE_SJ":          206,
		"ISO_TERRITORY_CODE_SK":          207,
		"ISO_TERRITORY_CODE_SL":          208,
		"ISO_TERRITORY_CODE_SM":          209,
		"ISO_TERRITORY_CODE_SN":          210,
		"ISO_TERRITORY_CODE_SO":          211,
		"ISO_TERRITORY_CODE_SR":          212,
		"ISO_TERRITORY_CODE_SS":          213,
		"ISO_TERRITORY_CODE_ST":          214,
		"ISO_TERRITORY_CODE_SV":          215,
		"ISO_TERRITORY_CODE_SX":          216,
		"ISO_TERRITORY_CODE_SY":          217,
		"ISO_TERRITORY_CODE_SZ":          218,
		"ISO_TERRITORY_CODE_TC":          219,
		"ISO_TERRITORY_CODE_TD":          220,
		"ISO_TERRITORY_CODE_TF":          221,
		"ISO_TERRITORY_CODE_TG":          222,
		"ISO_TERRITORY_CODE_TH":          223,
		"ISO_TERRITORY_CODE_TJ":          224,
		"ISO_TERRITORY_CODE_TK":          225,
		"ISO_TERRITORY_CODE_TL":          226,
		"ISO_TERRITORY_CODE_TM":          227,
		"ISO_TERRITORY_CODE_TN":          228,
		"ISO_TERRITORY_CODE_TO":          229,
		"ISO_TERRITORY_CODE_TR":          230,
		"ISO_TERRITORY_CODE_TT":          231,
		"ISO_TERRITORY_CODE_TV":          232,
		"ISO_TERRITORY_CODE_TW":          233,
		"ISO_TERRITORY_CODE_TZ":          234,
		"ISO_TERRITORY_CODE_UA":          235,
		"ISO_TERRITORY_CODE_UG":          236,
		"ISO_TERRITORY_CODE_UM":          237,
		"ISO_TERRITORY_CODE_US":          238,
		"ISO_TERRITORY_CODE_UY":          239,
		"ISO_TERRITORY_CODE_UZ":          240,
		"ISO_TERRITORY_CODE_VA":          241,
		"ISO_TERRITORY_CODE_VC":          242,
		"ISO_TERRITORY_CODE_VE":          243,
		"ISO_TERRITORY_CODE_VG":          244,
		"ISO_TERRITORY_CODE_VI":          245,
		"ISO_TERRITORY_CODE_VN":          246,
		"ISO_TERRITORY_CODE_VU":          247,
		"ISO_TERRITORY_CODE_WF":          248,
		"ISO_TERRITORY_CODE_WS":          249,
		"ISO_TERRITORY_CODE_YE":          250,
		"ISO_TERRITORY_CODE_YT":          251,
		"ISO_TERRITORY_CODE_ZA":          252,
		"ISO_TERRITORY_CODE_ZM":          253,
		"ISO_TERRITORY_CODE_ZW":          254,
	}
)

func (x IsoTerritoryCode) Enum() *IsoTerritoryCode {
	p := new(IsoTerritoryCode)
	*p = x
	return p
}

func (x IsoTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsoTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[107].Descriptor()
}

func (IsoTerritoryCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[107]
}

func (x IsoTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsoTerritoryCode.Descriptor instead.
func (IsoTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{107}
}

type IswcStatus int32

const (
	IswcStatus_ISWC_STATUS_UNSPECIFIED IswcStatus = 0
	IswcStatus_ISWC_STATUS_ARCHIVED    IswcStatus = 1
	IswcStatus_ISWC_STATUS_PREFERRED   IswcStatus = 2
	IswcStatus_ISWC_STATUS_PROVISIONAL IswcStatus = 3
)

// Enum value maps for IswcStatus.
var (
	IswcStatus_name = map[int32]string{
		0: "ISWC_STATUS_UNSPECIFIED",
		1: "ISWC_STATUS_ARCHIVED",
		2: "ISWC_STATUS_PREFERRED",
		3: "ISWC_STATUS_PROVISIONAL",
	}
	IswcStatus_value = map[string]int32{
		"ISWC_STATUS_UNSPECIFIED": 0,
		"ISWC_STATUS_ARCHIVED":    1,
		"ISWC_STATUS_PREFERRED":   2,
		"ISWC_STATUS_PROVISIONAL": 3,
	}
)

func (x IswcStatus) Enum() *IswcStatus {
	p := new(IswcStatus)
	*p = x
	return p
}

func (x IswcStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IswcStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[108].Descriptor()
}

func (IswcStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[108]
}

func (x IswcStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IswcStatus.Descriptor instead.
func (IswcStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{108}
}

type LabelNameType int32

const (
	LabelNameType_LABEL_NAME_TYPE_UNSPECIFIED      LabelNameType = 0
	LabelNameType_LABEL_NAME_TYPE_DISPLAYLABELNAME LabelNameType = 1
	LabelNameType_LABEL_NAME_TYPE_USERDEFINED      LabelNameType = 2
)

// Enum value maps for LabelNameType.
var (
	LabelNameType_name = map[int32]string{
		0: "LABEL_NAME_TYPE_UNSPECIFIED",
		1: "LABEL_NAME_TYPE_DISPLAYLABELNAME",
		2: "LABEL_NAME_TYPE_USERDEFINED",
	}
	LabelNameType_value = map[string]int32{
		"LABEL_NAME_TYPE_UNSPECIFIED":      0,
		"LABEL_NAME_TYPE_DISPLAYLABELNAME": 1,
		"LABEL_NAME_TYPE_USERDEFINED":      2,
	}
)

func (x LabelNameType) Enum() *LabelNameType {
	p := new(LabelNameType)
	*p = x
	return p
}

func (x LabelNameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelNameType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[109].Descriptor()
}

func (LabelNameType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[109]
}

func (x LabelNameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelNameType.Descriptor instead.
func (LabelNameType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{109}
}

type LabelType int32

const (
	LabelType_LABEL_TYPE_UNSPECIFIED  LabelType = 0
	LabelType_LABEL_TYPE_DISPLAYLABEL LabelType = 1
	LabelType_LABEL_TYPE_USERDEFINED  LabelType = 2
)

// Enum value maps for LabelType.
var (
	LabelType_name = map[int32]string{
		0: "LABEL_TYPE_UNSPECIFIED",
		1: "LABEL_TYPE_DISPLAYLABEL",
		2: "LABEL_TYPE_USERDEFINED",
	}
	LabelType_value = map[string]int32{
		"LABEL_TYPE_UNSPECIFIED":  0,
		"LABEL_TYPE_DISPLAYLABEL": 1,
		"LABEL_TYPE_USERDEFINED":  2,
	}
)

func (x LabelType) Enum() *LabelType {
	p := new(LabelType)
	*p = x
	return p
}

func (x LabelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[110].Descriptor()
}

func (LabelType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[110]
}

func (x LabelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelType.Descriptor instead.
func (LabelType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{110}
}

type LanguageLocalizationType int32

const (
	LanguageLocalizationType_LANGUAGE_LOCALIZATION_TYPE_UNSPECIFIED  LanguageLocalizationType = 0
	LanguageLocalizationType_LANGUAGE_LOCALIZATION_TYPE_DUBBED       LanguageLocalizationType = 1
	LanguageLocalizationType_LANGUAGE_LOCALIZATION_TYPE_SUBTITLED    LanguageLocalizationType = 2
	LanguageLocalizationType_LANGUAGE_LOCALIZATION_TYPE_MULTILINGUAL LanguageLocalizationType = 3
	LanguageLocalizationType_LANGUAGE_LOCALIZATION_TYPE_ORIGINAL     LanguageLocalizationType = 4
)

// Enum value maps for LanguageLocalizationType.
var (
	LanguageLocalizationType_name = map[int32]string{
		0: "LANGUAGE_LOCALIZATION_TYPE_UNSPECIFIED",
		1: "LANGUAGE_LOCALIZATION_TYPE_DUBBED",
		2: "LANGUAGE_LOCALIZATION_TYPE_SUBTITLED",
		3: "LANGUAGE_LOCALIZATION_TYPE_MULTILINGUAL",
		4: "LANGUAGE_LOCALIZATION_TYPE_ORIGINAL",
	}
	LanguageLocalizationType_value = map[string]int32{
		"LANGUAGE_LOCALIZATION_TYPE_UNSPECIFIED":  0,
		"LANGUAGE_LOCALIZATION_TYPE_DUBBED":       1,
		"LANGUAGE_LOCALIZATION_TYPE_SUBTITLED":    2,
		"LANGUAGE_LOCALIZATION_TYPE_MULTILINGUAL": 3,
		"LANGUAGE_LOCALIZATION_TYPE_ORIGINAL":     4,
	}
)

func (x LanguageLocalizationType) Enum() *LanguageLocalizationType {
	p := new(LanguageLocalizationType)
	*p = x
	return p
}

func (x LanguageLocalizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageLocalizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[111].Descriptor()
}

func (LanguageLocalizationType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[111]
}

func (x LanguageLocalizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageLocalizationType.Descriptor instead.
func (LanguageLocalizationType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{111}
}

type LicenseRecord int32

const (
	LicenseRecord_LICENSE_RECORD_UNSPECIFIED  LicenseRecord = 0
	LicenseRecord_LICENSE_RECORD_HASLICENSE   LicenseRecord = 1
	LicenseRecord_LICENSE_RECORD_HASNOLICENSE LicenseRecord = 2
	LicenseRecord_LICENSE_RECORD_UNKNOWN      LicenseRecord = 3
)

// Enum value maps for LicenseRecord.
var (
	LicenseRecord_name = map[int32]string{
		0: "LICENSE_RECORD_UNSPECIFIED",
		1: "LICENSE_RECORD_HASLICENSE",
		2: "LICENSE_RECORD_HASNOLICENSE",
		3: "LICENSE_RECORD_UNKNOWN",
	}
	LicenseRecord_value = map[string]int32{
		"LICENSE_RECORD_UNSPECIFIED":  0,
		"LICENSE_RECORD_HASLICENSE":   1,
		"LICENSE_RECORD_HASNOLICENSE": 2,
		"LICENSE_RECORD_UNKNOWN":      3,
	}
)

func (x LicenseRecord) Enum() *LicenseRecord {
	p := new(LicenseRecord)
	*p = x
	return p
}

func (x LicenseRecord) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseRecord) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[112].Descriptor()
}

func (LicenseRecord) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[112]
}

func (x LicenseRecord) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseRecord.Descriptor instead.
func (LicenseRecord) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{112}
}

type LicenseRefusalReason int32

const (
	LicenseRefusalReason_LICENSE_REFUSAL_REASON_UNSPECIFIED        LicenseRefusalReason = 0
	LicenseRefusalReason_LICENSE_REFUSAL_REASON_USERDEFINED        LicenseRefusalReason = 1
	LicenseRefusalReason_LICENSE_REFUSAL_REASON_WORKINPUBLICDOMAIN LicenseRefusalReason = 2
)

// Enum value maps for LicenseRefusalReason.
var (
	LicenseRefusalReason_name = map[int32]string{
		0: "LICENSE_REFUSAL_REASON_UNSPECIFIED",
		1: "LICENSE_REFUSAL_REASON_USERDEFINED",
		2: "LICENSE_REFUSAL_REASON_WORKINPUBLICDOMAIN",
	}
	LicenseRefusalReason_value = map[string]int32{
		"LICENSE_REFUSAL_REASON_UNSPECIFIED":        0,
		"LICENSE_REFUSAL_REASON_USERDEFINED":        1,
		"LICENSE_REFUSAL_REASON_WORKINPUBLICDOMAIN": 2,
	}
)

func (x LicenseRefusalReason) Enum() *LicenseRefusalReason {
	p := new(LicenseRefusalReason)
	*p = x
	return p
}

func (x LicenseRefusalReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseRefusalReason) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[113].Descriptor()
}

func (LicenseRefusalReason) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[113]
}

func (x LicenseRefusalReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseRefusalReason.Descriptor instead.
func (LicenseRefusalReason) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{113}
}

type LicenseRejectionReason int32

const (
	LicenseRejectionReason_LICENSE_REJECTION_REASON_UNSPECIFIED                    LicenseRejectionReason = 0
	LicenseRejectionReason_LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES      LicenseRejectionReason = 1
	LicenseRejectionReason_LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE LicenseRejectionReason = 2
	LicenseRejectionReason_LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER  LicenseRejectionReason = 3
	LicenseRejectionReason_LICENSE_REJECTION_REASON_LICENSEBLOCKED                 LicenseRejectionReason = 4
	LicenseRejectionReason_LICENSE_REJECTION_REASON_LICENSEEXISTS                  LicenseRejectionReason = 5
	LicenseRejectionReason_LICENSE_REJECTION_REASON_LICENSENOTNEEDED               LicenseRejectionReason = 6
	LicenseRejectionReason_LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING      LicenseRejectionReason = 7
	LicenseRejectionReason_LICENSE_REJECTION_REASON_SHARESPLITSDIFFER              LicenseRejectionReason = 8
	LicenseRejectionReason_LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN             LicenseRejectionReason = 9
	LicenseRejectionReason_LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES          LicenseRejectionReason = 10
	LicenseRejectionReason_LICENSE_REJECTION_REASON_WRONGADDRESSEE                 LicenseRejectionReason = 11
	LicenseRejectionReason_LICENSE_REJECTION_REASON_USERDEFINED                    LicenseRejectionReason = 12
)

// Enum value maps for LicenseRejectionReason.
var (
	LicenseRejectionReason_name = map[int32]string{
		0:  "LICENSE_REJECTION_REASON_UNSPECIFIED",
		1:  "LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES",
		2:  "LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE",
		3:  "LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER",
		4:  "LICENSE_REJECTION_REASON_LICENSEBLOCKED",
		5:  "LICENSE_REJECTION_REASON_LICENSEEXISTS",
		6:  "LICENSE_REJECTION_REASON_LICENSENOTNEEDED",
		7:  "LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING",
		8:  "LICENSE_REJECTION_REASON_SHARESPLITSDIFFER",
		9:  "LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN",
		10: "LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES",
		11: "LICENSE_REJECTION_REASON_WRONGADDRESSEE",
		12: "LICENSE_REJECTION_REASON_USERDEFINED",
	}
	LicenseRejectionReason_value = map[string]int32{
		"LICENSE_REJECTION_REASON_UNSPECIFIED":                    0,
		"LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES":      1,
		"LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE": 2,
		"LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER":  3,
		"LICENSE_REJECTION_REASON_LICENSEBLOCKED":                 4,
		"LICENSE_REJECTION_REASON_LICENSEEXISTS":                  5,
		"LICENSE_REJECTION_REASON_LICENSENOTNEEDED":               6,
		"LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING":      7,
		"LICENSE_REJECTION_REASON_SHARESPLITSDIFFER":              8,
		"LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN":             9,
		"LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES":          10,
		"LICENSE_REJECTION_REASON_WRONGADDRESSEE":                 11,
		"LICENSE_REJECTION_REASON_USERDEFINED":                    12,
	}
)

func (x LicenseRejectionReason) Enum() *LicenseRejectionReason {
	p := new(LicenseRejectionReason)
	*p = x
	return p
}

func (x LicenseRejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseRejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[114].Descriptor()
}

func (LicenseRejectionReason) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[114]
}

func (x LicenseRejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseRejectionReason.Descriptor instead.
func (LicenseRejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{114}
}

type LinkAcknowledgementStatus int32

const (
	LinkAcknowledgementStatus_LINK_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED  LinkAcknowledgementStatus = 0
	LinkAcknowledgementStatus_LINK_ACKNOWLEDGEMENT_STATUS_ACCEPTED     LinkAcknowledgementStatus = 1
	LinkAcknowledgementStatus_LINK_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED LinkAcknowledgementStatus = 2
	LinkAcknowledgementStatus_LINK_ACKNOWLEDGEMENT_STATUS_CONFLICT     LinkAcknowledgementStatus = 3
	LinkAcknowledgementStatus_LINK_ACKNOWLEDGEMENT_STATUS_USERDEFINED  LinkAcknowledgementStatus = 4
)

// Enum value maps for LinkAcknowledgementStatus.
var (
	LinkAcknowledgementStatus_name = map[int32]string{
		0: "LINK_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED",
		1: "LINK_ACKNOWLEDGEMENT_STATUS_ACCEPTED",
		2: "LINK_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED",
		3: "LINK_ACKNOWLEDGEMENT_STATUS_CONFLICT",
		4: "LINK_ACKNOWLEDGEMENT_STATUS_USERDEFINED",
	}
	LinkAcknowledgementStatus_value = map[string]int32{
		"LINK_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED":  0,
		"LINK_ACKNOWLEDGEMENT_STATUS_ACCEPTED":     1,
		"LINK_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED": 2,
		"LINK_ACKNOWLEDGEMENT_STATUS_CONFLICT":     3,
		"LINK_ACKNOWLEDGEMENT_STATUS_USERDEFINED":  4,
	}
)

func (x LinkAcknowledgementStatus) Enum() *LinkAcknowledgementStatus {
	p := new(LinkAcknowledgementStatus)
	*p = x
	return p
}

func (x LinkAcknowledgementStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkAcknowledgementStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[115].Descriptor()
}

func (LinkAcknowledgementStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[115]
}

func (x LinkAcknowledgementStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkAcknowledgementStatus.Descriptor instead.
func (LinkAcknowledgementStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{115}
}

type LinkDescription int32

const (
	LinkDescription_LINK_DESCRIPTION_UNSPECIFIED        LinkDescription = 0
	LinkDescription_LINK_DESCRIPTION_BOOKLET            LinkDescription = 1
	LinkDescription_LINK_DESCRIPTION_CAPTION            LinkDescription = 2
	LinkDescription_LINK_DESCRIPTION_CHAPTERIMAGE       LinkDescription = 3
	LinkDescription_LINK_DESCRIPTION_COVERART           LinkDescription = 4
	LinkDescription_LINK_DESCRIPTION_LYRICS             LinkDescription = 5
	LinkDescription_LINK_DESCRIPTION_SUBTITLE           LinkDescription = 6
	LinkDescription_LINK_DESCRIPTION_VIDEOSCREENCAPTURE LinkDescription = 7
	LinkDescription_LINK_DESCRIPTION_USERDEFINED        LinkDescription = 8
)

// Enum value maps for LinkDescription.
var (
	LinkDescription_name = map[int32]string{
		0: "LINK_DESCRIPTION_UNSPECIFIED",
		1: "LINK_DESCRIPTION_BOOKLET",
		2: "LINK_DESCRIPTION_CAPTION",
		3: "LINK_DESCRIPTION_CHAPTERIMAGE",
		4: "LINK_DESCRIPTION_COVERART",
		5: "LINK_DESCRIPTION_LYRICS",
		6: "LINK_DESCRIPTION_SUBTITLE",
		7: "LINK_DESCRIPTION_VIDEOSCREENCAPTURE",
		8: "LINK_DESCRIPTION_USERDEFINED",
	}
	LinkDescription_value = map[string]int32{
		"LINK_DESCRIPTION_UNSPECIFIED":        0,
		"LINK_DESCRIPTION_BOOKLET":            1,
		"LINK_DESCRIPTION_CAPTION":            2,
		"LINK_DESCRIPTION_CHAPTERIMAGE":       3,
		"LINK_DESCRIPTION_COVERART":           4,
		"LINK_DESCRIPTION_LYRICS":             5,
		"LINK_DESCRIPTION_SUBTITLE":           6,
		"LINK_DESCRIPTION_VIDEOSCREENCAPTURE": 7,
		"LINK_DESCRIPTION_USERDEFINED":        8,
	}
)

func (x LinkDescription) Enum() *LinkDescription {
	p := new(LinkDescription)
	*p = x
	return p
}

func (x LinkDescription) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkDescription) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[116].Descriptor()
}

func (LinkDescription) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[116]
}

func (x LinkDescription) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkDescription.Descriptor instead.
func (LinkDescription) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{116}
}

type LyricsType int32

const (
	LyricsType_LYRICS_TYPE_UNSPECIFIED     LyricsType = 0
	LyricsType_LYRICS_TYPE_CHORUS          LyricsType = 1
	LyricsType_LYRICS_TYPE_CHORUSANDVERSE  LyricsType = 2
	LyricsType_LYRICS_TYPE_COMPLETE        LyricsType = 3
	LyricsType_LYRICS_TYPE_FIRSTLINEOFTEXT LyricsType = 4
	LyricsType_LYRICS_TYPE_HOOK            LyricsType = 5
	LyricsType_LYRICS_TYPE_JAZZSCATS       LyricsType = 6
	LyricsType_LYRICS_TYPE_STANZA          LyricsType = 7
	LyricsType_LYRICS_TYPE_UNKNOWN         LyricsType = 8
	LyricsType_LYRICS_TYPE_USERDEFINED     LyricsType = 9
	LyricsType_LYRICS_TYPE_VERSE           LyricsType = 10
)

// Enum value maps for LyricsType.
var (
	LyricsType_name = map[int32]string{
		0:  "LYRICS_TYPE_UNSPECIFIED",
		1:  "LYRICS_TYPE_CHORUS",
		2:  "LYRICS_TYPE_CHORUSANDVERSE",
		3:  "LYRICS_TYPE_COMPLETE",
		4:  "LYRICS_TYPE_FIRSTLINEOFTEXT",
		5:  "LYRICS_TYPE_HOOK",
		6:  "LYRICS_TYPE_JAZZSCATS",
		7:  "LYRICS_TYPE_STANZA",
		8:  "LYRICS_TYPE_UNKNOWN",
		9:  "LYRICS_TYPE_USERDEFINED",
		10: "LYRICS_TYPE_VERSE",
	}
	LyricsType_value = map[string]int32{
		"LYRICS_TYPE_UNSPECIFIED":     0,
		"LYRICS_TYPE_CHORUS":          1,
		"LYRICS_TYPE_CHORUSANDVERSE":  2,
		"LYRICS_TYPE_COMPLETE":        3,
		"LYRICS_TYPE_FIRSTLINEOFTEXT": 4,
		"LYRICS_TYPE_HOOK":            5,
		"LYRICS_TYPE_JAZZSCATS":       6,
		"LYRICS_TYPE_STANZA":          7,
		"LYRICS_TYPE_UNKNOWN":         8,
		"LYRICS_TYPE_USERDEFINED":     9,
		"LYRICS_TYPE_VERSE":           10,
	}
)

func (x LyricsType) Enum() *LyricsType {
	p := new(LyricsType)
	*p = x
	return p
}

func (x LyricsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LyricsType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[117].Descriptor()
}

func (LyricsType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[117]
}

func (x LyricsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LyricsType.Descriptor instead.
func (LyricsType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{117}
}

type MeasurementType int32

const (
	MeasurementType_MEASUREMENT_TYPE_UNSPECIFIED        MeasurementType = 0
	MeasurementType_MEASUREMENT_TYPE_BOTHAUDIOANDVIDEO  MeasurementType = 1
	MeasurementType_MEASUREMENT_TYPE_EITHERAUDIOORVIDEO MeasurementType = 2
	MeasurementType_MEASUREMENT_TYPE_AUDIO              MeasurementType = 3
	MeasurementType_MEASUREMENT_TYPE_VIDEO              MeasurementType = 4
)

// Enum value maps for MeasurementType.
var (
	MeasurementType_name = map[int32]string{
		0: "MEASUREMENT_TYPE_UNSPECIFIED",
		1: "MEASUREMENT_TYPE_BOTHAUDIOANDVIDEO",
		2: "MEASUREMENT_TYPE_EITHERAUDIOORVIDEO",
		3: "MEASUREMENT_TYPE_AUDIO",
		4: "MEASUREMENT_TYPE_VIDEO",
	}
	MeasurementType_value = map[string]int32{
		"MEASUREMENT_TYPE_UNSPECIFIED":        0,
		"MEASUREMENT_TYPE_BOTHAUDIOANDVIDEO":  1,
		"MEASUREMENT_TYPE_EITHERAUDIOORVIDEO": 2,
		"MEASUREMENT_TYPE_AUDIO":              3,
		"MEASUREMENT_TYPE_VIDEO":              4,
	}
)

func (x MeasurementType) Enum() *MeasurementType {
	p := new(MeasurementType)
	*p = x
	return p
}

func (x MeasurementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasurementType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[118].Descriptor()
}

func (MeasurementType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[118]
}

func (x MeasurementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasurementType.Descriptor instead.
func (MeasurementType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{118}
}

type MembershipType int32

const (
	MembershipType_MEMBERSHIP_TYPE_UNSPECIFIED     MembershipType = 0
	MembershipType_MEMBERSHIP_TYPE_NATIONALMEMBER  MembershipType = 1
	MembershipType_MEMBERSHIP_TYPE_REGIONALMEMBER  MembershipType = 2
	MembershipType_MEMBERSHIP_TYPE_WORLDWIDEMEMBER MembershipType = 3
)

// Enum value maps for MembershipType.
var (
	MembershipType_name = map[int32]string{
		0: "MEMBERSHIP_TYPE_UNSPECIFIED",
		1: "MEMBERSHIP_TYPE_NATIONALMEMBER",
		2: "MEMBERSHIP_TYPE_REGIONALMEMBER",
		3: "MEMBERSHIP_TYPE_WORLDWIDEMEMBER",
	}
	MembershipType_value = map[string]int32{
		"MEMBERSHIP_TYPE_UNSPECIFIED":     0,
		"MEMBERSHIP_TYPE_NATIONALMEMBER":  1,
		"MEMBERSHIP_TYPE_REGIONALMEMBER":  2,
		"MEMBERSHIP_TYPE_WORLDWIDEMEMBER": 3,
	}
)

func (x MembershipType) Enum() *MembershipType {
	p := new(MembershipType)
	*p = x
	return p
}

func (x MembershipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[119].Descriptor()
}

func (MembershipType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[119]
}

func (x MembershipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipType.Descriptor instead.
func (MembershipType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{119}
}

type MessageActionType int32

const (
	MessageActionType_MESSAGE_ACTION_TYPE_UNSPECIFIED          MessageActionType = 0
	MessageActionType_MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY  MessageActionType = 1
	MessageActionType_MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY MessageActionType = 2
	MessageActionType_MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY   MessageActionType = 3
	MessageActionType_MESSAGE_ACTION_TYPE_REDELIVERY           MessageActionType = 4
	MessageActionType_MESSAGE_ACTION_TYPE_TAKEDOWN             MessageActionType = 5
	MessageActionType_MESSAGE_ACTION_TYPE_USERDEFINED          MessageActionType = 6
)

// Enum value maps for MessageActionType.
var (
	MessageActionType_name = map[int32]string{
		0: "MESSAGE_ACTION_TYPE_UNSPECIFIED",
		1: "MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY",
		2: "MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY",
		3: "MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY",
		4: "MESSAGE_ACTION_TYPE_REDELIVERY",
		5: "MESSAGE_ACTION_TYPE_TAKEDOWN",
		6: "MESSAGE_ACTION_TYPE_USERDEFINED",
	}
	MessageActionType_value = map[string]int32{
		"MESSAGE_ACTION_TYPE_UNSPECIFIED":          0,
		"MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY":  1,
		"MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY": 2,
		"MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY":   3,
		"MESSAGE_ACTION_TYPE_REDELIVERY":           4,
		"MESSAGE_ACTION_TYPE_TAKEDOWN":             5,
		"MESSAGE_ACTION_TYPE_USERDEFINED":          6,
	}
)

func (x MessageActionType) Enum() *MessageActionType {
	p := new(MessageActionType)
	*p = x
	return p
}

func (x MessageActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[120].Descriptor()
}

func (MessageActionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[120]
}

func (x MessageActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageActionType.Descriptor instead.
func (MessageActionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{120}
}

type MessageControlType int32

const (
	MessageControlType_MESSAGE_CONTROL_TYPE_UNSPECIFIED MessageControlType = 0
	MessageControlType_MESSAGE_CONTROL_TYPE_LIVEMESSAGE MessageControlType = 1
	MessageControlType_MESSAGE_CONTROL_TYPE_TESTMESSAGE MessageControlType = 2
)

// Enum value maps for MessageControlType.
var (
	MessageControlType_name = map[int32]string{
		0: "MESSAGE_CONTROL_TYPE_UNSPECIFIED",
		1: "MESSAGE_CONTROL_TYPE_LIVEMESSAGE",
		2: "MESSAGE_CONTROL_TYPE_TESTMESSAGE",
	}
	MessageControlType_value = map[string]int32{
		"MESSAGE_CONTROL_TYPE_UNSPECIFIED": 0,
		"MESSAGE_CONTROL_TYPE_LIVEMESSAGE": 1,
		"MESSAGE_CONTROL_TYPE_TESTMESSAGE": 2,
	}
)

func (x MessageControlType) Enum() *MessageControlType {
	p := new(MessageControlType)
	*p = x
	return p
}

func (x MessageControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[121].Descriptor()
}

func (MessageControlType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[121]
}

func (x MessageControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageControlType.Descriptor instead.
func (MessageControlType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{121}
}

type MessagePurpose int32

const (
	MessagePurpose_MESSAGE_PURPOSE_UNSPECIFIED     MessagePurpose = 0
	MessagePurpose_MESSAGE_PURPOSE_LICENSE         MessagePurpose = 1
	MessagePurpose_MESSAGE_PURPOSE_NDMALICENSE     MessagePurpose = 2
	MessagePurpose_MESSAGE_PURPOSE_ACKNOWLEDGEMENT MessagePurpose = 3
)

// Enum value maps for MessagePurpose.
var (
	MessagePurpose_name = map[int32]string{
		0: "MESSAGE_PURPOSE_UNSPECIFIED",
		1: "MESSAGE_PURPOSE_LICENSE",
		2: "MESSAGE_PURPOSE_NDMALICENSE",
		3: "MESSAGE_PURPOSE_ACKNOWLEDGEMENT",
	}
	MessagePurpose_value = map[string]int32{
		"MESSAGE_PURPOSE_UNSPECIFIED":     0,
		"MESSAGE_PURPOSE_LICENSE":         1,
		"MESSAGE_PURPOSE_NDMALICENSE":     2,
		"MESSAGE_PURPOSE_ACKNOWLEDGEMENT": 3,
	}
)

func (x MessagePurpose) Enum() *MessagePurpose {
	p := new(MessagePurpose)
	*p = x
	return p
}

func (x MessagePurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagePurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[122].Descriptor()
}

func (MessagePurpose) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[122]
}

func (x MessagePurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessagePurpose.Descriptor instead.
func (MessagePurpose) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{122}
}

type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED                               MessageType = 0
	MessageType_MESSAGE_TYPE_LICENSEMESSAGE                            MessageType = 1
	MessageType_MESSAGE_TYPE_LICENSEREQUESTMESSAGE                     MessageType = 2
	MessageType_MESSAGE_TYPE_LICENSEREVOCATIONMESSAGE                  MessageType = 3
	MessageType_MESSAGE_TYPE_LODCONFIRMATIONMESSAGE                    MessageType = 4
	MessageType_MESSAGE_TYPE_LODMESSAGE                                MessageType = 5
	MessageType_MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE       MessageType = 6
	MessageType_MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE            MessageType = 7
	MessageType_MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONRECALLMESSAGE MessageType = 8
	MessageType_MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTRECALLMESSAGE      MessageType = 9
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "MESSAGE_TYPE_LICENSEMESSAGE",
		2: "MESSAGE_TYPE_LICENSEREQUESTMESSAGE",
		3: "MESSAGE_TYPE_LICENSEREVOCATIONMESSAGE",
		4: "MESSAGE_TYPE_LODCONFIRMATIONMESSAGE",
		5: "MESSAGE_TYPE_LODMESSAGE",
		6: "MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE",
		7: "MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE",
		8: "MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONRECALLMESSAGE",
		9: "MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTRECALLMESSAGE",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED":                               0,
		"MESSAGE_TYPE_LICENSEMESSAGE":                            1,
		"MESSAGE_TYPE_LICENSEREQUESTMESSAGE":                     2,
		"MESSAGE_TYPE_LICENSEREVOCATIONMESSAGE":                  3,
		"MESSAGE_TYPE_LODCONFIRMATIONMESSAGE":                    4,
		"MESSAGE_TYPE_LODMESSAGE":                                5,
		"MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE":       6,
		"MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE":            7,
		"MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONRECALLMESSAGE": 8,
		"MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTRECALLMESSAGE":      9,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[123].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[123]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{123}
}

type MissingLinkReason int32

const (
	MissingLinkReason_MISSING_LINK_REASON_UNSPECIFIED  MissingLinkReason = 0
	MissingLinkReason_MISSING_LINK_REASON_NOLINKFOUND  MissingLinkReason = 1
	MissingLinkReason_MISSING_LINK_REASON_NOMATCHFOUND MissingLinkReason = 2
	MissingLinkReason_MISSING_LINK_REASON_USERDEFINED  MissingLinkReason = 3
)

// Enum value maps for MissingLinkReason.
var (
	MissingLinkReason_name = map[int32]string{
		0: "MISSING_LINK_REASON_UNSPECIFIED",
		1: "MISSING_LINK_REASON_NOLINKFOUND",
		2: "MISSING_LINK_REASON_NOMATCHFOUND",
		3: "MISSING_LINK_REASON_USERDEFINED",
	}
	MissingLinkReason_value = map[string]int32{
		"MISSING_LINK_REASON_UNSPECIFIED":  0,
		"MISSING_LINK_REASON_NOLINKFOUND":  1,
		"MISSING_LINK_REASON_NOMATCHFOUND": 2,
		"MISSING_LINK_REASON_USERDEFINED":  3,
	}
)

func (x MissingLinkReason) Enum() *MissingLinkReason {
	p := new(MissingLinkReason)
	*p = x
	return p
}

func (x MissingLinkReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissingLinkReason) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[124].Descriptor()
}

func (MissingLinkReason) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[124]
}

func (x MissingLinkReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MissingLinkReason.Descriptor instead.
func (MissingLinkReason) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{124}
}

type MoodOrThemeType int32

const (
	MoodOrThemeType_MOOD_OR_THEME_TYPE_UNSPECIFIED     MoodOrThemeType = 0
	MoodOrThemeType_MOOD_OR_THEME_TYPE_LYRICS          MoodOrThemeType = 1
	MoodOrThemeType_MOOD_OR_THEME_TYPE_LYRICSANDMELODY MoodOrThemeType = 2
	MoodOrThemeType_MOOD_OR_THEME_TYPE_MELODY          MoodOrThemeType = 3
)

// Enum value maps for MoodOrThemeType.
var (
	MoodOrThemeType_name = map[int32]string{
		0: "MOOD_OR_THEME_TYPE_UNSPECIFIED",
		1: "MOOD_OR_THEME_TYPE_LYRICS",
		2: "MOOD_OR_THEME_TYPE_LYRICSANDMELODY",
		3: "MOOD_OR_THEME_TYPE_MELODY",
	}
	MoodOrThemeType_value = map[string]int32{
		"MOOD_OR_THEME_TYPE_UNSPECIFIED":     0,
		"MOOD_OR_THEME_TYPE_LYRICS":          1,
		"MOOD_OR_THEME_TYPE_LYRICSANDMELODY": 2,
		"MOOD_OR_THEME_TYPE_MELODY":          3,
	}
)

func (x MoodOrThemeType) Enum() *MoodOrThemeType {
	p := new(MoodOrThemeType)
	*p = x
	return p
}

func (x MoodOrThemeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoodOrThemeType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[125].Descriptor()
}

func (MoodOrThemeType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[125]
}

func (x MoodOrThemeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MoodOrThemeType.Descriptor instead.
func (MoodOrThemeType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{125}
}

type MusicalWorkContributorRole int32

const (
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED                  MusicalWorkContributorRole = 0
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER                      MusicalWorkContributorRole = 1
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT                    MusicalWorkContributorRole = 2
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER                     MusicalWorkContributorRole = 3
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR                       MusicalWorkContributorRole = 4
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS           MusicalWorkContributorRole = 5
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD            MusicalWorkContributorRole = 6
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER                     MusicalWorkContributorRole = 7
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER                     MusicalWorkContributorRole = 8
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST             MusicalWorkContributorRole = 9
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR                    MusicalWorkContributorRole = 10
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR                      MusicalWorkContributorRole = 11
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR               MusicalWorkContributorRole = 12
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT                   MusicalWorkContributorRole = 13
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER                     MusicalWorkContributorRole = 14
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER                       MusicalWorkContributorRole = 15
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST                   MusicalWorkContributorRole = 16
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT           MusicalWorkContributorRole = 17
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST                   MusicalWorkContributorRole = 18
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER                 MusicalWorkContributorRole = 19
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST                     MusicalWorkContributorRole = 20
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER                MusicalWorkContributorRole = 21
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR               MusicalWorkContributorRole = 22
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER                   MusicalWorkContributorRole = 23
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT                   MusicalWorkContributorRole = 24
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER                     MusicalWorkContributorRole = 25
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER                     MusicalWorkContributorRole = 26
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR                   MusicalWorkContributorRole = 27
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR             MusicalWorkContributorRole = 28
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR                     MusicalWorkContributorRole = 29
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER                  MusicalWorkContributorRole = 30
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST                  MusicalWorkContributorRole = 31
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR                   MusicalWorkContributorRole = 32
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER                   MusicalWorkContributorRole = 33
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER                 MusicalWorkContributorRole = 34
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL MusicalWorkContributorRole = 35
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER                MusicalWorkContributorRole = 36
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT            MusicalWorkContributorRole = 37
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER              MusicalWorkContributorRole = 38
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER               MusicalWorkContributorRole = 39
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER           MusicalWorkContributorRole = 40
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER            MusicalWorkContributorRole = 41
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER          MusicalWorkContributorRole = 42
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER                 MusicalWorkContributorRole = 43
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER         MusicalWorkContributorRole = 44
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN                      MusicalWorkContributorRole = 45
	MusicalWorkContributorRole_MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED                  MusicalWorkContributorRole = 46
)

// Enum value maps for MusicalWorkContributorRole.
var (
	MusicalWorkContributorRole_name = map[int32]string{
		0:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED",
		1:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER",
		2:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT",
		3:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER",
		4:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR",
		5:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS",
		6:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD",
		7:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER",
		8:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER",
		9:  "MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST",
		10: "MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR",
		11: "MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR",
		12: "MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR",
		13: "MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT",
		14: "MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER",
		15: "MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER",
		16: "MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST",
		17: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT",
		18: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST",
		19: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER",
		20: "MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST",
		21: "MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER",
		22: "MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR",
		23: "MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER",
		24: "MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT",
		25: "MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER",
		26: "MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER",
		27: "MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR",
		28: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR",
		29: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR",
		30: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER",
		31: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST",
		32: "MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR",
		33: "MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER",
		34: "MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER",
		35: "MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL",
		36: "MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER",
		37: "MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT",
		38: "MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER",
		39: "MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER",
		40: "MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER",
		41: "MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER",
		42: "MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER",
		43: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER",
		44: "MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER",
		45: "MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN",
		46: "MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED",
	}
	MusicalWorkContributorRole_value = map[string]int32{
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED":                  0,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER":                      1,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT":                    2,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER":                     3,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR":                       4,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS":           5,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD":            6,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER":                     7,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER":                     8,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST":             9,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR":                    10,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR":                      11,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR":               12,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT":                   13,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER":                     14,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER":                       15,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST":                   16,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT":           17,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST":                   18,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER":                 19,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST":                     20,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER":                21,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR":               22,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER":                   23,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT":                   24,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER":                     25,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER":                     26,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR":                   27,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR":             28,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR":                     29,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER":                  30,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST":                  31,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR":                   32,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER":                   33,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER":                 34,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL": 35,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER":                36,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT":            37,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER":              38,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER":               39,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER":           40,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER":            41,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER":          42,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER":                 43,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER":         44,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN":                      45,
		"MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED":                  46,
	}
)

func (x MusicalWorkContributorRole) Enum() *MusicalWorkContributorRole {
	p := new(MusicalWorkContributorRole)
	*p = x
	return p
}

func (x MusicalWorkContributorRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MusicalWorkContributorRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[126].Descriptor()
}

func (MusicalWorkContributorRole) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[126]
}

func (x MusicalWorkContributorRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MusicalWorkContributorRole.Descriptor instead.
func (MusicalWorkContributorRole) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{126}
}

type MusicalWorkType int32

const (
	MusicalWorkType_MUSICAL_WORK_TYPE_UNSPECIFIED                   MusicalWorkType = 0
	MusicalWorkType_MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE     MusicalWorkType = 1
	MusicalWorkType_MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK       MusicalWorkType = 2
	MusicalWorkType_MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS          MusicalWorkType = 3
	MusicalWorkType_MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC          MusicalWorkType = 4
	MusicalWorkType_MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK          MusicalWorkType = 5
	MusicalWorkType_MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK          MusicalWorkType = 6
	MusicalWorkType_MUSICAL_WORK_TYPE_FILMPRODUCTIONWORK            MusicalWorkType = 7
	MusicalWorkType_MUSICAL_WORK_TYPE_JINGLE                        MusicalWorkType = 8
	MusicalWorkType_MUSICAL_WORK_TYPE_LYRICREMOVAL                  MusicalWorkType = 9
	MusicalWorkType_MUSICAL_WORK_TYPE_LYRICREPLACEMENT              MusicalWorkType = 10
	MusicalWorkType_MUSICAL_WORK_TYPE_LYRICTRANSLATION              MusicalWorkType = 11
	MusicalWorkType_MUSICAL_WORK_TYPE_MASHUP                        MusicalWorkType = 12
	MusicalWorkType_MUSICAL_WORK_TYPE_MEDLEY                        MusicalWorkType = 13
	MusicalWorkType_MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK      MusicalWorkType = 14
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT           MusicalWorkType = 15
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES        MusicalWorkType = 16
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICARRANGEMENT              MusicalWorkType = 17
	MusicalWorkType_MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT        MusicalWorkType = 18
	MusicalWorkType_MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT     MusicalWorkType = 19
	MusicalWorkType_MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION       MusicalWorkType = 20
	MusicalWorkType_MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK           MusicalWorkType = 21
	MusicalWorkType_MUSICAL_WORK_TYPE_POTPOURRI                     MusicalWorkType = 22
	MusicalWorkType_MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK    MusicalWorkType = 23
	MusicalWorkType_MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK           MusicalWorkType = 24
	MusicalWorkType_MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK         MusicalWorkType = 25
	MusicalWorkType_MUSICAL_WORK_TYPE_TVPRODUCTIONWORK              MusicalWorkType = 26
	MusicalWorkType_MUSICAL_WORK_TYPE_UNKNOWN                       MusicalWorkType = 27
	MusicalWorkType_MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT        MusicalWorkType = 28
	MusicalWorkType_MUSICAL_WORK_TYPE_UNSPECIFIEDLYRICADAPTATION    MusicalWorkType = 29
	MusicalWorkType_MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT MusicalWorkType = 30
	MusicalWorkType_MUSICAL_WORK_TYPE_USERDEFINED                   MusicalWorkType = 31
	MusicalWorkType_MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK           MusicalWorkType = 32
)

// Enum value maps for MusicalWorkType.
var (
	MusicalWorkType_name = map[int32]string{
		0:  "MUSICAL_WORK_TYPE_UNSPECIFIED",
		1:  "MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE",
		2:  "MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK",
		3:  "MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS",
		4:  "MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC",
		5:  "MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK",
		6:  "MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK",
		7:  "MUSICAL_WORK_TYPE_FILMPRODUCTIONWORK",
		8:  "MUSICAL_WORK_TYPE_JINGLE",
		9:  "MUSICAL_WORK_TYPE_LYRICREMOVAL",
		10: "MUSICAL_WORK_TYPE_LYRICREPLACEMENT",
		11: "MUSICAL_WORK_TYPE_LYRICTRANSLATION",
		12: "MUSICAL_WORK_TYPE_MASHUP",
		13: "MUSICAL_WORK_TYPE_MEDLEY",
		14: "MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK",
		15: "MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT",
		16: "MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES",
		17: "MUSICAL_WORK_TYPE_MUSICARRANGEMENT",
		18: "MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT",
		19: "MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT",
		20: "MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION",
		21: "MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK",
		22: "MUSICAL_WORK_TYPE_POTPOURRI",
		23: "MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK",
		24: "MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK",
		25: "MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK",
		26: "MUSICAL_WORK_TYPE_TVPRODUCTIONWORK",
		27: "MUSICAL_WORK_TYPE_UNKNOWN",
		28: "MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT",
		29: "MUSICAL_WORK_TYPE_UNSPECIFIEDLYRICADAPTATION",
		30: "MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT",
		31: "MUSICAL_WORK_TYPE_USERDEFINED",
		32: "MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK",
	}
	MusicalWorkType_value = map[string]int32{
		"MUSICAL_WORK_TYPE_UNSPECIFIED":                   0,
		"MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE":     1,
		"MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK":       2,
		"MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS":          3,
		"MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC":          4,
		"MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK":          5,
		"MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK":          6,
		"MUSICAL_WORK_TYPE_FILMPRODUCTIONWORK":            7,
		"MUSICAL_WORK_TYPE_JINGLE":                        8,
		"MUSICAL_WORK_TYPE_LYRICREMOVAL":                  9,
		"MUSICAL_WORK_TYPE_LYRICREPLACEMENT":              10,
		"MUSICAL_WORK_TYPE_LYRICTRANSLATION":              11,
		"MUSICAL_WORK_TYPE_MASHUP":                        12,
		"MUSICAL_WORK_TYPE_MEDLEY":                        13,
		"MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK":      14,
		"MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT":           15,
		"MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES":        16,
		"MUSICAL_WORK_TYPE_MUSICARRANGEMENT":              17,
		"MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT":        18,
		"MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT":     19,
		"MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION":       20,
		"MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK":           21,
		"MUSICAL_WORK_TYPE_POTPOURRI":                     22,
		"MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK":    23,
		"MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK":           24,
		"MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK":         25,
		"MUSICAL_WORK_TYPE_TVPRODUCTIONWORK":              26,
		"MUSICAL_WORK_TYPE_UNKNOWN":                       27,
		"MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT":        28,
		"MUSICAL_WORK_TYPE_UNSPECIFIEDLYRICADAPTATION":    29,
		"MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT": 30,
		"MUSICAL_WORK_TYPE_USERDEFINED":                   31,
		"MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK":           32,
	}
)

func (x MusicalWorkType) Enum() *MusicalWorkType {
	p := new(MusicalWorkType)
	*p = x
	return p
}

func (x MusicalWorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MusicalWorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[127].Descriptor()
}

func (MusicalWorkType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[127]
}

func (x MusicalWorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MusicalWorkType.Descriptor instead.
func (MusicalWorkType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{127}
}

type MwnlFileStatus int32

const (
	MwnlFileStatus_MWNL_FILE_STATUS_UNSPECIFIED MwnlFileStatus = 0
	MwnlFileStatus_MWNL_FILE_STATUS_FILEOK      MwnlFileStatus = 1
	MwnlFileStatus_MWNL_FILE_STATUS_USERDEFINED MwnlFileStatus = 2
)

// Enum value maps for MwnlFileStatus.
var (
	MwnlFileStatus_name = map[int32]string{
		0: "MWNL_FILE_STATUS_UNSPECIFIED",
		1: "MWNL_FILE_STATUS_FILEOK",
		2: "MWNL_FILE_STATUS_USERDEFINED",
	}
	MwnlFileStatus_value = map[string]int32{
		"MWNL_FILE_STATUS_UNSPECIFIED": 0,
		"MWNL_FILE_STATUS_FILEOK":      1,
		"MWNL_FILE_STATUS_USERDEFINED": 2,
	}
)

func (x MwnlFileStatus) Enum() *MwnlFileStatus {
	p := new(MwnlFileStatus)
	*p = x
	return p
}

func (x MwnlFileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MwnlFileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[128].Descriptor()
}

func (MwnlFileStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[128]
}

func (x MwnlFileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MwnlFileStatus.Descriptor instead.
func (MwnlFileStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{128}
}

type MwnlProposedActionType int32

const (
	MwnlProposedActionType_MWNL_PROPOSED_ACTION_TYPE_UNSPECIFIED MwnlProposedActionType = 0
	MwnlProposedActionType_MWNL_PROPOSED_ACTION_TYPE_RESUBMIT    MwnlProposedActionType = 1
	MwnlProposedActionType_MWNL_PROPOSED_ACTION_TYPE_USERDEFINED MwnlProposedActionType = 2
)

// Enum value maps for MwnlProposedActionType.
var (
	MwnlProposedActionType_name = map[int32]string{
		0: "MWNL_PROPOSED_ACTION_TYPE_UNSPECIFIED",
		1: "MWNL_PROPOSED_ACTION_TYPE_RESUBMIT",
		2: "MWNL_PROPOSED_ACTION_TYPE_USERDEFINED",
	}
	MwnlProposedActionType_value = map[string]int32{
		"MWNL_PROPOSED_ACTION_TYPE_UNSPECIFIED": 0,
		"MWNL_PROPOSED_ACTION_TYPE_RESUBMIT":    1,
		"MWNL_PROPOSED_ACTION_TYPE_USERDEFINED": 2,
	}
)

func (x MwnlProposedActionType) Enum() *MwnlProposedActionType {
	p := new(MwnlProposedActionType)
	*p = x
	return p
}

func (x MwnlProposedActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MwnlProposedActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[129].Descriptor()
}

func (MwnlProposedActionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[129]
}

func (x MwnlProposedActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MwnlProposedActionType.Descriptor instead.
func (MwnlProposedActionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{129}
}

type NewStudioRole int32

const (
	NewStudioRole_NEW_STUDIO_ROLE_UNSPECIFIED                        NewStudioRole = 0
	NewStudioRole_NEW_STUDIO_ROLE_ADDITIONALENGINEER                 NewStudioRole = 1
	NewStudioRole_NEW_STUDIO_ROLE_ANIMALTRAINER                      NewStudioRole = 2
	NewStudioRole_NEW_STUDIO_ROLE_ANIMATOR                           NewStudioRole = 3
	NewStudioRole_NEW_STUDIO_ROLE_ANNOTATOR                          NewStudioRole = 4
	NewStudioRole_NEW_STUDIO_ROLE_AANDRCOORDINATOR                   NewStudioRole = 5
	NewStudioRole_NEW_STUDIO_ROLE_ARMOURER                           NewStudioRole = 6
	NewStudioRole_NEW_STUDIO_ROLE_ARTDIRECTOR                        NewStudioRole = 7
	NewStudioRole_NEW_STUDIO_ROLE_ARTISTBACKGROUNDVOCALENGINEER      NewStudioRole = 8
	NewStudioRole_NEW_STUDIO_ROLE_ARTISTVOCALENGINEER                NewStudioRole = 9
	NewStudioRole_NEW_STUDIO_ROLE_ARTISTVOCALSECONDENGINEER          NewStudioRole = 10
	NewStudioRole_NEW_STUDIO_ROLE_ASSISTANTCAMERAOPERATOR            NewStudioRole = 11
	NewStudioRole_NEW_STUDIO_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN   NewStudioRole = 12
	NewStudioRole_NEW_STUDIO_ROLE_ASSISTANTDIRECTOR                  NewStudioRole = 13
	NewStudioRole_NEW_STUDIO_ROLE_ASSISTANTPRODUCER                  NewStudioRole = 14
	NewStudioRole_NEW_STUDIO_ROLE_ASSISTANTVISUALEDITOR              NewStudioRole = 15
	NewStudioRole_NEW_STUDIO_ROLE_AURALTRAINER                       NewStudioRole = 16
	NewStudioRole_NEW_STUDIO_ROLE_BINDER                             NewStudioRole = 17
	NewStudioRole_NEW_STUDIO_ROLE_BINDINGDESIGNER                    NewStudioRole = 18
	NewStudioRole_NEW_STUDIO_ROLE_BOOKDESIGNER                       NewStudioRole = 19
	NewStudioRole_NEW_STUDIO_ROLE_BOOKJACKDESIGNER                   NewStudioRole = 20
	NewStudioRole_NEW_STUDIO_ROLE_BOOKPLATEDESIGNER                  NewStudioRole = 21
	NewStudioRole_NEW_STUDIO_ROLE_BOOKPRODUCER                       NewStudioRole = 22
	NewStudioRole_NEW_STUDIO_ROLE_BROADCASTASSISTANT                 NewStudioRole = 23
	NewStudioRole_NEW_STUDIO_ROLE_BROADCASTJOURNALIST                NewStudioRole = 24
	NewStudioRole_NEW_STUDIO_ROLE_CAMERAOPERATOR                     NewStudioRole = 25
	NewStudioRole_NEW_STUDIO_ROLE_CARPENTER                          NewStudioRole = 26
	NewStudioRole_NEW_STUDIO_ROLE_CASTINGDIRECTOR                    NewStudioRole = 27
	NewStudioRole_NEW_STUDIO_ROLE_CENSOR                             NewStudioRole = 28
	NewStudioRole_NEW_STUDIO_ROLE_CHIEFLIGHTINGTECHNICIAN            NewStudioRole = 29
	NewStudioRole_NEW_STUDIO_ROLE_CHOREOGRAPHER                      NewStudioRole = 30
	NewStudioRole_NEW_STUDIO_ROLE_CLAPPERLOADER                      NewStudioRole = 31
	NewStudioRole_NEW_STUDIO_ROLE_COEXECUTIVEPRODUCER                NewStudioRole = 32
	NewStudioRole_NEW_STUDIO_ROLE_COMMISSIONINGBROADCASTER           NewStudioRole = 33
	NewStudioRole_NEW_STUDIO_ROLE_COMPILATIONPRODUCER                NewStudioRole = 34
	NewStudioRole_NEW_STUDIO_ROLE_CONSULTANT                         NewStudioRole = 35
	NewStudioRole_NEW_STUDIO_ROLE_CONTINUITYCHECKER                  NewStudioRole = 36
	NewStudioRole_NEW_STUDIO_ROLE_CONTRACTOR                         NewStudioRole = 37
	NewStudioRole_NEW_STUDIO_ROLE_COPRODUCER                         NewStudioRole = 38
	NewStudioRole_NEW_STUDIO_ROLE_CORRESPONDENT                      NewStudioRole = 39
	NewStudioRole_NEW_STUDIO_ROLE_COSTUMEDESIGNER                    NewStudioRole = 40
	NewStudioRole_NEW_STUDIO_ROLE_COVERDESIGNER                      NewStudioRole = 41
	NewStudioRole_NEW_STUDIO_ROLE_DESIGNER                           NewStudioRole = 42
	NewStudioRole_NEW_STUDIO_ROLE_DIALOGUECOACH                      NewStudioRole = 43
	NewStudioRole_NEW_STUDIO_ROLE_DIGITALAUDIOWORKSTATIONENGINEER    NewStudioRole = 44
	NewStudioRole_NEW_STUDIO_ROLE_DIGITALEDITINGENGINEER             NewStudioRole = 45
	NewStudioRole_NEW_STUDIO_ROLE_DIGITALEDITINGSECONDENGINEER       NewStudioRole = 46
	NewStudioRole_NEW_STUDIO_ROLE_DIRECTOR                           NewStudioRole = 47
	NewStudioRole_NEW_STUDIO_ROLE_DIRECTSTREAMDIGITALENGINEER        NewStudioRole = 48
	NewStudioRole_NEW_STUDIO_ROLE_DISTRIBUTIONCOMPANY                NewStudioRole = 49
	NewStudioRole_NEW_STUDIO_ROLE_DRESSER                            NewStudioRole = 50
	NewStudioRole_NEW_STUDIO_ROLE_DUBBER                             NewStudioRole = 51
	NewStudioRole_NEW_STUDIO_ROLE_EDITOR                             NewStudioRole = 52
	NewStudioRole_NEW_STUDIO_ROLE_EDITORINCHIEF                      NewStudioRole = 53
	NewStudioRole_NEW_STUDIO_ROLE_EDITOROFTHEDAY                     NewStudioRole = 54
	NewStudioRole_NEW_STUDIO_ROLE_ENCODER                            NewStudioRole = 55
	NewStudioRole_NEW_STUDIO_ROLE_ENGINEER                           NewStudioRole = 56
	NewStudioRole_NEW_STUDIO_ROLE_EXECUTIVEPRODUCER                  NewStudioRole = 57
	NewStudioRole_NEW_STUDIO_ROLE_EXPERT                             NewStudioRole = 58
	NewStudioRole_NEW_STUDIO_ROLE_FIGHTDIRECTOR                      NewStudioRole = 59
	NewStudioRole_NEW_STUDIO_ROLE_FILMDIRECTOR                       NewStudioRole = 60
	NewStudioRole_NEW_STUDIO_ROLE_FILMDISTRIBUTOR                    NewStudioRole = 61
	NewStudioRole_NEW_STUDIO_ROLE_FILMEDITOR                         NewStudioRole = 62
	NewStudioRole_NEW_STUDIO_ROLE_FILMPRODUCER                       NewStudioRole = 63
	NewStudioRole_NEW_STUDIO_ROLE_FILMSOUNDENGINEER                  NewStudioRole = 64
	NewStudioRole_NEW_STUDIO_ROLE_FLOORMANAGER                       NewStudioRole = 65
	NewStudioRole_NEW_STUDIO_ROLE_FOCUSPULLER                        NewStudioRole = 66
	NewStudioRole_NEW_STUDIO_ROLE_FOLEYARTIST                        NewStudioRole = 67
	NewStudioRole_NEW_STUDIO_ROLE_FOLEYEDITOR                        NewStudioRole = 68
	NewStudioRole_NEW_STUDIO_ROLE_FOLEYMIXER                         NewStudioRole = 69
	NewStudioRole_NEW_STUDIO_ROLE_GRAPHICASSISTANT                   NewStudioRole = 70
	NewStudioRole_NEW_STUDIO_ROLE_GRAPHICDESIGNER                    NewStudioRole = 71
	NewStudioRole_NEW_STUDIO_ROLE_GREENSMAN                          NewStudioRole = 72
	NewStudioRole_NEW_STUDIO_ROLE_GRIP                               NewStudioRole = 73
	NewStudioRole_NEW_STUDIO_ROLE_HAIRDRESSER                        NewStudioRole = 74
	NewStudioRole_NEW_STUDIO_ROLE_INITIALPRODUCER                    NewStudioRole = 75
	NewStudioRole_NEW_STUDIO_ROLE_KEYGRIP                            NewStudioRole = 76
	NewStudioRole_NEW_STUDIO_ROLE_LEADMAN                            NewStudioRole = 77
	NewStudioRole_NEW_STUDIO_ROLE_LIGHTINGDIRECTOR                   NewStudioRole = 78
	NewStudioRole_NEW_STUDIO_ROLE_LIGHTINGTECHNICIAN                 NewStudioRole = 79
	NewStudioRole_NEW_STUDIO_ROLE_LOCATIONMANAGER                    NewStudioRole = 80
	NewStudioRole_NEW_STUDIO_ROLE_MAKEUPARTIST                       NewStudioRole = 81
	NewStudioRole_NEW_STUDIO_ROLE_MANUFACTURER                       NewStudioRole = 82
	NewStudioRole_NEW_STUDIO_ROLE_MASTERINGENGINEER                  NewStudioRole = 83
	NewStudioRole_NEW_STUDIO_ROLE_MASTERINGSECONDENGINEER            NewStudioRole = 84
	NewStudioRole_NEW_STUDIO_ROLE_MATTEARTIST                        NewStudioRole = 85
	NewStudioRole_NEW_STUDIO_ROLE_MIXINGENGINEER                     NewStudioRole = 86
	NewStudioRole_NEW_STUDIO_ROLE_MIXINGSECONDENGINEER               NewStudioRole = 87
	NewStudioRole_NEW_STUDIO_ROLE_MUSICDIRECTOR                      NewStudioRole = 88
	NewStudioRole_NEW_STUDIO_ROLE_MUSICIAN                           NewStudioRole = 89
	NewStudioRole_NEW_STUDIO_ROLE_NEWSPRODUCER                       NewStudioRole = 90
	NewStudioRole_NEW_STUDIO_ROLE_OVERDUBENGINEER                    NewStudioRole = 91
	NewStudioRole_NEW_STUDIO_ROLE_OVERDUBSECONDENGINEER              NewStudioRole = 92
	NewStudioRole_NEW_STUDIO_ROLE_PHOTOGRAPHYDIRECTOR                NewStudioRole = 93
	NewStudioRole_NEW_STUDIO_ROLE_POSTPRODUCER                       NewStudioRole = 94
	NewStudioRole_NEW_STUDIO_ROLE_PROGRAMMINGENGINEER                NewStudioRole = 95
	NewStudioRole_NEW_STUDIO_ROLE_PREPRODUCTION                      NewStudioRole = 96
	NewStudioRole_NEW_STUDIO_ROLE_PREPRODUCTIONENGINEER              NewStudioRole = 97
	NewStudioRole_NEW_STUDIO_ROLE_PRODUCTIONCOMPANY                  NewStudioRole = 98
	NewStudioRole_NEW_STUDIO_ROLE_PRODUCTIONDEPARTMENT               NewStudioRole = 99
	NewStudioRole_NEW_STUDIO_ROLE_PRODUCTIONMANAGER                  NewStudioRole = 100
	NewStudioRole_NEW_STUDIO_ROLE_PRODUCTIONSECRETARY                NewStudioRole = 101
	NewStudioRole_NEW_STUDIO_ROLE_PROGRAMPRODUCER                    NewStudioRole = 102
	NewStudioRole_NEW_STUDIO_ROLE_PROGRAMPROPOSALWRITER              NewStudioRole = 103
	NewStudioRole_NEW_STUDIO_ROLE_PROPERTYMANAGER                    NewStudioRole = 104
	NewStudioRole_NEW_STUDIO_ROLE_PUBLISHINGDIRECTOR                 NewStudioRole = 105
	NewStudioRole_NEW_STUDIO_ROLE_PYROTECHNICIAN                     NewStudioRole = 106
	NewStudioRole_NEW_STUDIO_ROLE_RECORDINGENGINEER                  NewStudioRole = 107
	NewStudioRole_NEW_STUDIO_ROLE_RECORDINGSECONDENGINEER            NewStudioRole = 108
	NewStudioRole_NEW_STUDIO_ROLE_REDACTOR                           NewStudioRole = 109
	NewStudioRole_NEW_STUDIO_ROLE_REISSUEPRODUCER                    NewStudioRole = 110
	NewStudioRole_NEW_STUDIO_ROLE_REMIXINGENGINEER                   NewStudioRole = 111
	NewStudioRole_NEW_STUDIO_ROLE_REMIXINGSECONDENGINEER             NewStudioRole = 112
	NewStudioRole_NEW_STUDIO_ROLE_REPETITEUR                         NewStudioRole = 113
	NewStudioRole_NEW_STUDIO_ROLE_RESEARCHER                         NewStudioRole = 114
	NewStudioRole_NEW_STUDIO_ROLE_RESEARCHTEAMHEAD                   NewStudioRole = 115
	NewStudioRole_NEW_STUDIO_ROLE_RESEARCHTEAMMEMBER                 NewStudioRole = 116
	NewStudioRole_NEW_STUDIO_ROLE_RESTAGER                           NewStudioRole = 117
	NewStudioRole_NEW_STUDIO_ROLE_RIGGER                             NewStudioRole = 118
	NewStudioRole_NEW_STUDIO_ROLE_RIGHTSCONTROLLERONPRODUCT          NewStudioRole = 119
	NewStudioRole_NEW_STUDIO_ROLE_RUNNER                             NewStudioRole = 120
	NewStudioRole_NEW_STUDIO_ROLE_SCENICOPERATIVE                    NewStudioRole = 121
	NewStudioRole_NEW_STUDIO_ROLE_SCIENTIFICADVISOR                  NewStudioRole = 122
	NewStudioRole_NEW_STUDIO_ROLE_SCRIPTSUPERVISOR                   NewStudioRole = 123
	NewStudioRole_NEW_STUDIO_ROLE_SECONDASSISTANTCAMERAOPERATOR      NewStudioRole = 124
	NewStudioRole_NEW_STUDIO_ROLE_SECONDASSISTANTDIRECTOR            NewStudioRole = 125
	NewStudioRole_NEW_STUDIO_ROLE_SECONDENGINEER                     NewStudioRole = 126
	NewStudioRole_NEW_STUDIO_ROLE_SECONDUNITDIRECTOR                 NewStudioRole = 127
	NewStudioRole_NEW_STUDIO_ROLE_SERIESPRODUCER                     NewStudioRole = 128
	NewStudioRole_NEW_STUDIO_ROLE_SETDESIGNER                        NewStudioRole = 129
	NewStudioRole_NEW_STUDIO_ROLE_SETDRESSER                         NewStudioRole = 130
	NewStudioRole_NEW_STUDIO_ROLE_SOUNDDESIGNER                      NewStudioRole = 131
	NewStudioRole_NEW_STUDIO_ROLE_SOUNDMIXER                         NewStudioRole = 132
	NewStudioRole_NEW_STUDIO_ROLE_SOUNDRECORDIST                     NewStudioRole = 133
	NewStudioRole_NEW_STUDIO_ROLE_SPECIALEFFECTSTECHNICIAN           NewStudioRole = 134
	NewStudioRole_NEW_STUDIO_ROLE_SPONSOR                            NewStudioRole = 135
	NewStudioRole_NEW_STUDIO_ROLE_STAGEDIRECTOR                      NewStudioRole = 136
	NewStudioRole_NEW_STUDIO_ROLE_STRINGENGINEER                     NewStudioRole = 137
	NewStudioRole_NEW_STUDIO_ROLE_STRINGPRODUCER                     NewStudioRole = 138
	NewStudioRole_NEW_STUDIO_ROLE_STUDIOCONDUCTOR                    NewStudioRole = 139
	NewStudioRole_NEW_STUDIO_ROLE_STUDIOPERSONNEL                    NewStudioRole = 140
	NewStudioRole_NEW_STUDIO_ROLE_STUDIOPRODUCER                     NewStudioRole = 141
	NewStudioRole_NEW_STUDIO_ROLE_SUBTITLESEDITOR                    NewStudioRole = 142
	NewStudioRole_NEW_STUDIO_ROLE_SUBTITLESTRANSLATOR                NewStudioRole = 143
	NewStudioRole_NEW_STUDIO_ROLE_TAPEOPERATOR                       NewStudioRole = 144
	NewStudioRole_NEW_STUDIO_ROLE_TECHNICALDIRECTOR                  NewStudioRole = 145
	NewStudioRole_NEW_STUDIO_ROLE_TONMEISTER                         NewStudioRole = 146
	NewStudioRole_NEW_STUDIO_ROLE_TRACKINGENGINEER                   NewStudioRole = 147
	NewStudioRole_NEW_STUDIO_ROLE_TRACKINGSECONDENGINEER             NewStudioRole = 148
	NewStudioRole_NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESENGINEER       NewStudioRole = 149
	NewStudioRole_NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER NewStudioRole = 150
	NewStudioRole_NEW_STUDIO_ROLE_TRANSPORTATIONMANAGER              NewStudioRole = 151
	NewStudioRole_NEW_STUDIO_ROLE_VIDEOGRAPHER                       NewStudioRole = 152
	NewStudioRole_NEW_STUDIO_ROLE_USERDEFINED                        NewStudioRole = 153
	NewStudioRole_NEW_STUDIO_ROLE_VIDEOPRODUCER                      NewStudioRole = 154
	NewStudioRole_NEW_STUDIO_ROLE_VISIONMIXER                        NewStudioRole = 155
	NewStudioRole_NEW_STUDIO_ROLE_VISUALEDITOR                       NewStudioRole = 156
	NewStudioRole_NEW_STUDIO_ROLE_VISUALEFFECTSTECHNICIAN            NewStudioRole = 157
	NewStudioRole_NEW_STUDIO_ROLE_VOCALPRODUCER                      NewStudioRole = 158
	NewStudioRole_NEW_STUDIO_ROLE_WARDROBE                           NewStudioRole = 159
)

// Enum value maps for NewStudioRole.
var (
	NewStudioRole_name = map[int32]string{
		0:   "NEW_STUDIO_ROLE_UNSPECIFIED",
		1:   "NEW_STUDIO_ROLE_ADDITIONALENGINEER",
		2:   "NEW_STUDIO_ROLE_ANIMALTRAINER",
		3:   "NEW_STUDIO_ROLE_ANIMATOR",
		4:   "NEW_STUDIO_ROLE_ANNOTATOR",
		5:   "NEW_STUDIO_ROLE_AANDRCOORDINATOR",
		6:   "NEW_STUDIO_ROLE_ARMOURER",
		7:   "NEW_STUDIO_ROLE_ARTDIRECTOR",
		8:   "NEW_STUDIO_ROLE_ARTISTBACKGROUNDVOCALENGINEER",
		9:   "NEW_STUDIO_ROLE_ARTISTVOCALENGINEER",
		10:  "NEW_STUDIO_ROLE_ARTISTVOCALSECONDENGINEER",
		11:  "NEW_STUDIO_ROLE_ASSISTANTCAMERAOPERATOR",
		12:  "NEW_STUDIO_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN",
		13:  "NEW_STUDIO_ROLE_ASSISTANTDIRECTOR",
		14:  "NEW_STUDIO_ROLE_ASSISTANTPRODUCER",
		15:  "NEW_STUDIO_ROLE_ASSISTANTVISUALEDITOR",
		16:  "NEW_STUDIO_ROLE_AURALTRAINER",
		17:  "NEW_STUDIO_ROLE_BINDER",
		18:  "NEW_STUDIO_ROLE_BINDINGDESIGNER",
		19:  "NEW_STUDIO_ROLE_BOOKDESIGNER",
		20:  "NEW_STUDIO_ROLE_BOOKJACKDESIGNER",
		21:  "NEW_STUDIO_ROLE_BOOKPLATEDESIGNER",
		22:  "NEW_STUDIO_ROLE_BOOKPRODUCER",
		23:  "NEW_STUDIO_ROLE_BROADCASTASSISTANT",
		24:  "NEW_STUDIO_ROLE_BROADCASTJOURNALIST",
		25:  "NEW_STUDIO_ROLE_CAMERAOPERATOR",
		26:  "NEW_STUDIO_ROLE_CARPENTER",
		27:  "NEW_STUDIO_ROLE_CASTINGDIRECTOR",
		28:  "NEW_STUDIO_ROLE_CENSOR",
		29:  "NEW_STUDIO_ROLE_CHIEFLIGHTINGTECHNICIAN",
		30:  "NEW_STUDIO_ROLE_CHOREOGRAPHER",
		31:  "NEW_STUDIO_ROLE_CLAPPERLOADER",
		32:  "NEW_STUDIO_ROLE_COEXECUTIVEPRODUCER",
		33:  "NEW_STUDIO_ROLE_COMMISSIONINGBROADCASTER",
		34:  "NEW_STUDIO_ROLE_COMPILATIONPRODUCER",
		35:  "NEW_STUDIO_ROLE_CONSULTANT",
		36:  "NEW_STUDIO_ROLE_CONTINUITYCHECKER",
		37:  "NEW_STUDIO_ROLE_CONTRACTOR",
		38:  "NEW_STUDIO_ROLE_COPRODUCER",
		39:  "NEW_STUDIO_ROLE_CORRESPONDENT",
		40:  "NEW_STUDIO_ROLE_COSTUMEDESIGNER",
		41:  "NEW_STUDIO_ROLE_COVERDESIGNER",
		42:  "NEW_STUDIO_ROLE_DESIGNER",
		43:  "NEW_STUDIO_ROLE_DIALOGUECOACH",
		44:  "NEW_STUDIO_ROLE_DIGITALAUDIOWORKSTATIONENGINEER",
		45:  "NEW_STUDIO_ROLE_DIGITALEDITINGENGINEER",
		46:  "NEW_STUDIO_ROLE_DIGITALEDITINGSECONDENGINEER",
		47:  "NEW_STUDIO_ROLE_DIRECTOR",
		48:  "NEW_STUDIO_ROLE_DIRECTSTREAMDIGITALENGINEER",
		49:  "NEW_STUDIO_ROLE_DISTRIBUTIONCOMPANY",
		50:  "NEW_STUDIO_ROLE_DRESSER",
		51:  "NEW_STUDIO_ROLE_DUBBER",
		52:  "NEW_STUDIO_ROLE_EDITOR",
		53:  "NEW_STUDIO_ROLE_EDITORINCHIEF",
		54:  "NEW_STUDIO_ROLE_EDITOROFTHEDAY",
		55:  "NEW_STUDIO_ROLE_ENCODER",
		56:  "NEW_STUDIO_ROLE_ENGINEER",
		57:  "NEW_STUDIO_ROLE_EXECUTIVEPRODUCER",
		58:  "NEW_STUDIO_ROLE_EXPERT",
		59:  "NEW_STUDIO_ROLE_FIGHTDIRECTOR",
		60:  "NEW_STUDIO_ROLE_FILMDIRECTOR",
		61:  "NEW_STUDIO_ROLE_FILMDISTRIBUTOR",
		62:  "NEW_STUDIO_ROLE_FILMEDITOR",
		63:  "NEW_STUDIO_ROLE_FILMPRODUCER",
		64:  "NEW_STUDIO_ROLE_FILMSOUNDENGINEER",
		65:  "NEW_STUDIO_ROLE_FLOORMANAGER",
		66:  "NEW_STUDIO_ROLE_FOCUSPULLER",
		67:  "NEW_STUDIO_ROLE_FOLEYARTIST",
		68:  "NEW_STUDIO_ROLE_FOLEYEDITOR",
		69:  "NEW_STUDIO_ROLE_FOLEYMIXER",
		70:  "NEW_STUDIO_ROLE_GRAPHICASSISTANT",
		71:  "NEW_STUDIO_ROLE_GRAPHICDESIGNER",
		72:  "NEW_STUDIO_ROLE_GREENSMAN",
		73:  "NEW_STUDIO_ROLE_GRIP",
		74:  "NEW_STUDIO_ROLE_HAIRDRESSER",
		75:  "NEW_STUDIO_ROLE_INITIALPRODUCER",
		76:  "NEW_STUDIO_ROLE_KEYGRIP",
		77:  "NEW_STUDIO_ROLE_LEADMAN",
		78:  "NEW_STUDIO_ROLE_LIGHTINGDIRECTOR",
		79:  "NEW_STUDIO_ROLE_LIGHTINGTECHNICIAN",
		80:  "NEW_STUDIO_ROLE_LOCATIONMANAGER",
		81:  "NEW_STUDIO_ROLE_MAKEUPARTIST",
		82:  "NEW_STUDIO_ROLE_MANUFACTURER",
		83:  "NEW_STUDIO_ROLE_MASTERINGENGINEER",
		84:  "NEW_STUDIO_ROLE_MASTERINGSECONDENGINEER",
		85:  "NEW_STUDIO_ROLE_MATTEARTIST",
		86:  "NEW_STUDIO_ROLE_MIXINGENGINEER",
		87:  "NEW_STUDIO_ROLE_MIXINGSECONDENGINEER",
		88:  "NEW_STUDIO_ROLE_MUSICDIRECTOR",
		89:  "NEW_STUDIO_ROLE_MUSICIAN",
		90:  "NEW_STUDIO_ROLE_NEWSPRODUCER",
		91:  "NEW_STUDIO_ROLE_OVERDUBENGINEER",
		92:  "NEW_STUDIO_ROLE_OVERDUBSECONDENGINEER",
		93:  "NEW_STUDIO_ROLE_PHOTOGRAPHYDIRECTOR",
		94:  "NEW_STUDIO_ROLE_POSTPRODUCER",
		95:  "NEW_STUDIO_ROLE_PROGRAMMINGENGINEER",
		96:  "NEW_STUDIO_ROLE_PREPRODUCTION",
		97:  "NEW_STUDIO_ROLE_PREPRODUCTIONENGINEER",
		98:  "NEW_STUDIO_ROLE_PRODUCTIONCOMPANY",
		99:  "NEW_STUDIO_ROLE_PRODUCTIONDEPARTMENT",
		100: "NEW_STUDIO_ROLE_PRODUCTIONMANAGER",
		101: "NEW_STUDIO_ROLE_PRODUCTIONSECRETARY",
		102: "NEW_STUDIO_ROLE_PROGRAMPRODUCER",
		103: "NEW_STUDIO_ROLE_PROGRAMPROPOSALWRITER",
		104: "NEW_STUDIO_ROLE_PROPERTYMANAGER",
		105: "NEW_STUDIO_ROLE_PUBLISHINGDIRECTOR",
		106: "NEW_STUDIO_ROLE_PYROTECHNICIAN",
		107: "NEW_STUDIO_ROLE_RECORDINGENGINEER",
		108: "NEW_STUDIO_ROLE_RECORDINGSECONDENGINEER",
		109: "NEW_STUDIO_ROLE_REDACTOR",
		110: "NEW_STUDIO_ROLE_REISSUEPRODUCER",
		111: "NEW_STUDIO_ROLE_REMIXINGENGINEER",
		112: "NEW_STUDIO_ROLE_REMIXINGSECONDENGINEER",
		113: "NEW_STUDIO_ROLE_REPETITEUR",
		114: "NEW_STUDIO_ROLE_RESEARCHER",
		115: "NEW_STUDIO_ROLE_RESEARCHTEAMHEAD",
		116: "NEW_STUDIO_ROLE_RESEARCHTEAMMEMBER",
		117: "NEW_STUDIO_ROLE_RESTAGER",
		118: "NEW_STUDIO_ROLE_RIGGER",
		119: "NEW_STUDIO_ROLE_RIGHTSCONTROLLERONPRODUCT",
		120: "NEW_STUDIO_ROLE_RUNNER",
		121: "NEW_STUDIO_ROLE_SCENICOPERATIVE",
		122: "NEW_STUDIO_ROLE_SCIENTIFICADVISOR",
		123: "NEW_STUDIO_ROLE_SCRIPTSUPERVISOR",
		124: "NEW_STUDIO_ROLE_SECONDASSISTANTCAMERAOPERATOR",
		125: "NEW_STUDIO_ROLE_SECONDASSISTANTDIRECTOR",
		126: "NEW_STUDIO_ROLE_SECONDENGINEER",
		127: "NEW_STUDIO_ROLE_SECONDUNITDIRECTOR",
		128: "NEW_STUDIO_ROLE_SERIESPRODUCER",
		129: "NEW_STUDIO_ROLE_SETDESIGNER",
		130: "NEW_STUDIO_ROLE_SETDRESSER",
		131: "NEW_STUDIO_ROLE_SOUNDDESIGNER",
		132: "NEW_STUDIO_ROLE_SOUNDMIXER",
		133: "NEW_STUDIO_ROLE_SOUNDRECORDIST",
		134: "NEW_STUDIO_ROLE_SPECIALEFFECTSTECHNICIAN",
		135: "NEW_STUDIO_ROLE_SPONSOR",
		136: "NEW_STUDIO_ROLE_STAGEDIRECTOR",
		137: "NEW_STUDIO_ROLE_STRINGENGINEER",
		138: "NEW_STUDIO_ROLE_STRINGPRODUCER",
		139: "NEW_STUDIO_ROLE_STUDIOCONDUCTOR",
		140: "NEW_STUDIO_ROLE_STUDIOPERSONNEL",
		141: "NEW_STUDIO_ROLE_STUDIOPRODUCER",
		142: "NEW_STUDIO_ROLE_SUBTITLESEDITOR",
		143: "NEW_STUDIO_ROLE_SUBTITLESTRANSLATOR",
		144: "NEW_STUDIO_ROLE_TAPEOPERATOR",
		145: "NEW_STUDIO_ROLE_TECHNICALDIRECTOR",
		146: "NEW_STUDIO_ROLE_TONMEISTER",
		147: "NEW_STUDIO_ROLE_TRACKINGENGINEER",
		148: "NEW_STUDIO_ROLE_TRACKINGSECONDENGINEER",
		149: "NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESENGINEER",
		150: "NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER",
		151: "NEW_STUDIO_ROLE_TRANSPORTATIONMANAGER",
		152: "NEW_STUDIO_ROLE_VIDEOGRAPHER",
		153: "NEW_STUDIO_ROLE_USERDEFINED",
		154: "NEW_STUDIO_ROLE_VIDEOPRODUCER",
		155: "NEW_STUDIO_ROLE_VISIONMIXER",
		156: "NEW_STUDIO_ROLE_VISUALEDITOR",
		157: "NEW_STUDIO_ROLE_VISUALEFFECTSTECHNICIAN",
		158: "NEW_STUDIO_ROLE_VOCALPRODUCER",
		159: "NEW_STUDIO_ROLE_WARDROBE",
	}
	NewStudioRole_value = map[string]int32{
		"NEW_STUDIO_ROLE_UNSPECIFIED":                        0,
		"NEW_STUDIO_ROLE_ADDITIONALENGINEER":                 1,
		"NEW_STUDIO_ROLE_ANIMALTRAINER":                      2,
		"NEW_STUDIO_ROLE_ANIMATOR":                           3,
		"NEW_STUDIO_ROLE_ANNOTATOR":                          4,
		"NEW_STUDIO_ROLE_AANDRCOORDINATOR":                   5,
		"NEW_STUDIO_ROLE_ARMOURER":                           6,
		"NEW_STUDIO_ROLE_ARTDIRECTOR":                        7,
		"NEW_STUDIO_ROLE_ARTISTBACKGROUNDVOCALENGINEER":      8,
		"NEW_STUDIO_ROLE_ARTISTVOCALENGINEER":                9,
		"NEW_STUDIO_ROLE_ARTISTVOCALSECONDENGINEER":          10,
		"NEW_STUDIO_ROLE_ASSISTANTCAMERAOPERATOR":            11,
		"NEW_STUDIO_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN":   12,
		"NEW_STUDIO_ROLE_ASSISTANTDIRECTOR":                  13,
		"NEW_STUDIO_ROLE_ASSISTANTPRODUCER":                  14,
		"NEW_STUDIO_ROLE_ASSISTANTVISUALEDITOR":              15,
		"NEW_STUDIO_ROLE_AURALTRAINER":                       16,
		"NEW_STUDIO_ROLE_BINDER":                             17,
		"NEW_STUDIO_ROLE_BINDINGDESIGNER":                    18,
		"NEW_STUDIO_ROLE_BOOKDESIGNER":                       19,
		"NEW_STUDIO_ROLE_BOOKJACKDESIGNER":                   20,
		"NEW_STUDIO_ROLE_BOOKPLATEDESIGNER":                  21,
		"NEW_STUDIO_ROLE_BOOKPRODUCER":                       22,
		"NEW_STUDIO_ROLE_BROADCASTASSISTANT":                 23,
		"NEW_STUDIO_ROLE_BROADCASTJOURNALIST":                24,
		"NEW_STUDIO_ROLE_CAMERAOPERATOR":                     25,
		"NEW_STUDIO_ROLE_CARPENTER":                          26,
		"NEW_STUDIO_ROLE_CASTINGDIRECTOR":                    27,
		"NEW_STUDIO_ROLE_CENSOR":                             28,
		"NEW_STUDIO_ROLE_CHIEFLIGHTINGTECHNICIAN":            29,
		"NEW_STUDIO_ROLE_CHOREOGRAPHER":                      30,
		"NEW_STUDIO_ROLE_CLAPPERLOADER":                      31,
		"NEW_STUDIO_ROLE_COEXECUTIVEPRODUCER":                32,
		"NEW_STUDIO_ROLE_COMMISSIONINGBROADCASTER":           33,
		"NEW_STUDIO_ROLE_COMPILATIONPRODUCER":                34,
		"NEW_STUDIO_ROLE_CONSULTANT":                         35,
		"NEW_STUDIO_ROLE_CONTINUITYCHECKER":                  36,
		"NEW_STUDIO_ROLE_CONTRACTOR":                         37,
		"NEW_STUDIO_ROLE_COPRODUCER":                         38,
		"NEW_STUDIO_ROLE_CORRESPONDENT":                      39,
		"NEW_STUDIO_ROLE_COSTUMEDESIGNER":                    40,
		"NEW_STUDIO_ROLE_COVERDESIGNER":                      41,
		"NEW_STUDIO_ROLE_DESIGNER":                           42,
		"NEW_STUDIO_ROLE_DIALOGUECOACH":                      43,
		"NEW_STUDIO_ROLE_DIGITALAUDIOWORKSTATIONENGINEER":    44,
		"NEW_STUDIO_ROLE_DIGITALEDITINGENGINEER":             45,
		"NEW_STUDIO_ROLE_DIGITALEDITINGSECONDENGINEER":       46,
		"NEW_STUDIO_ROLE_DIRECTOR":                           47,
		"NEW_STUDIO_ROLE_DIRECTSTREAMDIGITALENGINEER":        48,
		"NEW_STUDIO_ROLE_DISTRIBUTIONCOMPANY":                49,
		"NEW_STUDIO_ROLE_DRESSER":                            50,
		"NEW_STUDIO_ROLE_DUBBER":                             51,
		"NEW_STUDIO_ROLE_EDITOR":                             52,
		"NEW_STUDIO_ROLE_EDITORINCHIEF":                      53,
		"NEW_STUDIO_ROLE_EDITOROFTHEDAY":                     54,
		"NEW_STUDIO_ROLE_ENCODER":                            55,
		"NEW_STUDIO_ROLE_ENGINEER":                           56,
		"NEW_STUDIO_ROLE_EXECUTIVEPRODUCER":                  57,
		"NEW_STUDIO_ROLE_EXPERT":                             58,
		"NEW_STUDIO_ROLE_FIGHTDIRECTOR":                      59,
		"NEW_STUDIO_ROLE_FILMDIRECTOR":                       60,
		"NEW_STUDIO_ROLE_FILMDISTRIBUTOR":                    61,
		"NEW_STUDIO_ROLE_FILMEDITOR":                         62,
		"NEW_STUDIO_ROLE_FILMPRODUCER":                       63,
		"NEW_STUDIO_ROLE_FILMSOUNDENGINEER":                  64,
		"NEW_STUDIO_ROLE_FLOORMANAGER":                       65,
		"NEW_STUDIO_ROLE_FOCUSPULLER":                        66,
		"NEW_STUDIO_ROLE_FOLEYARTIST":                        67,
		"NEW_STUDIO_ROLE_FOLEYEDITOR":                        68,
		"NEW_STUDIO_ROLE_FOLEYMIXER":                         69,
		"NEW_STUDIO_ROLE_GRAPHICASSISTANT":                   70,
		"NEW_STUDIO_ROLE_GRAPHICDESIGNER":                    71,
		"NEW_STUDIO_ROLE_GREENSMAN":                          72,
		"NEW_STUDIO_ROLE_GRIP":                               73,
		"NEW_STUDIO_ROLE_HAIRDRESSER":                        74,
		"NEW_STUDIO_ROLE_INITIALPRODUCER":                    75,
		"NEW_STUDIO_ROLE_KEYGRIP":                            76,
		"NEW_STUDIO_ROLE_LEADMAN":                            77,
		"NEW_STUDIO_ROLE_LIGHTINGDIRECTOR":                   78,
		"NEW_STUDIO_ROLE_LIGHTINGTECHNICIAN":                 79,
		"NEW_STUDIO_ROLE_LOCATIONMANAGER":                    80,
		"NEW_STUDIO_ROLE_MAKEUPARTIST":                       81,
		"NEW_STUDIO_ROLE_MANUFACTURER":                       82,
		"NEW_STUDIO_ROLE_MASTERINGENGINEER":                  83,
		"NEW_STUDIO_ROLE_MASTERINGSECONDENGINEER":            84,
		"NEW_STUDIO_ROLE_MATTEARTIST":                        85,
		"NEW_STUDIO_ROLE_MIXINGENGINEER":                     86,
		"NEW_STUDIO_ROLE_MIXINGSECONDENGINEER":               87,
		"NEW_STUDIO_ROLE_MUSICDIRECTOR":                      88,
		"NEW_STUDIO_ROLE_MUSICIAN":                           89,
		"NEW_STUDIO_ROLE_NEWSPRODUCER":                       90,
		"NEW_STUDIO_ROLE_OVERDUBENGINEER":                    91,
		"NEW_STUDIO_ROLE_OVERDUBSECONDENGINEER":              92,
		"NEW_STUDIO_ROLE_PHOTOGRAPHYDIRECTOR":                93,
		"NEW_STUDIO_ROLE_POSTPRODUCER":                       94,
		"NEW_STUDIO_ROLE_PROGRAMMINGENGINEER":                95,
		"NEW_STUDIO_ROLE_PREPRODUCTION":                      96,
		"NEW_STUDIO_ROLE_PREPRODUCTIONENGINEER":              97,
		"NEW_STUDIO_ROLE_PRODUCTIONCOMPANY":                  98,
		"NEW_STUDIO_ROLE_PRODUCTIONDEPARTMENT":               99,
		"NEW_STUDIO_ROLE_PRODUCTIONMANAGER":                  100,
		"NEW_STUDIO_ROLE_PRODUCTIONSECRETARY":                101,
		"NEW_STUDIO_ROLE_PROGRAMPRODUCER":                    102,
		"NEW_STUDIO_ROLE_PROGRAMPROPOSALWRITER":              103,
		"NEW_STUDIO_ROLE_PROPERTYMANAGER":                    104,
		"NEW_STUDIO_ROLE_PUBLISHINGDIRECTOR":                 105,
		"NEW_STUDIO_ROLE_PYROTECHNICIAN":                     106,
		"NEW_STUDIO_ROLE_RECORDINGENGINEER":                  107,
		"NEW_STUDIO_ROLE_RECORDINGSECONDENGINEER":            108,
		"NEW_STUDIO_ROLE_REDACTOR":                           109,
		"NEW_STUDIO_ROLE_REISSUEPRODUCER":                    110,
		"NEW_STUDIO_ROLE_REMIXINGENGINEER":                   111,
		"NEW_STUDIO_ROLE_REMIXINGSECONDENGINEER":             112,
		"NEW_STUDIO_ROLE_REPETITEUR":                         113,
		"NEW_STUDIO_ROLE_RESEARCHER":                         114,
		"NEW_STUDIO_ROLE_RESEARCHTEAMHEAD":                   115,
		"NEW_STUDIO_ROLE_RESEARCHTEAMMEMBER":                 116,
		"NEW_STUDIO_ROLE_RESTAGER":                           117,
		"NEW_STUDIO_ROLE_RIGGER":                             118,
		"NEW_STUDIO_ROLE_RIGHTSCONTROLLERONPRODUCT":          119,
		"NEW_STUDIO_ROLE_RUNNER":                             120,
		"NEW_STUDIO_ROLE_SCENICOPERATIVE":                    121,
		"NEW_STUDIO_ROLE_SCIENTIFICADVISOR":                  122,
		"NEW_STUDIO_ROLE_SCRIPTSUPERVISOR":                   123,
		"NEW_STUDIO_ROLE_SECONDASSISTANTCAMERAOPERATOR":      124,
		"NEW_STUDIO_ROLE_SECONDASSISTANTDIRECTOR":            125,
		"NEW_STUDIO_ROLE_SECONDENGINEER":                     126,
		"NEW_STUDIO_ROLE_SECONDUNITDIRECTOR":                 127,
		"NEW_STUDIO_ROLE_SERIESPRODUCER":                     128,
		"NEW_STUDIO_ROLE_SETDESIGNER":                        129,
		"NEW_STUDIO_ROLE_SETDRESSER":                         130,
		"NEW_STUDIO_ROLE_SOUNDDESIGNER":                      131,
		"NEW_STUDIO_ROLE_SOUNDMIXER":                         132,
		"NEW_STUDIO_ROLE_SOUNDRECORDIST":                     133,
		"NEW_STUDIO_ROLE_SPECIALEFFECTSTECHNICIAN":           134,
		"NEW_STUDIO_ROLE_SPONSOR":                            135,
		"NEW_STUDIO_ROLE_STAGEDIRECTOR":                      136,
		"NEW_STUDIO_ROLE_STRINGENGINEER":                     137,
		"NEW_STUDIO_ROLE_STRINGPRODUCER":                     138,
		"NEW_STUDIO_ROLE_STUDIOCONDUCTOR":                    139,
		"NEW_STUDIO_ROLE_STUDIOPERSONNEL":                    140,
		"NEW_STUDIO_ROLE_STUDIOPRODUCER":                     141,
		"NEW_STUDIO_ROLE_SUBTITLESEDITOR":                    142,
		"NEW_STUDIO_ROLE_SUBTITLESTRANSLATOR":                143,
		"NEW_STUDIO_ROLE_TAPEOPERATOR":                       144,
		"NEW_STUDIO_ROLE_TECHNICALDIRECTOR":                  145,
		"NEW_STUDIO_ROLE_TONMEISTER":                         146,
		"NEW_STUDIO_ROLE_TRACKINGENGINEER":                   147,
		"NEW_STUDIO_ROLE_TRACKINGSECONDENGINEER":             148,
		"NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESENGINEER":       149,
		"NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER": 150,
		"NEW_STUDIO_ROLE_TRANSPORTATIONMANAGER":              151,
		"NEW_STUDIO_ROLE_VIDEOGRAPHER":                       152,
		"NEW_STUDIO_ROLE_USERDEFINED":                        153,
		"NEW_STUDIO_ROLE_VIDEOPRODUCER":                      154,
		"NEW_STUDIO_ROLE_VISIONMIXER":                        155,
		"NEW_STUDIO_ROLE_VISUALEDITOR":                       156,
		"NEW_STUDIO_ROLE_VISUALEFFECTSTECHNICIAN":            157,
		"NEW_STUDIO_ROLE_VOCALPRODUCER":                      158,
		"NEW_STUDIO_ROLE_WARDROBE":                           159,
	}
)

func (x NewStudioRole) Enum() *NewStudioRole {
	p := new(NewStudioRole)
	*p = x
	return p
}

func (x NewStudioRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewStudioRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[130].Descriptor()
}

func (NewStudioRole) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[130]
}

func (x NewStudioRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewStudioRole.Descriptor instead.
func (NewStudioRole) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{130}
}

type NftConfirmationStatus int32

const (
	NftConfirmationStatus_NFT_CONFIRMATION_STATUS_UNSPECIFIED NftConfirmationStatus = 0
	NftConfirmationStatus_NFT_CONFIRMATION_STATUS_VERIFIED    NftConfirmationStatus = 1
	NftConfirmationStatus_NFT_CONFIRMATION_STATUS_REJECTED    NftConfirmationStatus = 2
)

// Enum value maps for NftConfirmationStatus.
var (
	NftConfirmationStatus_name = map[int32]string{
		0: "NFT_CONFIRMATION_STATUS_UNSPECIFIED",
		1: "NFT_CONFIRMATION_STATUS_VERIFIED",
		2: "NFT_CONFIRMATION_STATUS_REJECTED",
	}
	NftConfirmationStatus_value = map[string]int32{
		"NFT_CONFIRMATION_STATUS_UNSPECIFIED": 0,
		"NFT_CONFIRMATION_STATUS_VERIFIED":    1,
		"NFT_CONFIRMATION_STATUS_REJECTED":    2,
	}
)

func (x NftConfirmationStatus) Enum() *NftConfirmationStatus {
	p := new(NftConfirmationStatus)
	*p = x
	return p
}

func (x NftConfirmationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NftConfirmationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[131].Descriptor()
}

func (NftConfirmationStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[131]
}

func (x NftConfirmationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NftConfirmationStatus.Descriptor instead.
func (NftConfirmationStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{131}
}

type OperatingSystemType int32

const (
	OperatingSystemType_OPERATING_SYSTEM_TYPE_UNSPECIFIED OperatingSystemType = 0
	OperatingSystemType_OPERATING_SYSTEM_TYPE_MACOS       OperatingSystemType = 1
	OperatingSystemType_OPERATING_SYSTEM_TYPE_MSWINDOWS   OperatingSystemType = 2
	OperatingSystemType_OPERATING_SYSTEM_TYPE_SYMBIAN     OperatingSystemType = 3
	OperatingSystemType_OPERATING_SYSTEM_TYPE_UNKNOWN     OperatingSystemType = 4
)

// Enum value maps for OperatingSystemType.
var (
	OperatingSystemType_name = map[int32]string{
		0: "OPERATING_SYSTEM_TYPE_UNSPECIFIED",
		1: "OPERATING_SYSTEM_TYPE_MACOS",
		2: "OPERATING_SYSTEM_TYPE_MSWINDOWS",
		3: "OPERATING_SYSTEM_TYPE_SYMBIAN",
		4: "OPERATING_SYSTEM_TYPE_UNKNOWN",
	}
	OperatingSystemType_value = map[string]int32{
		"OPERATING_SYSTEM_TYPE_UNSPECIFIED": 0,
		"OPERATING_SYSTEM_TYPE_MACOS":       1,
		"OPERATING_SYSTEM_TYPE_MSWINDOWS":   2,
		"OPERATING_SYSTEM_TYPE_SYMBIAN":     3,
		"OPERATING_SYSTEM_TYPE_UNKNOWN":     4,
	}
)

func (x OperatingSystemType) Enum() *OperatingSystemType {
	p := new(OperatingSystemType)
	*p = x
	return p
}

func (x OperatingSystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatingSystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[132].Descriptor()
}

func (OperatingSystemType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[132]
}

func (x OperatingSystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatingSystemType.Descriptor instead.
func (OperatingSystemType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{132}
}

type OriginalPurpose int32

const (
	OriginalPurpose_ORIGINAL_PURPOSE_UNSPECIFIED                OriginalPurpose = 0
	OriginalPurpose_ORIGINAL_PURPOSE_COMMERCIALRELEASE          OriginalPurpose = 1
	OriginalPurpose_ORIGINAL_PURPOSE_KARAOKE                    OriginalPurpose = 2
	OriginalPurpose_ORIGINAL_PURPOSE_LIBRARYMUSIC               OriginalPurpose = 3
	OriginalPurpose_ORIGINAL_PURPOSE_SPECIALLYCOMMISSIONEDMUSIC OriginalPurpose = 4
	OriginalPurpose_ORIGINAL_PURPOSE_UNKNOWN                    OriginalPurpose = 5
	OriginalPurpose_ORIGINAL_PURPOSE_USERDEFINED                OriginalPurpose = 6
)

// Enum value maps for OriginalPurpose.
var (
	OriginalPurpose_name = map[int32]string{
		0: "ORIGINAL_PURPOSE_UNSPECIFIED",
		1: "ORIGINAL_PURPOSE_COMMERCIALRELEASE",
		2: "ORIGINAL_PURPOSE_KARAOKE",
		3: "ORIGINAL_PURPOSE_LIBRARYMUSIC",
		4: "ORIGINAL_PURPOSE_SPECIALLYCOMMISSIONEDMUSIC",
		5: "ORIGINAL_PURPOSE_UNKNOWN",
		6: "ORIGINAL_PURPOSE_USERDEFINED",
	}
	OriginalPurpose_value = map[string]int32{
		"ORIGINAL_PURPOSE_UNSPECIFIED":                0,
		"ORIGINAL_PURPOSE_COMMERCIALRELEASE":          1,
		"ORIGINAL_PURPOSE_KARAOKE":                    2,
		"ORIGINAL_PURPOSE_LIBRARYMUSIC":               3,
		"ORIGINAL_PURPOSE_SPECIALLYCOMMISSIONEDMUSIC": 4,
		"ORIGINAL_PURPOSE_UNKNOWN":                    5,
		"ORIGINAL_PURPOSE_USERDEFINED":                6,
	}
)

func (x OriginalPurpose) Enum() *OriginalPurpose {
	p := new(OriginalPurpose)
	*p = x
	return p
}

func (x OriginalPurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OriginalPurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[133].Descriptor()
}

func (OriginalPurpose) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[133]
}

func (x OriginalPurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OriginalPurpose.Descriptor instead.
func (OriginalPurpose) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{133}
}

type PLineType int32

const (
	PLineType_P_LINE_TYPE_UNSPECIFIED      PLineType = 0
	PLineType_P_LINE_TYPE_ORIGINALPLINE    PLineType = 1
	PLineType_P_LINE_TYPE_REMASTERINGPLINE PLineType = 2
)

// Enum value maps for PLineType.
var (
	PLineType_name = map[int32]string{
		0: "P_LINE_TYPE_UNSPECIFIED",
		1: "P_LINE_TYPE_ORIGINALPLINE",
		2: "P_LINE_TYPE_REMASTERINGPLINE",
	}
	PLineType_value = map[string]int32{
		"P_LINE_TYPE_UNSPECIFIED":      0,
		"P_LINE_TYPE_ORIGINALPLINE":    1,
		"P_LINE_TYPE_REMASTERINGPLINE": 2,
	}
)

func (x PLineType) Enum() *PLineType {
	p := new(PLineType)
	*p = x
	return p
}

func (x PLineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PLineType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[134].Descriptor()
}

func (PLineType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[134]
}

func (x PLineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PLineType.Descriptor instead.
func (PLineType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{134}
}

type ParentalWarningStandard int32

const (
	ParentalWarningStandard_PARENTAL_WARNING_STANDARD_UNSPECIFIED ParentalWarningStandard = 0
	ParentalWarningStandard_PARENTAL_WARNING_STANDARD_RIAAPAL     ParentalWarningStandard = 1
	ParentalWarningStandard_PARENTAL_WARNING_STANDARD_USERDEFINED ParentalWarningStandard = 2
)

// Enum value maps for ParentalWarningStandard.
var (
	ParentalWarningStandard_name = map[int32]string{
		0: "PARENTAL_WARNING_STANDARD_UNSPECIFIED",
		1: "PARENTAL_WARNING_STANDARD_RIAAPAL",
		2: "PARENTAL_WARNING_STANDARD_USERDEFINED",
	}
	ParentalWarningStandard_value = map[string]int32{
		"PARENTAL_WARNING_STANDARD_UNSPECIFIED": 0,
		"PARENTAL_WARNING_STANDARD_RIAAPAL":     1,
		"PARENTAL_WARNING_STANDARD_USERDEFINED": 2,
	}
)

func (x ParentalWarningStandard) Enum() *ParentalWarningStandard {
	p := new(ParentalWarningStandard)
	*p = x
	return p
}

func (x ParentalWarningStandard) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParentalWarningStandard) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[135].Descriptor()
}

func (ParentalWarningStandard) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[135]
}

func (x ParentalWarningStandard) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParentalWarningStandard.Descriptor instead.
func (ParentalWarningStandard) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{135}
}

type ParentalWarningType int32

const (
	ParentalWarningType_PARENTAL_WARNING_TYPE_UNSPECIFIED           ParentalWarningType = 0
	ParentalWarningType_PARENTAL_WARNING_TYPE_EXPLICIT              ParentalWarningType = 1
	ParentalWarningType_PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED ParentalWarningType = 2
	ParentalWarningType_PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE     ParentalWarningType = 3
	ParentalWarningType_PARENTAL_WARNING_TYPE_NOTEXPLICIT           ParentalWarningType = 4
	ParentalWarningType_PARENTAL_WARNING_TYPE_UNKNOWN               ParentalWarningType = 5
	ParentalWarningType_PARENTAL_WARNING_TYPE_USERDEFINED           ParentalWarningType = 6
)

// Enum value maps for ParentalWarningType.
var (
	ParentalWarningType_name = map[int32]string{
		0: "PARENTAL_WARNING_TYPE_UNSPECIFIED",
		1: "PARENTAL_WARNING_TYPE_EXPLICIT",
		2: "PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED",
		3: "PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE",
		4: "PARENTAL_WARNING_TYPE_NOTEXPLICIT",
		5: "PARENTAL_WARNING_TYPE_UNKNOWN",
		6: "PARENTAL_WARNING_TYPE_USERDEFINED",
	}
	ParentalWarningType_value = map[string]int32{
		"PARENTAL_WARNING_TYPE_UNSPECIFIED":           0,
		"PARENTAL_WARNING_TYPE_EXPLICIT":              1,
		"PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED": 2,
		"PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE":     3,
		"PARENTAL_WARNING_TYPE_NOTEXPLICIT":           4,
		"PARENTAL_WARNING_TYPE_UNKNOWN":               5,
		"PARENTAL_WARNING_TYPE_USERDEFINED":           6,
	}
)

func (x ParentalWarningType) Enum() *ParentalWarningType {
	p := new(ParentalWarningType)
	*p = x
	return p
}

func (x ParentalWarningType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParentalWarningType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[136].Descriptor()
}

func (ParentalWarningType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[136]
}

func (x ParentalWarningType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParentalWarningType.Descriptor instead.
func (ParentalWarningType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{136}
}

type PartyNameFormat int32

const (
	PartyNameFormat_PARTY_NAME_FORMAT_UNSPECIFIED      PartyNameFormat = 0
	PartyNameFormat_PARTY_NAME_FORMAT_ABBREVIATION     PartyNameFormat = 1
	PartyNameFormat_PARTY_NAME_FORMAT_ASCIITRANSCRIBED PartyNameFormat = 2
	PartyNameFormat_PARTY_NAME_FORMAT_MISSPELLEDNAME   PartyNameFormat = 3
	PartyNameFormat_PARTY_NAME_FORMAT_NAMEINDEXED      PartyNameFormat = 4
	PartyNameFormat_PARTY_NAME_FORMAT_TRANSLATEDNAME   PartyNameFormat = 5
	PartyNameFormat_PARTY_NAME_FORMAT_USERDEFINED      PartyNameFormat = 6
)

// Enum value maps for PartyNameFormat.
var (
	PartyNameFormat_name = map[int32]string{
		0: "PARTY_NAME_FORMAT_UNSPECIFIED",
		1: "PARTY_NAME_FORMAT_ABBREVIATION",
		2: "PARTY_NAME_FORMAT_ASCIITRANSCRIBED",
		3: "PARTY_NAME_FORMAT_MISSPELLEDNAME",
		4: "PARTY_NAME_FORMAT_NAMEINDEXED",
		5: "PARTY_NAME_FORMAT_TRANSLATEDNAME",
		6: "PARTY_NAME_FORMAT_USERDEFINED",
	}
	PartyNameFormat_value = map[string]int32{
		"PARTY_NAME_FORMAT_UNSPECIFIED":      0,
		"PARTY_NAME_FORMAT_ABBREVIATION":     1,
		"PARTY_NAME_FORMAT_ASCIITRANSCRIBED": 2,
		"PARTY_NAME_FORMAT_MISSPELLEDNAME":   3,
		"PARTY_NAME_FORMAT_NAMEINDEXED":      4,
		"PARTY_NAME_FORMAT_TRANSLATEDNAME":   5,
		"PARTY_NAME_FORMAT_USERDEFINED":      6,
	}
)

func (x PartyNameFormat) Enum() *PartyNameFormat {
	p := new(PartyNameFormat)
	*p = x
	return p
}

func (x PartyNameFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyNameFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[137].Descriptor()
}

func (PartyNameFormat) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[137]
}

func (x PartyNameFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyNameFormat.Descriptor instead.
func (PartyNameFormat) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{137}
}

type PartyNamePurpose int32

const (
	PartyNamePurpose_PARTY_NAME_PURPOSE_UNSPECIFIED         PartyNamePurpose = 0
	PartyNamePurpose_PARTY_NAME_PURPOSE_CORRESPONDENCE      PartyNamePurpose = 1
	PartyNamePurpose_PARTY_NAME_PURPOSE_CONTRACT            PartyNamePurpose = 2
	PartyNamePurpose_PARTY_NAME_PURPOSE_LYRICISTCREDITS     PartyNamePurpose = 3
	PartyNamePurpose_PARTY_NAME_PURPOSE_PAYMENT             PartyNamePurpose = 4
	PartyNamePurpose_PARTY_NAME_PURPOSE_PUBLICCOMMUNICATION PartyNamePurpose = 5
	PartyNamePurpose_PARTY_NAME_PURPOSE_RECORDINGCREDITS    PartyNamePurpose = 6
	PartyNamePurpose_PARTY_NAME_PURPOSE_USERDEFINED         PartyNamePurpose = 7
	PartyNamePurpose_PARTY_NAME_PURPOSE_WRITERCREDITS       PartyNamePurpose = 8
)

// Enum value maps for PartyNamePurpose.
var (
	PartyNamePurpose_name = map[int32]string{
		0: "PARTY_NAME_PURPOSE_UNSPECIFIED",
		1: "PARTY_NAME_PURPOSE_CORRESPONDENCE",
		2: "PARTY_NAME_PURPOSE_CONTRACT",
		3: "PARTY_NAME_PURPOSE_LYRICISTCREDITS",
		4: "PARTY_NAME_PURPOSE_PAYMENT",
		5: "PARTY_NAME_PURPOSE_PUBLICCOMMUNICATION",
		6: "PARTY_NAME_PURPOSE_RECORDINGCREDITS",
		7: "PARTY_NAME_PURPOSE_USERDEFINED",
		8: "PARTY_NAME_PURPOSE_WRITERCREDITS",
	}
	PartyNamePurpose_value = map[string]int32{
		"PARTY_NAME_PURPOSE_UNSPECIFIED":         0,
		"PARTY_NAME_PURPOSE_CORRESPONDENCE":      1,
		"PARTY_NAME_PURPOSE_CONTRACT":            2,
		"PARTY_NAME_PURPOSE_LYRICISTCREDITS":     3,
		"PARTY_NAME_PURPOSE_PAYMENT":             4,
		"PARTY_NAME_PURPOSE_PUBLICCOMMUNICATION": 5,
		"PARTY_NAME_PURPOSE_RECORDINGCREDITS":    6,
		"PARTY_NAME_PURPOSE_USERDEFINED":         7,
		"PARTY_NAME_PURPOSE_WRITERCREDITS":       8,
	}
)

func (x PartyNamePurpose) Enum() *PartyNamePurpose {
	p := new(PartyNamePurpose)
	*p = x
	return p
}

func (x PartyNamePurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyNamePurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[138].Descriptor()
}

func (PartyNamePurpose) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[138]
}

func (x PartyNamePurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyNamePurpose.Descriptor instead.
func (PartyNamePurpose) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{138}
}

type PartyNameType int32

const (
	PartyNameType_PARTY_NAME_TYPE_UNSPECIFIED   PartyNameType = 0
	PartyNameType_PARTY_NAME_TYPE_INCORRECTNAME PartyNameType = 1
	PartyNameType_PARTY_NAME_TYPE_LEGALNAME     PartyNameType = 2
	PartyNameType_PARTY_NAME_TYPE_NICKNAME      PartyNameType = 3
	PartyNameType_PARTY_NAME_TYPE_PSEUDONYM     PartyNameType = 4
	PartyNameType_PARTY_NAME_TYPE_STAGENAME     PartyNameType = 5
	PartyNameType_PARTY_NAME_TYPE_TRADINGNAME   PartyNameType = 6
	PartyNameType_PARTY_NAME_TYPE_USERDEFINED   PartyNameType = 7
)

// Enum value maps for PartyNameType.
var (
	PartyNameType_name = map[int32]string{
		0: "PARTY_NAME_TYPE_UNSPECIFIED",
		1: "PARTY_NAME_TYPE_INCORRECTNAME",
		2: "PARTY_NAME_TYPE_LEGALNAME",
		3: "PARTY_NAME_TYPE_NICKNAME",
		4: "PARTY_NAME_TYPE_PSEUDONYM",
		5: "PARTY_NAME_TYPE_STAGENAME",
		6: "PARTY_NAME_TYPE_TRADINGNAME",
		7: "PARTY_NAME_TYPE_USERDEFINED",
	}
	PartyNameType_value = map[string]int32{
		"PARTY_NAME_TYPE_UNSPECIFIED":   0,
		"PARTY_NAME_TYPE_INCORRECTNAME": 1,
		"PARTY_NAME_TYPE_LEGALNAME":     2,
		"PARTY_NAME_TYPE_NICKNAME":      3,
		"PARTY_NAME_TYPE_PSEUDONYM":     4,
		"PARTY_NAME_TYPE_STAGENAME":     5,
		"PARTY_NAME_TYPE_TRADINGNAME":   6,
		"PARTY_NAME_TYPE_USERDEFINED":   7,
	}
)

func (x PartyNameType) Enum() *PartyNameType {
	p := new(PartyNameType)
	*p = x
	return p
}

func (x PartyNameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyNameType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[139].Descriptor()
}

func (PartyNameType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[139]
}

func (x PartyNameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyNameType.Descriptor instead.
func (PartyNameType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{139}
}

type PartyRelationshipType int32

const (
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_UNSPECIFIED PartyRelationshipType = 0
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_HASMEMBER   PartyRelationshipType = 1
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_HASPART     PartyRelationshipType = 2
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_ISCHILDOF   PartyRelationshipType = 3
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_ISMEMBEROF  PartyRelationshipType = 4
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_ISPARENTOF  PartyRelationshipType = 5
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_ISPARTOF    PartyRelationshipType = 6
	PartyRelationshipType_PARTY_RELATIONSHIP_TYPE_USERDEFINED PartyRelationshipType = 7
)

// Enum value maps for PartyRelationshipType.
var (
	PartyRelationshipType_name = map[int32]string{
		0: "PARTY_RELATIONSHIP_TYPE_UNSPECIFIED",
		1: "PARTY_RELATIONSHIP_TYPE_HASMEMBER",
		2: "PARTY_RELATIONSHIP_TYPE_HASPART",
		3: "PARTY_RELATIONSHIP_TYPE_ISCHILDOF",
		4: "PARTY_RELATIONSHIP_TYPE_ISMEMBEROF",
		5: "PARTY_RELATIONSHIP_TYPE_ISPARENTOF",
		6: "PARTY_RELATIONSHIP_TYPE_ISPARTOF",
		7: "PARTY_RELATIONSHIP_TYPE_USERDEFINED",
	}
	PartyRelationshipType_value = map[string]int32{
		"PARTY_RELATIONSHIP_TYPE_UNSPECIFIED": 0,
		"PARTY_RELATIONSHIP_TYPE_HASMEMBER":   1,
		"PARTY_RELATIONSHIP_TYPE_HASPART":     2,
		"PARTY_RELATIONSHIP_TYPE_ISCHILDOF":   3,
		"PARTY_RELATIONSHIP_TYPE_ISMEMBEROF":  4,
		"PARTY_RELATIONSHIP_TYPE_ISPARENTOF":  5,
		"PARTY_RELATIONSHIP_TYPE_ISPARTOF":    6,
		"PARTY_RELATIONSHIP_TYPE_USERDEFINED": 7,
	}
)

func (x PartyRelationshipType) Enum() *PartyRelationshipType {
	p := new(PartyRelationshipType)
	*p = x
	return p
}

func (x PartyRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[140].Descriptor()
}

func (PartyRelationshipType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[140]
}

func (x PartyRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyRelationshipType.Descriptor instead.
func (PartyRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{140}
}

type PartyRelationshipTypePIE int32

const (
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_UNSPECIFIED             PartyRelationshipTypePIE = 0
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_HASAFFILIATEMEMBER      PartyRelationshipTypePIE = 1
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_HASFULLMEMBER           PartyRelationshipTypePIE = 2
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_HASMEMBER               PartyRelationshipTypePIE = 3
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_HASPART                 PartyRelationshipTypePIE = 4
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISAFFILIATEMEMBEROF     PartyRelationshipTypePIE = 5
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHARACTERPLAYEDBY     PartyRelationshipTypePIE = 6
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHILDOF               PartyRelationshipTypePIE = 7
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHILDORGANIZATIONOF   PartyRelationshipTypePIE = 8
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOAUTHOROF            PartyRelationshipTypePIE = 9
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOCONTRIBUTOROF       PartyRelationshipTypePIE = 10
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISCONSIDEREDTHESAMEAS   PartyRelationshipTypePIE = 11
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOPERFORMEROF         PartyRelationshipTypePIE = 12
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISDUPLICATEOF           PartyRelationshipTypePIE = 13
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISFULLMEMBEROF          PartyRelationshipTypePIE = 14
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISHOMONYMOF             PartyRelationshipTypePIE = 15
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISINFLUENCEDBY          PartyRelationshipTypePIE = 16
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISINFLUENCEROF          PartyRelationshipTypePIE = 17
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISMARRIEDTO             PartyRelationshipTypePIE = 18
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISMEMBEROF              PartyRelationshipTypePIE = 19
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISNATURALPERSONOF       PartyRelationshipTypePIE = 20
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARENTOF              PartyRelationshipTypePIE = 21
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARENTORGANIZATIONOF  PartyRelationshipTypePIE = 22
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARTOF                PartyRelationshipTypePIE = 23
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISPLAYINGCHARACTER      PartyRelationshipTypePIE = 24
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISPSEUDONYMOF           PartyRelationshipTypePIE = 25
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISRELATEDTO             PartyRelationshipTypePIE = 26
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISRELATEDSTAGEPERSONAOF PartyRelationshipTypePIE = 27
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_ISSTAGEPERSONAOF        PartyRelationshipTypePIE = 28
	PartyRelationshipTypePIE_PARTY_RELATIONSHIP_TYPE_P_I_E_USERDEFINED             PartyRelationshipTypePIE = 29
)

// Enum value maps for PartyRelationshipTypePIE.
var (
	PartyRelationshipTypePIE_name = map[int32]string{
		0:  "PARTY_RELATIONSHIP_TYPE_P_I_E_UNSPECIFIED",
		1:  "PARTY_RELATIONSHIP_TYPE_P_I_E_HASAFFILIATEMEMBER",
		2:  "PARTY_RELATIONSHIP_TYPE_P_I_E_HASFULLMEMBER",
		3:  "PARTY_RELATIONSHIP_TYPE_P_I_E_HASMEMBER",
		4:  "PARTY_RELATIONSHIP_TYPE_P_I_E_HASPART",
		5:  "PARTY_RELATIONSHIP_TYPE_P_I_E_ISAFFILIATEMEMBEROF",
		6:  "PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHARACTERPLAYEDBY",
		7:  "PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHILDOF",
		8:  "PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHILDORGANIZATIONOF",
		9:  "PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOAUTHOROF",
		10: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOCONTRIBUTOROF",
		11: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISCONSIDEREDTHESAMEAS",
		12: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOPERFORMEROF",
		13: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISDUPLICATEOF",
		14: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISFULLMEMBEROF",
		15: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISHOMONYMOF",
		16: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISINFLUENCEDBY",
		17: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISINFLUENCEROF",
		18: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISMARRIEDTO",
		19: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISMEMBEROF",
		20: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISNATURALPERSONOF",
		21: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARENTOF",
		22: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARENTORGANIZATIONOF",
		23: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARTOF",
		24: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISPLAYINGCHARACTER",
		25: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISPSEUDONYMOF",
		26: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISRELATEDTO",
		27: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISRELATEDSTAGEPERSONAOF",
		28: "PARTY_RELATIONSHIP_TYPE_P_I_E_ISSTAGEPERSONAOF",
		29: "PARTY_RELATIONSHIP_TYPE_P_I_E_USERDEFINED",
	}
	PartyRelationshipTypePIE_value = map[string]int32{
		"PARTY_RELATIONSHIP_TYPE_P_I_E_UNSPECIFIED":             0,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_HASAFFILIATEMEMBER":      1,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_HASFULLMEMBER":           2,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_HASMEMBER":               3,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_HASPART":                 4,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISAFFILIATEMEMBEROF":     5,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHARACTERPLAYEDBY":     6,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHILDOF":               7,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHILDORGANIZATIONOF":   8,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOAUTHOROF":            9,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOCONTRIBUTOROF":       10,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISCONSIDEREDTHESAMEAS":   11,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOPERFORMEROF":         12,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISDUPLICATEOF":           13,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISFULLMEMBEROF":          14,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISHOMONYMOF":             15,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISINFLUENCEDBY":          16,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISINFLUENCEROF":          17,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISMARRIEDTO":             18,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISMEMBEROF":              19,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISNATURALPERSONOF":       20,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARENTOF":              21,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARENTORGANIZATIONOF":  22,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARTOF":                23,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISPLAYINGCHARACTER":      24,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISPSEUDONYMOF":           25,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISRELATEDTO":             26,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISRELATEDSTAGEPERSONAOF": 27,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_ISSTAGEPERSONAOF":        28,
		"PARTY_RELATIONSHIP_TYPE_P_I_E_USERDEFINED":             29,
	}
)

func (x PartyRelationshipTypePIE) Enum() *PartyRelationshipTypePIE {
	p := new(PartyRelationshipTypePIE)
	*p = x
	return p
}

func (x PartyRelationshipTypePIE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyRelationshipTypePIE) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[141].Descriptor()
}

func (PartyRelationshipTypePIE) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[141]
}

func (x PartyRelationshipTypePIE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyRelationshipTypePIE.Descriptor instead.
func (PartyRelationshipTypePIE) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{141}
}

type PartyRole int32

const (
	PartyRole_PARTY_ROLE_UNSPECIFIED          PartyRole = 0
	PartyRole_PARTY_ROLE_ADAPTER              PartyRole = 1
	PartyRole_PARTY_ROLE_ARRANGER             PartyRole = 2
	PartyRole_PARTY_ROLE_COMPOSER             PartyRole = 3
	PartyRole_PARTY_ROLE_COMPOSERLYRICIST     PartyRole = 4
	PartyRole_PARTY_ROLE_CREATOR              PartyRole = 5
	PartyRole_PARTY_ROLE_LYRICIST             PartyRole = 6
	PartyRole_PARTY_ROLE_MUSICPUBLISHER       PartyRole = 7
	PartyRole_PARTY_ROLE_ORIGINALPUBLISHER    PartyRole = 8
	PartyRole_PARTY_ROLE_RIGHTSADMINISTRATOR  PartyRole = 9
	PartyRole_PARTY_ROLE_SUBARRANGER          PartyRole = 10
	PartyRole_PARTY_ROLE_SUBLYRICIST          PartyRole = 11
	PartyRole_PARTY_ROLE_SUBPUBLISHER         PartyRole = 12
	PartyRole_PARTY_ROLE_SUBSTITUTEDPUBLISHER PartyRole = 13
	PartyRole_PARTY_ROLE_TRANSLATOR           PartyRole = 14
)

// Enum value maps for PartyRole.
var (
	PartyRole_name = map[int32]string{
		0:  "PARTY_ROLE_UNSPECIFIED",
		1:  "PARTY_ROLE_ADAPTER",
		2:  "PARTY_ROLE_ARRANGER",
		3:  "PARTY_ROLE_COMPOSER",
		4:  "PARTY_ROLE_COMPOSERLYRICIST",
		5:  "PARTY_ROLE_CREATOR",
		6:  "PARTY_ROLE_LYRICIST",
		7:  "PARTY_ROLE_MUSICPUBLISHER",
		8:  "PARTY_ROLE_ORIGINALPUBLISHER",
		9:  "PARTY_ROLE_RIGHTSADMINISTRATOR",
		10: "PARTY_ROLE_SUBARRANGER",
		11: "PARTY_ROLE_SUBLYRICIST",
		12: "PARTY_ROLE_SUBPUBLISHER",
		13: "PARTY_ROLE_SUBSTITUTEDPUBLISHER",
		14: "PARTY_ROLE_TRANSLATOR",
	}
	PartyRole_value = map[string]int32{
		"PARTY_ROLE_UNSPECIFIED":          0,
		"PARTY_ROLE_ADAPTER":              1,
		"PARTY_ROLE_ARRANGER":             2,
		"PARTY_ROLE_COMPOSER":             3,
		"PARTY_ROLE_COMPOSERLYRICIST":     4,
		"PARTY_ROLE_CREATOR":              5,
		"PARTY_ROLE_LYRICIST":             6,
		"PARTY_ROLE_MUSICPUBLISHER":       7,
		"PARTY_ROLE_ORIGINALPUBLISHER":    8,
		"PARTY_ROLE_RIGHTSADMINISTRATOR":  9,
		"PARTY_ROLE_SUBARRANGER":          10,
		"PARTY_ROLE_SUBLYRICIST":          11,
		"PARTY_ROLE_SUBPUBLISHER":         12,
		"PARTY_ROLE_SUBSTITUTEDPUBLISHER": 13,
		"PARTY_ROLE_TRANSLATOR":           14,
	}
)

func (x PartyRole) Enum() *PartyRole {
	p := new(PartyRole)
	*p = x
	return p
}

func (x PartyRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[142].Descriptor()
}

func (PartyRole) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[142]
}

func (x PartyRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyRole.Descriptor instead.
func (PartyRole) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{142}
}

type PartyType int32

const (
	PartyType_PARTY_TYPE_UNSPECIFIED       PartyType = 0
	PartyType_PARTY_TYPE_ANTHROPOMORPH     PartyType = 1
	PartyType_PARTY_TYPE_AUTHORPERSONA     PartyType = 2
	PartyType_PARTY_TYPE_BRAND             PartyType = 3
	PartyType_PARTY_TYPE_CHARACTER         PartyType = 4
	PartyType_PARTY_TYPE_COMPOSINGPERSONA  PartyType = 5
	PartyType_PARTY_TYPE_DEPARTMENT        PartyType = 6
	PartyType_PARTY_TYPE_GROUP             PartyType = 7
	PartyType_PARTY_TYPE_LEGALORGANIZATION PartyType = 8
	PartyType_PARTY_TYPE_NATURALPERSON     PartyType = 9
	PartyType_PARTY_TYPE_PERSONA           PartyType = 10
	PartyType_PARTY_TYPE_STAGEPERSONA      PartyType = 11
	PartyType_PARTY_TYPE_USERDEFINED       PartyType = 12
)

// Enum value maps for PartyType.
var (
	PartyType_name = map[int32]string{
		0:  "PARTY_TYPE_UNSPECIFIED",
		1:  "PARTY_TYPE_ANTHROPOMORPH",
		2:  "PARTY_TYPE_AUTHORPERSONA",
		3:  "PARTY_TYPE_BRAND",
		4:  "PARTY_TYPE_CHARACTER",
		5:  "PARTY_TYPE_COMPOSINGPERSONA",
		6:  "PARTY_TYPE_DEPARTMENT",
		7:  "PARTY_TYPE_GROUP",
		8:  "PARTY_TYPE_LEGALORGANIZATION",
		9:  "PARTY_TYPE_NATURALPERSON",
		10: "PARTY_TYPE_PERSONA",
		11: "PARTY_TYPE_STAGEPERSONA",
		12: "PARTY_TYPE_USERDEFINED",
	}
	PartyType_value = map[string]int32{
		"PARTY_TYPE_UNSPECIFIED":       0,
		"PARTY_TYPE_ANTHROPOMORPH":     1,
		"PARTY_TYPE_AUTHORPERSONA":     2,
		"PARTY_TYPE_BRAND":             3,
		"PARTY_TYPE_CHARACTER":         4,
		"PARTY_TYPE_COMPOSINGPERSONA":  5,
		"PARTY_TYPE_DEPARTMENT":        6,
		"PARTY_TYPE_GROUP":             7,
		"PARTY_TYPE_LEGALORGANIZATION": 8,
		"PARTY_TYPE_NATURALPERSON":     9,
		"PARTY_TYPE_PERSONA":           10,
		"PARTY_TYPE_STAGEPERSONA":      11,
		"PARTY_TYPE_USERDEFINED":       12,
	}
)

func (x PartyType) Enum() *PartyType {
	p := new(PartyType)
	*p = x
	return p
}

func (x PartyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartyType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[143].Descriptor()
}

func (PartyType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[143]
}

func (x PartyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartyType.Descriptor instead.
func (PartyType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{143}
}

type PendingReason int32

const (
	PendingReason_PENDING_REASON_UNSPECIFIED                                 PendingReason = 0
	PendingReason_PENDING_REASON_NOTYETPROCESSEDBYDSP                        PendingReason = 1
	PendingReason_PENDING_REASON_NOTYETPROCESSEDBYRELINQUISHINGRECORDCOMPANY PendingReason = 2
	PendingReason_PENDING_REASON_USERDEFINED                                 PendingReason = 3
)

// Enum value maps for PendingReason.
var (
	PendingReason_name = map[int32]string{
		0: "PENDING_REASON_UNSPECIFIED",
		1: "PENDING_REASON_NOTYETPROCESSEDBYDSP",
		2: "PENDING_REASON_NOTYETPROCESSEDBYRELINQUISHINGRECORDCOMPANY",
		3: "PENDING_REASON_USERDEFINED",
	}
	PendingReason_value = map[string]int32{
		"PENDING_REASON_UNSPECIFIED":                                 0,
		"PENDING_REASON_NOTYETPROCESSEDBYDSP":                        1,
		"PENDING_REASON_NOTYETPROCESSEDBYRELINQUISHINGRECORDCOMPANY": 2,
		"PENDING_REASON_USERDEFINED":                                 3,
	}
)

func (x PendingReason) Enum() *PendingReason {
	p := new(PendingReason)
	*p = x
	return p
}

func (x PendingReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PendingReason) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[144].Descriptor()
}

func (PendingReason) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[144]
}

func (x PendingReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PendingReason.Descriptor instead.
func (PendingReason) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{144}
}

type PercentageType int32

const (
	PercentageType_PERCENTAGE_TYPE_UNSPECIFIED                      PercentageType = 0
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED   PercentageType = 1
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE         PercentageType = 2
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE           PercentageType = 3
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFNETSALES             PercentageType = 4
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID    PercentageType = 5
	PercentageType_PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE PercentageType = 6
)

// Enum value maps for PercentageType.
var (
	PercentageType_name = map[int32]string{
		0: "PERCENTAGE_TYPE_UNSPECIFIED",
		1: "PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED",
		2: "PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE",
		3: "PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE",
		4: "PERCENTAGE_TYPE_PERCENTAGEOFNETSALES",
		5: "PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID",
		6: "PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE",
	}
	PercentageType_value = map[string]int32{
		"PERCENTAGE_TYPE_UNSPECIFIED":                      0,
		"PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED":   1,
		"PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE":         2,
		"PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE":           3,
		"PERCENTAGE_TYPE_PERCENTAGEOFNETSALES":             4,
		"PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID":    5,
		"PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE": 6,
	}
)

func (x PercentageType) Enum() *PercentageType {
	p := new(PercentageType)
	*p = x
	return p
}

func (x PercentageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PercentageType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[145].Descriptor()
}

func (PercentageType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[145]
}

func (x PercentageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PercentageType.Descriptor instead.
func (PercentageType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{145}
}

type PhysicalCarrierType int32

const (
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_UNSPECIFIED     PhysicalCarrierType = 0
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_BLURAY          PhysicalCarrierType = 1
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_CD              PhysicalCarrierType = 2
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_COMBIPACK       PhysicalCarrierType = 3
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_COMPACTCASSETTE PhysicalCarrierType = 4
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_DUALDISC        PhysicalCarrierType = 5
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_DVD             PhysicalCarrierType = 6
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_MEMORYDEVICE    PhysicalCarrierType = 7
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_SACD            PhysicalCarrierType = 8
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_USERDEFINED     PhysicalCarrierType = 9
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_VIDEOCASSETTE   PhysicalCarrierType = 10
	PhysicalCarrierType_PHYSICAL_CARRIER_TYPE_VINYLDISK       PhysicalCarrierType = 11
)

// Enum value maps for PhysicalCarrierType.
var (
	PhysicalCarrierType_name = map[int32]string{
		0:  "PHYSICAL_CARRIER_TYPE_UNSPECIFIED",
		1:  "PHYSICAL_CARRIER_TYPE_BLURAY",
		2:  "PHYSICAL_CARRIER_TYPE_CD",
		3:  "PHYSICAL_CARRIER_TYPE_COMBIPACK",
		4:  "PHYSICAL_CARRIER_TYPE_COMPACTCASSETTE",
		5:  "PHYSICAL_CARRIER_TYPE_DUALDISC",
		6:  "PHYSICAL_CARRIER_TYPE_DVD",
		7:  "PHYSICAL_CARRIER_TYPE_MEMORYDEVICE",
		8:  "PHYSICAL_CARRIER_TYPE_SACD",
		9:  "PHYSICAL_CARRIER_TYPE_USERDEFINED",
		10: "PHYSICAL_CARRIER_TYPE_VIDEOCASSETTE",
		11: "PHYSICAL_CARRIER_TYPE_VINYLDISK",
	}
	PhysicalCarrierType_value = map[string]int32{
		"PHYSICAL_CARRIER_TYPE_UNSPECIFIED":     0,
		"PHYSICAL_CARRIER_TYPE_BLURAY":          1,
		"PHYSICAL_CARRIER_TYPE_CD":              2,
		"PHYSICAL_CARRIER_TYPE_COMBIPACK":       3,
		"PHYSICAL_CARRIER_TYPE_COMPACTCASSETTE": 4,
		"PHYSICAL_CARRIER_TYPE_DUALDISC":        5,
		"PHYSICAL_CARRIER_TYPE_DVD":             6,
		"PHYSICAL_CARRIER_TYPE_MEMORYDEVICE":    7,
		"PHYSICAL_CARRIER_TYPE_SACD":            8,
		"PHYSICAL_CARRIER_TYPE_USERDEFINED":     9,
		"PHYSICAL_CARRIER_TYPE_VIDEOCASSETTE":   10,
		"PHYSICAL_CARRIER_TYPE_VINYLDISK":       11,
	}
)

func (x PhysicalCarrierType) Enum() *PhysicalCarrierType {
	p := new(PhysicalCarrierType)
	*p = x
	return p
}

func (x PhysicalCarrierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhysicalCarrierType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[146].Descriptor()
}

func (PhysicalCarrierType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[146]
}

func (x PhysicalCarrierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhysicalCarrierType.Descriptor instead.
func (PhysicalCarrierType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{146}
}

type PriceInformationType int32

const (
	PriceInformationType_PRICE_INFORMATION_TYPE_UNSPECIFIED         PriceInformationType = 0
	PriceInformationType_PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE PriceInformationType = 1
	PriceInformationType_PRICE_INFORMATION_TYPE_PREORDERPRICE       PriceInformationType = 2
	PriceInformationType_PRICE_INFORMATION_TYPE_USERDEFINED         PriceInformationType = 3
)

// Enum value maps for PriceInformationType.
var (
	PriceInformationType_name = map[int32]string{
		0: "PRICE_INFORMATION_TYPE_UNSPECIFIED",
		1: "PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE",
		2: "PRICE_INFORMATION_TYPE_PREORDERPRICE",
		3: "PRICE_INFORMATION_TYPE_USERDEFINED",
	}
	PriceInformationType_value = map[string]int32{
		"PRICE_INFORMATION_TYPE_UNSPECIFIED":         0,
		"PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE": 1,
		"PRICE_INFORMATION_TYPE_PREORDERPRICE":       2,
		"PRICE_INFORMATION_TYPE_USERDEFINED":         3,
	}
)

func (x PriceInformationType) Enum() *PriceInformationType {
	p := new(PriceInformationType)
	*p = x
	return p
}

func (x PriceInformationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceInformationType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[147].Descriptor()
}

func (PriceInformationType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[147]
}

func (x PriceInformationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceInformationType.Descriptor instead.
func (PriceInformationType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{147}
}

type PrimaryColorType int32

const (
	PrimaryColorType_PRIMARY_COLOR_TYPE_UNSPECIFIED PrimaryColorType = 0
	PrimaryColorType_PRIMARY_COLOR_TYPE_BT_601      PrimaryColorType = 1
	PrimaryColorType_PRIMARY_COLOR_TYPE_BT_709      PrimaryColorType = 2
	PrimaryColorType_PRIMARY_COLOR_TYPE_BT_2020     PrimaryColorType = 3
)

// Enum value maps for PrimaryColorType.
var (
	PrimaryColorType_name = map[int32]string{
		0: "PRIMARY_COLOR_TYPE_UNSPECIFIED",
		1: "PRIMARY_COLOR_TYPE_BT_601",
		2: "PRIMARY_COLOR_TYPE_BT_709",
		3: "PRIMARY_COLOR_TYPE_BT_2020",
	}
	PrimaryColorType_value = map[string]int32{
		"PRIMARY_COLOR_TYPE_UNSPECIFIED": 0,
		"PRIMARY_COLOR_TYPE_BT_601":      1,
		"PRIMARY_COLOR_TYPE_BT_709":      2,
		"PRIMARY_COLOR_TYPE_BT_2020":     3,
	}
)

func (x PrimaryColorType) Enum() *PrimaryColorType {
	p := new(PrimaryColorType)
	*p = x
	return p
}

func (x PrimaryColorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimaryColorType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[148].Descriptor()
}

func (PrimaryColorType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[148]
}

func (x PrimaryColorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrimaryColorType.Descriptor instead.
func (PrimaryColorType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{148}
}

type ProductType int32

const (
	ProductType_PRODUCT_TYPE_UNSPECIFIED             ProductType = 0
	ProductType_PRODUCT_TYPE_AUDIOPRODUCT            ProductType = 1
	ProductType_PRODUCT_TYPE_GRAPHICSPRODUCT         ProductType = 2
	ProductType_PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT ProductType = 3
	ProductType_PRODUCT_TYPE_MOBILEPRODUCT           ProductType = 4
	ProductType_PRODUCT_TYPE_USERDEFINED             ProductType = 5
	ProductType_PRODUCT_TYPE_VIDEOPRODUCT            ProductType = 6
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_TYPE_UNSPECIFIED",
		1: "PRODUCT_TYPE_AUDIOPRODUCT",
		2: "PRODUCT_TYPE_GRAPHICSPRODUCT",
		3: "PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT",
		4: "PRODUCT_TYPE_MOBILEPRODUCT",
		5: "PRODUCT_TYPE_USERDEFINED",
		6: "PRODUCT_TYPE_VIDEOPRODUCT",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_UNSPECIFIED":             0,
		"PRODUCT_TYPE_AUDIOPRODUCT":            1,
		"PRODUCT_TYPE_GRAPHICSPRODUCT":         2,
		"PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT": 3,
		"PRODUCT_TYPE_MOBILEPRODUCT":           4,
		"PRODUCT_TYPE_USERDEFINED":             5,
		"PRODUCT_TYPE_VIDEOPRODUCT":            6,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[149].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[149]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{149}
}

type ProfileId int32

const (
	ProfileId_PROFILE_ID_UNSPECIFIED                                   ProfileId = 0
	ProfileId_PROFILE_ID_BASICAUDIOPROFILE                             ProfileId = 1
	ProfileId_PROFILE_ID_BASICAUDIOPROFILEMLC                          ProfileId = 2
	ProfileId_PROFILE_ID_BASICAUDIOPROFILESRB                          ProfileId = 3
	ProfileId_PROFILE_ID_UGCPROFILE                                    ProfileId = 4
	ProfileId_PROFILE_ID_UGCPROFILESRB                                 ProfileId = 5
	ProfileId_PROFILE_ID_AUDIOVISUALPROFILE                            ProfileId = 6
	ProfileId_PROFILE_ID_AUDIOVISUALPROFILESRB                         ProfileId = 7
	ProfileId_PROFILE_ID_ROYALTYREPORTINGPROFILE                       ProfileId = 8
	ProfileId_PROFILE_ID_RADIOBROADCASTPROFILE                         ProfileId = 9
	ProfileId_PROFILE_ID_FINANCIALREPORTINGTORECORDCOMPANIESPROFILESRB ProfileId = 10
	ProfileId_PROFILE_ID_MASTERLISTPROFILE                             ProfileId = 11
	ProfileId_PROFILE_ID_MASTERLISTPROFILESRB                          ProfileId = 12
)

// Enum value maps for ProfileId.
var (
	ProfileId_name = map[int32]string{
		0:  "PROFILE_ID_UNSPECIFIED",
		1:  "PROFILE_ID_BASICAUDIOPROFILE",
		2:  "PROFILE_ID_BASICAUDIOPROFILEMLC",
		3:  "PROFILE_ID_BASICAUDIOPROFILESRB",
		4:  "PROFILE_ID_UGCPROFILE",
		5:  "PROFILE_ID_UGCPROFILESRB",
		6:  "PROFILE_ID_AUDIOVISUALPROFILE",
		7:  "PROFILE_ID_AUDIOVISUALPROFILESRB",
		8:  "PROFILE_ID_ROYALTYREPORTINGPROFILE",
		9:  "PROFILE_ID_RADIOBROADCASTPROFILE",
		10: "PROFILE_ID_FINANCIALREPORTINGTORECORDCOMPANIESPROFILESRB",
		11: "PROFILE_ID_MASTERLISTPROFILE",
		12: "PROFILE_ID_MASTERLISTPROFILESRB",
	}
	ProfileId_value = map[string]int32{
		"PROFILE_ID_UNSPECIFIED":                                   0,
		"PROFILE_ID_BASICAUDIOPROFILE":                             1,
		"PROFILE_ID_BASICAUDIOPROFILEMLC":                          2,
		"PROFILE_ID_BASICAUDIOPROFILESRB":                          3,
		"PROFILE_ID_UGCPROFILE":                                    4,
		"PROFILE_ID_UGCPROFILESRB":                                 5,
		"PROFILE_ID_AUDIOVISUALPROFILE":                            6,
		"PROFILE_ID_AUDIOVISUALPROFILESRB":                         7,
		"PROFILE_ID_ROYALTYREPORTINGPROFILE":                       8,
		"PROFILE_ID_RADIOBROADCASTPROFILE":                         9,
		"PROFILE_ID_FINANCIALREPORTINGTORECORDCOMPANIESPROFILESRB": 10,
		"PROFILE_ID_MASTERLISTPROFILE":                             11,
		"PROFILE_ID_MASTERLISTPROFILESRB":                          12,
	}
)

func (x ProfileId) Enum() *ProfileId {
	p := new(ProfileId)
	*p = x
	return p
}

func (x ProfileId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileId) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[150].Descriptor()
}

func (ProfileId) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[150]
}

func (x ProfileId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileId.Descriptor instead.
func (ProfileId) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{150}
}

type ProfileIdCDM int32

const (
	ProfileIdCDM_PROFILE_ID_C_D_M_UNSPECIFIED              ProfileIdCDM = 0
	ProfileIdCDM_PROFILE_ID_C_D_M_CLAIMS                   ProfileIdCDM = 1
	ProfileIdCDM_PROFILE_ID_C_D_M_CLAIMSAMOUNTS            ProfileIdCDM = 2
	ProfileIdCDM_PROFILE_ID_C_D_M_DATADISCREPANCIES        ProfileIdCDM = 3
	ProfileIdCDM_PROFILE_ID_C_D_M_OVERCLAIMDISCREPANCIES   ProfileIdCDM = 4
	ProfileIdCDM_PROFILE_ID_C_D_M_CLAIMSAMOUNTSCORRECTIONS ProfileIdCDM = 5
	ProfileIdCDM_PROFILE_ID_C_D_M_CLAIMSCORRECTIONS        ProfileIdCDM = 6
)

// Enum value maps for ProfileIdCDM.
var (
	ProfileIdCDM_name = map[int32]string{
		0: "PROFILE_ID_C_D_M_UNSPECIFIED",
		1: "PROFILE_ID_C_D_M_CLAIMS",
		2: "PROFILE_ID_C_D_M_CLAIMSAMOUNTS",
		3: "PROFILE_ID_C_D_M_DATADISCREPANCIES",
		4: "PROFILE_ID_C_D_M_OVERCLAIMDISCREPANCIES",
		5: "PROFILE_ID_C_D_M_CLAIMSAMOUNTSCORRECTIONS",
		6: "PROFILE_ID_C_D_M_CLAIMSCORRECTIONS",
	}
	ProfileIdCDM_value = map[string]int32{
		"PROFILE_ID_C_D_M_UNSPECIFIED":              0,
		"PROFILE_ID_C_D_M_CLAIMS":                   1,
		"PROFILE_ID_C_D_M_CLAIMSAMOUNTS":            2,
		"PROFILE_ID_C_D_M_DATADISCREPANCIES":        3,
		"PROFILE_ID_C_D_M_OVERCLAIMDISCREPANCIES":   4,
		"PROFILE_ID_C_D_M_CLAIMSAMOUNTSCORRECTIONS": 5,
		"PROFILE_ID_C_D_M_CLAIMSCORRECTIONS":        6,
	}
)

func (x ProfileIdCDM) Enum() *ProfileIdCDM {
	p := new(ProfileIdCDM)
	*p = x
	return p
}

func (x ProfileIdCDM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileIdCDM) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[151].Descriptor()
}

func (ProfileIdCDM) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[151]
}

func (x ProfileIdCDM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileIdCDM.Descriptor instead.
func (ProfileIdCDM) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{151}
}

type ProfileIdMWDR int32

const (
	ProfileIdMWDR_PROFILE_ID_M_W_D_R_UNSPECIFIED          ProfileIdMWDR = 0
	ProfileIdMWDR_PROFILE_ID_M_W_D_R_CONFLICTNOTIFICATION ProfileIdMWDR = 1
	ProfileIdMWDR_PROFILE_ID_M_W_D_R_LINKNOTIFICATION     ProfileIdMWDR = 2
	ProfileIdMWDR_PROFILE_ID_M_W_D_R_REVOCATION           ProfileIdMWDR = 3
	ProfileIdMWDR_PROFILE_ID_M_W_D_R_SHARENOTIFICATION    ProfileIdMWDR = 4
)

// Enum value maps for ProfileIdMWDR.
var (
	ProfileIdMWDR_name = map[int32]string{
		0: "PROFILE_ID_M_W_D_R_UNSPECIFIED",
		1: "PROFILE_ID_M_W_D_R_CONFLICTNOTIFICATION",
		2: "PROFILE_ID_M_W_D_R_LINKNOTIFICATION",
		3: "PROFILE_ID_M_W_D_R_REVOCATION",
		4: "PROFILE_ID_M_W_D_R_SHARENOTIFICATION",
	}
	ProfileIdMWDR_value = map[string]int32{
		"PROFILE_ID_M_W_D_R_UNSPECIFIED":          0,
		"PROFILE_ID_M_W_D_R_CONFLICTNOTIFICATION": 1,
		"PROFILE_ID_M_W_D_R_LINKNOTIFICATION":     2,
		"PROFILE_ID_M_W_D_R_REVOCATION":           3,
		"PROFILE_ID_M_W_D_R_SHARENOTIFICATION":    4,
	}
)

func (x ProfileIdMWDR) Enum() *ProfileIdMWDR {
	p := new(ProfileIdMWDR)
	*p = x
	return p
}

func (x ProfileIdMWDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileIdMWDR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[152].Descriptor()
}

func (ProfileIdMWDR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[152]
}

func (x ProfileIdMWDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileIdMWDR.Descriptor instead.
func (ProfileIdMWDR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{152}
}

type ProfileType int32

const (
	ProfileType_PROFILE_TYPE_UNSPECIFIED      ProfileType = 0
	ProfileType_PROFILE_TYPE_IMMUTABLEPROFILE ProfileType = 1
	ProfileType_PROFILE_TYPE_UPDATABLEPROFILE ProfileType = 2
)

// Enum value maps for ProfileType.
var (
	ProfileType_name = map[int32]string{
		0: "PROFILE_TYPE_UNSPECIFIED",
		1: "PROFILE_TYPE_IMMUTABLEPROFILE",
		2: "PROFILE_TYPE_UPDATABLEPROFILE",
	}
	ProfileType_value = map[string]int32{
		"PROFILE_TYPE_UNSPECIFIED":      0,
		"PROFILE_TYPE_IMMUTABLEPROFILE": 1,
		"PROFILE_TYPE_UPDATABLEPROFILE": 2,
	}
)

func (x ProfileType) Enum() *ProfileType {
	p := new(ProfileType)
	*p = x
	return p
}

func (x ProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[153].Descriptor()
}

func (ProfileType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[153]
}

func (x ProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileType.Descriptor instead.
func (ProfileType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{153}
}

type Purpose int32

const (
	Purpose_PURPOSE_UNSPECIFIED         Purpose = 0
	Purpose_PURPOSE_BACKGROUNDMUSIC     Purpose = 1
	Purpose_PURPOSE_CHANNELTRAILERMUSIC Purpose = 2
	Purpose_PURPOSE_EXTRACT             Purpose = 3
	Purpose_PURPOSE_FILMTRAILERMUSIC    Purpose = 4
	Purpose_PURPOSE_FOREGROUNDMUSIC     Purpose = 5
	Purpose_PURPOSE_TRAILERMUSIC        Purpose = 6
	Purpose_PURPOSE_USERDEFINED         Purpose = 7
)

// Enum value maps for Purpose.
var (
	Purpose_name = map[int32]string{
		0: "PURPOSE_UNSPECIFIED",
		1: "PURPOSE_BACKGROUNDMUSIC",
		2: "PURPOSE_CHANNELTRAILERMUSIC",
		3: "PURPOSE_EXTRACT",
		4: "PURPOSE_FILMTRAILERMUSIC",
		5: "PURPOSE_FOREGROUNDMUSIC",
		6: "PURPOSE_TRAILERMUSIC",
		7: "PURPOSE_USERDEFINED",
	}
	Purpose_value = map[string]int32{
		"PURPOSE_UNSPECIFIED":         0,
		"PURPOSE_BACKGROUNDMUSIC":     1,
		"PURPOSE_CHANNELTRAILERMUSIC": 2,
		"PURPOSE_EXTRACT":             3,
		"PURPOSE_FILMTRAILERMUSIC":    4,
		"PURPOSE_FOREGROUNDMUSIC":     5,
		"PURPOSE_TRAILERMUSIC":        6,
		"PURPOSE_USERDEFINED":         7,
	}
)

func (x Purpose) Enum() *Purpose {
	p := new(Purpose)
	*p = x
	return p
}

func (x Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[154].Descriptor()
}

func (Purpose) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[154]
}

func (x Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Purpose.Descriptor instead.
func (Purpose) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{154}
}

type RatingAgency int32

const (
	RatingAgency_RATING_AGENCY_UNSPECIFIED   RatingAgency = 0
	RatingAgency_RATING_AGENCY_ACMA          RatingAgency = 1
	RatingAgency_RATING_AGENCY_AFR           RatingAgency = 2
	RatingAgency_RATING_AGENCY_AGCOM         RatingAgency = 3
	RatingAgency_RATING_AGENCY_ANATEL        RatingAgency = 4
	RatingAgency_RATING_AGENCY_BBFC          RatingAgency = 5
	RatingAgency_RATING_AGENCY_BFCO          RatingAgency = 6
	RatingAgency_RATING_AGENCY_BFSC          RatingAgency = 7
	RatingAgency_RATING_AGENCY_BFVC          RatingAgency = 8
	RatingAgency_RATING_AGENCY_BMUKK         RatingAgency = 9
	RatingAgency_RATING_AGENCY_CBFC          RatingAgency = 10
	RatingAgency_RATING_AGENCY_CBSC          RatingAgency = 11
	RatingAgency_RATING_AGENCY_CBSC_F        RatingAgency = 12
	RatingAgency_RATING_AGENCY_CCC           RatingAgency = 13
	RatingAgency_RATING_AGENCY_CCE           RatingAgency = 14
	RatingAgency_RATING_AGENCY_CHVRS         RatingAgency = 15
	RatingAgency_RATING_AGENCY_CICF          RatingAgency = 16
	RatingAgency_RATING_AGENCY_CNA           RatingAgency = 17
	RatingAgency_RATING_AGENCY_CNC           RatingAgency = 18
	RatingAgency_RATING_AGENCY_CPBC          RatingAgency = 19
	RatingAgency_RATING_AGENCY_CSA           RatingAgency = 20
	RatingAgency_RATING_AGENCY_CSCF          RatingAgency = 21
	RatingAgency_RATING_AGENCY_DJCTQ         RatingAgency = 22
	RatingAgency_RATING_AGENCY_EIRIN         RatingAgency = 23
	RatingAgency_RATING_AGENCY_ESRB          RatingAgency = 24
	RatingAgency_RATING_AGENCY_FAB           RatingAgency = 25
	RatingAgency_RATING_AGENCY_FCB           RatingAgency = 26
	RatingAgency_RATING_AGENCY_FCO           RatingAgency = 27
	RatingAgency_RATING_AGENCY_FILM_CH       RatingAgency = 28
	RatingAgency_RATING_AGENCY_FILM_CZ       RatingAgency = 29
	RatingAgency_RATING_AGENCY_FILM_EG       RatingAgency = 30
	RatingAgency_RATING_AGENCY_FILM_EE       RatingAgency = 31
	RatingAgency_RATING_AGENCY_FILM_GR       RatingAgency = 32
	RatingAgency_RATING_AGENCY_FILM_PE       RatingAgency = 33
	RatingAgency_RATING_AGENCY_FILM_SK       RatingAgency = 34
	RatingAgency_RATING_AGENCY_FILMTILSYNET  RatingAgency = 35
	RatingAgency_RATING_AGENCY_FPB           RatingAgency = 36
	RatingAgency_RATING_AGENCY_FRB           RatingAgency = 37
	RatingAgency_RATING_AGENCY_FSK           RatingAgency = 38
	RatingAgency_RATING_AGENCY_ICAA          RatingAgency = 39
	RatingAgency_RATING_AGENCY_IFCO          RatingAgency = 40
	RatingAgency_RATING_AGENCY_IFCOF         RatingAgency = 41
	RatingAgency_RATING_AGENCY_INCAA         RatingAgency = 42
	RatingAgency_RATING_AGENCY_KFCB          RatingAgency = 43
	RatingAgency_RATING_AGENCY_KIJKWIJZER    RatingAgency = 44
	RatingAgency_RATING_AGENCY_KMRB          RatingAgency = 45
	RatingAgency_RATING_AGENCY_KR            RatingAgency = 46
	RatingAgency_RATING_AGENCY_KRRIT         RatingAgency = 47
	RatingAgency_RATING_AGENCY_LSF           RatingAgency = 48
	RatingAgency_RATING_AGENCY_MBACT         RatingAgency = 49
	RatingAgency_RATING_AGENCY_MBU           RatingAgency = 50
	RatingAgency_RATING_AGENCY_MCCAA         RatingAgency = 51
	RatingAgency_RATING_AGENCY_MDA           RatingAgency = 52
	RatingAgency_RATING_AGENCY_MDCB          RatingAgency = 53
	RatingAgency_RATING_AGENCY_MEDIETILSYNET RatingAgency = 54
	RatingAgency_RATING_AGENCY_MEKU          RatingAgency = 55
	RatingAgency_RATING_AGENCY_MFCB          RatingAgency = 56
	RatingAgency_RATING_AGENCY_MIC           RatingAgency = 57
	RatingAgency_RATING_AGENCY_MKRF          RatingAgency = 58
	RatingAgency_RATING_AGENCY_MOC           RatingAgency = 59
	RatingAgency_RATING_AGENCY_MOC_TW        RatingAgency = 60
	RatingAgency_RATING_AGENCY_MPAA          RatingAgency = 61
	RatingAgency_RATING_AGENCY_MPAAT         RatingAgency = 62
	RatingAgency_RATING_AGENCY_MTRCB         RatingAgency = 63
	RatingAgency_RATING_AGENCY_NBC           RatingAgency = 64
	RatingAgency_RATING_AGENCY_NCS           RatingAgency = 65
	RatingAgency_RATING_AGENCY_NFRC          RatingAgency = 66
	RatingAgency_RATING_AGENCY_NFVCB         RatingAgency = 67
	RatingAgency_RATING_AGENCY_NICAM         RatingAgency = 68
	RatingAgency_RATING_AGENCY_NKC           RatingAgency = 69
	RatingAgency_RATING_AGENCY_OFLC          RatingAgency = 70
	RatingAgency_RATING_AGENCY_OFLC_NZ       RatingAgency = 71
	RatingAgency_RATING_AGENCY_OFRB          RatingAgency = 72
	RatingAgency_RATING_AGENCY_PEGI          RatingAgency = 73
	RatingAgency_RATING_AGENCY_RCNOF         RatingAgency = 74
	RatingAgency_RATING_AGENCY_RDCQ          RatingAgency = 75
	RatingAgency_RATING_AGENCY_RIAA          RatingAgency = 76
	RatingAgency_RATING_AGENCY_RTC           RatingAgency = 77
	RatingAgency_RATING_AGENCY_RTE           RatingAgency = 78
	RatingAgency_RATING_AGENCY_SBB           RatingAgency = 79
	RatingAgency_RATING_AGENCY_SIBCI         RatingAgency = 80
	RatingAgency_RATING_AGENCY_SMAIS         RatingAgency = 81
	RatingAgency_RATING_AGENCY_SM_SA         RatingAgency = 82
	RatingAgency_RATING_AGENCY_SPIO_JK       RatingAgency = 83
	RatingAgency_RATING_AGENCY_USFA          RatingAgency = 84
	RatingAgency_RATING_AGENCY_TELA          RatingAgency = 85
	RatingAgency_RATING_AGENCY_TVPG          RatingAgency = 86
	RatingAgency_RATING_AGENCY_USERDEFINED   RatingAgency = 87
	RatingAgency_RATING_AGENCY_VET           RatingAgency = 88
)

// Enum value maps for RatingAgency.
var (
	RatingAgency_name = map[int32]string{
		0:  "RATING_AGENCY_UNSPECIFIED",
		1:  "RATING_AGENCY_ACMA",
		2:  "RATING_AGENCY_AFR",
		3:  "RATING_AGENCY_AGCOM",
		4:  "RATING_AGENCY_ANATEL",
		5:  "RATING_AGENCY_BBFC",
		6:  "RATING_AGENCY_BFCO",
		7:  "RATING_AGENCY_BFSC",
		8:  "RATING_AGENCY_BFVC",
		9:  "RATING_AGENCY_BMUKK",
		10: "RATING_AGENCY_CBFC",
		11: "RATING_AGENCY_CBSC",
		12: "RATING_AGENCY_CBSC_F",
		13: "RATING_AGENCY_CCC",
		14: "RATING_AGENCY_CCE",
		15: "RATING_AGENCY_CHVRS",
		16: "RATING_AGENCY_CICF",
		17: "RATING_AGENCY_CNA",
		18: "RATING_AGENCY_CNC",
		19: "RATING_AGENCY_CPBC",
		20: "RATING_AGENCY_CSA",
		21: "RATING_AGENCY_CSCF",
		22: "RATING_AGENCY_DJCTQ",
		23: "RATING_AGENCY_EIRIN",
		24: "RATING_AGENCY_ESRB",
		25: "RATING_AGENCY_FAB",
		26: "RATING_AGENCY_FCB",
		27: "RATING_AGENCY_FCO",
		28: "RATING_AGENCY_FILM_CH",
		29: "RATING_AGENCY_FILM_CZ",
		30: "RATING_AGENCY_FILM_EG",
		31: "RATING_AGENCY_FILM_EE",
		32: "RATING_AGENCY_FILM_GR",
		33: "RATING_AGENCY_FILM_PE",
		34: "RATING_AGENCY_FILM_SK",
		35: "RATING_AGENCY_FILMTILSYNET",
		36: "RATING_AGENCY_FPB",
		37: "RATING_AGENCY_FRB",
		38: "RATING_AGENCY_FSK",
		39: "RATING_AGENCY_ICAA",
		40: "RATING_AGENCY_IFCO",
		41: "RATING_AGENCY_IFCOF",
		42: "RATING_AGENCY_INCAA",
		43: "RATING_AGENCY_KFCB",
		44: "RATING_AGENCY_KIJKWIJZER",
		45: "RATING_AGENCY_KMRB",
		46: "RATING_AGENCY_KR",
		47: "RATING_AGENCY_KRRIT",
		48: "RATING_AGENCY_LSF",
		49: "RATING_AGENCY_MBACT",
		50: "RATING_AGENCY_MBU",
		51: "RATING_AGENCY_MCCAA",
		52: "RATING_AGENCY_MDA",
		53: "RATING_AGENCY_MDCB",
		54: "RATING_AGENCY_MEDIETILSYNET",
		55: "RATING_AGENCY_MEKU",
		56: "RATING_AGENCY_MFCB",
		57: "RATING_AGENCY_MIC",
		58: "RATING_AGENCY_MKRF",
		59: "RATING_AGENCY_MOC",
		60: "RATING_AGENCY_MOC_TW",
		61: "RATING_AGENCY_MPAA",
		62: "RATING_AGENCY_MPAAT",
		63: "RATING_AGENCY_MTRCB",
		64: "RATING_AGENCY_NBC",
		65: "RATING_AGENCY_NCS",
		66: "RATING_AGENCY_NFRC",
		67: "RATING_AGENCY_NFVCB",
		68: "RATING_AGENCY_NICAM",
		69: "RATING_AGENCY_NKC",
		70: "RATING_AGENCY_OFLC",
		71: "RATING_AGENCY_OFLC_NZ",
		72: "RATING_AGENCY_OFRB",
		73: "RATING_AGENCY_PEGI",
		74: "RATING_AGENCY_RCNOF",
		75: "RATING_AGENCY_RDCQ",
		76: "RATING_AGENCY_RIAA",
		77: "RATING_AGENCY_RTC",
		78: "RATING_AGENCY_RTE",
		79: "RATING_AGENCY_SBB",
		80: "RATING_AGENCY_SIBCI",
		81: "RATING_AGENCY_SMAIS",
		82: "RATING_AGENCY_SM_SA",
		83: "RATING_AGENCY_SPIO_JK",
		84: "RATING_AGENCY_USFA",
		85: "RATING_AGENCY_TELA",
		86: "RATING_AGENCY_TVPG",
		87: "RATING_AGENCY_USERDEFINED",
		88: "RATING_AGENCY_VET",
	}
	RatingAgency_value = map[string]int32{
		"RATING_AGENCY_UNSPECIFIED":   0,
		"RATING_AGENCY_ACMA":          1,
		"RATING_AGENCY_AFR":           2,
		"RATING_AGENCY_AGCOM":         3,
		"RATING_AGENCY_ANATEL":        4,
		"RATING_AGENCY_BBFC":          5,
		"RATING_AGENCY_BFCO":          6,
		"RATING_AGENCY_BFSC":          7,
		"RATING_AGENCY_BFVC":          8,
		"RATING_AGENCY_BMUKK":         9,
		"RATING_AGENCY_CBFC":          10,
		"RATING_AGENCY_CBSC":          11,
		"RATING_AGENCY_CBSC_F":        12,
		"RATING_AGENCY_CCC":           13,
		"RATING_AGENCY_CCE":           14,
		"RATING_AGENCY_CHVRS":         15,
		"RATING_AGENCY_CICF":          16,
		"RATING_AGENCY_CNA":           17,
		"RATING_AGENCY_CNC":           18,
		"RATING_AGENCY_CPBC":          19,
		"RATING_AGENCY_CSA":           20,
		"RATING_AGENCY_CSCF":          21,
		"RATING_AGENCY_DJCTQ":         22,
		"RATING_AGENCY_EIRIN":         23,
		"RATING_AGENCY_ESRB":          24,
		"RATING_AGENCY_FAB":           25,
		"RATING_AGENCY_FCB":           26,
		"RATING_AGENCY_FCO":           27,
		"RATING_AGENCY_FILM_CH":       28,
		"RATING_AGENCY_FILM_CZ":       29,
		"RATING_AGENCY_FILM_EG":       30,
		"RATING_AGENCY_FILM_EE":       31,
		"RATING_AGENCY_FILM_GR":       32,
		"RATING_AGENCY_FILM_PE":       33,
		"RATING_AGENCY_FILM_SK":       34,
		"RATING_AGENCY_FILMTILSYNET":  35,
		"RATING_AGENCY_FPB":           36,
		"RATING_AGENCY_FRB":           37,
		"RATING_AGENCY_FSK":           38,
		"RATING_AGENCY_ICAA":          39,
		"RATING_AGENCY_IFCO":          40,
		"RATING_AGENCY_IFCOF":         41,
		"RATING_AGENCY_INCAA":         42,
		"RATING_AGENCY_KFCB":          43,
		"RATING_AGENCY_KIJKWIJZER":    44,
		"RATING_AGENCY_KMRB":          45,
		"RATING_AGENCY_KR":            46,
		"RATING_AGENCY_KRRIT":         47,
		"RATING_AGENCY_LSF":           48,
		"RATING_AGENCY_MBACT":         49,
		"RATING_AGENCY_MBU":           50,
		"RATING_AGENCY_MCCAA":         51,
		"RATING_AGENCY_MDA":           52,
		"RATING_AGENCY_MDCB":          53,
		"RATING_AGENCY_MEDIETILSYNET": 54,
		"RATING_AGENCY_MEKU":          55,
		"RATING_AGENCY_MFCB":          56,
		"RATING_AGENCY_MIC":           57,
		"RATING_AGENCY_MKRF":          58,
		"RATING_AGENCY_MOC":           59,
		"RATING_AGENCY_MOC_TW":        60,
		"RATING_AGENCY_MPAA":          61,
		"RATING_AGENCY_MPAAT":         62,
		"RATING_AGENCY_MTRCB":         63,
		"RATING_AGENCY_NBC":           64,
		"RATING_AGENCY_NCS":           65,
		"RATING_AGENCY_NFRC":          66,
		"RATING_AGENCY_NFVCB":         67,
		"RATING_AGENCY_NICAM":         68,
		"RATING_AGENCY_NKC":           69,
		"RATING_AGENCY_OFLC":          70,
		"RATING_AGENCY_OFLC_NZ":       71,
		"RATING_AGENCY_OFRB":          72,
		"RATING_AGENCY_PEGI":          73,
		"RATING_AGENCY_RCNOF":         74,
		"RATING_AGENCY_RDCQ":          75,
		"RATING_AGENCY_RIAA":          76,
		"RATING_AGENCY_RTC":           77,
		"RATING_AGENCY_RTE":           78,
		"RATING_AGENCY_SBB":           79,
		"RATING_AGENCY_SIBCI":         80,
		"RATING_AGENCY_SMAIS":         81,
		"RATING_AGENCY_SM_SA":         82,
		"RATING_AGENCY_SPIO_JK":       83,
		"RATING_AGENCY_USFA":          84,
		"RATING_AGENCY_TELA":          85,
		"RATING_AGENCY_TVPG":          86,
		"RATING_AGENCY_USERDEFINED":   87,
		"RATING_AGENCY_VET":           88,
	}
)

func (x RatingAgency) Enum() *RatingAgency {
	p := new(RatingAgency)
	*p = x
	return p
}

func (x RatingAgency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RatingAgency) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[155].Descriptor()
}

func (RatingAgency) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[155]
}

func (x RatingAgency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RatingAgency.Descriptor instead.
func (RatingAgency) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{155}
}

type RatingReason int32

const (
	RatingReason_RATING_REASON_UNSPECIFIED               RatingReason = 0
	RatingReason_RATING_REASON_BEHAVIOUR                 RatingReason = 1
	RatingReason_RATING_REASON_BLASPHEMY                 RatingReason = 2
	RatingReason_RATING_REASON_CRIME                     RatingReason = 3
	RatingReason_RATING_REASON_DISCRIMINATIONORPREJUDICE RatingReason = 4
	RatingReason_RATING_REASON_DRUGS                     RatingReason = 5
	RatingReason_RATING_REASON_EXPLICITSEX               RatingReason = 6
	RatingReason_RATING_REASON_EXTREMEVIOLENCE           RatingReason = 7
	RatingReason_RATING_REASON_FEARORHORROR              RatingReason = 8
	RatingReason_RATING_REASON_GAMBLING                  RatingReason = 9
	RatingReason_RATING_REASON_ILLEGALDRUGS              RatingReason = 10
	RatingReason_RATING_REASON_LANGUAGE                  RatingReason = 11
	RatingReason_RATING_REASON_LEGALDRUGS                RatingReason = 12
	RatingReason_RATING_REASON_NUDITY                    RatingReason = 13
	RatingReason_RATING_REASON_ONLINEGAMEPLAY            RatingReason = 14
	RatingReason_RATING_REASON_SEX                       RatingReason = 15
	RatingReason_RATING_REASON_SEXUALVIOLENCE            RatingReason = 16
	RatingReason_RATING_REASON_THEME                     RatingReason = 17
	RatingReason_RATING_REASON_USERDEFINED               RatingReason = 18
	RatingReason_RATING_REASON_VIOLENCE                  RatingReason = 19
)

// Enum value maps for RatingReason.
var (
	RatingReason_name = map[int32]string{
		0:  "RATING_REASON_UNSPECIFIED",
		1:  "RATING_REASON_BEHAVIOUR",
		2:  "RATING_REASON_BLASPHEMY",
		3:  "RATING_REASON_CRIME",
		4:  "RATING_REASON_DISCRIMINATIONORPREJUDICE",
		5:  "RATING_REASON_DRUGS",
		6:  "RATING_REASON_EXPLICITSEX",
		7:  "RATING_REASON_EXTREMEVIOLENCE",
		8:  "RATING_REASON_FEARORHORROR",
		9:  "RATING_REASON_GAMBLING",
		10: "RATING_REASON_ILLEGALDRUGS",
		11: "RATING_REASON_LANGUAGE",
		12: "RATING_REASON_LEGALDRUGS",
		13: "RATING_REASON_NUDITY",
		14: "RATING_REASON_ONLINEGAMEPLAY",
		15: "RATING_REASON_SEX",
		16: "RATING_REASON_SEXUALVIOLENCE",
		17: "RATING_REASON_THEME",
		18: "RATING_REASON_USERDEFINED",
		19: "RATING_REASON_VIOLENCE",
	}
	RatingReason_value = map[string]int32{
		"RATING_REASON_UNSPECIFIED":               0,
		"RATING_REASON_BEHAVIOUR":                 1,
		"RATING_REASON_BLASPHEMY":                 2,
		"RATING_REASON_CRIME":                     3,
		"RATING_REASON_DISCRIMINATIONORPREJUDICE": 4,
		"RATING_REASON_DRUGS":                     5,
		"RATING_REASON_EXPLICITSEX":               6,
		"RATING_REASON_EXTREMEVIOLENCE":           7,
		"RATING_REASON_FEARORHORROR":              8,
		"RATING_REASON_GAMBLING":                  9,
		"RATING_REASON_ILLEGALDRUGS":              10,
		"RATING_REASON_LANGUAGE":                  11,
		"RATING_REASON_LEGALDRUGS":                12,
		"RATING_REASON_NUDITY":                    13,
		"RATING_REASON_ONLINEGAMEPLAY":            14,
		"RATING_REASON_SEX":                       15,
		"RATING_REASON_SEXUALVIOLENCE":            16,
		"RATING_REASON_THEME":                     17,
		"RATING_REASON_USERDEFINED":               18,
		"RATING_REASON_VIOLENCE":                  19,
	}
)

func (x RatingReason) Enum() *RatingReason {
	p := new(RatingReason)
	*p = x
	return p
}

func (x RatingReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RatingReason) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[156].Descriptor()
}

func (RatingReason) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[156]
}

func (x RatingReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RatingReason.Descriptor instead.
func (RatingReason) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{156}
}

type RdrMessageType int32

const (
	RdrMessageType_RDR_MESSAGE_TYPE_UNSPECIFIED                                     RdrMessageType = 0
	RdrMessageType_RDR_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE   RdrMessageType = 1
	RdrMessageType_RDR_MESSAGE_TYPE_REQUESTSOUNDRECORDINGRIGHTSCLAIMMESSAGE         RdrMessageType = 2
	RdrMessageType_RDR_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE          RdrMessageType = 3
	RdrMessageType_RDR_MESSAGE_TYPE_SALESREPORTMESSAGE                              RdrMessageType = 4
	RdrMessageType_RDR_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE                     RdrMessageType = 5
	RdrMessageType_RDR_MESSAGE_TYPE_RIGHTSCLAIMSTATUSUPDATEMESSAGE                  RdrMessageType = 6
	RdrMessageType_RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATEMESSAGE             RdrMessageType = 7
	RdrMessageType_RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATESTATUSUPDATEMESSAGE RdrMessageType = 8
	RdrMessageType_RDR_MESSAGE_TYPE_REVOKECOLLECTIONMANDATEMESSAGE                  RdrMessageType = 9
	RdrMessageType_RDR_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE                       RdrMessageType = 10
)

// Enum value maps for RdrMessageType.
var (
	RdrMessageType_name = map[int32]string{
		0:  "RDR_MESSAGE_TYPE_UNSPECIFIED",
		1:  "RDR_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE",
		2:  "RDR_MESSAGE_TYPE_REQUESTSOUNDRECORDINGRIGHTSCLAIMMESSAGE",
		3:  "RDR_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE",
		4:  "RDR_MESSAGE_TYPE_SALESREPORTMESSAGE",
		5:  "RDR_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE",
		6:  "RDR_MESSAGE_TYPE_RIGHTSCLAIMSTATUSUPDATEMESSAGE",
		7:  "RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATEMESSAGE",
		8:  "RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATESTATUSUPDATEMESSAGE",
		9:  "RDR_MESSAGE_TYPE_REVOKECOLLECTIONMANDATEMESSAGE",
		10: "RDR_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE",
	}
	RdrMessageType_value = map[string]int32{
		"RDR_MESSAGE_TYPE_UNSPECIFIED":                                     0,
		"RDR_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE":   1,
		"RDR_MESSAGE_TYPE_REQUESTSOUNDRECORDINGRIGHTSCLAIMMESSAGE":         2,
		"RDR_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE":          3,
		"RDR_MESSAGE_TYPE_SALESREPORTMESSAGE":                              4,
		"RDR_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE":                     5,
		"RDR_MESSAGE_TYPE_RIGHTSCLAIMSTATUSUPDATEMESSAGE":                  6,
		"RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATEMESSAGE":             7,
		"RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATESTATUSUPDATEMESSAGE": 8,
		"RDR_MESSAGE_TYPE_REVOKECOLLECTIONMANDATEMESSAGE":                  9,
		"RDR_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE":                       10,
	}
)

func (x RdrMessageType) Enum() *RdrMessageType {
	p := new(RdrMessageType)
	*p = x
	return p
}

func (x RdrMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RdrMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[157].Descriptor()
}

func (RdrMessageType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[157]
}

func (x RdrMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RdrMessageType.Descriptor instead.
func (RdrMessageType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{157}
}

type RdrcBatchStatus int32

const (
	RdrcBatchStatus_RDRC_BATCH_STATUS_UNSPECIFIED RdrcBatchStatus = 0
	RdrcBatchStatus_RDRC_BATCH_STATUS_BATCHOK     RdrcBatchStatus = 1
	RdrcBatchStatus_RDRC_BATCH_STATUS_USERDEFINED RdrcBatchStatus = 2
)

// Enum value maps for RdrcBatchStatus.
var (
	RdrcBatchStatus_name = map[int32]string{
		0: "RDRC_BATCH_STATUS_UNSPECIFIED",
		1: "RDRC_BATCH_STATUS_BATCHOK",
		2: "RDRC_BATCH_STATUS_USERDEFINED",
	}
	RdrcBatchStatus_value = map[string]int32{
		"RDRC_BATCH_STATUS_UNSPECIFIED": 0,
		"RDRC_BATCH_STATUS_BATCHOK":     1,
		"RDRC_BATCH_STATUS_USERDEFINED": 2,
	}
)

func (x RdrcBatchStatus) Enum() *RdrcBatchStatus {
	p := new(RdrcBatchStatus)
	*p = x
	return p
}

func (x RdrcBatchStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RdrcBatchStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[158].Descriptor()
}

func (RdrcBatchStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[158]
}

func (x RdrcBatchStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RdrcBatchStatus.Descriptor instead.
func (RdrcBatchStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{158}
}

type RdrcFileStatus int32

const (
	RdrcFileStatus_RDRC_FILE_STATUS_UNSPECIFIED  RdrcFileStatus = 0
	RdrcFileStatus_RDRC_FILE_STATUS_ERROR        RdrcFileStatus = 1
	RdrcFileStatus_RDRC_FILE_STATUS_FILERECEIVED RdrcFileStatus = 2
	RdrcFileStatus_RDRC_FILE_STATUS_FILEVALID    RdrcFileStatus = 3
	RdrcFileStatus_RDRC_FILE_STATUS_USERDEFINED  RdrcFileStatus = 4
)

// Enum value maps for RdrcFileStatus.
var (
	RdrcFileStatus_name = map[int32]string{
		0: "RDRC_FILE_STATUS_UNSPECIFIED",
		1: "RDRC_FILE_STATUS_ERROR",
		2: "RDRC_FILE_STATUS_FILERECEIVED",
		3: "RDRC_FILE_STATUS_FILEVALID",
		4: "RDRC_FILE_STATUS_USERDEFINED",
	}
	RdrcFileStatus_value = map[string]int32{
		"RDRC_FILE_STATUS_UNSPECIFIED":  0,
		"RDRC_FILE_STATUS_ERROR":        1,
		"RDRC_FILE_STATUS_FILERECEIVED": 2,
		"RDRC_FILE_STATUS_FILEVALID":    3,
		"RDRC_FILE_STATUS_USERDEFINED":  4,
	}
)

func (x RdrcFileStatus) Enum() *RdrcFileStatus {
	p := new(RdrcFileStatus)
	*p = x
	return p
}

func (x RdrcFileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RdrcFileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[159].Descriptor()
}

func (RdrcFileStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[159]
}

func (x RdrcFileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RdrcFileStatus.Descriptor instead.
func (RdrcFileStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{159}
}

type ReasonForNameChange int32

const (
	ReasonForNameChange_REASON_FOR_NAME_CHANGE_UNSPECIFIED ReasonForNameChange = 0
	ReasonForNameChange_REASON_FOR_NAME_CHANGE_DEED        ReasonForNameChange = 1
	ReasonForNameChange_REASON_FOR_NAME_CHANGE_MARRIAGE    ReasonForNameChange = 2
	ReasonForNameChange_REASON_FOR_NAME_CHANGE_RELIGION    ReasonForNameChange = 3
	ReasonForNameChange_REASON_FOR_NAME_CHANGE_SEXCHANGE   ReasonForNameChange = 4
	ReasonForNameChange_REASON_FOR_NAME_CHANGE_USERDEFINED ReasonForNameChange = 5
)

// Enum value maps for ReasonForNameChange.
var (
	ReasonForNameChange_name = map[int32]string{
		0: "REASON_FOR_NAME_CHANGE_UNSPECIFIED",
		1: "REASON_FOR_NAME_CHANGE_DEED",
		2: "REASON_FOR_NAME_CHANGE_MARRIAGE",
		3: "REASON_FOR_NAME_CHANGE_RELIGION",
		4: "REASON_FOR_NAME_CHANGE_SEXCHANGE",
		5: "REASON_FOR_NAME_CHANGE_USERDEFINED",
	}
	ReasonForNameChange_value = map[string]int32{
		"REASON_FOR_NAME_CHANGE_UNSPECIFIED": 0,
		"REASON_FOR_NAME_CHANGE_DEED":        1,
		"REASON_FOR_NAME_CHANGE_MARRIAGE":    2,
		"REASON_FOR_NAME_CHANGE_RELIGION":    3,
		"REASON_FOR_NAME_CHANGE_SEXCHANGE":   4,
		"REASON_FOR_NAME_CHANGE_USERDEFINED": 5,
	}
)

func (x ReasonForNameChange) Enum() *ReasonForNameChange {
	p := new(ReasonForNameChange)
	*p = x
	return p
}

func (x ReasonForNameChange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReasonForNameChange) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[160].Descriptor()
}

func (ReasonForNameChange) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[160]
}

func (x ReasonForNameChange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReasonForNameChange.Descriptor instead.
func (ReasonForNameChange) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{160}
}

type RecipientRevenueType int32

const (
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_UNSPECIFIED                 RecipientRevenueType = 0
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE RecipientRevenueType = 1
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE            RecipientRevenueType = 2
	RecipientRevenueType_RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE             RecipientRevenueType = 3
)

// Enum value maps for RecipientRevenueType.
var (
	RecipientRevenueType_name = map[int32]string{
		0: "RECIPIENT_REVENUE_TYPE_UNSPECIFIED",
		1: "RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE",
		2: "RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE",
		3: "RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE",
	}
	RecipientRevenueType_value = map[string]int32{
		"RECIPIENT_REVENUE_TYPE_UNSPECIFIED":                 0,
		"RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE": 1,
		"RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE":            2,
		"RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE":             3,
	}
)

func (x RecipientRevenueType) Enum() *RecipientRevenueType {
	p := new(RecipientRevenueType)
	*p = x
	return p
}

func (x RecipientRevenueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipientRevenueType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[161].Descriptor()
}

func (RecipientRevenueType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[161]
}

func (x RecipientRevenueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipientRevenueType.Descriptor instead.
func (RecipientRevenueType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{161}
}

type RecipientRevenueTypeRDR int32

const (
	RecipientRevenueTypeRDR_RECIPIENT_REVENUE_TYPE_R_D_R_UNSPECIFIED          RecipientRevenueTypeRDR = 0
	RecipientRevenueTypeRDR_RECIPIENT_REVENUE_TYPE_R_D_R_PERFORMERONLYREVENUE RecipientRevenueTypeRDR = 1
	RecipientRevenueTypeRDR_RECIPIENT_REVENUE_TYPE_R_D_R_PRODUCERONLYREVENUE  RecipientRevenueTypeRDR = 2
	RecipientRevenueTypeRDR_RECIPIENT_REVENUE_TYPE_R_D_R_REVENUE              RecipientRevenueTypeRDR = 3
)

// Enum value maps for RecipientRevenueTypeRDR.
var (
	RecipientRevenueTypeRDR_name = map[int32]string{
		0: "RECIPIENT_REVENUE_TYPE_R_D_R_UNSPECIFIED",
		1: "RECIPIENT_REVENUE_TYPE_R_D_R_PERFORMERONLYREVENUE",
		2: "RECIPIENT_REVENUE_TYPE_R_D_R_PRODUCERONLYREVENUE",
		3: "RECIPIENT_REVENUE_TYPE_R_D_R_REVENUE",
	}
	RecipientRevenueTypeRDR_value = map[string]int32{
		"RECIPIENT_REVENUE_TYPE_R_D_R_UNSPECIFIED":          0,
		"RECIPIENT_REVENUE_TYPE_R_D_R_PERFORMERONLYREVENUE": 1,
		"RECIPIENT_REVENUE_TYPE_R_D_R_PRODUCERONLYREVENUE":  2,
		"RECIPIENT_REVENUE_TYPE_R_D_R_REVENUE":              3,
	}
)

func (x RecipientRevenueTypeRDR) Enum() *RecipientRevenueTypeRDR {
	p := new(RecipientRevenueTypeRDR)
	*p = x
	return p
}

func (x RecipientRevenueTypeRDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipientRevenueTypeRDR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[162].Descriptor()
}

func (RecipientRevenueTypeRDR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[162]
}

func (x RecipientRevenueTypeRDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipientRevenueTypeRDR.Descriptor instead.
func (RecipientRevenueTypeRDR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{162}
}

type RecordingFormat int32

const (
	RecordingFormat_RECORDING_FORMAT_UNSPECIFIED                   RecordingFormat = 0
	RecordingFormat_RECORDING_FORMAT_E_360VIDEO                    RecordingFormat = 1
	RecordingFormat_RECORDING_FORMAT_ACOUSTIC                      RecordingFormat = 2
	RecordingFormat_RECORDING_FORMAT_ADULTCONTENT                  RecordingFormat = 3
	RecordingFormat_RECORDING_FORMAT_ADVERTISEMENTVIDEO            RecordingFormat = 4
	RecordingFormat_RECORDING_FORMAT_ADVICEMAGAZINE                RecordingFormat = 5
	RecordingFormat_RECORDING_FORMAT_ANIMATION                     RecordingFormat = 6
	RecordingFormat_RECORDING_FORMAT_AWARDSHOW                     RecordingFormat = 7
	RecordingFormat_RECORDING_FORMAT_BALLETVIDEO                   RecordingFormat = 8
	RecordingFormat_RECORDING_FORMAT_BEHINDTHEMUSIC                RecordingFormat = 9
	RecordingFormat_RECORDING_FORMAT_BEHINDTHESCENES               RecordingFormat = 10
	RecordingFormat_RECORDING_FORMAT_BLACKANDWHITEVIDEO            RecordingFormat = 11
	RecordingFormat_RECORDING_FORMAT_CAUSERELATEDRECORDING         RecordingFormat = 12
	RecordingFormat_RECORDING_FORMAT_CHILDRENSFILM                 RecordingFormat = 13
	RecordingFormat_RECORDING_FORMAT_COLORIZEDVIDEO                RecordingFormat = 14
	RecordingFormat_RECORDING_FORMAT_COLUMNVIDEO                   RecordingFormat = 15
	RecordingFormat_RECORDING_FORMAT_CONCERTCLIP                   RecordingFormat = 16
	RecordingFormat_RECORDING_FORMAT_CONCERTVIDEO                  RecordingFormat = 17
	RecordingFormat_RECORDING_FORMAT_CONTENTPROVIDERORIGINALS      RecordingFormat = 18
	RecordingFormat_RECORDING_FORMAT_CORPORATEFILM                 RecordingFormat = 19
	RecordingFormat_RECORDING_FORMAT_CREDITS                       RecordingFormat = 20
	RecordingFormat_RECORDING_FORMAT_DANCEVIDEO                    RecordingFormat = 21
	RecordingFormat_RECORDING_FORMAT_DOCUMENTARY                   RecordingFormat = 22
	RecordingFormat_RECORDING_FORMAT_DRAMA                         RecordingFormat = 23
	RecordingFormat_RECORDING_FORMAT_DRAMATICOMUSICALVIDEO         RecordingFormat = 24
	RecordingFormat_RECORDING_FORMAT_EDUCATIONALVIDEO              RecordingFormat = 25
	RecordingFormat_RECORDING_FORMAT_EPISODE                       RecordingFormat = 26
	RecordingFormat_RECORDING_FORMAT_FEATUREFILM                   RecordingFormat = 27
	RecordingFormat_RECORDING_FORMAT_FICTION                       RecordingFormat = 28
	RecordingFormat_RECORDING_FORMAT_INFOMERCIALVIDEO              RecordingFormat = 29
	RecordingFormat_RECORDING_FORMAT_INTERACTIVERESOURCE           RecordingFormat = 30
	RecordingFormat_RECORDING_FORMAT_INTERVIEW                     RecordingFormat = 31
	RecordingFormat_RECORDING_FORMAT_KARAOKE                       RecordingFormat = 32
	RecordingFormat_RECORDING_FORMAT_LIVEEVENTRECORDING            RecordingFormat = 33
	RecordingFormat_RECORDING_FORMAT_LIVEEVENTRECORDINGINSTUDIO    RecordingFormat = 34
	RecordingFormat_RECORDING_FORMAT_LIVEEVENTVIDEO                RecordingFormat = 35
	RecordingFormat_RECORDING_FORMAT_LIVESTREAM                    RecordingFormat = 36
	RecordingFormat_RECORDING_FORMAT_LOWCOMPLEXITYVIDEO            RecordingFormat = 37
	RecordingFormat_RECORDING_FORMAT_LYRICVIDEO                    RecordingFormat = 38
	RecordingFormat_RECORDING_FORMAT_MAGAZINE                      RecordingFormat = 39
	RecordingFormat_RECORDING_FORMAT_MENU                          RecordingFormat = 40
	RecordingFormat_RECORDING_FORMAT_MULTIMEDIAVIDEO               RecordingFormat = 41
	RecordingFormat_RECORDING_FORMAT_MUSICALWORKCLIP               RecordingFormat = 42
	RecordingFormat_RECORDING_FORMAT_MUSICALWORKREADALONGVIDEO     RecordingFormat = 43
	RecordingFormat_RECORDING_FORMAT_MUSICALWORKTRAILER            RecordingFormat = 44
	RecordingFormat_RECORDING_FORMAT_MUSICALWORKVIDEOCHAPTER       RecordingFormat = 45
	RecordingFormat_RECORDING_FORMAT_NEWS                          RecordingFormat = 46
	RecordingFormat_RECORDING_FORMAT_NONMUSICALWORKCLIP            RecordingFormat = 47
	RecordingFormat_RECORDING_FORMAT_NONMUSICALWORKREADALONGVIDEO  RecordingFormat = 48
	RecordingFormat_RECORDING_FORMAT_NONMUSICALWORKTRAILER         RecordingFormat = 49
	RecordingFormat_RECORDING_FORMAT_NONMUSICALWORKVIDEOCHAPTER    RecordingFormat = 50
	RecordingFormat_RECORDING_FORMAT_NONSERIALAUDIOVISUALRECORDING RecordingFormat = 51
	RecordingFormat_RECORDING_FORMAT_OFFICIALMUSICVIDEO            RecordingFormat = 52
	RecordingFormat_RECORDING_FORMAT_OPERAVIDEO                    RecordingFormat = 53
	RecordingFormat_RECORDING_FORMAT_PERFORMANCE                   RecordingFormat = 54
	RecordingFormat_RECORDING_FORMAT_RAWFOOTAGE                    RecordingFormat = 55
	RecordingFormat_RECORDING_FORMAT_READALONGVIDEO                RecordingFormat = 56
	RecordingFormat_RECORDING_FORMAT_REALITYTVSHOWVIDEO            RecordingFormat = 57
	RecordingFormat_RECORDING_FORMAT_EXCERPT                       RecordingFormat = 58
	RecordingFormat_RECORDING_FORMAT_SEASON                        RecordingFormat = 59
	RecordingFormat_RECORDING_FORMAT_SERIALAUDIOVISUALRECORDING    RecordingFormat = 60
	RecordingFormat_RECORDING_FORMAT_SERIES                        RecordingFormat = 61
	RecordingFormat_RECORDING_FORMAT_SESSION                       RecordingFormat = 62
	RecordingFormat_RECORDING_FORMAT_SHORTFILM                     RecordingFormat = 63
	RecordingFormat_RECORDING_FORMAT_SILENTVIDEO                   RecordingFormat = 64
	RecordingFormat_RECORDING_FORMAT_SKETCHVIDEO                   RecordingFormat = 65
	RecordingFormat_RECORDING_FORMAT_SOAPSITCOM                    RecordingFormat = 66
	RecordingFormat_RECORDING_FORMAT_SPECIALEVENT                  RecordingFormat = 67
	RecordingFormat_RECORDING_FORMAT_SPORT                         RecordingFormat = 68
	RecordingFormat_RECORDING_FORMAT_STATICVIDEO                   RecordingFormat = 69
	RecordingFormat_RECORDING_FORMAT_STUDIORECORDING               RecordingFormat = 70
	RecordingFormat_RECORDING_FORMAT_THEATRICALWORKVIDEO           RecordingFormat = 71
	RecordingFormat_RECORDING_FORMAT_TOURDIARY                     RecordingFormat = 72
	RecordingFormat_RECORDING_FORMAT_TRAILERVIDEO                  RecordingFormat = 73
	RecordingFormat_RECORDING_FORMAT_TUTORIAL                      RecordingFormat = 74
	RecordingFormat_RECORDING_FORMAT_TVFILM                        RecordingFormat = 75
	RecordingFormat_RECORDING_FORMAT_TVFILMPERFORMANCE             RecordingFormat = 76
	RecordingFormat_RECORDING_FORMAT_TVPROGRAM                     RecordingFormat = 77
	RecordingFormat_RECORDING_FORMAT_TVSHOWVIDEO                   RecordingFormat = 78
	RecordingFormat_RECORDING_FORMAT_UNKNOWN                       RecordingFormat = 79
	RecordingFormat_RECORDING_FORMAT_USERDEFINED                   RecordingFormat = 80
	RecordingFormat_RECORDING_FORMAT_VERTICALVIDEO                 RecordingFormat = 81
	RecordingFormat_RECORDING_FORMAT_VIDEOCHAPTER                  RecordingFormat = 82
	RecordingFormat_RECORDING_FORMAT_VIDEOCLIP                     RecordingFormat = 83
	RecordingFormat_RECORDING_FORMAT_VIDEOREPORT                   RecordingFormat = 84
	RecordingFormat_RECORDING_FORMAT_VIDEOSTEM                     RecordingFormat = 85
	RecordingFormat_RECORDING_FORMAT_VIRTUALREALITYEXPERIENCE      RecordingFormat = 86
	RecordingFormat_RECORDING_FORMAT_VISUALIZER                    RecordingFormat = 87
	RecordingFormat_RECORDING_FORMAT_VLOG                          RecordingFormat = 88
	RecordingFormat_RECORDING_FORMAT_WEBISODE                      RecordingFormat = 89
	RecordingFormat_RECORDING_FORMAT_WEBRESOURCE                   RecordingFormat = 90
)

// Enum value maps for RecordingFormat.
var (
	RecordingFormat_name = map[int32]string{
		0:  "RECORDING_FORMAT_UNSPECIFIED",
		1:  "RECORDING_FORMAT_E_360VIDEO",
		2:  "RECORDING_FORMAT_ACOUSTIC",
		3:  "RECORDING_FORMAT_ADULTCONTENT",
		4:  "RECORDING_FORMAT_ADVERTISEMENTVIDEO",
		5:  "RECORDING_FORMAT_ADVICEMAGAZINE",
		6:  "RECORDING_FORMAT_ANIMATION",
		7:  "RECORDING_FORMAT_AWARDSHOW",
		8:  "RECORDING_FORMAT_BALLETVIDEO",
		9:  "RECORDING_FORMAT_BEHINDTHEMUSIC",
		10: "RECORDING_FORMAT_BEHINDTHESCENES",
		11: "RECORDING_FORMAT_BLACKANDWHITEVIDEO",
		12: "RECORDING_FORMAT_CAUSERELATEDRECORDING",
		13: "RECORDING_FORMAT_CHILDRENSFILM",
		14: "RECORDING_FORMAT_COLORIZEDVIDEO",
		15: "RECORDING_FORMAT_COLUMNVIDEO",
		16: "RECORDING_FORMAT_CONCERTCLIP",
		17: "RECORDING_FORMAT_CONCERTVIDEO",
		18: "RECORDING_FORMAT_CONTENTPROVIDERORIGINALS",
		19: "RECORDING_FORMAT_CORPORATEFILM",
		20: "RECORDING_FORMAT_CREDITS",
		21: "RECORDING_FORMAT_DANCEVIDEO",
		22: "RECORDING_FORMAT_DOCUMENTARY",
		23: "RECORDING_FORMAT_DRAMA",
		24: "RECORDING_FORMAT_DRAMATICOMUSICALVIDEO",
		25: "RECORDING_FORMAT_EDUCATIONALVIDEO",
		26: "RECORDING_FORMAT_EPISODE",
		27: "RECORDING_FORMAT_FEATUREFILM",
		28: "RECORDING_FORMAT_FICTION",
		29: "RECORDING_FORMAT_INFOMERCIALVIDEO",
		30: "RECORDING_FORMAT_INTERACTIVERESOURCE",
		31: "RECORDING_FORMAT_INTERVIEW",
		32: "RECORDING_FORMAT_KARAOKE",
		33: "RECORDING_FORMAT_LIVEEVENTRECORDING",
		34: "RECORDING_FORMAT_LIVEEVENTRECORDINGINSTUDIO",
		35: "RECORDING_FORMAT_LIVEEVENTVIDEO",
		36: "RECORDING_FORMAT_LIVESTREAM",
		37: "RECORDING_FORMAT_LOWCOMPLEXITYVIDEO",
		38: "RECORDING_FORMAT_LYRICVIDEO",
		39: "RECORDING_FORMAT_MAGAZINE",
		40: "RECORDING_FORMAT_MENU",
		41: "RECORDING_FORMAT_MULTIMEDIAVIDEO",
		42: "RECORDING_FORMAT_MUSICALWORKCLIP",
		43: "RECORDING_FORMAT_MUSICALWORKREADALONGVIDEO",
		44: "RECORDING_FORMAT_MUSICALWORKTRAILER",
		45: "RECORDING_FORMAT_MUSICALWORKVIDEOCHAPTER",
		46: "RECORDING_FORMAT_NEWS",
		47: "RECORDING_FORMAT_NONMUSICALWORKCLIP",
		48: "RECORDING_FORMAT_NONMUSICALWORKREADALONGVIDEO",
		49: "RECORDING_FORMAT_NONMUSICALWORKTRAILER",
		50: "RECORDING_FORMAT_NONMUSICALWORKVIDEOCHAPTER",
		51: "RECORDING_FORMAT_NONSERIALAUDIOVISUALRECORDING",
		52: "RECORDING_FORMAT_OFFICIALMUSICVIDEO",
		53: "RECORDING_FORMAT_OPERAVIDEO",
		54: "RECORDING_FORMAT_PERFORMANCE",
		55: "RECORDING_FORMAT_RAWFOOTAGE",
		56: "RECORDING_FORMAT_READALONGVIDEO",
		57: "RECORDING_FORMAT_REALITYTVSHOWVIDEO",
		58: "RECORDING_FORMAT_EXCERPT",
		59: "RECORDING_FORMAT_SEASON",
		60: "RECORDING_FORMAT_SERIALAUDIOVISUALRECORDING",
		61: "RECORDING_FORMAT_SERIES",
		62: "RECORDING_FORMAT_SESSION",
		63: "RECORDING_FORMAT_SHORTFILM",
		64: "RECORDING_FORMAT_SILENTVIDEO",
		65: "RECORDING_FORMAT_SKETCHVIDEO",
		66: "RECORDING_FORMAT_SOAPSITCOM",
		67: "RECORDING_FORMAT_SPECIALEVENT",
		68: "RECORDING_FORMAT_SPORT",
		69: "RECORDING_FORMAT_STATICVIDEO",
		70: "RECORDING_FORMAT_STUDIORECORDING",
		71: "RECORDING_FORMAT_THEATRICALWORKVIDEO",
		72: "RECORDING_FORMAT_TOURDIARY",
		73: "RECORDING_FORMAT_TRAILERVIDEO",
		74: "RECORDING_FORMAT_TUTORIAL",
		75: "RECORDING_FORMAT_TVFILM",
		76: "RECORDING_FORMAT_TVFILMPERFORMANCE",
		77: "RECORDING_FORMAT_TVPROGRAM",
		78: "RECORDING_FORMAT_TVSHOWVIDEO",
		79: "RECORDING_FORMAT_UNKNOWN",
		80: "RECORDING_FORMAT_USERDEFINED",
		81: "RECORDING_FORMAT_VERTICALVIDEO",
		82: "RECORDING_FORMAT_VIDEOCHAPTER",
		83: "RECORDING_FORMAT_VIDEOCLIP",
		84: "RECORDING_FORMAT_VIDEOREPORT",
		85: "RECORDING_FORMAT_VIDEOSTEM",
		86: "RECORDING_FORMAT_VIRTUALREALITYEXPERIENCE",
		87: "RECORDING_FORMAT_VISUALIZER",
		88: "RECORDING_FORMAT_VLOG",
		89: "RECORDING_FORMAT_WEBISODE",
		90: "RECORDING_FORMAT_WEBRESOURCE",
	}
	RecordingFormat_value = map[string]int32{
		"RECORDING_FORMAT_UNSPECIFIED":                   0,
		"RECORDING_FORMAT_E_360VIDEO":                    1,
		"RECORDING_FORMAT_ACOUSTIC":                      2,
		"RECORDING_FORMAT_ADULTCONTENT":                  3,
		"RECORDING_FORMAT_ADVERTISEMENTVIDEO":            4,
		"RECORDING_FORMAT_ADVICEMAGAZINE":                5,
		"RECORDING_FORMAT_ANIMATION":                     6,
		"RECORDING_FORMAT_AWARDSHOW":                     7,
		"RECORDING_FORMAT_BALLETVIDEO":                   8,
		"RECORDING_FORMAT_BEHINDTHEMUSIC":                9,
		"RECORDING_FORMAT_BEHINDTHESCENES":               10,
		"RECORDING_FORMAT_BLACKANDWHITEVIDEO":            11,
		"RECORDING_FORMAT_CAUSERELATEDRECORDING":         12,
		"RECORDING_FORMAT_CHILDRENSFILM":                 13,
		"RECORDING_FORMAT_COLORIZEDVIDEO":                14,
		"RECORDING_FORMAT_COLUMNVIDEO":                   15,
		"RECORDING_FORMAT_CONCERTCLIP":                   16,
		"RECORDING_FORMAT_CONCERTVIDEO":                  17,
		"RECORDING_FORMAT_CONTENTPROVIDERORIGINALS":      18,
		"RECORDING_FORMAT_CORPORATEFILM":                 19,
		"RECORDING_FORMAT_CREDITS":                       20,
		"RECORDING_FORMAT_DANCEVIDEO":                    21,
		"RECORDING_FORMAT_DOCUMENTARY":                   22,
		"RECORDING_FORMAT_DRAMA":                         23,
		"RECORDING_FORMAT_DRAMATICOMUSICALVIDEO":         24,
		"RECORDING_FORMAT_EDUCATIONALVIDEO":              25,
		"RECORDING_FORMAT_EPISODE":                       26,
		"RECORDING_FORMAT_FEATUREFILM":                   27,
		"RECORDING_FORMAT_FICTION":                       28,
		"RECORDING_FORMAT_INFOMERCIALVIDEO":              29,
		"RECORDING_FORMAT_INTERACTIVERESOURCE":           30,
		"RECORDING_FORMAT_INTERVIEW":                     31,
		"RECORDING_FORMAT_KARAOKE":                       32,
		"RECORDING_FORMAT_LIVEEVENTRECORDING":            33,
		"RECORDING_FORMAT_LIVEEVENTRECORDINGINSTUDIO":    34,
		"RECORDING_FORMAT_LIVEEVENTVIDEO":                35,
		"RECORDING_FORMAT_LIVESTREAM":                    36,
		"RECORDING_FORMAT_LOWCOMPLEXITYVIDEO":            37,
		"RECORDING_FORMAT_LYRICVIDEO":                    38,
		"RECORDING_FORMAT_MAGAZINE":                      39,
		"RECORDING_FORMAT_MENU":                          40,
		"RECORDING_FORMAT_MULTIMEDIAVIDEO":               41,
		"RECORDING_FORMAT_MUSICALWORKCLIP":               42,
		"RECORDING_FORMAT_MUSICALWORKREADALONGVIDEO":     43,
		"RECORDING_FORMAT_MUSICALWORKTRAILER":            44,
		"RECORDING_FORMAT_MUSICALWORKVIDEOCHAPTER":       45,
		"RECORDING_FORMAT_NEWS":                          46,
		"RECORDING_FORMAT_NONMUSICALWORKCLIP":            47,
		"RECORDING_FORMAT_NONMUSICALWORKREADALONGVIDEO":  48,
		"RECORDING_FORMAT_NONMUSICALWORKTRAILER":         49,
		"RECORDING_FORMAT_NONMUSICALWORKVIDEOCHAPTER":    50,
		"RECORDING_FORMAT_NONSERIALAUDIOVISUALRECORDING": 51,
		"RECORDING_FORMAT_OFFICIALMUSICVIDEO":            52,
		"RECORDING_FORMAT_OPERAVIDEO":                    53,
		"RECORDING_FORMAT_PERFORMANCE":                   54,
		"RECORDING_FORMAT_RAWFOOTAGE":                    55,
		"RECORDING_FORMAT_READALONGVIDEO":                56,
		"RECORDING_FORMAT_REALITYTVSHOWVIDEO":            57,
		"RECORDING_FORMAT_EXCERPT":                       58,
		"RECORDING_FORMAT_SEASON":                        59,
		"RECORDING_FORMAT_SERIALAUDIOVISUALRECORDING":    60,
		"RECORDING_FORMAT_SERIES":                        61,
		"RECORDING_FORMAT_SESSION":                       62,
		"RECORDING_FORMAT_SHORTFILM":                     63,
		"RECORDING_FORMAT_SILENTVIDEO":                   64,
		"RECORDING_FORMAT_SKETCHVIDEO":                   65,
		"RECORDING_FORMAT_SOAPSITCOM":                    66,
		"RECORDING_FORMAT_SPECIALEVENT":                  67,
		"RECORDING_FORMAT_SPORT":                         68,
		"RECORDING_FORMAT_STATICVIDEO":                   69,
		"RECORDING_FORMAT_STUDIORECORDING":               70,
		"RECORDING_FORMAT_THEATRICALWORKVIDEO":           71,
		"RECORDING_FORMAT_TOURDIARY":                     72,
		"RECORDING_FORMAT_TRAILERVIDEO":                  73,
		"RECORDING_FORMAT_TUTORIAL":                      74,
		"RECORDING_FORMAT_TVFILM":                        75,
		"RECORDING_FORMAT_TVFILMPERFORMANCE":             76,
		"RECORDING_FORMAT_TVPROGRAM":                     77,
		"RECORDING_FORMAT_TVSHOWVIDEO":                   78,
		"RECORDING_FORMAT_UNKNOWN":                       79,
		"RECORDING_FORMAT_USERDEFINED":                   80,
		"RECORDING_FORMAT_VERTICALVIDEO":                 81,
		"RECORDING_FORMAT_VIDEOCHAPTER":                  82,
		"RECORDING_FORMAT_VIDEOCLIP":                     83,
		"RECORDING_FORMAT_VIDEOREPORT":                   84,
		"RECORDING_FORMAT_VIDEOSTEM":                     85,
		"RECORDING_FORMAT_VIRTUALREALITYEXPERIENCE":      86,
		"RECORDING_FORMAT_VISUALIZER":                    87,
		"RECORDING_FORMAT_VLOG":                          88,
		"RECORDING_FORMAT_WEBISODE":                      89,
		"RECORDING_FORMAT_WEBRESOURCE":                   90,
	}
)

func (x RecordingFormat) Enum() *RecordingFormat {
	p := new(RecordingFormat)
	*p = x
	return p
}

func (x RecordingFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[163].Descriptor()
}

func (RecordingFormat) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[163]
}

func (x RecordingFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordingFormat.Descriptor instead.
func (RecordingFormat) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{163}
}

type RecordingMode int32

const (
	RecordingMode_RECORDING_MODE_UNSPECIFIED       RecordingMode = 0
	RecordingMode_RECORDING_MODE_BINAURALAUDIO     RecordingMode = 1
	RecordingMode_RECORDING_MODE_IMMERSIVEAUDIO    RecordingMode = 2
	RecordingMode_RECORDING_MODE_LCR               RecordingMode = 3
	RecordingMode_RECORDING_MODE_MONO              RecordingMode = 4
	RecordingMode_RECORDING_MODE_MULTICHANNELAUDIO RecordingMode = 5
	RecordingMode_RECORDING_MODE_MULTITRACK        RecordingMode = 6
	RecordingMode_RECORDING_MODE_QUAD              RecordingMode = 7
	RecordingMode_RECORDING_MODE_STEMS             RecordingMode = 8
	RecordingMode_RECORDING_MODE_STEREO            RecordingMode = 9
	RecordingMode_RECORDING_MODE_SURROUNDSOUND     RecordingMode = 10
	RecordingMode_RECORDING_MODE_UNKNOWN           RecordingMode = 11
)

// Enum value maps for RecordingMode.
var (
	RecordingMode_name = map[int32]string{
		0:  "RECORDING_MODE_UNSPECIFIED",
		1:  "RECORDING_MODE_BINAURALAUDIO",
		2:  "RECORDING_MODE_IMMERSIVEAUDIO",
		3:  "RECORDING_MODE_LCR",
		4:  "RECORDING_MODE_MONO",
		5:  "RECORDING_MODE_MULTICHANNELAUDIO",
		6:  "RECORDING_MODE_MULTITRACK",
		7:  "RECORDING_MODE_QUAD",
		8:  "RECORDING_MODE_STEMS",
		9:  "RECORDING_MODE_STEREO",
		10: "RECORDING_MODE_SURROUNDSOUND",
		11: "RECORDING_MODE_UNKNOWN",
	}
	RecordingMode_value = map[string]int32{
		"RECORDING_MODE_UNSPECIFIED":       0,
		"RECORDING_MODE_BINAURALAUDIO":     1,
		"RECORDING_MODE_IMMERSIVEAUDIO":    2,
		"RECORDING_MODE_LCR":               3,
		"RECORDING_MODE_MONO":              4,
		"RECORDING_MODE_MULTICHANNELAUDIO": 5,
		"RECORDING_MODE_MULTITRACK":        6,
		"RECORDING_MODE_QUAD":              7,
		"RECORDING_MODE_STEMS":             8,
		"RECORDING_MODE_STEREO":            9,
		"RECORDING_MODE_SURROUNDSOUND":     10,
		"RECORDING_MODE_UNKNOWN":           11,
	}
)

func (x RecordingMode) Enum() *RecordingMode {
	p := new(RecordingMode)
	*p = x
	return p
}

func (x RecordingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[164].Descriptor()
}

func (RecordingMode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[164]
}

func (x RecordingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordingMode.Descriptor instead.
func (RecordingMode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{164}
}

type ReferenceCreation int32

const (
	ReferenceCreation_REFERENCE_CREATION_UNSPECIFIED       ReferenceCreation = 0
	ReferenceCreation_REFERENCE_CREATION_REFERENCERESOURCE ReferenceCreation = 1
	ReferenceCreation_REFERENCE_CREATION_CONSUMERRESOURCE  ReferenceCreation = 2
)

// Enum value maps for ReferenceCreation.
var (
	ReferenceCreation_name = map[int32]string{
		0: "REFERENCE_CREATION_UNSPECIFIED",
		1: "REFERENCE_CREATION_REFERENCERESOURCE",
		2: "REFERENCE_CREATION_CONSUMERRESOURCE",
	}
	ReferenceCreation_value = map[string]int32{
		"REFERENCE_CREATION_UNSPECIFIED":       0,
		"REFERENCE_CREATION_REFERENCERESOURCE": 1,
		"REFERENCE_CREATION_CONSUMERRESOURCE":  2,
	}
)

func (x ReferenceCreation) Enum() *ReferenceCreation {
	p := new(ReferenceCreation)
	*p = x
	return p
}

func (x ReferenceCreation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceCreation) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[165].Descriptor()
}

func (ReferenceCreation) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[165]
}

func (x ReferenceCreation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceCreation.Descriptor instead.
func (ReferenceCreation) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{165}
}

type ReferenceUnit int32

const (
	ReferenceUnit_REFERENCE_UNIT_UNSPECIFIED ReferenceUnit = 0
	ReferenceUnit_REFERENCE_UNIT_PERLICENSE  ReferenceUnit = 1
	ReferenceUnit_REFERENCE_UNIT_PERUSE      ReferenceUnit = 2
)

// Enum value maps for ReferenceUnit.
var (
	ReferenceUnit_name = map[int32]string{
		0: "REFERENCE_UNIT_UNSPECIFIED",
		1: "REFERENCE_UNIT_PERLICENSE",
		2: "REFERENCE_UNIT_PERUSE",
	}
	ReferenceUnit_value = map[string]int32{
		"REFERENCE_UNIT_UNSPECIFIED": 0,
		"REFERENCE_UNIT_PERLICENSE":  1,
		"REFERENCE_UNIT_PERUSE":      2,
	}
)

func (x ReferenceUnit) Enum() *ReferenceUnit {
	p := new(ReferenceUnit)
	*p = x
	return p
}

func (x ReferenceUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[166].Descriptor()
}

func (ReferenceUnit) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[166]
}

func (x ReferenceUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceUnit.Descriptor instead.
func (ReferenceUnit) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{166}
}

type RegistrationStatus int32

const (
	RegistrationStatus_REGISTRATION_STATUS_UNSPECIFIED                  RegistrationStatus = 0
	RegistrationStatus_REGISTRATION_STATUS_CLAIMMEETSCOREDATAPROFILE    RegistrationStatus = 1
	RegistrationStatus_REGISTRATION_STATUS_CLAIMMEETSRECOMMENDEDPROFILE RegistrationStatus = 2
	RegistrationStatus_REGISTRATION_STATUS_PENDINGREVIEW                RegistrationStatus = 3
	RegistrationStatus_REGISTRATION_STATUS_RESOURCEREGISTEREDINVALID    RegistrationStatus = 4
	RegistrationStatus_REGISTRATION_STATUS_RESOURCEREGISTEREDVALID      RegistrationStatus = 5
	RegistrationStatus_REGISTRATION_STATUS_REGISTRATIONREJECTED         RegistrationStatus = 6
)

// Enum value maps for RegistrationStatus.
var (
	RegistrationStatus_name = map[int32]string{
		0: "REGISTRATION_STATUS_UNSPECIFIED",
		1: "REGISTRATION_STATUS_CLAIMMEETSCOREDATAPROFILE",
		2: "REGISTRATION_STATUS_CLAIMMEETSRECOMMENDEDPROFILE",
		3: "REGISTRATION_STATUS_PENDINGREVIEW",
		4: "REGISTRATION_STATUS_RESOURCEREGISTEREDINVALID",
		5: "REGISTRATION_STATUS_RESOURCEREGISTEREDVALID",
		6: "REGISTRATION_STATUS_REGISTRATIONREJECTED",
	}
	RegistrationStatus_value = map[string]int32{
		"REGISTRATION_STATUS_UNSPECIFIED":                  0,
		"REGISTRATION_STATUS_CLAIMMEETSCOREDATAPROFILE":    1,
		"REGISTRATION_STATUS_CLAIMMEETSRECOMMENDEDPROFILE": 2,
		"REGISTRATION_STATUS_PENDINGREVIEW":                3,
		"REGISTRATION_STATUS_RESOURCEREGISTEREDINVALID":    4,
		"REGISTRATION_STATUS_RESOURCEREGISTEREDVALID":      5,
		"REGISTRATION_STATUS_REGISTRATIONREJECTED":         6,
	}
)

func (x RegistrationStatus) Enum() *RegistrationStatus {
	p := new(RegistrationStatus)
	*p = x
	return p
}

func (x RegistrationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistrationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[167].Descriptor()
}

func (RegistrationStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[167]
}

func (x RegistrationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistrationStatus.Descriptor instead.
func (RegistrationStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{167}
}

type RejectionReason int32

const (
	RejectionReason_REJECTION_REASON_UNSPECIFIED                          RejectionReason = 0
	RejectionReason_REJECTION_REASON_NOTFOUNDBYDSP                        RejectionReason = 1
	RejectionReason_REJECTION_REASON_NOTFOUNDBYRELINQUISHINGRECORDCOMPANY RejectionReason = 2
	RejectionReason_REJECTION_REASON_REJECTEDBYRELINQUISHINGRECORDCOMPANY RejectionReason = 3
	RejectionReason_REJECTION_REASON_USERDEFINED                          RejectionReason = 4
)

// Enum value maps for RejectionReason.
var (
	RejectionReason_name = map[int32]string{
		0: "REJECTION_REASON_UNSPECIFIED",
		1: "REJECTION_REASON_NOTFOUNDBYDSP",
		2: "REJECTION_REASON_NOTFOUNDBYRELINQUISHINGRECORDCOMPANY",
		3: "REJECTION_REASON_REJECTEDBYRELINQUISHINGRECORDCOMPANY",
		4: "REJECTION_REASON_USERDEFINED",
	}
	RejectionReason_value = map[string]int32{
		"REJECTION_REASON_UNSPECIFIED":                          0,
		"REJECTION_REASON_NOTFOUNDBYDSP":                        1,
		"REJECTION_REASON_NOTFOUNDBYRELINQUISHINGRECORDCOMPANY": 2,
		"REJECTION_REASON_REJECTEDBYRELINQUISHINGRECORDCOMPANY": 3,
		"REJECTION_REASON_USERDEFINED":                          4,
	}
)

func (x RejectionReason) Enum() *RejectionReason {
	p := new(RejectionReason)
	*p = x
	return p
}

func (x RejectionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RejectionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[168].Descriptor()
}

func (RejectionReason) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[168]
}

func (x RejectionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RejectionReason.Descriptor instead.
func (RejectionReason) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{168}
}

type RelationalRelator int32

const (
	RelationalRelator_RELATIONAL_RELATOR_UNSPECIFIED       RelationalRelator = 0
	RelationalRelator_RELATIONAL_RELATOR_EQUALTO           RelationalRelator = 1
	RelationalRelator_RELATIONAL_RELATOR_LESSTHAN          RelationalRelator = 2
	RelationalRelator_RELATIONAL_RELATOR_LESSTHANOREQUALTO RelationalRelator = 3
	RelationalRelator_RELATIONAL_RELATOR_MORETHAN          RelationalRelator = 4
	RelationalRelator_RELATIONAL_RELATOR_MORETHANOREQUALTO RelationalRelator = 5
	RelationalRelator_RELATIONAL_RELATOR_NOTEQUALTO        RelationalRelator = 6
)

// Enum value maps for RelationalRelator.
var (
	RelationalRelator_name = map[int32]string{
		0: "RELATIONAL_RELATOR_UNSPECIFIED",
		1: "RELATIONAL_RELATOR_EQUALTO",
		2: "RELATIONAL_RELATOR_LESSTHAN",
		3: "RELATIONAL_RELATOR_LESSTHANOREQUALTO",
		4: "RELATIONAL_RELATOR_MORETHAN",
		5: "RELATIONAL_RELATOR_MORETHANOREQUALTO",
		6: "RELATIONAL_RELATOR_NOTEQUALTO",
	}
	RelationalRelator_value = map[string]int32{
		"RELATIONAL_RELATOR_UNSPECIFIED":       0,
		"RELATIONAL_RELATOR_EQUALTO":           1,
		"RELATIONAL_RELATOR_LESSTHAN":          2,
		"RELATIONAL_RELATOR_LESSTHANOREQUALTO": 3,
		"RELATIONAL_RELATOR_MORETHAN":          4,
		"RELATIONAL_RELATOR_MORETHANOREQUALTO": 5,
		"RELATIONAL_RELATOR_NOTEQUALTO":        6,
	}
)

func (x RelationalRelator) Enum() *RelationalRelator {
	p := new(RelationalRelator)
	*p = x
	return p
}

func (x RelationalRelator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationalRelator) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[169].Descriptor()
}

func (RelationalRelator) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[169]
}

func (x RelationalRelator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationalRelator.Descriptor instead.
func (RelationalRelator) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{169}
}

type ReleaseProfileVariantVersionId int32

const (
	ReleaseProfileVariantVersionId_RELEASE_PROFILE_VARIANT_VERSION_ID_UNSPECIFIED        ReleaseProfileVariantVersionId = 0
	ReleaseProfileVariantVersionId_RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET           ReleaseProfileVariantVersionId = 1
	ReleaseProfileVariantVersionId_RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET_CLASSICAL ReleaseProfileVariantVersionId = 2
	ReleaseProfileVariantVersionId_RELEASE_PROFILE_VARIANT_VERSION_ID_CLASSICAL          ReleaseProfileVariantVersionId = 3
)

// Enum value maps for ReleaseProfileVariantVersionId.
var (
	ReleaseProfileVariantVersionId_name = map[int32]string{
		0: "RELEASE_PROFILE_VARIANT_VERSION_ID_UNSPECIFIED",
		1: "RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET",
		2: "RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET_CLASSICAL",
		3: "RELEASE_PROFILE_VARIANT_VERSION_ID_CLASSICAL",
	}
	ReleaseProfileVariantVersionId_value = map[string]int32{
		"RELEASE_PROFILE_VARIANT_VERSION_ID_UNSPECIFIED":        0,
		"RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET":           1,
		"RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET_CLASSICAL": 2,
		"RELEASE_PROFILE_VARIANT_VERSION_ID_CLASSICAL":          3,
	}
)

func (x ReleaseProfileVariantVersionId) Enum() *ReleaseProfileVariantVersionId {
	p := new(ReleaseProfileVariantVersionId)
	*p = x
	return p
}

func (x ReleaseProfileVariantVersionId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseProfileVariantVersionId) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[170].Descriptor()
}

func (ReleaseProfileVariantVersionId) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[170]
}

func (x ReleaseProfileVariantVersionId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseProfileVariantVersionId.Descriptor instead.
func (ReleaseProfileVariantVersionId) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{170}
}

type ReleaseProfileVersionId int32

const (
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_UNSPECIFIED              ReleaseProfileVersionId = 0
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_AUDIO                    ReleaseProfileVersionId = 1
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_DJMIX                    ReleaseProfileVersionId = 2
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_LONGFORMMUSICALWORKVIDEO ReleaseProfileVersionId = 3
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_MIXEDMEDIA               ReleaseProfileVersionId = 4
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_RINGTONE                 ReleaseProfileVersionId = 5
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_SIMPLEAUDIOSINGLE        ReleaseProfileVersionId = 6
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_SIMPLEVIDEOSINGLE        ReleaseProfileVersionId = 7
	ReleaseProfileVersionId_RELEASE_PROFILE_VERSION_ID_VIDEO                    ReleaseProfileVersionId = 8
)

// Enum value maps for ReleaseProfileVersionId.
var (
	ReleaseProfileVersionId_name = map[int32]string{
		0: "RELEASE_PROFILE_VERSION_ID_UNSPECIFIED",
		1: "RELEASE_PROFILE_VERSION_ID_AUDIO",
		2: "RELEASE_PROFILE_VERSION_ID_DJMIX",
		3: "RELEASE_PROFILE_VERSION_ID_LONGFORMMUSICALWORKVIDEO",
		4: "RELEASE_PROFILE_VERSION_ID_MIXEDMEDIA",
		5: "RELEASE_PROFILE_VERSION_ID_RINGTONE",
		6: "RELEASE_PROFILE_VERSION_ID_SIMPLEAUDIOSINGLE",
		7: "RELEASE_PROFILE_VERSION_ID_SIMPLEVIDEOSINGLE",
		8: "RELEASE_PROFILE_VERSION_ID_VIDEO",
	}
	ReleaseProfileVersionId_value = map[string]int32{
		"RELEASE_PROFILE_VERSION_ID_UNSPECIFIED":              0,
		"RELEASE_PROFILE_VERSION_ID_AUDIO":                    1,
		"RELEASE_PROFILE_VERSION_ID_DJMIX":                    2,
		"RELEASE_PROFILE_VERSION_ID_LONGFORMMUSICALWORKVIDEO": 3,
		"RELEASE_PROFILE_VERSION_ID_MIXEDMEDIA":               4,
		"RELEASE_PROFILE_VERSION_ID_RINGTONE":                 5,
		"RELEASE_PROFILE_VERSION_ID_SIMPLEAUDIOSINGLE":        6,
		"RELEASE_PROFILE_VERSION_ID_SIMPLEVIDEOSINGLE":        7,
		"RELEASE_PROFILE_VERSION_ID_VIDEO":                    8,
	}
)

func (x ReleaseProfileVersionId) Enum() *ReleaseProfileVersionId {
	p := new(ReleaseProfileVersionId)
	*p = x
	return p
}

func (x ReleaseProfileVersionId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseProfileVersionId) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[171].Descriptor()
}

func (ReleaseProfileVersionId) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[171]
}

func (x ReleaseProfileVersionId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseProfileVersionId.Descriptor instead.
func (ReleaseProfileVersionId) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{171}
}

type ReleaseRelationshipType int32

const (
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED                   ReleaseRelationshipType = 0
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE         ReleaseRelationshipType = 1
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE     ReleaseRelationshipType = 2
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM                ReleaseRelationshipType = 3
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST         ReleaseRelationshipType = 4
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST                 ReleaseRelationshipType = 5
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT       ReleaseRelationshipType = 6
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT             ReleaseRelationshipType = 7
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISAUDIOUSEDFOR                ReleaseRelationshipType = 8
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING           ReleaseRelationshipType = 9
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL ReleaseRelationshipType = 10
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISEDITEDVERSIONOF             ReleaseRelationshipType = 11
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO           ReleaseRelationshipType = 12
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO           ReleaseRelationshipType = 13
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM           ReleaseRelationshipType = 14
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO                   ReleaseRelationshipType = 15
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO                   ReleaseRelationshipType = 16
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISIMMERSIVEEDITIONOF          ReleaseRelationshipType = 17
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISNONIMMERSIVEEDITIONOF       ReleaseRelationshipType = 18
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE               ReleaseRelationshipType = 19
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL ReleaseRelationshipType = 20
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE          ReleaseRelationshipType = 21
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM          ReleaseRelationshipType = 22
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISSLOWEDDOWNOF                ReleaseRelationshipType = 23
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISSOURCEOFEDITEDVERSION       ReleaseRelationshipType = 24
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISSPEDUPOF                    ReleaseRelationshipType = 25
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_ISVIDEOUSEDFOR                ReleaseRelationshipType = 26
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_UNKNOWN                       ReleaseRelationshipType = 27
	ReleaseRelationshipType_RELEASE_RELATIONSHIP_TYPE_USERDEFINED                   ReleaseRelationshipType = 28
)

// Enum value maps for ReleaseRelationshipType.
var (
	ReleaseRelationshipType_name = map[int32]string{
		0:  "RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED",
		1:  "RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE",
		2:  "RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE",
		3:  "RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM",
		4:  "RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST",
		5:  "RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST",
		6:  "RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT",
		7:  "RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT",
		8:  "RELEASE_RELATIONSHIP_TYPE_ISAUDIOUSEDFOR",
		9:  "RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING",
		10: "RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL",
		11: "RELEASE_RELATIONSHIP_TYPE_ISEDITEDVERSIONOF",
		12: "RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO",
		13: "RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO",
		14: "RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM",
		15: "RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO",
		16: "RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO",
		17: "RELEASE_RELATIONSHIP_TYPE_ISIMMERSIVEEDITIONOF",
		18: "RELEASE_RELATIONSHIP_TYPE_ISNONIMMERSIVEEDITIONOF",
		19: "RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE",
		20: "RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL",
		21: "RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE",
		22: "RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM",
		23: "RELEASE_RELATIONSHIP_TYPE_ISSLOWEDDOWNOF",
		24: "RELEASE_RELATIONSHIP_TYPE_ISSOURCEOFEDITEDVERSION",
		25: "RELEASE_RELATIONSHIP_TYPE_ISSPEDUPOF",
		26: "RELEASE_RELATIONSHIP_TYPE_ISVIDEOUSEDFOR",
		27: "RELEASE_RELATIONSHIP_TYPE_UNKNOWN",
		28: "RELEASE_RELATIONSHIP_TYPE_USERDEFINED",
	}
	ReleaseRelationshipType_value = map[string]int32{
		"RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED":                   0,
		"RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE":         1,
		"RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE":     2,
		"RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM":                3,
		"RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST":         4,
		"RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST":                 5,
		"RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT":       6,
		"RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT":             7,
		"RELEASE_RELATIONSHIP_TYPE_ISAUDIOUSEDFOR":                8,
		"RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING":           9,
		"RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL": 10,
		"RELEASE_RELATIONSHIP_TYPE_ISEDITEDVERSIONOF":             11,
		"RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO":           12,
		"RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO":           13,
		"RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM":           14,
		"RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO":                   15,
		"RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO":                   16,
		"RELEASE_RELATIONSHIP_TYPE_ISIMMERSIVEEDITIONOF":          17,
		"RELEASE_RELATIONSHIP_TYPE_ISNONIMMERSIVEEDITIONOF":       18,
		"RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE":               19,
		"RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL": 20,
		"RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE":          21,
		"RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM":          22,
		"RELEASE_RELATIONSHIP_TYPE_ISSLOWEDDOWNOF":                23,
		"RELEASE_RELATIONSHIP_TYPE_ISSOURCEOFEDITEDVERSION":       24,
		"RELEASE_RELATIONSHIP_TYPE_ISSPEDUPOF":                    25,
		"RELEASE_RELATIONSHIP_TYPE_ISVIDEOUSEDFOR":                26,
		"RELEASE_RELATIONSHIP_TYPE_UNKNOWN":                       27,
		"RELEASE_RELATIONSHIP_TYPE_USERDEFINED":                   28,
	}
)

func (x ReleaseRelationshipType) Enum() *ReleaseRelationshipType {
	p := new(ReleaseRelationshipType)
	*p = x
	return p
}

func (x ReleaseRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[172].Descriptor()
}

func (ReleaseRelationshipType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[172]
}

func (x ReleaseRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseRelationshipType.Descriptor instead.
func (ReleaseRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{172}
}

type ReleaseResourceType int32

const (
	ReleaseResourceType_RELEASE_RESOURCE_TYPE_UNSPECIFIED       ReleaseResourceType = 0
	ReleaseResourceType_RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE   ReleaseResourceType = 1
	ReleaseResourceType_RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE ReleaseResourceType = 2
)

// Enum value maps for ReleaseResourceType.
var (
	ReleaseResourceType_name = map[int32]string{
		0: "RELEASE_RESOURCE_TYPE_UNSPECIFIED",
		1: "RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE",
		2: "RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE",
	}
	ReleaseResourceType_value = map[string]int32{
		"RELEASE_RESOURCE_TYPE_UNSPECIFIED":       0,
		"RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE":   1,
		"RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE": 2,
	}
)

func (x ReleaseResourceType) Enum() *ReleaseResourceType {
	p := new(ReleaseResourceType)
	*p = x
	return p
}

func (x ReleaseResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[173].Descriptor()
}

func (ReleaseResourceType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[173]
}

func (x ReleaseResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseResourceType.Descriptor instead.
func (ReleaseResourceType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{173}
}

type ReleaseType int32

const (
	ReleaseType_RELEASE_TYPE_UNSPECIFIED                        ReleaseType = 0
	ReleaseType_RELEASE_TYPE_ALBUM                              ReleaseType = 1
	ReleaseType_RELEASE_TYPE_ALERTTONERELEASE                   ReleaseType = 2
	ReleaseType_RELEASE_TYPE_ASPERCONTRACT                      ReleaseType = 3
	ReleaseType_RELEASE_TYPE_AUDIOBOOKRELEASE                   ReleaseType = 4
	ReleaseType_RELEASE_TYPE_AUDIODRAMARELEASE                  ReleaseType = 5
	ReleaseType_RELEASE_TYPE_BACKCOVERIMAGERELEASE              ReleaseType = 6
	ReleaseType_RELEASE_TYPE_BOOKLETBACKIMAGERELEASE            ReleaseType = 7
	ReleaseType_RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE           ReleaseType = 8
	ReleaseType_RELEASE_TYPE_BOOKLETRELEASE                     ReleaseType = 9
	ReleaseType_RELEASE_TYPE_BUNDLE                             ReleaseType = 10
	ReleaseType_RELEASE_TYPE_CLASSICALALBUM                     ReleaseType = 11
	ReleaseType_RELEASE_TYPE_CLASSICALDIGITALBOXEDSET           ReleaseType = 12
	ReleaseType_RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM           ReleaseType = 13
	ReleaseType_RELEASE_TYPE_CONCERTVIDEO                       ReleaseType = 14
	ReleaseType_RELEASE_TYPE_DIGITALBOXSETRELEASE               ReleaseType = 15
	ReleaseType_RELEASE_TYPE_DJMIX                              ReleaseType = 16
	ReleaseType_RELEASE_TYPE_DOCUMENTARY                        ReleaseType = 17
	ReleaseType_RELEASE_TYPE_DRAMA                              ReleaseType = 18
	ReleaseType_RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE       ReleaseType = 19
	ReleaseType_RELEASE_TYPE_EBOOKRELEASE                       ReleaseType = 20
	ReleaseType_RELEASE_TYPE_EP                                 ReleaseType = 21
	ReleaseType_RELEASE_TYPE_EPISODE                            ReleaseType = 22
	ReleaseType_RELEASE_TYPE_FEATUREFILM                        ReleaseType = 23
	ReleaseType_RELEASE_TYPE_KARAOKERELEASE                     ReleaseType = 24
	ReleaseType_RELEASE_TYPE_LIVEEVENTVIDEO                     ReleaseType = 25
	ReleaseType_RELEASE_TYPE_LOGORELEASE                        ReleaseType = 26
	ReleaseType_RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE    ReleaseType = 27
	ReleaseType_RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE ReleaseType = 28
	ReleaseType_RELEASE_TYPE_LYRICSHEETRELEASE                  ReleaseType = 29
	ReleaseType_RELEASE_TYPE_MULTIMEDIAALBUM                    ReleaseType = 30
	ReleaseType_RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET          ReleaseType = 31
	ReleaseType_RELEASE_TYPE_MULTIMEDIASINGLE                   ReleaseType = 32
	ReleaseType_RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE        ReleaseType = 33
	ReleaseType_RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE     ReleaseType = 34
	ReleaseType_RELEASE_TYPE_PLAYLIST                           ReleaseType = 35
	ReleaseType_RELEASE_TYPE_RINGBACKTONERELEASE                ReleaseType = 36
	ReleaseType_RELEASE_TYPE_RINGTONERELEASE                    ReleaseType = 37
	ReleaseType_RELEASE_TYPE_SEASON                             ReleaseType = 38
	ReleaseType_RELEASE_TYPE_SERIES                             ReleaseType = 39
	ReleaseType_RELEASE_TYPE_SHEETMUSICRELEASE                  ReleaseType = 40
	ReleaseType_RELEASE_TYPE_SHORTFILM                          ReleaseType = 41
	ReleaseType_RELEASE_TYPE_SINGLE                             ReleaseType = 42
	ReleaseType_RELEASE_TYPE_SINGLERESOURCERELEASE              ReleaseType = 43
	ReleaseType_RELEASE_TYPE_STEMBUNDLE                         ReleaseType = 44
	ReleaseType_RELEASE_TYPE_USERDEFINED                        ReleaseType = 45
	ReleaseType_RELEASE_TYPE_VIDEOALBUM                         ReleaseType = 46
	ReleaseType_RELEASE_TYPE_VIDEOMASTERTONERELEASE             ReleaseType = 47
	ReleaseType_RELEASE_TYPE_VIDEOSINGLE                        ReleaseType = 48
	ReleaseType_RELEASE_TYPE_WALLPAPERRELEASE                   ReleaseType = 49
	ReleaseType_RELEASE_TYPE_TRACKRELEASE                       ReleaseType = 50
)

// Enum value maps for ReleaseType.
var (
	ReleaseType_name = map[int32]string{
		0:  "RELEASE_TYPE_UNSPECIFIED",
		1:  "RELEASE_TYPE_ALBUM",
		2:  "RELEASE_TYPE_ALERTTONERELEASE",
		3:  "RELEASE_TYPE_ASPERCONTRACT",
		4:  "RELEASE_TYPE_AUDIOBOOKRELEASE",
		5:  "RELEASE_TYPE_AUDIODRAMARELEASE",
		6:  "RELEASE_TYPE_BACKCOVERIMAGERELEASE",
		7:  "RELEASE_TYPE_BOOKLETBACKIMAGERELEASE",
		8:  "RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE",
		9:  "RELEASE_TYPE_BOOKLETRELEASE",
		10: "RELEASE_TYPE_BUNDLE",
		11: "RELEASE_TYPE_CLASSICALALBUM",
		12: "RELEASE_TYPE_CLASSICALDIGITALBOXEDSET",
		13: "RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM",
		14: "RELEASE_TYPE_CONCERTVIDEO",
		15: "RELEASE_TYPE_DIGITALBOXSETRELEASE",
		16: "RELEASE_TYPE_DJMIX",
		17: "RELEASE_TYPE_DOCUMENTARY",
		18: "RELEASE_TYPE_DRAMA",
		19: "RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE",
		20: "RELEASE_TYPE_EBOOKRELEASE",
		21: "RELEASE_TYPE_EP",
		22: "RELEASE_TYPE_EPISODE",
		23: "RELEASE_TYPE_FEATUREFILM",
		24: "RELEASE_TYPE_KARAOKERELEASE",
		25: "RELEASE_TYPE_LIVEEVENTVIDEO",
		26: "RELEASE_TYPE_LOGORELEASE",
		27: "RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE",
		28: "RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE",
		29: "RELEASE_TYPE_LYRICSHEETRELEASE",
		30: "RELEASE_TYPE_MULTIMEDIAALBUM",
		31: "RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET",
		32: "RELEASE_TYPE_MULTIMEDIASINGLE",
		33: "RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE",
		34: "RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE",
		35: "RELEASE_TYPE_PLAYLIST",
		36: "RELEASE_TYPE_RINGBACKTONERELEASE",
		37: "RELEASE_TYPE_RINGTONERELEASE",
		38: "RELEASE_TYPE_SEASON",
		39: "RELEASE_TYPE_SERIES",
		40: "RELEASE_TYPE_SHEETMUSICRELEASE",
		41: "RELEASE_TYPE_SHORTFILM",
		42: "RELEASE_TYPE_SINGLE",
		43: "RELEASE_TYPE_SINGLERESOURCERELEASE",
		44: "RELEASE_TYPE_STEMBUNDLE",
		45: "RELEASE_TYPE_USERDEFINED",
		46: "RELEASE_TYPE_VIDEOALBUM",
		47: "RELEASE_TYPE_VIDEOMASTERTONERELEASE",
		48: "RELEASE_TYPE_VIDEOSINGLE",
		49: "RELEASE_TYPE_WALLPAPERRELEASE",
		50: "RELEASE_TYPE_TRACKRELEASE",
	}
	ReleaseType_value = map[string]int32{
		"RELEASE_TYPE_UNSPECIFIED":                        0,
		"RELEASE_TYPE_ALBUM":                              1,
		"RELEASE_TYPE_ALERTTONERELEASE":                   2,
		"RELEASE_TYPE_ASPERCONTRACT":                      3,
		"RELEASE_TYPE_AUDIOBOOKRELEASE":                   4,
		"RELEASE_TYPE_AUDIODRAMARELEASE":                  5,
		"RELEASE_TYPE_BACKCOVERIMAGERELEASE":              6,
		"RELEASE_TYPE_BOOKLETBACKIMAGERELEASE":            7,
		"RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE":           8,
		"RELEASE_TYPE_BOOKLETRELEASE":                     9,
		"RELEASE_TYPE_BUNDLE":                             10,
		"RELEASE_TYPE_CLASSICALALBUM":                     11,
		"RELEASE_TYPE_CLASSICALDIGITALBOXEDSET":           12,
		"RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM":           13,
		"RELEASE_TYPE_CONCERTVIDEO":                       14,
		"RELEASE_TYPE_DIGITALBOXSETRELEASE":               15,
		"RELEASE_TYPE_DJMIX":                              16,
		"RELEASE_TYPE_DOCUMENTARY":                        17,
		"RELEASE_TYPE_DRAMA":                              18,
		"RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE":       19,
		"RELEASE_TYPE_EBOOKRELEASE":                       20,
		"RELEASE_TYPE_EP":                                 21,
		"RELEASE_TYPE_EPISODE":                            22,
		"RELEASE_TYPE_FEATUREFILM":                        23,
		"RELEASE_TYPE_KARAOKERELEASE":                     24,
		"RELEASE_TYPE_LIVEEVENTVIDEO":                     25,
		"RELEASE_TYPE_LOGORELEASE":                        26,
		"RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE":    27,
		"RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE": 28,
		"RELEASE_TYPE_LYRICSHEETRELEASE":                  29,
		"RELEASE_TYPE_MULTIMEDIAALBUM":                    30,
		"RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET":          31,
		"RELEASE_TYPE_MULTIMEDIASINGLE":                   32,
		"RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE":        33,
		"RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE":     34,
		"RELEASE_TYPE_PLAYLIST":                           35,
		"RELEASE_TYPE_RINGBACKTONERELEASE":                36,
		"RELEASE_TYPE_RINGTONERELEASE":                    37,
		"RELEASE_TYPE_SEASON":                             38,
		"RELEASE_TYPE_SERIES":                             39,
		"RELEASE_TYPE_SHEETMUSICRELEASE":                  40,
		"RELEASE_TYPE_SHORTFILM":                          41,
		"RELEASE_TYPE_SINGLE":                             42,
		"RELEASE_TYPE_SINGLERESOURCERELEASE":              43,
		"RELEASE_TYPE_STEMBUNDLE":                         44,
		"RELEASE_TYPE_USERDEFINED":                        45,
		"RELEASE_TYPE_VIDEOALBUM":                         46,
		"RELEASE_TYPE_VIDEOMASTERTONERELEASE":             47,
		"RELEASE_TYPE_VIDEOSINGLE":                        48,
		"RELEASE_TYPE_WALLPAPERRELEASE":                   49,
		"RELEASE_TYPE_TRACKRELEASE":                       50,
	}
)

func (x ReleaseType) Enum() *ReleaseType {
	p := new(ReleaseType)
	*p = x
	return p
}

func (x ReleaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[174].Descriptor()
}

func (ReleaseType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[174]
}

func (x ReleaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseType.Descriptor instead.
func (ReleaseType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{174}
}

type ReleaseTypeDSR int32

const (
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_UNSPECIFIED                         ReleaseTypeDSR = 0
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_ADVERTISEMENTVIDEO                  ReleaseTypeDSR = 1
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_ALBUM                               ReleaseTypeDSR = 2
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_ALERTTONERELEASE                    ReleaseTypeDSR = 3
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_ANIMATION                           ReleaseTypeDSR = 4
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_ASPERCONTRACT                       ReleaseTypeDSR = 5
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_AUDIOBOOKRELEASE                    ReleaseTypeDSR = 6
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_AUDIOCLIPRELEASE                    ReleaseTypeDSR = 7
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_BACKCOVERIMAGERELEASE               ReleaseTypeDSR = 8
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_BOOKLETBACKIMAGERELEASE             ReleaseTypeDSR = 9
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_BOOKLETFRONTIMAGERELEASE            ReleaseTypeDSR = 10
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_BOOKLETRELEASE                      ReleaseTypeDSR = 11
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_BUNDLE                              ReleaseTypeDSR = 12
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_CLASSICALALBUM                      ReleaseTypeDSR = 13
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_CONCERTVIDEO                        ReleaseTypeDSR = 14
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_CORPORATEFILM                       ReleaseTypeDSR = 15
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_DIGITALBOXSETRELEASE                ReleaseTypeDSR = 16
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_DOCUMENTARY                         ReleaseTypeDSR = 17
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_DOCUMENTIMAGERELEASE                ReleaseTypeDSR = 18
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_EBOOKRELEASE                        ReleaseTypeDSR = 19
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_EPISODE                             ReleaseTypeDSR = 20
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_FEATUREFILM                         ReleaseTypeDSR = 21
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_FILMBUNDLE                          ReleaseTypeDSR = 22
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_FRONTCOVERIMAGERELEASE              ReleaseTypeDSR = 23
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_ICONRELEASE                         ReleaseTypeDSR = 24
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_INFOMERCIALVIDEO                    ReleaseTypeDSR = 25
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_INTERACTIVEBOOKLETRELEASE           ReleaseTypeDSR = 26
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_KARAOKERELEASE                      ReleaseTypeDSR = 27
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_LIVEEVENTVIDEO                      ReleaseTypeDSR = 28
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_LOGORELEASE                         ReleaseTypeDSR = 29
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_LONGFORMMUSICALWORKVIDEORELEASE     ReleaseTypeDSR = 30
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_LONGFORMNONMUSICALWORKVIDEORELEASE  ReleaseTypeDSR = 31
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_LYRICSHEETRELEASE                   ReleaseTypeDSR = 32
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_MULTIMEDIAALBUM                     ReleaseTypeDSR = 33
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_MULTIMEDIASINGLE                    ReleaseTypeDSR = 34
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_MUSICALWORKBASEDGAMERELEASE         ReleaseTypeDSR = 35
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_MUSICALWORKCLIPRELEASE              ReleaseTypeDSR = 36
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_MUSICALWORKREADALONGVIDEORELEASE    ReleaseTypeDSR = 37
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_MUSICALWORKTRAILERRELEASE           ReleaseTypeDSR = 38
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_MUSICALWORKVIDEOCHAPTERRELEASE      ReleaseTypeDSR = 39
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_NEWS                                ReleaseTypeDSR = 40
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_NONMUSICALWORKBASEDGAMERELEASE      ReleaseTypeDSR = 41
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_NONMUSICALWORKCLIPRELEASE           ReleaseTypeDSR = 42
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_NONMUSICALWORKREADALONGVIDEORELEASE ReleaseTypeDSR = 43
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_NONMUSICALWORKTRAILERRELEASE        ReleaseTypeDSR = 44
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_NONMUSICALWORKVIDEOCHAPTERRELEASE   ReleaseTypeDSR = 45
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_NONSERIALAUDIOVISUALRECORDING       ReleaseTypeDSR = 46
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_PHOTOGRAPHRELEASE                   ReleaseTypeDSR = 47
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_RINGBACKTONERELEASE                 ReleaseTypeDSR = 48
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_RINGTONERELEASE                     ReleaseTypeDSR = 49
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_SCREENSAVERRELEASE                  ReleaseTypeDSR = 50
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_SEASON                              ReleaseTypeDSR = 51
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_SERIES                              ReleaseTypeDSR = 52
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_SHEETMUSICRELEASE                   ReleaseTypeDSR = 53
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_SHORTFORMMUSICALWORKVIDEORELEASE    ReleaseTypeDSR = 54
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_SHORTFORMNONMUSICALWORKVIDEORELEASE ReleaseTypeDSR = 55
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_SINGLE                              ReleaseTypeDSR = 56
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_SINGLERESOURCERELEASE               ReleaseTypeDSR = 57
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_SINGLERESOURCERELEASEWITHCOVERART   ReleaseTypeDSR = 58
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_TRACKRELEASE                        ReleaseTypeDSR = 59
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_TRAILERVIDEO                        ReleaseTypeDSR = 60
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_TRAYIMAGERELEASE                    ReleaseTypeDSR = 61
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_UNKNOWN                             ReleaseTypeDSR = 62
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_USERDEFINED                         ReleaseTypeDSR = 63
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_VIDEOALBUM                          ReleaseTypeDSR = 64
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_VIDEOCHAPTERRELEASE                 ReleaseTypeDSR = 65
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_VIDEOCLIPRELEASE                    ReleaseTypeDSR = 66
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_VIDEOSCREENCAPTURERELEASE           ReleaseTypeDSR = 67
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_VIDEOSINGLE                         ReleaseTypeDSR = 68
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_VIDEOTRACKRELEASE                   ReleaseTypeDSR = 69
	ReleaseTypeDSR_RELEASE_TYPE_D_S_R_WALLPAPERRELEASE                    ReleaseTypeDSR = 70
)

// Enum value maps for ReleaseTypeDSR.
var (
	ReleaseTypeDSR_name = map[int32]string{
		0:  "RELEASE_TYPE_D_S_R_UNSPECIFIED",
		1:  "RELEASE_TYPE_D_S_R_ADVERTISEMENTVIDEO",
		2:  "RELEASE_TYPE_D_S_R_ALBUM",
		3:  "RELEASE_TYPE_D_S_R_ALERTTONERELEASE",
		4:  "RELEASE_TYPE_D_S_R_ANIMATION",
		5:  "RELEASE_TYPE_D_S_R_ASPERCONTRACT",
		6:  "RELEASE_TYPE_D_S_R_AUDIOBOOKRELEASE",
		7:  "RELEASE_TYPE_D_S_R_AUDIOCLIPRELEASE",
		8:  "RELEASE_TYPE_D_S_R_BACKCOVERIMAGERELEASE",
		9:  "RELEASE_TYPE_D_S_R_BOOKLETBACKIMAGERELEASE",
		10: "RELEASE_TYPE_D_S_R_BOOKLETFRONTIMAGERELEASE",
		11: "RELEASE_TYPE_D_S_R_BOOKLETRELEASE",
		12: "RELEASE_TYPE_D_S_R_BUNDLE",
		13: "RELEASE_TYPE_D_S_R_CLASSICALALBUM",
		14: "RELEASE_TYPE_D_S_R_CONCERTVIDEO",
		15: "RELEASE_TYPE_D_S_R_CORPORATEFILM",
		16: "RELEASE_TYPE_D_S_R_DIGITALBOXSETRELEASE",
		17: "RELEASE_TYPE_D_S_R_DOCUMENTARY",
		18: "RELEASE_TYPE_D_S_R_DOCUMENTIMAGERELEASE",
		19: "RELEASE_TYPE_D_S_R_EBOOKRELEASE",
		20: "RELEASE_TYPE_D_S_R_EPISODE",
		21: "RELEASE_TYPE_D_S_R_FEATUREFILM",
		22: "RELEASE_TYPE_D_S_R_FILMBUNDLE",
		23: "RELEASE_TYPE_D_S_R_FRONTCOVERIMAGERELEASE",
		24: "RELEASE_TYPE_D_S_R_ICONRELEASE",
		25: "RELEASE_TYPE_D_S_R_INFOMERCIALVIDEO",
		26: "RELEASE_TYPE_D_S_R_INTERACTIVEBOOKLETRELEASE",
		27: "RELEASE_TYPE_D_S_R_KARAOKERELEASE",
		28: "RELEASE_TYPE_D_S_R_LIVEEVENTVIDEO",
		29: "RELEASE_TYPE_D_S_R_LOGORELEASE",
		30: "RELEASE_TYPE_D_S_R_LONGFORMMUSICALWORKVIDEORELEASE",
		31: "RELEASE_TYPE_D_S_R_LONGFORMNONMUSICALWORKVIDEORELEASE",
		32: "RELEASE_TYPE_D_S_R_LYRICSHEETRELEASE",
		33: "RELEASE_TYPE_D_S_R_MULTIMEDIAALBUM",
		34: "RELEASE_TYPE_D_S_R_MULTIMEDIASINGLE",
		35: "RELEASE_TYPE_D_S_R_MUSICALWORKBASEDGAMERELEASE",
		36: "RELEASE_TYPE_D_S_R_MUSICALWORKCLIPRELEASE",
		37: "RELEASE_TYPE_D_S_R_MUSICALWORKREADALONGVIDEORELEASE",
		38: "RELEASE_TYPE_D_S_R_MUSICALWORKTRAILERRELEASE",
		39: "RELEASE_TYPE_D_S_R_MUSICALWORKVIDEOCHAPTERRELEASE",
		40: "RELEASE_TYPE_D_S_R_NEWS",
		41: "RELEASE_TYPE_D_S_R_NONMUSICALWORKBASEDGAMERELEASE",
		42: "RELEASE_TYPE_D_S_R_NONMUSICALWORKCLIPRELEASE",
		43: "RELEASE_TYPE_D_S_R_NONMUSICALWORKREADALONGVIDEORELEASE",
		44: "RELEASE_TYPE_D_S_R_NONMUSICALWORKTRAILERRELEASE",
		45: "RELEASE_TYPE_D_S_R_NONMUSICALWORKVIDEOCHAPTERRELEASE",
		46: "RELEASE_TYPE_D_S_R_NONSERIALAUDIOVISUALRECORDING",
		47: "RELEASE_TYPE_D_S_R_PHOTOGRAPHRELEASE",
		48: "RELEASE_TYPE_D_S_R_RINGBACKTONERELEASE",
		49: "RELEASE_TYPE_D_S_R_RINGTONERELEASE",
		50: "RELEASE_TYPE_D_S_R_SCREENSAVERRELEASE",
		51: "RELEASE_TYPE_D_S_R_SEASON",
		52: "RELEASE_TYPE_D_S_R_SERIES",
		53: "RELEASE_TYPE_D_S_R_SHEETMUSICRELEASE",
		54: "RELEASE_TYPE_D_S_R_SHORTFORMMUSICALWORKVIDEORELEASE",
		55: "RELEASE_TYPE_D_S_R_SHORTFORMNONMUSICALWORKVIDEORELEASE",
		56: "RELEASE_TYPE_D_S_R_SINGLE",
		57: "RELEASE_TYPE_D_S_R_SINGLERESOURCERELEASE",
		58: "RELEASE_TYPE_D_S_R_SINGLERESOURCERELEASEWITHCOVERART",
		59: "RELEASE_TYPE_D_S_R_TRACKRELEASE",
		60: "RELEASE_TYPE_D_S_R_TRAILERVIDEO",
		61: "RELEASE_TYPE_D_S_R_TRAYIMAGERELEASE",
		62: "RELEASE_TYPE_D_S_R_UNKNOWN",
		63: "RELEASE_TYPE_D_S_R_USERDEFINED",
		64: "RELEASE_TYPE_D_S_R_VIDEOALBUM",
		65: "RELEASE_TYPE_D_S_R_VIDEOCHAPTERRELEASE",
		66: "RELEASE_TYPE_D_S_R_VIDEOCLIPRELEASE",
		67: "RELEASE_TYPE_D_S_R_VIDEOSCREENCAPTURERELEASE",
		68: "RELEASE_TYPE_D_S_R_VIDEOSINGLE",
		69: "RELEASE_TYPE_D_S_R_VIDEOTRACKRELEASE",
		70: "RELEASE_TYPE_D_S_R_WALLPAPERRELEASE",
	}
	ReleaseTypeDSR_value = map[string]int32{
		"RELEASE_TYPE_D_S_R_UNSPECIFIED":                         0,
		"RELEASE_TYPE_D_S_R_ADVERTISEMENTVIDEO":                  1,
		"RELEASE_TYPE_D_S_R_ALBUM":                               2,
		"RELEASE_TYPE_D_S_R_ALERTTONERELEASE":                    3,
		"RELEASE_TYPE_D_S_R_ANIMATION":                           4,
		"RELEASE_TYPE_D_S_R_ASPERCONTRACT":                       5,
		"RELEASE_TYPE_D_S_R_AUDIOBOOKRELEASE":                    6,
		"RELEASE_TYPE_D_S_R_AUDIOCLIPRELEASE":                    7,
		"RELEASE_TYPE_D_S_R_BACKCOVERIMAGERELEASE":               8,
		"RELEASE_TYPE_D_S_R_BOOKLETBACKIMAGERELEASE":             9,
		"RELEASE_TYPE_D_S_R_BOOKLETFRONTIMAGERELEASE":            10,
		"RELEASE_TYPE_D_S_R_BOOKLETRELEASE":                      11,
		"RELEASE_TYPE_D_S_R_BUNDLE":                              12,
		"RELEASE_TYPE_D_S_R_CLASSICALALBUM":                      13,
		"RELEASE_TYPE_D_S_R_CONCERTVIDEO":                        14,
		"RELEASE_TYPE_D_S_R_CORPORATEFILM":                       15,
		"RELEASE_TYPE_D_S_R_DIGITALBOXSETRELEASE":                16,
		"RELEASE_TYPE_D_S_R_DOCUMENTARY":                         17,
		"RELEASE_TYPE_D_S_R_DOCUMENTIMAGERELEASE":                18,
		"RELEASE_TYPE_D_S_R_EBOOKRELEASE":                        19,
		"RELEASE_TYPE_D_S_R_EPISODE":                             20,
		"RELEASE_TYPE_D_S_R_FEATUREFILM":                         21,
		"RELEASE_TYPE_D_S_R_FILMBUNDLE":                          22,
		"RELEASE_TYPE_D_S_R_FRONTCOVERIMAGERELEASE":              23,
		"RELEASE_TYPE_D_S_R_ICONRELEASE":                         24,
		"RELEASE_TYPE_D_S_R_INFOMERCIALVIDEO":                    25,
		"RELEASE_TYPE_D_S_R_INTERACTIVEBOOKLETRELEASE":           26,
		"RELEASE_TYPE_D_S_R_KARAOKERELEASE":                      27,
		"RELEASE_TYPE_D_S_R_LIVEEVENTVIDEO":                      28,
		"RELEASE_TYPE_D_S_R_LOGORELEASE":                         29,
		"RELEASE_TYPE_D_S_R_LONGFORMMUSICALWORKVIDEORELEASE":     30,
		"RELEASE_TYPE_D_S_R_LONGFORMNONMUSICALWORKVIDEORELEASE":  31,
		"RELEASE_TYPE_D_S_R_LYRICSHEETRELEASE":                   32,
		"RELEASE_TYPE_D_S_R_MULTIMEDIAALBUM":                     33,
		"RELEASE_TYPE_D_S_R_MULTIMEDIASINGLE":                    34,
		"RELEASE_TYPE_D_S_R_MUSICALWORKBASEDGAMERELEASE":         35,
		"RELEASE_TYPE_D_S_R_MUSICALWORKCLIPRELEASE":              36,
		"RELEASE_TYPE_D_S_R_MUSICALWORKREADALONGVIDEORELEASE":    37,
		"RELEASE_TYPE_D_S_R_MUSICALWORKTRAILERRELEASE":           38,
		"RELEASE_TYPE_D_S_R_MUSICALWORKVIDEOCHAPTERRELEASE":      39,
		"RELEASE_TYPE_D_S_R_NEWS":                                40,
		"RELEASE_TYPE_D_S_R_NONMUSICALWORKBASEDGAMERELEASE":      41,
		"RELEASE_TYPE_D_S_R_NONMUSICALWORKCLIPRELEASE":           42,
		"RELEASE_TYPE_D_S_R_NONMUSICALWORKREADALONGVIDEORELEASE": 43,
		"RELEASE_TYPE_D_S_R_NONMUSICALWORKTRAILERRELEASE":        44,
		"RELEASE_TYPE_D_S_R_NONMUSICALWORKVIDEOCHAPTERRELEASE":   45,
		"RELEASE_TYPE_D_S_R_NONSERIALAUDIOVISUALRECORDING":       46,
		"RELEASE_TYPE_D_S_R_PHOTOGRAPHRELEASE":                   47,
		"RELEASE_TYPE_D_S_R_RINGBACKTONERELEASE":                 48,
		"RELEASE_TYPE_D_S_R_RINGTONERELEASE":                     49,
		"RELEASE_TYPE_D_S_R_SCREENSAVERRELEASE":                  50,
		"RELEASE_TYPE_D_S_R_SEASON":                              51,
		"RELEASE_TYPE_D_S_R_SERIES":                              52,
		"RELEASE_TYPE_D_S_R_SHEETMUSICRELEASE":                   53,
		"RELEASE_TYPE_D_S_R_SHORTFORMMUSICALWORKVIDEORELEASE":    54,
		"RELEASE_TYPE_D_S_R_SHORTFORMNONMUSICALWORKVIDEORELEASE": 55,
		"RELEASE_TYPE_D_S_R_SINGLE":                              56,
		"RELEASE_TYPE_D_S_R_SINGLERESOURCERELEASE":               57,
		"RELEASE_TYPE_D_S_R_SINGLERESOURCERELEASEWITHCOVERART":   58,
		"RELEASE_TYPE_D_S_R_TRACKRELEASE":                        59,
		"RELEASE_TYPE_D_S_R_TRAILERVIDEO":                        60,
		"RELEASE_TYPE_D_S_R_TRAYIMAGERELEASE":                    61,
		"RELEASE_TYPE_D_S_R_UNKNOWN":                             62,
		"RELEASE_TYPE_D_S_R_USERDEFINED":                         63,
		"RELEASE_TYPE_D_S_R_VIDEOALBUM":                          64,
		"RELEASE_TYPE_D_S_R_VIDEOCHAPTERRELEASE":                 65,
		"RELEASE_TYPE_D_S_R_VIDEOCLIPRELEASE":                    66,
		"RELEASE_TYPE_D_S_R_VIDEOSCREENCAPTURERELEASE":           67,
		"RELEASE_TYPE_D_S_R_VIDEOSINGLE":                         68,
		"RELEASE_TYPE_D_S_R_VIDEOTRACKRELEASE":                   69,
		"RELEASE_TYPE_D_S_R_WALLPAPERRELEASE":                    70,
	}
)

func (x ReleaseTypeDSR) Enum() *ReleaseTypeDSR {
	p := new(ReleaseTypeDSR)
	*p = x
	return p
}

func (x ReleaseTypeDSR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseTypeDSR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[175].Descriptor()
}

func (ReleaseTypeDSR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[175]
}

func (x ReleaseTypeDSR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseTypeDSR.Descriptor instead.
func (ReleaseTypeDSR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{175}
}

type ReleaseTypeERN4 int32

const (
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_UNSPECIFIED                        ReleaseTypeERN4 = 0
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_ALBUM                              ReleaseTypeERN4 = 1
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_ALERTTONERELEASE                   ReleaseTypeERN4 = 2
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_ASPERCONTRACT                      ReleaseTypeERN4 = 3
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_AUDIOBOOKRELEASE                   ReleaseTypeERN4 = 4
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_AUDIODRAMARELEASE                  ReleaseTypeERN4 = 5
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_BACKCOVERIMAGERELEASE              ReleaseTypeERN4 = 6
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_BOOKLETBACKIMAGERELEASE            ReleaseTypeERN4 = 7
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_BOOKLETFRONTIMAGERELEASE           ReleaseTypeERN4 = 8
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_BOOKLETRELEASE                     ReleaseTypeERN4 = 9
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_BUNDLE                             ReleaseTypeERN4 = 10
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_CLASSICALALBUM                     ReleaseTypeERN4 = 11
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_CLASSICALDIGITALBOXEDSET           ReleaseTypeERN4 = 12
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_CLASSICALMULTIMEDIAALBUM           ReleaseTypeERN4 = 13
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_CONCERTVIDEO                       ReleaseTypeERN4 = 14
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_DIGITALBOXSETRELEASE               ReleaseTypeERN4 = 15
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_DJMIX                              ReleaseTypeERN4 = 16
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_DOCUMENTARY                        ReleaseTypeERN4 = 17
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_DRAMA                              ReleaseTypeERN4 = 18
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_DRAMATICOMUSICALVIDEORELEASE       ReleaseTypeERN4 = 19
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_EBOOKRELEASE                       ReleaseTypeERN4 = 20
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_EP                                 ReleaseTypeERN4 = 21
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_EPISODE                            ReleaseTypeERN4 = 22
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_FEATUREFILM                        ReleaseTypeERN4 = 23
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_KARAOKERELEASE                     ReleaseTypeERN4 = 24
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_LIVEEVENTVIDEO                     ReleaseTypeERN4 = 25
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_LOGORELEASE                        ReleaseTypeERN4 = 26
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_LONGFORMMUSICALWORKVIDEORELEASE    ReleaseTypeERN4 = 27
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_LONGFORMNONMUSICALWORKVIDEORELEASE ReleaseTypeERN4 = 28
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_LYRICSHEETRELEASE                  ReleaseTypeERN4 = 29
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_MULTIMEDIAALBUM                    ReleaseTypeERN4 = 30
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_MULTIMEDIADIGITALBOXEDSET          ReleaseTypeERN4 = 31
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_MULTIMEDIASINGLE                   ReleaseTypeERN4 = 32
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_MUSICALWORKBASEDGAMERELEASE        ReleaseTypeERN4 = 33
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_NONMUSICALWORKBASEDGAMERELEASE     ReleaseTypeERN4 = 34
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_PLAYLIST                           ReleaseTypeERN4 = 35
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_RINGBACKTONERELEASE                ReleaseTypeERN4 = 36
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_RINGTONERELEASE                    ReleaseTypeERN4 = 37
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SEASON                             ReleaseTypeERN4 = 38
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SERIES                             ReleaseTypeERN4 = 39
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SHEETMUSICRELEASE                  ReleaseTypeERN4 = 40
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SHORTFILM                          ReleaseTypeERN4 = 41
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SINGLE                             ReleaseTypeERN4 = 42
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_SINGLERESOURCERELEASE              ReleaseTypeERN4 = 43
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_STEMBUNDLE                         ReleaseTypeERN4 = 44
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_USERDEFINED                        ReleaseTypeERN4 = 45
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_VIDEOALBUM                         ReleaseTypeERN4 = 46
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_VIDEOMASTERTONERELEASE             ReleaseTypeERN4 = 47
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_VIDEOSINGLE                        ReleaseTypeERN4 = 48
	ReleaseTypeERN4_RELEASE_TYPE_E_R_N4_WALLPAPERRELEASE                   ReleaseTypeERN4 = 49
)

// Enum value maps for ReleaseTypeERN4.
var (
	ReleaseTypeERN4_name = map[int32]string{
		0:  "RELEASE_TYPE_E_R_N4_UNSPECIFIED",
		1:  "RELEASE_TYPE_E_R_N4_ALBUM",
		2:  "RELEASE_TYPE_E_R_N4_ALERTTONERELEASE",
		3:  "RELEASE_TYPE_E_R_N4_ASPERCONTRACT",
		4:  "RELEASE_TYPE_E_R_N4_AUDIOBOOKRELEASE",
		5:  "RELEASE_TYPE_E_R_N4_AUDIODRAMARELEASE",
		6:  "RELEASE_TYPE_E_R_N4_BACKCOVERIMAGERELEASE",
		7:  "RELEASE_TYPE_E_R_N4_BOOKLETBACKIMAGERELEASE",
		8:  "RELEASE_TYPE_E_R_N4_BOOKLETFRONTIMAGERELEASE",
		9:  "RELEASE_TYPE_E_R_N4_BOOKLETRELEASE",
		10: "RELEASE_TYPE_E_R_N4_BUNDLE",
		11: "RELEASE_TYPE_E_R_N4_CLASSICALALBUM",
		12: "RELEASE_TYPE_E_R_N4_CLASSICALDIGITALBOXEDSET",
		13: "RELEASE_TYPE_E_R_N4_CLASSICALMULTIMEDIAALBUM",
		14: "RELEASE_TYPE_E_R_N4_CONCERTVIDEO",
		15: "RELEASE_TYPE_E_R_N4_DIGITALBOXSETRELEASE",
		16: "RELEASE_TYPE_E_R_N4_DJMIX",
		17: "RELEASE_TYPE_E_R_N4_DOCUMENTARY",
		18: "RELEASE_TYPE_E_R_N4_DRAMA",
		19: "RELEASE_TYPE_E_R_N4_DRAMATICOMUSICALVIDEORELEASE",
		20: "RELEASE_TYPE_E_R_N4_EBOOKRELEASE",
		21: "RELEASE_TYPE_E_R_N4_EP",
		22: "RELEASE_TYPE_E_R_N4_EPISODE",
		23: "RELEASE_TYPE_E_R_N4_FEATUREFILM",
		24: "RELEASE_TYPE_E_R_N4_KARAOKERELEASE",
		25: "RELEASE_TYPE_E_R_N4_LIVEEVENTVIDEO",
		26: "RELEASE_TYPE_E_R_N4_LOGORELEASE",
		27: "RELEASE_TYPE_E_R_N4_LONGFORMMUSICALWORKVIDEORELEASE",
		28: "RELEASE_TYPE_E_R_N4_LONGFORMNONMUSICALWORKVIDEORELEASE",
		29: "RELEASE_TYPE_E_R_N4_LYRICSHEETRELEASE",
		30: "RELEASE_TYPE_E_R_N4_MULTIMEDIAALBUM",
		31: "RELEASE_TYPE_E_R_N4_MULTIMEDIADIGITALBOXEDSET",
		32: "RELEASE_TYPE_E_R_N4_MULTIMEDIASINGLE",
		33: "RELEASE_TYPE_E_R_N4_MUSICALWORKBASEDGAMERELEASE",
		34: "RELEASE_TYPE_E_R_N4_NONMUSICALWORKBASEDGAMERELEASE",
		35: "RELEASE_TYPE_E_R_N4_PLAYLIST",
		36: "RELEASE_TYPE_E_R_N4_RINGBACKTONERELEASE",
		37: "RELEASE_TYPE_E_R_N4_RINGTONERELEASE",
		38: "RELEASE_TYPE_E_R_N4_SEASON",
		39: "RELEASE_TYPE_E_R_N4_SERIES",
		40: "RELEASE_TYPE_E_R_N4_SHEETMUSICRELEASE",
		41: "RELEASE_TYPE_E_R_N4_SHORTFILM",
		42: "RELEASE_TYPE_E_R_N4_SINGLE",
		43: "RELEASE_TYPE_E_R_N4_SINGLERESOURCERELEASE",
		44: "RELEASE_TYPE_E_R_N4_STEMBUNDLE",
		45: "RELEASE_TYPE_E_R_N4_USERDEFINED",
		46: "RELEASE_TYPE_E_R_N4_VIDEOALBUM",
		47: "RELEASE_TYPE_E_R_N4_VIDEOMASTERTONERELEASE",
		48: "RELEASE_TYPE_E_R_N4_VIDEOSINGLE",
		49: "RELEASE_TYPE_E_R_N4_WALLPAPERRELEASE",
	}
	ReleaseTypeERN4_value = map[string]int32{
		"RELEASE_TYPE_E_R_N4_UNSPECIFIED":                        0,
		"RELEASE_TYPE_E_R_N4_ALBUM":                              1,
		"RELEASE_TYPE_E_R_N4_ALERTTONERELEASE":                   2,
		"RELEASE_TYPE_E_R_N4_ASPERCONTRACT":                      3,
		"RELEASE_TYPE_E_R_N4_AUDIOBOOKRELEASE":                   4,
		"RELEASE_TYPE_E_R_N4_AUDIODRAMARELEASE":                  5,
		"RELEASE_TYPE_E_R_N4_BACKCOVERIMAGERELEASE":              6,
		"RELEASE_TYPE_E_R_N4_BOOKLETBACKIMAGERELEASE":            7,
		"RELEASE_TYPE_E_R_N4_BOOKLETFRONTIMAGERELEASE":           8,
		"RELEASE_TYPE_E_R_N4_BOOKLETRELEASE":                     9,
		"RELEASE_TYPE_E_R_N4_BUNDLE":                             10,
		"RELEASE_TYPE_E_R_N4_CLASSICALALBUM":                     11,
		"RELEASE_TYPE_E_R_N4_CLASSICALDIGITALBOXEDSET":           12,
		"RELEASE_TYPE_E_R_N4_CLASSICALMULTIMEDIAALBUM":           13,
		"RELEASE_TYPE_E_R_N4_CONCERTVIDEO":                       14,
		"RELEASE_TYPE_E_R_N4_DIGITALBOXSETRELEASE":               15,
		"RELEASE_TYPE_E_R_N4_DJMIX":                              16,
		"RELEASE_TYPE_E_R_N4_DOCUMENTARY":                        17,
		"RELEASE_TYPE_E_R_N4_DRAMA":                              18,
		"RELEASE_TYPE_E_R_N4_DRAMATICOMUSICALVIDEORELEASE":       19,
		"RELEASE_TYPE_E_R_N4_EBOOKRELEASE":                       20,
		"RELEASE_TYPE_E_R_N4_EP":                                 21,
		"RELEASE_TYPE_E_R_N4_EPISODE":                            22,
		"RELEASE_TYPE_E_R_N4_FEATUREFILM":                        23,
		"RELEASE_TYPE_E_R_N4_KARAOKERELEASE":                     24,
		"RELEASE_TYPE_E_R_N4_LIVEEVENTVIDEO":                     25,
		"RELEASE_TYPE_E_R_N4_LOGORELEASE":                        26,
		"RELEASE_TYPE_E_R_N4_LONGFORMMUSICALWORKVIDEORELEASE":    27,
		"RELEASE_TYPE_E_R_N4_LONGFORMNONMUSICALWORKVIDEORELEASE": 28,
		"RELEASE_TYPE_E_R_N4_LYRICSHEETRELEASE":                  29,
		"RELEASE_TYPE_E_R_N4_MULTIMEDIAALBUM":                    30,
		"RELEASE_TYPE_E_R_N4_MULTIMEDIADIGITALBOXEDSET":          31,
		"RELEASE_TYPE_E_R_N4_MULTIMEDIASINGLE":                   32,
		"RELEASE_TYPE_E_R_N4_MUSICALWORKBASEDGAMERELEASE":        33,
		"RELEASE_TYPE_E_R_N4_NONMUSICALWORKBASEDGAMERELEASE":     34,
		"RELEASE_TYPE_E_R_N4_PLAYLIST":                           35,
		"RELEASE_TYPE_E_R_N4_RINGBACKTONERELEASE":                36,
		"RELEASE_TYPE_E_R_N4_RINGTONERELEASE":                    37,
		"RELEASE_TYPE_E_R_N4_SEASON":                             38,
		"RELEASE_TYPE_E_R_N4_SERIES":                             39,
		"RELEASE_TYPE_E_R_N4_SHEETMUSICRELEASE":                  40,
		"RELEASE_TYPE_E_R_N4_SHORTFILM":                          41,
		"RELEASE_TYPE_E_R_N4_SINGLE":                             42,
		"RELEASE_TYPE_E_R_N4_SINGLERESOURCERELEASE":              43,
		"RELEASE_TYPE_E_R_N4_STEMBUNDLE":                         44,
		"RELEASE_TYPE_E_R_N4_USERDEFINED":                        45,
		"RELEASE_TYPE_E_R_N4_VIDEOALBUM":                         46,
		"RELEASE_TYPE_E_R_N4_VIDEOMASTERTONERELEASE":             47,
		"RELEASE_TYPE_E_R_N4_VIDEOSINGLE":                        48,
		"RELEASE_TYPE_E_R_N4_WALLPAPERRELEASE":                   49,
	}
)

func (x ReleaseTypeERN4) Enum() *ReleaseTypeERN4 {
	p := new(ReleaseTypeERN4)
	*p = x
	return p
}

func (x ReleaseTypeERN4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseTypeERN4) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[176].Descriptor()
}

func (ReleaseTypeERN4) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[176]
}

func (x ReleaseTypeERN4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseTypeERN4.Descriptor instead.
func (ReleaseTypeERN4) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{176}
}

type ReleaseTypeMCNOTIF int32

const (
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED         ReleaseTypeMCNOTIF = 0
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_ALBUM               ReleaseTypeMCNOTIF = 1
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_EP                  ReleaseTypeMCNOTIF = 2
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_RINGBACKTONERELEASE ReleaseTypeMCNOTIF = 3
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_RINGTONERELEASE     ReleaseTypeMCNOTIF = 4
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_SINGLE              ReleaseTypeMCNOTIF = 5
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOALBUM          ReleaseTypeMCNOTIF = 6
	ReleaseTypeMCNOTIF_RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOSINGLE         ReleaseTypeMCNOTIF = 7
)

// Enum value maps for ReleaseTypeMCNOTIF.
var (
	ReleaseTypeMCNOTIF_name = map[int32]string{
		0: "RELEASE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED",
		1: "RELEASE_TYPE_M_C_N_O_T_I_F_ALBUM",
		2: "RELEASE_TYPE_M_C_N_O_T_I_F_EP",
		3: "RELEASE_TYPE_M_C_N_O_T_I_F_RINGBACKTONERELEASE",
		4: "RELEASE_TYPE_M_C_N_O_T_I_F_RINGTONERELEASE",
		5: "RELEASE_TYPE_M_C_N_O_T_I_F_SINGLE",
		6: "RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOALBUM",
		7: "RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOSINGLE",
	}
	ReleaseTypeMCNOTIF_value = map[string]int32{
		"RELEASE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED":         0,
		"RELEASE_TYPE_M_C_N_O_T_I_F_ALBUM":               1,
		"RELEASE_TYPE_M_C_N_O_T_I_F_EP":                  2,
		"RELEASE_TYPE_M_C_N_O_T_I_F_RINGBACKTONERELEASE": 3,
		"RELEASE_TYPE_M_C_N_O_T_I_F_RINGTONERELEASE":     4,
		"RELEASE_TYPE_M_C_N_O_T_I_F_SINGLE":              5,
		"RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOALBUM":          6,
		"RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOSINGLE":         7,
	}
)

func (x ReleaseTypeMCNOTIF) Enum() *ReleaseTypeMCNOTIF {
	p := new(ReleaseTypeMCNOTIF)
	*p = x
	return p
}

func (x ReleaseTypeMCNOTIF) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseTypeMCNOTIF) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[177].Descriptor()
}

func (ReleaseTypeMCNOTIF) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[177]
}

func (x ReleaseTypeMCNOTIF) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseTypeMCNOTIF.Descriptor instead.
func (ReleaseTypeMCNOTIF) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{177}
}

type ReportMessageType int32

const (
	ReportMessageType_REPORT_MESSAGE_TYPE_UNSPECIFIED               ReportMessageType = 0
	ReportMessageType_REPORT_MESSAGE_TYPE_DSRSALESREPORTMESSAGE     ReportMessageType = 1
	ReportMessageType_REPORT_MESSAGE_TYPE_RDRNSALESREPORTMESSAGE    ReportMessageType = 2
	ReportMessageType_REPORT_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE ReportMessageType = 3
	ReportMessageType_REPORT_MESSAGE_TYPE_USERDEFINED               ReportMessageType = 4
)

// Enum value maps for ReportMessageType.
var (
	ReportMessageType_name = map[int32]string{
		0: "REPORT_MESSAGE_TYPE_UNSPECIFIED",
		1: "REPORT_MESSAGE_TYPE_DSRSALESREPORTMESSAGE",
		2: "REPORT_MESSAGE_TYPE_RDRNSALESREPORTMESSAGE",
		3: "REPORT_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE",
		4: "REPORT_MESSAGE_TYPE_USERDEFINED",
	}
	ReportMessageType_value = map[string]int32{
		"REPORT_MESSAGE_TYPE_UNSPECIFIED":               0,
		"REPORT_MESSAGE_TYPE_DSRSALESREPORTMESSAGE":     1,
		"REPORT_MESSAGE_TYPE_RDRNSALESREPORTMESSAGE":    2,
		"REPORT_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE": 3,
		"REPORT_MESSAGE_TYPE_USERDEFINED":               4,
	}
)

func (x ReportMessageType) Enum() *ReportMessageType {
	p := new(ReportMessageType)
	*p = x
	return p
}

func (x ReportMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[178].Descriptor()
}

func (ReportMessageType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[178]
}

func (x ReportMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportMessageType.Descriptor instead.
func (ReportMessageType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{178}
}

type RequestMessagePurpose int32

const (
	RequestMessagePurpose_REQUEST_MESSAGE_PURPOSE_UNSPECIFIED        RequestMessagePurpose = 0
	RequestMessagePurpose_REQUEST_MESSAGE_PURPOSE_LICENSEREQUEST     RequestMessagePurpose = 1
	RequestMessagePurpose_REQUEST_MESSAGE_PURPOSE_NDMALICENSEREQUEST RequestMessagePurpose = 2
	RequestMessagePurpose_REQUEST_MESSAGE_PURPOSE_NOTIFICATION       RequestMessagePurpose = 3
)

// Enum value maps for RequestMessagePurpose.
var (
	RequestMessagePurpose_name = map[int32]string{
		0: "REQUEST_MESSAGE_PURPOSE_UNSPECIFIED",
		1: "REQUEST_MESSAGE_PURPOSE_LICENSEREQUEST",
		2: "REQUEST_MESSAGE_PURPOSE_NDMALICENSEREQUEST",
		3: "REQUEST_MESSAGE_PURPOSE_NOTIFICATION",
	}
	RequestMessagePurpose_value = map[string]int32{
		"REQUEST_MESSAGE_PURPOSE_UNSPECIFIED":        0,
		"REQUEST_MESSAGE_PURPOSE_LICENSEREQUEST":     1,
		"REQUEST_MESSAGE_PURPOSE_NDMALICENSEREQUEST": 2,
		"REQUEST_MESSAGE_PURPOSE_NOTIFICATION":       3,
	}
)

func (x RequestMessagePurpose) Enum() *RequestMessagePurpose {
	p := new(RequestMessagePurpose)
	*p = x
	return p
}

func (x RequestMessagePurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestMessagePurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[179].Descriptor()
}

func (RequestMessagePurpose) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[179]
}

func (x RequestMessagePurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestMessagePurpose.Descriptor instead.
func (RequestMessagePurpose) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{179}
}

type RequestReason int32

const (
	RequestReason_REQUEST_REASON_UNSPECIFIED              RequestReason = 0
	RequestReason_REQUEST_REASON_DISPUTERESOLUTIONREQUEST RequestReason = 1
	RequestReason_REQUEST_REASON_GENERALREQUEST           RequestReason = 2
	RequestReason_REQUEST_REASON_PUBLISHERADDITION        RequestReason = 3
	RequestReason_REQUEST_REASON_PUBLISHERCHANGE          RequestReason = 4
	RequestReason_REQUEST_REASON_PUBLISHERREMOVAL         RequestReason = 5
	RequestReason_REQUEST_REASON_RECALL                   RequestReason = 6
	RequestReason_REQUEST_REASON_RELEASELISTUPDATE        RequestReason = 7
	RequestReason_REQUEST_REASON_SPECIFICREQUEST          RequestReason = 8
	RequestReason_REQUEST_REASON_USERDEFINED              RequestReason = 9
	RequestReason_REQUEST_REASON_WRITERADDITION           RequestReason = 10
	RequestReason_REQUEST_REASON_WRITERCHANGE             RequestReason = 11
	RequestReason_REQUEST_REASON_WRITERREMOVAL            RequestReason = 12
)

// Enum value maps for RequestReason.
var (
	RequestReason_name = map[int32]string{
		0:  "REQUEST_REASON_UNSPECIFIED",
		1:  "REQUEST_REASON_DISPUTERESOLUTIONREQUEST",
		2:  "REQUEST_REASON_GENERALREQUEST",
		3:  "REQUEST_REASON_PUBLISHERADDITION",
		4:  "REQUEST_REASON_PUBLISHERCHANGE",
		5:  "REQUEST_REASON_PUBLISHERREMOVAL",
		6:  "REQUEST_REASON_RECALL",
		7:  "REQUEST_REASON_RELEASELISTUPDATE",
		8:  "REQUEST_REASON_SPECIFICREQUEST",
		9:  "REQUEST_REASON_USERDEFINED",
		10: "REQUEST_REASON_WRITERADDITION",
		11: "REQUEST_REASON_WRITERCHANGE",
		12: "REQUEST_REASON_WRITERREMOVAL",
	}
	RequestReason_value = map[string]int32{
		"REQUEST_REASON_UNSPECIFIED":              0,
		"REQUEST_REASON_DISPUTERESOLUTIONREQUEST": 1,
		"REQUEST_REASON_GENERALREQUEST":           2,
		"REQUEST_REASON_PUBLISHERADDITION":        3,
		"REQUEST_REASON_PUBLISHERCHANGE":          4,
		"REQUEST_REASON_PUBLISHERREMOVAL":         5,
		"REQUEST_REASON_RECALL":                   6,
		"REQUEST_REASON_RELEASELISTUPDATE":        7,
		"REQUEST_REASON_SPECIFICREQUEST":          8,
		"REQUEST_REASON_USERDEFINED":              9,
		"REQUEST_REASON_WRITERADDITION":           10,
		"REQUEST_REASON_WRITERCHANGE":             11,
		"REQUEST_REASON_WRITERREMOVAL":            12,
	}
)

func (x RequestReason) Enum() *RequestReason {
	p := new(RequestReason)
	*p = x
	return p
}

func (x RequestReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestReason) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[180].Descriptor()
}

func (RequestReason) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[180]
}

func (x RequestReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestReason.Descriptor instead.
func (RequestReason) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{180}
}

type ResourceGroupType int32

const (
	ResourceGroupType_RESOURCE_GROUP_TYPE_UNSPECIFIED      ResourceGroupType = 0
	ResourceGroupType_RESOURCE_GROUP_TYPE_COMPONENT        ResourceGroupType = 1
	ResourceGroupType_RESOURCE_GROUP_TYPE_COMPONENTRELEASE ResourceGroupType = 2
	ResourceGroupType_RESOURCE_GROUP_TYPE_MULTIWORKPART    ResourceGroupType = 3
	ResourceGroupType_RESOURCE_GROUP_TYPE_RELEASECOMPONENT ResourceGroupType = 4
	ResourceGroupType_RESOURCE_GROUP_TYPE_SIDE             ResourceGroupType = 5
)

// Enum value maps for ResourceGroupType.
var (
	ResourceGroupType_name = map[int32]string{
		0: "RESOURCE_GROUP_TYPE_UNSPECIFIED",
		1: "RESOURCE_GROUP_TYPE_COMPONENT",
		2: "RESOURCE_GROUP_TYPE_COMPONENTRELEASE",
		3: "RESOURCE_GROUP_TYPE_MULTIWORKPART",
		4: "RESOURCE_GROUP_TYPE_RELEASECOMPONENT",
		5: "RESOURCE_GROUP_TYPE_SIDE",
	}
	ResourceGroupType_value = map[string]int32{
		"RESOURCE_GROUP_TYPE_UNSPECIFIED":      0,
		"RESOURCE_GROUP_TYPE_COMPONENT":        1,
		"RESOURCE_GROUP_TYPE_COMPONENTRELEASE": 2,
		"RESOURCE_GROUP_TYPE_MULTIWORKPART":    3,
		"RESOURCE_GROUP_TYPE_RELEASECOMPONENT": 4,
		"RESOURCE_GROUP_TYPE_SIDE":             5,
	}
)

func (x ResourceGroupType) Enum() *ResourceGroupType {
	p := new(ResourceGroupType)
	*p = x
	return p
}

func (x ResourceGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[181].Descriptor()
}

func (ResourceGroupType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[181]
}

func (x ResourceGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceGroupType.Descriptor instead.
func (ResourceGroupType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{181}
}

type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_UNSPECIFIED         ResourceType = 0
	ResourceType_RESOURCE_TYPE_IMAGE               ResourceType = 1
	ResourceType_RESOURCE_TYPE_MIDI                ResourceType = 2
	ResourceType_RESOURCE_TYPE_SHEETMUSIC          ResourceType = 3
	ResourceType_RESOURCE_TYPE_SOFTWARE            ResourceType = 4
	ResourceType_RESOURCE_TYPE_SOUNDRECORDING      ResourceType = 5
	ResourceType_RESOURCE_TYPE_TEXT                ResourceType = 6
	ResourceType_RESOURCE_TYPE_USERDEFINEDRESOURCE ResourceType = 7
	ResourceType_RESOURCE_TYPE_VIDEO               ResourceType = 8
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "RESOURCE_TYPE_IMAGE",
		2: "RESOURCE_TYPE_MIDI",
		3: "RESOURCE_TYPE_SHEETMUSIC",
		4: "RESOURCE_TYPE_SOFTWARE",
		5: "RESOURCE_TYPE_SOUNDRECORDING",
		6: "RESOURCE_TYPE_TEXT",
		7: "RESOURCE_TYPE_USERDEFINEDRESOURCE",
		8: "RESOURCE_TYPE_VIDEO",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED":         0,
		"RESOURCE_TYPE_IMAGE":               1,
		"RESOURCE_TYPE_MIDI":                2,
		"RESOURCE_TYPE_SHEETMUSIC":          3,
		"RESOURCE_TYPE_SOFTWARE":            4,
		"RESOURCE_TYPE_SOUNDRECORDING":      5,
		"RESOURCE_TYPE_TEXT":                6,
		"RESOURCE_TYPE_USERDEFINEDRESOURCE": 7,
		"RESOURCE_TYPE_VIDEO":               8,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[182].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[182]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{182}
}

type ResourceTypeCustomSet int32

const (
	ResourceTypeCustomSet_RESOURCE_TYPE_CUSTOM_SET_UNSPECIFIED    ResourceTypeCustomSet = 0
	ResourceTypeCustomSet_RESOURCE_TYPE_CUSTOM_SET_MUSICVIDEO     ResourceTypeCustomSet = 1
	ResourceTypeCustomSet_RESOURCE_TYPE_CUSTOM_SET_SOUNDRECORDING ResourceTypeCustomSet = 2
)

// Enum value maps for ResourceTypeCustomSet.
var (
	ResourceTypeCustomSet_name = map[int32]string{
		0: "RESOURCE_TYPE_CUSTOM_SET_UNSPECIFIED",
		1: "RESOURCE_TYPE_CUSTOM_SET_MUSICVIDEO",
		2: "RESOURCE_TYPE_CUSTOM_SET_SOUNDRECORDING",
	}
	ResourceTypeCustomSet_value = map[string]int32{
		"RESOURCE_TYPE_CUSTOM_SET_UNSPECIFIED":    0,
		"RESOURCE_TYPE_CUSTOM_SET_MUSICVIDEO":     1,
		"RESOURCE_TYPE_CUSTOM_SET_SOUNDRECORDING": 2,
	}
)

func (x ResourceTypeCustomSet) Enum() *ResourceTypeCustomSet {
	p := new(ResourceTypeCustomSet)
	*p = x
	return p
}

func (x ResourceTypeCustomSet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceTypeCustomSet) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[183].Descriptor()
}

func (ResourceTypeCustomSet) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[183]
}

func (x ResourceTypeCustomSet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceTypeCustomSet.Descriptor instead.
func (ResourceTypeCustomSet) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{183}
}

type ResourceTypeMCNOTIF int32

const (
	ResourceTypeMCNOTIF_RESOURCE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED    ResourceTypeMCNOTIF = 0
	ResourceTypeMCNOTIF_RESOURCE_TYPE_M_C_N_O_T_I_F_SHEETMUSIC     ResourceTypeMCNOTIF = 1
	ResourceTypeMCNOTIF_RESOURCE_TYPE_M_C_N_O_T_I_F_SOUNDRECORDING ResourceTypeMCNOTIF = 2
	ResourceTypeMCNOTIF_RESOURCE_TYPE_M_C_N_O_T_I_F_VIDEO          ResourceTypeMCNOTIF = 3
)

// Enum value maps for ResourceTypeMCNOTIF.
var (
	ResourceTypeMCNOTIF_name = map[int32]string{
		0: "RESOURCE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED",
		1: "RESOURCE_TYPE_M_C_N_O_T_I_F_SHEETMUSIC",
		2: "RESOURCE_TYPE_M_C_N_O_T_I_F_SOUNDRECORDING",
		3: "RESOURCE_TYPE_M_C_N_O_T_I_F_VIDEO",
	}
	ResourceTypeMCNOTIF_value = map[string]int32{
		"RESOURCE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED":    0,
		"RESOURCE_TYPE_M_C_N_O_T_I_F_SHEETMUSIC":     1,
		"RESOURCE_TYPE_M_C_N_O_T_I_F_SOUNDRECORDING": 2,
		"RESOURCE_TYPE_M_C_N_O_T_I_F_VIDEO":          3,
	}
)

func (x ResourceTypeMCNOTIF) Enum() *ResourceTypeMCNOTIF {
	p := new(ResourceTypeMCNOTIF)
	*p = x
	return p
}

func (x ResourceTypeMCNOTIF) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceTypeMCNOTIF) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[184].Descriptor()
}

func (ResourceTypeMCNOTIF) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[184]
}

func (x ResourceTypeMCNOTIF) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceTypeMCNOTIF.Descriptor instead.
func (ResourceTypeMCNOTIF) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{184}
}

type ResourceTypeRDR int32

const (
	ResourceTypeRDR_RESOURCE_TYPE_R_D_R_UNSPECIFIED    ResourceTypeRDR = 0
	ResourceTypeRDR_RESOURCE_TYPE_R_D_R_MUSICVIDEO     ResourceTypeRDR = 1
	ResourceTypeRDR_RESOURCE_TYPE_R_D_R_NONE           ResourceTypeRDR = 2
	ResourceTypeRDR_RESOURCE_TYPE_R_D_R_SOUNDRECORDING ResourceTypeRDR = 3
	ResourceTypeRDR_RESOURCE_TYPE_R_D_R_VIDEO          ResourceTypeRDR = 4
)

// Enum value maps for ResourceTypeRDR.
var (
	ResourceTypeRDR_name = map[int32]string{
		0: "RESOURCE_TYPE_R_D_R_UNSPECIFIED",
		1: "RESOURCE_TYPE_R_D_R_MUSICVIDEO",
		2: "RESOURCE_TYPE_R_D_R_NONE",
		3: "RESOURCE_TYPE_R_D_R_SOUNDRECORDING",
		4: "RESOURCE_TYPE_R_D_R_VIDEO",
	}
	ResourceTypeRDR_value = map[string]int32{
		"RESOURCE_TYPE_R_D_R_UNSPECIFIED":    0,
		"RESOURCE_TYPE_R_D_R_MUSICVIDEO":     1,
		"RESOURCE_TYPE_R_D_R_NONE":           2,
		"RESOURCE_TYPE_R_D_R_SOUNDRECORDING": 3,
		"RESOURCE_TYPE_R_D_R_VIDEO":          4,
	}
)

func (x ResourceTypeRDR) Enum() *ResourceTypeRDR {
	p := new(ResourceTypeRDR)
	*p = x
	return p
}

func (x ResourceTypeRDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceTypeRDR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[185].Descriptor()
}

func (ResourceTypeRDR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[185]
}

func (x ResourceTypeRDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceTypeRDR.Descriptor instead.
func (ResourceTypeRDR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{185}
}

type ResourceWorkRelationshipType int32

const (
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_UNSPECIFIED            ResourceWorkRelationshipType = 0
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_INTERPELLATION         ResourceWorkRelationshipType = 1
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_MEDLEY                 ResourceWorkRelationshipType = 2
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_MULTIPLEWORKRESOURCE   ResourceWorkRelationshipType = 3
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_MUSICALWORKWITHSAMPLES ResourceWorkRelationshipType = 4
	ResourceWorkRelationshipType_RESOURCE_WORK_RELATIONSHIP_TYPE_SINGLEWORKRESOURCE     ResourceWorkRelationshipType = 5
)

// Enum value maps for ResourceWorkRelationshipType.
var (
	ResourceWorkRelationshipType_name = map[int32]string{
		0: "RESOURCE_WORK_RELATIONSHIP_TYPE_UNSPECIFIED",
		1: "RESOURCE_WORK_RELATIONSHIP_TYPE_INTERPELLATION",
		2: "RESOURCE_WORK_RELATIONSHIP_TYPE_MEDLEY",
		3: "RESOURCE_WORK_RELATIONSHIP_TYPE_MULTIPLEWORKRESOURCE",
		4: "RESOURCE_WORK_RELATIONSHIP_TYPE_MUSICALWORKWITHSAMPLES",
		5: "RESOURCE_WORK_RELATIONSHIP_TYPE_SINGLEWORKRESOURCE",
	}
	ResourceWorkRelationshipType_value = map[string]int32{
		"RESOURCE_WORK_RELATIONSHIP_TYPE_UNSPECIFIED":            0,
		"RESOURCE_WORK_RELATIONSHIP_TYPE_INTERPELLATION":         1,
		"RESOURCE_WORK_RELATIONSHIP_TYPE_MEDLEY":                 2,
		"RESOURCE_WORK_RELATIONSHIP_TYPE_MULTIPLEWORKRESOURCE":   3,
		"RESOURCE_WORK_RELATIONSHIP_TYPE_MUSICALWORKWITHSAMPLES": 4,
		"RESOURCE_WORK_RELATIONSHIP_TYPE_SINGLEWORKRESOURCE":     5,
	}
)

func (x ResourceWorkRelationshipType) Enum() *ResourceWorkRelationshipType {
	p := new(ResourceWorkRelationshipType)
	*p = x
	return p
}

func (x ResourceWorkRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceWorkRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[186].Descriptor()
}

func (ResourceWorkRelationshipType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[186]
}

func (x ResourceWorkRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceWorkRelationshipType.Descriptor instead.
func (ResourceWorkRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{186}
}

type ResponseType int32

const (
	ResponseType_RESPONSE_TYPE_UNSPECIFIED ResponseType = 0
	ResponseType_RESPONSE_TYPE_MAINTAIN    ResponseType = 1
	ResponseType_RESPONSE_TYPE_PENDING     ResponseType = 2
	ResponseType_RESPONSE_TYPE_REVOKE      ResponseType = 3
	ResponseType_RESPONSE_TYPE_UPDATE      ResponseType = 4
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "RESPONSE_TYPE_UNSPECIFIED",
		1: "RESPONSE_TYPE_MAINTAIN",
		2: "RESPONSE_TYPE_PENDING",
		3: "RESPONSE_TYPE_REVOKE",
		4: "RESPONSE_TYPE_UPDATE",
	}
	ResponseType_value = map[string]int32{
		"RESPONSE_TYPE_UNSPECIFIED": 0,
		"RESPONSE_TYPE_MAINTAIN":    1,
		"RESPONSE_TYPE_PENDING":     2,
		"RESPONSE_TYPE_REVOKE":      3,
		"RESPONSE_TYPE_UPDATE":      4,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[187].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[187]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{187}
}

type RevenueAllocationType int32

const (
	RevenueAllocationType_REVENUE_ALLOCATION_TYPE_UNSPECIFIED RevenueAllocationType = 0
	RevenueAllocationType_REVENUE_ALLOCATION_TYPE_EPISODE     RevenueAllocationType = 1
	RevenueAllocationType_REVENUE_ALLOCATION_TYPE_NONSERIAL   RevenueAllocationType = 2
	RevenueAllocationType_REVENUE_ALLOCATION_TYPE_SEASON      RevenueAllocationType = 3
	RevenueAllocationType_REVENUE_ALLOCATION_TYPE_SERIES      RevenueAllocationType = 4
)

// Enum value maps for RevenueAllocationType.
var (
	RevenueAllocationType_name = map[int32]string{
		0: "REVENUE_ALLOCATION_TYPE_UNSPECIFIED",
		1: "REVENUE_ALLOCATION_TYPE_EPISODE",
		2: "REVENUE_ALLOCATION_TYPE_NONSERIAL",
		3: "REVENUE_ALLOCATION_TYPE_SEASON",
		4: "REVENUE_ALLOCATION_TYPE_SERIES",
	}
	RevenueAllocationType_value = map[string]int32{
		"REVENUE_ALLOCATION_TYPE_UNSPECIFIED": 0,
		"REVENUE_ALLOCATION_TYPE_EPISODE":     1,
		"REVENUE_ALLOCATION_TYPE_NONSERIAL":   2,
		"REVENUE_ALLOCATION_TYPE_SEASON":      3,
		"REVENUE_ALLOCATION_TYPE_SERIES":      4,
	}
)

func (x RevenueAllocationType) Enum() *RevenueAllocationType {
	p := new(RevenueAllocationType)
	*p = x
	return p
}

func (x RevenueAllocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevenueAllocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[188].Descriptor()
}

func (RevenueAllocationType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[188]
}

func (x RevenueAllocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevenueAllocationType.Descriptor instead.
func (RevenueAllocationType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{188}
}

type RevenueSourceType int32

const (
	RevenueSourceType_REVENUE_SOURCE_TYPE_UNSPECIFIED                 RevenueSourceType = 0
	RevenueSourceType_REVENUE_SOURCE_TYPE_FINANCIALREVENUE            RevenueSourceType = 1
	RevenueSourceType_REVENUE_SOURCE_TYPE_INDEMNITYREVENUE            RevenueSourceType = 2
	RevenueSourceType_REVENUE_SOURCE_TYPE_PAYMENTFROMUNCLAIMEDREVENUE RevenueSourceType = 3
	RevenueSourceType_REVENUE_SOURCE_TYPE_ROYALTYREVENUE              RevenueSourceType = 4
	RevenueSourceType_REVENUE_SOURCE_TYPE_USERDEFINED                 RevenueSourceType = 5
)

// Enum value maps for RevenueSourceType.
var (
	RevenueSourceType_name = map[int32]string{
		0: "REVENUE_SOURCE_TYPE_UNSPECIFIED",
		1: "REVENUE_SOURCE_TYPE_FINANCIALREVENUE",
		2: "REVENUE_SOURCE_TYPE_INDEMNITYREVENUE",
		3: "REVENUE_SOURCE_TYPE_PAYMENTFROMUNCLAIMEDREVENUE",
		4: "REVENUE_SOURCE_TYPE_ROYALTYREVENUE",
		5: "REVENUE_SOURCE_TYPE_USERDEFINED",
	}
	RevenueSourceType_value = map[string]int32{
		"REVENUE_SOURCE_TYPE_UNSPECIFIED":                 0,
		"REVENUE_SOURCE_TYPE_FINANCIALREVENUE":            1,
		"REVENUE_SOURCE_TYPE_INDEMNITYREVENUE":            2,
		"REVENUE_SOURCE_TYPE_PAYMENTFROMUNCLAIMEDREVENUE": 3,
		"REVENUE_SOURCE_TYPE_ROYALTYREVENUE":              4,
		"REVENUE_SOURCE_TYPE_USERDEFINED":                 5,
	}
)

func (x RevenueSourceType) Enum() *RevenueSourceType {
	p := new(RevenueSourceType)
	*p = x
	return p
}

func (x RevenueSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevenueSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[189].Descriptor()
}

func (RevenueSourceType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[189]
}

func (x RevenueSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevenueSourceType.Descriptor instead.
func (RevenueSourceType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{189}
}

type RevocationReason int32

const (
	RevocationReason_REVOCATION_REASON_UNSPECIFIED        RevocationReason = 0
	RevocationReason_REVOCATION_REASON_AIGENERATEDWORK    RevocationReason = 1
	RevocationReason_REVOCATION_REASON_EXISTINGWORK       RevocationReason = 2
	RevocationReason_REVOCATION_REASON_NONEXISTINGWORK    RevocationReason = 3
	RevocationReason_REVOCATION_REASON_NONMUSICALWORK     RevocationReason = 4
	RevocationReason_REVOCATION_REASON_WORKINPUBLICDOMAIN RevocationReason = 5
)

// Enum value maps for RevocationReason.
var (
	RevocationReason_name = map[int32]string{
		0: "REVOCATION_REASON_UNSPECIFIED",
		1: "REVOCATION_REASON_AIGENERATEDWORK",
		2: "REVOCATION_REASON_EXISTINGWORK",
		3: "REVOCATION_REASON_NONEXISTINGWORK",
		4: "REVOCATION_REASON_NONMUSICALWORK",
		5: "REVOCATION_REASON_WORKINPUBLICDOMAIN",
	}
	RevocationReason_value = map[string]int32{
		"REVOCATION_REASON_UNSPECIFIED":        0,
		"REVOCATION_REASON_AIGENERATEDWORK":    1,
		"REVOCATION_REASON_EXISTINGWORK":       2,
		"REVOCATION_REASON_NONEXISTINGWORK":    3,
		"REVOCATION_REASON_NONMUSICALWORK":     4,
		"REVOCATION_REASON_WORKINPUBLICDOMAIN": 5,
	}
)

func (x RevocationReason) Enum() *RevocationReason {
	p := new(RevocationReason)
	*p = x
	return p
}

func (x RevocationReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevocationReason) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[190].Descriptor()
}

func (RevocationReason) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[190]
}

func (x RevocationReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevocationReason.Descriptor instead.
func (RevocationReason) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{190}
}

type RightShareType int32

const (
	RightShareType_RIGHT_SHARE_TYPE_UNSPECIFIED                RightShareType = 0
	RightShareType_RIGHT_SHARE_TYPE_COPYRIGHTCONTROLSHARE      RightShareType = 1
	RightShareType_RIGHT_SHARE_TYPE_LICENSINGSHARE             RightShareType = 2
	RightShareType_RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE RightShareType = 3
	RightShareType_RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE RightShareType = 4
	RightShareType_RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE     RightShareType = 5
)

// Enum value maps for RightShareType.
var (
	RightShareType_name = map[int32]string{
		0: "RIGHT_SHARE_TYPE_UNSPECIFIED",
		1: "RIGHT_SHARE_TYPE_COPYRIGHTCONTROLSHARE",
		2: "RIGHT_SHARE_TYPE_LICENSINGSHARE",
		3: "RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE",
		4: "RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE",
		5: "RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE",
	}
	RightShareType_value = map[string]int32{
		"RIGHT_SHARE_TYPE_UNSPECIFIED":                0,
		"RIGHT_SHARE_TYPE_COPYRIGHTCONTROLSHARE":      1,
		"RIGHT_SHARE_TYPE_LICENSINGSHARE":             2,
		"RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE": 3,
		"RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE": 4,
		"RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE":     5,
	}
)

func (x RightShareType) Enum() *RightShareType {
	p := new(RightShareType)
	*p = x
	return p
}

func (x RightShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[191].Descriptor()
}

func (RightShareType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[191]
}

func (x RightShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightShareType.Descriptor instead.
func (RightShareType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{191}
}

type RightShareTypeMWDR int32

const (
	RightShareTypeMWDR_RIGHT_SHARE_TYPE_M_W_D_R_UNSPECIFIED                RightShareTypeMWDR = 0
	RightShareTypeMWDR_RIGHT_SHARE_TYPE_M_W_D_R_LICENSINGSHARE             RightShareTypeMWDR = 1
	RightShareTypeMWDR_RIGHT_SHARE_TYPE_M_W_D_R_MUSICALWORKCOLLECTIONSHARE RightShareTypeMWDR = 2
	RightShareTypeMWDR_RIGHT_SHARE_TYPE_M_W_D_R_MUSICALWORKMANUSCRIPTSHARE RightShareTypeMWDR = 3
	RightShareTypeMWDR_RIGHT_SHARE_TYPE_M_W_D_R_ORIGINALPUBLISHERSHARE     RightShareTypeMWDR = 4
)

// Enum value maps for RightShareTypeMWDR.
var (
	RightShareTypeMWDR_name = map[int32]string{
		0: "RIGHT_SHARE_TYPE_M_W_D_R_UNSPECIFIED",
		1: "RIGHT_SHARE_TYPE_M_W_D_R_LICENSINGSHARE",
		2: "RIGHT_SHARE_TYPE_M_W_D_R_MUSICALWORKCOLLECTIONSHARE",
		3: "RIGHT_SHARE_TYPE_M_W_D_R_MUSICALWORKMANUSCRIPTSHARE",
		4: "RIGHT_SHARE_TYPE_M_W_D_R_ORIGINALPUBLISHERSHARE",
	}
	RightShareTypeMWDR_value = map[string]int32{
		"RIGHT_SHARE_TYPE_M_W_D_R_UNSPECIFIED":                0,
		"RIGHT_SHARE_TYPE_M_W_D_R_LICENSINGSHARE":             1,
		"RIGHT_SHARE_TYPE_M_W_D_R_MUSICALWORKCOLLECTIONSHARE": 2,
		"RIGHT_SHARE_TYPE_M_W_D_R_MUSICALWORKMANUSCRIPTSHARE": 3,
		"RIGHT_SHARE_TYPE_M_W_D_R_ORIGINALPUBLISHERSHARE":     4,
	}
)

func (x RightShareTypeMWDR) Enum() *RightShareTypeMWDR {
	p := new(RightShareTypeMWDR)
	*p = x
	return p
}

func (x RightShareTypeMWDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightShareTypeMWDR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[192].Descriptor()
}

func (RightShareTypeMWDR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[192]
}

func (x RightShareTypeMWDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightShareTypeMWDR.Descriptor instead.
func (RightShareTypeMWDR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{192}
}

type RightsClaimPolicyReason int32

const (
	RightsClaimPolicyReason_RIGHTS_CLAIM_POLICY_REASON_UNSPECIFIED       RightsClaimPolicyReason = 0
	RightsClaimPolicyReason_RIGHTS_CLAIM_POLICY_REASON_PRERELEASETIME    RightsClaimPolicyReason = 1
	RightsClaimPolicyReason_RIGHTS_CLAIM_POLICY_REASON_THIRDPARTYREQUEST RightsClaimPolicyReason = 2
	RightsClaimPolicyReason_RIGHTS_CLAIM_POLICY_REASON_USERDEFINED       RightsClaimPolicyReason = 3
)

// Enum value maps for RightsClaimPolicyReason.
var (
	RightsClaimPolicyReason_name = map[int32]string{
		0: "RIGHTS_CLAIM_POLICY_REASON_UNSPECIFIED",
		1: "RIGHTS_CLAIM_POLICY_REASON_PRERELEASETIME",
		2: "RIGHTS_CLAIM_POLICY_REASON_THIRDPARTYREQUEST",
		3: "RIGHTS_CLAIM_POLICY_REASON_USERDEFINED",
	}
	RightsClaimPolicyReason_value = map[string]int32{
		"RIGHTS_CLAIM_POLICY_REASON_UNSPECIFIED":       0,
		"RIGHTS_CLAIM_POLICY_REASON_PRERELEASETIME":    1,
		"RIGHTS_CLAIM_POLICY_REASON_THIRDPARTYREQUEST": 2,
		"RIGHTS_CLAIM_POLICY_REASON_USERDEFINED":       3,
	}
)

func (x RightsClaimPolicyReason) Enum() *RightsClaimPolicyReason {
	p := new(RightsClaimPolicyReason)
	*p = x
	return p
}

func (x RightsClaimPolicyReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsClaimPolicyReason) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[193].Descriptor()
}

func (RightsClaimPolicyReason) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[193]
}

func (x RightsClaimPolicyReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsClaimPolicyReason.Descriptor instead.
func (RightsClaimPolicyReason) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{193}
}

type RightsClaimPolicyType int32

const (
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED RightsClaimPolicyType = 0
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS RightsClaimPolicyType = 1
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_MONETIZE    RightsClaimPolicyType = 2
	RightsClaimPolicyType_RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE RightsClaimPolicyType = 3
)

// Enum value maps for RightsClaimPolicyType.
var (
	RightsClaimPolicyType_name = map[int32]string{
		0: "RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED",
		1: "RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS",
		2: "RIGHTS_CLAIM_POLICY_TYPE_MONETIZE",
		3: "RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE",
	}
	RightsClaimPolicyType_value = map[string]int32{
		"RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED": 0,
		"RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS": 1,
		"RIGHTS_CLAIM_POLICY_TYPE_MONETIZE":    2,
		"RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE": 3,
	}
)

func (x RightsClaimPolicyType) Enum() *RightsClaimPolicyType {
	p := new(RightsClaimPolicyType)
	*p = x
	return p
}

func (x RightsClaimPolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsClaimPolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[194].Descriptor()
}

func (RightsClaimPolicyType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[194]
}

func (x RightsClaimPolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsClaimPolicyType.Descriptor instead.
func (RightsClaimPolicyType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{194}
}

type RightsClaimStatus int32

const (
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_UNSPECIFIED      RightsClaimStatus = 0
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_CONFLICT         RightsClaimStatus = 1
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_DATAINCONSISTENT RightsClaimStatus = 2
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_NOCONFLICT       RightsClaimStatus = 3
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_PENDINGREVIEW    RightsClaimStatus = 4
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_REJECTED         RightsClaimStatus = 5
	RightsClaimStatus_RIGHTS_CLAIM_STATUS_REVOKED          RightsClaimStatus = 6
)

// Enum value maps for RightsClaimStatus.
var (
	RightsClaimStatus_name = map[int32]string{
		0: "RIGHTS_CLAIM_STATUS_UNSPECIFIED",
		1: "RIGHTS_CLAIM_STATUS_CONFLICT",
		2: "RIGHTS_CLAIM_STATUS_DATAINCONSISTENT",
		3: "RIGHTS_CLAIM_STATUS_NOCONFLICT",
		4: "RIGHTS_CLAIM_STATUS_PENDINGREVIEW",
		5: "RIGHTS_CLAIM_STATUS_REJECTED",
		6: "RIGHTS_CLAIM_STATUS_REVOKED",
	}
	RightsClaimStatus_value = map[string]int32{
		"RIGHTS_CLAIM_STATUS_UNSPECIFIED":      0,
		"RIGHTS_CLAIM_STATUS_CONFLICT":         1,
		"RIGHTS_CLAIM_STATUS_DATAINCONSISTENT": 2,
		"RIGHTS_CLAIM_STATUS_NOCONFLICT":       3,
		"RIGHTS_CLAIM_STATUS_PENDINGREVIEW":    4,
		"RIGHTS_CLAIM_STATUS_REJECTED":         5,
		"RIGHTS_CLAIM_STATUS_REVOKED":          6,
	}
)

func (x RightsClaimStatus) Enum() *RightsClaimStatus {
	p := new(RightsClaimStatus)
	*p = x
	return p
}

func (x RightsClaimStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsClaimStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[195].Descriptor()
}

func (RightsClaimStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[195]
}

func (x RightsClaimStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsClaimStatus.Descriptor instead.
func (RightsClaimStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{195}
}

type RightsControlType int32

const (
	RightsControlType_RIGHTS_CONTROL_TYPE_UNSPECIFIED         RightsControlType = 0
	RightsControlType_RIGHTS_CONTROL_TYPE_EXCLUSIVELICENSEE   RightsControlType = 1
	RightsControlType_RIGHTS_CONTROL_TYPE_LOCALPAYEE          RightsControlType = 2
	RightsControlType_RIGHTS_CONTROL_TYPE_ORIGINALOWNER       RightsControlType = 3
	RightsControlType_RIGHTS_CONTROL_TYPE_RIGHTSADMINISTRATOR RightsControlType = 4
	RightsControlType_RIGHTS_CONTROL_TYPE_SUCCESSORINTITLE    RightsControlType = 5
)

// Enum value maps for RightsControlType.
var (
	RightsControlType_name = map[int32]string{
		0: "RIGHTS_CONTROL_TYPE_UNSPECIFIED",
		1: "RIGHTS_CONTROL_TYPE_EXCLUSIVELICENSEE",
		2: "RIGHTS_CONTROL_TYPE_LOCALPAYEE",
		3: "RIGHTS_CONTROL_TYPE_ORIGINALOWNER",
		4: "RIGHTS_CONTROL_TYPE_RIGHTSADMINISTRATOR",
		5: "RIGHTS_CONTROL_TYPE_SUCCESSORINTITLE",
	}
	RightsControlType_value = map[string]int32{
		"RIGHTS_CONTROL_TYPE_UNSPECIFIED":         0,
		"RIGHTS_CONTROL_TYPE_EXCLUSIVELICENSEE":   1,
		"RIGHTS_CONTROL_TYPE_LOCALPAYEE":          2,
		"RIGHTS_CONTROL_TYPE_ORIGINALOWNER":       3,
		"RIGHTS_CONTROL_TYPE_RIGHTSADMINISTRATOR": 4,
		"RIGHTS_CONTROL_TYPE_SUCCESSORINTITLE":    5,
	}
)

func (x RightsControlType) Enum() *RightsControlType {
	p := new(RightsControlType)
	*p = x
	return p
}

func (x RightsControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[196].Descriptor()
}

func (RightsControlType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[196]
}

func (x RightsControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsControlType.Descriptor instead.
func (RightsControlType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{196}
}

type RightsControllerRole int32

const (
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_UNSPECIFIED                 RightsControllerRole = 0
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY RightsControllerRole = 1
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_LOCALPAYEE                  RightsControllerRole = 2
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR         RightsControllerRole = 3
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER            RightsControllerRole = 4
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_RIGHTSHOLDER                RightsControllerRole = 5
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR        RightsControllerRole = 6
	RightsControllerRole_RIGHTS_CONTROLLER_ROLE_UNKNOWN                     RightsControllerRole = 7
)

// Enum value maps for RightsControllerRole.
var (
	RightsControllerRole_name = map[int32]string{
		0: "RIGHTS_CONTROLLER_ROLE_UNSPECIFIED",
		1: "RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY",
		2: "RIGHTS_CONTROLLER_ROLE_LOCALPAYEE",
		3: "RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR",
		4: "RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER",
		5: "RIGHTS_CONTROLLER_ROLE_RIGHTSHOLDER",
		6: "RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR",
		7: "RIGHTS_CONTROLLER_ROLE_UNKNOWN",
	}
	RightsControllerRole_value = map[string]int32{
		"RIGHTS_CONTROLLER_ROLE_UNSPECIFIED":                 0,
		"RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY": 1,
		"RIGHTS_CONTROLLER_ROLE_LOCALPAYEE":                  2,
		"RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR":         3,
		"RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER":            4,
		"RIGHTS_CONTROLLER_ROLE_RIGHTSHOLDER":                5,
		"RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR":        6,
		"RIGHTS_CONTROLLER_ROLE_UNKNOWN":                     7,
	}
)

func (x RightsControllerRole) Enum() *RightsControllerRole {
	p := new(RightsControllerRole)
	*p = x
	return p
}

func (x RightsControllerRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsControllerRole) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[197].Descriptor()
}

func (RightsControllerRole) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[197]
}

func (x RightsControllerRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsControllerRole.Descriptor instead.
func (RightsControllerRole) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{197}
}

type RightsControllerType int32

const (
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_UNSPECIFIED       RightsControllerType = 0
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER     RightsControllerType = 1
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE  RightsControllerType = 2
	RightsControllerType_RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE RightsControllerType = 3
)

// Enum value maps for RightsControllerType.
var (
	RightsControllerType_name = map[int32]string{
		0: "RIGHTS_CONTROLLER_TYPE_UNSPECIFIED",
		1: "RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER",
		2: "RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE",
		3: "RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE",
	}
	RightsControllerType_value = map[string]int32{
		"RIGHTS_CONTROLLER_TYPE_UNSPECIFIED":       0,
		"RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER":     1,
		"RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE":  2,
		"RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE": 3,
	}
)

func (x RightsControllerType) Enum() *RightsControllerType {
	p := new(RightsControllerType)
	*p = x
	return p
}

func (x RightsControllerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsControllerType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[198].Descriptor()
}

func (RightsControllerType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[198]
}

func (x RightsControllerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsControllerType.Descriptor instead.
func (RightsControllerType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{198}
}

type RightsCoverage int32

const (
	RightsCoverage_RIGHTS_COVERAGE_UNSPECIFIED          RightsCoverage = 0
	RightsCoverage_RIGHTS_COVERAGE_MAKEAVAILABLERIGHT   RightsCoverage = 1
	RightsCoverage_RIGHTS_COVERAGE_MECHANICALRIGHT      RightsCoverage = 2
	RightsCoverage_RIGHTS_COVERAGE_PERFORMINGRIGHT      RightsCoverage = 3
	RightsCoverage_RIGHTS_COVERAGE_PRINTRIGHT           RightsCoverage = 4
	RightsCoverage_RIGHTS_COVERAGE_REPRODUCTIONRIGHT    RightsCoverage = 5
	RightsCoverage_RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT RightsCoverage = 6
	RightsCoverage_RIGHTS_COVERAGE_USERDEFINED          RightsCoverage = 7
)

// Enum value maps for RightsCoverage.
var (
	RightsCoverage_name = map[int32]string{
		0: "RIGHTS_COVERAGE_UNSPECIFIED",
		1: "RIGHTS_COVERAGE_MAKEAVAILABLERIGHT",
		2: "RIGHTS_COVERAGE_MECHANICALRIGHT",
		3: "RIGHTS_COVERAGE_PERFORMINGRIGHT",
		4: "RIGHTS_COVERAGE_PRINTRIGHT",
		5: "RIGHTS_COVERAGE_REPRODUCTIONRIGHT",
		6: "RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT",
		7: "RIGHTS_COVERAGE_USERDEFINED",
	}
	RightsCoverage_value = map[string]int32{
		"RIGHTS_COVERAGE_UNSPECIFIED":          0,
		"RIGHTS_COVERAGE_MAKEAVAILABLERIGHT":   1,
		"RIGHTS_COVERAGE_MECHANICALRIGHT":      2,
		"RIGHTS_COVERAGE_PERFORMINGRIGHT":      3,
		"RIGHTS_COVERAGE_PRINTRIGHT":           4,
		"RIGHTS_COVERAGE_REPRODUCTIONRIGHT":    5,
		"RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT": 6,
		"RIGHTS_COVERAGE_USERDEFINED":          7,
	}
)

func (x RightsCoverage) Enum() *RightsCoverage {
	p := new(RightsCoverage)
	*p = x
	return p
}

func (x RightsCoverage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsCoverage) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[199].Descriptor()
}

func (RightsCoverage) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[199]
}

func (x RightsCoverage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsCoverage.Descriptor instead.
func (RightsCoverage) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{199}
}

type RightsCoverageMWDR int32

const (
	RightsCoverageMWDR_RIGHTS_COVERAGE_M_W_D_R_UNSPECIFIED                          RightsCoverageMWDR = 0
	RightsCoverageMWDR_RIGHTS_COVERAGE_M_W_D_R_ALL                                  RightsCoverageMWDR = 1
	RightsCoverageMWDR_RIGHTS_COVERAGE_M_W_D_R_INFORMATIONNETWORKDISSEMINATIONRIGHT RightsCoverageMWDR = 2
	RightsCoverageMWDR_RIGHTS_COVERAGE_M_W_D_R_LYRICSRIGHT                          RightsCoverageMWDR = 3
	RightsCoverageMWDR_RIGHTS_COVERAGE_M_W_D_R_MECHANICALRIGHT                      RightsCoverageMWDR = 4
	RightsCoverageMWDR_RIGHTS_COVERAGE_M_W_D_R_PERFORMINGRIGHT                      RightsCoverageMWDR = 5
	RightsCoverageMWDR_RIGHTS_COVERAGE_M_W_D_R_PRINTRIGHT                           RightsCoverageMWDR = 6
	RightsCoverageMWDR_RIGHTS_COVERAGE_M_W_D_R_RENTALRIGHT                          RightsCoverageMWDR = 7
	RightsCoverageMWDR_RIGHTS_COVERAGE_M_W_D_R_SYNCHRONIZATIONRIGHT                 RightsCoverageMWDR = 8
)

// Enum value maps for RightsCoverageMWDR.
var (
	RightsCoverageMWDR_name = map[int32]string{
		0: "RIGHTS_COVERAGE_M_W_D_R_UNSPECIFIED",
		1: "RIGHTS_COVERAGE_M_W_D_R_ALL",
		2: "RIGHTS_COVERAGE_M_W_D_R_INFORMATIONNETWORKDISSEMINATIONRIGHT",
		3: "RIGHTS_COVERAGE_M_W_D_R_LYRICSRIGHT",
		4: "RIGHTS_COVERAGE_M_W_D_R_MECHANICALRIGHT",
		5: "RIGHTS_COVERAGE_M_W_D_R_PERFORMINGRIGHT",
		6: "RIGHTS_COVERAGE_M_W_D_R_PRINTRIGHT",
		7: "RIGHTS_COVERAGE_M_W_D_R_RENTALRIGHT",
		8: "RIGHTS_COVERAGE_M_W_D_R_SYNCHRONIZATIONRIGHT",
	}
	RightsCoverageMWDR_value = map[string]int32{
		"RIGHTS_COVERAGE_M_W_D_R_UNSPECIFIED":                          0,
		"RIGHTS_COVERAGE_M_W_D_R_ALL":                                  1,
		"RIGHTS_COVERAGE_M_W_D_R_INFORMATIONNETWORKDISSEMINATIONRIGHT": 2,
		"RIGHTS_COVERAGE_M_W_D_R_LYRICSRIGHT":                          3,
		"RIGHTS_COVERAGE_M_W_D_R_MECHANICALRIGHT":                      4,
		"RIGHTS_COVERAGE_M_W_D_R_PERFORMINGRIGHT":                      5,
		"RIGHTS_COVERAGE_M_W_D_R_PRINTRIGHT":                           6,
		"RIGHTS_COVERAGE_M_W_D_R_RENTALRIGHT":                          7,
		"RIGHTS_COVERAGE_M_W_D_R_SYNCHRONIZATIONRIGHT":                 8,
	}
)

func (x RightsCoverageMWDR) Enum() *RightsCoverageMWDR {
	p := new(RightsCoverageMWDR)
	*p = x
	return p
}

func (x RightsCoverageMWDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsCoverageMWDR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[200].Descriptor()
}

func (RightsCoverageMWDR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[200]
}

func (x RightsCoverageMWDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsCoverageMWDR.Descriptor instead.
func (RightsCoverageMWDR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{200}
}

type RightsStatementProfile int32

const (
	RightsStatementProfile_RIGHTS_STATEMENT_PROFILE_UNSPECIFIED         RightsStatementProfile = 0
	RightsStatementProfile_RIGHTS_STATEMENT_PROFILE_MANDATEDUSAGERIGHTS RightsStatementProfile = 1
	RightsStatementProfile_RIGHTS_STATEMENT_PROFILE_RIGHTSSTATEMENT     RightsStatementProfile = 2
)

// Enum value maps for RightsStatementProfile.
var (
	RightsStatementProfile_name = map[int32]string{
		0: "RIGHTS_STATEMENT_PROFILE_UNSPECIFIED",
		1: "RIGHTS_STATEMENT_PROFILE_MANDATEDUSAGERIGHTS",
		2: "RIGHTS_STATEMENT_PROFILE_RIGHTSSTATEMENT",
	}
	RightsStatementProfile_value = map[string]int32{
		"RIGHTS_STATEMENT_PROFILE_UNSPECIFIED":         0,
		"RIGHTS_STATEMENT_PROFILE_MANDATEDUSAGERIGHTS": 1,
		"RIGHTS_STATEMENT_PROFILE_RIGHTSSTATEMENT":     2,
	}
)

func (x RightsStatementProfile) Enum() *RightsStatementProfile {
	p := new(RightsStatementProfile)
	*p = x
	return p
}

func (x RightsStatementProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RightsStatementProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[201].Descriptor()
}

func (RightsStatementProfile) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[201]
}

func (x RightsStatementProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RightsStatementProfile.Descriptor instead.
func (RightsStatementProfile) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{201}
}

type RinFileStatus int32

const (
	RinFileStatus_RIN_FILE_STATUS_UNSPECIFIED RinFileStatus = 0
	RinFileStatus_RIN_FILE_STATUS_FILEOK      RinFileStatus = 1
	RinFileStatus_RIN_FILE_STATUS_USERDEFINED RinFileStatus = 2
)

// Enum value maps for RinFileStatus.
var (
	RinFileStatus_name = map[int32]string{
		0: "RIN_FILE_STATUS_UNSPECIFIED",
		1: "RIN_FILE_STATUS_FILEOK",
		2: "RIN_FILE_STATUS_USERDEFINED",
	}
	RinFileStatus_value = map[string]int32{
		"RIN_FILE_STATUS_UNSPECIFIED": 0,
		"RIN_FILE_STATUS_FILEOK":      1,
		"RIN_FILE_STATUS_USERDEFINED": 2,
	}
)

func (x RinFileStatus) Enum() *RinFileStatus {
	p := new(RinFileStatus)
	*p = x
	return p
}

func (x RinFileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RinFileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[202].Descriptor()
}

func (RinFileStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[202]
}

func (x RinFileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RinFileStatus.Descriptor instead.
func (RinFileStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{202}
}

type RinMessageType int32

const (
	RinMessageType_RIN_MESSAGE_TYPE_UNSPECIFIED                      RinMessageType = 0
	RinMessageType_RIN_MESSAGE_TYPE_RECORDINGINFORMATIONNOTIFICATION RinMessageType = 1
)

// Enum value maps for RinMessageType.
var (
	RinMessageType_name = map[int32]string{
		0: "RIN_MESSAGE_TYPE_UNSPECIFIED",
		1: "RIN_MESSAGE_TYPE_RECORDINGINFORMATIONNOTIFICATION",
	}
	RinMessageType_value = map[string]int32{
		"RIN_MESSAGE_TYPE_UNSPECIFIED":                      0,
		"RIN_MESSAGE_TYPE_RECORDINGINFORMATIONNOTIFICATION": 1,
	}
)

func (x RinMessageType) Enum() *RinMessageType {
	p := new(RinMessageType)
	*p = x
	return p
}

func (x RinMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RinMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[203].Descriptor()
}

func (RinMessageType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[203]
}

func (x RinMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RinMessageType.Descriptor instead.
func (RinMessageType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{203}
}

type RinProposedActionType int32

const (
	RinProposedActionType_RIN_PROPOSED_ACTION_TYPE_UNSPECIFIED RinProposedActionType = 0
	RinProposedActionType_RIN_PROPOSED_ACTION_TYPE_RESUBMIT    RinProposedActionType = 1
	RinProposedActionType_RIN_PROPOSED_ACTION_TYPE_USERDEFINED RinProposedActionType = 2
)

// Enum value maps for RinProposedActionType.
var (
	RinProposedActionType_name = map[int32]string{
		0: "RIN_PROPOSED_ACTION_TYPE_UNSPECIFIED",
		1: "RIN_PROPOSED_ACTION_TYPE_RESUBMIT",
		2: "RIN_PROPOSED_ACTION_TYPE_USERDEFINED",
	}
	RinProposedActionType_value = map[string]int32{
		"RIN_PROPOSED_ACTION_TYPE_UNSPECIFIED": 0,
		"RIN_PROPOSED_ACTION_TYPE_RESUBMIT":    1,
		"RIN_PROPOSED_ACTION_TYPE_USERDEFINED": 2,
	}
)

func (x RinProposedActionType) Enum() *RinProposedActionType {
	p := new(RinProposedActionType)
	*p = x
	return p
}

func (x RinProposedActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RinProposedActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[204].Descriptor()
}

func (RinProposedActionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[204]
}

func (x RinProposedActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RinProposedActionType.Descriptor instead.
func (RinProposedActionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{204}
}

type RoyaltyRateCalculationType int32

const (
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED                      RoyaltyRateCalculationType = 0
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE RoyaltyRateCalculationType = 1
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE      RoyaltyRateCalculationType = 2
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE            RoyaltyRateCalculationType = 3
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE      RoyaltyRateCalculationType = 4
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE             RoyaltyRateCalculationType = 5
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_PPD                              RoyaltyRateCalculationType = 6
	RoyaltyRateCalculationType_ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE                      RoyaltyRateCalculationType = 7
)

// Enum value maps for RoyaltyRateCalculationType.
var (
	RoyaltyRateCalculationType_name = map[int32]string{
		0: "ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED",
		1: "ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE",
		2: "ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE",
		3: "ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE",
		4: "ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE",
		5: "ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE",
		6: "ROYALTY_RATE_CALCULATION_TYPE_PPD",
		7: "ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE",
	}
	RoyaltyRateCalculationType_value = map[string]int32{
		"ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED":                      0,
		"ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE": 1,
		"ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE":      2,
		"ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE":            3,
		"ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE":      4,
		"ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE":             5,
		"ROYALTY_RATE_CALCULATION_TYPE_PPD":                              6,
		"ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE":                      7,
	}
)

func (x RoyaltyRateCalculationType) Enum() *RoyaltyRateCalculationType {
	p := new(RoyaltyRateCalculationType)
	*p = x
	return p
}

func (x RoyaltyRateCalculationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoyaltyRateCalculationType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[205].Descriptor()
}

func (RoyaltyRateCalculationType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[205]
}

func (x RoyaltyRateCalculationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoyaltyRateCalculationType.Descriptor instead.
func (RoyaltyRateCalculationType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{205}
}

type RoyaltyRateType int32

const (
	RoyaltyRateType_ROYALTY_RATE_TYPE_UNSPECIFIED           RoyaltyRateType = 0
	RoyaltyRateType_ROYALTY_RATE_TYPE_PENNYRATE             RoyaltyRateType = 1
	RoyaltyRateType_ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE RoyaltyRateType = 2
)

// Enum value maps for RoyaltyRateType.
var (
	RoyaltyRateType_name = map[int32]string{
		0: "ROYALTY_RATE_TYPE_UNSPECIFIED",
		1: "ROYALTY_RATE_TYPE_PENNYRATE",
		2: "ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE",
	}
	RoyaltyRateType_value = map[string]int32{
		"ROYALTY_RATE_TYPE_UNSPECIFIED":           0,
		"ROYALTY_RATE_TYPE_PENNYRATE":             1,
		"ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE": 2,
	}
)

func (x RoyaltyRateType) Enum() *RoyaltyRateType {
	p := new(RoyaltyRateType)
	*p = x
	return p
}

func (x RoyaltyRateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoyaltyRateType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[206].Descriptor()
}

func (RoyaltyRateType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[206]
}

func (x RoyaltyRateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoyaltyRateType.Descriptor instead.
func (RoyaltyRateType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{206}
}

type SheetMusicCodecType int32

const (
	SheetMusicCodecType_SHEET_MUSIC_CODEC_TYPE_UNSPECIFIED SheetMusicCodecType = 0
	SheetMusicCodecType_SHEET_MUSIC_CODEC_TYPE_USERDEFINED SheetMusicCodecType = 1
)

// Enum value maps for SheetMusicCodecType.
var (
	SheetMusicCodecType_name = map[int32]string{
		0: "SHEET_MUSIC_CODEC_TYPE_UNSPECIFIED",
		1: "SHEET_MUSIC_CODEC_TYPE_USERDEFINED",
	}
	SheetMusicCodecType_value = map[string]int32{
		"SHEET_MUSIC_CODEC_TYPE_UNSPECIFIED": 0,
		"SHEET_MUSIC_CODEC_TYPE_USERDEFINED": 1,
	}
)

func (x SheetMusicCodecType) Enum() *SheetMusicCodecType {
	p := new(SheetMusicCodecType)
	*p = x
	return p
}

func (x SheetMusicCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SheetMusicCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[207].Descriptor()
}

func (SheetMusicCodecType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[207]
}

func (x SheetMusicCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SheetMusicCodecType.Descriptor instead.
func (SheetMusicCodecType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{207}
}

type SheetMusicType int32

const (
	SheetMusicType_SHEET_MUSIC_TYPE_UNSPECIFIED SheetMusicType = 0
	SheetMusicType_SHEET_MUSIC_TYPE_USERDEFINED SheetMusicType = 1
)

// Enum value maps for SheetMusicType.
var (
	SheetMusicType_name = map[int32]string{
		0: "SHEET_MUSIC_TYPE_UNSPECIFIED",
		1: "SHEET_MUSIC_TYPE_USERDEFINED",
	}
	SheetMusicType_value = map[string]int32{
		"SHEET_MUSIC_TYPE_UNSPECIFIED": 0,
		"SHEET_MUSIC_TYPE_USERDEFINED": 1,
	}
)

func (x SheetMusicType) Enum() *SheetMusicType {
	p := new(SheetMusicType)
	*p = x
	return p
}

func (x SheetMusicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SheetMusicType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[208].Descriptor()
}

func (SheetMusicType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[208]
}

func (x SheetMusicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SheetMusicType.Descriptor instead.
func (SheetMusicType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{208}
}

type SoftwareType int32

const (
	SoftwareType_SOFTWARE_TYPE_UNSPECIFIED             SoftwareType = 0
	SoftwareType_SOFTWARE_TYPE_INTERACTIVEBOOKLET      SoftwareType = 1
	SoftwareType_SOFTWARE_TYPE_MUSICALWORKBASEDGAME    SoftwareType = 2
	SoftwareType_SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME SoftwareType = 3
	SoftwareType_SOFTWARE_TYPE_SCREENSAVER             SoftwareType = 4
	SoftwareType_SOFTWARE_TYPE_UNKNOWN                 SoftwareType = 5
	SoftwareType_SOFTWARE_TYPE_USERDEFINED             SoftwareType = 6
)

// Enum value maps for SoftwareType.
var (
	SoftwareType_name = map[int32]string{
		0: "SOFTWARE_TYPE_UNSPECIFIED",
		1: "SOFTWARE_TYPE_INTERACTIVEBOOKLET",
		2: "SOFTWARE_TYPE_MUSICALWORKBASEDGAME",
		3: "SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME",
		4: "SOFTWARE_TYPE_SCREENSAVER",
		5: "SOFTWARE_TYPE_UNKNOWN",
		6: "SOFTWARE_TYPE_USERDEFINED",
	}
	SoftwareType_value = map[string]int32{
		"SOFTWARE_TYPE_UNSPECIFIED":             0,
		"SOFTWARE_TYPE_INTERACTIVEBOOKLET":      1,
		"SOFTWARE_TYPE_MUSICALWORKBASEDGAME":    2,
		"SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME": 3,
		"SOFTWARE_TYPE_SCREENSAVER":             4,
		"SOFTWARE_TYPE_UNKNOWN":                 5,
		"SOFTWARE_TYPE_USERDEFINED":             6,
	}
)

func (x SoftwareType) Enum() *SoftwareType {
	p := new(SoftwareType)
	*p = x
	return p
}

func (x SoftwareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoftwareType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[209].Descriptor()
}

func (SoftwareType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[209]
}

func (x SoftwareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoftwareType.Descriptor instead.
func (SoftwareType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{209}
}

type SoundRecordingType int32

const (
	SoundRecordingType_SOUND_RECORDING_TYPE_UNSPECIFIED                           SoundRecordingType = 0
	SoundRecordingType_SOUND_RECORDING_TYPE_AUDIOSTEM                             SoundRecordingType = 1
	SoundRecordingType_SOUND_RECORDING_TYPE_CLIP                                  SoundRecordingType = 2
	SoundRecordingType_SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING    SoundRecordingType = 3
	SoundRecordingType_SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING             SoundRecordingType = 4
	SoundRecordingType_SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING SoundRecordingType = 5
	SoundRecordingType_SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING          SoundRecordingType = 6
	SoundRecordingType_SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING              SoundRecordingType = 7
	SoundRecordingType_SOUND_RECORDING_TYPE_UNKNOWN                               SoundRecordingType = 8
	SoundRecordingType_SOUND_RECORDING_TYPE_USERDEFINED                           SoundRecordingType = 9
)

// Enum value maps for SoundRecordingType.
var (
	SoundRecordingType_name = map[int32]string{
		0: "SOUND_RECORDING_TYPE_UNSPECIFIED",
		1: "SOUND_RECORDING_TYPE_AUDIOSTEM",
		2: "SOUND_RECORDING_TYPE_CLIP",
		3: "SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING",
		4: "SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING",
		5: "SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING",
		6: "SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING",
		7: "SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING",
		8: "SOUND_RECORDING_TYPE_UNKNOWN",
		9: "SOUND_RECORDING_TYPE_USERDEFINED",
	}
	SoundRecordingType_value = map[string]int32{
		"SOUND_RECORDING_TYPE_UNSPECIFIED":                           0,
		"SOUND_RECORDING_TYPE_AUDIOSTEM":                             1,
		"SOUND_RECORDING_TYPE_CLIP":                                  2,
		"SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING":    3,
		"SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING":             4,
		"SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING": 5,
		"SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING":          6,
		"SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING":              7,
		"SOUND_RECORDING_TYPE_UNKNOWN":                               8,
		"SOUND_RECORDING_TYPE_USERDEFINED":                           9,
	}
)

func (x SoundRecordingType) Enum() *SoundRecordingType {
	p := new(SoundRecordingType)
	*p = x
	return p
}

func (x SoundRecordingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoundRecordingType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[210].Descriptor()
}

func (SoundRecordingType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[210]
}

func (x SoundRecordingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoundRecordingType.Descriptor instead.
func (SoundRecordingType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{210}
}

type SpecialContributorType int32

const (
	SpecialContributorType_SPECIAL_CONTRIBUTOR_TYPE_UNSPECIFIED    SpecialContributorType = 0
	SpecialContributorType_SPECIAL_CONTRIBUTOR_TYPE_GENERATIVEAI   SpecialContributorType = 1
	SpecialContributorType_SPECIAL_CONTRIBUTOR_TYPE_TRADITIONAL    SpecialContributorType = 2
	SpecialContributorType_SPECIAL_CONTRIBUTOR_TYPE_USERDEFINED    SpecialContributorType = 3
	SpecialContributorType_SPECIAL_CONTRIBUTOR_TYPE_VARIOUSARTISTS SpecialContributorType = 4
)

// Enum value maps for SpecialContributorType.
var (
	SpecialContributorType_name = map[int32]string{
		0: "SPECIAL_CONTRIBUTOR_TYPE_UNSPECIFIED",
		1: "SPECIAL_CONTRIBUTOR_TYPE_GENERATIVEAI",
		2: "SPECIAL_CONTRIBUTOR_TYPE_TRADITIONAL",
		3: "SPECIAL_CONTRIBUTOR_TYPE_USERDEFINED",
		4: "SPECIAL_CONTRIBUTOR_TYPE_VARIOUSARTISTS",
	}
	SpecialContributorType_value = map[string]int32{
		"SPECIAL_CONTRIBUTOR_TYPE_UNSPECIFIED":    0,
		"SPECIAL_CONTRIBUTOR_TYPE_GENERATIVEAI":   1,
		"SPECIAL_CONTRIBUTOR_TYPE_TRADITIONAL":    2,
		"SPECIAL_CONTRIBUTOR_TYPE_USERDEFINED":    3,
		"SPECIAL_CONTRIBUTOR_TYPE_VARIOUSARTISTS": 4,
	}
)

func (x SpecialContributorType) Enum() *SpecialContributorType {
	p := new(SpecialContributorType)
	*p = x
	return p
}

func (x SpecialContributorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecialContributorType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[211].Descriptor()
}

func (SpecialContributorType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[211]
}

func (x SpecialContributorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecialContributorType.Descriptor instead.
func (SpecialContributorType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{211}
}

type Status int32

const (
	Status_STATUS_UNSPECIFIED       Status = 0
	Status_STATUS_ASSETSNEEDED      Status = 1
	Status_STATUS_AWAITINGMATERIALS Status = 2
	Status_STATUS_BACKEDUP          Status = 3
	Status_STATUS_CANCELED          Status = 4
	Status_STATUS_CLOSED            Status = 5
	Status_STATUS_COMPLETED         Status = 6
	Status_STATUS_INWORK            Status = 7
	Status_STATUS_NOTSTARTED        Status = 8
	Status_STATUS_USERDEFINED       Status = 9
	Status_STATUS_VERIFIED          Status = 10
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "STATUS_ASSETSNEEDED",
		2:  "STATUS_AWAITINGMATERIALS",
		3:  "STATUS_BACKEDUP",
		4:  "STATUS_CANCELED",
		5:  "STATUS_CLOSED",
		6:  "STATUS_COMPLETED",
		7:  "STATUS_INWORK",
		8:  "STATUS_NOTSTARTED",
		9:  "STATUS_USERDEFINED",
		10: "STATUS_VERIFIED",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":       0,
		"STATUS_ASSETSNEEDED":      1,
		"STATUS_AWAITINGMATERIALS": 2,
		"STATUS_BACKEDUP":          3,
		"STATUS_CANCELED":          4,
		"STATUS_CLOSED":            5,
		"STATUS_COMPLETED":         6,
		"STATUS_INWORK":            7,
		"STATUS_NOTSTARTED":        8,
		"STATUS_USERDEFINED":       9,
		"STATUS_VERIFIED":          10,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[212].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[212]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{212}
}

type SubGenre int32

const (
	SubGenre_SUB_GENRE_UNSPECIFIED              SubGenre = 0
	SubGenre_SUB_GENRE_ACOUSTICCHICAGOBLUES     SubGenre = 1
	SubGenre_SUB_GENRE_BOOGIEWOOGIE             SubGenre = 2
	SubGenre_SUB_GENRE_BRITISHBLUES             SubGenre = 3
	SubGenre_SUB_GENRE_CHICAGOBLUES             SubGenre = 4
	SubGenre_SUB_GENRE_CLASSICFEMALEBLUES       SubGenre = 5
	SubGenre_SUB_GENRE_COUNTRYBLUES             SubGenre = 6
	SubGenre_SUB_GENRE_DELTABLUES               SubGenre = 7
	SubGenre_SUB_GENRE_ELECTRICTEXASBLUES       SubGenre = 8
	SubGenre_SUB_GENRE_HILLCOUNTRYBLUES         SubGenre = 9
	SubGenre_SUB_GENRE_JUMPBLUES                SubGenre = 10
	SubGenre_SUB_GENRE_MODERNBLUES              SubGenre = 11
	SubGenre_SUB_GENRE_NEWORLEANSBLUES          SubGenre = 12
	SubGenre_SUB_GENRE_PIANOBLUES               SubGenre = 13
	SubGenre_SUB_GENRE_PIEDMONTBLUES            SubGenre = 14
	SubGenre_SUB_GENRE_ROOTS                    SubGenre = 15
	SubGenre_SUB_GENRE_SWAMPBLUES               SubGenre = 16
	SubGenre_SUB_GENRE_TEXASBLUES               SubGenre = 17
	SubGenre_SUB_GENRE_TRADITIONALACOUSTIC      SubGenre = 18
	SubGenre_SUB_GENRE_TRADITIONALELECTRIC      SubGenre = 19
	SubGenre_SUB_GENRE_WESTCOASTBLUES           SubGenre = 20
	SubGenre_SUB_GENRE_E_20THCENTURY            SubGenre = 21
	SubGenre_SUB_GENRE_E_21STCENTURY            SubGenre = 22
	SubGenre_SUB_GENRE_ACOUSMATIC               SubGenre = 23
	SubGenre_SUB_GENRE_AMBROSIANCHANT           SubGenre = 24
	SubGenre_SUB_GENRE_ARSANTIQUA               SubGenre = 25
	SubGenre_SUB_GENRE_ARSNOVA                  SubGenre = 26
	SubGenre_SUB_GENRE_BAROQUE                  SubGenre = 27
	SubGenre_SUB_GENRE_BYZANTINECHANT           SubGenre = 28
	SubGenre_SUB_GENRE_CLASSICAL                SubGenre = 29
	SubGenre_SUB_GENRE_CLASSICALCROSSOVER       SubGenre = 30
	SubGenre_SUB_GENRE_CONTEMPORARY             SubGenre = 31
	SubGenre_SUB_GENRE_EARLY20THCENTURY         SubGenre = 32
	SubGenre_SUB_GENRE_EARLYBAROQUE             SubGenre = 33
	SubGenre_SUB_GENRE_EARLYELECTRONIC          SubGenre = 34
	SubGenre_SUB_GENRE_EARLYRENAISSANCE         SubGenre = 35
	SubGenre_SUB_GENRE_EARLYROMANTIC            SubGenre = 36
	SubGenre_SUB_GENRE_EXPERIMENTALCLASSICAL    SubGenre = 37
	SubGenre_SUB_GENRE_EXPRESSIONISM            SubGenre = 38
	SubGenre_SUB_GENRE_FIRSTVIENNESESCHOOL      SubGenre = 39
	SubGenre_SUB_GENRE_FUTURISM                 SubGenre = 40
	SubGenre_SUB_GENRE_GREGORIANCHANT           SubGenre = 41
	SubGenre_SUB_GENRE_IMPRESSIONISM            SubGenre = 42
	SubGenre_SUB_GENRE_LATE20THCENTURY          SubGenre = 43
	SubGenre_SUB_GENRE_LATEBAROQUE              SubGenre = 44
	SubGenre_SUB_GENRE_LATERENAISSANCE          SubGenre = 45
	SubGenre_SUB_GENRE_LATEROMANTIC             SubGenre = 46
	SubGenre_SUB_GENRE_LIGHTMUSIC               SubGenre = 47
	SubGenre_SUB_GENRE_MEDIEVAL                 SubGenre = 48
	SubGenre_SUB_GENRE_MIDDLE20THCENTURY        SubGenre = 49
	SubGenre_SUB_GENRE_MIDDLEBAROQUE            SubGenre = 50
	SubGenre_SUB_GENRE_MIDDLERENAISSANCE        SubGenre = 51
	SubGenre_SUB_GENRE_MIDDLEROMANTIC           SubGenre = 52
	SubGenre_SUB_GENRE_MINIMALISM               SubGenre = 53
	SubGenre_SUB_GENRE_MODERNISM                SubGenre = 54
	SubGenre_SUB_GENRE_MUSIQUECONCRETE          SubGenre = 55
	SubGenre_SUB_GENRE_NATIONALIST              SubGenre = 56
	SubGenre_SUB_GENRE_NEOCLASSICAL             SubGenre = 57
	SubGenre_SUB_GENRE_NEOROMANTIC              SubGenre = 58
	SubGenre_SUB_GENRE_ORCHESTRALFUSION         SubGenre = 59
	SubGenre_SUB_GENRE_ORGANUM                  SubGenre = 60
	SubGenre_SUB_GENRE_PLAINSONG                SubGenre = 61
	SubGenre_SUB_GENRE_POSTCLASSICAL            SubGenre = 62
	SubGenre_SUB_GENRE_POSTMINIMALISM           SubGenre = 63
	SubGenre_SUB_GENRE_PRECLASSICAL             SubGenre = 64
	SubGenre_SUB_GENRE_RENAISSANCE              SubGenre = 65
	SubGenre_SUB_GENRE_ROMANTIC                 SubGenre = 66
	SubGenre_SUB_GENRE_SERIALISM                SubGenre = 67
	SubGenre_SUB_GENRE_SPECTRALISM              SubGenre = 68
	SubGenre_SUB_GENRE_ALTERNATIVECOUNTRY       SubGenre = 69
	SubGenre_SUB_GENRE_AMERICANA                SubGenre = 70
	SubGenre_SUB_GENRE_BAKERSFIELDSOUND         SubGenre = 71
	SubGenre_SUB_GENRE_BLUEGRASS                SubGenre = 72
	SubGenre_SUB_GENRE_COUNTRYPOP               SubGenre = 73
	SubGenre_SUB_GENRE_COUNTRYRAP               SubGenre = 74
	SubGenre_SUB_GENRE_COUNTRYROCK              SubGenre = 75
	SubGenre_SUB_GENRE_HONKYTONK                SubGenre = 76
	SubGenre_SUB_GENRE_MODERNCOUNTRY            SubGenre = 77
	SubGenre_SUB_GENRE_NASHVILLESOUND           SubGenre = 78
	SubGenre_SUB_GENRE_NEOTRADITIONALCOUNTRY    SubGenre = 79
	SubGenre_SUB_GENRE_OUTLAWCOUNTRY            SubGenre = 80
	SubGenre_SUB_GENRE_TEXASCOUNTRY             SubGenre = 81
	SubGenre_SUB_GENRE_TRADITIONALCOUNTRY       SubGenre = 82
	SubGenre_SUB_GENRE_WESTERNSWING             SubGenre = 83
	SubGenre_SUB_GENRE_E_2STEPGARAGE            SubGenre = 84
	SubGenre_SUB_GENRE_ACIDHOUSE                SubGenre = 85
	SubGenre_SUB_GENRE_ACIDTECHNO               SubGenre = 86
	SubGenre_SUB_GENRE_AMBIENT                  SubGenre = 87
	SubGenre_SUB_GENRE_AMBIENTHOUSE             SubGenre = 88
	SubGenre_SUB_GENRE_BASSLINE                 SubGenre = 89
	SubGenre_SUB_GENRE_BIGBEAT                  SubGenre = 90
	SubGenre_SUB_GENRE_BREAKBEAT                SubGenre = 91
	SubGenre_SUB_GENRE_BROKENBEAT               SubGenre = 92
	SubGenre_SUB_GENRE_CHICAGOHOUSE             SubGenre = 93
	SubGenre_SUB_GENRE_DEEPHOUSE                SubGenre = 94
	SubGenre_SUB_GENRE_DETROITHOUSE             SubGenre = 95
	SubGenre_SUB_GENRE_DETROITTECHNO            SubGenre = 96
	SubGenre_SUB_GENRE_DIGITALHARDCORE          SubGenre = 97
	SubGenre_SUB_GENRE_DOWNTEMPO                SubGenre = 98
	SubGenre_SUB_GENRE_DRILLNBASS               SubGenre = 99
	SubGenre_SUB_GENRE_DRUMNBASS                SubGenre = 100
	SubGenre_SUB_GENRE_DRUMSTEP                 SubGenre = 101
	SubGenre_SUB_GENRE_DUBSTEPUK                SubGenre = 102
	SubGenre_SUB_GENRE_DUBSTEPUS                SubGenre = 103
	SubGenre_SUB_GENRE_DUBTRONICA               SubGenre = 104
	SubGenre_SUB_GENRE_DUTCHHOUSE               SubGenre = 105
	SubGenre_SUB_GENRE_EBM                      SubGenre = 106
	SubGenre_SUB_GENRE_ELECTRO                  SubGenre = 107
	SubGenre_SUB_GENRE_ELECTROHOUSE             SubGenre = 108
	SubGenre_SUB_GENRE_ELECTRONICA_ECLECTIC     SubGenre = 109
	SubGenre_SUB_GENRE_EURODANCE                SubGenre = 110
	SubGenre_SUB_GENRE_EXPERIMENTALELECTRONIC   SubGenre = 111
	SubGenre_SUB_GENRE_FRENCHHOUSE              SubGenre = 112
	SubGenre_SUB_GENRE_FUTUREGARAGE             SubGenre = 113
	SubGenre_SUB_GENRE_GABBA                    SubGenre = 114
	SubGenre_SUB_GENRE_GARAGEHOUSE              SubGenre = 115
	SubGenre_SUB_GENRE_GLITCH                   SubGenre = 116
	SubGenre_SUB_GENRE_HAPPYHARDCORE            SubGenre = 117
	SubGenre_SUB_GENRE_HARDTRANCE               SubGenre = 118
	SubGenre_SUB_GENRE_HARDCORE                 SubGenre = 119
	SubGenre_SUB_GENRE_HARDCOREBREAKBEAT        SubGenre = 120
	SubGenre_SUB_GENRE_HARDSTYLE                SubGenre = 121
	SubGenre_SUB_GENRE_HIPHOUSE                 SubGenre = 122
	SubGenre_SUB_GENRE_HOUSE                    SubGenre = 123
	SubGenre_SUB_GENRE_IDM                      SubGenre = 124
	SubGenre_SUB_GENRE_JAZZHOUSE                SubGenre = 125
	SubGenre_SUB_GENRE_JUNGLE                   SubGenre = 126
	SubGenre_SUB_GENRE_KWAITO                   SubGenre = 127
	SubGenre_SUB_GENRE_LATINHOUSE               SubGenre = 128
	SubGenre_SUB_GENRE_MINIMALHOUSE             SubGenre = 129
	SubGenre_SUB_GENRE_MINIMALTECHNO            SubGenre = 130
	SubGenre_SUB_GENRE_NOISEMUSIC               SubGenre = 131
	SubGenre_SUB_GENRE_NUDISCO                  SubGenre = 132
	SubGenre_SUB_GENRE_PROGRESSIVEHOUSE         SubGenre = 133
	SubGenre_SUB_GENRE_PROGRESSIVETRANCE        SubGenre = 134
	SubGenre_SUB_GENRE_PSYCHEDELICTRANCE        SubGenre = 135
	SubGenre_SUB_GENRE_SCHRANZ                  SubGenre = 136
	SubGenre_SUB_GENRE_SPEEDGARAGE              SubGenre = 137
	SubGenre_SUB_GENRE_SYNTHWAVE                SubGenre = 138
	SubGenre_SUB_GENRE_TECHHOUSE                SubGenre = 139
	SubGenre_SUB_GENRE_TECHNO                   SubGenre = 140
	SubGenre_SUB_GENRE_TRANCE                   SubGenre = 141
	SubGenre_SUB_GENRE_TRIBALHOUSE              SubGenre = 142
	SubGenre_SUB_GENRE_TRIPHOP                  SubGenre = 143
	SubGenre_SUB_GENRE_UKFUNKY                  SubGenre = 144
	SubGenre_SUB_GENRE_UKGARAGE                 SubGenre = 145
	SubGenre_SUB_GENRE_VOCALHOUSE               SubGenre = 146
	SubGenre_SUB_GENRE_AMERICANFOLK             SubGenre = 147
	SubGenre_SUB_GENRE_AMERICANPRIMITIVEGUITAR  SubGenre = 148
	SubGenre_SUB_GENRE_BARBERSHOPMUSIC          SubGenre = 149
	SubGenre_SUB_GENRE_BRITISHFOLK              SubGenre = 150
	SubGenre_SUB_GENRE_CANADIANFIDDLING         SubGenre = 151
	SubGenre_SUB_GENRE_CANADIANFOLK             SubGenre = 152
	SubGenre_SUB_GENRE_CELTIC                   SubGenre = 153
	SubGenre_SUB_GENRE_ELECTRICFOLK             SubGenre = 154
	SubGenre_SUB_GENRE_ENGLISHFOLK              SubGenre = 155
	SubGenre_SUB_GENRE_FOLKBAROQUE              SubGenre = 156
	SubGenre_SUB_GENRE_FOLKREVIVAL              SubGenre = 157
	SubGenre_SUB_GENRE_INDIEFOLK                SubGenre = 158
	SubGenre_SUB_GENRE_IRISHFOLK                SubGenre = 159
	SubGenre_SUB_GENRE_NORTHAMERICANFOLK        SubGenre = 160
	SubGenre_SUB_GENRE_OLDTIME                  SubGenre = 161
	SubGenre_SUB_GENRE_SCOTTISHFOLK             SubGenre = 162
	SubGenre_SUB_GENRE_SEASHANTIES              SubGenre = 163
	SubGenre_SUB_GENRE_WELSHFOLK                SubGenre = 164
	SubGenre_SUB_GENRE_ZYDECO                   SubGenre = 165
	SubGenre_SUB_GENRE_CLASSICGOSPEL            SubGenre = 166
	SubGenre_SUB_GENRE_SOUTHERNGOSPEL           SubGenre = 167
	SubGenre_SUB_GENRE_ALTERNATIVERAP           SubGenre = 168
	SubGenre_SUB_GENRE_CHRISTIANRAP             SubGenre = 169
	SubGenre_SUB_GENRE_CLASSICHIPHOP            SubGenre = 170
	SubGenre_SUB_GENRE_CONSCIOUSRAP             SubGenre = 171
	SubGenre_SUB_GENRE_CRUNK                    SubGenre = 172
	SubGenre_SUB_GENRE_DIRTYRAP                 SubGenre = 173
	SubGenre_SUB_GENRE_EASTCOASTHIPHOP          SubGenre = 174
	SubGenre_SUB_GENRE_EXPERIMENTALHIPHOP       SubGenre = 175
	SubGenre_SUB_GENRE_FUNKCARIOCA              SubGenre = 176
	SubGenre_SUB_GENRE_GFUNK                    SubGenre = 177
	SubGenre_SUB_GENRE_GANGSTARAP               SubGenre = 178
	SubGenre_SUB_GENRE_GOLDENAGE                SubGenre = 179
	SubGenre_SUB_GENRE_GRIME                    SubGenre = 180
	SubGenre_SUB_GENRE_HARDCORERAP              SubGenre = 181
	SubGenre_SUB_GENRE_INSTRUMENTALHIPHOP       SubGenre = 182
	SubGenre_SUB_GENRE_MIAMIBASS                SubGenre = 183
	SubGenre_SUB_GENRE_POPRAP                   SubGenre = 184
	SubGenre_SUB_GENRE_SOUTHERNRAP              SubGenre = 185
	SubGenre_SUB_GENRE_TRAP                     SubGenre = 186
	SubGenre_SUB_GENRE_WESTCOASTHIPHOP          SubGenre = 187
	SubGenre_SUB_GENRE_ACIDJAZZ                 SubGenre = 188
	SubGenre_SUB_GENRE_AFRICANJAZZ              SubGenre = 189
	SubGenre_SUB_GENRE_AVANTGARDEJAZZ           SubGenre = 190
	SubGenre_SUB_GENRE_BEBOP                    SubGenre = 191
	SubGenre_SUB_GENRE_BOSSANOVA                SubGenre = 192
	SubGenre_SUB_GENRE_BRITISHDANCEBAND         SubGenre = 193
	SubGenre_SUB_GENRE_CAPEJAZZ                 SubGenre = 194
	SubGenre_SUB_GENRE_COOLJAZZ                 SubGenre = 195
	SubGenre_SUB_GENRE_DIXIELAND                SubGenre = 196
	SubGenre_SUB_GENRE_ETHIOPIANJAZZ            SubGenre = 197
	SubGenre_SUB_GENRE_FREEJAZZ                 SubGenre = 198
	SubGenre_SUB_GENRE_GYPSYJAZZ                SubGenre = 199
	SubGenre_SUB_GENRE_HARDBOP                  SubGenre = 200
	SubGenre_SUB_GENRE_JAZZBLUES                SubGenre = 201
	SubGenre_SUB_GENRE_JAZZFUNK                 SubGenre = 202
	SubGenre_SUB_GENRE_JAZZFUSION               SubGenre = 203
	SubGenre_SUB_GENRE_JAZZROCK                 SubGenre = 204
	SubGenre_SUB_GENRE_JAZZPOP                  SubGenre = 205
	SubGenre_SUB_GENRE_LATINJAZZ                SubGenre = 206
	SubGenre_SUB_GENRE_MODALJAZZ                SubGenre = 207
	SubGenre_SUB_GENRE_MODERNCREATIVE           SubGenre = 208
	SubGenre_SUB_GENRE_MODERNJAZZ               SubGenre = 209
	SubGenre_SUB_GENRE_POSTBOP                  SubGenre = 210
	SubGenre_SUB_GENRE_SMOOTHJAZZ               SubGenre = 211
	SubGenre_SUB_GENRE_SOULJAZZ                 SubGenre = 212
	SubGenre_SUB_GENRE_SWING                    SubGenre = 213
	SubGenre_SUB_GENRE_SWINGREVIVAL             SubGenre = 214
	SubGenre_SUB_GENRE_TRADITIONALJAZZ          SubGenre = 215
	SubGenre_SUB_GENRE_TRADITIONALPOP           SubGenre = 216
	SubGenre_SUB_GENRE_BACHATA                  SubGenre = 217
	SubGenre_SUB_GENRE_BANDA                    SubGenre = 218
	SubGenre_SUB_GENRE_BOOGALOO                 SubGenre = 219
	SubGenre_SUB_GENRE_BRAZILIAN                SubGenre = 220
	SubGenre_SUB_GENRE_CONJUNTO                 SubGenre = 221
	SubGenre_SUB_GENRE_CORRIDOS                 SubGenre = 222
	SubGenre_SUB_GENRE_DURANGUENSE              SubGenre = 223
	SubGenre_SUB_GENRE_GRUPERA                  SubGenre = 224
	SubGenre_SUB_GENRE_HUPANGO                  SubGenre = 225
	SubGenre_SUB_GENRE_MARIACHI                 SubGenre = 226
	SubGenre_SUB_GENRE_NEWMEXICOMUSIC           SubGenre = 227
	SubGenre_SUB_GENRE_NORTENO                  SubGenre = 228
	SubGenre_SUB_GENRE_RANCHERA                 SubGenre = 229
	SubGenre_SUB_GENRE_REGGAETON                SubGenre = 230
	SubGenre_SUB_GENRE_REGIONALMEXICAN          SubGenre = 231
	SubGenre_SUB_GENRE_SALSA                    SubGenre = 232
	SubGenre_SUB_GENRE_SERTANEJO                SubGenre = 233
	SubGenre_SUB_GENRE_TEJANO                   SubGenre = 234
	SubGenre_SUB_GENRE_AFRICANPOP               SubGenre = 235
	SubGenre_SUB_GENRE_AFROBEAT                 SubGenre = 236
	SubGenre_SUB_GENRE_ALTERNATIVEDANCE         SubGenre = 237
	SubGenre_SUB_GENRE_ALTERNATIVEPOP           SubGenre = 238
	SubGenre_SUB_GENRE_AXE                      SubGenre = 239
	SubGenre_SUB_GENRE_BIKUTSI                  SubGenre = 240
	SubGenre_SUB_GENRE_BOLLYWOOD                SubGenre = 241
	SubGenre_SUB_GENRE_BRAZILIANPOP             SubGenre = 242
	SubGenre_SUB_GENRE_BREGA                    SubGenre = 243
	SubGenre_SUB_GENRE_CANTOPOP                 SubGenre = 244
	SubGenre_SUB_GENRE_CARIBBEANPOP             SubGenre = 245
	SubGenre_SUB_GENRE_CHAMBERPOP               SubGenre = 246
	SubGenre_SUB_GENRE_CHIMURENGA               SubGenre = 247
	SubGenre_SUB_GENRE_CHINESEPOP               SubGenre = 248
	SubGenre_SUB_GENRE_DREAMPOP                 SubGenre = 249
	SubGenre_SUB_GENRE_ELECTROCLASH             SubGenre = 250
	SubGenre_SUB_GENRE_ELECTRONICPOP            SubGenre = 251
	SubGenre_SUB_GENRE_ENKA                     SubGenre = 252
	SubGenre_SUB_GENRE_FILIPINOPOP              SubGenre = 253
	SubGenre_SUB_GENRE_FOLKTRONICA              SubGenre = 254
	SubGenre_SUB_GENRE_FRENCHPOP                SubGenre = 255
	SubGenre_SUB_GENRE_GERMANPOP                SubGenre = 256
	SubGenre_SUB_GENRE_GREEKPOP                 SubGenre = 257
	SubGenre_SUB_GENRE_HIGHLIFE                 SubGenre = 258
	SubGenre_SUB_GENRE_HIPLIFE                  SubGenre = 259
	SubGenre_SUB_GENRE_HOKKIENPOP               SubGenre = 260
	SubGenre_SUB_GENRE_INDIANPOP                SubGenre = 261
	SubGenre_SUB_GENRE_INDIEPOP                 SubGenre = 262
	SubGenre_SUB_GENRE_INDIETRONICA             SubGenre = 263
	SubGenre_SUB_GENRE_INDONESIANPOP            SubGenre = 264
	SubGenre_SUB_GENRE_JAPANESEPOP              SubGenre = 265
	SubGenre_SUB_GENRE_KAYOKYOKU                SubGenre = 266
	SubGenre_SUB_GENRE_KIZOMBA                  SubGenre = 267
	SubGenre_SUB_GENRE_KOREANPOP                SubGenre = 268
	SubGenre_SUB_GENRE_KUDURO                   SubGenre = 269
	SubGenre_SUB_GENRE_LATINFREESTYLE           SubGenre = 270
	SubGenre_SUB_GENRE_MADCHESTER               SubGenre = 271
	SubGenre_SUB_GENRE_MAKOSSA                  SubGenre = 272
	SubGenre_SUB_GENRE_MANDOPOP                 SubGenre = 273
	SubGenre_SUB_GENRE_MBALAX                   SubGenre = 274
	SubGenre_SUB_GENRE_MBAQANGA                 SubGenre = 275
	SubGenre_SUB_GENRE_MODERNLAIKO              SubGenre = 276
	SubGenre_SUB_GENRE_MODERNPOP                SubGenre = 277
	SubGenre_SUB_GENRE_MPB                      SubGenre = 278
	SubGenre_SUB_GENRE_MUSICOFTHEPHILIPPINES    SubGenre = 279
	SubGenre_SUB_GENRE_NDW                      SubGenre = 280
	SubGenre_SUB_GENRE_NEOPSYCHEDELIA           SubGenre = 281
	SubGenre_SUB_GENRE_NEWROMANTIC              SubGenre = 282
	SubGenre_SUB_GENRE_NEWWAVE                  SubGenre = 283
	SubGenre_SUB_GENRE_NOISEPOP                 SubGenre = 284
	SubGenre_SUB_GENRE_NOUVELLECHANSON          SubGenre = 285
	SubGenre_SUB_GENRE_POPROCK                  SubGenre = 286
	SubGenre_SUB_GENRE_PSYCHEDELICPOP           SubGenre = 287
	SubGenre_SUB_GENRE_SCHLAGER                 SubGenre = 288
	SubGenre_SUB_GENRE_SOCA                     SubGenre = 289
	SubGenre_SUB_GENRE_SOUKOUS                  SubGenre = 290
	SubGenre_SUB_GENRE_SYNTHPOP                 SubGenre = 291
	SubGenre_SUB_GENRE_TELUGU                   SubGenre = 292
	SubGenre_SUB_GENRE_TWEEPOP                  SubGenre = 293
	SubGenre_SUB_GENRE_AFROFUNK                 SubGenre = 294
	SubGenre_SUB_GENRE_ALTERNATIVER_N_B         SubGenre = 295
	SubGenre_SUB_GENRE_BLUEEYEDSOUL             SubGenre = 296
	SubGenre_SUB_GENRE_BOOGIE                   SubGenre = 297
	SubGenre_SUB_GENRE_CHICAGOSOUL              SubGenre = 298
	SubGenre_SUB_GENRE_CLASSICR_N_B             SubGenre = 299
	SubGenre_SUB_GENRE_CONTEMPORARYR_N_B        SubGenre = 300
	SubGenre_SUB_GENRE_DEEPSOUL                 SubGenre = 301
	SubGenre_SUB_GENRE_DISCO                    SubGenre = 302
	SubGenre_SUB_GENRE_DOOWOP                   SubGenre = 303
	SubGenre_SUB_GENRE_FUNK                     SubGenre = 304
	SubGenre_SUB_GENRE_GOGO                     SubGenre = 305
	SubGenre_SUB_GENRE_HINRG                    SubGenre = 306
	SubGenre_SUB_GENRE_ITALODISCO               SubGenre = 307
	SubGenre_SUB_GENRE_MEMPHISSOUL              SubGenre = 308
	SubGenre_SUB_GENRE_MINNEAPOLISFUNK          SubGenre = 309
	SubGenre_SUB_GENRE_MODERNR_N_B              SubGenre = 310
	SubGenre_SUB_GENRE_MOTOWNSOUND              SubGenre = 311
	SubGenre_SUB_GENRE_NEOSOUL                  SubGenre = 312
	SubGenre_SUB_GENRE_NEWJACKSWING             SubGenre = 313
	SubGenre_SUB_GENRE_NEWORLEANSR_N_B          SubGenre = 314
	SubGenre_SUB_GENRE_OGFUNK                   SubGenre = 315
	SubGenre_SUB_GENRE_PFUNK                    SubGenre = 316
	SubGenre_SUB_GENRE_PHILLYSOUND              SubGenre = 317
	SubGenre_SUB_GENRE_POPFUNK                  SubGenre = 318
	SubGenre_SUB_GENRE_PSYCHEDELICSOUL          SubGenre = 319
	SubGenre_SUB_GENRE_QUIETSTORM               SubGenre = 320
	SubGenre_SUB_GENRE_RETROSOUL                SubGenre = 321
	SubGenre_SUB_GENRE_SOUL                     SubGenre = 322
	SubGenre_SUB_GENRE_SOUTHERNSOUL             SubGenre = 323
	SubGenre_SUB_GENRE_TRADITIONALR_N_B         SubGenre = 324
	SubGenre_SUB_GENRE_URBANCONTEMPORARYGOSPEL  SubGenre = 325
	SubGenre_SUB_GENRE_WESTCOASTSOUL            SubGenre = 326
	SubGenre_SUB_GENRE_DANCEHALL                SubGenre = 327
	SubGenre_SUB_GENRE_DUB                      SubGenre = 328
	SubGenre_SUB_GENRE_ROCKSTEADY               SubGenre = 329
	SubGenre_SUB_GENRE_ROOTSREGGAE              SubGenre = 330
	SubGenre_SUB_GENRE_SKA                      SubGenre = 331
	SubGenre_SUB_GENRE_AFROROCK                 SubGenre = 332
	SubGenre_SUB_GENRE_ALTMETAL                 SubGenre = 333
	SubGenre_SUB_GENRE_ALTERNATIVEROCK          SubGenre = 334
	SubGenre_SUB_GENRE_ARTROCK                  SubGenre = 335
	SubGenre_SUB_GENRE_BLACKMETAL               SubGenre = 336
	SubGenre_SUB_GENRE_BOOGIEROCK               SubGenre = 337
	SubGenre_SUB_GENRE_BRITROCK                 SubGenre = 338
	SubGenre_SUB_GENRE_BRITISHINVASION          SubGenre = 339
	SubGenre_SUB_GENRE_BRITPOP                  SubGenre = 340
	SubGenre_SUB_GENRE_CLASSICROCK              SubGenre = 341
	SubGenre_SUB_GENRE_DARKWAVE                 SubGenre = 342
	SubGenre_SUB_GENRE_DEATHMETAL               SubGenre = 343
	SubGenre_SUB_GENRE_DOOMMETAL                SubGenre = 344
	SubGenre_SUB_GENRE_EARLYROCK                SubGenre = 345
	SubGenre_SUB_GENRE_ELECTROGOTH              SubGenre = 346
	SubGenre_SUB_GENRE_EMOROCK                  SubGenre = 347
	SubGenre_SUB_GENRE_EXPERIMENTALROCK         SubGenre = 348
	SubGenre_SUB_GENRE_FUNKMETAL                SubGenre = 349
	SubGenre_SUB_GENRE_GARAGEROCK               SubGenre = 350
	SubGenre_SUB_GENRE_GLAMROCK                 SubGenre = 351
	SubGenre_SUB_GENRE_GOTHICMETAL              SubGenre = 352
	SubGenre_SUB_GENRE_GOTHICROCK               SubGenre = 353
	SubGenre_SUB_GENRE_GRINDCORE                SubGenre = 354
	SubGenre_SUB_GENRE_GRUNGE                   SubGenre = 355
	SubGenre_SUB_GENRE_HAIRMETAL                SubGenre = 356
	SubGenre_SUB_GENRE_HARDROCK                 SubGenre = 357
	SubGenre_SUB_GENRE_HARDCOREPUNK             SubGenre = 358
	SubGenre_SUB_GENRE_HEARTLANDROCK            SubGenre = 359
	SubGenre_SUB_GENRE_INDIEROCK                SubGenre = 360
	SubGenre_SUB_GENRE_INDUSTRIAL               SubGenre = 361
	SubGenre_SUB_GENRE_INDUSTRIALMETAL          SubGenre = 362
	SubGenre_SUB_GENRE_JOVEMGUARDA              SubGenre = 363
	SubGenre_SUB_GENRE_KRAUTROCK                SubGenre = 364
	SubGenre_SUB_GENRE_MATHROCK                 SubGenre = 365
	SubGenre_SUB_GENRE_MERSEYBEAT               SubGenre = 366
	SubGenre_SUB_GENRE_METAL                    SubGenre = 367
	SubGenre_SUB_GENRE_METALCORE                SubGenre = 368
	SubGenre_SUB_GENRE_NOWAVE                   SubGenre = 369
	SubGenre_SUB_GENRE_NOISEROCK                SubGenre = 370
	SubGenre_SUB_GENRE_NUMETAL                  SubGenre = 371
	SubGenre_SUB_GENRE_OI                       SubGenre = 372
	SubGenre_SUB_GENRE_POPPUNK                  SubGenre = 373
	SubGenre_SUB_GENRE_POSTGRUNGE               SubGenre = 374
	SubGenre_SUB_GENRE_POSTROCK                 SubGenre = 375
	SubGenre_SUB_GENRE_POSTHARDCORE             SubGenre = 376
	SubGenre_SUB_GENRE_POSTPUNK                 SubGenre = 377
	SubGenre_SUB_GENRE_POWERPOP                 SubGenre = 378
	SubGenre_SUB_GENRE_PROGRESSIVEMETAL         SubGenre = 379
	SubGenre_SUB_GENRE_PROGRESSIVEROCK          SubGenre = 380
	SubGenre_SUB_GENRE_PROTOPUNK                SubGenre = 381
	SubGenre_SUB_GENRE_PSYCHEDELICROCK          SubGenre = 382
	SubGenre_SUB_GENRE_PSYCHOBILLY              SubGenre = 383
	SubGenre_SUB_GENRE_PUNK                     SubGenre = 384
	SubGenre_SUB_GENRE_RIOTGRRRL                SubGenre = 385
	SubGenre_SUB_GENRE_ROCKNROLL                SubGenre = 386
	SubGenre_SUB_GENRE_ROCKABILLY               SubGenre = 387
	SubGenre_SUB_GENRE_SAMBAROCK                SubGenre = 388
	SubGenre_SUB_GENRE_SCREAMO                  SubGenre = 389
	SubGenre_SUB_GENRE_SHOEGAZE                 SubGenre = 390
	SubGenre_SUB_GENRE_SOFTROCK                 SubGenre = 391
	SubGenre_SUB_GENRE_SOUTHAMERICANROCK        SubGenre = 392
	SubGenre_SUB_GENRE_SOUTHERNROCK             SubGenre = 393
	SubGenre_SUB_GENRE_SPACEROCK                SubGenre = 394
	SubGenre_SUB_GENRE_SPEEDMETAL               SubGenre = 395
	SubGenre_SUB_GENRE_STONERROCK               SubGenre = 396
	SubGenre_SUB_GENRE_SURF                     SubGenre = 397
	SubGenre_SUB_GENRE_SWAMPROCK                SubGenre = 398
	SubGenre_SUB_GENRE_THIRDWAVESKA             SubGenre = 399
	SubGenre_SUB_GENRE_THRASHMETAL              SubGenre = 400
	SubGenre_SUB_GENRE_TROPICALIA               SubGenre = 401
	SubGenre_SUB_GENRE_TWOTONE                  SubGenre = 402
	SubGenre_SUB_GENRE_UNDERGROUND              SubGenre = 403
	SubGenre_SUB_GENRE_COMMENTARY               SubGenre = 404
	SubGenre_SUB_GENRE_CONVERSATION             SubGenre = 405
	SubGenre_SUB_GENRE_INTERVIEW                SubGenre = 406
	SubGenre_SUB_GENRE_MONOLOGUE                SubGenre = 407
	SubGenre_SUB_GENRE_POETRY                   SubGenre = 408
	SubGenre_SUB_GENRE_SKIT                     SubGenre = 409
	SubGenre_SUB_GENRE_STANDUPCOMEDY            SubGenre = 410
	SubGenre_SUB_GENRE_AFOXE                    SubGenre = 411
	SubGenre_SUB_GENRE_AFRICANMUSIC             SubGenre = 412
	SubGenre_SUB_GENRE_ARGENTINIANMUSIC         SubGenre = 413
	SubGenre_SUB_GENRE_BALINESEMUSIC            SubGenre = 414
	SubGenre_SUB_GENRE_BRAZILIANMUSIC           SubGenre = 415
	SubGenre_SUB_GENRE_CALYPSO                  SubGenre = 416
	SubGenre_SUB_GENRE_CAPOEIRAMUSIC            SubGenre = 417
	SubGenre_SUB_GENRE_CARIBBEANMUSIC           SubGenre = 418
	SubGenre_SUB_GENRE_CARNATICMUSIC            SubGenre = 419
	SubGenre_SUB_GENRE_CHACHACHA                SubGenre = 420
	SubGenre_SUB_GENRE_CHILEANMUSIC             SubGenre = 421
	SubGenre_SUB_GENRE_CHORO                    SubGenre = 422
	SubGenre_SUB_GENRE_COLOMBIANMUSIC           SubGenre = 423
	SubGenre_SUB_GENRE_CONTRADANZA              SubGenre = 424
	SubGenre_SUB_GENRE_CUBANMUSIC               SubGenre = 425
	SubGenre_SUB_GENRE_CUECA                    SubGenre = 426
	SubGenre_SUB_GENRE_CUMBIA                   SubGenre = 427
	SubGenre_SUB_GENRE_CZECHMUSIC               SubGenre = 428
	SubGenre_SUB_GENRE_DANZON                   SubGenre = 429
	SubGenre_SUB_GENRE_DIMOTIKO                 SubGenre = 430
	SubGenre_SUB_GENRE_DOMINICANMUSIC           SubGenre = 431
	SubGenre_SUB_GENRE_FADO                     SubGenre = 432
	SubGenre_SUB_GENRE_FLAMENCO                 SubGenre = 433
	SubGenre_SUB_GENRE_FRENCHMUSIC              SubGenre = 434
	SubGenre_SUB_GENRE_GAUCHOMUSIC              SubGenre = 435
	SubGenre_SUB_GENRE_GERMANMUSIC              SubGenre = 436
	SubGenre_SUB_GENRE_GREEKMUSIC               SubGenre = 437
	SubGenre_SUB_GENRE_GUARACHA                 SubGenre = 438
	SubGenre_SUB_GENRE_HINDUSTANICLASSICALMUSIC SubGenre = 439
	SubGenre_SUB_GENRE_INDIANMUSIC              SubGenre = 440
	SubGenre_SUB_GENRE_INDONESIANMUSIC          SubGenre = 441
	SubGenre_SUB_GENRE_IRISHMUSIC               SubGenre = 442
	SubGenre_SUB_GENRE_ITALIANMUSIC             SubGenre = 443
	SubGenre_SUB_GENRE_JAMAICANMUSIC            SubGenre = 444
	SubGenre_SUB_GENRE_JAVANESEMUSIC            SubGenre = 445
	SubGenre_SUB_GENRE_JEWISHMUSIC              SubGenre = 446
	SubGenre_SUB_GENRE_JUGENSEMBLE              SubGenre = 447
	SubGenre_SUB_GENRE_KLEZMER                  SubGenre = 448
	SubGenre_SUB_GENRE_MAMBO                    SubGenre = 449
	SubGenre_SUB_GENRE_MARACATU                 SubGenre = 450
	SubGenre_SUB_GENRE_MERENGUE                 SubGenre = 451
	SubGenre_SUB_GENRE_MEXICANMUSIC             SubGenre = 452
	SubGenre_SUB_GENRE_MIDDLEEASTERNMUSIC       SubGenre = 453
	SubGenre_SUB_GENRE_NEAPOLITANSONG           SubGenre = 454
	SubGenre_SUB_GENRE_NORTHAMERICANMUSIC       SubGenre = 455
	SubGenre_SUB_GENRE_PAKISTANIMUSIC           SubGenre = 456
	SubGenre_SUB_GENRE_PALO                     SubGenre = 457
	SubGenre_SUB_GENRE_PILON                    SubGenre = 458
	SubGenre_SUB_GENRE_POLKA                    SubGenre = 459
	SubGenre_SUB_GENRE_PORTUGUESEMUSIC          SubGenre = 460
	SubGenre_SUB_GENRE_PUERTORICANMUSIC         SubGenre = 461
	SubGenre_SUB_GENRE_PUNJABIMUSIC             SubGenre = 462
	SubGenre_SUB_GENRE_RAGTIME                  SubGenre = 463
	SubGenre_SUB_GENRE_REPENTE                  SubGenre = 464
	SubGenre_SUB_GENRE_ROMANIANMUSIC            SubGenre = 465
	SubGenre_SUB_GENRE_SALVES                   SubGenre = 466
	SubGenre_SUB_GENRE_SAMBA                    SubGenre = 467
	SubGenre_SUB_GENRE_SON                      SubGenre = 468
	SubGenre_SUB_GENRE_SOUTHAMERICANMUSIC       SubGenre = 469
	SubGenre_SUB_GENRE_SPANISHMUSIC             SubGenre = 470
	SubGenre_SUB_GENRE_SPIRITUAL                SubGenre = 471
	SubGenre_SUB_GENRE_TANGO                    SubGenre = 472
	SubGenre_SUB_GENRE_TIBETANMUSIC             SubGenre = 473
	SubGenre_SUB_GENRE_TONADA                   SubGenre = 474
	SubGenre_SUB_GENRE_TURKISHMUSIC             SubGenre = 475
	SubGenre_SUB_GENRE_TURKISHCLASSICALMUSIC    SubGenre = 476
	SubGenre_SUB_GENRE_WORKSONGS                SubGenre = 477
	SubGenre_SUB_GENRE_EXOTICA                  SubGenre = 478
	SubGenre_SUB_GENRE_NEWAGE                   SubGenre = 479
	SubGenre_SUB_GENRE_NEWFLAMENCO              SubGenre = 480
	SubGenre_SUB_GENRE_WORLDFUSIONJAZZ          SubGenre = 481
	SubGenre_SUB_GENRE_WORLDBEAT                SubGenre = 482
	SubGenre_SUB_GENRE_USERDEFINED              SubGenre = 483
)

// Enum value maps for SubGenre.
var (
	SubGenre_name = map[int32]string{
		0:   "SUB_GENRE_UNSPECIFIED",
		1:   "SUB_GENRE_ACOUSTICCHICAGOBLUES",
		2:   "SUB_GENRE_BOOGIEWOOGIE",
		3:   "SUB_GENRE_BRITISHBLUES",
		4:   "SUB_GENRE_CHICAGOBLUES",
		5:   "SUB_GENRE_CLASSICFEMALEBLUES",
		6:   "SUB_GENRE_COUNTRYBLUES",
		7:   "SUB_GENRE_DELTABLUES",
		8:   "SUB_GENRE_ELECTRICTEXASBLUES",
		9:   "SUB_GENRE_HILLCOUNTRYBLUES",
		10:  "SUB_GENRE_JUMPBLUES",
		11:  "SUB_GENRE_MODERNBLUES",
		12:  "SUB_GENRE_NEWORLEANSBLUES",
		13:  "SUB_GENRE_PIANOBLUES",
		14:  "SUB_GENRE_PIEDMONTBLUES",
		15:  "SUB_GENRE_ROOTS",
		16:  "SUB_GENRE_SWAMPBLUES",
		17:  "SUB_GENRE_TEXASBLUES",
		18:  "SUB_GENRE_TRADITIONALACOUSTIC",
		19:  "SUB_GENRE_TRADITIONALELECTRIC",
		20:  "SUB_GENRE_WESTCOASTBLUES",
		21:  "SUB_GENRE_E_20THCENTURY",
		22:  "SUB_GENRE_E_21STCENTURY",
		23:  "SUB_GENRE_ACOUSMATIC",
		24:  "SUB_GENRE_AMBROSIANCHANT",
		25:  "SUB_GENRE_ARSANTIQUA",
		26:  "SUB_GENRE_ARSNOVA",
		27:  "SUB_GENRE_BAROQUE",
		28:  "SUB_GENRE_BYZANTINECHANT",
		29:  "SUB_GENRE_CLASSICAL",
		30:  "SUB_GENRE_CLASSICALCROSSOVER",
		31:  "SUB_GENRE_CONTEMPORARY",
		32:  "SUB_GENRE_EARLY20THCENTURY",
		33:  "SUB_GENRE_EARLYBAROQUE",
		34:  "SUB_GENRE_EARLYELECTRONIC",
		35:  "SUB_GENRE_EARLYRENAISSANCE",
		36:  "SUB_GENRE_EARLYROMANTIC",
		37:  "SUB_GENRE_EXPERIMENTALCLASSICAL",
		38:  "SUB_GENRE_EXPRESSIONISM",
		39:  "SUB_GENRE_FIRSTVIENNESESCHOOL",
		40:  "SUB_GENRE_FUTURISM",
		41:  "SUB_GENRE_GREGORIANCHANT",
		42:  "SUB_GENRE_IMPRESSIONISM",
		43:  "SUB_GENRE_LATE20THCENTURY",
		44:  "SUB_GENRE_LATEBAROQUE",
		45:  "SUB_GENRE_LATERENAISSANCE",
		46:  "SUB_GENRE_LATEROMANTIC",
		47:  "SUB_GENRE_LIGHTMUSIC",
		48:  "SUB_GENRE_MEDIEVAL",
		49:  "SUB_GENRE_MIDDLE20THCENTURY",
		50:  "SUB_GENRE_MIDDLEBAROQUE",
		51:  "SUB_GENRE_MIDDLERENAISSANCE",
		52:  "SUB_GENRE_MIDDLEROMANTIC",
		53:  "SUB_GENRE_MINIMALISM",
		54:  "SUB_GENRE_MODERNISM",
		55:  "SUB_GENRE_MUSIQUECONCRETE",
		56:  "SUB_GENRE_NATIONALIST",
		57:  "SUB_GENRE_NEOCLASSICAL",
		58:  "SUB_GENRE_NEOROMANTIC",
		59:  "SUB_GENRE_ORCHESTRALFUSION",
		60:  "SUB_GENRE_ORGANUM",
		61:  "SUB_GENRE_PLAINSONG",
		62:  "SUB_GENRE_POSTCLASSICAL",
		63:  "SUB_GENRE_POSTMINIMALISM",
		64:  "SUB_GENRE_PRECLASSICAL",
		65:  "SUB_GENRE_RENAISSANCE",
		66:  "SUB_GENRE_ROMANTIC",
		67:  "SUB_GENRE_SERIALISM",
		68:  "SUB_GENRE_SPECTRALISM",
		69:  "SUB_GENRE_ALTERNATIVECOUNTRY",
		70:  "SUB_GENRE_AMERICANA",
		71:  "SUB_GENRE_BAKERSFIELDSOUND",
		72:  "SUB_GENRE_BLUEGRASS",
		73:  "SUB_GENRE_COUNTRYPOP",
		74:  "SUB_GENRE_COUNTRYRAP",
		75:  "SUB_GENRE_COUNTRYROCK",
		76:  "SUB_GENRE_HONKYTONK",
		77:  "SUB_GENRE_MODERNCOUNTRY",
		78:  "SUB_GENRE_NASHVILLESOUND",
		79:  "SUB_GENRE_NEOTRADITIONALCOUNTRY",
		80:  "SUB_GENRE_OUTLAWCOUNTRY",
		81:  "SUB_GENRE_TEXASCOUNTRY",
		82:  "SUB_GENRE_TRADITIONALCOUNTRY",
		83:  "SUB_GENRE_WESTERNSWING",
		84:  "SUB_GENRE_E_2STEPGARAGE",
		85:  "SUB_GENRE_ACIDHOUSE",
		86:  "SUB_GENRE_ACIDTECHNO",
		87:  "SUB_GENRE_AMBIENT",
		88:  "SUB_GENRE_AMBIENTHOUSE",
		89:  "SUB_GENRE_BASSLINE",
		90:  "SUB_GENRE_BIGBEAT",
		91:  "SUB_GENRE_BREAKBEAT",
		92:  "SUB_GENRE_BROKENBEAT",
		93:  "SUB_GENRE_CHICAGOHOUSE",
		94:  "SUB_GENRE_DEEPHOUSE",
		95:  "SUB_GENRE_DETROITHOUSE",
		96:  "SUB_GENRE_DETROITTECHNO",
		97:  "SUB_GENRE_DIGITALHARDCORE",
		98:  "SUB_GENRE_DOWNTEMPO",
		99:  "SUB_GENRE_DRILLNBASS",
		100: "SUB_GENRE_DRUMNBASS",
		101: "SUB_GENRE_DRUMSTEP",
		102: "SUB_GENRE_DUBSTEPUK",
		103: "SUB_GENRE_DUBSTEPUS",
		104: "SUB_GENRE_DUBTRONICA",
		105: "SUB_GENRE_DUTCHHOUSE",
		106: "SUB_GENRE_EBM",
		107: "SUB_GENRE_ELECTRO",
		108: "SUB_GENRE_ELECTROHOUSE",
		109: "SUB_GENRE_ELECTRONICA_ECLECTIC",
		110: "SUB_GENRE_EURODANCE",
		111: "SUB_GENRE_EXPERIMENTALELECTRONIC",
		112: "SUB_GENRE_FRENCHHOUSE",
		113: "SUB_GENRE_FUTUREGARAGE",
		114: "SUB_GENRE_GABBA",
		115: "SUB_GENRE_GARAGEHOUSE",
		116: "SUB_GENRE_GLITCH",
		117: "SUB_GENRE_HAPPYHARDCORE",
		118: "SUB_GENRE_HARDTRANCE",
		119: "SUB_GENRE_HARDCORE",
		120: "SUB_GENRE_HARDCOREBREAKBEAT",
		121: "SUB_GENRE_HARDSTYLE",
		122: "SUB_GENRE_HIPHOUSE",
		123: "SUB_GENRE_HOUSE",
		124: "SUB_GENRE_IDM",
		125: "SUB_GENRE_JAZZHOUSE",
		126: "SUB_GENRE_JUNGLE",
		127: "SUB_GENRE_KWAITO",
		128: "SUB_GENRE_LATINHOUSE",
		129: "SUB_GENRE_MINIMALHOUSE",
		130: "SUB_GENRE_MINIMALTECHNO",
		131: "SUB_GENRE_NOISEMUSIC",
		132: "SUB_GENRE_NUDISCO",
		133: "SUB_GENRE_PROGRESSIVEHOUSE",
		134: "SUB_GENRE_PROGRESSIVETRANCE",
		135: "SUB_GENRE_PSYCHEDELICTRANCE",
		136: "SUB_GENRE_SCHRANZ",
		137: "SUB_GENRE_SPEEDGARAGE",
		138: "SUB_GENRE_SYNTHWAVE",
		139: "SUB_GENRE_TECHHOUSE",
		140: "SUB_GENRE_TECHNO",
		141: "SUB_GENRE_TRANCE",
		142: "SUB_GENRE_TRIBALHOUSE",
		143: "SUB_GENRE_TRIPHOP",
		144: "SUB_GENRE_UKFUNKY",
		145: "SUB_GENRE_UKGARAGE",
		146: "SUB_GENRE_VOCALHOUSE",
		147: "SUB_GENRE_AMERICANFOLK",
		148: "SUB_GENRE_AMERICANPRIMITIVEGUITAR",
		149: "SUB_GENRE_BARBERSHOPMUSIC",
		150: "SUB_GENRE_BRITISHFOLK",
		151: "SUB_GENRE_CANADIANFIDDLING",
		152: "SUB_GENRE_CANADIANFOLK",
		153: "SUB_GENRE_CELTIC",
		154: "SUB_GENRE_ELECTRICFOLK",
		155: "SUB_GENRE_ENGLISHFOLK",
		156: "SUB_GENRE_FOLKBAROQUE",
		157: "SUB_GENRE_FOLKREVIVAL",
		158: "SUB_GENRE_INDIEFOLK",
		159: "SUB_GENRE_IRISHFOLK",
		160: "SUB_GENRE_NORTHAMERICANFOLK",
		161: "SUB_GENRE_OLDTIME",
		162: "SUB_GENRE_SCOTTISHFOLK",
		163: "SUB_GENRE_SEASHANTIES",
		164: "SUB_GENRE_WELSHFOLK",
		165: "SUB_GENRE_ZYDECO",
		166: "SUB_GENRE_CLASSICGOSPEL",
		167: "SUB_GENRE_SOUTHERNGOSPEL",
		168: "SUB_GENRE_ALTERNATIVERAP",
		169: "SUB_GENRE_CHRISTIANRAP",
		170: "SUB_GENRE_CLASSICHIPHOP",
		171: "SUB_GENRE_CONSCIOUSRAP",
		172: "SUB_GENRE_CRUNK",
		173: "SUB_GENRE_DIRTYRAP",
		174: "SUB_GENRE_EASTCOASTHIPHOP",
		175: "SUB_GENRE_EXPERIMENTALHIPHOP",
		176: "SUB_GENRE_FUNKCARIOCA",
		177: "SUB_GENRE_GFUNK",
		178: "SUB_GENRE_GANGSTARAP",
		179: "SUB_GENRE_GOLDENAGE",
		180: "SUB_GENRE_GRIME",
		181: "SUB_GENRE_HARDCORERAP",
		182: "SUB_GENRE_INSTRUMENTALHIPHOP",
		183: "SUB_GENRE_MIAMIBASS",
		184: "SUB_GENRE_POPRAP",
		185: "SUB_GENRE_SOUTHERNRAP",
		186: "SUB_GENRE_TRAP",
		187: "SUB_GENRE_WESTCOASTHIPHOP",
		188: "SUB_GENRE_ACIDJAZZ",
		189: "SUB_GENRE_AFRICANJAZZ",
		190: "SUB_GENRE_AVANTGARDEJAZZ",
		191: "SUB_GENRE_BEBOP",
		192: "SUB_GENRE_BOSSANOVA",
		193: "SUB_GENRE_BRITISHDANCEBAND",
		194: "SUB_GENRE_CAPEJAZZ",
		195: "SUB_GENRE_COOLJAZZ",
		196: "SUB_GENRE_DIXIELAND",
		197: "SUB_GENRE_ETHIOPIANJAZZ",
		198: "SUB_GENRE_FREEJAZZ",
		199: "SUB_GENRE_GYPSYJAZZ",
		200: "SUB_GENRE_HARDBOP",
		201: "SUB_GENRE_JAZZBLUES",
		202: "SUB_GENRE_JAZZFUNK",
		203: "SUB_GENRE_JAZZFUSION",
		204: "SUB_GENRE_JAZZROCK",
		205: "SUB_GENRE_JAZZPOP",
		206: "SUB_GENRE_LATINJAZZ",
		207: "SUB_GENRE_MODALJAZZ",
		208: "SUB_GENRE_MODERNCREATIVE",
		209: "SUB_GENRE_MODERNJAZZ",
		210: "SUB_GENRE_POSTBOP",
		211: "SUB_GENRE_SMOOTHJAZZ",
		212: "SUB_GENRE_SOULJAZZ",
		213: "SUB_GENRE_SWING",
		214: "SUB_GENRE_SWINGREVIVAL",
		215: "SUB_GENRE_TRADITIONALJAZZ",
		216: "SUB_GENRE_TRADITIONALPOP",
		217: "SUB_GENRE_BACHATA",
		218: "SUB_GENRE_BANDA",
		219: "SUB_GENRE_BOOGALOO",
		220: "SUB_GENRE_BRAZILIAN",
		221: "SUB_GENRE_CONJUNTO",
		222: "SUB_GENRE_CORRIDOS",
		223: "SUB_GENRE_DURANGUENSE",
		224: "SUB_GENRE_GRUPERA",
		225: "SUB_GENRE_HUPANGO",
		226: "SUB_GENRE_MARIACHI",
		227: "SUB_GENRE_NEWMEXICOMUSIC",
		228: "SUB_GENRE_NORTENO",
		229: "SUB_GENRE_RANCHERA",
		230: "SUB_GENRE_REGGAETON",
		231: "SUB_GENRE_REGIONALMEXICAN",
		232: "SUB_GENRE_SALSA",
		233: "SUB_GENRE_SERTANEJO",
		234: "SUB_GENRE_TEJANO",
		235: "SUB_GENRE_AFRICANPOP",
		236: "SUB_GENRE_AFROBEAT",
		237: "SUB_GENRE_ALTERNATIVEDANCE",
		238: "SUB_GENRE_ALTERNATIVEPOP",
		239: "SUB_GENRE_AXE",
		240: "SUB_GENRE_BIKUTSI",
		241: "SUB_GENRE_BOLLYWOOD",
		242: "SUB_GENRE_BRAZILIANPOP",
		243: "SUB_GENRE_BREGA",
		244: "SUB_GENRE_CANTOPOP",
		245: "SUB_GENRE_CARIBBEANPOP",
		246: "SUB_GENRE_CHAMBERPOP",
		247: "SUB_GENRE_CHIMURENGA",
		248: "SUB_GENRE_CHINESEPOP",
		249: "SUB_GENRE_DREAMPOP",
		250: "SUB_GENRE_ELECTROCLASH",
		251: "SUB_GENRE_ELECTRONICPOP",
		252: "SUB_GENRE_ENKA",
		253: "SUB_GENRE_FILIPINOPOP",
		254: "SUB_GENRE_FOLKTRONICA",
		255: "SUB_GENRE_FRENCHPOP",
		256: "SUB_GENRE_GERMANPOP",
		257: "SUB_GENRE_GREEKPOP",
		258: "SUB_GENRE_HIGHLIFE",
		259: "SUB_GENRE_HIPLIFE",
		260: "SUB_GENRE_HOKKIENPOP",
		261: "SUB_GENRE_INDIANPOP",
		262: "SUB_GENRE_INDIEPOP",
		263: "SUB_GENRE_INDIETRONICA",
		264: "SUB_GENRE_INDONESIANPOP",
		265: "SUB_GENRE_JAPANESEPOP",
		266: "SUB_GENRE_KAYOKYOKU",
		267: "SUB_GENRE_KIZOMBA",
		268: "SUB_GENRE_KOREANPOP",
		269: "SUB_GENRE_KUDURO",
		270: "SUB_GENRE_LATINFREESTYLE",
		271: "SUB_GENRE_MADCHESTER",
		272: "SUB_GENRE_MAKOSSA",
		273: "SUB_GENRE_MANDOPOP",
		274: "SUB_GENRE_MBALAX",
		275: "SUB_GENRE_MBAQANGA",
		276: "SUB_GENRE_MODERNLAIKO",
		277: "SUB_GENRE_MODERNPOP",
		278: "SUB_GENRE_MPB",
		279: "SUB_GENRE_MUSICOFTHEPHILIPPINES",
		280: "SUB_GENRE_NDW",
		281: "SUB_GENRE_NEOPSYCHEDELIA",
		282: "SUB_GENRE_NEWROMANTIC",
		283: "SUB_GENRE_NEWWAVE",
		284: "SUB_GENRE_NOISEPOP",
		285: "SUB_GENRE_NOUVELLECHANSON",
		286: "SUB_GENRE_POPROCK",
		287: "SUB_GENRE_PSYCHEDELICPOP",
		288: "SUB_GENRE_SCHLAGER",
		289: "SUB_GENRE_SOCA",
		290: "SUB_GENRE_SOUKOUS",
		291: "SUB_GENRE_SYNTHPOP",
		292: "SUB_GENRE_TELUGU",
		293: "SUB_GENRE_TWEEPOP",
		294: "SUB_GENRE_AFROFUNK",
		295: "SUB_GENRE_ALTERNATIVER_N_B",
		296: "SUB_GENRE_BLUEEYEDSOUL",
		297: "SUB_GENRE_BOOGIE",
		298: "SUB_GENRE_CHICAGOSOUL",
		299: "SUB_GENRE_CLASSICR_N_B",
		300: "SUB_GENRE_CONTEMPORARYR_N_B",
		301: "SUB_GENRE_DEEPSOUL",
		302: "SUB_GENRE_DISCO",
		303: "SUB_GENRE_DOOWOP",
		304: "SUB_GENRE_FUNK",
		305: "SUB_GENRE_GOGO",
		306: "SUB_GENRE_HINRG",
		307: "SUB_GENRE_ITALODISCO",
		308: "SUB_GENRE_MEMPHISSOUL",
		309: "SUB_GENRE_MINNEAPOLISFUNK",
		310: "SUB_GENRE_MODERNR_N_B",
		311: "SUB_GENRE_MOTOWNSOUND",
		312: "SUB_GENRE_NEOSOUL",
		313: "SUB_GENRE_NEWJACKSWING",
		314: "SUB_GENRE_NEWORLEANSR_N_B",
		315: "SUB_GENRE_OGFUNK",
		316: "SUB_GENRE_PFUNK",
		317: "SUB_GENRE_PHILLYSOUND",
		318: "SUB_GENRE_POPFUNK",
		319: "SUB_GENRE_PSYCHEDELICSOUL",
		320: "SUB_GENRE_QUIETSTORM",
		321: "SUB_GENRE_RETROSOUL",
		322: "SUB_GENRE_SOUL",
		323: "SUB_GENRE_SOUTHERNSOUL",
		324: "SUB_GENRE_TRADITIONALR_N_B",
		325: "SUB_GENRE_URBANCONTEMPORARYGOSPEL",
		326: "SUB_GENRE_WESTCOASTSOUL",
		327: "SUB_GENRE_DANCEHALL",
		328: "SUB_GENRE_DUB",
		329: "SUB_GENRE_ROCKSTEADY",
		330: "SUB_GENRE_ROOTSREGGAE",
		331: "SUB_GENRE_SKA",
		332: "SUB_GENRE_AFROROCK",
		333: "SUB_GENRE_ALTMETAL",
		334: "SUB_GENRE_ALTERNATIVEROCK",
		335: "SUB_GENRE_ARTROCK",
		336: "SUB_GENRE_BLACKMETAL",
		337: "SUB_GENRE_BOOGIEROCK",
		338: "SUB_GENRE_BRITROCK",
		339: "SUB_GENRE_BRITISHINVASION",
		340: "SUB_GENRE_BRITPOP",
		341: "SUB_GENRE_CLASSICROCK",
		342: "SUB_GENRE_DARKWAVE",
		343: "SUB_GENRE_DEATHMETAL",
		344: "SUB_GENRE_DOOMMETAL",
		345: "SUB_GENRE_EARLYROCK",
		346: "SUB_GENRE_ELECTROGOTH",
		347: "SUB_GENRE_EMOROCK",
		348: "SUB_GENRE_EXPERIMENTALROCK",
		349: "SUB_GENRE_FUNKMETAL",
		350: "SUB_GENRE_GARAGEROCK",
		351: "SUB_GENRE_GLAMROCK",
		352: "SUB_GENRE_GOTHICMETAL",
		353: "SUB_GENRE_GOTHICROCK",
		354: "SUB_GENRE_GRINDCORE",
		355: "SUB_GENRE_GRUNGE",
		356: "SUB_GENRE_HAIRMETAL",
		357: "SUB_GENRE_HARDROCK",
		358: "SUB_GENRE_HARDCOREPUNK",
		359: "SUB_GENRE_HEARTLANDROCK",
		360: "SUB_GENRE_INDIEROCK",
		361: "SUB_GENRE_INDUSTRIAL",
		362: "SUB_GENRE_INDUSTRIALMETAL",
		363: "SUB_GENRE_JOVEMGUARDA",
		364: "SUB_GENRE_KRAUTROCK",
		365: "SUB_GENRE_MATHROCK",
		366: "SUB_GENRE_MERSEYBEAT",
		367: "SUB_GENRE_METAL",
		368: "SUB_GENRE_METALCORE",
		369: "SUB_GENRE_NOWAVE",
		370: "SUB_GENRE_NOISEROCK",
		371: "SUB_GENRE_NUMETAL",
		372: "SUB_GENRE_OI",
		373: "SUB_GENRE_POPPUNK",
		374: "SUB_GENRE_POSTGRUNGE",
		375: "SUB_GENRE_POSTROCK",
		376: "SUB_GENRE_POSTHARDCORE",
		377: "SUB_GENRE_POSTPUNK",
		378: "SUB_GENRE_POWERPOP",
		379: "SUB_GENRE_PROGRESSIVEMETAL",
		380: "SUB_GENRE_PROGRESSIVEROCK",
		381: "SUB_GENRE_PROTOPUNK",
		382: "SUB_GENRE_PSYCHEDELICROCK",
		383: "SUB_GENRE_PSYCHOBILLY",
		384: "SUB_GENRE_PUNK",
		385: "SUB_GENRE_RIOTGRRRL",
		386: "SUB_GENRE_ROCKNROLL",
		387: "SUB_GENRE_ROCKABILLY",
		388: "SUB_GENRE_SAMBAROCK",
		389: "SUB_GENRE_SCREAMO",
		390: "SUB_GENRE_SHOEGAZE",
		391: "SUB_GENRE_SOFTROCK",
		392: "SUB_GENRE_SOUTHAMERICANROCK",
		393: "SUB_GENRE_SOUTHERNROCK",
		394: "SUB_GENRE_SPACEROCK",
		395: "SUB_GENRE_SPEEDMETAL",
		396: "SUB_GENRE_STONERROCK",
		397: "SUB_GENRE_SURF",
		398: "SUB_GENRE_SWAMPROCK",
		399: "SUB_GENRE_THIRDWAVESKA",
		400: "SUB_GENRE_THRASHMETAL",
		401: "SUB_GENRE_TROPICALIA",
		402: "SUB_GENRE_TWOTONE",
		403: "SUB_GENRE_UNDERGROUND",
		404: "SUB_GENRE_COMMENTARY",
		405: "SUB_GENRE_CONVERSATION",
		406: "SUB_GENRE_INTERVIEW",
		407: "SUB_GENRE_MONOLOGUE",
		408: "SUB_GENRE_POETRY",
		409: "SUB_GENRE_SKIT",
		410: "SUB_GENRE_STANDUPCOMEDY",
		411: "SUB_GENRE_AFOXE",
		412: "SUB_GENRE_AFRICANMUSIC",
		413: "SUB_GENRE_ARGENTINIANMUSIC",
		414: "SUB_GENRE_BALINESEMUSIC",
		415: "SUB_GENRE_BRAZILIANMUSIC",
		416: "SUB_GENRE_CALYPSO",
		417: "SUB_GENRE_CAPOEIRAMUSIC",
		418: "SUB_GENRE_CARIBBEANMUSIC",
		419: "SUB_GENRE_CARNATICMUSIC",
		420: "SUB_GENRE_CHACHACHA",
		421: "SUB_GENRE_CHILEANMUSIC",
		422: "SUB_GENRE_CHORO",
		423: "SUB_GENRE_COLOMBIANMUSIC",
		424: "SUB_GENRE_CONTRADANZA",
		425: "SUB_GENRE_CUBANMUSIC",
		426: "SUB_GENRE_CUECA",
		427: "SUB_GENRE_CUMBIA",
		428: "SUB_GENRE_CZECHMUSIC",
		429: "SUB_GENRE_DANZON",
		430: "SUB_GENRE_DIMOTIKO",
		431: "SUB_GENRE_DOMINICANMUSIC",
		432: "SUB_GENRE_FADO",
		433: "SUB_GENRE_FLAMENCO",
		434: "SUB_GENRE_FRENCHMUSIC",
		435: "SUB_GENRE_GAUCHOMUSIC",
		436: "SUB_GENRE_GERMANMUSIC",
		437: "SUB_GENRE_GREEKMUSIC",
		438: "SUB_GENRE_GUARACHA",
		439: "SUB_GENRE_HINDUSTANICLASSICALMUSIC",
		440: "SUB_GENRE_INDIANMUSIC",
		441: "SUB_GENRE_INDONESIANMUSIC",
		442: "SUB_GENRE_IRISHMUSIC",
		443: "SUB_GENRE_ITALIANMUSIC",
		444: "SUB_GENRE_JAMAICANMUSIC",
		445: "SUB_GENRE_JAVANESEMUSIC",
		446: "SUB_GENRE_JEWISHMUSIC",
		447: "SUB_GENRE_JUGENSEMBLE",
		448: "SUB_GENRE_KLEZMER",
		449: "SUB_GENRE_MAMBO",
		450: "SUB_GENRE_MARACATU",
		451: "SUB_GENRE_MERENGUE",
		452: "SUB_GENRE_MEXICANMUSIC",
		453: "SUB_GENRE_MIDDLEEASTERNMUSIC",
		454: "SUB_GENRE_NEAPOLITANSONG",
		455: "SUB_GENRE_NORTHAMERICANMUSIC",
		456: "SUB_GENRE_PAKISTANIMUSIC",
		457: "SUB_GENRE_PALO",
		458: "SUB_GENRE_PILON",
		459: "SUB_GENRE_POLKA",
		460: "SUB_GENRE_PORTUGUESEMUSIC",
		461: "SUB_GENRE_PUERTORICANMUSIC",
		462: "SUB_GENRE_PUNJABIMUSIC",
		463: "SUB_GENRE_RAGTIME",
		464: "SUB_GENRE_REPENTE",
		465: "SUB_GENRE_ROMANIANMUSIC",
		466: "SUB_GENRE_SALVES",
		467: "SUB_GENRE_SAMBA",
		468: "SUB_GENRE_SON",
		469: "SUB_GENRE_SOUTHAMERICANMUSIC",
		470: "SUB_GENRE_SPANISHMUSIC",
		471: "SUB_GENRE_SPIRITUAL",
		472: "SUB_GENRE_TANGO",
		473: "SUB_GENRE_TIBETANMUSIC",
		474: "SUB_GENRE_TONADA",
		475: "SUB_GENRE_TURKISHMUSIC",
		476: "SUB_GENRE_TURKISHCLASSICALMUSIC",
		477: "SUB_GENRE_WORKSONGS",
		478: "SUB_GENRE_EXOTICA",
		479: "SUB_GENRE_NEWAGE",
		480: "SUB_GENRE_NEWFLAMENCO",
		481: "SUB_GENRE_WORLDFUSIONJAZZ",
		482: "SUB_GENRE_WORLDBEAT",
		483: "SUB_GENRE_USERDEFINED",
	}
	SubGenre_value = map[string]int32{
		"SUB_GENRE_UNSPECIFIED":              0,
		"SUB_GENRE_ACOUSTICCHICAGOBLUES":     1,
		"SUB_GENRE_BOOGIEWOOGIE":             2,
		"SUB_GENRE_BRITISHBLUES":             3,
		"SUB_GENRE_CHICAGOBLUES":             4,
		"SUB_GENRE_CLASSICFEMALEBLUES":       5,
		"SUB_GENRE_COUNTRYBLUES":             6,
		"SUB_GENRE_DELTABLUES":               7,
		"SUB_GENRE_ELECTRICTEXASBLUES":       8,
		"SUB_GENRE_HILLCOUNTRYBLUES":         9,
		"SUB_GENRE_JUMPBLUES":                10,
		"SUB_GENRE_MODERNBLUES":              11,
		"SUB_GENRE_NEWORLEANSBLUES":          12,
		"SUB_GENRE_PIANOBLUES":               13,
		"SUB_GENRE_PIEDMONTBLUES":            14,
		"SUB_GENRE_ROOTS":                    15,
		"SUB_GENRE_SWAMPBLUES":               16,
		"SUB_GENRE_TEXASBLUES":               17,
		"SUB_GENRE_TRADITIONALACOUSTIC":      18,
		"SUB_GENRE_TRADITIONALELECTRIC":      19,
		"SUB_GENRE_WESTCOASTBLUES":           20,
		"SUB_GENRE_E_20THCENTURY":            21,
		"SUB_GENRE_E_21STCENTURY":            22,
		"SUB_GENRE_ACOUSMATIC":               23,
		"SUB_GENRE_AMBROSIANCHANT":           24,
		"SUB_GENRE_ARSANTIQUA":               25,
		"SUB_GENRE_ARSNOVA":                  26,
		"SUB_GENRE_BAROQUE":                  27,
		"SUB_GENRE_BYZANTINECHANT":           28,
		"SUB_GENRE_CLASSICAL":                29,
		"SUB_GENRE_CLASSICALCROSSOVER":       30,
		"SUB_GENRE_CONTEMPORARY":             31,
		"SUB_GENRE_EARLY20THCENTURY":         32,
		"SUB_GENRE_EARLYBAROQUE":             33,
		"SUB_GENRE_EARLYELECTRONIC":          34,
		"SUB_GENRE_EARLYRENAISSANCE":         35,
		"SUB_GENRE_EARLYROMANTIC":            36,
		"SUB_GENRE_EXPERIMENTALCLASSICAL":    37,
		"SUB_GENRE_EXPRESSIONISM":            38,
		"SUB_GENRE_FIRSTVIENNESESCHOOL":      39,
		"SUB_GENRE_FUTURISM":                 40,
		"SUB_GENRE_GREGORIANCHANT":           41,
		"SUB_GENRE_IMPRESSIONISM":            42,
		"SUB_GENRE_LATE20THCENTURY":          43,
		"SUB_GENRE_LATEBAROQUE":              44,
		"SUB_GENRE_LATERENAISSANCE":          45,
		"SUB_GENRE_LATEROMANTIC":             46,
		"SUB_GENRE_LIGHTMUSIC":               47,
		"SUB_GENRE_MEDIEVAL":                 48,
		"SUB_GENRE_MIDDLE20THCENTURY":        49,
		"SUB_GENRE_MIDDLEBAROQUE":            50,
		"SUB_GENRE_MIDDLERENAISSANCE":        51,
		"SUB_GENRE_MIDDLEROMANTIC":           52,
		"SUB_GENRE_MINIMALISM":               53,
		"SUB_GENRE_MODERNISM":                54,
		"SUB_GENRE_MUSIQUECONCRETE":          55,
		"SUB_GENRE_NATIONALIST":              56,
		"SUB_GENRE_NEOCLASSICAL":             57,
		"SUB_GENRE_NEOROMANTIC":              58,
		"SUB_GENRE_ORCHESTRALFUSION":         59,
		"SUB_GENRE_ORGANUM":                  60,
		"SUB_GENRE_PLAINSONG":                61,
		"SUB_GENRE_POSTCLASSICAL":            62,
		"SUB_GENRE_POSTMINIMALISM":           63,
		"SUB_GENRE_PRECLASSICAL":             64,
		"SUB_GENRE_RENAISSANCE":              65,
		"SUB_GENRE_ROMANTIC":                 66,
		"SUB_GENRE_SERIALISM":                67,
		"SUB_GENRE_SPECTRALISM":              68,
		"SUB_GENRE_ALTERNATIVECOUNTRY":       69,
		"SUB_GENRE_AMERICANA":                70,
		"SUB_GENRE_BAKERSFIELDSOUND":         71,
		"SUB_GENRE_BLUEGRASS":                72,
		"SUB_GENRE_COUNTRYPOP":               73,
		"SUB_GENRE_COUNTRYRAP":               74,
		"SUB_GENRE_COUNTRYROCK":              75,
		"SUB_GENRE_HONKYTONK":                76,
		"SUB_GENRE_MODERNCOUNTRY":            77,
		"SUB_GENRE_NASHVILLESOUND":           78,
		"SUB_GENRE_NEOTRADITIONALCOUNTRY":    79,
		"SUB_GENRE_OUTLAWCOUNTRY":            80,
		"SUB_GENRE_TEXASCOUNTRY":             81,
		"SUB_GENRE_TRADITIONALCOUNTRY":       82,
		"SUB_GENRE_WESTERNSWING":             83,
		"SUB_GENRE_E_2STEPGARAGE":            84,
		"SUB_GENRE_ACIDHOUSE":                85,
		"SUB_GENRE_ACIDTECHNO":               86,
		"SUB_GENRE_AMBIENT":                  87,
		"SUB_GENRE_AMBIENTHOUSE":             88,
		"SUB_GENRE_BASSLINE":                 89,
		"SUB_GENRE_BIGBEAT":                  90,
		"SUB_GENRE_BREAKBEAT":                91,
		"SUB_GENRE_BROKENBEAT":               92,
		"SUB_GENRE_CHICAGOHOUSE":             93,
		"SUB_GENRE_DEEPHOUSE":                94,
		"SUB_GENRE_DETROITHOUSE":             95,
		"SUB_GENRE_DETROITTECHNO":            96,
		"SUB_GENRE_DIGITALHARDCORE":          97,
		"SUB_GENRE_DOWNTEMPO":                98,
		"SUB_GENRE_DRILLNBASS":               99,
		"SUB_GENRE_DRUMNBASS":                100,
		"SUB_GENRE_DRUMSTEP":                 101,
		"SUB_GENRE_DUBSTEPUK":                102,
		"SUB_GENRE_DUBSTEPUS":                103,
		"SUB_GENRE_DUBTRONICA":               104,
		"SUB_GENRE_DUTCHHOUSE":               105,
		"SUB_GENRE_EBM":                      106,
		"SUB_GENRE_ELECTRO":                  107,
		"SUB_GENRE_ELECTROHOUSE":             108,
		"SUB_GENRE_ELECTRONICA_ECLECTIC":     109,
		"SUB_GENRE_EURODANCE":                110,
		"SUB_GENRE_EXPERIMENTALELECTRONIC":   111,
		"SUB_GENRE_FRENCHHOUSE":              112,
		"SUB_GENRE_FUTUREGARAGE":             113,
		"SUB_GENRE_GABBA":                    114,
		"SUB_GENRE_GARAGEHOUSE":              115,
		"SUB_GENRE_GLITCH":                   116,
		"SUB_GENRE_HAPPYHARDCORE":            117,
		"SUB_GENRE_HARDTRANCE":               118,
		"SUB_GENRE_HARDCORE":                 119,
		"SUB_GENRE_HARDCOREBREAKBEAT":        120,
		"SUB_GENRE_HARDSTYLE":                121,
		"SUB_GENRE_HIPHOUSE":                 122,
		"SUB_GENRE_HOUSE":                    123,
		"SUB_GENRE_IDM":                      124,
		"SUB_GENRE_JAZZHOUSE":                125,
		"SUB_GENRE_JUNGLE":                   126,
		"SUB_GENRE_KWAITO":                   127,
		"SUB_GENRE_LATINHOUSE":               128,
		"SUB_GENRE_MINIMALHOUSE":             129,
		"SUB_GENRE_MINIMALTECHNO":            130,
		"SUB_GENRE_NOISEMUSIC":               131,
		"SUB_GENRE_NUDISCO":                  132,
		"SUB_GENRE_PROGRESSIVEHOUSE":         133,
		"SUB_GENRE_PROGRESSIVETRANCE":        134,
		"SUB_GENRE_PSYCHEDELICTRANCE":        135,
		"SUB_GENRE_SCHRANZ":                  136,
		"SUB_GENRE_SPEEDGARAGE":              137,
		"SUB_GENRE_SYNTHWAVE":                138,
		"SUB_GENRE_TECHHOUSE":                139,
		"SUB_GENRE_TECHNO":                   140,
		"SUB_GENRE_TRANCE":                   141,
		"SUB_GENRE_TRIBALHOUSE":              142,
		"SUB_GENRE_TRIPHOP":                  143,
		"SUB_GENRE_UKFUNKY":                  144,
		"SUB_GENRE_UKGARAGE":                 145,
		"SUB_GENRE_VOCALHOUSE":               146,
		"SUB_GENRE_AMERICANFOLK":             147,
		"SUB_GENRE_AMERICANPRIMITIVEGUITAR":  148,
		"SUB_GENRE_BARBERSHOPMUSIC":          149,
		"SUB_GENRE_BRITISHFOLK":              150,
		"SUB_GENRE_CANADIANFIDDLING":         151,
		"SUB_GENRE_CANADIANFOLK":             152,
		"SUB_GENRE_CELTIC":                   153,
		"SUB_GENRE_ELECTRICFOLK":             154,
		"SUB_GENRE_ENGLISHFOLK":              155,
		"SUB_GENRE_FOLKBAROQUE":              156,
		"SUB_GENRE_FOLKREVIVAL":              157,
		"SUB_GENRE_INDIEFOLK":                158,
		"SUB_GENRE_IRISHFOLK":                159,
		"SUB_GENRE_NORTHAMERICANFOLK":        160,
		"SUB_GENRE_OLDTIME":                  161,
		"SUB_GENRE_SCOTTISHFOLK":             162,
		"SUB_GENRE_SEASHANTIES":              163,
		"SUB_GENRE_WELSHFOLK":                164,
		"SUB_GENRE_ZYDECO":                   165,
		"SUB_GENRE_CLASSICGOSPEL":            166,
		"SUB_GENRE_SOUTHERNGOSPEL":           167,
		"SUB_GENRE_ALTERNATIVERAP":           168,
		"SUB_GENRE_CHRISTIANRAP":             169,
		"SUB_GENRE_CLASSICHIPHOP":            170,
		"SUB_GENRE_CONSCIOUSRAP":             171,
		"SUB_GENRE_CRUNK":                    172,
		"SUB_GENRE_DIRTYRAP":                 173,
		"SUB_GENRE_EASTCOASTHIPHOP":          174,
		"SUB_GENRE_EXPERIMENTALHIPHOP":       175,
		"SUB_GENRE_FUNKCARIOCA":              176,
		"SUB_GENRE_GFUNK":                    177,
		"SUB_GENRE_GANGSTARAP":               178,
		"SUB_GENRE_GOLDENAGE":                179,
		"SUB_GENRE_GRIME":                    180,
		"SUB_GENRE_HARDCORERAP":              181,
		"SUB_GENRE_INSTRUMENTALHIPHOP":       182,
		"SUB_GENRE_MIAMIBASS":                183,
		"SUB_GENRE_POPRAP":                   184,
		"SUB_GENRE_SOUTHERNRAP":              185,
		"SUB_GENRE_TRAP":                     186,
		"SUB_GENRE_WESTCOASTHIPHOP":          187,
		"SUB_GENRE_ACIDJAZZ":                 188,
		"SUB_GENRE_AFRICANJAZZ":              189,
		"SUB_GENRE_AVANTGARDEJAZZ":           190,
		"SUB_GENRE_BEBOP":                    191,
		"SUB_GENRE_BOSSANOVA":                192,
		"SUB_GENRE_BRITISHDANCEBAND":         193,
		"SUB_GENRE_CAPEJAZZ":                 194,
		"SUB_GENRE_COOLJAZZ":                 195,
		"SUB_GENRE_DIXIELAND":                196,
		"SUB_GENRE_ETHIOPIANJAZZ":            197,
		"SUB_GENRE_FREEJAZZ":                 198,
		"SUB_GENRE_GYPSYJAZZ":                199,
		"SUB_GENRE_HARDBOP":                  200,
		"SUB_GENRE_JAZZBLUES":                201,
		"SUB_GENRE_JAZZFUNK":                 202,
		"SUB_GENRE_JAZZFUSION":               203,
		"SUB_GENRE_JAZZROCK":                 204,
		"SUB_GENRE_JAZZPOP":                  205,
		"SUB_GENRE_LATINJAZZ":                206,
		"SUB_GENRE_MODALJAZZ":                207,
		"SUB_GENRE_MODERNCREATIVE":           208,
		"SUB_GENRE_MODERNJAZZ":               209,
		"SUB_GENRE_POSTBOP":                  210,
		"SUB_GENRE_SMOOTHJAZZ":               211,
		"SUB_GENRE_SOULJAZZ":                 212,
		"SUB_GENRE_SWING":                    213,
		"SUB_GENRE_SWINGREVIVAL":             214,
		"SUB_GENRE_TRADITIONALJAZZ":          215,
		"SUB_GENRE_TRADITIONALPOP":           216,
		"SUB_GENRE_BACHATA":                  217,
		"SUB_GENRE_BANDA":                    218,
		"SUB_GENRE_BOOGALOO":                 219,
		"SUB_GENRE_BRAZILIAN":                220,
		"SUB_GENRE_CONJUNTO":                 221,
		"SUB_GENRE_CORRIDOS":                 222,
		"SUB_GENRE_DURANGUENSE":              223,
		"SUB_GENRE_GRUPERA":                  224,
		"SUB_GENRE_HUPANGO":                  225,
		"SUB_GENRE_MARIACHI":                 226,
		"SUB_GENRE_NEWMEXICOMUSIC":           227,
		"SUB_GENRE_NORTENO":                  228,
		"SUB_GENRE_RANCHERA":                 229,
		"SUB_GENRE_REGGAETON":                230,
		"SUB_GENRE_REGIONALMEXICAN":          231,
		"SUB_GENRE_SALSA":                    232,
		"SUB_GENRE_SERTANEJO":                233,
		"SUB_GENRE_TEJANO":                   234,
		"SUB_GENRE_AFRICANPOP":               235,
		"SUB_GENRE_AFROBEAT":                 236,
		"SUB_GENRE_ALTERNATIVEDANCE":         237,
		"SUB_GENRE_ALTERNATIVEPOP":           238,
		"SUB_GENRE_AXE":                      239,
		"SUB_GENRE_BIKUTSI":                  240,
		"SUB_GENRE_BOLLYWOOD":                241,
		"SUB_GENRE_BRAZILIANPOP":             242,
		"SUB_GENRE_BREGA":                    243,
		"SUB_GENRE_CANTOPOP":                 244,
		"SUB_GENRE_CARIBBEANPOP":             245,
		"SUB_GENRE_CHAMBERPOP":               246,
		"SUB_GENRE_CHIMURENGA":               247,
		"SUB_GENRE_CHINESEPOP":               248,
		"SUB_GENRE_DREAMPOP":                 249,
		"SUB_GENRE_ELECTROCLASH":             250,
		"SUB_GENRE_ELECTRONICPOP":            251,
		"SUB_GENRE_ENKA":                     252,
		"SUB_GENRE_FILIPINOPOP":              253,
		"SUB_GENRE_FOLKTRONICA":              254,
		"SUB_GENRE_FRENCHPOP":                255,
		"SUB_GENRE_GERMANPOP":                256,
		"SUB_GENRE_GREEKPOP":                 257,
		"SUB_GENRE_HIGHLIFE":                 258,
		"SUB_GENRE_HIPLIFE":                  259,
		"SUB_GENRE_HOKKIENPOP":               260,
		"SUB_GENRE_INDIANPOP":                261,
		"SUB_GENRE_INDIEPOP":                 262,
		"SUB_GENRE_INDIETRONICA":             263,
		"SUB_GENRE_INDONESIANPOP":            264,
		"SUB_GENRE_JAPANESEPOP":              265,
		"SUB_GENRE_KAYOKYOKU":                266,
		"SUB_GENRE_KIZOMBA":                  267,
		"SUB_GENRE_KOREANPOP":                268,
		"SUB_GENRE_KUDURO":                   269,
		"SUB_GENRE_LATINFREESTYLE":           270,
		"SUB_GENRE_MADCHESTER":               271,
		"SUB_GENRE_MAKOSSA":                  272,
		"SUB_GENRE_MANDOPOP":                 273,
		"SUB_GENRE_MBALAX":                   274,
		"SUB_GENRE_MBAQANGA":                 275,
		"SUB_GENRE_MODERNLAIKO":              276,
		"SUB_GENRE_MODERNPOP":                277,
		"SUB_GENRE_MPB":                      278,
		"SUB_GENRE_MUSICOFTHEPHILIPPINES":    279,
		"SUB_GENRE_NDW":                      280,
		"SUB_GENRE_NEOPSYCHEDELIA":           281,
		"SUB_GENRE_NEWROMANTIC":              282,
		"SUB_GENRE_NEWWAVE":                  283,
		"SUB_GENRE_NOISEPOP":                 284,
		"SUB_GENRE_NOUVELLECHANSON":          285,
		"SUB_GENRE_POPROCK":                  286,
		"SUB_GENRE_PSYCHEDELICPOP":           287,
		"SUB_GENRE_SCHLAGER":                 288,
		"SUB_GENRE_SOCA":                     289,
		"SUB_GENRE_SOUKOUS":                  290,
		"SUB_GENRE_SYNTHPOP":                 291,
		"SUB_GENRE_TELUGU":                   292,
		"SUB_GENRE_TWEEPOP":                  293,
		"SUB_GENRE_AFROFUNK":                 294,
		"SUB_GENRE_ALTERNATIVER_N_B":         295,
		"SUB_GENRE_BLUEEYEDSOUL":             296,
		"SUB_GENRE_BOOGIE":                   297,
		"SUB_GENRE_CHICAGOSOUL":              298,
		"SUB_GENRE_CLASSICR_N_B":             299,
		"SUB_GENRE_CONTEMPORARYR_N_B":        300,
		"SUB_GENRE_DEEPSOUL":                 301,
		"SUB_GENRE_DISCO":                    302,
		"SUB_GENRE_DOOWOP":                   303,
		"SUB_GENRE_FUNK":                     304,
		"SUB_GENRE_GOGO":                     305,
		"SUB_GENRE_HINRG":                    306,
		"SUB_GENRE_ITALODISCO":               307,
		"SUB_GENRE_MEMPHISSOUL":              308,
		"SUB_GENRE_MINNEAPOLISFUNK":          309,
		"SUB_GENRE_MODERNR_N_B":              310,
		"SUB_GENRE_MOTOWNSOUND":              311,
		"SUB_GENRE_NEOSOUL":                  312,
		"SUB_GENRE_NEWJACKSWING":             313,
		"SUB_GENRE_NEWORLEANSR_N_B":          314,
		"SUB_GENRE_OGFUNK":                   315,
		"SUB_GENRE_PFUNK":                    316,
		"SUB_GENRE_PHILLYSOUND":              317,
		"SUB_GENRE_POPFUNK":                  318,
		"SUB_GENRE_PSYCHEDELICSOUL":          319,
		"SUB_GENRE_QUIETSTORM":               320,
		"SUB_GENRE_RETROSOUL":                321,
		"SUB_GENRE_SOUL":                     322,
		"SUB_GENRE_SOUTHERNSOUL":             323,
		"SUB_GENRE_TRADITIONALR_N_B":         324,
		"SUB_GENRE_URBANCONTEMPORARYGOSPEL":  325,
		"SUB_GENRE_WESTCOASTSOUL":            326,
		"SUB_GENRE_DANCEHALL":                327,
		"SUB_GENRE_DUB":                      328,
		"SUB_GENRE_ROCKSTEADY":               329,
		"SUB_GENRE_ROOTSREGGAE":              330,
		"SUB_GENRE_SKA":                      331,
		"SUB_GENRE_AFROROCK":                 332,
		"SUB_GENRE_ALTMETAL":                 333,
		"SUB_GENRE_ALTERNATIVEROCK":          334,
		"SUB_GENRE_ARTROCK":                  335,
		"SUB_GENRE_BLACKMETAL":               336,
		"SUB_GENRE_BOOGIEROCK":               337,
		"SUB_GENRE_BRITROCK":                 338,
		"SUB_GENRE_BRITISHINVASION":          339,
		"SUB_GENRE_BRITPOP":                  340,
		"SUB_GENRE_CLASSICROCK":              341,
		"SUB_GENRE_DARKWAVE":                 342,
		"SUB_GENRE_DEATHMETAL":               343,
		"SUB_GENRE_DOOMMETAL":                344,
		"SUB_GENRE_EARLYROCK":                345,
		"SUB_GENRE_ELECTROGOTH":              346,
		"SUB_GENRE_EMOROCK":                  347,
		"SUB_GENRE_EXPERIMENTALROCK":         348,
		"SUB_GENRE_FUNKMETAL":                349,
		"SUB_GENRE_GARAGEROCK":               350,
		"SUB_GENRE_GLAMROCK":                 351,
		"SUB_GENRE_GOTHICMETAL":              352,
		"SUB_GENRE_GOTHICROCK":               353,
		"SUB_GENRE_GRINDCORE":                354,
		"SUB_GENRE_GRUNGE":                   355,
		"SUB_GENRE_HAIRMETAL":                356,
		"SUB_GENRE_HARDROCK":                 357,
		"SUB_GENRE_HARDCOREPUNK":             358,
		"SUB_GENRE_HEARTLANDROCK":            359,
		"SUB_GENRE_INDIEROCK":                360,
		"SUB_GENRE_INDUSTRIAL":               361,
		"SUB_GENRE_INDUSTRIALMETAL":          362,
		"SUB_GENRE_JOVEMGUARDA":              363,
		"SUB_GENRE_KRAUTROCK":                364,
		"SUB_GENRE_MATHROCK":                 365,
		"SUB_GENRE_MERSEYBEAT":               366,
		"SUB_GENRE_METAL":                    367,
		"SUB_GENRE_METALCORE":                368,
		"SUB_GENRE_NOWAVE":                   369,
		"SUB_GENRE_NOISEROCK":                370,
		"SUB_GENRE_NUMETAL":                  371,
		"SUB_GENRE_OI":                       372,
		"SUB_GENRE_POPPUNK":                  373,
		"SUB_GENRE_POSTGRUNGE":               374,
		"SUB_GENRE_POSTROCK":                 375,
		"SUB_GENRE_POSTHARDCORE":             376,
		"SUB_GENRE_POSTPUNK":                 377,
		"SUB_GENRE_POWERPOP":                 378,
		"SUB_GENRE_PROGRESSIVEMETAL":         379,
		"SUB_GENRE_PROGRESSIVEROCK":          380,
		"SUB_GENRE_PROTOPUNK":                381,
		"SUB_GENRE_PSYCHEDELICROCK":          382,
		"SUB_GENRE_PSYCHOBILLY":              383,
		"SUB_GENRE_PUNK":                     384,
		"SUB_GENRE_RIOTGRRRL":                385,
		"SUB_GENRE_ROCKNROLL":                386,
		"SUB_GENRE_ROCKABILLY":               387,
		"SUB_GENRE_SAMBAROCK":                388,
		"SUB_GENRE_SCREAMO":                  389,
		"SUB_GENRE_SHOEGAZE":                 390,
		"SUB_GENRE_SOFTROCK":                 391,
		"SUB_GENRE_SOUTHAMERICANROCK":        392,
		"SUB_GENRE_SOUTHERNROCK":             393,
		"SUB_GENRE_SPACEROCK":                394,
		"SUB_GENRE_SPEEDMETAL":               395,
		"SUB_GENRE_STONERROCK":               396,
		"SUB_GENRE_SURF":                     397,
		"SUB_GENRE_SWAMPROCK":                398,
		"SUB_GENRE_THIRDWAVESKA":             399,
		"SUB_GENRE_THRASHMETAL":              400,
		"SUB_GENRE_TROPICALIA":               401,
		"SUB_GENRE_TWOTONE":                  402,
		"SUB_GENRE_UNDERGROUND":              403,
		"SUB_GENRE_COMMENTARY":               404,
		"SUB_GENRE_CONVERSATION":             405,
		"SUB_GENRE_INTERVIEW":                406,
		"SUB_GENRE_MONOLOGUE":                407,
		"SUB_GENRE_POETRY":                   408,
		"SUB_GENRE_SKIT":                     409,
		"SUB_GENRE_STANDUPCOMEDY":            410,
		"SUB_GENRE_AFOXE":                    411,
		"SUB_GENRE_AFRICANMUSIC":             412,
		"SUB_GENRE_ARGENTINIANMUSIC":         413,
		"SUB_GENRE_BALINESEMUSIC":            414,
		"SUB_GENRE_BRAZILIANMUSIC":           415,
		"SUB_GENRE_CALYPSO":                  416,
		"SUB_GENRE_CAPOEIRAMUSIC":            417,
		"SUB_GENRE_CARIBBEANMUSIC":           418,
		"SUB_GENRE_CARNATICMUSIC":            419,
		"SUB_GENRE_CHACHACHA":                420,
		"SUB_GENRE_CHILEANMUSIC":             421,
		"SUB_GENRE_CHORO":                    422,
		"SUB_GENRE_COLOMBIANMUSIC":           423,
		"SUB_GENRE_CONTRADANZA":              424,
		"SUB_GENRE_CUBANMUSIC":               425,
		"SUB_GENRE_CUECA":                    426,
		"SUB_GENRE_CUMBIA":                   427,
		"SUB_GENRE_CZECHMUSIC":               428,
		"SUB_GENRE_DANZON":                   429,
		"SUB_GENRE_DIMOTIKO":                 430,
		"SUB_GENRE_DOMINICANMUSIC":           431,
		"SUB_GENRE_FADO":                     432,
		"SUB_GENRE_FLAMENCO":                 433,
		"SUB_GENRE_FRENCHMUSIC":              434,
		"SUB_GENRE_GAUCHOMUSIC":              435,
		"SUB_GENRE_GERMANMUSIC":              436,
		"SUB_GENRE_GREEKMUSIC":               437,
		"SUB_GENRE_GUARACHA":                 438,
		"SUB_GENRE_HINDUSTANICLASSICALMUSIC": 439,
		"SUB_GENRE_INDIANMUSIC":              440,
		"SUB_GENRE_INDONESIANMUSIC":          441,
		"SUB_GENRE_IRISHMUSIC":               442,
		"SUB_GENRE_ITALIANMUSIC":             443,
		"SUB_GENRE_JAMAICANMUSIC":            444,
		"SUB_GENRE_JAVANESEMUSIC":            445,
		"SUB_GENRE_JEWISHMUSIC":              446,
		"SUB_GENRE_JUGENSEMBLE":              447,
		"SUB_GENRE_KLEZMER":                  448,
		"SUB_GENRE_MAMBO":                    449,
		"SUB_GENRE_MARACATU":                 450,
		"SUB_GENRE_MERENGUE":                 451,
		"SUB_GENRE_MEXICANMUSIC":             452,
		"SUB_GENRE_MIDDLEEASTERNMUSIC":       453,
		"SUB_GENRE_NEAPOLITANSONG":           454,
		"SUB_GENRE_NORTHAMERICANMUSIC":       455,
		"SUB_GENRE_PAKISTANIMUSIC":           456,
		"SUB_GENRE_PALO":                     457,
		"SUB_GENRE_PILON":                    458,
		"SUB_GENRE_POLKA":                    459,
		"SUB_GENRE_PORTUGUESEMUSIC":          460,
		"SUB_GENRE_PUERTORICANMUSIC":         461,
		"SUB_GENRE_PUNJABIMUSIC":             462,
		"SUB_GENRE_RAGTIME":                  463,
		"SUB_GENRE_REPENTE":                  464,
		"SUB_GENRE_ROMANIANMUSIC":            465,
		"SUB_GENRE_SALVES":                   466,
		"SUB_GENRE_SAMBA":                    467,
		"SUB_GENRE_SON":                      468,
		"SUB_GENRE_SOUTHAMERICANMUSIC":       469,
		"SUB_GENRE_SPANISHMUSIC":             470,
		"SUB_GENRE_SPIRITUAL":                471,
		"SUB_GENRE_TANGO":                    472,
		"SUB_GENRE_TIBETANMUSIC":             473,
		"SUB_GENRE_TONADA":                   474,
		"SUB_GENRE_TURKISHMUSIC":             475,
		"SUB_GENRE_TURKISHCLASSICALMUSIC":    476,
		"SUB_GENRE_WORKSONGS":                477,
		"SUB_GENRE_EXOTICA":                  478,
		"SUB_GENRE_NEWAGE":                   479,
		"SUB_GENRE_NEWFLAMENCO":              480,
		"SUB_GENRE_WORLDFUSIONJAZZ":          481,
		"SUB_GENRE_WORLDBEAT":                482,
		"SUB_GENRE_USERDEFINED":              483,
	}
)

func (x SubGenre) Enum() *SubGenre {
	p := new(SubGenre)
	*p = x
	return p
}

func (x SubGenre) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubGenre) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[213].Descriptor()
}

func (SubGenre) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[213]
}

func (x SubGenre) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubGenre.Descriptor instead.
func (SubGenre) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{213}
}

type SubTitleType int32

const (
	SubTitleType_SUB_TITLE_TYPE_UNSPECIFIED SubTitleType = 0
	SubTitleType_SUB_TITLE_TYPE_LOCATION    SubTitleType = 1
	SubTitleType_SUB_TITLE_TYPE_VERSION     SubTitleType = 2
)

// Enum value maps for SubTitleType.
var (
	SubTitleType_name = map[int32]string{
		0: "SUB_TITLE_TYPE_UNSPECIFIED",
		1: "SUB_TITLE_TYPE_LOCATION",
		2: "SUB_TITLE_TYPE_VERSION",
	}
	SubTitleType_value = map[string]int32{
		"SUB_TITLE_TYPE_UNSPECIFIED": 0,
		"SUB_TITLE_TYPE_LOCATION":    1,
		"SUB_TITLE_TYPE_VERSION":     2,
	}
)

func (x SubTitleType) Enum() *SubTitleType {
	p := new(SubTitleType)
	*p = x
	return p
}

func (x SubTitleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubTitleType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[214].Descriptor()
}

func (SubTitleType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[214]
}

func (x SubTitleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubTitleType.Descriptor instead.
func (SubTitleType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{214}
}

type SummaryType int32

const (
	SummaryType_SUMMARY_TYPE_UNSPECIFIED      SummaryType = 0
	SummaryType_SUMMARY_TYPE_CONTRIBUTOR      SummaryType = 1
	SummaryType_SUMMARY_TYPE_RIGHTSCONTROLLER SummaryType = 2
)

// Enum value maps for SummaryType.
var (
	SummaryType_name = map[int32]string{
		0: "SUMMARY_TYPE_UNSPECIFIED",
		1: "SUMMARY_TYPE_CONTRIBUTOR",
		2: "SUMMARY_TYPE_RIGHTSCONTROLLER",
	}
	SummaryType_value = map[string]int32{
		"SUMMARY_TYPE_UNSPECIFIED":      0,
		"SUMMARY_TYPE_CONTRIBUTOR":      1,
		"SUMMARY_TYPE_RIGHTSCONTROLLER": 2,
	}
)

func (x SummaryType) Enum() *SummaryType {
	p := new(SummaryType)
	*p = x
	return p
}

func (x SummaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SummaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[215].Descriptor()
}

func (SummaryType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[215]
}

func (x SummaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SummaryType.Descriptor instead.
func (SummaryType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{215}
}

type SupplyChainStatus int32

const (
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_UNSPECIFIED                                  SupplyChainStatus = 0
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR                SupplyChainStatus = 1
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR               SupplyChainStatus = 2
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR SupplyChainStatus = 3
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR             SupplyChainStatus = 4
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR              SupplyChainStatus = 5
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR          SupplyChainStatus = 6
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS              SupplyChainStatus = 7
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE                          SupplyChainStatus = 8
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR          SupplyChainStatus = 9
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION                  SupplyChainStatus = 10
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE                SupplyChainStatus = 11
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT                               SupplyChainStatus = 12
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR     SupplyChainStatus = 13
	SupplyChainStatus_SUPPLY_CHAIN_STATUS_USERDEFINED                                  SupplyChainStatus = 14
)

// Enum value maps for SupplyChainStatus.
var (
	SupplyChainStatus_name = map[int32]string{
		0:  "SUPPLY_CHAIN_STATUS_UNSPECIFIED",
		1:  "SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR",
		2:  "SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR",
		3:  "SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR",
		4:  "SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR",
		5:  "SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR",
		6:  "SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR",
		7:  "SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS",
		8:  "SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE",
		9:  "SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR",
		10: "SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION",
		11: "SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE",
		12: "SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT",
		13: "SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR",
		14: "SUPPLY_CHAIN_STATUS_USERDEFINED",
	}
	SupplyChainStatus_value = map[string]int32{
		"SUPPLY_CHAIN_STATUS_UNSPECIFIED":                                  0,
		"SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR":                1,
		"SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR":               2,
		"SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR": 3,
		"SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR":             4,
		"SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR":              5,
		"SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR":          6,
		"SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS":              7,
		"SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE":                          8,
		"SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR":          9,
		"SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION":                  10,
		"SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE":                11,
		"SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT":                               12,
		"SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR":     13,
		"SUPPLY_CHAIN_STATUS_USERDEFINED":                                  14,
	}
)

func (x SupplyChainStatus) Enum() *SupplyChainStatus {
	p := new(SupplyChainStatus)
	*p = x
	return p
}

func (x SupplyChainStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyChainStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[216].Descriptor()
}

func (SupplyChainStatus) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[216]
}

func (x SupplyChainStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyChainStatus.Descriptor instead.
func (SupplyChainStatus) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{216}
}

type Tempo int32

const (
	Tempo_TEMPO_UNSPECIFIED     Tempo = 0
	Tempo_TEMPO_ADAGIETTO       Tempo = 1
	Tempo_TEMPO_ADAGIO          Tempo = 2
	Tempo_TEMPO_ADAGISSIMO      Tempo = 3
	Tempo_TEMPO_ALLEGRETTO      Tempo = 4
	Tempo_TEMPO_ALLEGRISSIMO    Tempo = 5
	Tempo_TEMPO_ALLEGRO         Tempo = 6
	Tempo_TEMPO_ALLEGROMODERATO Tempo = 7
	Tempo_TEMPO_ANDANTE         Tempo = 8
	Tempo_TEMPO_ANDANTEMODERATO Tempo = 9
	Tempo_TEMPO_ANDANTINO       Tempo = 10
	Tempo_TEMPO_GRAVE           Tempo = 11
	Tempo_TEMPO_LARGHETTO       Tempo = 12
	Tempo_TEMPO_LARGHISSIMO     Tempo = 13
	Tempo_TEMPO_LARGO           Tempo = 14
	Tempo_TEMPO_LENTO           Tempo = 15
	Tempo_TEMPO_MARCIAMODERATO  Tempo = 16
	Tempo_TEMPO_MODERATO        Tempo = 17
	Tempo_TEMPO_PRESTISSIMO     Tempo = 18
	Tempo_TEMPO_PRESTO          Tempo = 19
	Tempo_TEMPO_USERDEFINED     Tempo = 20
	Tempo_TEMPO_VIVACE          Tempo = 21
	Tempo_TEMPO_VIVACISSIMO     Tempo = 22
)

// Enum value maps for Tempo.
var (
	Tempo_name = map[int32]string{
		0:  "TEMPO_UNSPECIFIED",
		1:  "TEMPO_ADAGIETTO",
		2:  "TEMPO_ADAGIO",
		3:  "TEMPO_ADAGISSIMO",
		4:  "TEMPO_ALLEGRETTO",
		5:  "TEMPO_ALLEGRISSIMO",
		6:  "TEMPO_ALLEGRO",
		7:  "TEMPO_ALLEGROMODERATO",
		8:  "TEMPO_ANDANTE",
		9:  "TEMPO_ANDANTEMODERATO",
		10: "TEMPO_ANDANTINO",
		11: "TEMPO_GRAVE",
		12: "TEMPO_LARGHETTO",
		13: "TEMPO_LARGHISSIMO",
		14: "TEMPO_LARGO",
		15: "TEMPO_LENTO",
		16: "TEMPO_MARCIAMODERATO",
		17: "TEMPO_MODERATO",
		18: "TEMPO_PRESTISSIMO",
		19: "TEMPO_PRESTO",
		20: "TEMPO_USERDEFINED",
		21: "TEMPO_VIVACE",
		22: "TEMPO_VIVACISSIMO",
	}
	Tempo_value = map[string]int32{
		"TEMPO_UNSPECIFIED":     0,
		"TEMPO_ADAGIETTO":       1,
		"TEMPO_ADAGIO":          2,
		"TEMPO_ADAGISSIMO":      3,
		"TEMPO_ALLEGRETTO":      4,
		"TEMPO_ALLEGRISSIMO":    5,
		"TEMPO_ALLEGRO":         6,
		"TEMPO_ALLEGROMODERATO": 7,
		"TEMPO_ANDANTE":         8,
		"TEMPO_ANDANTEMODERATO": 9,
		"TEMPO_ANDANTINO":       10,
		"TEMPO_GRAVE":           11,
		"TEMPO_LARGHETTO":       12,
		"TEMPO_LARGHISSIMO":     13,
		"TEMPO_LARGO":           14,
		"TEMPO_LENTO":           15,
		"TEMPO_MARCIAMODERATO":  16,
		"TEMPO_MODERATO":        17,
		"TEMPO_PRESTISSIMO":     18,
		"TEMPO_PRESTO":          19,
		"TEMPO_USERDEFINED":     20,
		"TEMPO_VIVACE":          21,
		"TEMPO_VIVACISSIMO":     22,
	}
)

func (x Tempo) Enum() *Tempo {
	p := new(Tempo)
	*p = x
	return p
}

func (x Tempo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tempo) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[217].Descriptor()
}

func (Tempo) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[217]
}

func (x Tempo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tempo.Descriptor instead.
func (Tempo) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{217}
}

type TerritoryCode int32

const (
	TerritoryCode_TERRITORY_CODE_UNSPECIFIED TerritoryCode = 0
	TerritoryCode_TERRITORY_CODE_AD          TerritoryCode = 1
	TerritoryCode_TERRITORY_CODE_AE          TerritoryCode = 2
	TerritoryCode_TERRITORY_CODE_AF          TerritoryCode = 3
	TerritoryCode_TERRITORY_CODE_AG          TerritoryCode = 4
	TerritoryCode_TERRITORY_CODE_AI          TerritoryCode = 5
	TerritoryCode_TERRITORY_CODE_AL          TerritoryCode = 6
	TerritoryCode_TERRITORY_CODE_AM          TerritoryCode = 7
	TerritoryCode_TERRITORY_CODE_AN          TerritoryCode = 8
	TerritoryCode_TERRITORY_CODE_AO          TerritoryCode = 9
	TerritoryCode_TERRITORY_CODE_AQ          TerritoryCode = 10
	TerritoryCode_TERRITORY_CODE_AR          TerritoryCode = 11
	TerritoryCode_TERRITORY_CODE_AS          TerritoryCode = 12
	TerritoryCode_TERRITORY_CODE_AT          TerritoryCode = 13
	TerritoryCode_TERRITORY_CODE_AU          TerritoryCode = 14
	TerritoryCode_TERRITORY_CODE_AW          TerritoryCode = 15
	TerritoryCode_TERRITORY_CODE_AX          TerritoryCode = 16
	TerritoryCode_TERRITORY_CODE_AZ          TerritoryCode = 17
	TerritoryCode_TERRITORY_CODE_BA          TerritoryCode = 18
	TerritoryCode_TERRITORY_CODE_BB          TerritoryCode = 19
	TerritoryCode_TERRITORY_CODE_BD          TerritoryCode = 20
	TerritoryCode_TERRITORY_CODE_BE          TerritoryCode = 21
	TerritoryCode_TERRITORY_CODE_BF          TerritoryCode = 22
	TerritoryCode_TERRITORY_CODE_BG          TerritoryCode = 23
	TerritoryCode_TERRITORY_CODE_BH          TerritoryCode = 24
	TerritoryCode_TERRITORY_CODE_BI          TerritoryCode = 25
	TerritoryCode_TERRITORY_CODE_BJ          TerritoryCode = 26
	TerritoryCode_TERRITORY_CODE_BL          TerritoryCode = 27
	TerritoryCode_TERRITORY_CODE_BM          TerritoryCode = 28
	TerritoryCode_TERRITORY_CODE_BN          TerritoryCode = 29
	TerritoryCode_TERRITORY_CODE_BO          TerritoryCode = 30
	TerritoryCode_TERRITORY_CODE_BQ          TerritoryCode = 31
	TerritoryCode_TERRITORY_CODE_BR          TerritoryCode = 32
	TerritoryCode_TERRITORY_CODE_BS          TerritoryCode = 33
	TerritoryCode_TERRITORY_CODE_BT          TerritoryCode = 34
	TerritoryCode_TERRITORY_CODE_BV          TerritoryCode = 35
	TerritoryCode_TERRITORY_CODE_BW          TerritoryCode = 36
	TerritoryCode_TERRITORY_CODE_BY          TerritoryCode = 37
	TerritoryCode_TERRITORY_CODE_BZ          TerritoryCode = 38
	TerritoryCode_TERRITORY_CODE_CA          TerritoryCode = 39
	TerritoryCode_TERRITORY_CODE_CC          TerritoryCode = 40
	TerritoryCode_TERRITORY_CODE_CD          TerritoryCode = 41
	TerritoryCode_TERRITORY_CODE_CF          TerritoryCode = 42
	TerritoryCode_TERRITORY_CODE_CG          TerritoryCode = 43
	TerritoryCode_TERRITORY_CODE_CH          TerritoryCode = 44
	TerritoryCode_TERRITORY_CODE_CI          TerritoryCode = 45
	TerritoryCode_TERRITORY_CODE_CK          TerritoryCode = 46
	TerritoryCode_TERRITORY_CODE_CL          TerritoryCode = 47
	TerritoryCode_TERRITORY_CODE_CM          TerritoryCode = 48
	TerritoryCode_TERRITORY_CODE_CN          TerritoryCode = 49
	TerritoryCode_TERRITORY_CODE_CO          TerritoryCode = 50
	TerritoryCode_TERRITORY_CODE_CR          TerritoryCode = 51
	TerritoryCode_TERRITORY_CODE_CS          TerritoryCode = 52
	TerritoryCode_TERRITORY_CODE_CU          TerritoryCode = 53
	TerritoryCode_TERRITORY_CODE_CV          TerritoryCode = 54
	TerritoryCode_TERRITORY_CODE_CW          TerritoryCode = 55
	TerritoryCode_TERRITORY_CODE_CX          TerritoryCode = 56
	TerritoryCode_TERRITORY_CODE_CY          TerritoryCode = 57
	TerritoryCode_TERRITORY_CODE_CZ          TerritoryCode = 58
	TerritoryCode_TERRITORY_CODE_DE          TerritoryCode = 59
	TerritoryCode_TERRITORY_CODE_DJ          TerritoryCode = 60
	TerritoryCode_TERRITORY_CODE_DK          TerritoryCode = 61
	TerritoryCode_TERRITORY_CODE_DM          TerritoryCode = 62
	TerritoryCode_TERRITORY_CODE_DO          TerritoryCode = 63
	TerritoryCode_TERRITORY_CODE_DZ          TerritoryCode = 64
	TerritoryCode_TERRITORY_CODE_EC          TerritoryCode = 65
	TerritoryCode_TERRITORY_CODE_EE          TerritoryCode = 66
	TerritoryCode_TERRITORY_CODE_EG          TerritoryCode = 67
	TerritoryCode_TERRITORY_CODE_EH          TerritoryCode = 68
	TerritoryCode_TERRITORY_CODE_ER          TerritoryCode = 69
	TerritoryCode_TERRITORY_CODE_ES          TerritoryCode = 70
	TerritoryCode_TERRITORY_CODE_ES_CE       TerritoryCode = 71
	TerritoryCode_TERRITORY_CODE_ES_CN       TerritoryCode = 72
	TerritoryCode_TERRITORY_CODE_ES_ML       TerritoryCode = 73
	TerritoryCode_TERRITORY_CODE_ET          TerritoryCode = 74
	TerritoryCode_TERRITORY_CODE_FI          TerritoryCode = 75
	TerritoryCode_TERRITORY_CODE_FJ          TerritoryCode = 76
	TerritoryCode_TERRITORY_CODE_FK          TerritoryCode = 77
	TerritoryCode_TERRITORY_CODE_FM          TerritoryCode = 78
	TerritoryCode_TERRITORY_CODE_FO          TerritoryCode = 79
	TerritoryCode_TERRITORY_CODE_FR          TerritoryCode = 80
	TerritoryCode_TERRITORY_CODE_GA          TerritoryCode = 81
	TerritoryCode_TERRITORY_CODE_GB          TerritoryCode = 82
	TerritoryCode_TERRITORY_CODE_GD          TerritoryCode = 83
	TerritoryCode_TERRITORY_CODE_GE          TerritoryCode = 84
	TerritoryCode_TERRITORY_CODE_GF          TerritoryCode = 85
	TerritoryCode_TERRITORY_CODE_GG          TerritoryCode = 86
	TerritoryCode_TERRITORY_CODE_GH          TerritoryCode = 87
	TerritoryCode_TERRITORY_CODE_GI          TerritoryCode = 88
	TerritoryCode_TERRITORY_CODE_GL          TerritoryCode = 89
	TerritoryCode_TERRITORY_CODE_GM          TerritoryCode = 90
	TerritoryCode_TERRITORY_CODE_GN          TerritoryCode = 91
	TerritoryCode_TERRITORY_CODE_GP          TerritoryCode = 92
	TerritoryCode_TERRITORY_CODE_GQ          TerritoryCode = 93
	TerritoryCode_TERRITORY_CODE_GR          TerritoryCode = 94
	TerritoryCode_TERRITORY_CODE_GS          TerritoryCode = 95
	TerritoryCode_TERRITORY_CODE_GT          TerritoryCode = 96
	TerritoryCode_TERRITORY_CODE_GU          TerritoryCode = 97
	TerritoryCode_TERRITORY_CODE_GW          TerritoryCode = 98
	TerritoryCode_TERRITORY_CODE_GY          TerritoryCode = 99
	TerritoryCode_TERRITORY_CODE_HK          TerritoryCode = 100
	TerritoryCode_TERRITORY_CODE_HM          TerritoryCode = 101
	TerritoryCode_TERRITORY_CODE_HN          TerritoryCode = 102
	TerritoryCode_TERRITORY_CODE_HR          TerritoryCode = 103
	TerritoryCode_TERRITORY_CODE_HT          TerritoryCode = 104
	TerritoryCode_TERRITORY_CODE_HU          TerritoryCode = 105
	TerritoryCode_TERRITORY_CODE_ID          TerritoryCode = 106
	TerritoryCode_TERRITORY_CODE_IE          TerritoryCode = 107
	TerritoryCode_TERRITORY_CODE_IL          TerritoryCode = 108
	TerritoryCode_TERRITORY_CODE_IM          TerritoryCode = 109
	TerritoryCode_TERRITORY_CODE_IN          TerritoryCode = 110
	TerritoryCode_TERRITORY_CODE_IO          TerritoryCode = 111
	TerritoryCode_TERRITORY_CODE_IQ          TerritoryCode = 112
	TerritoryCode_TERRITORY_CODE_IR          TerritoryCode = 113
	TerritoryCode_TERRITORY_CODE_IS          TerritoryCode = 114
	TerritoryCode_TERRITORY_CODE_IT          TerritoryCode = 115
	TerritoryCode_TERRITORY_CODE_JE          TerritoryCode = 116
	TerritoryCode_TERRITORY_CODE_JM          TerritoryCode = 117
	TerritoryCode_TERRITORY_CODE_JO          TerritoryCode = 118
	TerritoryCode_TERRITORY_CODE_JP          TerritoryCode = 119
	TerritoryCode_TERRITORY_CODE_KE          TerritoryCode = 120
	TerritoryCode_TERRITORY_CODE_KG          TerritoryCode = 121
	TerritoryCode_TERRITORY_CODE_KH          TerritoryCode = 122
	TerritoryCode_TERRITORY_CODE_KI          TerritoryCode = 123
	TerritoryCode_TERRITORY_CODE_KM          TerritoryCode = 124
	TerritoryCode_TERRITORY_CODE_KN          TerritoryCode = 125
	TerritoryCode_TERRITORY_CODE_KP          TerritoryCode = 126
	TerritoryCode_TERRITORY_CODE_KR          TerritoryCode = 127
	TerritoryCode_TERRITORY_CODE_KW          TerritoryCode = 128
	TerritoryCode_TERRITORY_CODE_KY          TerritoryCode = 129
	TerritoryCode_TERRITORY_CODE_KZ          TerritoryCode = 130
	TerritoryCode_TERRITORY_CODE_LA          TerritoryCode = 131
	TerritoryCode_TERRITORY_CODE_LB          TerritoryCode = 132
	TerritoryCode_TERRITORY_CODE_LC          TerritoryCode = 133
	TerritoryCode_TERRITORY_CODE_LI          TerritoryCode = 134
	TerritoryCode_TERRITORY_CODE_LK          TerritoryCode = 135
	TerritoryCode_TERRITORY_CODE_LR          TerritoryCode = 136
	TerritoryCode_TERRITORY_CODE_LS          TerritoryCode = 137
	TerritoryCode_TERRITORY_CODE_LT          TerritoryCode = 138
	TerritoryCode_TERRITORY_CODE_LU          TerritoryCode = 139
	TerritoryCode_TERRITORY_CODE_LV          TerritoryCode = 140
	TerritoryCode_TERRITORY_CODE_LY          TerritoryCode = 141
	TerritoryCode_TERRITORY_CODE_MA          TerritoryCode = 142
	TerritoryCode_TERRITORY_CODE_MC          TerritoryCode = 143
	TerritoryCode_TERRITORY_CODE_MD          TerritoryCode = 144
	TerritoryCode_TERRITORY_CODE_ME          TerritoryCode = 145
	TerritoryCode_TERRITORY_CODE_MF          TerritoryCode = 146
	TerritoryCode_TERRITORY_CODE_MG          TerritoryCode = 147
	TerritoryCode_TERRITORY_CODE_MH          TerritoryCode = 148
	TerritoryCode_TERRITORY_CODE_MK          TerritoryCode = 149
	TerritoryCode_TERRITORY_CODE_ML          TerritoryCode = 150
	TerritoryCode_TERRITORY_CODE_MM          TerritoryCode = 151
	TerritoryCode_TERRITORY_CODE_MN          TerritoryCode = 152
	TerritoryCode_TERRITORY_CODE_MO          TerritoryCode = 153
	TerritoryCode_TERRITORY_CODE_MP          TerritoryCode = 154
	TerritoryCode_TERRITORY_CODE_MQ          TerritoryCode = 155
	TerritoryCode_TERRITORY_CODE_MR          TerritoryCode = 156
	TerritoryCode_TERRITORY_CODE_MS          TerritoryCode = 157
	TerritoryCode_TERRITORY_CODE_MT          TerritoryCode = 158
	TerritoryCode_TERRITORY_CODE_MU          TerritoryCode = 159
	TerritoryCode_TERRITORY_CODE_MV          TerritoryCode = 160
	TerritoryCode_TERRITORY_CODE_MW          TerritoryCode = 161
	TerritoryCode_TERRITORY_CODE_MX          TerritoryCode = 162
	TerritoryCode_TERRITORY_CODE_MY          TerritoryCode = 163
	TerritoryCode_TERRITORY_CODE_MZ          TerritoryCode = 164
	TerritoryCode_TERRITORY_CODE_NA          TerritoryCode = 165
	TerritoryCode_TERRITORY_CODE_NC          TerritoryCode = 166
	TerritoryCode_TERRITORY_CODE_NE          TerritoryCode = 167
	TerritoryCode_TERRITORY_CODE_NF          TerritoryCode = 168
	TerritoryCode_TERRITORY_CODE_NG          TerritoryCode = 169
	TerritoryCode_TERRITORY_CODE_NI          TerritoryCode = 170
	TerritoryCode_TERRITORY_CODE_NL          TerritoryCode = 171
	TerritoryCode_TERRITORY_CODE_NO          TerritoryCode = 172
	TerritoryCode_TERRITORY_CODE_NP          TerritoryCode = 173
	TerritoryCode_TERRITORY_CODE_NR          TerritoryCode = 174
	TerritoryCode_TERRITORY_CODE_NU          TerritoryCode = 175
	TerritoryCode_TERRITORY_CODE_NZ          TerritoryCode = 176
	TerritoryCode_TERRITORY_CODE_OM          TerritoryCode = 177
	TerritoryCode_TERRITORY_CODE_PA          TerritoryCode = 178
	TerritoryCode_TERRITORY_CODE_PE          TerritoryCode = 179
	TerritoryCode_TERRITORY_CODE_PF          TerritoryCode = 180
	TerritoryCode_TERRITORY_CODE_PG          TerritoryCode = 181
	TerritoryCode_TERRITORY_CODE_PH          TerritoryCode = 182
	TerritoryCode_TERRITORY_CODE_PK          TerritoryCode = 183
	TerritoryCode_TERRITORY_CODE_PL          TerritoryCode = 184
	TerritoryCode_TERRITORY_CODE_PM          TerritoryCode = 185
	TerritoryCode_TERRITORY_CODE_PN          TerritoryCode = 186
	TerritoryCode_TERRITORY_CODE_PR          TerritoryCode = 187
	TerritoryCode_TERRITORY_CODE_PS          TerritoryCode = 188
	TerritoryCode_TERRITORY_CODE_PT          TerritoryCode = 189
	TerritoryCode_TERRITORY_CODE_PW          TerritoryCode = 190
	TerritoryCode_TERRITORY_CODE_PY          TerritoryCode = 191
	TerritoryCode_TERRITORY_CODE_QA          TerritoryCode = 192
	TerritoryCode_TERRITORY_CODE_RE          TerritoryCode = 193
	TerritoryCode_TERRITORY_CODE_RO          TerritoryCode = 194
	TerritoryCode_TERRITORY_CODE_RS          TerritoryCode = 195
	TerritoryCode_TERRITORY_CODE_RU          TerritoryCode = 196
	TerritoryCode_TERRITORY_CODE_RW          TerritoryCode = 197
	TerritoryCode_TERRITORY_CODE_SA          TerritoryCode = 198
	TerritoryCode_TERRITORY_CODE_SB          TerritoryCode = 199
	TerritoryCode_TERRITORY_CODE_SC          TerritoryCode = 200
	TerritoryCode_TERRITORY_CODE_SD          TerritoryCode = 201
	TerritoryCode_TERRITORY_CODE_SE          TerritoryCode = 202
	TerritoryCode_TERRITORY_CODE_SG          TerritoryCode = 203
	TerritoryCode_TERRITORY_CODE_SH          TerritoryCode = 204
	TerritoryCode_TERRITORY_CODE_SI          TerritoryCode = 205
	TerritoryCode_TERRITORY_CODE_SJ          TerritoryCode = 206
	TerritoryCode_TERRITORY_CODE_SK          TerritoryCode = 207
	TerritoryCode_TERRITORY_CODE_SL          TerritoryCode = 208
	TerritoryCode_TERRITORY_CODE_SM          TerritoryCode = 209
	TerritoryCode_TERRITORY_CODE_SN          TerritoryCode = 210
	TerritoryCode_TERRITORY_CODE_SO          TerritoryCode = 211
	TerritoryCode_TERRITORY_CODE_SR          TerritoryCode = 212
	TerritoryCode_TERRITORY_CODE_SS          TerritoryCode = 213
	TerritoryCode_TERRITORY_CODE_ST          TerritoryCode = 214
	TerritoryCode_TERRITORY_CODE_SV          TerritoryCode = 215
	TerritoryCode_TERRITORY_CODE_SX          TerritoryCode = 216
	TerritoryCode_TERRITORY_CODE_SY          TerritoryCode = 217
	TerritoryCode_TERRITORY_CODE_SZ          TerritoryCode = 218
	TerritoryCode_TERRITORY_CODE_TC          TerritoryCode = 219
	TerritoryCode_TERRITORY_CODE_TD          TerritoryCode = 220
	TerritoryCode_TERRITORY_CODE_TF          TerritoryCode = 221
	TerritoryCode_TERRITORY_CODE_TG          TerritoryCode = 222
	TerritoryCode_TERRITORY_CODE_TH          TerritoryCode = 223
	TerritoryCode_TERRITORY_CODE_TJ          TerritoryCode = 224
	TerritoryCode_TERRITORY_CODE_TK          TerritoryCode = 225
	TerritoryCode_TERRITORY_CODE_TL          TerritoryCode = 226
	TerritoryCode_TERRITORY_CODE_TM          TerritoryCode = 227
	TerritoryCode_TERRITORY_CODE_TN          TerritoryCode = 228
	TerritoryCode_TERRITORY_CODE_TO          TerritoryCode = 229
	TerritoryCode_TERRITORY_CODE_TR          TerritoryCode = 230
	TerritoryCode_TERRITORY_CODE_TT          TerritoryCode = 231
	TerritoryCode_TERRITORY_CODE_TV          TerritoryCode = 232
	TerritoryCode_TERRITORY_CODE_TW          TerritoryCode = 233
	TerritoryCode_TERRITORY_CODE_TZ          TerritoryCode = 234
	TerritoryCode_TERRITORY_CODE_UA          TerritoryCode = 235
	TerritoryCode_TERRITORY_CODE_UG          TerritoryCode = 236
	TerritoryCode_TERRITORY_CODE_UM          TerritoryCode = 237
	TerritoryCode_TERRITORY_CODE_US          TerritoryCode = 238
	TerritoryCode_TERRITORY_CODE_UY          TerritoryCode = 239
	TerritoryCode_TERRITORY_CODE_UZ          TerritoryCode = 240
	TerritoryCode_TERRITORY_CODE_VA          TerritoryCode = 241
	TerritoryCode_TERRITORY_CODE_VC          TerritoryCode = 242
	TerritoryCode_TERRITORY_CODE_VE          TerritoryCode = 243
	TerritoryCode_TERRITORY_CODE_VG          TerritoryCode = 244
	TerritoryCode_TERRITORY_CODE_VI          TerritoryCode = 245
	TerritoryCode_TERRITORY_CODE_VN          TerritoryCode = 246
	TerritoryCode_TERRITORY_CODE_VU          TerritoryCode = 247
	TerritoryCode_TERRITORY_CODE_WF          TerritoryCode = 248
	TerritoryCode_TERRITORY_CODE_WS          TerritoryCode = 249
	TerritoryCode_TERRITORY_CODE_YE          TerritoryCode = 250
	TerritoryCode_TERRITORY_CODE_YT          TerritoryCode = 251
	TerritoryCode_TERRITORY_CODE_ZA          TerritoryCode = 252
	TerritoryCode_TERRITORY_CODE_ZM          TerritoryCode = 253
	TerritoryCode_TERRITORY_CODE_ZW          TerritoryCode = 254
)

// Enum value maps for TerritoryCode.
var (
	TerritoryCode_name = map[int32]string{
		0:   "TERRITORY_CODE_UNSPECIFIED",
		1:   "TERRITORY_CODE_AD",
		2:   "TERRITORY_CODE_AE",
		3:   "TERRITORY_CODE_AF",
		4:   "TERRITORY_CODE_AG",
		5:   "TERRITORY_CODE_AI",
		6:   "TERRITORY_CODE_AL",
		7:   "TERRITORY_CODE_AM",
		8:   "TERRITORY_CODE_AN",
		9:   "TERRITORY_CODE_AO",
		10:  "TERRITORY_CODE_AQ",
		11:  "TERRITORY_CODE_AR",
		12:  "TERRITORY_CODE_AS",
		13:  "TERRITORY_CODE_AT",
		14:  "TERRITORY_CODE_AU",
		15:  "TERRITORY_CODE_AW",
		16:  "TERRITORY_CODE_AX",
		17:  "TERRITORY_CODE_AZ",
		18:  "TERRITORY_CODE_BA",
		19:  "TERRITORY_CODE_BB",
		20:  "TERRITORY_CODE_BD",
		21:  "TERRITORY_CODE_BE",
		22:  "TERRITORY_CODE_BF",
		23:  "TERRITORY_CODE_BG",
		24:  "TERRITORY_CODE_BH",
		25:  "TERRITORY_CODE_BI",
		26:  "TERRITORY_CODE_BJ",
		27:  "TERRITORY_CODE_BL",
		28:  "TERRITORY_CODE_BM",
		29:  "TERRITORY_CODE_BN",
		30:  "TERRITORY_CODE_BO",
		31:  "TERRITORY_CODE_BQ",
		32:  "TERRITORY_CODE_BR",
		33:  "TERRITORY_CODE_BS",
		34:  "TERRITORY_CODE_BT",
		35:  "TERRITORY_CODE_BV",
		36:  "TERRITORY_CODE_BW",
		37:  "TERRITORY_CODE_BY",
		38:  "TERRITORY_CODE_BZ",
		39:  "TERRITORY_CODE_CA",
		40:  "TERRITORY_CODE_CC",
		41:  "TERRITORY_CODE_CD",
		42:  "TERRITORY_CODE_CF",
		43:  "TERRITORY_CODE_CG",
		44:  "TERRITORY_CODE_CH",
		45:  "TERRITORY_CODE_CI",
		46:  "TERRITORY_CODE_CK",
		47:  "TERRITORY_CODE_CL",
		48:  "TERRITORY_CODE_CM",
		49:  "TERRITORY_CODE_CN",
		50:  "TERRITORY_CODE_CO",
		51:  "TERRITORY_CODE_CR",
		52:  "TERRITORY_CODE_CS",
		53:  "TERRITORY_CODE_CU",
		54:  "TERRITORY_CODE_CV",
		55:  "TERRITORY_CODE_CW",
		56:  "TERRITORY_CODE_CX",
		57:  "TERRITORY_CODE_CY",
		58:  "TERRITORY_CODE_CZ",
		59:  "TERRITORY_CODE_DE",
		60:  "TERRITORY_CODE_DJ",
		61:  "TERRITORY_CODE_DK",
		62:  "TERRITORY_CODE_DM",
		63:  "TERRITORY_CODE_DO",
		64:  "TERRITORY_CODE_DZ",
		65:  "TERRITORY_CODE_EC",
		66:  "TERRITORY_CODE_EE",
		67:  "TERRITORY_CODE_EG",
		68:  "TERRITORY_CODE_EH",
		69:  "TERRITORY_CODE_ER",
		70:  "TERRITORY_CODE_ES",
		71:  "TERRITORY_CODE_ES_CE",
		72:  "TERRITORY_CODE_ES_CN",
		73:  "TERRITORY_CODE_ES_ML",
		74:  "TERRITORY_CODE_ET",
		75:  "TERRITORY_CODE_FI",
		76:  "TERRITORY_CODE_FJ",
		77:  "TERRITORY_CODE_FK",
		78:  "TERRITORY_CODE_FM",
		79:  "TERRITORY_CODE_FO",
		80:  "TERRITORY_CODE_FR",
		81:  "TERRITORY_CODE_GA",
		82:  "TERRITORY_CODE_GB",
		83:  "TERRITORY_CODE_GD",
		84:  "TERRITORY_CODE_GE",
		85:  "TERRITORY_CODE_GF",
		86:  "TERRITORY_CODE_GG",
		87:  "TERRITORY_CODE_GH",
		88:  "TERRITORY_CODE_GI",
		89:  "TERRITORY_CODE_GL",
		90:  "TERRITORY_CODE_GM",
		91:  "TERRITORY_CODE_GN",
		92:  "TERRITORY_CODE_GP",
		93:  "TERRITORY_CODE_GQ",
		94:  "TERRITORY_CODE_GR",
		95:  "TERRITORY_CODE_GS",
		96:  "TERRITORY_CODE_GT",
		97:  "TERRITORY_CODE_GU",
		98:  "TERRITORY_CODE_GW",
		99:  "TERRITORY_CODE_GY",
		100: "TERRITORY_CODE_HK",
		101: "TERRITORY_CODE_HM",
		102: "TERRITORY_CODE_HN",
		103: "TERRITORY_CODE_HR",
		104: "TERRITORY_CODE_HT",
		105: "TERRITORY_CODE_HU",
		106: "TERRITORY_CODE_ID",
		107: "TERRITORY_CODE_IE",
		108: "TERRITORY_CODE_IL",
		109: "TERRITORY_CODE_IM",
		110: "TERRITORY_CODE_IN",
		111: "TERRITORY_CODE_IO",
		112: "TERRITORY_CODE_IQ",
		113: "TERRITORY_CODE_IR",
		114: "TERRITORY_CODE_IS",
		115: "TERRITORY_CODE_IT",
		116: "TERRITORY_CODE_JE",
		117: "TERRITORY_CODE_JM",
		118: "TERRITORY_CODE_JO",
		119: "TERRITORY_CODE_JP",
		120: "TERRITORY_CODE_KE",
		121: "TERRITORY_CODE_KG",
		122: "TERRITORY_CODE_KH",
		123: "TERRITORY_CODE_KI",
		124: "TERRITORY_CODE_KM",
		125: "TERRITORY_CODE_KN",
		126: "TERRITORY_CODE_KP",
		127: "TERRITORY_CODE_KR",
		128: "TERRITORY_CODE_KW",
		129: "TERRITORY_CODE_KY",
		130: "TERRITORY_CODE_KZ",
		131: "TERRITORY_CODE_LA",
		132: "TERRITORY_CODE_LB",
		133: "TERRITORY_CODE_LC",
		134: "TERRITORY_CODE_LI",
		135: "TERRITORY_CODE_LK",
		136: "TERRITORY_CODE_LR",
		137: "TERRITORY_CODE_LS",
		138: "TERRITORY_CODE_LT",
		139: "TERRITORY_CODE_LU",
		140: "TERRITORY_CODE_LV",
		141: "TERRITORY_CODE_LY",
		142: "TERRITORY_CODE_MA",
		143: "TERRITORY_CODE_MC",
		144: "TERRITORY_CODE_MD",
		145: "TERRITORY_CODE_ME",
		146: "TERRITORY_CODE_MF",
		147: "TERRITORY_CODE_MG",
		148: "TERRITORY_CODE_MH",
		149: "TERRITORY_CODE_MK",
		150: "TERRITORY_CODE_ML",
		151: "TERRITORY_CODE_MM",
		152: "TERRITORY_CODE_MN",
		153: "TERRITORY_CODE_MO",
		154: "TERRITORY_CODE_MP",
		155: "TERRITORY_CODE_MQ",
		156: "TERRITORY_CODE_MR",
		157: "TERRITORY_CODE_MS",
		158: "TERRITORY_CODE_MT",
		159: "TERRITORY_CODE_MU",
		160: "TERRITORY_CODE_MV",
		161: "TERRITORY_CODE_MW",
		162: "TERRITORY_CODE_MX",
		163: "TERRITORY_CODE_MY",
		164: "TERRITORY_CODE_MZ",
		165: "TERRITORY_CODE_NA",
		166: "TERRITORY_CODE_NC",
		167: "TERRITORY_CODE_NE",
		168: "TERRITORY_CODE_NF",
		169: "TERRITORY_CODE_NG",
		170: "TERRITORY_CODE_NI",
		171: "TERRITORY_CODE_NL",
		172: "TERRITORY_CODE_NO",
		173: "TERRITORY_CODE_NP",
		174: "TERRITORY_CODE_NR",
		175: "TERRITORY_CODE_NU",
		176: "TERRITORY_CODE_NZ",
		177: "TERRITORY_CODE_OM",
		178: "TERRITORY_CODE_PA",
		179: "TERRITORY_CODE_PE",
		180: "TERRITORY_CODE_PF",
		181: "TERRITORY_CODE_PG",
		182: "TERRITORY_CODE_PH",
		183: "TERRITORY_CODE_PK",
		184: "TERRITORY_CODE_PL",
		185: "TERRITORY_CODE_PM",
		186: "TERRITORY_CODE_PN",
		187: "TERRITORY_CODE_PR",
		188: "TERRITORY_CODE_PS",
		189: "TERRITORY_CODE_PT",
		190: "TERRITORY_CODE_PW",
		191: "TERRITORY_CODE_PY",
		192: "TERRITORY_CODE_QA",
		193: "TERRITORY_CODE_RE",
		194: "TERRITORY_CODE_RO",
		195: "TERRITORY_CODE_RS",
		196: "TERRITORY_CODE_RU",
		197: "TERRITORY_CODE_RW",
		198: "TERRITORY_CODE_SA",
		199: "TERRITORY_CODE_SB",
		200: "TERRITORY_CODE_SC",
		201: "TERRITORY_CODE_SD",
		202: "TERRITORY_CODE_SE",
		203: "TERRITORY_CODE_SG",
		204: "TERRITORY_CODE_SH",
		205: "TERRITORY_CODE_SI",
		206: "TERRITORY_CODE_SJ",
		207: "TERRITORY_CODE_SK",
		208: "TERRITORY_CODE_SL",
		209: "TERRITORY_CODE_SM",
		210: "TERRITORY_CODE_SN",
		211: "TERRITORY_CODE_SO",
		212: "TERRITORY_CODE_SR",
		213: "TERRITORY_CODE_SS",
		214: "TERRITORY_CODE_ST",
		215: "TERRITORY_CODE_SV",
		216: "TERRITORY_CODE_SX",
		217: "TERRITORY_CODE_SY",
		218: "TERRITORY_CODE_SZ",
		219: "TERRITORY_CODE_TC",
		220: "TERRITORY_CODE_TD",
		221: "TERRITORY_CODE_TF",
		222: "TERRITORY_CODE_TG",
		223: "TERRITORY_CODE_TH",
		224: "TERRITORY_CODE_TJ",
		225: "TERRITORY_CODE_TK",
		226: "TERRITORY_CODE_TL",
		227: "TERRITORY_CODE_TM",
		228: "TERRITORY_CODE_TN",
		229: "TERRITORY_CODE_TO",
		230: "TERRITORY_CODE_TR",
		231: "TERRITORY_CODE_TT",
		232: "TERRITORY_CODE_TV",
		233: "TERRITORY_CODE_TW",
		234: "TERRITORY_CODE_TZ",
		235: "TERRITORY_CODE_UA",
		236: "TERRITORY_CODE_UG",
		237: "TERRITORY_CODE_UM",
		238: "TERRITORY_CODE_US",
		239: "TERRITORY_CODE_UY",
		240: "TERRITORY_CODE_UZ",
		241: "TERRITORY_CODE_VA",
		242: "TERRITORY_CODE_VC",
		243: "TERRITORY_CODE_VE",
		244: "TERRITORY_CODE_VG",
		245: "TERRITORY_CODE_VI",
		246: "TERRITORY_CODE_VN",
		247: "TERRITORY_CODE_VU",
		248: "TERRITORY_CODE_WF",
		249: "TERRITORY_CODE_WS",
		250: "TERRITORY_CODE_YE",
		251: "TERRITORY_CODE_YT",
		252: "TERRITORY_CODE_ZA",
		253: "TERRITORY_CODE_ZM",
		254: "TERRITORY_CODE_ZW",
	}
	TerritoryCode_value = map[string]int32{
		"TERRITORY_CODE_UNSPECIFIED": 0,
		"TERRITORY_CODE_AD":          1,
		"TERRITORY_CODE_AE":          2,
		"TERRITORY_CODE_AF":          3,
		"TERRITORY_CODE_AG":          4,
		"TERRITORY_CODE_AI":          5,
		"TERRITORY_CODE_AL":          6,
		"TERRITORY_CODE_AM":          7,
		"TERRITORY_CODE_AN":          8,
		"TERRITORY_CODE_AO":          9,
		"TERRITORY_CODE_AQ":          10,
		"TERRITORY_CODE_AR":          11,
		"TERRITORY_CODE_AS":          12,
		"TERRITORY_CODE_AT":          13,
		"TERRITORY_CODE_AU":          14,
		"TERRITORY_CODE_AW":          15,
		"TERRITORY_CODE_AX":          16,
		"TERRITORY_CODE_AZ":          17,
		"TERRITORY_CODE_BA":          18,
		"TERRITORY_CODE_BB":          19,
		"TERRITORY_CODE_BD":          20,
		"TERRITORY_CODE_BE":          21,
		"TERRITORY_CODE_BF":          22,
		"TERRITORY_CODE_BG":          23,
		"TERRITORY_CODE_BH":          24,
		"TERRITORY_CODE_BI":          25,
		"TERRITORY_CODE_BJ":          26,
		"TERRITORY_CODE_BL":          27,
		"TERRITORY_CODE_BM":          28,
		"TERRITORY_CODE_BN":          29,
		"TERRITORY_CODE_BO":          30,
		"TERRITORY_CODE_BQ":          31,
		"TERRITORY_CODE_BR":          32,
		"TERRITORY_CODE_BS":          33,
		"TERRITORY_CODE_BT":          34,
		"TERRITORY_CODE_BV":          35,
		"TERRITORY_CODE_BW":          36,
		"TERRITORY_CODE_BY":          37,
		"TERRITORY_CODE_BZ":          38,
		"TERRITORY_CODE_CA":          39,
		"TERRITORY_CODE_CC":          40,
		"TERRITORY_CODE_CD":          41,
		"TERRITORY_CODE_CF":          42,
		"TERRITORY_CODE_CG":          43,
		"TERRITORY_CODE_CH":          44,
		"TERRITORY_CODE_CI":          45,
		"TERRITORY_CODE_CK":          46,
		"TERRITORY_CODE_CL":          47,
		"TERRITORY_CODE_CM":          48,
		"TERRITORY_CODE_CN":          49,
		"TERRITORY_CODE_CO":          50,
		"TERRITORY_CODE_CR":          51,
		"TERRITORY_CODE_CS":          52,
		"TERRITORY_CODE_CU":          53,
		"TERRITORY_CODE_CV":          54,
		"TERRITORY_CODE_CW":          55,
		"TERRITORY_CODE_CX":          56,
		"TERRITORY_CODE_CY":          57,
		"TERRITORY_CODE_CZ":          58,
		"TERRITORY_CODE_DE":          59,
		"TERRITORY_CODE_DJ":          60,
		"TERRITORY_CODE_DK":          61,
		"TERRITORY_CODE_DM":          62,
		"TERRITORY_CODE_DO":          63,
		"TERRITORY_CODE_DZ":          64,
		"TERRITORY_CODE_EC":          65,
		"TERRITORY_CODE_EE":          66,
		"TERRITORY_CODE_EG":          67,
		"TERRITORY_CODE_EH":          68,
		"TERRITORY_CODE_ER":          69,
		"TERRITORY_CODE_ES":          70,
		"TERRITORY_CODE_ES_CE":       71,
		"TERRITORY_CODE_ES_CN":       72,
		"TERRITORY_CODE_ES_ML":       73,
		"TERRITORY_CODE_ET":          74,
		"TERRITORY_CODE_FI":          75,
		"TERRITORY_CODE_FJ":          76,
		"TERRITORY_CODE_FK":          77,
		"TERRITORY_CODE_FM":          78,
		"TERRITORY_CODE_FO":          79,
		"TERRITORY_CODE_FR":          80,
		"TERRITORY_CODE_GA":          81,
		"TERRITORY_CODE_GB":          82,
		"TERRITORY_CODE_GD":          83,
		"TERRITORY_CODE_GE":          84,
		"TERRITORY_CODE_GF":          85,
		"TERRITORY_CODE_GG":          86,
		"TERRITORY_CODE_GH":          87,
		"TERRITORY_CODE_GI":          88,
		"TERRITORY_CODE_GL":          89,
		"TERRITORY_CODE_GM":          90,
		"TERRITORY_CODE_GN":          91,
		"TERRITORY_CODE_GP":          92,
		"TERRITORY_CODE_GQ":          93,
		"TERRITORY_CODE_GR":          94,
		"TERRITORY_CODE_GS":          95,
		"TERRITORY_CODE_GT":          96,
		"TERRITORY_CODE_GU":          97,
		"TERRITORY_CODE_GW":          98,
		"TERRITORY_CODE_GY":          99,
		"TERRITORY_CODE_HK":          100,
		"TERRITORY_CODE_HM":          101,
		"TERRITORY_CODE_HN":          102,
		"TERRITORY_CODE_HR":          103,
		"TERRITORY_CODE_HT":          104,
		"TERRITORY_CODE_HU":          105,
		"TERRITORY_CODE_ID":          106,
		"TERRITORY_CODE_IE":          107,
		"TERRITORY_CODE_IL":          108,
		"TERRITORY_CODE_IM":          109,
		"TERRITORY_CODE_IN":          110,
		"TERRITORY_CODE_IO":          111,
		"TERRITORY_CODE_IQ":          112,
		"TERRITORY_CODE_IR":          113,
		"TERRITORY_CODE_IS":          114,
		"TERRITORY_CODE_IT":          115,
		"TERRITORY_CODE_JE":          116,
		"TERRITORY_CODE_JM":          117,
		"TERRITORY_CODE_JO":          118,
		"TERRITORY_CODE_JP":          119,
		"TERRITORY_CODE_KE":          120,
		"TERRITORY_CODE_KG":          121,
		"TERRITORY_CODE_KH":          122,
		"TERRITORY_CODE_KI":          123,
		"TERRITORY_CODE_KM":          124,
		"TERRITORY_CODE_KN":          125,
		"TERRITORY_CODE_KP":          126,
		"TERRITORY_CODE_KR":          127,
		"TERRITORY_CODE_KW":          128,
		"TERRITORY_CODE_KY":          129,
		"TERRITORY_CODE_KZ":          130,
		"TERRITORY_CODE_LA":          131,
		"TERRITORY_CODE_LB":          132,
		"TERRITORY_CODE_LC":          133,
		"TERRITORY_CODE_LI":          134,
		"TERRITORY_CODE_LK":          135,
		"TERRITORY_CODE_LR":          136,
		"TERRITORY_CODE_LS":          137,
		"TERRITORY_CODE_LT":          138,
		"TERRITORY_CODE_LU":          139,
		"TERRITORY_CODE_LV":          140,
		"TERRITORY_CODE_LY":          141,
		"TERRITORY_CODE_MA":          142,
		"TERRITORY_CODE_MC":          143,
		"TERRITORY_CODE_MD":          144,
		"TERRITORY_CODE_ME":          145,
		"TERRITORY_CODE_MF":          146,
		"TERRITORY_CODE_MG":          147,
		"TERRITORY_CODE_MH":          148,
		"TERRITORY_CODE_MK":          149,
		"TERRITORY_CODE_ML":          150,
		"TERRITORY_CODE_MM":          151,
		"TERRITORY_CODE_MN":          152,
		"TERRITORY_CODE_MO":          153,
		"TERRITORY_CODE_MP":          154,
		"TERRITORY_CODE_MQ":          155,
		"TERRITORY_CODE_MR":          156,
		"TERRITORY_CODE_MS":          157,
		"TERRITORY_CODE_MT":          158,
		"TERRITORY_CODE_MU":          159,
		"TERRITORY_CODE_MV":          160,
		"TERRITORY_CODE_MW":          161,
		"TERRITORY_CODE_MX":          162,
		"TERRITORY_CODE_MY":          163,
		"TERRITORY_CODE_MZ":          164,
		"TERRITORY_CODE_NA":          165,
		"TERRITORY_CODE_NC":          166,
		"TERRITORY_CODE_NE":          167,
		"TERRITORY_CODE_NF":          168,
		"TERRITORY_CODE_NG":          169,
		"TERRITORY_CODE_NI":          170,
		"TERRITORY_CODE_NL":          171,
		"TERRITORY_CODE_NO":          172,
		"TERRITORY_CODE_NP":          173,
		"TERRITORY_CODE_NR":          174,
		"TERRITORY_CODE_NU":          175,
		"TERRITORY_CODE_NZ":          176,
		"TERRITORY_CODE_OM":          177,
		"TERRITORY_CODE_PA":          178,
		"TERRITORY_CODE_PE":          179,
		"TERRITORY_CODE_PF":          180,
		"TERRITORY_CODE_PG":          181,
		"TERRITORY_CODE_PH":          182,
		"TERRITORY_CODE_PK":          183,
		"TERRITORY_CODE_PL":          184,
		"TERRITORY_CODE_PM":          185,
		"TERRITORY_CODE_PN":          186,
		"TERRITORY_CODE_PR":          187,
		"TERRITORY_CODE_PS":          188,
		"TERRITORY_CODE_PT":          189,
		"TERRITORY_CODE_PW":          190,
		"TERRITORY_CODE_PY":          191,
		"TERRITORY_CODE_QA":          192,
		"TERRITORY_CODE_RE":          193,
		"TERRITORY_CODE_RO":          194,
		"TERRITORY_CODE_RS":          195,
		"TERRITORY_CODE_RU":          196,
		"TERRITORY_CODE_RW":          197,
		"TERRITORY_CODE_SA":          198,
		"TERRITORY_CODE_SB":          199,
		"TERRITORY_CODE_SC":          200,
		"TERRITORY_CODE_SD":          201,
		"TERRITORY_CODE_SE":          202,
		"TERRITORY_CODE_SG":          203,
		"TERRITORY_CODE_SH":          204,
		"TERRITORY_CODE_SI":          205,
		"TERRITORY_CODE_SJ":          206,
		"TERRITORY_CODE_SK":          207,
		"TERRITORY_CODE_SL":          208,
		"TERRITORY_CODE_SM":          209,
		"TERRITORY_CODE_SN":          210,
		"TERRITORY_CODE_SO":          211,
		"TERRITORY_CODE_SR":          212,
		"TERRITORY_CODE_SS":          213,
		"TERRITORY_CODE_ST":          214,
		"TERRITORY_CODE_SV":          215,
		"TERRITORY_CODE_SX":          216,
		"TERRITORY_CODE_SY":          217,
		"TERRITORY_CODE_SZ":          218,
		"TERRITORY_CODE_TC":          219,
		"TERRITORY_CODE_TD":          220,
		"TERRITORY_CODE_TF":          221,
		"TERRITORY_CODE_TG":          222,
		"TERRITORY_CODE_TH":          223,
		"TERRITORY_CODE_TJ":          224,
		"TERRITORY_CODE_TK":          225,
		"TERRITORY_CODE_TL":          226,
		"TERRITORY_CODE_TM":          227,
		"TERRITORY_CODE_TN":          228,
		"TERRITORY_CODE_TO":          229,
		"TERRITORY_CODE_TR":          230,
		"TERRITORY_CODE_TT":          231,
		"TERRITORY_CODE_TV":          232,
		"TERRITORY_CODE_TW":          233,
		"TERRITORY_CODE_TZ":          234,
		"TERRITORY_CODE_UA":          235,
		"TERRITORY_CODE_UG":          236,
		"TERRITORY_CODE_UM":          237,
		"TERRITORY_CODE_US":          238,
		"TERRITORY_CODE_UY":          239,
		"TERRITORY_CODE_UZ":          240,
		"TERRITORY_CODE_VA":          241,
		"TERRITORY_CODE_VC":          242,
		"TERRITORY_CODE_VE":          243,
		"TERRITORY_CODE_VG":          244,
		"TERRITORY_CODE_VI":          245,
		"TERRITORY_CODE_VN":          246,
		"TERRITORY_CODE_VU":          247,
		"TERRITORY_CODE_WF":          248,
		"TERRITORY_CODE_WS":          249,
		"TERRITORY_CODE_YE":          250,
		"TERRITORY_CODE_YT":          251,
		"TERRITORY_CODE_ZA":          252,
		"TERRITORY_CODE_ZM":          253,
		"TERRITORY_CODE_ZW":          254,
	}
)

func (x TerritoryCode) Enum() *TerritoryCode {
	p := new(TerritoryCode)
	*p = x
	return p
}

func (x TerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[218].Descriptor()
}

func (TerritoryCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[218]
}

func (x TerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerritoryCode.Descriptor instead.
func (TerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{218}
}

type TerritoryCodeType int32

const (
	TerritoryCodeType_TERRITORY_CODE_TYPE_UNSPECIFIED TerritoryCodeType = 0
	TerritoryCodeType_TERRITORY_CODE_TYPE_ISO         TerritoryCodeType = 1
	TerritoryCodeType_TERRITORY_CODE_TYPE_TIS         TerritoryCodeType = 2
)

// Enum value maps for TerritoryCodeType.
var (
	TerritoryCodeType_name = map[int32]string{
		0: "TERRITORY_CODE_TYPE_UNSPECIFIED",
		1: "TERRITORY_CODE_TYPE_ISO",
		2: "TERRITORY_CODE_TYPE_TIS",
	}
	TerritoryCodeType_value = map[string]int32{
		"TERRITORY_CODE_TYPE_UNSPECIFIED": 0,
		"TERRITORY_CODE_TYPE_ISO":         1,
		"TERRITORY_CODE_TYPE_TIS":         2,
	}
)

func (x TerritoryCodeType) Enum() *TerritoryCodeType {
	p := new(TerritoryCodeType)
	*p = x
	return p
}

func (x TerritoryCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerritoryCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[219].Descriptor()
}

func (TerritoryCodeType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[219]
}

func (x TerritoryCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerritoryCodeType.Descriptor instead.
func (TerritoryCodeType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{219}
}

type TerritoryCodeTypeIncludingDeprecatedCodes int32

const (
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED   TerritoryCodeTypeIncludingDeprecatedCodes = 0
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO TerritoryCodeTypeIncludingDeprecatedCodes = 1
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO           TerritoryCodeTypeIncludingDeprecatedCodes = 2
	TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS           TerritoryCodeTypeIncludingDeprecatedCodes = 3
)

// Enum value maps for TerritoryCodeTypeIncludingDeprecatedCodes.
var (
	TerritoryCodeTypeIncludingDeprecatedCodes_name = map[int32]string{
		0: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED",
		1: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO",
		2: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO",
		3: "TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS",
	}
	TerritoryCodeTypeIncludingDeprecatedCodes_value = map[string]int32{
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED":   0,
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO": 1,
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO":           2,
		"TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS":           3,
	}
)

func (x TerritoryCodeTypeIncludingDeprecatedCodes) Enum() *TerritoryCodeTypeIncludingDeprecatedCodes {
	p := new(TerritoryCodeTypeIncludingDeprecatedCodes)
	*p = x
	return p
}

func (x TerritoryCodeTypeIncludingDeprecatedCodes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerritoryCodeTypeIncludingDeprecatedCodes) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[220].Descriptor()
}

func (TerritoryCodeTypeIncludingDeprecatedCodes) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[220]
}

func (x TerritoryCodeTypeIncludingDeprecatedCodes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerritoryCodeTypeIncludingDeprecatedCodes.Descriptor instead.
func (TerritoryCodeTypeIncludingDeprecatedCodes) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{220}
}

type TextCodecType int32

const (
	TextCodecType_TEXT_CODEC_TYPE_UNSPECIFIED         TextCodecType = 0
	TextCodecType_TEXT_CODEC_TYPE_ASCII               TextCodecType = 1
	TextCodecType_TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT TextCodecType = 2
	TextCodecType_TEXT_CODEC_TYPE_DDEXLYRICSFILE      TextCodecType = 3
	TextCodecType_TEXT_CODEC_TYPE_EBU_TT              TextCodecType = 4
	TextCodecType_TEXT_CODEC_TYPE_ENHANCEDLRC         TextCodecType = 5
	TextCodecType_TEXT_CODEC_TYPE_EPUB                TextCodecType = 6
	TextCodecType_TEXT_CODEC_TYPE_HTML                TextCodecType = 7
	TextCodecType_TEXT_CODEC_TYPE_LRC                 TextCodecType = 8
	TextCodecType_TEXT_CODEC_TYPE_MICROSOFTWORD       TextCodecType = 9
	TextCodecType_TEXT_CODEC_TYPE_OPENDOCUMENTTEXT    TextCodecType = 10
	TextCodecType_TEXT_CODEC_TYPE_OOXML               TextCodecType = 11
	TextCodecType_TEXT_CODEC_TYPE_PDF                 TextCodecType = 12
	TextCodecType_TEXT_CODEC_TYPE_POSTSCRIPT          TextCodecType = 13
	TextCodecType_TEXT_CODEC_TYPE_RTF                 TextCodecType = 14
	TextCodecType_TEXT_CODEC_TYPE_SIMPLELRC           TextCodecType = 15
	TextCodecType_TEXT_CODEC_TYPE_SRT                 TextCodecType = 16
	TextCodecType_TEXT_CODEC_TYPE_TTML                TextCodecType = 17
	TextCodecType_TEXT_CODEC_TYPE_UNKNOWN             TextCodecType = 18
	TextCodecType_TEXT_CODEC_TYPE_USERDEFINED         TextCodecType = 19
	TextCodecType_TEXT_CODEC_TYPE_UTF8TEXT            TextCodecType = 20
	TextCodecType_TEXT_CODEC_TYPE_VTT                 TextCodecType = 21
	TextCodecType_TEXT_CODEC_TYPE_WINDOWSTEXT         TextCodecType = 22
	TextCodecType_TEXT_CODEC_TYPE_XHTML               TextCodecType = 23
	TextCodecType_TEXT_CODEC_TYPE_XML                 TextCodecType = 24
)

// Enum value maps for TextCodecType.
var (
	TextCodecType_name = map[int32]string{
		0:  "TEXT_CODEC_TYPE_UNSPECIFIED",
		1:  "TEXT_CODEC_TYPE_ASCII",
		2:  "TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT",
		3:  "TEXT_CODEC_TYPE_DDEXLYRICSFILE",
		4:  "TEXT_CODEC_TYPE_EBU_TT",
		5:  "TEXT_CODEC_TYPE_ENHANCEDLRC",
		6:  "TEXT_CODEC_TYPE_EPUB",
		7:  "TEXT_CODEC_TYPE_HTML",
		8:  "TEXT_CODEC_TYPE_LRC",
		9:  "TEXT_CODEC_TYPE_MICROSOFTWORD",
		10: "TEXT_CODEC_TYPE_OPENDOCUMENTTEXT",
		11: "TEXT_CODEC_TYPE_OOXML",
		12: "TEXT_CODEC_TYPE_PDF",
		13: "TEXT_CODEC_TYPE_POSTSCRIPT",
		14: "TEXT_CODEC_TYPE_RTF",
		15: "TEXT_CODEC_TYPE_SIMPLELRC",
		16: "TEXT_CODEC_TYPE_SRT",
		17: "TEXT_CODEC_TYPE_TTML",
		18: "TEXT_CODEC_TYPE_UNKNOWN",
		19: "TEXT_CODEC_TYPE_USERDEFINED",
		20: "TEXT_CODEC_TYPE_UTF8TEXT",
		21: "TEXT_CODEC_TYPE_VTT",
		22: "TEXT_CODEC_TYPE_WINDOWSTEXT",
		23: "TEXT_CODEC_TYPE_XHTML",
		24: "TEXT_CODEC_TYPE_XML",
	}
	TextCodecType_value = map[string]int32{
		"TEXT_CODEC_TYPE_UNSPECIFIED":         0,
		"TEXT_CODEC_TYPE_ASCII":               1,
		"TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT": 2,
		"TEXT_CODEC_TYPE_DDEXLYRICSFILE":      3,
		"TEXT_CODEC_TYPE_EBU_TT":              4,
		"TEXT_CODEC_TYPE_ENHANCEDLRC":         5,
		"TEXT_CODEC_TYPE_EPUB":                6,
		"TEXT_CODEC_TYPE_HTML":                7,
		"TEXT_CODEC_TYPE_LRC":                 8,
		"TEXT_CODEC_TYPE_MICROSOFTWORD":       9,
		"TEXT_CODEC_TYPE_OPENDOCUMENTTEXT":    10,
		"TEXT_CODEC_TYPE_OOXML":               11,
		"TEXT_CODEC_TYPE_PDF":                 12,
		"TEXT_CODEC_TYPE_POSTSCRIPT":          13,
		"TEXT_CODEC_TYPE_RTF":                 14,
		"TEXT_CODEC_TYPE_SIMPLELRC":           15,
		"TEXT_CODEC_TYPE_SRT":                 16,
		"TEXT_CODEC_TYPE_TTML":                17,
		"TEXT_CODEC_TYPE_UNKNOWN":             18,
		"TEXT_CODEC_TYPE_USERDEFINED":         19,
		"TEXT_CODEC_TYPE_UTF8TEXT":            20,
		"TEXT_CODEC_TYPE_VTT":                 21,
		"TEXT_CODEC_TYPE_WINDOWSTEXT":         22,
		"TEXT_CODEC_TYPE_XHTML":               23,
		"TEXT_CODEC_TYPE_XML":                 24,
	}
)

func (x TextCodecType) Enum() *TextCodecType {
	p := new(TextCodecType)
	*p = x
	return p
}

func (x TextCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[221].Descriptor()
}

func (TextCodecType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[221]
}

func (x TextCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextCodecType.Descriptor instead.
func (TextCodecType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{221}
}

type TextMusicRelationshipType int32

const (
	TextMusicRelationshipType_TEXT_MUSIC_RELATIONSHIP_TYPE_UNSPECIFIED      TextMusicRelationshipType = 0
	TextMusicRelationshipType_TEXT_MUSIC_RELATIONSHIP_TYPE_TEXTONLY         TextMusicRelationshipType = 1
	TextMusicRelationshipType_TEXT_MUSIC_RELATIONSHIP_TYPE_SAMECREATION     TextMusicRelationshipType = 2
	TextMusicRelationshipType_TEXT_MUSIC_RELATIONSHIP_TYPE_SEPARATECREATION TextMusicRelationshipType = 3
	TextMusicRelationshipType_TEXT_MUSIC_RELATIONSHIP_TYPE_MUSICONLY        TextMusicRelationshipType = 4
)

// Enum value maps for TextMusicRelationshipType.
var (
	TextMusicRelationshipType_name = map[int32]string{
		0: "TEXT_MUSIC_RELATIONSHIP_TYPE_UNSPECIFIED",
		1: "TEXT_MUSIC_RELATIONSHIP_TYPE_TEXTONLY",
		2: "TEXT_MUSIC_RELATIONSHIP_TYPE_SAMECREATION",
		3: "TEXT_MUSIC_RELATIONSHIP_TYPE_SEPARATECREATION",
		4: "TEXT_MUSIC_RELATIONSHIP_TYPE_MUSICONLY",
	}
	TextMusicRelationshipType_value = map[string]int32{
		"TEXT_MUSIC_RELATIONSHIP_TYPE_UNSPECIFIED":      0,
		"TEXT_MUSIC_RELATIONSHIP_TYPE_TEXTONLY":         1,
		"TEXT_MUSIC_RELATIONSHIP_TYPE_SAMECREATION":     2,
		"TEXT_MUSIC_RELATIONSHIP_TYPE_SEPARATECREATION": 3,
		"TEXT_MUSIC_RELATIONSHIP_TYPE_MUSICONLY":        4,
	}
)

func (x TextMusicRelationshipType) Enum() *TextMusicRelationshipType {
	p := new(TextMusicRelationshipType)
	*p = x
	return p
}

func (x TextMusicRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextMusicRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[222].Descriptor()
}

func (TextMusicRelationshipType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[222]
}

func (x TextMusicRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextMusicRelationshipType.Descriptor instead.
func (TextMusicRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{222}
}

type TextType int32

const (
	TextType_TEXT_TYPE_UNSPECIFIED           TextType = 0
	TextType_TEXT_TYPE_CAPTION               TextType = 1
	TextType_TEXT_TYPE_CLOSEDCAPTION         TextType = 2
	TextType_TEXT_TYPE_EBOOK                 TextType = 3
	TextType_TEXT_TYPE_LINERNOTES            TextType = 4
	TextType_TEXT_TYPE_LYRICTEXT             TextType = 5
	TextType_TEXT_TYPE_NONINTERACTIVEBOOKLET TextType = 6
	TextType_TEXT_TYPE_SUBTITLE              TextType = 7
	TextType_TEXT_TYPE_TEXTDOCUMENT          TextType = 8
	TextType_TEXT_TYPE_UNKNOWN               TextType = 9
	TextType_TEXT_TYPE_USERDEFINED           TextType = 10
)

// Enum value maps for TextType.
var (
	TextType_name = map[int32]string{
		0:  "TEXT_TYPE_UNSPECIFIED",
		1:  "TEXT_TYPE_CAPTION",
		2:  "TEXT_TYPE_CLOSEDCAPTION",
		3:  "TEXT_TYPE_EBOOK",
		4:  "TEXT_TYPE_LINERNOTES",
		5:  "TEXT_TYPE_LYRICTEXT",
		6:  "TEXT_TYPE_NONINTERACTIVEBOOKLET",
		7:  "TEXT_TYPE_SUBTITLE",
		8:  "TEXT_TYPE_TEXTDOCUMENT",
		9:  "TEXT_TYPE_UNKNOWN",
		10: "TEXT_TYPE_USERDEFINED",
	}
	TextType_value = map[string]int32{
		"TEXT_TYPE_UNSPECIFIED":           0,
		"TEXT_TYPE_CAPTION":               1,
		"TEXT_TYPE_CLOSEDCAPTION":         2,
		"TEXT_TYPE_EBOOK":                 3,
		"TEXT_TYPE_LINERNOTES":            4,
		"TEXT_TYPE_LYRICTEXT":             5,
		"TEXT_TYPE_NONINTERACTIVEBOOKLET": 6,
		"TEXT_TYPE_SUBTITLE":              7,
		"TEXT_TYPE_TEXTDOCUMENT":          8,
		"TEXT_TYPE_UNKNOWN":               9,
		"TEXT_TYPE_USERDEFINED":           10,
	}
)

func (x TextType) Enum() *TextType {
	p := new(TextType)
	*p = x
	return p
}

func (x TextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[223].Descriptor()
}

func (TextType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[223]
}

func (x TextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextType.Descriptor instead.
func (TextType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{223}
}

type TextTypeATOM int32

const (
	TextTypeATOM_TEXT_TYPE_A_T_O_M_UNSPECIFIED TextTypeATOM = 0
	TextTypeATOM_TEXT_TYPE_A_T_O_M_TEXT        TextTypeATOM = 1
	TextTypeATOM_TEXT_TYPE_A_T_O_M_HTML        TextTypeATOM = 2
	TextTypeATOM_TEXT_TYPE_A_T_O_M_XHTML       TextTypeATOM = 3
)

// Enum value maps for TextTypeATOM.
var (
	TextTypeATOM_name = map[int32]string{
		0: "TEXT_TYPE_A_T_O_M_UNSPECIFIED",
		1: "TEXT_TYPE_A_T_O_M_TEXT",
		2: "TEXT_TYPE_A_T_O_M_HTML",
		3: "TEXT_TYPE_A_T_O_M_XHTML",
	}
	TextTypeATOM_value = map[string]int32{
		"TEXT_TYPE_A_T_O_M_UNSPECIFIED": 0,
		"TEXT_TYPE_A_T_O_M_TEXT":        1,
		"TEXT_TYPE_A_T_O_M_HTML":        2,
		"TEXT_TYPE_A_T_O_M_XHTML":       3,
	}
)

func (x TextTypeATOM) Enum() *TextTypeATOM {
	p := new(TextTypeATOM)
	*p = x
	return p
}

func (x TextTypeATOM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextTypeATOM) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[224].Descriptor()
}

func (TextTypeATOM) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[224]
}

func (x TextTypeATOM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextTypeATOM.Descriptor instead.
func (TextTypeATOM) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{224}
}

type ThemeType int32

const (
	ThemeType_THEME_TYPE_UNSPECIFIED  ThemeType = 0
	ThemeType_THEME_TYPE_CLOSINGTHEME ThemeType = 1
	ThemeType_THEME_TYPE_MAINTHEME    ThemeType = 2
	ThemeType_THEME_TYPE_OPENINGTHEME ThemeType = 3
	ThemeType_THEME_TYPE_SEGMENTTHEME ThemeType = 4
	ThemeType_THEME_TYPE_TITLETHEME   ThemeType = 5
	ThemeType_THEME_TYPE_USERDEFINED  ThemeType = 6
)

// Enum value maps for ThemeType.
var (
	ThemeType_name = map[int32]string{
		0: "THEME_TYPE_UNSPECIFIED",
		1: "THEME_TYPE_CLOSINGTHEME",
		2: "THEME_TYPE_MAINTHEME",
		3: "THEME_TYPE_OPENINGTHEME",
		4: "THEME_TYPE_SEGMENTTHEME",
		5: "THEME_TYPE_TITLETHEME",
		6: "THEME_TYPE_USERDEFINED",
	}
	ThemeType_value = map[string]int32{
		"THEME_TYPE_UNSPECIFIED":  0,
		"THEME_TYPE_CLOSINGTHEME": 1,
		"THEME_TYPE_MAINTHEME":    2,
		"THEME_TYPE_OPENINGTHEME": 3,
		"THEME_TYPE_SEGMENTTHEME": 4,
		"THEME_TYPE_TITLETHEME":   5,
		"THEME_TYPE_USERDEFINED":  6,
	}
)

func (x ThemeType) Enum() *ThemeType {
	p := new(ThemeType)
	*p = x
	return p
}

func (x ThemeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThemeType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[225].Descriptor()
}

func (ThemeType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[225]
}

func (x ThemeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThemeType.Descriptor instead.
func (ThemeType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{225}
}

type TimecodeType int32

const (
	TimecodeType_TIMECODE_TYPE_UNSPECIFIED TimecodeType = 0
	TimecodeType_TIMECODE_TYPE_FSK         TimecodeType = 1
	TimecodeType_TIMECODE_TYPE_MIDI        TimecodeType = 2
	TimecodeType_TIMECODE_TYPE_SMPTE       TimecodeType = 3
	TimecodeType_TIMECODE_TYPE_VITC        TimecodeType = 4
)

// Enum value maps for TimecodeType.
var (
	TimecodeType_name = map[int32]string{
		0: "TIMECODE_TYPE_UNSPECIFIED",
		1: "TIMECODE_TYPE_FSK",
		2: "TIMECODE_TYPE_MIDI",
		3: "TIMECODE_TYPE_SMPTE",
		4: "TIMECODE_TYPE_VITC",
	}
	TimecodeType_value = map[string]int32{
		"TIMECODE_TYPE_UNSPECIFIED": 0,
		"TIMECODE_TYPE_FSK":         1,
		"TIMECODE_TYPE_MIDI":        2,
		"TIMECODE_TYPE_SMPTE":       3,
		"TIMECODE_TYPE_VITC":        4,
	}
)

func (x TimecodeType) Enum() *TimecodeType {
	p := new(TimecodeType)
	*p = x
	return p
}

func (x TimecodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimecodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[226].Descriptor()
}

func (TimecodeType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[226]
}

func (x TimecodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimecodeType.Descriptor instead.
func (TimecodeType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{226}
}

type TisTerritoryCode int32

const (
	TisTerritoryCode_TIS_TERRITORY_CODE_UNSPECIFIED TisTerritoryCode = 0
	TisTerritoryCode_TIS_TERRITORY_CODE_E_4         TisTerritoryCode = 1
	TisTerritoryCode_TIS_TERRITORY_CODE_E_8         TisTerritoryCode = 2
	TisTerritoryCode_TIS_TERRITORY_CODE_E_12        TisTerritoryCode = 3
	TisTerritoryCode_TIS_TERRITORY_CODE_E_20        TisTerritoryCode = 4
	TisTerritoryCode_TIS_TERRITORY_CODE_E_24        TisTerritoryCode = 5
	TisTerritoryCode_TIS_TERRITORY_CODE_E_28        TisTerritoryCode = 6
	TisTerritoryCode_TIS_TERRITORY_CODE_E_31        TisTerritoryCode = 7
	TisTerritoryCode_TIS_TERRITORY_CODE_E_32        TisTerritoryCode = 8
	TisTerritoryCode_TIS_TERRITORY_CODE_E_36        TisTerritoryCode = 9
	TisTerritoryCode_TIS_TERRITORY_CODE_E_40        TisTerritoryCode = 10
	TisTerritoryCode_TIS_TERRITORY_CODE_E_44        TisTerritoryCode = 11
	TisTerritoryCode_TIS_TERRITORY_CODE_E_48        TisTerritoryCode = 12
	TisTerritoryCode_TIS_TERRITORY_CODE_E_50        TisTerritoryCode = 13
	TisTerritoryCode_TIS_TERRITORY_CODE_E_51        TisTerritoryCode = 14
	TisTerritoryCode_TIS_TERRITORY_CODE_E_52        TisTerritoryCode = 15
	TisTerritoryCode_TIS_TERRITORY_CODE_E_56        TisTerritoryCode = 16
	TisTerritoryCode_TIS_TERRITORY_CODE_E_64        TisTerritoryCode = 17
	TisTerritoryCode_TIS_TERRITORY_CODE_E_68        TisTerritoryCode = 18
	TisTerritoryCode_TIS_TERRITORY_CODE_E_70        TisTerritoryCode = 19
	TisTerritoryCode_TIS_TERRITORY_CODE_E_72        TisTerritoryCode = 20
	TisTerritoryCode_TIS_TERRITORY_CODE_E_76        TisTerritoryCode = 21
	TisTerritoryCode_TIS_TERRITORY_CODE_E_84        TisTerritoryCode = 22
	TisTerritoryCode_TIS_TERRITORY_CODE_E_90        TisTerritoryCode = 23
	TisTerritoryCode_TIS_TERRITORY_CODE_E_96        TisTerritoryCode = 24
	TisTerritoryCode_TIS_TERRITORY_CODE_E_100       TisTerritoryCode = 25
	TisTerritoryCode_TIS_TERRITORY_CODE_E_104       TisTerritoryCode = 26
	TisTerritoryCode_TIS_TERRITORY_CODE_E_108       TisTerritoryCode = 27
	TisTerritoryCode_TIS_TERRITORY_CODE_E_112       TisTerritoryCode = 28
	TisTerritoryCode_TIS_TERRITORY_CODE_E_116       TisTerritoryCode = 29
	TisTerritoryCode_TIS_TERRITORY_CODE_E_120       TisTerritoryCode = 30
	TisTerritoryCode_TIS_TERRITORY_CODE_E_124       TisTerritoryCode = 31
	TisTerritoryCode_TIS_TERRITORY_CODE_E_132       TisTerritoryCode = 32
	TisTerritoryCode_TIS_TERRITORY_CODE_E_140       TisTerritoryCode = 33
	TisTerritoryCode_TIS_TERRITORY_CODE_E_144       TisTerritoryCode = 34
	TisTerritoryCode_TIS_TERRITORY_CODE_E_148       TisTerritoryCode = 35
	TisTerritoryCode_TIS_TERRITORY_CODE_E_152       TisTerritoryCode = 36
	TisTerritoryCode_TIS_TERRITORY_CODE_E_156       TisTerritoryCode = 37
	TisTerritoryCode_TIS_TERRITORY_CODE_E_158       TisTerritoryCode = 38
	TisTerritoryCode_TIS_TERRITORY_CODE_E_170       TisTerritoryCode = 39
	TisTerritoryCode_TIS_TERRITORY_CODE_E_174       TisTerritoryCode = 40
	TisTerritoryCode_TIS_TERRITORY_CODE_E_178       TisTerritoryCode = 41
	TisTerritoryCode_TIS_TERRITORY_CODE_E_180       TisTerritoryCode = 42
	TisTerritoryCode_TIS_TERRITORY_CODE_E_188       TisTerritoryCode = 43
	TisTerritoryCode_TIS_TERRITORY_CODE_E_191       TisTerritoryCode = 44
	TisTerritoryCode_TIS_TERRITORY_CODE_E_192       TisTerritoryCode = 45
	TisTerritoryCode_TIS_TERRITORY_CODE_E_196       TisTerritoryCode = 46
	TisTerritoryCode_TIS_TERRITORY_CODE_E_200       TisTerritoryCode = 47
	TisTerritoryCode_TIS_TERRITORY_CODE_E_203       TisTerritoryCode = 48
	TisTerritoryCode_TIS_TERRITORY_CODE_E_204       TisTerritoryCode = 49
	TisTerritoryCode_TIS_TERRITORY_CODE_E_208       TisTerritoryCode = 50
	TisTerritoryCode_TIS_TERRITORY_CODE_E_212       TisTerritoryCode = 51
	TisTerritoryCode_TIS_TERRITORY_CODE_E_214       TisTerritoryCode = 52
	TisTerritoryCode_TIS_TERRITORY_CODE_E_218       TisTerritoryCode = 53
	TisTerritoryCode_TIS_TERRITORY_CODE_E_222       TisTerritoryCode = 54
	TisTerritoryCode_TIS_TERRITORY_CODE_E_226       TisTerritoryCode = 55
	TisTerritoryCode_TIS_TERRITORY_CODE_E_230       TisTerritoryCode = 56
	TisTerritoryCode_TIS_TERRITORY_CODE_E_231       TisTerritoryCode = 57
	TisTerritoryCode_TIS_TERRITORY_CODE_E_232       TisTerritoryCode = 58
	TisTerritoryCode_TIS_TERRITORY_CODE_E_233       TisTerritoryCode = 59
	TisTerritoryCode_TIS_TERRITORY_CODE_E_242       TisTerritoryCode = 60
	TisTerritoryCode_TIS_TERRITORY_CODE_E_246       TisTerritoryCode = 61
	TisTerritoryCode_TIS_TERRITORY_CODE_E_250       TisTerritoryCode = 62
	TisTerritoryCode_TIS_TERRITORY_CODE_E_258       TisTerritoryCode = 63
	TisTerritoryCode_TIS_TERRITORY_CODE_E_262       TisTerritoryCode = 64
	TisTerritoryCode_TIS_TERRITORY_CODE_E_266       TisTerritoryCode = 65
	TisTerritoryCode_TIS_TERRITORY_CODE_E_268       TisTerritoryCode = 66
	TisTerritoryCode_TIS_TERRITORY_CODE_E_270       TisTerritoryCode = 67
	TisTerritoryCode_TIS_TERRITORY_CODE_E_276       TisTerritoryCode = 68
	TisTerritoryCode_TIS_TERRITORY_CODE_E_278       TisTerritoryCode = 69
	TisTerritoryCode_TIS_TERRITORY_CODE_E_280       TisTerritoryCode = 70
	TisTerritoryCode_TIS_TERRITORY_CODE_E_288       TisTerritoryCode = 71
	TisTerritoryCode_TIS_TERRITORY_CODE_E_296       TisTerritoryCode = 72
	TisTerritoryCode_TIS_TERRITORY_CODE_E_300       TisTerritoryCode = 73
	TisTerritoryCode_TIS_TERRITORY_CODE_E_308       TisTerritoryCode = 74
	TisTerritoryCode_TIS_TERRITORY_CODE_E_320       TisTerritoryCode = 75
	TisTerritoryCode_TIS_TERRITORY_CODE_E_324       TisTerritoryCode = 76
	TisTerritoryCode_TIS_TERRITORY_CODE_E_328       TisTerritoryCode = 77
	TisTerritoryCode_TIS_TERRITORY_CODE_E_332       TisTerritoryCode = 78
	TisTerritoryCode_TIS_TERRITORY_CODE_E_336       TisTerritoryCode = 79
	TisTerritoryCode_TIS_TERRITORY_CODE_E_340       TisTerritoryCode = 80
	TisTerritoryCode_TIS_TERRITORY_CODE_E_344       TisTerritoryCode = 81
	TisTerritoryCode_TIS_TERRITORY_CODE_E_348       TisTerritoryCode = 82
	TisTerritoryCode_TIS_TERRITORY_CODE_E_352       TisTerritoryCode = 83
	TisTerritoryCode_TIS_TERRITORY_CODE_E_356       TisTerritoryCode = 84
	TisTerritoryCode_TIS_TERRITORY_CODE_E_360       TisTerritoryCode = 85
	TisTerritoryCode_TIS_TERRITORY_CODE_E_364       TisTerritoryCode = 86
	TisTerritoryCode_TIS_TERRITORY_CODE_E_368       TisTerritoryCode = 87
	TisTerritoryCode_TIS_TERRITORY_CODE_E_372       TisTerritoryCode = 88
	TisTerritoryCode_TIS_TERRITORY_CODE_E_376       TisTerritoryCode = 89
	TisTerritoryCode_TIS_TERRITORY_CODE_E_380       TisTerritoryCode = 90
	TisTerritoryCode_TIS_TERRITORY_CODE_E_384       TisTerritoryCode = 91
	TisTerritoryCode_TIS_TERRITORY_CODE_E_388       TisTerritoryCode = 92
	TisTerritoryCode_TIS_TERRITORY_CODE_E_392       TisTerritoryCode = 93
	TisTerritoryCode_TIS_TERRITORY_CODE_E_398       TisTerritoryCode = 94
	TisTerritoryCode_TIS_TERRITORY_CODE_E_400       TisTerritoryCode = 95
	TisTerritoryCode_TIS_TERRITORY_CODE_E_404       TisTerritoryCode = 96
	TisTerritoryCode_TIS_TERRITORY_CODE_E_408       TisTerritoryCode = 97
	TisTerritoryCode_TIS_TERRITORY_CODE_E_410       TisTerritoryCode = 98
	TisTerritoryCode_TIS_TERRITORY_CODE_E_414       TisTerritoryCode = 99
	TisTerritoryCode_TIS_TERRITORY_CODE_E_417       TisTerritoryCode = 100
	TisTerritoryCode_TIS_TERRITORY_CODE_E_418       TisTerritoryCode = 101
	TisTerritoryCode_TIS_TERRITORY_CODE_E_422       TisTerritoryCode = 102
	TisTerritoryCode_TIS_TERRITORY_CODE_E_426       TisTerritoryCode = 103
	TisTerritoryCode_TIS_TERRITORY_CODE_E_428       TisTerritoryCode = 104
	TisTerritoryCode_TIS_TERRITORY_CODE_E_430       TisTerritoryCode = 105
	TisTerritoryCode_TIS_TERRITORY_CODE_E_434       TisTerritoryCode = 106
	TisTerritoryCode_TIS_TERRITORY_CODE_E_438       TisTerritoryCode = 107
	TisTerritoryCode_TIS_TERRITORY_CODE_E_440       TisTerritoryCode = 108
	TisTerritoryCode_TIS_TERRITORY_CODE_E_442       TisTerritoryCode = 109
	TisTerritoryCode_TIS_TERRITORY_CODE_E_446       TisTerritoryCode = 110
	TisTerritoryCode_TIS_TERRITORY_CODE_E_450       TisTerritoryCode = 111
	TisTerritoryCode_TIS_TERRITORY_CODE_E_454       TisTerritoryCode = 112
	TisTerritoryCode_TIS_TERRITORY_CODE_E_458       TisTerritoryCode = 113
	TisTerritoryCode_TIS_TERRITORY_CODE_E_462       TisTerritoryCode = 114
	TisTerritoryCode_TIS_TERRITORY_CODE_E_466       TisTerritoryCode = 115
	TisTerritoryCode_TIS_TERRITORY_CODE_E_470       TisTerritoryCode = 116
	TisTerritoryCode_TIS_TERRITORY_CODE_E_478       TisTerritoryCode = 117
	TisTerritoryCode_TIS_TERRITORY_CODE_E_480       TisTerritoryCode = 118
	TisTerritoryCode_TIS_TERRITORY_CODE_E_484       TisTerritoryCode = 119
	TisTerritoryCode_TIS_TERRITORY_CODE_E_492       TisTerritoryCode = 120
	TisTerritoryCode_TIS_TERRITORY_CODE_E_496       TisTerritoryCode = 121
	TisTerritoryCode_TIS_TERRITORY_CODE_E_498       TisTerritoryCode = 122
	TisTerritoryCode_TIS_TERRITORY_CODE_E_499       TisTerritoryCode = 123
	TisTerritoryCode_TIS_TERRITORY_CODE_E_504       TisTerritoryCode = 124
	TisTerritoryCode_TIS_TERRITORY_CODE_E_508       TisTerritoryCode = 125
	TisTerritoryCode_TIS_TERRITORY_CODE_E_512       TisTerritoryCode = 126
	TisTerritoryCode_TIS_TERRITORY_CODE_E_516       TisTerritoryCode = 127
	TisTerritoryCode_TIS_TERRITORY_CODE_E_520       TisTerritoryCode = 128
	TisTerritoryCode_TIS_TERRITORY_CODE_E_524       TisTerritoryCode = 129
	TisTerritoryCode_TIS_TERRITORY_CODE_E_528       TisTerritoryCode = 130
	TisTerritoryCode_TIS_TERRITORY_CODE_E_540       TisTerritoryCode = 131
	TisTerritoryCode_TIS_TERRITORY_CODE_E_548       TisTerritoryCode = 132
	TisTerritoryCode_TIS_TERRITORY_CODE_E_554       TisTerritoryCode = 133
	TisTerritoryCode_TIS_TERRITORY_CODE_E_558       TisTerritoryCode = 134
	TisTerritoryCode_TIS_TERRITORY_CODE_E_562       TisTerritoryCode = 135
	TisTerritoryCode_TIS_TERRITORY_CODE_E_566       TisTerritoryCode = 136
	TisTerritoryCode_TIS_TERRITORY_CODE_E_578       TisTerritoryCode = 137
	TisTerritoryCode_TIS_TERRITORY_CODE_E_583       TisTerritoryCode = 138
	TisTerritoryCode_TIS_TERRITORY_CODE_E_584       TisTerritoryCode = 139
	TisTerritoryCode_TIS_TERRITORY_CODE_E_585       TisTerritoryCode = 140
	TisTerritoryCode_TIS_TERRITORY_CODE_E_586       TisTerritoryCode = 141
	TisTerritoryCode_TIS_TERRITORY_CODE_E_591       TisTerritoryCode = 142
	TisTerritoryCode_TIS_TERRITORY_CODE_E_598       TisTerritoryCode = 143
	TisTerritoryCode_TIS_TERRITORY_CODE_E_600       TisTerritoryCode = 144
	TisTerritoryCode_TIS_TERRITORY_CODE_E_604       TisTerritoryCode = 145
	TisTerritoryCode_TIS_TERRITORY_CODE_E_608       TisTerritoryCode = 146
	TisTerritoryCode_TIS_TERRITORY_CODE_E_616       TisTerritoryCode = 147
	TisTerritoryCode_TIS_TERRITORY_CODE_E_620       TisTerritoryCode = 148
	TisTerritoryCode_TIS_TERRITORY_CODE_E_624       TisTerritoryCode = 149
	TisTerritoryCode_TIS_TERRITORY_CODE_E_626       TisTerritoryCode = 150
	TisTerritoryCode_TIS_TERRITORY_CODE_E_630       TisTerritoryCode = 151
	TisTerritoryCode_TIS_TERRITORY_CODE_E_634       TisTerritoryCode = 152
	TisTerritoryCode_TIS_TERRITORY_CODE_E_642       TisTerritoryCode = 153
	TisTerritoryCode_TIS_TERRITORY_CODE_E_643       TisTerritoryCode = 154
	TisTerritoryCode_TIS_TERRITORY_CODE_E_646       TisTerritoryCode = 155
	TisTerritoryCode_TIS_TERRITORY_CODE_E_659       TisTerritoryCode = 156
	TisTerritoryCode_TIS_TERRITORY_CODE_E_662       TisTerritoryCode = 157
	TisTerritoryCode_TIS_TERRITORY_CODE_E_670       TisTerritoryCode = 158
	TisTerritoryCode_TIS_TERRITORY_CODE_E_674       TisTerritoryCode = 159
	TisTerritoryCode_TIS_TERRITORY_CODE_E_678       TisTerritoryCode = 160
	TisTerritoryCode_TIS_TERRITORY_CODE_E_682       TisTerritoryCode = 161
	TisTerritoryCode_TIS_TERRITORY_CODE_E_686       TisTerritoryCode = 162
	TisTerritoryCode_TIS_TERRITORY_CODE_E_688       TisTerritoryCode = 163
	TisTerritoryCode_TIS_TERRITORY_CODE_E_690       TisTerritoryCode = 164
	TisTerritoryCode_TIS_TERRITORY_CODE_E_694       TisTerritoryCode = 165
	TisTerritoryCode_TIS_TERRITORY_CODE_E_702       TisTerritoryCode = 166
	TisTerritoryCode_TIS_TERRITORY_CODE_E_703       TisTerritoryCode = 167
	TisTerritoryCode_TIS_TERRITORY_CODE_E_704       TisTerritoryCode = 168
	TisTerritoryCode_TIS_TERRITORY_CODE_E_705       TisTerritoryCode = 169
	TisTerritoryCode_TIS_TERRITORY_CODE_E_706       TisTerritoryCode = 170
	TisTerritoryCode_TIS_TERRITORY_CODE_E_710       TisTerritoryCode = 171
	TisTerritoryCode_TIS_TERRITORY_CODE_E_716       TisTerritoryCode = 172
	TisTerritoryCode_TIS_TERRITORY_CODE_E_720       TisTerritoryCode = 173
	TisTerritoryCode_TIS_TERRITORY_CODE_E_724       TisTerritoryCode = 174
	TisTerritoryCode_TIS_TERRITORY_CODE_E_728       TisTerritoryCode = 175
	TisTerritoryCode_TIS_TERRITORY_CODE_E_729       TisTerritoryCode = 176
	TisTerritoryCode_TIS_TERRITORY_CODE_E_732       TisTerritoryCode = 177
	TisTerritoryCode_TIS_TERRITORY_CODE_E_736       TisTerritoryCode = 178
	TisTerritoryCode_TIS_TERRITORY_CODE_E_740       TisTerritoryCode = 179
	TisTerritoryCode_TIS_TERRITORY_CODE_E_748       TisTerritoryCode = 180
	TisTerritoryCode_TIS_TERRITORY_CODE_E_752       TisTerritoryCode = 181
	TisTerritoryCode_TIS_TERRITORY_CODE_E_756       TisTerritoryCode = 182
	TisTerritoryCode_TIS_TERRITORY_CODE_E_760       TisTerritoryCode = 183
	TisTerritoryCode_TIS_TERRITORY_CODE_E_762       TisTerritoryCode = 184
	TisTerritoryCode_TIS_TERRITORY_CODE_E_764       TisTerritoryCode = 185
	TisTerritoryCode_TIS_TERRITORY_CODE_E_768       TisTerritoryCode = 186
	TisTerritoryCode_TIS_TERRITORY_CODE_E_776       TisTerritoryCode = 187
	TisTerritoryCode_TIS_TERRITORY_CODE_E_780       TisTerritoryCode = 188
	TisTerritoryCode_TIS_TERRITORY_CODE_E_784       TisTerritoryCode = 189
	TisTerritoryCode_TIS_TERRITORY_CODE_E_788       TisTerritoryCode = 190
	TisTerritoryCode_TIS_TERRITORY_CODE_E_792       TisTerritoryCode = 191
	TisTerritoryCode_TIS_TERRITORY_CODE_E_795       TisTerritoryCode = 192
	TisTerritoryCode_TIS_TERRITORY_CODE_E_798       TisTerritoryCode = 193
	TisTerritoryCode_TIS_TERRITORY_CODE_E_800       TisTerritoryCode = 194
	TisTerritoryCode_TIS_TERRITORY_CODE_E_804       TisTerritoryCode = 195
	TisTerritoryCode_TIS_TERRITORY_CODE_E_807       TisTerritoryCode = 196
	TisTerritoryCode_TIS_TERRITORY_CODE_E_810       TisTerritoryCode = 197
	TisTerritoryCode_TIS_TERRITORY_CODE_E_818       TisTerritoryCode = 198
	TisTerritoryCode_TIS_TERRITORY_CODE_E_826       TisTerritoryCode = 199
	TisTerritoryCode_TIS_TERRITORY_CODE_E_834       TisTerritoryCode = 200
	TisTerritoryCode_TIS_TERRITORY_CODE_E_840       TisTerritoryCode = 201
	TisTerritoryCode_TIS_TERRITORY_CODE_E_854       TisTerritoryCode = 202
	TisTerritoryCode_TIS_TERRITORY_CODE_E_858       TisTerritoryCode = 203
	TisTerritoryCode_TIS_TERRITORY_CODE_E_860       TisTerritoryCode = 204
	TisTerritoryCode_TIS_TERRITORY_CODE_E_862       TisTerritoryCode = 205
	TisTerritoryCode_TIS_TERRITORY_CODE_E_882       TisTerritoryCode = 206
	TisTerritoryCode_TIS_TERRITORY_CODE_E_886       TisTerritoryCode = 207
	TisTerritoryCode_TIS_TERRITORY_CODE_E_887       TisTerritoryCode = 208
	TisTerritoryCode_TIS_TERRITORY_CODE_E_890       TisTerritoryCode = 209
	TisTerritoryCode_TIS_TERRITORY_CODE_E_891       TisTerritoryCode = 210
	TisTerritoryCode_TIS_TERRITORY_CODE_E_894       TisTerritoryCode = 211
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2100      TisTerritoryCode = 212
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2101      TisTerritoryCode = 213
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2102      TisTerritoryCode = 214
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2103      TisTerritoryCode = 215
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2104      TisTerritoryCode = 216
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2105      TisTerritoryCode = 217
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2106      TisTerritoryCode = 218
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2107      TisTerritoryCode = 219
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2108      TisTerritoryCode = 220
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2109      TisTerritoryCode = 221
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2110      TisTerritoryCode = 222
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2111      TisTerritoryCode = 223
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2112      TisTerritoryCode = 224
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2113      TisTerritoryCode = 225
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2114      TisTerritoryCode = 226
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2115      TisTerritoryCode = 227
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2116      TisTerritoryCode = 228
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2117      TisTerritoryCode = 229
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2118      TisTerritoryCode = 230
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2119      TisTerritoryCode = 231
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2120      TisTerritoryCode = 232
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2121      TisTerritoryCode = 233
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2122      TisTerritoryCode = 234
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2123      TisTerritoryCode = 235
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2124      TisTerritoryCode = 236
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2125      TisTerritoryCode = 237
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2126      TisTerritoryCode = 238
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2127      TisTerritoryCode = 239
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2128      TisTerritoryCode = 240
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2129      TisTerritoryCode = 241
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2130      TisTerritoryCode = 242
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2131      TisTerritoryCode = 243
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2132      TisTerritoryCode = 244
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2133      TisTerritoryCode = 245
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2134      TisTerritoryCode = 246
	TisTerritoryCode_TIS_TERRITORY_CODE_E_2136      TisTerritoryCode = 247
)

// Enum value maps for TisTerritoryCode.
var (
	TisTerritoryCode_name = map[int32]string{
		0:   "TIS_TERRITORY_CODE_UNSPECIFIED",
		1:   "TIS_TERRITORY_CODE_E_4",
		2:   "TIS_TERRITORY_CODE_E_8",
		3:   "TIS_TERRITORY_CODE_E_12",
		4:   "TIS_TERRITORY_CODE_E_20",
		5:   "TIS_TERRITORY_CODE_E_24",
		6:   "TIS_TERRITORY_CODE_E_28",
		7:   "TIS_TERRITORY_CODE_E_31",
		8:   "TIS_TERRITORY_CODE_E_32",
		9:   "TIS_TERRITORY_CODE_E_36",
		10:  "TIS_TERRITORY_CODE_E_40",
		11:  "TIS_TERRITORY_CODE_E_44",
		12:  "TIS_TERRITORY_CODE_E_48",
		13:  "TIS_TERRITORY_CODE_E_50",
		14:  "TIS_TERRITORY_CODE_E_51",
		15:  "TIS_TERRITORY_CODE_E_52",
		16:  "TIS_TERRITORY_CODE_E_56",
		17:  "TIS_TERRITORY_CODE_E_64",
		18:  "TIS_TERRITORY_CODE_E_68",
		19:  "TIS_TERRITORY_CODE_E_70",
		20:  "TIS_TERRITORY_CODE_E_72",
		21:  "TIS_TERRITORY_CODE_E_76",
		22:  "TIS_TERRITORY_CODE_E_84",
		23:  "TIS_TERRITORY_CODE_E_90",
		24:  "TIS_TERRITORY_CODE_E_96",
		25:  "TIS_TERRITORY_CODE_E_100",
		26:  "TIS_TERRITORY_CODE_E_104",
		27:  "TIS_TERRITORY_CODE_E_108",
		28:  "TIS_TERRITORY_CODE_E_112",
		29:  "TIS_TERRITORY_CODE_E_116",
		30:  "TIS_TERRITORY_CODE_E_120",
		31:  "TIS_TERRITORY_CODE_E_124",
		32:  "TIS_TERRITORY_CODE_E_132",
		33:  "TIS_TERRITORY_CODE_E_140",
		34:  "TIS_TERRITORY_CODE_E_144",
		35:  "TIS_TERRITORY_CODE_E_148",
		36:  "TIS_TERRITORY_CODE_E_152",
		37:  "TIS_TERRITORY_CODE_E_156",
		38:  "TIS_TERRITORY_CODE_E_158",
		39:  "TIS_TERRITORY_CODE_E_170",
		40:  "TIS_TERRITORY_CODE_E_174",
		41:  "TIS_TERRITORY_CODE_E_178",
		42:  "TIS_TERRITORY_CODE_E_180",
		43:  "TIS_TERRITORY_CODE_E_188",
		44:  "TIS_TERRITORY_CODE_E_191",
		45:  "TIS_TERRITORY_CODE_E_192",
		46:  "TIS_TERRITORY_CODE_E_196",
		47:  "TIS_TERRITORY_CODE_E_200",
		48:  "TIS_TERRITORY_CODE_E_203",
		49:  "TIS_TERRITORY_CODE_E_204",
		50:  "TIS_TERRITORY_CODE_E_208",
		51:  "TIS_TERRITORY_CODE_E_212",
		52:  "TIS_TERRITORY_CODE_E_214",
		53:  "TIS_TERRITORY_CODE_E_218",
		54:  "TIS_TERRITORY_CODE_E_222",
		55:  "TIS_TERRITORY_CODE_E_226",
		56:  "TIS_TERRITORY_CODE_E_230",
		57:  "TIS_TERRITORY_CODE_E_231",
		58:  "TIS_TERRITORY_CODE_E_232",
		59:  "TIS_TERRITORY_CODE_E_233",
		60:  "TIS_TERRITORY_CODE_E_242",
		61:  "TIS_TERRITORY_CODE_E_246",
		62:  "TIS_TERRITORY_CODE_E_250",
		63:  "TIS_TERRITORY_CODE_E_258",
		64:  "TIS_TERRITORY_CODE_E_262",
		65:  "TIS_TERRITORY_CODE_E_266",
		66:  "TIS_TERRITORY_CODE_E_268",
		67:  "TIS_TERRITORY_CODE_E_270",
		68:  "TIS_TERRITORY_CODE_E_276",
		69:  "TIS_TERRITORY_CODE_E_278",
		70:  "TIS_TERRITORY_CODE_E_280",
		71:  "TIS_TERRITORY_CODE_E_288",
		72:  "TIS_TERRITORY_CODE_E_296",
		73:  "TIS_TERRITORY_CODE_E_300",
		74:  "TIS_TERRITORY_CODE_E_308",
		75:  "TIS_TERRITORY_CODE_E_320",
		76:  "TIS_TERRITORY_CODE_E_324",
		77:  "TIS_TERRITORY_CODE_E_328",
		78:  "TIS_TERRITORY_CODE_E_332",
		79:  "TIS_TERRITORY_CODE_E_336",
		80:  "TIS_TERRITORY_CODE_E_340",
		81:  "TIS_TERRITORY_CODE_E_344",
		82:  "TIS_TERRITORY_CODE_E_348",
		83:  "TIS_TERRITORY_CODE_E_352",
		84:  "TIS_TERRITORY_CODE_E_356",
		85:  "TIS_TERRITORY_CODE_E_360",
		86:  "TIS_TERRITORY_CODE_E_364",
		87:  "TIS_TERRITORY_CODE_E_368",
		88:  "TIS_TERRITORY_CODE_E_372",
		89:  "TIS_TERRITORY_CODE_E_376",
		90:  "TIS_TERRITORY_CODE_E_380",
		91:  "TIS_TERRITORY_CODE_E_384",
		92:  "TIS_TERRITORY_CODE_E_388",
		93:  "TIS_TERRITORY_CODE_E_392",
		94:  "TIS_TERRITORY_CODE_E_398",
		95:  "TIS_TERRITORY_CODE_E_400",
		96:  "TIS_TERRITORY_CODE_E_404",
		97:  "TIS_TERRITORY_CODE_E_408",
		98:  "TIS_TERRITORY_CODE_E_410",
		99:  "TIS_TERRITORY_CODE_E_414",
		100: "TIS_TERRITORY_CODE_E_417",
		101: "TIS_TERRITORY_CODE_E_418",
		102: "TIS_TERRITORY_CODE_E_422",
		103: "TIS_TERRITORY_CODE_E_426",
		104: "TIS_TERRITORY_CODE_E_428",
		105: "TIS_TERRITORY_CODE_E_430",
		106: "TIS_TERRITORY_CODE_E_434",
		107: "TIS_TERRITORY_CODE_E_438",
		108: "TIS_TERRITORY_CODE_E_440",
		109: "TIS_TERRITORY_CODE_E_442",
		110: "TIS_TERRITORY_CODE_E_446",
		111: "TIS_TERRITORY_CODE_E_450",
		112: "TIS_TERRITORY_CODE_E_454",
		113: "TIS_TERRITORY_CODE_E_458",
		114: "TIS_TERRITORY_CODE_E_462",
		115: "TIS_TERRITORY_CODE_E_466",
		116: "TIS_TERRITORY_CODE_E_470",
		117: "TIS_TERRITORY_CODE_E_478",
		118: "TIS_TERRITORY_CODE_E_480",
		119: "TIS_TERRITORY_CODE_E_484",
		120: "TIS_TERRITORY_CODE_E_492",
		121: "TIS_TERRITORY_CODE_E_496",
		122: "TIS_TERRITORY_CODE_E_498",
		123: "TIS_TERRITORY_CODE_E_499",
		124: "TIS_TERRITORY_CODE_E_504",
		125: "TIS_TERRITORY_CODE_E_508",
		126: "TIS_TERRITORY_CODE_E_512",
		127: "TIS_TERRITORY_CODE_E_516",
		128: "TIS_TERRITORY_CODE_E_520",
		129: "TIS_TERRITORY_CODE_E_524",
		130: "TIS_TERRITORY_CODE_E_528",
		131: "TIS_TERRITORY_CODE_E_540",
		132: "TIS_TERRITORY_CODE_E_548",
		133: "TIS_TERRITORY_CODE_E_554",
		134: "TIS_TERRITORY_CODE_E_558",
		135: "TIS_TERRITORY_CODE_E_562",
		136: "TIS_TERRITORY_CODE_E_566",
		137: "TIS_TERRITORY_CODE_E_578",
		138: "TIS_TERRITORY_CODE_E_583",
		139: "TIS_TERRITORY_CODE_E_584",
		140: "TIS_TERRITORY_CODE_E_585",
		141: "TIS_TERRITORY_CODE_E_586",
		142: "TIS_TERRITORY_CODE_E_591",
		143: "TIS_TERRITORY_CODE_E_598",
		144: "TIS_TERRITORY_CODE_E_600",
		145: "TIS_TERRITORY_CODE_E_604",
		146: "TIS_TERRITORY_CODE_E_608",
		147: "TIS_TERRITORY_CODE_E_616",
		148: "TIS_TERRITORY_CODE_E_620",
		149: "TIS_TERRITORY_CODE_E_624",
		150: "TIS_TERRITORY_CODE_E_626",
		151: "TIS_TERRITORY_CODE_E_630",
		152: "TIS_TERRITORY_CODE_E_634",
		153: "TIS_TERRITORY_CODE_E_642",
		154: "TIS_TERRITORY_CODE_E_643",
		155: "TIS_TERRITORY_CODE_E_646",
		156: "TIS_TERRITORY_CODE_E_659",
		157: "TIS_TERRITORY_CODE_E_662",
		158: "TIS_TERRITORY_CODE_E_670",
		159: "TIS_TERRITORY_CODE_E_674",
		160: "TIS_TERRITORY_CODE_E_678",
		161: "TIS_TERRITORY_CODE_E_682",
		162: "TIS_TERRITORY_CODE_E_686",
		163: "TIS_TERRITORY_CODE_E_688",
		164: "TIS_TERRITORY_CODE_E_690",
		165: "TIS_TERRITORY_CODE_E_694",
		166: "TIS_TERRITORY_CODE_E_702",
		167: "TIS_TERRITORY_CODE_E_703",
		168: "TIS_TERRITORY_CODE_E_704",
		169: "TIS_TERRITORY_CODE_E_705",
		170: "TIS_TERRITORY_CODE_E_706",
		171: "TIS_TERRITORY_CODE_E_710",
		172: "TIS_TERRITORY_CODE_E_716",
		173: "TIS_TERRITORY_CODE_E_720",
		174: "TIS_TERRITORY_CODE_E_724",
		175: "TIS_TERRITORY_CODE_E_728",
		176: "TIS_TERRITORY_CODE_E_729",
		177: "TIS_TERRITORY_CODE_E_732",
		178: "TIS_TERRITORY_CODE_E_736",
		179: "TIS_TERRITORY_CODE_E_740",
		180: "TIS_TERRITORY_CODE_E_748",
		181: "TIS_TERRITORY_CODE_E_752",
		182: "TIS_TERRITORY_CODE_E_756",
		183: "TIS_TERRITORY_CODE_E_760",
		184: "TIS_TERRITORY_CODE_E_762",
		185: "TIS_TERRITORY_CODE_E_764",
		186: "TIS_TERRITORY_CODE_E_768",
		187: "TIS_TERRITORY_CODE_E_776",
		188: "TIS_TERRITORY_CODE_E_780",
		189: "TIS_TERRITORY_CODE_E_784",
		190: "TIS_TERRITORY_CODE_E_788",
		191: "TIS_TERRITORY_CODE_E_792",
		192: "TIS_TERRITORY_CODE_E_795",
		193: "TIS_TERRITORY_CODE_E_798",
		194: "TIS_TERRITORY_CODE_E_800",
		195: "TIS_TERRITORY_CODE_E_804",
		196: "TIS_TERRITORY_CODE_E_807",
		197: "TIS_TERRITORY_CODE_E_810",
		198: "TIS_TERRITORY_CODE_E_818",
		199: "TIS_TERRITORY_CODE_E_826",
		200: "TIS_TERRITORY_CODE_E_834",
		201: "TIS_TERRITORY_CODE_E_840",
		202: "TIS_TERRITORY_CODE_E_854",
		203: "TIS_TERRITORY_CODE_E_858",
		204: "TIS_TERRITORY_CODE_E_860",
		205: "TIS_TERRITORY_CODE_E_862",
		206: "TIS_TERRITORY_CODE_E_882",
		207: "TIS_TERRITORY_CODE_E_886",
		208: "TIS_TERRITORY_CODE_E_887",
		209: "TIS_TERRITORY_CODE_E_890",
		210: "TIS_TERRITORY_CODE_E_891",
		211: "TIS_TERRITORY_CODE_E_894",
		212: "TIS_TERRITORY_CODE_E_2100",
		213: "TIS_TERRITORY_CODE_E_2101",
		214: "TIS_TERRITORY_CODE_E_2102",
		215: "TIS_TERRITORY_CODE_E_2103",
		216: "TIS_TERRITORY_CODE_E_2104",
		217: "TIS_TERRITORY_CODE_E_2105",
		218: "TIS_TERRITORY_CODE_E_2106",
		219: "TIS_TERRITORY_CODE_E_2107",
		220: "TIS_TERRITORY_CODE_E_2108",
		221: "TIS_TERRITORY_CODE_E_2109",
		222: "TIS_TERRITORY_CODE_E_2110",
		223: "TIS_TERRITORY_CODE_E_2111",
		224: "TIS_TERRITORY_CODE_E_2112",
		225: "TIS_TERRITORY_CODE_E_2113",
		226: "TIS_TERRITORY_CODE_E_2114",
		227: "TIS_TERRITORY_CODE_E_2115",
		228: "TIS_TERRITORY_CODE_E_2116",
		229: "TIS_TERRITORY_CODE_E_2117",
		230: "TIS_TERRITORY_CODE_E_2118",
		231: "TIS_TERRITORY_CODE_E_2119",
		232: "TIS_TERRITORY_CODE_E_2120",
		233: "TIS_TERRITORY_CODE_E_2121",
		234: "TIS_TERRITORY_CODE_E_2122",
		235: "TIS_TERRITORY_CODE_E_2123",
		236: "TIS_TERRITORY_CODE_E_2124",
		237: "TIS_TERRITORY_CODE_E_2125",
		238: "TIS_TERRITORY_CODE_E_2126",
		239: "TIS_TERRITORY_CODE_E_2127",
		240: "TIS_TERRITORY_CODE_E_2128",
		241: "TIS_TERRITORY_CODE_E_2129",
		242: "TIS_TERRITORY_CODE_E_2130",
		243: "TIS_TERRITORY_CODE_E_2131",
		244: "TIS_TERRITORY_CODE_E_2132",
		245: "TIS_TERRITORY_CODE_E_2133",
		246: "TIS_TERRITORY_CODE_E_2134",
		247: "TIS_TERRITORY_CODE_E_2136",
	}
	TisTerritoryCode_value = map[string]int32{
		"TIS_TERRITORY_CODE_UNSPECIFIED": 0,
		"TIS_TERRITORY_CODE_E_4":         1,
		"TIS_TERRITORY_CODE_E_8":         2,
		"TIS_TERRITORY_CODE_E_12":        3,
		"TIS_TERRITORY_CODE_E_20":        4,
		"TIS_TERRITORY_CODE_E_24":        5,
		"TIS_TERRITORY_CODE_E_28":        6,
		"TIS_TERRITORY_CODE_E_31":        7,
		"TIS_TERRITORY_CODE_E_32":        8,
		"TIS_TERRITORY_CODE_E_36":        9,
		"TIS_TERRITORY_CODE_E_40":        10,
		"TIS_TERRITORY_CODE_E_44":        11,
		"TIS_TERRITORY_CODE_E_48":        12,
		"TIS_TERRITORY_CODE_E_50":        13,
		"TIS_TERRITORY_CODE_E_51":        14,
		"TIS_TERRITORY_CODE_E_52":        15,
		"TIS_TERRITORY_CODE_E_56":        16,
		"TIS_TERRITORY_CODE_E_64":        17,
		"TIS_TERRITORY_CODE_E_68":        18,
		"TIS_TERRITORY_CODE_E_70":        19,
		"TIS_TERRITORY_CODE_E_72":        20,
		"TIS_TERRITORY_CODE_E_76":        21,
		"TIS_TERRITORY_CODE_E_84":        22,
		"TIS_TERRITORY_CODE_E_90":        23,
		"TIS_TERRITORY_CODE_E_96":        24,
		"TIS_TERRITORY_CODE_E_100":       25,
		"TIS_TERRITORY_CODE_E_104":       26,
		"TIS_TERRITORY_CODE_E_108":       27,
		"TIS_TERRITORY_CODE_E_112":       28,
		"TIS_TERRITORY_CODE_E_116":       29,
		"TIS_TERRITORY_CODE_E_120":       30,
		"TIS_TERRITORY_CODE_E_124":       31,
		"TIS_TERRITORY_CODE_E_132":       32,
		"TIS_TERRITORY_CODE_E_140":       33,
		"TIS_TERRITORY_CODE_E_144":       34,
		"TIS_TERRITORY_CODE_E_148":       35,
		"TIS_TERRITORY_CODE_E_152":       36,
		"TIS_TERRITORY_CODE_E_156":       37,
		"TIS_TERRITORY_CODE_E_158":       38,
		"TIS_TERRITORY_CODE_E_170":       39,
		"TIS_TERRITORY_CODE_E_174":       40,
		"TIS_TERRITORY_CODE_E_178":       41,
		"TIS_TERRITORY_CODE_E_180":       42,
		"TIS_TERRITORY_CODE_E_188":       43,
		"TIS_TERRITORY_CODE_E_191":       44,
		"TIS_TERRITORY_CODE_E_192":       45,
		"TIS_TERRITORY_CODE_E_196":       46,
		"TIS_TERRITORY_CODE_E_200":       47,
		"TIS_TERRITORY_CODE_E_203":       48,
		"TIS_TERRITORY_CODE_E_204":       49,
		"TIS_TERRITORY_CODE_E_208":       50,
		"TIS_TERRITORY_CODE_E_212":       51,
		"TIS_TERRITORY_CODE_E_214":       52,
		"TIS_TERRITORY_CODE_E_218":       53,
		"TIS_TERRITORY_CODE_E_222":       54,
		"TIS_TERRITORY_CODE_E_226":       55,
		"TIS_TERRITORY_CODE_E_230":       56,
		"TIS_TERRITORY_CODE_E_231":       57,
		"TIS_TERRITORY_CODE_E_232":       58,
		"TIS_TERRITORY_CODE_E_233":       59,
		"TIS_TERRITORY_CODE_E_242":       60,
		"TIS_TERRITORY_CODE_E_246":       61,
		"TIS_TERRITORY_CODE_E_250":       62,
		"TIS_TERRITORY_CODE_E_258":       63,
		"TIS_TERRITORY_CODE_E_262":       64,
		"TIS_TERRITORY_CODE_E_266":       65,
		"TIS_TERRITORY_CODE_E_268":       66,
		"TIS_TERRITORY_CODE_E_270":       67,
		"TIS_TERRITORY_CODE_E_276":       68,
		"TIS_TERRITORY_CODE_E_278":       69,
		"TIS_TERRITORY_CODE_E_280":       70,
		"TIS_TERRITORY_CODE_E_288":       71,
		"TIS_TERRITORY_CODE_E_296":       72,
		"TIS_TERRITORY_CODE_E_300":       73,
		"TIS_TERRITORY_CODE_E_308":       74,
		"TIS_TERRITORY_CODE_E_320":       75,
		"TIS_TERRITORY_CODE_E_324":       76,
		"TIS_TERRITORY_CODE_E_328":       77,
		"TIS_TERRITORY_CODE_E_332":       78,
		"TIS_TERRITORY_CODE_E_336":       79,
		"TIS_TERRITORY_CODE_E_340":       80,
		"TIS_TERRITORY_CODE_E_344":       81,
		"TIS_TERRITORY_CODE_E_348":       82,
		"TIS_TERRITORY_CODE_E_352":       83,
		"TIS_TERRITORY_CODE_E_356":       84,
		"TIS_TERRITORY_CODE_E_360":       85,
		"TIS_TERRITORY_CODE_E_364":       86,
		"TIS_TERRITORY_CODE_E_368":       87,
		"TIS_TERRITORY_CODE_E_372":       88,
		"TIS_TERRITORY_CODE_E_376":       89,
		"TIS_TERRITORY_CODE_E_380":       90,
		"TIS_TERRITORY_CODE_E_384":       91,
		"TIS_TERRITORY_CODE_E_388":       92,
		"TIS_TERRITORY_CODE_E_392":       93,
		"TIS_TERRITORY_CODE_E_398":       94,
		"TIS_TERRITORY_CODE_E_400":       95,
		"TIS_TERRITORY_CODE_E_404":       96,
		"TIS_TERRITORY_CODE_E_408":       97,
		"TIS_TERRITORY_CODE_E_410":       98,
		"TIS_TERRITORY_CODE_E_414":       99,
		"TIS_TERRITORY_CODE_E_417":       100,
		"TIS_TERRITORY_CODE_E_418":       101,
		"TIS_TERRITORY_CODE_E_422":       102,
		"TIS_TERRITORY_CODE_E_426":       103,
		"TIS_TERRITORY_CODE_E_428":       104,
		"TIS_TERRITORY_CODE_E_430":       105,
		"TIS_TERRITORY_CODE_E_434":       106,
		"TIS_TERRITORY_CODE_E_438":       107,
		"TIS_TERRITORY_CODE_E_440":       108,
		"TIS_TERRITORY_CODE_E_442":       109,
		"TIS_TERRITORY_CODE_E_446":       110,
		"TIS_TERRITORY_CODE_E_450":       111,
		"TIS_TERRITORY_CODE_E_454":       112,
		"TIS_TERRITORY_CODE_E_458":       113,
		"TIS_TERRITORY_CODE_E_462":       114,
		"TIS_TERRITORY_CODE_E_466":       115,
		"TIS_TERRITORY_CODE_E_470":       116,
		"TIS_TERRITORY_CODE_E_478":       117,
		"TIS_TERRITORY_CODE_E_480":       118,
		"TIS_TERRITORY_CODE_E_484":       119,
		"TIS_TERRITORY_CODE_E_492":       120,
		"TIS_TERRITORY_CODE_E_496":       121,
		"TIS_TERRITORY_CODE_E_498":       122,
		"TIS_TERRITORY_CODE_E_499":       123,
		"TIS_TERRITORY_CODE_E_504":       124,
		"TIS_TERRITORY_CODE_E_508":       125,
		"TIS_TERRITORY_CODE_E_512":       126,
		"TIS_TERRITORY_CODE_E_516":       127,
		"TIS_TERRITORY_CODE_E_520":       128,
		"TIS_TERRITORY_CODE_E_524":       129,
		"TIS_TERRITORY_CODE_E_528":       130,
		"TIS_TERRITORY_CODE_E_540":       131,
		"TIS_TERRITORY_CODE_E_548":       132,
		"TIS_TERRITORY_CODE_E_554":       133,
		"TIS_TERRITORY_CODE_E_558":       134,
		"TIS_TERRITORY_CODE_E_562":       135,
		"TIS_TERRITORY_CODE_E_566":       136,
		"TIS_TERRITORY_CODE_E_578":       137,
		"TIS_TERRITORY_CODE_E_583":       138,
		"TIS_TERRITORY_CODE_E_584":       139,
		"TIS_TERRITORY_CODE_E_585":       140,
		"TIS_TERRITORY_CODE_E_586":       141,
		"TIS_TERRITORY_CODE_E_591":       142,
		"TIS_TERRITORY_CODE_E_598":       143,
		"TIS_TERRITORY_CODE_E_600":       144,
		"TIS_TERRITORY_CODE_E_604":       145,
		"TIS_TERRITORY_CODE_E_608":       146,
		"TIS_TERRITORY_CODE_E_616":       147,
		"TIS_TERRITORY_CODE_E_620":       148,
		"TIS_TERRITORY_CODE_E_624":       149,
		"TIS_TERRITORY_CODE_E_626":       150,
		"TIS_TERRITORY_CODE_E_630":       151,
		"TIS_TERRITORY_CODE_E_634":       152,
		"TIS_TERRITORY_CODE_E_642":       153,
		"TIS_TERRITORY_CODE_E_643":       154,
		"TIS_TERRITORY_CODE_E_646":       155,
		"TIS_TERRITORY_CODE_E_659":       156,
		"TIS_TERRITORY_CODE_E_662":       157,
		"TIS_TERRITORY_CODE_E_670":       158,
		"TIS_TERRITORY_CODE_E_674":       159,
		"TIS_TERRITORY_CODE_E_678":       160,
		"TIS_TERRITORY_CODE_E_682":       161,
		"TIS_TERRITORY_CODE_E_686":       162,
		"TIS_TERRITORY_CODE_E_688":       163,
		"TIS_TERRITORY_CODE_E_690":       164,
		"TIS_TERRITORY_CODE_E_694":       165,
		"TIS_TERRITORY_CODE_E_702":       166,
		"TIS_TERRITORY_CODE_E_703":       167,
		"TIS_TERRITORY_CODE_E_704":       168,
		"TIS_TERRITORY_CODE_E_705":       169,
		"TIS_TERRITORY_CODE_E_706":       170,
		"TIS_TERRITORY_CODE_E_710":       171,
		"TIS_TERRITORY_CODE_E_716":       172,
		"TIS_TERRITORY_CODE_E_720":       173,
		"TIS_TERRITORY_CODE_E_724":       174,
		"TIS_TERRITORY_CODE_E_728":       175,
		"TIS_TERRITORY_CODE_E_729":       176,
		"TIS_TERRITORY_CODE_E_732":       177,
		"TIS_TERRITORY_CODE_E_736":       178,
		"TIS_TERRITORY_CODE_E_740":       179,
		"TIS_TERRITORY_CODE_E_748":       180,
		"TIS_TERRITORY_CODE_E_752":       181,
		"TIS_TERRITORY_CODE_E_756":       182,
		"TIS_TERRITORY_CODE_E_760":       183,
		"TIS_TERRITORY_CODE_E_762":       184,
		"TIS_TERRITORY_CODE_E_764":       185,
		"TIS_TERRITORY_CODE_E_768":       186,
		"TIS_TERRITORY_CODE_E_776":       187,
		"TIS_TERRITORY_CODE_E_780":       188,
		"TIS_TERRITORY_CODE_E_784":       189,
		"TIS_TERRITORY_CODE_E_788":       190,
		"TIS_TERRITORY_CODE_E_792":       191,
		"TIS_TERRITORY_CODE_E_795":       192,
		"TIS_TERRITORY_CODE_E_798":       193,
		"TIS_TERRITORY_CODE_E_800":       194,
		"TIS_TERRITORY_CODE_E_804":       195,
		"TIS_TERRITORY_CODE_E_807":       196,
		"TIS_TERRITORY_CODE_E_810":       197,
		"TIS_TERRITORY_CODE_E_818":       198,
		"TIS_TERRITORY_CODE_E_826":       199,
		"TIS_TERRITORY_CODE_E_834":       200,
		"TIS_TERRITORY_CODE_E_840":       201,
		"TIS_TERRITORY_CODE_E_854":       202,
		"TIS_TERRITORY_CODE_E_858":       203,
		"TIS_TERRITORY_CODE_E_860":       204,
		"TIS_TERRITORY_CODE_E_862":       205,
		"TIS_TERRITORY_CODE_E_882":       206,
		"TIS_TERRITORY_CODE_E_886":       207,
		"TIS_TERRITORY_CODE_E_887":       208,
		"TIS_TERRITORY_CODE_E_890":       209,
		"TIS_TERRITORY_CODE_E_891":       210,
		"TIS_TERRITORY_CODE_E_894":       211,
		"TIS_TERRITORY_CODE_E_2100":      212,
		"TIS_TERRITORY_CODE_E_2101":      213,
		"TIS_TERRITORY_CODE_E_2102":      214,
		"TIS_TERRITORY_CODE_E_2103":      215,
		"TIS_TERRITORY_CODE_E_2104":      216,
		"TIS_TERRITORY_CODE_E_2105":      217,
		"TIS_TERRITORY_CODE_E_2106":      218,
		"TIS_TERRITORY_CODE_E_2107":      219,
		"TIS_TERRITORY_CODE_E_2108":      220,
		"TIS_TERRITORY_CODE_E_2109":      221,
		"TIS_TERRITORY_CODE_E_2110":      222,
		"TIS_TERRITORY_CODE_E_2111":      223,
		"TIS_TERRITORY_CODE_E_2112":      224,
		"TIS_TERRITORY_CODE_E_2113":      225,
		"TIS_TERRITORY_CODE_E_2114":      226,
		"TIS_TERRITORY_CODE_E_2115":      227,
		"TIS_TERRITORY_CODE_E_2116":      228,
		"TIS_TERRITORY_CODE_E_2117":      229,
		"TIS_TERRITORY_CODE_E_2118":      230,
		"TIS_TERRITORY_CODE_E_2119":      231,
		"TIS_TERRITORY_CODE_E_2120":      232,
		"TIS_TERRITORY_CODE_E_2121":      233,
		"TIS_TERRITORY_CODE_E_2122":      234,
		"TIS_TERRITORY_CODE_E_2123":      235,
		"TIS_TERRITORY_CODE_E_2124":      236,
		"TIS_TERRITORY_CODE_E_2125":      237,
		"TIS_TERRITORY_CODE_E_2126":      238,
		"TIS_TERRITORY_CODE_E_2127":      239,
		"TIS_TERRITORY_CODE_E_2128":      240,
		"TIS_TERRITORY_CODE_E_2129":      241,
		"TIS_TERRITORY_CODE_E_2130":      242,
		"TIS_TERRITORY_CODE_E_2131":      243,
		"TIS_TERRITORY_CODE_E_2132":      244,
		"TIS_TERRITORY_CODE_E_2133":      245,
		"TIS_TERRITORY_CODE_E_2134":      246,
		"TIS_TERRITORY_CODE_E_2136":      247,
	}
)

func (x TisTerritoryCode) Enum() *TisTerritoryCode {
	p := new(TisTerritoryCode)
	*p = x
	return p
}

func (x TisTerritoryCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TisTerritoryCode) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[227].Descriptor()
}

func (TisTerritoryCode) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[227]
}

func (x TisTerritoryCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TisTerritoryCode.Descriptor instead.
func (TisTerritoryCode) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{227}
}

type TitleType int32

const (
	TitleType_TITLE_TYPE_UNSPECIFIED             TitleType = 0
	TitleType_TITLE_TYPE_ABBREVIATEDDISPLAYTITLE TitleType = 1
	TitleType_TITLE_TYPE_ALTERNATIVETITLE        TitleType = 2
	TitleType_TITLE_TYPE_DISPLAYTITLE            TitleType = 3
	TitleType_TITLE_TYPE_FIRSTLINEOFTEXT         TitleType = 4
	TitleType_TITLE_TYPE_FORMALTITLE             TitleType = 5
	TitleType_TITLE_TYPE_GROUPINGTITLE           TitleType = 6
	TitleType_TITLE_TYPE_INCORRECTTITLE          TitleType = 7
	TitleType_TITLE_TYPE_MISSPELLEDTITLE         TitleType = 8
	TitleType_TITLE_TYPE_MUSICALWORKTITLE        TitleType = 9
	TitleType_TITLE_TYPE_ORIGINALTITLE           TitleType = 10
	TitleType_TITLE_TYPE_SEARCHTITLE             TitleType = 11
	TitleType_TITLE_TYPE_SORTINGTITLE            TitleType = 12
	TitleType_TITLE_TYPE_TITLEASPART             TitleType = 13
	TitleType_TITLE_TYPE_TITLEWITHOUTPUNCTUATION TitleType = 14
	TitleType_TITLE_TYPE_TRANSLATEDTITLE         TitleType = 15
	TitleType_TITLE_TYPE_TRANSLITERATEDTITLE     TitleType = 16
	TitleType_TITLE_TYPE_UNKNOWN                 TitleType = 17
	TitleType_TITLE_TYPE_USERDEFINED             TitleType = 18
)

// Enum value maps for TitleType.
var (
	TitleType_name = map[int32]string{
		0:  "TITLE_TYPE_UNSPECIFIED",
		1:  "TITLE_TYPE_ABBREVIATEDDISPLAYTITLE",
		2:  "TITLE_TYPE_ALTERNATIVETITLE",
		3:  "TITLE_TYPE_DISPLAYTITLE",
		4:  "TITLE_TYPE_FIRSTLINEOFTEXT",
		5:  "TITLE_TYPE_FORMALTITLE",
		6:  "TITLE_TYPE_GROUPINGTITLE",
		7:  "TITLE_TYPE_INCORRECTTITLE",
		8:  "TITLE_TYPE_MISSPELLEDTITLE",
		9:  "TITLE_TYPE_MUSICALWORKTITLE",
		10: "TITLE_TYPE_ORIGINALTITLE",
		11: "TITLE_TYPE_SEARCHTITLE",
		12: "TITLE_TYPE_SORTINGTITLE",
		13: "TITLE_TYPE_TITLEASPART",
		14: "TITLE_TYPE_TITLEWITHOUTPUNCTUATION",
		15: "TITLE_TYPE_TRANSLATEDTITLE",
		16: "TITLE_TYPE_TRANSLITERATEDTITLE",
		17: "TITLE_TYPE_UNKNOWN",
		18: "TITLE_TYPE_USERDEFINED",
	}
	TitleType_value = map[string]int32{
		"TITLE_TYPE_UNSPECIFIED":             0,
		"TITLE_TYPE_ABBREVIATEDDISPLAYTITLE": 1,
		"TITLE_TYPE_ALTERNATIVETITLE":        2,
		"TITLE_TYPE_DISPLAYTITLE":            3,
		"TITLE_TYPE_FIRSTLINEOFTEXT":         4,
		"TITLE_TYPE_FORMALTITLE":             5,
		"TITLE_TYPE_GROUPINGTITLE":           6,
		"TITLE_TYPE_INCORRECTTITLE":          7,
		"TITLE_TYPE_MISSPELLEDTITLE":         8,
		"TITLE_TYPE_MUSICALWORKTITLE":        9,
		"TITLE_TYPE_ORIGINALTITLE":           10,
		"TITLE_TYPE_SEARCHTITLE":             11,
		"TITLE_TYPE_SORTINGTITLE":            12,
		"TITLE_TYPE_TITLEASPART":             13,
		"TITLE_TYPE_TITLEWITHOUTPUNCTUATION": 14,
		"TITLE_TYPE_TRANSLATEDTITLE":         15,
		"TITLE_TYPE_TRANSLITERATEDTITLE":     16,
		"TITLE_TYPE_UNKNOWN":                 17,
		"TITLE_TYPE_USERDEFINED":             18,
	}
)

func (x TitleType) Enum() *TitleType {
	p := new(TitleType)
	*p = x
	return p
}

func (x TitleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TitleType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[228].Descriptor()
}

func (TitleType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[228]
}

func (x TitleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TitleType.Descriptor instead.
func (TitleType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{228}
}

type TransferCategory int32

const (
	TransferCategory_TRANSFER_CATEGORY_UNSPECIFIED              TransferCategory = 0
	TransferCategory_TRANSFER_CATEGORY_ALIGNMENTTONES           TransferCategory = 1
	TransferCategory_TRANSFER_CATEGORY_ANALOGTODIGITALCONVERTER TransferCategory = 2
	TransferCategory_TRANSFER_CATEGORY_BITDEPTH                 TransferCategory = 3
	TransferCategory_TRANSFER_CATEGORY_CARTRIDGE                TransferCategory = 4
	TransferCategory_TRANSFER_CATEGORY_CLOCKSOURCE              TransferCategory = 5
	TransferCategory_TRANSFER_CATEGORY_CONVERSIONREFERENCELEVEL TransferCategory = 6
	TransferCategory_TRANSFER_CATEGORY_EMPHASIS                 TransferCategory = 7
	TransferCategory_TRANSFER_CATEGORY_MATERIALCONDITION        TransferCategory = 8
	TransferCategory_TRANSFER_CATEGORY_MICPREAMP                TransferCategory = 9
	TransferCategory_TRANSFER_CATEGORY_NOISEREDUCTION           TransferCategory = 10
	TransferCategory_TRANSFER_CATEGORY_NUMBEROFCHANNELS         TransferCategory = 11
	TransferCategory_TRANSFER_CATEGORY_NUMBEROFSIDES            TransferCategory = 12
	TransferCategory_TRANSFER_CATEGORY_NUMBEROFTRACKS           TransferCategory = 13
	TransferCategory_TRANSFER_CATEGORY_PHONOPREAMP              TransferCategory = 14
	TransferCategory_TRANSFER_CATEGORY_REFERENCECLOCK           TransferCategory = 15
	TransferCategory_TRANSFER_CATEGORY_REFERENCETONES           TransferCategory = 16
	TransferCategory_TRANSFER_CATEGORY_SAMPLINGRATE             TransferCategory = 17
	TransferCategory_TRANSFER_CATEGORY_SIDE1CONDITION           TransferCategory = 18
	TransferCategory_TRANSFER_CATEGORY_SIDE2CONDITION           TransferCategory = 19
	TransferCategory_TRANSFER_CATEGORY_SMPTEFRAMERATE           TransferCategory = 20
	TransferCategory_TRANSFER_CATEGORY_SOURCEMACHINE            TransferCategory = 21
	TransferCategory_TRANSFER_CATEGORY_SPEED                    TransferCategory = 22
	TransferCategory_TRANSFER_CATEGORY_STORAGE                  TransferCategory = 23
	TransferCategory_TRANSFER_CATEGORY_STYLUS                   TransferCategory = 24
	TransferCategory_TRANSFER_CATEGORY_STYLUSSIZE               TransferCategory = 25
	TransferCategory_TRANSFER_CATEGORY_TAPEBAKEDDATE            TransferCategory = 26
	TransferCategory_TRANSFER_CATEGORY_TAPEBAKEDEQUIPMENT       TransferCategory = 27
	TransferCategory_TRANSFER_CATEGORY_TAPEBAKEDHOURS           TransferCategory = 28
	TransferCategory_TRANSFER_CATEGORY_TAPEBAKEDTEMPERATURE     TransferCategory = 29
	TransferCategory_TRANSFER_CATEGORY_TAPECOOLHOURS            TransferCategory = 30
	TransferCategory_TRANSFER_CATEGORY_TONEARM                  TransferCategory = 31
	TransferCategory_TRANSFER_CATEGORY_TRACKCONFIGURATION       TransferCategory = 32
	TransferCategory_TRANSFER_CATEGORY_TRANSFERSOFTWARE         TransferCategory = 33
)

// Enum value maps for TransferCategory.
var (
	TransferCategory_name = map[int32]string{
		0:  "TRANSFER_CATEGORY_UNSPECIFIED",
		1:  "TRANSFER_CATEGORY_ALIGNMENTTONES",
		2:  "TRANSFER_CATEGORY_ANALOGTODIGITALCONVERTER",
		3:  "TRANSFER_CATEGORY_BITDEPTH",
		4:  "TRANSFER_CATEGORY_CARTRIDGE",
		5:  "TRANSFER_CATEGORY_CLOCKSOURCE",
		6:  "TRANSFER_CATEGORY_CONVERSIONREFERENCELEVEL",
		7:  "TRANSFER_CATEGORY_EMPHASIS",
		8:  "TRANSFER_CATEGORY_MATERIALCONDITION",
		9:  "TRANSFER_CATEGORY_MICPREAMP",
		10: "TRANSFER_CATEGORY_NOISEREDUCTION",
		11: "TRANSFER_CATEGORY_NUMBEROFCHANNELS",
		12: "TRANSFER_CATEGORY_NUMBEROFSIDES",
		13: "TRANSFER_CATEGORY_NUMBEROFTRACKS",
		14: "TRANSFER_CATEGORY_PHONOPREAMP",
		15: "TRANSFER_CATEGORY_REFERENCECLOCK",
		16: "TRANSFER_CATEGORY_REFERENCETONES",
		17: "TRANSFER_CATEGORY_SAMPLINGRATE",
		18: "TRANSFER_CATEGORY_SIDE1CONDITION",
		19: "TRANSFER_CATEGORY_SIDE2CONDITION",
		20: "TRANSFER_CATEGORY_SMPTEFRAMERATE",
		21: "TRANSFER_CATEGORY_SOURCEMACHINE",
		22: "TRANSFER_CATEGORY_SPEED",
		23: "TRANSFER_CATEGORY_STORAGE",
		24: "TRANSFER_CATEGORY_STYLUS",
		25: "TRANSFER_CATEGORY_STYLUSSIZE",
		26: "TRANSFER_CATEGORY_TAPEBAKEDDATE",
		27: "TRANSFER_CATEGORY_TAPEBAKEDEQUIPMENT",
		28: "TRANSFER_CATEGORY_TAPEBAKEDHOURS",
		29: "TRANSFER_CATEGORY_TAPEBAKEDTEMPERATURE",
		30: "TRANSFER_CATEGORY_TAPECOOLHOURS",
		31: "TRANSFER_CATEGORY_TONEARM",
		32: "TRANSFER_CATEGORY_TRACKCONFIGURATION",
		33: "TRANSFER_CATEGORY_TRANSFERSOFTWARE",
	}
	TransferCategory_value = map[string]int32{
		"TRANSFER_CATEGORY_UNSPECIFIED":              0,
		"TRANSFER_CATEGORY_ALIGNMENTTONES":           1,
		"TRANSFER_CATEGORY_ANALOGTODIGITALCONVERTER": 2,
		"TRANSFER_CATEGORY_BITDEPTH":                 3,
		"TRANSFER_CATEGORY_CARTRIDGE":                4,
		"TRANSFER_CATEGORY_CLOCKSOURCE":              5,
		"TRANSFER_CATEGORY_CONVERSIONREFERENCELEVEL": 6,
		"TRANSFER_CATEGORY_EMPHASIS":                 7,
		"TRANSFER_CATEGORY_MATERIALCONDITION":        8,
		"TRANSFER_CATEGORY_MICPREAMP":                9,
		"TRANSFER_CATEGORY_NOISEREDUCTION":           10,
		"TRANSFER_CATEGORY_NUMBEROFCHANNELS":         11,
		"TRANSFER_CATEGORY_NUMBEROFSIDES":            12,
		"TRANSFER_CATEGORY_NUMBEROFTRACKS":           13,
		"TRANSFER_CATEGORY_PHONOPREAMP":              14,
		"TRANSFER_CATEGORY_REFERENCECLOCK":           15,
		"TRANSFER_CATEGORY_REFERENCETONES":           16,
		"TRANSFER_CATEGORY_SAMPLINGRATE":             17,
		"TRANSFER_CATEGORY_SIDE1CONDITION":           18,
		"TRANSFER_CATEGORY_SIDE2CONDITION":           19,
		"TRANSFER_CATEGORY_SMPTEFRAMERATE":           20,
		"TRANSFER_CATEGORY_SOURCEMACHINE":            21,
		"TRANSFER_CATEGORY_SPEED":                    22,
		"TRANSFER_CATEGORY_STORAGE":                  23,
		"TRANSFER_CATEGORY_STYLUS":                   24,
		"TRANSFER_CATEGORY_STYLUSSIZE":               25,
		"TRANSFER_CATEGORY_TAPEBAKEDDATE":            26,
		"TRANSFER_CATEGORY_TAPEBAKEDEQUIPMENT":       27,
		"TRANSFER_CATEGORY_TAPEBAKEDHOURS":           28,
		"TRANSFER_CATEGORY_TAPEBAKEDTEMPERATURE":     29,
		"TRANSFER_CATEGORY_TAPECOOLHOURS":            30,
		"TRANSFER_CATEGORY_TONEARM":                  31,
		"TRANSFER_CATEGORY_TRACKCONFIGURATION":       32,
		"TRANSFER_CATEGORY_TRANSFERSOFTWARE":         33,
	}
)

func (x TransferCategory) Enum() *TransferCategory {
	p := new(TransferCategory)
	*p = x
	return p
}

func (x TransferCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[229].Descriptor()
}

func (TransferCategory) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[229]
}

func (x TransferCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferCategory.Descriptor instead.
func (TransferCategory) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{229}
}

type TransferType int32

const (
	TransferType_TRANSFER_TYPE_UNSPECIFIED      TransferType = 0
	TransferType_TRANSFER_TYPE_ANALOGTOANALOG   TransferType = 1
	TransferType_TRANSFER_TYPE_ANALOGTODIGITAL  TransferType = 2
	TransferType_TRANSFER_TYPE_DIGITALCOPY      TransferType = 3
	TransferType_TRANSFER_TYPE_DIGITALTOANALOG  TransferType = 4
	TransferType_TRANSFER_TYPE_DIGITALTODIGITAL TransferType = 5
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TRANSFER_TYPE_UNSPECIFIED",
		1: "TRANSFER_TYPE_ANALOGTOANALOG",
		2: "TRANSFER_TYPE_ANALOGTODIGITAL",
		3: "TRANSFER_TYPE_DIGITALCOPY",
		4: "TRANSFER_TYPE_DIGITALTOANALOG",
		5: "TRANSFER_TYPE_DIGITALTODIGITAL",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_UNSPECIFIED":      0,
		"TRANSFER_TYPE_ANALOGTOANALOG":   1,
		"TRANSFER_TYPE_ANALOGTODIGITAL":  2,
		"TRANSFER_TYPE_DIGITALCOPY":      3,
		"TRANSFER_TYPE_DIGITALTOANALOG":  4,
		"TRANSFER_TYPE_DIGITALTODIGITAL": 5,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[230].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[230]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{230}
}

type UnitOfBitRate int32

const (
	UnitOfBitRate_UNIT_OF_BIT_RATE_UNSPECIFIED UnitOfBitRate = 0
	UnitOfBitRate_UNIT_OF_BIT_RATE_BPS         UnitOfBitRate = 1
	UnitOfBitRate_UNIT_OF_BIT_RATE_GBPS        UnitOfBitRate = 2
	UnitOfBitRate_UNIT_OF_BIT_RATE_KBPS        UnitOfBitRate = 3
	UnitOfBitRate_UNIT_OF_BIT_RATE_MBPS        UnitOfBitRate = 4
)

// Enum value maps for UnitOfBitRate.
var (
	UnitOfBitRate_name = map[int32]string{
		0: "UNIT_OF_BIT_RATE_UNSPECIFIED",
		1: "UNIT_OF_BIT_RATE_BPS",
		2: "UNIT_OF_BIT_RATE_GBPS",
		3: "UNIT_OF_BIT_RATE_KBPS",
		4: "UNIT_OF_BIT_RATE_MBPS",
	}
	UnitOfBitRate_value = map[string]int32{
		"UNIT_OF_BIT_RATE_UNSPECIFIED": 0,
		"UNIT_OF_BIT_RATE_BPS":         1,
		"UNIT_OF_BIT_RATE_GBPS":        2,
		"UNIT_OF_BIT_RATE_KBPS":        3,
		"UNIT_OF_BIT_RATE_MBPS":        4,
	}
)

func (x UnitOfBitRate) Enum() *UnitOfBitRate {
	p := new(UnitOfBitRate)
	*p = x
	return p
}

func (x UnitOfBitRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfBitRate) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[231].Descriptor()
}

func (UnitOfBitRate) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[231]
}

func (x UnitOfBitRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfBitRate.Descriptor instead.
func (UnitOfBitRate) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{231}
}

type UnitOfConditionValue int32

const (
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_UNSPECIFIED UnitOfConditionValue = 0
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_MILLISECOND UnitOfConditionValue = 1
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_MINUTE      UnitOfConditionValue = 2
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_PERCENT     UnitOfConditionValue = 3
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_PIXEL       UnitOfConditionValue = 4
	UnitOfConditionValue_UNIT_OF_CONDITION_VALUE_SECOND      UnitOfConditionValue = 5
)

// Enum value maps for UnitOfConditionValue.
var (
	UnitOfConditionValue_name = map[int32]string{
		0: "UNIT_OF_CONDITION_VALUE_UNSPECIFIED",
		1: "UNIT_OF_CONDITION_VALUE_MILLISECOND",
		2: "UNIT_OF_CONDITION_VALUE_MINUTE",
		3: "UNIT_OF_CONDITION_VALUE_PERCENT",
		4: "UNIT_OF_CONDITION_VALUE_PIXEL",
		5: "UNIT_OF_CONDITION_VALUE_SECOND",
	}
	UnitOfConditionValue_value = map[string]int32{
		"UNIT_OF_CONDITION_VALUE_UNSPECIFIED": 0,
		"UNIT_OF_CONDITION_VALUE_MILLISECOND": 1,
		"UNIT_OF_CONDITION_VALUE_MINUTE":      2,
		"UNIT_OF_CONDITION_VALUE_PERCENT":     3,
		"UNIT_OF_CONDITION_VALUE_PIXEL":       4,
		"UNIT_OF_CONDITION_VALUE_SECOND":      5,
	}
)

func (x UnitOfConditionValue) Enum() *UnitOfConditionValue {
	p := new(UnitOfConditionValue)
	*p = x
	return p
}

func (x UnitOfConditionValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfConditionValue) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[232].Descriptor()
}

func (UnitOfConditionValue) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[232]
}

func (x UnitOfConditionValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfConditionValue.Descriptor instead.
func (UnitOfConditionValue) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{232}
}

type UnitOfCuePoints int32

const (
	UnitOfCuePoints_UNIT_OF_CUE_POINTS_UNSPECIFIED UnitOfCuePoints = 0
	UnitOfCuePoints_UNIT_OF_CUE_POINTS_MILLISECOND UnitOfCuePoints = 1
	UnitOfCuePoints_UNIT_OF_CUE_POINTS_SECOND      UnitOfCuePoints = 2
)

// Enum value maps for UnitOfCuePoints.
var (
	UnitOfCuePoints_name = map[int32]string{
		0: "UNIT_OF_CUE_POINTS_UNSPECIFIED",
		1: "UNIT_OF_CUE_POINTS_MILLISECOND",
		2: "UNIT_OF_CUE_POINTS_SECOND",
	}
	UnitOfCuePoints_value = map[string]int32{
		"UNIT_OF_CUE_POINTS_UNSPECIFIED": 0,
		"UNIT_OF_CUE_POINTS_MILLISECOND": 1,
		"UNIT_OF_CUE_POINTS_SECOND":      2,
	}
)

func (x UnitOfCuePoints) Enum() *UnitOfCuePoints {
	p := new(UnitOfCuePoints)
	*p = x
	return p
}

func (x UnitOfCuePoints) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfCuePoints) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[233].Descriptor()
}

func (UnitOfCuePoints) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[233]
}

func (x UnitOfCuePoints) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfCuePoints.Descriptor instead.
func (UnitOfCuePoints) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{233}
}

type UnitOfDuration int32

const (
	UnitOfDuration_UNIT_OF_DURATION_UNSPECIFIED UnitOfDuration = 0
	UnitOfDuration_UNIT_OF_DURATION_DAY         UnitOfDuration = 1
	UnitOfDuration_UNIT_OF_DURATION_MONTH       UnitOfDuration = 2
	UnitOfDuration_UNIT_OF_DURATION_USERDEFINED UnitOfDuration = 3
	UnitOfDuration_UNIT_OF_DURATION_WEEK        UnitOfDuration = 4
)

// Enum value maps for UnitOfDuration.
var (
	UnitOfDuration_name = map[int32]string{
		0: "UNIT_OF_DURATION_UNSPECIFIED",
		1: "UNIT_OF_DURATION_DAY",
		2: "UNIT_OF_DURATION_MONTH",
		3: "UNIT_OF_DURATION_USERDEFINED",
		4: "UNIT_OF_DURATION_WEEK",
	}
	UnitOfDuration_value = map[string]int32{
		"UNIT_OF_DURATION_UNSPECIFIED": 0,
		"UNIT_OF_DURATION_DAY":         1,
		"UNIT_OF_DURATION_MONTH":       2,
		"UNIT_OF_DURATION_USERDEFINED": 3,
		"UNIT_OF_DURATION_WEEK":        4,
	}
)

func (x UnitOfDuration) Enum() *UnitOfDuration {
	p := new(UnitOfDuration)
	*p = x
	return p
}

func (x UnitOfDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[234].Descriptor()
}

func (UnitOfDuration) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[234]
}

func (x UnitOfDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfDuration.Descriptor instead.
func (UnitOfDuration) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{234}
}

type UnitOfExtent int32

const (
	UnitOfExtent_UNIT_OF_EXTENT_UNSPECIFIED     UnitOfExtent = 0
	UnitOfExtent_UNIT_OF_EXTENT_CM              UnitOfExtent = 1
	UnitOfExtent_UNIT_OF_EXTENT_INCH            UnitOfExtent = 2
	UnitOfExtent_UNIT_OF_EXTENT_MM              UnitOfExtent = 3
	UnitOfExtent_UNIT_OF_EXTENT_PERCENTOFSCREEN UnitOfExtent = 4
	UnitOfExtent_UNIT_OF_EXTENT_PIXEL           UnitOfExtent = 5
)

// Enum value maps for UnitOfExtent.
var (
	UnitOfExtent_name = map[int32]string{
		0: "UNIT_OF_EXTENT_UNSPECIFIED",
		1: "UNIT_OF_EXTENT_CM",
		2: "UNIT_OF_EXTENT_INCH",
		3: "UNIT_OF_EXTENT_MM",
		4: "UNIT_OF_EXTENT_PERCENTOFSCREEN",
		5: "UNIT_OF_EXTENT_PIXEL",
	}
	UnitOfExtent_value = map[string]int32{
		"UNIT_OF_EXTENT_UNSPECIFIED":     0,
		"UNIT_OF_EXTENT_CM":              1,
		"UNIT_OF_EXTENT_INCH":            2,
		"UNIT_OF_EXTENT_MM":              3,
		"UNIT_OF_EXTENT_PERCENTOFSCREEN": 4,
		"UNIT_OF_EXTENT_PIXEL":           5,
	}
)

func (x UnitOfExtent) Enum() *UnitOfExtent {
	p := new(UnitOfExtent)
	*p = x
	return p
}

func (x UnitOfExtent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfExtent) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[235].Descriptor()
}

func (UnitOfExtent) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[235]
}

func (x UnitOfExtent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfExtent.Descriptor instead.
func (UnitOfExtent) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{235}
}

type UnitOfFrameRate int32

const (
	UnitOfFrameRate_UNIT_OF_FRAME_RATE_UNSPECIFIED       UnitOfFrameRate = 0
	UnitOfFrameRate_UNIT_OF_FRAME_RATE_HZ_INTERLACED     UnitOfFrameRate = 1
	UnitOfFrameRate_UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED UnitOfFrameRate = 2
)

// Enum value maps for UnitOfFrameRate.
var (
	UnitOfFrameRate_name = map[int32]string{
		0: "UNIT_OF_FRAME_RATE_UNSPECIFIED",
		1: "UNIT_OF_FRAME_RATE_HZ_INTERLACED",
		2: "UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED",
	}
	UnitOfFrameRate_value = map[string]int32{
		"UNIT_OF_FRAME_RATE_UNSPECIFIED":       0,
		"UNIT_OF_FRAME_RATE_HZ_INTERLACED":     1,
		"UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED": 2,
	}
)

func (x UnitOfFrameRate) Enum() *UnitOfFrameRate {
	p := new(UnitOfFrameRate)
	*p = x
	return p
}

func (x UnitOfFrameRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfFrameRate) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[236].Descriptor()
}

func (UnitOfFrameRate) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[236]
}

func (x UnitOfFrameRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfFrameRate.Descriptor instead.
func (UnitOfFrameRate) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{236}
}

type UnitOfFrequency int32

const (
	UnitOfFrequency_UNIT_OF_FREQUENCY_UNSPECIFIED UnitOfFrequency = 0
	UnitOfFrequency_UNIT_OF_FREQUENCY_GHZ         UnitOfFrequency = 1
	UnitOfFrequency_UNIT_OF_FREQUENCY_HZ          UnitOfFrequency = 2
	UnitOfFrequency_UNIT_OF_FREQUENCY_KHZ         UnitOfFrequency = 3
	UnitOfFrequency_UNIT_OF_FREQUENCY_MHZ         UnitOfFrequency = 4
)

// Enum value maps for UnitOfFrequency.
var (
	UnitOfFrequency_name = map[int32]string{
		0: "UNIT_OF_FREQUENCY_UNSPECIFIED",
		1: "UNIT_OF_FREQUENCY_GHZ",
		2: "UNIT_OF_FREQUENCY_HZ",
		3: "UNIT_OF_FREQUENCY_KHZ",
		4: "UNIT_OF_FREQUENCY_MHZ",
	}
	UnitOfFrequency_value = map[string]int32{
		"UNIT_OF_FREQUENCY_UNSPECIFIED": 0,
		"UNIT_OF_FREQUENCY_GHZ":         1,
		"UNIT_OF_FREQUENCY_HZ":          2,
		"UNIT_OF_FREQUENCY_KHZ":         3,
		"UNIT_OF_FREQUENCY_MHZ":         4,
	}
)

func (x UnitOfFrequency) Enum() *UnitOfFrequency {
	p := new(UnitOfFrequency)
	*p = x
	return p
}

func (x UnitOfFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[237].Descriptor()
}

func (UnitOfFrequency) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[237]
}

func (x UnitOfFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfFrequency.Descriptor instead.
func (UnitOfFrequency) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{237}
}

type UnitTypeForRevenueAllocation int32

const (
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNSPECIFIED      UnitTypeForRevenueAllocation = 0
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_INDIVIDUALUSAGES UnitTypeForRevenueAllocation = 1
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECONDS          UnitTypeForRevenueAllocation = 2
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNITOFACCOUNTING UnitTypeForRevenueAllocation = 3
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_USAGES           UnitTypeForRevenueAllocation = 4
	UnitTypeForRevenueAllocation_UNIT_TYPE_FOR_REVENUE_ALLOCATION_USERDEFINED      UnitTypeForRevenueAllocation = 5
)

// Enum value maps for UnitTypeForRevenueAllocation.
var (
	UnitTypeForRevenueAllocation_name = map[int32]string{
		0: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNSPECIFIED",
		1: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_INDIVIDUALUSAGES",
		2: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECONDS",
		3: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNITOFACCOUNTING",
		4: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_USAGES",
		5: "UNIT_TYPE_FOR_REVENUE_ALLOCATION_USERDEFINED",
	}
	UnitTypeForRevenueAllocation_value = map[string]int32{
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNSPECIFIED":      0,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_INDIVIDUALUSAGES": 1,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECONDS":          2,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNITOFACCOUNTING": 3,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_USAGES":           4,
		"UNIT_TYPE_FOR_REVENUE_ALLOCATION_USERDEFINED":      5,
	}
)

func (x UnitTypeForRevenueAllocation) Enum() *UnitTypeForRevenueAllocation {
	p := new(UnitTypeForRevenueAllocation)
	*p = x
	return p
}

func (x UnitTypeForRevenueAllocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitTypeForRevenueAllocation) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[238].Descriptor()
}

func (UnitTypeForRevenueAllocation) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[238]
}

func (x UnitTypeForRevenueAllocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitTypeForRevenueAllocation.Descriptor instead.
func (UnitTypeForRevenueAllocation) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{238}
}

type UseType int32

const (
	UseType_USE_TYPE_UNSPECIFIED                    UseType = 0
	UseType_USE_TYPE_ASPERCONTRACT                  UseType = 1
	UseType_USE_TYPE_BROADCAST                      UseType = 2
	UseType_USE_TYPE_CABLE                          UseType = 3
	UseType_USE_TYPE_CONDITIONALDOWNLOAD            UseType = 4
	UseType_USE_TYPE_CONTENTINFLUENCEDSTREAM        UseType = 5
	UseType_USE_TYPE_DISPLAY                        UseType = 6
	UseType_USE_TYPE_DOWNLOAD                       UseType = 7
	UseType_USE_TYPE_DUB                            UseType = 8
	UseType_USE_TYPE_DUBFORONDEMANDSTREAMING        UseType = 9
	UseType_USE_TYPE_DUBFORLIVEPERFORMANCE          UseType = 10
	UseType_USE_TYPE_DUBFORMOVIES                   UseType = 11
	UseType_USE_TYPE_DUBFORMUSICONHOLD              UseType = 12
	UseType_USE_TYPE_DUBFORPUBLICPERFORMANCE        UseType = 13
	UseType_USE_TYPE_DUBFORRADIO                    UseType = 14
	UseType_USE_TYPE_DUBFORTV                       UseType = 15
	UseType_USE_TYPE_EXTRACTFORINTERNET             UseType = 16
	UseType_USE_TYPE_KIOSKDOWNLOAD                  UseType = 17
	UseType_USE_TYPE_NARROWCAST                     UseType = 18
	UseType_USE_TYPE_NONINTERACTIVESTREAM           UseType = 19
	UseType_USE_TYPE_ONDEMANDSTREAM                 UseType = 20
	UseType_USE_TYPE_PERFORM                        UseType = 21
	UseType_USE_TYPE_PERFORMASMUSICONHOLD           UseType = 22
	UseType_USE_TYPE_PERFORMINLIVEPERFORMANCE       UseType = 23
	UseType_USE_TYPE_PERFORMINPUBLIC                UseType = 24
	UseType_USE_TYPE_PERMANENTDOWNLOAD              UseType = 25
	UseType_USE_TYPE_PLAYBACK                       UseType = 26
	UseType_USE_TYPE_PLAYINPUBLIC                   UseType = 27
	UseType_USE_TYPE_PODCAST                        UseType = 28
	UseType_USE_TYPE_PRINT                          UseType = 29
	UseType_USE_TYPE_PRIVATECOPY                    UseType = 30
	UseType_USE_TYPE_PURCHASEASPHYSICALPRODUCT      UseType = 31
	UseType_USE_TYPE_RENT                           UseType = 32
	UseType_USE_TYPE_SIMULCAST                      UseType = 33
	UseType_USE_TYPE_STREAM                         UseType = 34
	UseType_USE_TYPE_TETHEREDDOWNLOAD               UseType = 35
	UseType_USE_TYPE_TIMEINFLUENCEDSTREAM           UseType = 36
	UseType_USE_TYPE_UNKNOWN                        UseType = 37
	UseType_USE_TYPE_USE                            UseType = 38
	UseType_USE_TYPE_USEASALERTTONE                 UseType = 39
	UseType_USE_TYPE_USEASDEVICE                    UseType = 40
	UseType_USE_TYPE_USEASKARAOKE                   UseType = 41
	UseType_USE_TYPE_USEASRINGBACKTONE              UseType = 42
	UseType_USE_TYPE_USEASRINGBACKTUNE              UseType = 43
	UseType_USE_TYPE_USEASRINGTONE                  UseType = 44
	UseType_USE_TYPE_USEASRINGTUNE                  UseType = 45
	UseType_USE_TYPE_USEASSCREENSAVER               UseType = 46
	UseType_USE_TYPE_USEASVOICEMAIL                 UseType = 47
	UseType_USE_TYPE_USEASWALLPAPER                 UseType = 48
	UseType_USE_TYPE_USEFORDATAMINING               UseType = 49
	UseType_USE_TYPE_USEFORTRAININGGENERATIVEAI     UseType = 50
	UseType_USE_TYPE_USEFORIDENTIFICATION           UseType = 51
	UseType_USE_TYPE_USEFORTRAININGNONGENERATIVEAI  UseType = 52
	UseType_USE_TYPE_USEINMOBILEPHONEMESSAGING      UseType = 53
	UseType_USE_TYPE_USEINPHONELISTENING            UseType = 54
	UseType_USE_TYPE_USERDEFINED                    UseType = 55
	UseType_USE_TYPE_USERMAKEAVAILABLELABELPROVIDED UseType = 56
	UseType_USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED  UseType = 57
	UseType_USE_TYPE_WEBCAST                        UseType = 58
)

// Enum value maps for UseType.
var (
	UseType_name = map[int32]string{
		0:  "USE_TYPE_UNSPECIFIED",
		1:  "USE_TYPE_ASPERCONTRACT",
		2:  "USE_TYPE_BROADCAST",
		3:  "USE_TYPE_CABLE",
		4:  "USE_TYPE_CONDITIONALDOWNLOAD",
		5:  "USE_TYPE_CONTENTINFLUENCEDSTREAM",
		6:  "USE_TYPE_DISPLAY",
		7:  "USE_TYPE_DOWNLOAD",
		8:  "USE_TYPE_DUB",
		9:  "USE_TYPE_DUBFORONDEMANDSTREAMING",
		10: "USE_TYPE_DUBFORLIVEPERFORMANCE",
		11: "USE_TYPE_DUBFORMOVIES",
		12: "USE_TYPE_DUBFORMUSICONHOLD",
		13: "USE_TYPE_DUBFORPUBLICPERFORMANCE",
		14: "USE_TYPE_DUBFORRADIO",
		15: "USE_TYPE_DUBFORTV",
		16: "USE_TYPE_EXTRACTFORINTERNET",
		17: "USE_TYPE_KIOSKDOWNLOAD",
		18: "USE_TYPE_NARROWCAST",
		19: "USE_TYPE_NONINTERACTIVESTREAM",
		20: "USE_TYPE_ONDEMANDSTREAM",
		21: "USE_TYPE_PERFORM",
		22: "USE_TYPE_PERFORMASMUSICONHOLD",
		23: "USE_TYPE_PERFORMINLIVEPERFORMANCE",
		24: "USE_TYPE_PERFORMINPUBLIC",
		25: "USE_TYPE_PERMANENTDOWNLOAD",
		26: "USE_TYPE_PLAYBACK",
		27: "USE_TYPE_PLAYINPUBLIC",
		28: "USE_TYPE_PODCAST",
		29: "USE_TYPE_PRINT",
		30: "USE_TYPE_PRIVATECOPY",
		31: "USE_TYPE_PURCHASEASPHYSICALPRODUCT",
		32: "USE_TYPE_RENT",
		33: "USE_TYPE_SIMULCAST",
		34: "USE_TYPE_STREAM",
		35: "USE_TYPE_TETHEREDDOWNLOAD",
		36: "USE_TYPE_TIMEINFLUENCEDSTREAM",
		37: "USE_TYPE_UNKNOWN",
		38: "USE_TYPE_USE",
		39: "USE_TYPE_USEASALERTTONE",
		40: "USE_TYPE_USEASDEVICE",
		41: "USE_TYPE_USEASKARAOKE",
		42: "USE_TYPE_USEASRINGBACKTONE",
		43: "USE_TYPE_USEASRINGBACKTUNE",
		44: "USE_TYPE_USEASRINGTONE",
		45: "USE_TYPE_USEASRINGTUNE",
		46: "USE_TYPE_USEASSCREENSAVER",
		47: "USE_TYPE_USEASVOICEMAIL",
		48: "USE_TYPE_USEASWALLPAPER",
		49: "USE_TYPE_USEFORDATAMINING",
		50: "USE_TYPE_USEFORTRAININGGENERATIVEAI",
		51: "USE_TYPE_USEFORIDENTIFICATION",
		52: "USE_TYPE_USEFORTRAININGNONGENERATIVEAI",
		53: "USE_TYPE_USEINMOBILEPHONEMESSAGING",
		54: "USE_TYPE_USEINPHONELISTENING",
		55: "USE_TYPE_USERDEFINED",
		56: "USE_TYPE_USERMAKEAVAILABLELABELPROVIDED",
		57: "USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED",
		58: "USE_TYPE_WEBCAST",
	}
	UseType_value = map[string]int32{
		"USE_TYPE_UNSPECIFIED":                    0,
		"USE_TYPE_ASPERCONTRACT":                  1,
		"USE_TYPE_BROADCAST":                      2,
		"USE_TYPE_CABLE":                          3,
		"USE_TYPE_CONDITIONALDOWNLOAD":            4,
		"USE_TYPE_CONTENTINFLUENCEDSTREAM":        5,
		"USE_TYPE_DISPLAY":                        6,
		"USE_TYPE_DOWNLOAD":                       7,
		"USE_TYPE_DUB":                            8,
		"USE_TYPE_DUBFORONDEMANDSTREAMING":        9,
		"USE_TYPE_DUBFORLIVEPERFORMANCE":          10,
		"USE_TYPE_DUBFORMOVIES":                   11,
		"USE_TYPE_DUBFORMUSICONHOLD":              12,
		"USE_TYPE_DUBFORPUBLICPERFORMANCE":        13,
		"USE_TYPE_DUBFORRADIO":                    14,
		"USE_TYPE_DUBFORTV":                       15,
		"USE_TYPE_EXTRACTFORINTERNET":             16,
		"USE_TYPE_KIOSKDOWNLOAD":                  17,
		"USE_TYPE_NARROWCAST":                     18,
		"USE_TYPE_NONINTERACTIVESTREAM":           19,
		"USE_TYPE_ONDEMANDSTREAM":                 20,
		"USE_TYPE_PERFORM":                        21,
		"USE_TYPE_PERFORMASMUSICONHOLD":           22,
		"USE_TYPE_PERFORMINLIVEPERFORMANCE":       23,
		"USE_TYPE_PERFORMINPUBLIC":                24,
		"USE_TYPE_PERMANENTDOWNLOAD":              25,
		"USE_TYPE_PLAYBACK":                       26,
		"USE_TYPE_PLAYINPUBLIC":                   27,
		"USE_TYPE_PODCAST":                        28,
		"USE_TYPE_PRINT":                          29,
		"USE_TYPE_PRIVATECOPY":                    30,
		"USE_TYPE_PURCHASEASPHYSICALPRODUCT":      31,
		"USE_TYPE_RENT":                           32,
		"USE_TYPE_SIMULCAST":                      33,
		"USE_TYPE_STREAM":                         34,
		"USE_TYPE_TETHEREDDOWNLOAD":               35,
		"USE_TYPE_TIMEINFLUENCEDSTREAM":           36,
		"USE_TYPE_UNKNOWN":                        37,
		"USE_TYPE_USE":                            38,
		"USE_TYPE_USEASALERTTONE":                 39,
		"USE_TYPE_USEASDEVICE":                    40,
		"USE_TYPE_USEASKARAOKE":                   41,
		"USE_TYPE_USEASRINGBACKTONE":              42,
		"USE_TYPE_USEASRINGBACKTUNE":              43,
		"USE_TYPE_USEASRINGTONE":                  44,
		"USE_TYPE_USEASRINGTUNE":                  45,
		"USE_TYPE_USEASSCREENSAVER":               46,
		"USE_TYPE_USEASVOICEMAIL":                 47,
		"USE_TYPE_USEASWALLPAPER":                 48,
		"USE_TYPE_USEFORDATAMINING":               49,
		"USE_TYPE_USEFORTRAININGGENERATIVEAI":     50,
		"USE_TYPE_USEFORIDENTIFICATION":           51,
		"USE_TYPE_USEFORTRAININGNONGENERATIVEAI":  52,
		"USE_TYPE_USEINMOBILEPHONEMESSAGING":      53,
		"USE_TYPE_USEINPHONELISTENING":            54,
		"USE_TYPE_USERDEFINED":                    55,
		"USE_TYPE_USERMAKEAVAILABLELABELPROVIDED": 56,
		"USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED":  57,
		"USE_TYPE_WEBCAST":                        58,
	}
)

func (x UseType) Enum() *UseType {
	p := new(UseType)
	*p = x
	return p
}

func (x UseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[239].Descriptor()
}

func (UseType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[239]
}

func (x UseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseType.Descriptor instead.
func (UseType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{239}
}

type UseTypeAR int32

const (
	UseTypeAR_USE_TYPE_A_R_UNSPECIFIED   UseTypeAR = 0
	UseTypeAR_USE_TYPE_A_R_DOWNLOAD      UseTypeAR = 1
	UseTypeAR_USE_TYPE_A_R_STREAM        UseTypeAR = 2
	UseTypeAR_USE_TYPE_A_R_USEINPLAYLIST UseTypeAR = 3
	UseTypeAR_USE_TYPE_A_R_USERDEFINED   UseTypeAR = 4
)

// Enum value maps for UseTypeAR.
var (
	UseTypeAR_name = map[int32]string{
		0: "USE_TYPE_A_R_UNSPECIFIED",
		1: "USE_TYPE_A_R_DOWNLOAD",
		2: "USE_TYPE_A_R_STREAM",
		3: "USE_TYPE_A_R_USEINPLAYLIST",
		4: "USE_TYPE_A_R_USERDEFINED",
	}
	UseTypeAR_value = map[string]int32{
		"USE_TYPE_A_R_UNSPECIFIED":   0,
		"USE_TYPE_A_R_DOWNLOAD":      1,
		"USE_TYPE_A_R_STREAM":        2,
		"USE_TYPE_A_R_USEINPLAYLIST": 3,
		"USE_TYPE_A_R_USERDEFINED":   4,
	}
)

func (x UseTypeAR) Enum() *UseTypeAR {
	p := new(UseTypeAR)
	*p = x
	return p
}

func (x UseTypeAR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseTypeAR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[240].Descriptor()
}

func (UseTypeAR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[240]
}

func (x UseTypeAR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseTypeAR.Descriptor instead.
func (UseTypeAR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{240}
}

type UseTypeBWARM int32

const (
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_UNSPECIFIED                    UseTypeBWARM = 0
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_ALL                            UseTypeBWARM = 1
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_ASPERCONTRACT                  UseTypeBWARM = 2
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_BROADCAST                      UseTypeBWARM = 3
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_CONDITIONALDOWNLOAD            UseTypeBWARM = 4
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_CONTENTINFLUENCEDSTREAM        UseTypeBWARM = 5
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_DISPLAY                        UseTypeBWARM = 6
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_DOWNLOAD                       UseTypeBWARM = 7
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_DUBFORADVERTISEMENT            UseTypeBWARM = 8
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_DUBFORLIVEPERFORMANCE          UseTypeBWARM = 9
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_DUBFORMOVIES                   UseTypeBWARM = 10
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_DUBFORMUSICONHOLD              UseTypeBWARM = 11
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_DUBFORPUBLICPERFORMANCE        UseTypeBWARM = 12
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_DUBFORRADIO                    UseTypeBWARM = 13
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_DUBFORTV                       UseTypeBWARM = 14
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_EXTRACTFORINTERNET             UseTypeBWARM = 15
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_KIOSKDOWNLOAD                  UseTypeBWARM = 16
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_LIVESTREAM                     UseTypeBWARM = 17
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_NARROWCAST                     UseTypeBWARM = 18
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_NONINTERACTIVESTREAM           UseTypeBWARM = 19
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_ONDEMANDSTREAM                 UseTypeBWARM = 20
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_PERFORMASMUSICONHOLD           UseTypeBWARM = 21
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_PERFORMINLIVEPERFORMANCE       UseTypeBWARM = 22
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_PERFORMINPUBLIC                UseTypeBWARM = 23
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_PERMANENTDOWNLOAD              UseTypeBWARM = 24
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_PLAYBACK                       UseTypeBWARM = 25
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_PLAYINPUBLIC                   UseTypeBWARM = 26
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_PODCAST                        UseTypeBWARM = 27
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_PRINT                          UseTypeBWARM = 28
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_PRIVATECOPY                    UseTypeBWARM = 29
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_PROGRAMMEDCONTENTSTREAM        UseTypeBWARM = 30
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_PURCHASEASPHYSICALPRODUCT      UseTypeBWARM = 31
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_RENT                           UseTypeBWARM = 32
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_SIMULCAST                      UseTypeBWARM = 33
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_STREAM                         UseTypeBWARM = 34
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_TETHEREDDOWNLOAD               UseTypeBWARM = 35
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_TIMEINFLUENCEDSTREAM           UseTypeBWARM = 36
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_UNKNOWN                        UseTypeBWARM = 37
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEASALERTTONE                 UseTypeBWARM = 38
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEASDEVICE                    UseTypeBWARM = 39
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEASKARAOKE                   UseTypeBWARM = 40
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEASRINGBACKTONE              UseTypeBWARM = 41
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEASRINGBACKTUNE              UseTypeBWARM = 42
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEASRINGTONE                  UseTypeBWARM = 43
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEASRINGTUNE                  UseTypeBWARM = 44
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEASSCREENSAVER               UseTypeBWARM = 45
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEASVOICEMAIL                 UseTypeBWARM = 46
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEASWALLPAPER                 UseTypeBWARM = 47
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEFORIDENTIFICATION           UseTypeBWARM = 48
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEFORUGCCREATION              UseTypeBWARM = 49
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEINMOBILEPHONEMESSAGING      UseTypeBWARM = 50
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USEINPHONELISTENING            UseTypeBWARM = 51
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USERDEFINED                    UseTypeBWARM = 52
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USERMAKEAVAILABLELABELPROVIDED UseTypeBWARM = 53
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_USERMAKEAVAILABLEUSERPROVIDED  UseTypeBWARM = 54
	UseTypeBWARM_USE_TYPE_B_W_A_R_M_WEBCAST                        UseTypeBWARM = 55
)

// Enum value maps for UseTypeBWARM.
var (
	UseTypeBWARM_name = map[int32]string{
		0:  "USE_TYPE_B_W_A_R_M_UNSPECIFIED",
		1:  "USE_TYPE_B_W_A_R_M_ALL",
		2:  "USE_TYPE_B_W_A_R_M_ASPERCONTRACT",
		3:  "USE_TYPE_B_W_A_R_M_BROADCAST",
		4:  "USE_TYPE_B_W_A_R_M_CONDITIONALDOWNLOAD",
		5:  "USE_TYPE_B_W_A_R_M_CONTENTINFLUENCEDSTREAM",
		6:  "USE_TYPE_B_W_A_R_M_DISPLAY",
		7:  "USE_TYPE_B_W_A_R_M_DOWNLOAD",
		8:  "USE_TYPE_B_W_A_R_M_DUBFORADVERTISEMENT",
		9:  "USE_TYPE_B_W_A_R_M_DUBFORLIVEPERFORMANCE",
		10: "USE_TYPE_B_W_A_R_M_DUBFORMOVIES",
		11: "USE_TYPE_B_W_A_R_M_DUBFORMUSICONHOLD",
		12: "USE_TYPE_B_W_A_R_M_DUBFORPUBLICPERFORMANCE",
		13: "USE_TYPE_B_W_A_R_M_DUBFORRADIO",
		14: "USE_TYPE_B_W_A_R_M_DUBFORTV",
		15: "USE_TYPE_B_W_A_R_M_EXTRACTFORINTERNET",
		16: "USE_TYPE_B_W_A_R_M_KIOSKDOWNLOAD",
		17: "USE_TYPE_B_W_A_R_M_LIVESTREAM",
		18: "USE_TYPE_B_W_A_R_M_NARROWCAST",
		19: "USE_TYPE_B_W_A_R_M_NONINTERACTIVESTREAM",
		20: "USE_TYPE_B_W_A_R_M_ONDEMANDSTREAM",
		21: "USE_TYPE_B_W_A_R_M_PERFORMASMUSICONHOLD",
		22: "USE_TYPE_B_W_A_R_M_PERFORMINLIVEPERFORMANCE",
		23: "USE_TYPE_B_W_A_R_M_PERFORMINPUBLIC",
		24: "USE_TYPE_B_W_A_R_M_PERMANENTDOWNLOAD",
		25: "USE_TYPE_B_W_A_R_M_PLAYBACK",
		26: "USE_TYPE_B_W_A_R_M_PLAYINPUBLIC",
		27: "USE_TYPE_B_W_A_R_M_PODCAST",
		28: "USE_TYPE_B_W_A_R_M_PRINT",
		29: "USE_TYPE_B_W_A_R_M_PRIVATECOPY",
		30: "USE_TYPE_B_W_A_R_M_PROGRAMMEDCONTENTSTREAM",
		31: "USE_TYPE_B_W_A_R_M_PURCHASEASPHYSICALPRODUCT",
		32: "USE_TYPE_B_W_A_R_M_RENT",
		33: "USE_TYPE_B_W_A_R_M_SIMULCAST",
		34: "USE_TYPE_B_W_A_R_M_STREAM",
		35: "USE_TYPE_B_W_A_R_M_TETHEREDDOWNLOAD",
		36: "USE_TYPE_B_W_A_R_M_TIMEINFLUENCEDSTREAM",
		37: "USE_TYPE_B_W_A_R_M_UNKNOWN",
		38: "USE_TYPE_B_W_A_R_M_USEASALERTTONE",
		39: "USE_TYPE_B_W_A_R_M_USEASDEVICE",
		40: "USE_TYPE_B_W_A_R_M_USEASKARAOKE",
		41: "USE_TYPE_B_W_A_R_M_USEASRINGBACKTONE",
		42: "USE_TYPE_B_W_A_R_M_USEASRINGBACKTUNE",
		43: "USE_TYPE_B_W_A_R_M_USEASRINGTONE",
		44: "USE_TYPE_B_W_A_R_M_USEASRINGTUNE",
		45: "USE_TYPE_B_W_A_R_M_USEASSCREENSAVER",
		46: "USE_TYPE_B_W_A_R_M_USEASVOICEMAIL",
		47: "USE_TYPE_B_W_A_R_M_USEASWALLPAPER",
		48: "USE_TYPE_B_W_A_R_M_USEFORIDENTIFICATION",
		49: "USE_TYPE_B_W_A_R_M_USEFORUGCCREATION",
		50: "USE_TYPE_B_W_A_R_M_USEINMOBILEPHONEMESSAGING",
		51: "USE_TYPE_B_W_A_R_M_USEINPHONELISTENING",
		52: "USE_TYPE_B_W_A_R_M_USERDEFINED",
		53: "USE_TYPE_B_W_A_R_M_USERMAKEAVAILABLELABELPROVIDED",
		54: "USE_TYPE_B_W_A_R_M_USERMAKEAVAILABLEUSERPROVIDED",
		55: "USE_TYPE_B_W_A_R_M_WEBCAST",
	}
	UseTypeBWARM_value = map[string]int32{
		"USE_TYPE_B_W_A_R_M_UNSPECIFIED":                    0,
		"USE_TYPE_B_W_A_R_M_ALL":                            1,
		"USE_TYPE_B_W_A_R_M_ASPERCONTRACT":                  2,
		"USE_TYPE_B_W_A_R_M_BROADCAST":                      3,
		"USE_TYPE_B_W_A_R_M_CONDITIONALDOWNLOAD":            4,
		"USE_TYPE_B_W_A_R_M_CONTENTINFLUENCEDSTREAM":        5,
		"USE_TYPE_B_W_A_R_M_DISPLAY":                        6,
		"USE_TYPE_B_W_A_R_M_DOWNLOAD":                       7,
		"USE_TYPE_B_W_A_R_M_DUBFORADVERTISEMENT":            8,
		"USE_TYPE_B_W_A_R_M_DUBFORLIVEPERFORMANCE":          9,
		"USE_TYPE_B_W_A_R_M_DUBFORMOVIES":                   10,
		"USE_TYPE_B_W_A_R_M_DUBFORMUSICONHOLD":              11,
		"USE_TYPE_B_W_A_R_M_DUBFORPUBLICPERFORMANCE":        12,
		"USE_TYPE_B_W_A_R_M_DUBFORRADIO":                    13,
		"USE_TYPE_B_W_A_R_M_DUBFORTV":                       14,
		"USE_TYPE_B_W_A_R_M_EXTRACTFORINTERNET":             15,
		"USE_TYPE_B_W_A_R_M_KIOSKDOWNLOAD":                  16,
		"USE_TYPE_B_W_A_R_M_LIVESTREAM":                     17,
		"USE_TYPE_B_W_A_R_M_NARROWCAST":                     18,
		"USE_TYPE_B_W_A_R_M_NONINTERACTIVESTREAM":           19,
		"USE_TYPE_B_W_A_R_M_ONDEMANDSTREAM":                 20,
		"USE_TYPE_B_W_A_R_M_PERFORMASMUSICONHOLD":           21,
		"USE_TYPE_B_W_A_R_M_PERFORMINLIVEPERFORMANCE":       22,
		"USE_TYPE_B_W_A_R_M_PERFORMINPUBLIC":                23,
		"USE_TYPE_B_W_A_R_M_PERMANENTDOWNLOAD":              24,
		"USE_TYPE_B_W_A_R_M_PLAYBACK":                       25,
		"USE_TYPE_B_W_A_R_M_PLAYINPUBLIC":                   26,
		"USE_TYPE_B_W_A_R_M_PODCAST":                        27,
		"USE_TYPE_B_W_A_R_M_PRINT":                          28,
		"USE_TYPE_B_W_A_R_M_PRIVATECOPY":                    29,
		"USE_TYPE_B_W_A_R_M_PROGRAMMEDCONTENTSTREAM":        30,
		"USE_TYPE_B_W_A_R_M_PURCHASEASPHYSICALPRODUCT":      31,
		"USE_TYPE_B_W_A_R_M_RENT":                           32,
		"USE_TYPE_B_W_A_R_M_SIMULCAST":                      33,
		"USE_TYPE_B_W_A_R_M_STREAM":                         34,
		"USE_TYPE_B_W_A_R_M_TETHEREDDOWNLOAD":               35,
		"USE_TYPE_B_W_A_R_M_TIMEINFLUENCEDSTREAM":           36,
		"USE_TYPE_B_W_A_R_M_UNKNOWN":                        37,
		"USE_TYPE_B_W_A_R_M_USEASALERTTONE":                 38,
		"USE_TYPE_B_W_A_R_M_USEASDEVICE":                    39,
		"USE_TYPE_B_W_A_R_M_USEASKARAOKE":                   40,
		"USE_TYPE_B_W_A_R_M_USEASRINGBACKTONE":              41,
		"USE_TYPE_B_W_A_R_M_USEASRINGBACKTUNE":              42,
		"USE_TYPE_B_W_A_R_M_USEASRINGTONE":                  43,
		"USE_TYPE_B_W_A_R_M_USEASRINGTUNE":                  44,
		"USE_TYPE_B_W_A_R_M_USEASSCREENSAVER":               45,
		"USE_TYPE_B_W_A_R_M_USEASVOICEMAIL":                 46,
		"USE_TYPE_B_W_A_R_M_USEASWALLPAPER":                 47,
		"USE_TYPE_B_W_A_R_M_USEFORIDENTIFICATION":           48,
		"USE_TYPE_B_W_A_R_M_USEFORUGCCREATION":              49,
		"USE_TYPE_B_W_A_R_M_USEINMOBILEPHONEMESSAGING":      50,
		"USE_TYPE_B_W_A_R_M_USEINPHONELISTENING":            51,
		"USE_TYPE_B_W_A_R_M_USERDEFINED":                    52,
		"USE_TYPE_B_W_A_R_M_USERMAKEAVAILABLELABELPROVIDED": 53,
		"USE_TYPE_B_W_A_R_M_USERMAKEAVAILABLEUSERPROVIDED":  54,
		"USE_TYPE_B_W_A_R_M_WEBCAST":                        55,
	}
)

func (x UseTypeBWARM) Enum() *UseTypeBWARM {
	p := new(UseTypeBWARM)
	*p = x
	return p
}

func (x UseTypeBWARM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseTypeBWARM) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[241].Descriptor()
}

func (UseTypeBWARM) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[241]
}

func (x UseTypeBWARM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseTypeBWARM.Descriptor instead.
func (UseTypeBWARM) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{241}
}

type UseTypeDSR int32

const (
	UseTypeDSR_USE_TYPE_D_S_R_UNSPECIFIED                    UseTypeDSR = 0
	UseTypeDSR_USE_TYPE_D_S_R_ASPERCONTRACT                  UseTypeDSR = 1
	UseTypeDSR_USE_TYPE_D_S_R_BROADCAST                      UseTypeDSR = 2
	UseTypeDSR_USE_TYPE_D_S_R_CONDITIONALDOWNLOAD            UseTypeDSR = 3
	UseTypeDSR_USE_TYPE_D_S_R_CONTENTINFLUENCEDSTREAM        UseTypeDSR = 4
	UseTypeDSR_USE_TYPE_D_S_R_DISPLAY                        UseTypeDSR = 5
	UseTypeDSR_USE_TYPE_D_S_R_DOWNLOAD                       UseTypeDSR = 6
	UseTypeDSR_USE_TYPE_D_S_R_DUBFORADVERTISEMENT            UseTypeDSR = 7
	UseTypeDSR_USE_TYPE_D_S_R_DUBFORLIVEPERFORMANCE          UseTypeDSR = 8
	UseTypeDSR_USE_TYPE_D_S_R_DUBFORMOVIES                   UseTypeDSR = 9
	UseTypeDSR_USE_TYPE_D_S_R_DUBFORMUSICONHOLD              UseTypeDSR = 10
	UseTypeDSR_USE_TYPE_D_S_R_DUBFORPUBLICPERFORMANCE        UseTypeDSR = 11
	UseTypeDSR_USE_TYPE_D_S_R_DUBFORRADIO                    UseTypeDSR = 12
	UseTypeDSR_USE_TYPE_D_S_R_DUBFORTV                       UseTypeDSR = 13
	UseTypeDSR_USE_TYPE_D_S_R_EXTRACTFORINTERNET             UseTypeDSR = 14
	UseTypeDSR_USE_TYPE_D_S_R_KIOSKDOWNLOAD                  UseTypeDSR = 15
	UseTypeDSR_USE_TYPE_D_S_R_LIVESTREAM                     UseTypeDSR = 16
	UseTypeDSR_USE_TYPE_D_S_R_NARROWCAST                     UseTypeDSR = 17
	UseTypeDSR_USE_TYPE_D_S_R_NONINTERACTIVESTREAM           UseTypeDSR = 18
	UseTypeDSR_USE_TYPE_D_S_R_ONDEMANDSTREAM                 UseTypeDSR = 19
	UseTypeDSR_USE_TYPE_D_S_R_PERFORMASMUSICONHOLD           UseTypeDSR = 20
	UseTypeDSR_USE_TYPE_D_S_R_PERFORMINLIVEPERFORMANCE       UseTypeDSR = 21
	UseTypeDSR_USE_TYPE_D_S_R_PERFORMINPUBLIC                UseTypeDSR = 22
	UseTypeDSR_USE_TYPE_D_S_R_PERMANENTDOWNLOAD              UseTypeDSR = 23
	UseTypeDSR_USE_TYPE_D_S_R_PLAYBACK                       UseTypeDSR = 24
	UseTypeDSR_USE_TYPE_D_S_R_PLAYINPUBLIC                   UseTypeDSR = 25
	UseTypeDSR_USE_TYPE_D_S_R_PODCAST                        UseTypeDSR = 26
	UseTypeDSR_USE_TYPE_D_S_R_PRINT                          UseTypeDSR = 27
	UseTypeDSR_USE_TYPE_D_S_R_PRIVATECOPY                    UseTypeDSR = 28
	UseTypeDSR_USE_TYPE_D_S_R_PROGRAMMEDCONTENTSTREAM        UseTypeDSR = 29
	UseTypeDSR_USE_TYPE_D_S_R_PURCHASEASPHYSICALPRODUCT      UseTypeDSR = 30
	UseTypeDSR_USE_TYPE_D_S_R_RENT                           UseTypeDSR = 31
	UseTypeDSR_USE_TYPE_D_S_R_SIMULCAST                      UseTypeDSR = 32
	UseTypeDSR_USE_TYPE_D_S_R_STREAM                         UseTypeDSR = 33
	UseTypeDSR_USE_TYPE_D_S_R_TETHEREDDOWNLOAD               UseTypeDSR = 34
	UseTypeDSR_USE_TYPE_D_S_R_TIMEINFLUENCEDSTREAM           UseTypeDSR = 35
	UseTypeDSR_USE_TYPE_D_S_R_UNKNOWN                        UseTypeDSR = 36
	UseTypeDSR_USE_TYPE_D_S_R_USEASALERTTONE                 UseTypeDSR = 37
	UseTypeDSR_USE_TYPE_D_S_R_USEASDEVICE                    UseTypeDSR = 38
	UseTypeDSR_USE_TYPE_D_S_R_USEASKARAOKE                   UseTypeDSR = 39
	UseTypeDSR_USE_TYPE_D_S_R_USEASRINGBACKTONE              UseTypeDSR = 40
	UseTypeDSR_USE_TYPE_D_S_R_USEASRINGBACKTUNE              UseTypeDSR = 41
	UseTypeDSR_USE_TYPE_D_S_R_USEASRINGTONE                  UseTypeDSR = 42
	UseTypeDSR_USE_TYPE_D_S_R_USEASRINGTUNE                  UseTypeDSR = 43
	UseTypeDSR_USE_TYPE_D_S_R_USEASSCREENSAVER               UseTypeDSR = 44
	UseTypeDSR_USE_TYPE_D_S_R_USEASVOICEMAIL                 UseTypeDSR = 45
	UseTypeDSR_USE_TYPE_D_S_R_USEASWALLPAPER                 UseTypeDSR = 46
	UseTypeDSR_USE_TYPE_D_S_R_USEFORIDENTIFICATION           UseTypeDSR = 47
	UseTypeDSR_USE_TYPE_D_S_R_USEFORUGCCREATION              UseTypeDSR = 48
	UseTypeDSR_USE_TYPE_D_S_R_USEINMOBILEPHONEMESSAGING      UseTypeDSR = 49
	UseTypeDSR_USE_TYPE_D_S_R_USEINPHONELISTENING            UseTypeDSR = 50
	UseTypeDSR_USE_TYPE_D_S_R_USERDEFINED                    UseTypeDSR = 51
	UseTypeDSR_USE_TYPE_D_S_R_USERMAKEAVAILABLELABELPROVIDED UseTypeDSR = 52
	UseTypeDSR_USE_TYPE_D_S_R_USERMAKEAVAILABLEUSERPROVIDED  UseTypeDSR = 53
	UseTypeDSR_USE_TYPE_D_S_R_WEBCAST                        UseTypeDSR = 54
)

// Enum value maps for UseTypeDSR.
var (
	UseTypeDSR_name = map[int32]string{
		0:  "USE_TYPE_D_S_R_UNSPECIFIED",
		1:  "USE_TYPE_D_S_R_ASPERCONTRACT",
		2:  "USE_TYPE_D_S_R_BROADCAST",
		3:  "USE_TYPE_D_S_R_CONDITIONALDOWNLOAD",
		4:  "USE_TYPE_D_S_R_CONTENTINFLUENCEDSTREAM",
		5:  "USE_TYPE_D_S_R_DISPLAY",
		6:  "USE_TYPE_D_S_R_DOWNLOAD",
		7:  "USE_TYPE_D_S_R_DUBFORADVERTISEMENT",
		8:  "USE_TYPE_D_S_R_DUBFORLIVEPERFORMANCE",
		9:  "USE_TYPE_D_S_R_DUBFORMOVIES",
		10: "USE_TYPE_D_S_R_DUBFORMUSICONHOLD",
		11: "USE_TYPE_D_S_R_DUBFORPUBLICPERFORMANCE",
		12: "USE_TYPE_D_S_R_DUBFORRADIO",
		13: "USE_TYPE_D_S_R_DUBFORTV",
		14: "USE_TYPE_D_S_R_EXTRACTFORINTERNET",
		15: "USE_TYPE_D_S_R_KIOSKDOWNLOAD",
		16: "USE_TYPE_D_S_R_LIVESTREAM",
		17: "USE_TYPE_D_S_R_NARROWCAST",
		18: "USE_TYPE_D_S_R_NONINTERACTIVESTREAM",
		19: "USE_TYPE_D_S_R_ONDEMANDSTREAM",
		20: "USE_TYPE_D_S_R_PERFORMASMUSICONHOLD",
		21: "USE_TYPE_D_S_R_PERFORMINLIVEPERFORMANCE",
		22: "USE_TYPE_D_S_R_PERFORMINPUBLIC",
		23: "USE_TYPE_D_S_R_PERMANENTDOWNLOAD",
		24: "USE_TYPE_D_S_R_PLAYBACK",
		25: "USE_TYPE_D_S_R_PLAYINPUBLIC",
		26: "USE_TYPE_D_S_R_PODCAST",
		27: "USE_TYPE_D_S_R_PRINT",
		28: "USE_TYPE_D_S_R_PRIVATECOPY",
		29: "USE_TYPE_D_S_R_PROGRAMMEDCONTENTSTREAM",
		30: "USE_TYPE_D_S_R_PURCHASEASPHYSICALPRODUCT",
		31: "USE_TYPE_D_S_R_RENT",
		32: "USE_TYPE_D_S_R_SIMULCAST",
		33: "USE_TYPE_D_S_R_STREAM",
		34: "USE_TYPE_D_S_R_TETHEREDDOWNLOAD",
		35: "USE_TYPE_D_S_R_TIMEINFLUENCEDSTREAM",
		36: "USE_TYPE_D_S_R_UNKNOWN",
		37: "USE_TYPE_D_S_R_USEASALERTTONE",
		38: "USE_TYPE_D_S_R_USEASDEVICE",
		39: "USE_TYPE_D_S_R_USEASKARAOKE",
		40: "USE_TYPE_D_S_R_USEASRINGBACKTONE",
		41: "USE_TYPE_D_S_R_USEASRINGBACKTUNE",
		42: "USE_TYPE_D_S_R_USEASRINGTONE",
		43: "USE_TYPE_D_S_R_USEASRINGTUNE",
		44: "USE_TYPE_D_S_R_USEASSCREENSAVER",
		45: "USE_TYPE_D_S_R_USEASVOICEMAIL",
		46: "USE_TYPE_D_S_R_USEASWALLPAPER",
		47: "USE_TYPE_D_S_R_USEFORIDENTIFICATION",
		48: "USE_TYPE_D_S_R_USEFORUGCCREATION",
		49: "USE_TYPE_D_S_R_USEINMOBILEPHONEMESSAGING",
		50: "USE_TYPE_D_S_R_USEINPHONELISTENING",
		51: "USE_TYPE_D_S_R_USERDEFINED",
		52: "USE_TYPE_D_S_R_USERMAKEAVAILABLELABELPROVIDED",
		53: "USE_TYPE_D_S_R_USERMAKEAVAILABLEUSERPROVIDED",
		54: "USE_TYPE_D_S_R_WEBCAST",
	}
	UseTypeDSR_value = map[string]int32{
		"USE_TYPE_D_S_R_UNSPECIFIED":                    0,
		"USE_TYPE_D_S_R_ASPERCONTRACT":                  1,
		"USE_TYPE_D_S_R_BROADCAST":                      2,
		"USE_TYPE_D_S_R_CONDITIONALDOWNLOAD":            3,
		"USE_TYPE_D_S_R_CONTENTINFLUENCEDSTREAM":        4,
		"USE_TYPE_D_S_R_DISPLAY":                        5,
		"USE_TYPE_D_S_R_DOWNLOAD":                       6,
		"USE_TYPE_D_S_R_DUBFORADVERTISEMENT":            7,
		"USE_TYPE_D_S_R_DUBFORLIVEPERFORMANCE":          8,
		"USE_TYPE_D_S_R_DUBFORMOVIES":                   9,
		"USE_TYPE_D_S_R_DUBFORMUSICONHOLD":              10,
		"USE_TYPE_D_S_R_DUBFORPUBLICPERFORMANCE":        11,
		"USE_TYPE_D_S_R_DUBFORRADIO":                    12,
		"USE_TYPE_D_S_R_DUBFORTV":                       13,
		"USE_TYPE_D_S_R_EXTRACTFORINTERNET":             14,
		"USE_TYPE_D_S_R_KIOSKDOWNLOAD":                  15,
		"USE_TYPE_D_S_R_LIVESTREAM":                     16,
		"USE_TYPE_D_S_R_NARROWCAST":                     17,
		"USE_TYPE_D_S_R_NONINTERACTIVESTREAM":           18,
		"USE_TYPE_D_S_R_ONDEMANDSTREAM":                 19,
		"USE_TYPE_D_S_R_PERFORMASMUSICONHOLD":           20,
		"USE_TYPE_D_S_R_PERFORMINLIVEPERFORMANCE":       21,
		"USE_TYPE_D_S_R_PERFORMINPUBLIC":                22,
		"USE_TYPE_D_S_R_PERMANENTDOWNLOAD":              23,
		"USE_TYPE_D_S_R_PLAYBACK":                       24,
		"USE_TYPE_D_S_R_PLAYINPUBLIC":                   25,
		"USE_TYPE_D_S_R_PODCAST":                        26,
		"USE_TYPE_D_S_R_PRINT":                          27,
		"USE_TYPE_D_S_R_PRIVATECOPY":                    28,
		"USE_TYPE_D_S_R_PROGRAMMEDCONTENTSTREAM":        29,
		"USE_TYPE_D_S_R_PURCHASEASPHYSICALPRODUCT":      30,
		"USE_TYPE_D_S_R_RENT":                           31,
		"USE_TYPE_D_S_R_SIMULCAST":                      32,
		"USE_TYPE_D_S_R_STREAM":                         33,
		"USE_TYPE_D_S_R_TETHEREDDOWNLOAD":               34,
		"USE_TYPE_D_S_R_TIMEINFLUENCEDSTREAM":           35,
		"USE_TYPE_D_S_R_UNKNOWN":                        36,
		"USE_TYPE_D_S_R_USEASALERTTONE":                 37,
		"USE_TYPE_D_S_R_USEASDEVICE":                    38,
		"USE_TYPE_D_S_R_USEASKARAOKE":                   39,
		"USE_TYPE_D_S_R_USEASRINGBACKTONE":              40,
		"USE_TYPE_D_S_R_USEASRINGBACKTUNE":              41,
		"USE_TYPE_D_S_R_USEASRINGTONE":                  42,
		"USE_TYPE_D_S_R_USEASRINGTUNE":                  43,
		"USE_TYPE_D_S_R_USEASSCREENSAVER":               44,
		"USE_TYPE_D_S_R_USEASVOICEMAIL":                 45,
		"USE_TYPE_D_S_R_USEASWALLPAPER":                 46,
		"USE_TYPE_D_S_R_USEFORIDENTIFICATION":           47,
		"USE_TYPE_D_S_R_USEFORUGCCREATION":              48,
		"USE_TYPE_D_S_R_USEINMOBILEPHONEMESSAGING":      49,
		"USE_TYPE_D_S_R_USEINPHONELISTENING":            50,
		"USE_TYPE_D_S_R_USERDEFINED":                    51,
		"USE_TYPE_D_S_R_USERMAKEAVAILABLELABELPROVIDED": 52,
		"USE_TYPE_D_S_R_USERMAKEAVAILABLEUSERPROVIDED":  53,
		"USE_TYPE_D_S_R_WEBCAST":                        54,
	}
)

func (x UseTypeDSR) Enum() *UseTypeDSR {
	p := new(UseTypeDSR)
	*p = x
	return p
}

func (x UseTypeDSR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseTypeDSR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[242].Descriptor()
}

func (UseTypeDSR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[242]
}

func (x UseTypeDSR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseTypeDSR.Descriptor instead.
func (UseTypeDSR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{242}
}

type UseTypeERN int32

const (
	UseTypeERN_USE_TYPE_E_R_N_UNSPECIFIED                    UseTypeERN = 0
	UseTypeERN_USE_TYPE_E_R_N_BROADCAST                      UseTypeERN = 1
	UseTypeERN_USE_TYPE_E_R_N_CABLE                          UseTypeERN = 2
	UseTypeERN_USE_TYPE_E_R_N_CONDITIONALDOWNLOAD            UseTypeERN = 3
	UseTypeERN_USE_TYPE_E_R_N_CONTENTINFLUENCEDSTREAM        UseTypeERN = 4
	UseTypeERN_USE_TYPE_E_R_N_DISPLAY                        UseTypeERN = 5
	UseTypeERN_USE_TYPE_E_R_N_DOWNLOAD                       UseTypeERN = 6
	UseTypeERN_USE_TYPE_E_R_N_DUB                            UseTypeERN = 7
	UseTypeERN_USE_TYPE_E_R_N_DUBFORONDEMANDSTREAMING        UseTypeERN = 8
	UseTypeERN_USE_TYPE_E_R_N_DUBFORLIVEPERFORMANCE          UseTypeERN = 9
	UseTypeERN_USE_TYPE_E_R_N_DUBFORMOVIES                   UseTypeERN = 10
	UseTypeERN_USE_TYPE_E_R_N_DUBFORMUSICONHOLD              UseTypeERN = 11
	UseTypeERN_USE_TYPE_E_R_N_DUBFORPUBLICPERFORMANCE        UseTypeERN = 12
	UseTypeERN_USE_TYPE_E_R_N_DUBFORRADIO                    UseTypeERN = 13
	UseTypeERN_USE_TYPE_E_R_N_DUBFORTV                       UseTypeERN = 14
	UseTypeERN_USE_TYPE_E_R_N_EXTRACTFORINTERNET             UseTypeERN = 15
	UseTypeERN_USE_TYPE_E_R_N_KIOSKDOWNLOAD                  UseTypeERN = 16
	UseTypeERN_USE_TYPE_E_R_N_NARROWCAST                     UseTypeERN = 17
	UseTypeERN_USE_TYPE_E_R_N_NONINTERACTIVESTREAM           UseTypeERN = 18
	UseTypeERN_USE_TYPE_E_R_N_ONDEMANDSTREAM                 UseTypeERN = 19
	UseTypeERN_USE_TYPE_E_R_N_PERFORM                        UseTypeERN = 20
	UseTypeERN_USE_TYPE_E_R_N_PERFORMASMUSICONHOLD           UseTypeERN = 21
	UseTypeERN_USE_TYPE_E_R_N_PERFORMINLIVEPERFORMANCE       UseTypeERN = 22
	UseTypeERN_USE_TYPE_E_R_N_PERFORMINPUBLIC                UseTypeERN = 23
	UseTypeERN_USE_TYPE_E_R_N_PERMANENTDOWNLOAD              UseTypeERN = 24
	UseTypeERN_USE_TYPE_E_R_N_PLAYBACK                       UseTypeERN = 25
	UseTypeERN_USE_TYPE_E_R_N_PLAYINPUBLIC                   UseTypeERN = 26
	UseTypeERN_USE_TYPE_E_R_N_PODCAST                        UseTypeERN = 27
	UseTypeERN_USE_TYPE_E_R_N_PRINT                          UseTypeERN = 28
	UseTypeERN_USE_TYPE_E_R_N_PRIVATECOPY                    UseTypeERN = 29
	UseTypeERN_USE_TYPE_E_R_N_PURCHASEASPHYSICALPRODUCT      UseTypeERN = 30
	UseTypeERN_USE_TYPE_E_R_N_RENT                           UseTypeERN = 31
	UseTypeERN_USE_TYPE_E_R_N_SIMULCAST                      UseTypeERN = 32
	UseTypeERN_USE_TYPE_E_R_N_STREAM                         UseTypeERN = 33
	UseTypeERN_USE_TYPE_E_R_N_TETHEREDDOWNLOAD               UseTypeERN = 34
	UseTypeERN_USE_TYPE_E_R_N_TIMEINFLUENCEDSTREAM           UseTypeERN = 35
	UseTypeERN_USE_TYPE_E_R_N_USE                            UseTypeERN = 36
	UseTypeERN_USE_TYPE_E_R_N_USEASALERTTONE                 UseTypeERN = 37
	UseTypeERN_USE_TYPE_E_R_N_USEASDEVICE                    UseTypeERN = 38
	UseTypeERN_USE_TYPE_E_R_N_USEASKARAOKE                   UseTypeERN = 39
	UseTypeERN_USE_TYPE_E_R_N_USEASRINGBACKTONE              UseTypeERN = 40
	UseTypeERN_USE_TYPE_E_R_N_USEASRINGBACKTUNE              UseTypeERN = 41
	UseTypeERN_USE_TYPE_E_R_N_USEASRINGTONE                  UseTypeERN = 42
	UseTypeERN_USE_TYPE_E_R_N_USEASRINGTUNE                  UseTypeERN = 43
	UseTypeERN_USE_TYPE_E_R_N_USEASSCREENSAVER               UseTypeERN = 44
	UseTypeERN_USE_TYPE_E_R_N_USEASVOICEMAIL                 UseTypeERN = 45
	UseTypeERN_USE_TYPE_E_R_N_USEASWALLPAPER                 UseTypeERN = 46
	UseTypeERN_USE_TYPE_E_R_N_USEFORDATAMINING               UseTypeERN = 47
	UseTypeERN_USE_TYPE_E_R_N_USEFORTRAININGGENERATIVEAI     UseTypeERN = 48
	UseTypeERN_USE_TYPE_E_R_N_USEFORIDENTIFICATION           UseTypeERN = 49
	UseTypeERN_USE_TYPE_E_R_N_USEFORTRAININGNONGENERATIVEAI  UseTypeERN = 50
	UseTypeERN_USE_TYPE_E_R_N_USEINMOBILEPHONEMESSAGING      UseTypeERN = 51
	UseTypeERN_USE_TYPE_E_R_N_USEINPHONELISTENING            UseTypeERN = 52
	UseTypeERN_USE_TYPE_E_R_N_USERDEFINED                    UseTypeERN = 53
	UseTypeERN_USE_TYPE_E_R_N_USERMAKEAVAILABLELABELPROVIDED UseTypeERN = 54
	UseTypeERN_USE_TYPE_E_R_N_USERMAKEAVAILABLEUSERPROVIDED  UseTypeERN = 55
	UseTypeERN_USE_TYPE_E_R_N_WEBCAST                        UseTypeERN = 56
)

// Enum value maps for UseTypeERN.
var (
	UseTypeERN_name = map[int32]string{
		0:  "USE_TYPE_E_R_N_UNSPECIFIED",
		1:  "USE_TYPE_E_R_N_BROADCAST",
		2:  "USE_TYPE_E_R_N_CABLE",
		3:  "USE_TYPE_E_R_N_CONDITIONALDOWNLOAD",
		4:  "USE_TYPE_E_R_N_CONTENTINFLUENCEDSTREAM",
		5:  "USE_TYPE_E_R_N_DISPLAY",
		6:  "USE_TYPE_E_R_N_DOWNLOAD",
		7:  "USE_TYPE_E_R_N_DUB",
		8:  "USE_TYPE_E_R_N_DUBFORONDEMANDSTREAMING",
		9:  "USE_TYPE_E_R_N_DUBFORLIVEPERFORMANCE",
		10: "USE_TYPE_E_R_N_DUBFORMOVIES",
		11: "USE_TYPE_E_R_N_DUBFORMUSICONHOLD",
		12: "USE_TYPE_E_R_N_DUBFORPUBLICPERFORMANCE",
		13: "USE_TYPE_E_R_N_DUBFORRADIO",
		14: "USE_TYPE_E_R_N_DUBFORTV",
		15: "USE_TYPE_E_R_N_EXTRACTFORINTERNET",
		16: "USE_TYPE_E_R_N_KIOSKDOWNLOAD",
		17: "USE_TYPE_E_R_N_NARROWCAST",
		18: "USE_TYPE_E_R_N_NONINTERACTIVESTREAM",
		19: "USE_TYPE_E_R_N_ONDEMANDSTREAM",
		20: "USE_TYPE_E_R_N_PERFORM",
		21: "USE_TYPE_E_R_N_PERFORMASMUSICONHOLD",
		22: "USE_TYPE_E_R_N_PERFORMINLIVEPERFORMANCE",
		23: "USE_TYPE_E_R_N_PERFORMINPUBLIC",
		24: "USE_TYPE_E_R_N_PERMANENTDOWNLOAD",
		25: "USE_TYPE_E_R_N_PLAYBACK",
		26: "USE_TYPE_E_R_N_PLAYINPUBLIC",
		27: "USE_TYPE_E_R_N_PODCAST",
		28: "USE_TYPE_E_R_N_PRINT",
		29: "USE_TYPE_E_R_N_PRIVATECOPY",
		30: "USE_TYPE_E_R_N_PURCHASEASPHYSICALPRODUCT",
		31: "USE_TYPE_E_R_N_RENT",
		32: "USE_TYPE_E_R_N_SIMULCAST",
		33: "USE_TYPE_E_R_N_STREAM",
		34: "USE_TYPE_E_R_N_TETHEREDDOWNLOAD",
		35: "USE_TYPE_E_R_N_TIMEINFLUENCEDSTREAM",
		36: "USE_TYPE_E_R_N_USE",
		37: "USE_TYPE_E_R_N_USEASALERTTONE",
		38: "USE_TYPE_E_R_N_USEASDEVICE",
		39: "USE_TYPE_E_R_N_USEASKARAOKE",
		40: "USE_TYPE_E_R_N_USEASRINGBACKTONE",
		41: "USE_TYPE_E_R_N_USEASRINGBACKTUNE",
		42: "USE_TYPE_E_R_N_USEASRINGTONE",
		43: "USE_TYPE_E_R_N_USEASRINGTUNE",
		44: "USE_TYPE_E_R_N_USEASSCREENSAVER",
		45: "USE_TYPE_E_R_N_USEASVOICEMAIL",
		46: "USE_TYPE_E_R_N_USEASWALLPAPER",
		47: "USE_TYPE_E_R_N_USEFORDATAMINING",
		48: "USE_TYPE_E_R_N_USEFORTRAININGGENERATIVEAI",
		49: "USE_TYPE_E_R_N_USEFORIDENTIFICATION",
		50: "USE_TYPE_E_R_N_USEFORTRAININGNONGENERATIVEAI",
		51: "USE_TYPE_E_R_N_USEINMOBILEPHONEMESSAGING",
		52: "USE_TYPE_E_R_N_USEINPHONELISTENING",
		53: "USE_TYPE_E_R_N_USERDEFINED",
		54: "USE_TYPE_E_R_N_USERMAKEAVAILABLELABELPROVIDED",
		55: "USE_TYPE_E_R_N_USERMAKEAVAILABLEUSERPROVIDED",
		56: "USE_TYPE_E_R_N_WEBCAST",
	}
	UseTypeERN_value = map[string]int32{
		"USE_TYPE_E_R_N_UNSPECIFIED":                    0,
		"USE_TYPE_E_R_N_BROADCAST":                      1,
		"USE_TYPE_E_R_N_CABLE":                          2,
		"USE_TYPE_E_R_N_CONDITIONALDOWNLOAD":            3,
		"USE_TYPE_E_R_N_CONTENTINFLUENCEDSTREAM":        4,
		"USE_TYPE_E_R_N_DISPLAY":                        5,
		"USE_TYPE_E_R_N_DOWNLOAD":                       6,
		"USE_TYPE_E_R_N_DUB":                            7,
		"USE_TYPE_E_R_N_DUBFORONDEMANDSTREAMING":        8,
		"USE_TYPE_E_R_N_DUBFORLIVEPERFORMANCE":          9,
		"USE_TYPE_E_R_N_DUBFORMOVIES":                   10,
		"USE_TYPE_E_R_N_DUBFORMUSICONHOLD":              11,
		"USE_TYPE_E_R_N_DUBFORPUBLICPERFORMANCE":        12,
		"USE_TYPE_E_R_N_DUBFORRADIO":                    13,
		"USE_TYPE_E_R_N_DUBFORTV":                       14,
		"USE_TYPE_E_R_N_EXTRACTFORINTERNET":             15,
		"USE_TYPE_E_R_N_KIOSKDOWNLOAD":                  16,
		"USE_TYPE_E_R_N_NARROWCAST":                     17,
		"USE_TYPE_E_R_N_NONINTERACTIVESTREAM":           18,
		"USE_TYPE_E_R_N_ONDEMANDSTREAM":                 19,
		"USE_TYPE_E_R_N_PERFORM":                        20,
		"USE_TYPE_E_R_N_PERFORMASMUSICONHOLD":           21,
		"USE_TYPE_E_R_N_PERFORMINLIVEPERFORMANCE":       22,
		"USE_TYPE_E_R_N_PERFORMINPUBLIC":                23,
		"USE_TYPE_E_R_N_PERMANENTDOWNLOAD":              24,
		"USE_TYPE_E_R_N_PLAYBACK":                       25,
		"USE_TYPE_E_R_N_PLAYINPUBLIC":                   26,
		"USE_TYPE_E_R_N_PODCAST":                        27,
		"USE_TYPE_E_R_N_PRINT":                          28,
		"USE_TYPE_E_R_N_PRIVATECOPY":                    29,
		"USE_TYPE_E_R_N_PURCHASEASPHYSICALPRODUCT":      30,
		"USE_TYPE_E_R_N_RENT":                           31,
		"USE_TYPE_E_R_N_SIMULCAST":                      32,
		"USE_TYPE_E_R_N_STREAM":                         33,
		"USE_TYPE_E_R_N_TETHEREDDOWNLOAD":               34,
		"USE_TYPE_E_R_N_TIMEINFLUENCEDSTREAM":           35,
		"USE_TYPE_E_R_N_USE":                            36,
		"USE_TYPE_E_R_N_USEASALERTTONE":                 37,
		"USE_TYPE_E_R_N_USEASDEVICE":                    38,
		"USE_TYPE_E_R_N_USEASKARAOKE":                   39,
		"USE_TYPE_E_R_N_USEASRINGBACKTONE":              40,
		"USE_TYPE_E_R_N_USEASRINGBACKTUNE":              41,
		"USE_TYPE_E_R_N_USEASRINGTONE":                  42,
		"USE_TYPE_E_R_N_USEASRINGTUNE":                  43,
		"USE_TYPE_E_R_N_USEASSCREENSAVER":               44,
		"USE_TYPE_E_R_N_USEASVOICEMAIL":                 45,
		"USE_TYPE_E_R_N_USEASWALLPAPER":                 46,
		"USE_TYPE_E_R_N_USEFORDATAMINING":               47,
		"USE_TYPE_E_R_N_USEFORTRAININGGENERATIVEAI":     48,
		"USE_TYPE_E_R_N_USEFORIDENTIFICATION":           49,
		"USE_TYPE_E_R_N_USEFORTRAININGNONGENERATIVEAI":  50,
		"USE_TYPE_E_R_N_USEINMOBILEPHONEMESSAGING":      51,
		"USE_TYPE_E_R_N_USEINPHONELISTENING":            52,
		"USE_TYPE_E_R_N_USERDEFINED":                    53,
		"USE_TYPE_E_R_N_USERMAKEAVAILABLELABELPROVIDED": 54,
		"USE_TYPE_E_R_N_USERMAKEAVAILABLEUSERPROVIDED":  55,
		"USE_TYPE_E_R_N_WEBCAST":                        56,
	}
)

func (x UseTypeERN) Enum() *UseTypeERN {
	p := new(UseTypeERN)
	*p = x
	return p
}

func (x UseTypeERN) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseTypeERN) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[243].Descriptor()
}

func (UseTypeERN) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[243]
}

func (x UseTypeERN) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseTypeERN.Descriptor instead.
func (UseTypeERN) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{243}
}

type UseTypeMWNL int32

const (
	UseTypeMWNL_USE_TYPE_M_W_N_L_UNSPECIFIED               UseTypeMWNL = 0
	UseTypeMWNL_USE_TYPE_M_W_N_L_ONDEMANDSTREAM            UseTypeMWNL = 1
	UseTypeMWNL_USE_TYPE_M_W_N_L_PERMANENTDOWNLOAD         UseTypeMWNL = 2
	UseTypeMWNL_USE_TYPE_M_W_N_L_PURCHASEASPHYSICALPRODUCT UseTypeMWNL = 3
	UseTypeMWNL_USE_TYPE_M_W_N_L_USEASRINGTONE             UseTypeMWNL = 4
)

// Enum value maps for UseTypeMWNL.
var (
	UseTypeMWNL_name = map[int32]string{
		0: "USE_TYPE_M_W_N_L_UNSPECIFIED",
		1: "USE_TYPE_M_W_N_L_ONDEMANDSTREAM",
		2: "USE_TYPE_M_W_N_L_PERMANENTDOWNLOAD",
		3: "USE_TYPE_M_W_N_L_PURCHASEASPHYSICALPRODUCT",
		4: "USE_TYPE_M_W_N_L_USEASRINGTONE",
	}
	UseTypeMWNL_value = map[string]int32{
		"USE_TYPE_M_W_N_L_UNSPECIFIED":               0,
		"USE_TYPE_M_W_N_L_ONDEMANDSTREAM":            1,
		"USE_TYPE_M_W_N_L_PERMANENTDOWNLOAD":         2,
		"USE_TYPE_M_W_N_L_PURCHASEASPHYSICALPRODUCT": 3,
		"USE_TYPE_M_W_N_L_USEASRINGTONE":             4,
	}
)

func (x UseTypeMWNL) Enum() *UseTypeMWNL {
	p := new(UseTypeMWNL)
	*p = x
	return p
}

func (x UseTypeMWNL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseTypeMWNL) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[244].Descriptor()
}

func (UseTypeMWNL) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[244]
}

func (x UseTypeMWNL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseTypeMWNL.Descriptor instead.
func (UseTypeMWNL) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{244}
}

type UseTypeRDR int32

const (
	UseTypeRDR_USE_TYPE_R_D_R_UNSPECIFIED                        UseTypeRDR = 0
	UseTypeRDR_USE_TYPE_R_D_R_ALL                                UseTypeRDR = 1
	UseTypeRDR_USE_TYPE_R_D_R_BROADCAST                          UseTypeRDR = 2
	UseTypeRDR_USE_TYPE_R_D_R_BROADCASTRADIO                     UseTypeRDR = 3
	UseTypeRDR_USE_TYPE_R_D_R_BROADCASTTV                        UseTypeRDR = 4
	UseTypeRDR_USE_TYPE_R_D_R_CABLERETRANSMISSION                UseTypeRDR = 5
	UseTypeRDR_USE_TYPE_R_D_R_CABLERETRANSMISSIONRADIO           UseTypeRDR = 6
	UseTypeRDR_USE_TYPE_R_D_R_CABLERETRANSMISSIONTV              UseTypeRDR = 7
	UseTypeRDR_USE_TYPE_R_D_R_CATCHUP                            UseTypeRDR = 8
	UseTypeRDR_USE_TYPE_R_D_R_CATCHUPRADIO                       UseTypeRDR = 9
	UseTypeRDR_USE_TYPE_R_D_R_CATCHUPTV                          UseTypeRDR = 10
	UseTypeRDR_USE_TYPE_R_D_R_COMMERCIALRENT                     UseTypeRDR = 11
	UseTypeRDR_USE_TYPE_R_D_R_CONDITIONALDOWNLOAD                UseTypeRDR = 12
	UseTypeRDR_USE_TYPE_R_D_R_DOWNLOAD                           UseTypeRDR = 13
	UseTypeRDR_USE_TYPE_R_D_R_DUB                                UseTypeRDR = 14
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORDISTRIBUTION                 UseTypeRDR = 15
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORONDEMANDSTREAMING            UseTypeRDR = 16
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORPUBLICPERFORMANCE            UseTypeRDR = 17
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORRADIO                        UseTypeRDR = 18
	UseTypeRDR_USE_TYPE_R_D_R_DUBFORTV                           UseTypeRDR = 19
	UseTypeRDR_USE_TYPE_R_D_R_LEND                               UseTypeRDR = 20
	UseTypeRDR_USE_TYPE_R_D_R_NONINTERACTIVESTREAM               UseTypeRDR = 21
	UseTypeRDR_USE_TYPE_R_D_R_ONDEMANDSTREAM                     UseTypeRDR = 22
	UseTypeRDR_USE_TYPE_R_D_R_PERFORMINPUBLIC                    UseTypeRDR = 23
	UseTypeRDR_USE_TYPE_R_D_R_PERMANENTDOWNLOAD                  UseTypeRDR = 24
	UseTypeRDR_USE_TYPE_R_D_R_PODCAST                            UseTypeRDR = 25
	UseTypeRDR_USE_TYPE_R_D_R_PRIVATECOPY                        UseTypeRDR = 26
	UseTypeRDR_USE_TYPE_R_D_R_RETRANSMISSION                     UseTypeRDR = 27
	UseTypeRDR_USE_TYPE_R_D_R_RINGBACKTONE                       UseTypeRDR = 28
	UseTypeRDR_USE_TYPE_R_D_R_SIMULCAST                          UseTypeRDR = 29
	UseTypeRDR_USE_TYPE_R_D_R_SIMULCASTRADIO                     UseTypeRDR = 30
	UseTypeRDR_USE_TYPE_R_D_R_SIMULCASTTV                        UseTypeRDR = 31
	UseTypeRDR_USE_TYPE_R_D_R_STREAM                             UseTypeRDR = 32
	UseTypeRDR_USE_TYPE_R_D_R_USEFORDATAMINING                   UseTypeRDR = 33
	UseTypeRDR_USE_TYPE_R_D_R_USEFOREDUCATIONANDORSOCIALPURPOSES UseTypeRDR = 34
	UseTypeRDR_USE_TYPE_R_D_R_USEFORTRAININGGENERATIVEAI         UseTypeRDR = 35
	UseTypeRDR_USE_TYPE_R_D_R_USEFORIDENTIFICATION               UseTypeRDR = 36
	UseTypeRDR_USE_TYPE_R_D_R_USEFORTRAININGNONGENERATIVEAI      UseTypeRDR = 37
	UseTypeRDR_USE_TYPE_R_D_R_USERDEFINED                        UseTypeRDR = 38
	UseTypeRDR_USE_TYPE_R_D_R_WEBCAST                            UseTypeRDR = 39
)

// Enum value maps for UseTypeRDR.
var (
	UseTypeRDR_name = map[int32]string{
		0:  "USE_TYPE_R_D_R_UNSPECIFIED",
		1:  "USE_TYPE_R_D_R_ALL",
		2:  "USE_TYPE_R_D_R_BROADCAST",
		3:  "USE_TYPE_R_D_R_BROADCASTRADIO",
		4:  "USE_TYPE_R_D_R_BROADCASTTV",
		5:  "USE_TYPE_R_D_R_CABLERETRANSMISSION",
		6:  "USE_TYPE_R_D_R_CABLERETRANSMISSIONRADIO",
		7:  "USE_TYPE_R_D_R_CABLERETRANSMISSIONTV",
		8:  "USE_TYPE_R_D_R_CATCHUP",
		9:  "USE_TYPE_R_D_R_CATCHUPRADIO",
		10: "USE_TYPE_R_D_R_CATCHUPTV",
		11: "USE_TYPE_R_D_R_COMMERCIALRENT",
		12: "USE_TYPE_R_D_R_CONDITIONALDOWNLOAD",
		13: "USE_TYPE_R_D_R_DOWNLOAD",
		14: "USE_TYPE_R_D_R_DUB",
		15: "USE_TYPE_R_D_R_DUBFORDISTRIBUTION",
		16: "USE_TYPE_R_D_R_DUBFORONDEMANDSTREAMING",
		17: "USE_TYPE_R_D_R_DUBFORPUBLICPERFORMANCE",
		18: "USE_TYPE_R_D_R_DUBFORRADIO",
		19: "USE_TYPE_R_D_R_DUBFORTV",
		20: "USE_TYPE_R_D_R_LEND",
		21: "USE_TYPE_R_D_R_NONINTERACTIVESTREAM",
		22: "USE_TYPE_R_D_R_ONDEMANDSTREAM",
		23: "USE_TYPE_R_D_R_PERFORMINPUBLIC",
		24: "USE_TYPE_R_D_R_PERMANENTDOWNLOAD",
		25: "USE_TYPE_R_D_R_PODCAST",
		26: "USE_TYPE_R_D_R_PRIVATECOPY",
		27: "USE_TYPE_R_D_R_RETRANSMISSION",
		28: "USE_TYPE_R_D_R_RINGBACKTONE",
		29: "USE_TYPE_R_D_R_SIMULCAST",
		30: "USE_TYPE_R_D_R_SIMULCASTRADIO",
		31: "USE_TYPE_R_D_R_SIMULCASTTV",
		32: "USE_TYPE_R_D_R_STREAM",
		33: "USE_TYPE_R_D_R_USEFORDATAMINING",
		34: "USE_TYPE_R_D_R_USEFOREDUCATIONANDORSOCIALPURPOSES",
		35: "USE_TYPE_R_D_R_USEFORTRAININGGENERATIVEAI",
		36: "USE_TYPE_R_D_R_USEFORIDENTIFICATION",
		37: "USE_TYPE_R_D_R_USEFORTRAININGNONGENERATIVEAI",
		38: "USE_TYPE_R_D_R_USERDEFINED",
		39: "USE_TYPE_R_D_R_WEBCAST",
	}
	UseTypeRDR_value = map[string]int32{
		"USE_TYPE_R_D_R_UNSPECIFIED":                        0,
		"USE_TYPE_R_D_R_ALL":                                1,
		"USE_TYPE_R_D_R_BROADCAST":                          2,
		"USE_TYPE_R_D_R_BROADCASTRADIO":                     3,
		"USE_TYPE_R_D_R_BROADCASTTV":                        4,
		"USE_TYPE_R_D_R_CABLERETRANSMISSION":                5,
		"USE_TYPE_R_D_R_CABLERETRANSMISSIONRADIO":           6,
		"USE_TYPE_R_D_R_CABLERETRANSMISSIONTV":              7,
		"USE_TYPE_R_D_R_CATCHUP":                            8,
		"USE_TYPE_R_D_R_CATCHUPRADIO":                       9,
		"USE_TYPE_R_D_R_CATCHUPTV":                          10,
		"USE_TYPE_R_D_R_COMMERCIALRENT":                     11,
		"USE_TYPE_R_D_R_CONDITIONALDOWNLOAD":                12,
		"USE_TYPE_R_D_R_DOWNLOAD":                           13,
		"USE_TYPE_R_D_R_DUB":                                14,
		"USE_TYPE_R_D_R_DUBFORDISTRIBUTION":                 15,
		"USE_TYPE_R_D_R_DUBFORONDEMANDSTREAMING":            16,
		"USE_TYPE_R_D_R_DUBFORPUBLICPERFORMANCE":            17,
		"USE_TYPE_R_D_R_DUBFORRADIO":                        18,
		"USE_TYPE_R_D_R_DUBFORTV":                           19,
		"USE_TYPE_R_D_R_LEND":                               20,
		"USE_TYPE_R_D_R_NONINTERACTIVESTREAM":               21,
		"USE_TYPE_R_D_R_ONDEMANDSTREAM":                     22,
		"USE_TYPE_R_D_R_PERFORMINPUBLIC":                    23,
		"USE_TYPE_R_D_R_PERMANENTDOWNLOAD":                  24,
		"USE_TYPE_R_D_R_PODCAST":                            25,
		"USE_TYPE_R_D_R_PRIVATECOPY":                        26,
		"USE_TYPE_R_D_R_RETRANSMISSION":                     27,
		"USE_TYPE_R_D_R_RINGBACKTONE":                       28,
		"USE_TYPE_R_D_R_SIMULCAST":                          29,
		"USE_TYPE_R_D_R_SIMULCASTRADIO":                     30,
		"USE_TYPE_R_D_R_SIMULCASTTV":                        31,
		"USE_TYPE_R_D_R_STREAM":                             32,
		"USE_TYPE_R_D_R_USEFORDATAMINING":                   33,
		"USE_TYPE_R_D_R_USEFOREDUCATIONANDORSOCIALPURPOSES": 34,
		"USE_TYPE_R_D_R_USEFORTRAININGGENERATIVEAI":         35,
		"USE_TYPE_R_D_R_USEFORIDENTIFICATION":               36,
		"USE_TYPE_R_D_R_USEFORTRAININGNONGENERATIVEAI":      37,
		"USE_TYPE_R_D_R_USERDEFINED":                        38,
		"USE_TYPE_R_D_R_WEBCAST":                            39,
	}
)

func (x UseTypeRDR) Enum() *UseTypeRDR {
	p := new(UseTypeRDR)
	*p = x
	return p
}

func (x UseTypeRDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseTypeRDR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[245].Descriptor()
}

func (UseTypeRDR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[245]
}

func (x UseTypeRDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseTypeRDR.Descriptor instead.
func (UseTypeRDR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{245}
}

type UserInterfaceType int32

const (
	UserInterfaceType_USER_INTERFACE_TYPE_UNSPECIFIED          UserInterfaceType = 0
	UserInterfaceType_USER_INTERFACE_TYPE_ASPERCONTRACT        UserInterfaceType = 1
	UserInterfaceType_USER_INTERFACE_TYPE_CONNECTEDDEVICE      UserInterfaceType = 2
	UserInterfaceType_USER_INTERFACE_TYPE_GAMECONSOLE          UserInterfaceType = 3
	UserInterfaceType_USER_INTERFACE_TYPE_JUKEBOX              UserInterfaceType = 4
	UserInterfaceType_USER_INTERFACE_TYPE_KARAOKEMACHINE       UserInterfaceType = 5
	UserInterfaceType_USER_INTERFACE_TYPE_KIOSK                UserInterfaceType = 6
	UserInterfaceType_USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX  UserInterfaceType = 7
	UserInterfaceType_USER_INTERFACE_TYPE_PERSONALCOMPUTER     UserInterfaceType = 8
	UserInterfaceType_USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER  UserInterfaceType = 9
	UserInterfaceType_USER_INTERFACE_TYPE_PORTABLEDEVICE       UserInterfaceType = 10
	UserInterfaceType_USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX UserInterfaceType = 11
	UserInterfaceType_USER_INTERFACE_TYPE_SMARTSPEAKERS        UserInterfaceType = 12
	UserInterfaceType_USER_INTERFACE_TYPE_UNKNOWN              UserInterfaceType = 13
	UserInterfaceType_USER_INTERFACE_TYPE_USERDEFINED          UserInterfaceType = 14
)

// Enum value maps for UserInterfaceType.
var (
	UserInterfaceType_name = map[int32]string{
		0:  "USER_INTERFACE_TYPE_UNSPECIFIED",
		1:  "USER_INTERFACE_TYPE_ASPERCONTRACT",
		2:  "USER_INTERFACE_TYPE_CONNECTEDDEVICE",
		3:  "USER_INTERFACE_TYPE_GAMECONSOLE",
		4:  "USER_INTERFACE_TYPE_JUKEBOX",
		5:  "USER_INTERFACE_TYPE_KARAOKEMACHINE",
		6:  "USER_INTERFACE_TYPE_KIOSK",
		7:  "USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX",
		8:  "USER_INTERFACE_TYPE_PERSONALCOMPUTER",
		9:  "USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER",
		10: "USER_INTERFACE_TYPE_PORTABLEDEVICE",
		11: "USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX",
		12: "USER_INTERFACE_TYPE_SMARTSPEAKERS",
		13: "USER_INTERFACE_TYPE_UNKNOWN",
		14: "USER_INTERFACE_TYPE_USERDEFINED",
	}
	UserInterfaceType_value = map[string]int32{
		"USER_INTERFACE_TYPE_UNSPECIFIED":          0,
		"USER_INTERFACE_TYPE_ASPERCONTRACT":        1,
		"USER_INTERFACE_TYPE_CONNECTEDDEVICE":      2,
		"USER_INTERFACE_TYPE_GAMECONSOLE":          3,
		"USER_INTERFACE_TYPE_JUKEBOX":              4,
		"USER_INTERFACE_TYPE_KARAOKEMACHINE":       5,
		"USER_INTERFACE_TYPE_KIOSK":                6,
		"USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX":  7,
		"USER_INTERFACE_TYPE_PERSONALCOMPUTER":     8,
		"USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER":  9,
		"USER_INTERFACE_TYPE_PORTABLEDEVICE":       10,
		"USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX": 11,
		"USER_INTERFACE_TYPE_SMARTSPEAKERS":        12,
		"USER_INTERFACE_TYPE_UNKNOWN":              13,
		"USER_INTERFACE_TYPE_USERDEFINED":          14,
	}
)

func (x UserInterfaceType) Enum() *UserInterfaceType {
	p := new(UserInterfaceType)
	*p = x
	return p
}

func (x UserInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[246].Descriptor()
}

func (UserInterfaceType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[246]
}

func (x UserInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInterfaceType.Descriptor instead.
func (UserInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{246}
}

type UserInterfaceTypeERN int32

const (
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_UNSPECIFIED          UserInterfaceTypeERN = 0
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_CONNECTEDDEVICE      UserInterfaceTypeERN = 1
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_GAMECONSOLE          UserInterfaceTypeERN = 2
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_JUKEBOX              UserInterfaceTypeERN = 3
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_KARAOKEMACHINE       UserInterfaceTypeERN = 4
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_KIOSK                UserInterfaceTypeERN = 5
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_LOCALSTORAGEJUKEBOX  UserInterfaceTypeERN = 6
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_PERSONALCOMPUTER     UserInterfaceTypeERN = 7
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_PHYSICALMEDIAWRITER  UserInterfaceTypeERN = 8
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_PORTABLEDEVICE       UserInterfaceTypeERN = 9
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_REMOTESTORAGEJUKEBOX UserInterfaceTypeERN = 10
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_SMARTSPEAKERS        UserInterfaceTypeERN = 11
	UserInterfaceTypeERN_USER_INTERFACE_TYPE_E_R_N_USERDEFINED          UserInterfaceTypeERN = 12
)

// Enum value maps for UserInterfaceTypeERN.
var (
	UserInterfaceTypeERN_name = map[int32]string{
		0:  "USER_INTERFACE_TYPE_E_R_N_UNSPECIFIED",
		1:  "USER_INTERFACE_TYPE_E_R_N_CONNECTEDDEVICE",
		2:  "USER_INTERFACE_TYPE_E_R_N_GAMECONSOLE",
		3:  "USER_INTERFACE_TYPE_E_R_N_JUKEBOX",
		4:  "USER_INTERFACE_TYPE_E_R_N_KARAOKEMACHINE",
		5:  "USER_INTERFACE_TYPE_E_R_N_KIOSK",
		6:  "USER_INTERFACE_TYPE_E_R_N_LOCALSTORAGEJUKEBOX",
		7:  "USER_INTERFACE_TYPE_E_R_N_PERSONALCOMPUTER",
		8:  "USER_INTERFACE_TYPE_E_R_N_PHYSICALMEDIAWRITER",
		9:  "USER_INTERFACE_TYPE_E_R_N_PORTABLEDEVICE",
		10: "USER_INTERFACE_TYPE_E_R_N_REMOTESTORAGEJUKEBOX",
		11: "USER_INTERFACE_TYPE_E_R_N_SMARTSPEAKERS",
		12: "USER_INTERFACE_TYPE_E_R_N_USERDEFINED",
	}
	UserInterfaceTypeERN_value = map[string]int32{
		"USER_INTERFACE_TYPE_E_R_N_UNSPECIFIED":          0,
		"USER_INTERFACE_TYPE_E_R_N_CONNECTEDDEVICE":      1,
		"USER_INTERFACE_TYPE_E_R_N_GAMECONSOLE":          2,
		"USER_INTERFACE_TYPE_E_R_N_JUKEBOX":              3,
		"USER_INTERFACE_TYPE_E_R_N_KARAOKEMACHINE":       4,
		"USER_INTERFACE_TYPE_E_R_N_KIOSK":                5,
		"USER_INTERFACE_TYPE_E_R_N_LOCALSTORAGEJUKEBOX":  6,
		"USER_INTERFACE_TYPE_E_R_N_PERSONALCOMPUTER":     7,
		"USER_INTERFACE_TYPE_E_R_N_PHYSICALMEDIAWRITER":  8,
		"USER_INTERFACE_TYPE_E_R_N_PORTABLEDEVICE":       9,
		"USER_INTERFACE_TYPE_E_R_N_REMOTESTORAGEJUKEBOX": 10,
		"USER_INTERFACE_TYPE_E_R_N_SMARTSPEAKERS":        11,
		"USER_INTERFACE_TYPE_E_R_N_USERDEFINED":          12,
	}
)

func (x UserInterfaceTypeERN) Enum() *UserInterfaceTypeERN {
	p := new(UserInterfaceTypeERN)
	*p = x
	return p
}

func (x UserInterfaceTypeERN) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInterfaceTypeERN) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[247].Descriptor()
}

func (UserInterfaceTypeERN) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[247]
}

func (x UserInterfaceTypeERN) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInterfaceTypeERN.Descriptor instead.
func (UserInterfaceTypeERN) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{247}
}

type VersionType int32

const (
	VersionType_VERSION_TYPE_UNSPECIFIED         VersionType = 0
	VersionType_VERSION_TYPE_ACAPPELLAVERSION    VersionType = 1
	VersionType_VERSION_TYPE_ALBUMVERSION        VersionType = 2
	VersionType_VERSION_TYPE_ALTERNATIVEVERSION  VersionType = 3
	VersionType_VERSION_TYPE_CLEANVERSION        VersionType = 4
	VersionType_VERSION_TYPE_DEMOVERSION         VersionType = 5
	VersionType_VERSION_TYPE_EDITEDVERSION       VersionType = 6
	VersionType_VERSION_TYPE_INSTRUMENTALVERSION VersionType = 7
	VersionType_VERSION_TYPE_KARAOKEVERSION      VersionType = 8
	VersionType_VERSION_TYPE_LIVEVERSION         VersionType = 9
	VersionType_VERSION_TYPE_MIXVERSION          VersionType = 10
	VersionType_VERSION_TYPE_MONOVERSION         VersionType = 11
	VersionType_VERSION_TYPE_RADIOVERSION        VersionType = 12
	VersionType_VERSION_TYPE_REMIXVERSION        VersionType = 13
	VersionType_VERSION_TYPE_SESSIONVERSION      VersionType = 14
	VersionType_VERSION_TYPE_SINGLEVERSION       VersionType = 15
	VersionType_VERSION_TYPE_STEREOVERSION       VersionType = 16
	VersionType_VERSION_TYPE_USERDEFINED         VersionType = 17
)

// Enum value maps for VersionType.
var (
	VersionType_name = map[int32]string{
		0:  "VERSION_TYPE_UNSPECIFIED",
		1:  "VERSION_TYPE_ACAPPELLAVERSION",
		2:  "VERSION_TYPE_ALBUMVERSION",
		3:  "VERSION_TYPE_ALTERNATIVEVERSION",
		4:  "VERSION_TYPE_CLEANVERSION",
		5:  "VERSION_TYPE_DEMOVERSION",
		6:  "VERSION_TYPE_EDITEDVERSION",
		7:  "VERSION_TYPE_INSTRUMENTALVERSION",
		8:  "VERSION_TYPE_KARAOKEVERSION",
		9:  "VERSION_TYPE_LIVEVERSION",
		10: "VERSION_TYPE_MIXVERSION",
		11: "VERSION_TYPE_MONOVERSION",
		12: "VERSION_TYPE_RADIOVERSION",
		13: "VERSION_TYPE_REMIXVERSION",
		14: "VERSION_TYPE_SESSIONVERSION",
		15: "VERSION_TYPE_SINGLEVERSION",
		16: "VERSION_TYPE_STEREOVERSION",
		17: "VERSION_TYPE_USERDEFINED",
	}
	VersionType_value = map[string]int32{
		"VERSION_TYPE_UNSPECIFIED":         0,
		"VERSION_TYPE_ACAPPELLAVERSION":    1,
		"VERSION_TYPE_ALBUMVERSION":        2,
		"VERSION_TYPE_ALTERNATIVEVERSION":  3,
		"VERSION_TYPE_CLEANVERSION":        4,
		"VERSION_TYPE_DEMOVERSION":         5,
		"VERSION_TYPE_EDITEDVERSION":       6,
		"VERSION_TYPE_INSTRUMENTALVERSION": 7,
		"VERSION_TYPE_KARAOKEVERSION":      8,
		"VERSION_TYPE_LIVEVERSION":         9,
		"VERSION_TYPE_MIXVERSION":          10,
		"VERSION_TYPE_MONOVERSION":         11,
		"VERSION_TYPE_RADIOVERSION":        12,
		"VERSION_TYPE_REMIXVERSION":        13,
		"VERSION_TYPE_SESSIONVERSION":      14,
		"VERSION_TYPE_SINGLEVERSION":       15,
		"VERSION_TYPE_STEREOVERSION":       16,
		"VERSION_TYPE_USERDEFINED":         17,
	}
)

func (x VersionType) Enum() *VersionType {
	p := new(VersionType)
	*p = x
	return p
}

func (x VersionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[248].Descriptor()
}

func (VersionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[248]
}

func (x VersionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionType.Descriptor instead.
func (VersionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{248}
}

type VersionTypeMWDR int32

const (
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_UNSPECIFIED   VersionTypeMWDR = 0
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_E_3D          VersionTypeMWDR = 1
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_AIRLINE       VersionTypeMWDR = 2
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_APP           VersionTypeMWDR = 3
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_BLACKANDWHITE VersionTypeMWDR = 4
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_CABLE         VersionTypeMWDR = 5
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_COLORIZED     VersionTypeMWDR = 6
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_DIRECTORSCUT  VersionTypeMWDR = 7
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_DSP           VersionTypeMWDR = 8
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_DOMESTIC      VersionTypeMWDR = 9
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_EXTENDED      VersionTypeMWDR = 10
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_HOMEVIDEO     VersionTypeMWDR = 11
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_INTERNET      VersionTypeMWDR = 12
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_INTERNATIONAL VersionTypeMWDR = 13
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_MUSICVIDEO    VersionTypeMWDR = 14
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_NETWORK       VersionTypeMWDR = 15
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_NEWDUBBING    VersionTypeMWDR = 16
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_NEWMUSIC      VersionTypeMWDR = 17
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_ORIGINAL      VersionTypeMWDR = 18
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_RESTORED      VersionTypeMWDR = 19
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_SHORTENED     VersionTypeMWDR = 20
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_SILENTMOVIE   VersionTypeMWDR = 21
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_SYNDICATED    VersionTypeMWDR = 22
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_THEATRICAL    VersionTypeMWDR = 23
	VersionTypeMWDR_VERSION_TYPE_M_W_D_R_THEMEPARK     VersionTypeMWDR = 24
)

// Enum value maps for VersionTypeMWDR.
var (
	VersionTypeMWDR_name = map[int32]string{
		0:  "VERSION_TYPE_M_W_D_R_UNSPECIFIED",
		1:  "VERSION_TYPE_M_W_D_R_E_3D",
		2:  "VERSION_TYPE_M_W_D_R_AIRLINE",
		3:  "VERSION_TYPE_M_W_D_R_APP",
		4:  "VERSION_TYPE_M_W_D_R_BLACKANDWHITE",
		5:  "VERSION_TYPE_M_W_D_R_CABLE",
		6:  "VERSION_TYPE_M_W_D_R_COLORIZED",
		7:  "VERSION_TYPE_M_W_D_R_DIRECTORSCUT",
		8:  "VERSION_TYPE_M_W_D_R_DSP",
		9:  "VERSION_TYPE_M_W_D_R_DOMESTIC",
		10: "VERSION_TYPE_M_W_D_R_EXTENDED",
		11: "VERSION_TYPE_M_W_D_R_HOMEVIDEO",
		12: "VERSION_TYPE_M_W_D_R_INTERNET",
		13: "VERSION_TYPE_M_W_D_R_INTERNATIONAL",
		14: "VERSION_TYPE_M_W_D_R_MUSICVIDEO",
		15: "VERSION_TYPE_M_W_D_R_NETWORK",
		16: "VERSION_TYPE_M_W_D_R_NEWDUBBING",
		17: "VERSION_TYPE_M_W_D_R_NEWMUSIC",
		18: "VERSION_TYPE_M_W_D_R_ORIGINAL",
		19: "VERSION_TYPE_M_W_D_R_RESTORED",
		20: "VERSION_TYPE_M_W_D_R_SHORTENED",
		21: "VERSION_TYPE_M_W_D_R_SILENTMOVIE",
		22: "VERSION_TYPE_M_W_D_R_SYNDICATED",
		23: "VERSION_TYPE_M_W_D_R_THEATRICAL",
		24: "VERSION_TYPE_M_W_D_R_THEMEPARK",
	}
	VersionTypeMWDR_value = map[string]int32{
		"VERSION_TYPE_M_W_D_R_UNSPECIFIED":   0,
		"VERSION_TYPE_M_W_D_R_E_3D":          1,
		"VERSION_TYPE_M_W_D_R_AIRLINE":       2,
		"VERSION_TYPE_M_W_D_R_APP":           3,
		"VERSION_TYPE_M_W_D_R_BLACKANDWHITE": 4,
		"VERSION_TYPE_M_W_D_R_CABLE":         5,
		"VERSION_TYPE_M_W_D_R_COLORIZED":     6,
		"VERSION_TYPE_M_W_D_R_DIRECTORSCUT":  7,
		"VERSION_TYPE_M_W_D_R_DSP":           8,
		"VERSION_TYPE_M_W_D_R_DOMESTIC":      9,
		"VERSION_TYPE_M_W_D_R_EXTENDED":      10,
		"VERSION_TYPE_M_W_D_R_HOMEVIDEO":     11,
		"VERSION_TYPE_M_W_D_R_INTERNET":      12,
		"VERSION_TYPE_M_W_D_R_INTERNATIONAL": 13,
		"VERSION_TYPE_M_W_D_R_MUSICVIDEO":    14,
		"VERSION_TYPE_M_W_D_R_NETWORK":       15,
		"VERSION_TYPE_M_W_D_R_NEWDUBBING":    16,
		"VERSION_TYPE_M_W_D_R_NEWMUSIC":      17,
		"VERSION_TYPE_M_W_D_R_ORIGINAL":      18,
		"VERSION_TYPE_M_W_D_R_RESTORED":      19,
		"VERSION_TYPE_M_W_D_R_SHORTENED":     20,
		"VERSION_TYPE_M_W_D_R_SILENTMOVIE":   21,
		"VERSION_TYPE_M_W_D_R_SYNDICATED":    22,
		"VERSION_TYPE_M_W_D_R_THEATRICAL":    23,
		"VERSION_TYPE_M_W_D_R_THEMEPARK":     24,
	}
)

func (x VersionTypeMWDR) Enum() *VersionTypeMWDR {
	p := new(VersionTypeMWDR)
	*p = x
	return p
}

func (x VersionTypeMWDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersionTypeMWDR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[249].Descriptor()
}

func (VersionTypeMWDR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[249]
}

func (x VersionTypeMWDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionTypeMWDR.Descriptor instead.
func (VersionTypeMWDR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{249}
}

type VideoCodecType int32

const (
	VideoCodecType_VIDEO_CODEC_TYPE_UNSPECIFIED      VideoCodecType = 0
	VideoCodecType_VIDEO_CODEC_TYPE_AVC              VideoCodecType = 1
	VideoCodecType_VIDEO_CODEC_TYPE_H_261            VideoCodecType = 2
	VideoCodecType_VIDEO_CODEC_TYPE_H_263            VideoCodecType = 3
	VideoCodecType_VIDEO_CODEC_TYPE_HEVC             VideoCodecType = 4
	VideoCodecType_VIDEO_CODEC_TYPE_MPEG_1           VideoCodecType = 5
	VideoCodecType_VIDEO_CODEC_TYPE_MPEG_2           VideoCodecType = 6
	VideoCodecType_VIDEO_CODEC_TYPE_MPEG_4           VideoCodecType = 7
	VideoCodecType_VIDEO_CODEC_TYPE_PRORES_422       VideoCodecType = 8
	VideoCodecType_VIDEO_CODEC_TYPE_PRORES_422_HQ    VideoCodecType = 9
	VideoCodecType_VIDEO_CODEC_TYPE_PRORES_422_LT    VideoCodecType = 10
	VideoCodecType_VIDEO_CODEC_TYPE_PRORES_422_PROXY VideoCodecType = 11
	VideoCodecType_VIDEO_CODEC_TYPE_PRORES_4444      VideoCodecType = 12
	VideoCodecType_VIDEO_CODEC_TYPE_PRORES_4444_XQ   VideoCodecType = 13
	VideoCodecType_VIDEO_CODEC_TYPE_REALVIDEO        VideoCodecType = 14
	VideoCodecType_VIDEO_CODEC_TYPE_SHOCKWAVE        VideoCodecType = 15
	VideoCodecType_VIDEO_CODEC_TYPE_UNKNOWN          VideoCodecType = 16
	VideoCodecType_VIDEO_CODEC_TYPE_USERDEFINED      VideoCodecType = 17
	VideoCodecType_VIDEO_CODEC_TYPE_WMV              VideoCodecType = 18
)

// Enum value maps for VideoCodecType.
var (
	VideoCodecType_name = map[int32]string{
		0:  "VIDEO_CODEC_TYPE_UNSPECIFIED",
		1:  "VIDEO_CODEC_TYPE_AVC",
		2:  "VIDEO_CODEC_TYPE_H_261",
		3:  "VIDEO_CODEC_TYPE_H_263",
		4:  "VIDEO_CODEC_TYPE_HEVC",
		5:  "VIDEO_CODEC_TYPE_MPEG_1",
		6:  "VIDEO_CODEC_TYPE_MPEG_2",
		7:  "VIDEO_CODEC_TYPE_MPEG_4",
		8:  "VIDEO_CODEC_TYPE_PRORES_422",
		9:  "VIDEO_CODEC_TYPE_PRORES_422_HQ",
		10: "VIDEO_CODEC_TYPE_PRORES_422_LT",
		11: "VIDEO_CODEC_TYPE_PRORES_422_PROXY",
		12: "VIDEO_CODEC_TYPE_PRORES_4444",
		13: "VIDEO_CODEC_TYPE_PRORES_4444_XQ",
		14: "VIDEO_CODEC_TYPE_REALVIDEO",
		15: "VIDEO_CODEC_TYPE_SHOCKWAVE",
		16: "VIDEO_CODEC_TYPE_UNKNOWN",
		17: "VIDEO_CODEC_TYPE_USERDEFINED",
		18: "VIDEO_CODEC_TYPE_WMV",
	}
	VideoCodecType_value = map[string]int32{
		"VIDEO_CODEC_TYPE_UNSPECIFIED":      0,
		"VIDEO_CODEC_TYPE_AVC":              1,
		"VIDEO_CODEC_TYPE_H_261":            2,
		"VIDEO_CODEC_TYPE_H_263":            3,
		"VIDEO_CODEC_TYPE_HEVC":             4,
		"VIDEO_CODEC_TYPE_MPEG_1":           5,
		"VIDEO_CODEC_TYPE_MPEG_2":           6,
		"VIDEO_CODEC_TYPE_MPEG_4":           7,
		"VIDEO_CODEC_TYPE_PRORES_422":       8,
		"VIDEO_CODEC_TYPE_PRORES_422_HQ":    9,
		"VIDEO_CODEC_TYPE_PRORES_422_LT":    10,
		"VIDEO_CODEC_TYPE_PRORES_422_PROXY": 11,
		"VIDEO_CODEC_TYPE_PRORES_4444":      12,
		"VIDEO_CODEC_TYPE_PRORES_4444_XQ":   13,
		"VIDEO_CODEC_TYPE_REALVIDEO":        14,
		"VIDEO_CODEC_TYPE_SHOCKWAVE":        15,
		"VIDEO_CODEC_TYPE_UNKNOWN":          16,
		"VIDEO_CODEC_TYPE_USERDEFINED":      17,
		"VIDEO_CODEC_TYPE_WMV":              18,
	}
)

func (x VideoCodecType) Enum() *VideoCodecType {
	p := new(VideoCodecType)
	*p = x
	return p
}

func (x VideoCodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoCodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[250].Descriptor()
}

func (VideoCodecType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[250]
}

func (x VideoCodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoCodecType.Descriptor instead.
func (VideoCodecType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{250}
}

type VideoDefinitionType int32

const (
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_UNSPECIFIED        VideoDefinitionType = 0
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_HIGHDEFINITION     VideoDefinitionType = 1
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_STANDARDDEFINITION VideoDefinitionType = 2
	VideoDefinitionType_VIDEO_DEFINITION_TYPE_USERDEFINED        VideoDefinitionType = 3
)

// Enum value maps for VideoDefinitionType.
var (
	VideoDefinitionType_name = map[int32]string{
		0: "VIDEO_DEFINITION_TYPE_UNSPECIFIED",
		1: "VIDEO_DEFINITION_TYPE_HIGHDEFINITION",
		2: "VIDEO_DEFINITION_TYPE_STANDARDDEFINITION",
		3: "VIDEO_DEFINITION_TYPE_USERDEFINED",
	}
	VideoDefinitionType_value = map[string]int32{
		"VIDEO_DEFINITION_TYPE_UNSPECIFIED":        0,
		"VIDEO_DEFINITION_TYPE_HIGHDEFINITION":     1,
		"VIDEO_DEFINITION_TYPE_STANDARDDEFINITION": 2,
		"VIDEO_DEFINITION_TYPE_USERDEFINED":        3,
	}
)

func (x VideoDefinitionType) Enum() *VideoDefinitionType {
	p := new(VideoDefinitionType)
	*p = x
	return p
}

func (x VideoDefinitionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoDefinitionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[251].Descriptor()
}

func (VideoDefinitionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[251]
}

func (x VideoDefinitionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoDefinitionType.Descriptor instead.
func (VideoDefinitionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{251}
}

type VideoDefinitionTypeDSR int32

const (
	VideoDefinitionTypeDSR_VIDEO_DEFINITION_TYPE_D_S_R_UNSPECIFIED        VideoDefinitionTypeDSR = 0
	VideoDefinitionTypeDSR_VIDEO_DEFINITION_TYPE_D_S_R_HIGHDEFINITION     VideoDefinitionTypeDSR = 1
	VideoDefinitionTypeDSR_VIDEO_DEFINITION_TYPE_D_S_R_STANDARDDEFINITION VideoDefinitionTypeDSR = 2
)

// Enum value maps for VideoDefinitionTypeDSR.
var (
	VideoDefinitionTypeDSR_name = map[int32]string{
		0: "VIDEO_DEFINITION_TYPE_D_S_R_UNSPECIFIED",
		1: "VIDEO_DEFINITION_TYPE_D_S_R_HIGHDEFINITION",
		2: "VIDEO_DEFINITION_TYPE_D_S_R_STANDARDDEFINITION",
	}
	VideoDefinitionTypeDSR_value = map[string]int32{
		"VIDEO_DEFINITION_TYPE_D_S_R_UNSPECIFIED":        0,
		"VIDEO_DEFINITION_TYPE_D_S_R_HIGHDEFINITION":     1,
		"VIDEO_DEFINITION_TYPE_D_S_R_STANDARDDEFINITION": 2,
	}
)

func (x VideoDefinitionTypeDSR) Enum() *VideoDefinitionTypeDSR {
	p := new(VideoDefinitionTypeDSR)
	*p = x
	return p
}

func (x VideoDefinitionTypeDSR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoDefinitionTypeDSR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[252].Descriptor()
}

func (VideoDefinitionTypeDSR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[252]
}

func (x VideoDefinitionTypeDSR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoDefinitionTypeDSR.Descriptor instead.
func (VideoDefinitionTypeDSR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{252}
}

type VideoType int32

const (
	VideoType_VIDEO_TYPE_UNSPECIFIED                   VideoType = 0
	VideoType_VIDEO_TYPE_ADULTCONTENT                  VideoType = 1
	VideoType_VIDEO_TYPE_ADVERTISEMENTVIDEO            VideoType = 2
	VideoType_VIDEO_TYPE_ADVICEMAGAZINE                VideoType = 3
	VideoType_VIDEO_TYPE_ANIMATION                     VideoType = 4
	VideoType_VIDEO_TYPE_BALLETVIDEO                   VideoType = 5
	VideoType_VIDEO_TYPE_BEHINDTHESCENES               VideoType = 6
	VideoType_VIDEO_TYPE_BLACKANDWHITEVIDEO            VideoType = 7
	VideoType_VIDEO_TYPE_CHILDRENSFILM                 VideoType = 8
	VideoType_VIDEO_TYPE_COLORIZEDVIDEO                VideoType = 9
	VideoType_VIDEO_TYPE_COLUMNVIDEO                   VideoType = 10
	VideoType_VIDEO_TYPE_CONCERTCLIP                   VideoType = 11
	VideoType_VIDEO_TYPE_CONCERTVIDEO                  VideoType = 12
	VideoType_VIDEO_TYPE_CORPORATEFILM                 VideoType = 13
	VideoType_VIDEO_TYPE_CREDITS                       VideoType = 14
	VideoType_VIDEO_TYPE_DOCUMENTARY                   VideoType = 15
	VideoType_VIDEO_TYPE_EDUCATIONALVIDEO              VideoType = 16
	VideoType_VIDEO_TYPE_EPISODE                       VideoType = 17
	VideoType_VIDEO_TYPE_FEATUREFILM                   VideoType = 18
	VideoType_VIDEO_TYPE_FICTION                       VideoType = 19
	VideoType_VIDEO_TYPE_INFOMERCIALVIDEO              VideoType = 20
	VideoType_VIDEO_TYPE_INTERVIEW                     VideoType = 21
	VideoType_VIDEO_TYPE_KARAOKE                       VideoType = 22
	VideoType_VIDEO_TYPE_LIVEEVENTVIDEO                VideoType = 23
	VideoType_VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO      VideoType = 24
	VideoType_VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO   VideoType = 25
	VideoType_VIDEO_TYPE_LYRICVIDEO                    VideoType = 26
	VideoType_VIDEO_TYPE_MAGAZINE                      VideoType = 27
	VideoType_VIDEO_TYPE_MENU                          VideoType = 28
	VideoType_VIDEO_TYPE_MULTIMEDIAVIDEO               VideoType = 29
	VideoType_VIDEO_TYPE_MUSICALWORKCLIP               VideoType = 30
	VideoType_VIDEO_TYPE_MUSICALWORKREADALONGVIDEO     VideoType = 31
	VideoType_VIDEO_TYPE_MUSICALWORKTRAILER            VideoType = 32
	VideoType_VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER       VideoType = 33
	VideoType_VIDEO_TYPE_NEWS                          VideoType = 34
	VideoType_VIDEO_TYPE_NONMUSICALWORKCLIP            VideoType = 35
	VideoType_VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO  VideoType = 36
	VideoType_VIDEO_TYPE_NONMUSICALWORKTRAILER         VideoType = 37
	VideoType_VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER    VideoType = 38
	VideoType_VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING VideoType = 39
	VideoType_VIDEO_TYPE_OPERAVIDEO                    VideoType = 40
	VideoType_VIDEO_TYPE_PERFORMANCE                   VideoType = 41
	VideoType_VIDEO_TYPE_READALONGVIDEO                VideoType = 42
	VideoType_VIDEO_TYPE_REALITYTVSHOWVIDEO            VideoType = 43
	VideoType_VIDEO_TYPE_SEASON                        VideoType = 44
	VideoType_VIDEO_TYPE_SERIALAUDIOVISUALRECORDING    VideoType = 45
	VideoType_VIDEO_TYPE_SERIES                        VideoType = 46
	VideoType_VIDEO_TYPE_SHORTFILM                     VideoType = 47
	VideoType_VIDEO_TYPE_SILENTVIDEO                   VideoType = 48
	VideoType_VIDEO_TYPE_SKETCHVIDEO                   VideoType = 49
	VideoType_VIDEO_TYPE_SOAPSITCOM                    VideoType = 50
	VideoType_VIDEO_TYPE_SPECIALEVENT                  VideoType = 51
	VideoType_VIDEO_TYPE_SPORT                         VideoType = 52
	VideoType_VIDEO_TYPE_THEATRICALWORKVIDEO           VideoType = 53
	VideoType_VIDEO_TYPE_TRAILERVIDEO                  VideoType = 54
	VideoType_VIDEO_TYPE_TVFILM                        VideoType = 55
	VideoType_VIDEO_TYPE_TVPROGRAM                     VideoType = 56
	VideoType_VIDEO_TYPE_TVSHOWVIDEO                   VideoType = 57
	VideoType_VIDEO_TYPE_UNKNOWN                       VideoType = 58
	VideoType_VIDEO_TYPE_VIDEOCHAPTER                  VideoType = 59
	VideoType_VIDEO_TYPE_VIDEOCLIP                     VideoType = 60
	VideoType_VIDEO_TYPE_VIDEOREPORT                   VideoType = 61
	VideoType_VIDEO_TYPE_VIDEOSTEM                     VideoType = 62
	VideoType_VIDEO_TYPE_DRAMA                         VideoType = 63
	VideoType_VIDEO_TYPE_DRAMATICOMUSICALVIDEO         VideoType = 64
	VideoType_VIDEO_TYPE_INTERACTIVERESOURCE           VideoType = 65
	VideoType_VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO     VideoType = 66
	VideoType_VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO  VideoType = 67
	VideoType_VIDEO_TYPE_USERDEFINED                   VideoType = 68
	VideoType_VIDEO_TYPE_WEBRESOURCE                   VideoType = 69
)

// Enum value maps for VideoType.
var (
	VideoType_name = map[int32]string{
		0:  "VIDEO_TYPE_UNSPECIFIED",
		1:  "VIDEO_TYPE_ADULTCONTENT",
		2:  "VIDEO_TYPE_ADVERTISEMENTVIDEO",
		3:  "VIDEO_TYPE_ADVICEMAGAZINE",
		4:  "VIDEO_TYPE_ANIMATION",
		5:  "VIDEO_TYPE_BALLETVIDEO",
		6:  "VIDEO_TYPE_BEHINDTHESCENES",
		7:  "VIDEO_TYPE_BLACKANDWHITEVIDEO",
		8:  "VIDEO_TYPE_CHILDRENSFILM",
		9:  "VIDEO_TYPE_COLORIZEDVIDEO",
		10: "VIDEO_TYPE_COLUMNVIDEO",
		11: "VIDEO_TYPE_CONCERTCLIP",
		12: "VIDEO_TYPE_CONCERTVIDEO",
		13: "VIDEO_TYPE_CORPORATEFILM",
		14: "VIDEO_TYPE_CREDITS",
		15: "VIDEO_TYPE_DOCUMENTARY",
		16: "VIDEO_TYPE_EDUCATIONALVIDEO",
		17: "VIDEO_TYPE_EPISODE",
		18: "VIDEO_TYPE_FEATUREFILM",
		19: "VIDEO_TYPE_FICTION",
		20: "VIDEO_TYPE_INFOMERCIALVIDEO",
		21: "VIDEO_TYPE_INTERVIEW",
		22: "VIDEO_TYPE_KARAOKE",
		23: "VIDEO_TYPE_LIVEEVENTVIDEO",
		24: "VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO",
		25: "VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO",
		26: "VIDEO_TYPE_LYRICVIDEO",
		27: "VIDEO_TYPE_MAGAZINE",
		28: "VIDEO_TYPE_MENU",
		29: "VIDEO_TYPE_MULTIMEDIAVIDEO",
		30: "VIDEO_TYPE_MUSICALWORKCLIP",
		31: "VIDEO_TYPE_MUSICALWORKREADALONGVIDEO",
		32: "VIDEO_TYPE_MUSICALWORKTRAILER",
		33: "VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER",
		34: "VIDEO_TYPE_NEWS",
		35: "VIDEO_TYPE_NONMUSICALWORKCLIP",
		36: "VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO",
		37: "VIDEO_TYPE_NONMUSICALWORKTRAILER",
		38: "VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER",
		39: "VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING",
		40: "VIDEO_TYPE_OPERAVIDEO",
		41: "VIDEO_TYPE_PERFORMANCE",
		42: "VIDEO_TYPE_READALONGVIDEO",
		43: "VIDEO_TYPE_REALITYTVSHOWVIDEO",
		44: "VIDEO_TYPE_SEASON",
		45: "VIDEO_TYPE_SERIALAUDIOVISUALRECORDING",
		46: "VIDEO_TYPE_SERIES",
		47: "VIDEO_TYPE_SHORTFILM",
		48: "VIDEO_TYPE_SILENTVIDEO",
		49: "VIDEO_TYPE_SKETCHVIDEO",
		50: "VIDEO_TYPE_SOAPSITCOM",
		51: "VIDEO_TYPE_SPECIALEVENT",
		52: "VIDEO_TYPE_SPORT",
		53: "VIDEO_TYPE_THEATRICALWORKVIDEO",
		54: "VIDEO_TYPE_TRAILERVIDEO",
		55: "VIDEO_TYPE_TVFILM",
		56: "VIDEO_TYPE_TVPROGRAM",
		57: "VIDEO_TYPE_TVSHOWVIDEO",
		58: "VIDEO_TYPE_UNKNOWN",
		59: "VIDEO_TYPE_VIDEOCHAPTER",
		60: "VIDEO_TYPE_VIDEOCLIP",
		61: "VIDEO_TYPE_VIDEOREPORT",
		62: "VIDEO_TYPE_VIDEOSTEM",
		63: "VIDEO_TYPE_DRAMA",
		64: "VIDEO_TYPE_DRAMATICOMUSICALVIDEO",
		65: "VIDEO_TYPE_INTERACTIVERESOURCE",
		66: "VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO",
		67: "VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO",
		68: "VIDEO_TYPE_USERDEFINED",
		69: "VIDEO_TYPE_WEBRESOURCE",
	}
	VideoType_value = map[string]int32{
		"VIDEO_TYPE_UNSPECIFIED":                   0,
		"VIDEO_TYPE_ADULTCONTENT":                  1,
		"VIDEO_TYPE_ADVERTISEMENTVIDEO":            2,
		"VIDEO_TYPE_ADVICEMAGAZINE":                3,
		"VIDEO_TYPE_ANIMATION":                     4,
		"VIDEO_TYPE_BALLETVIDEO":                   5,
		"VIDEO_TYPE_BEHINDTHESCENES":               6,
		"VIDEO_TYPE_BLACKANDWHITEVIDEO":            7,
		"VIDEO_TYPE_CHILDRENSFILM":                 8,
		"VIDEO_TYPE_COLORIZEDVIDEO":                9,
		"VIDEO_TYPE_COLUMNVIDEO":                   10,
		"VIDEO_TYPE_CONCERTCLIP":                   11,
		"VIDEO_TYPE_CONCERTVIDEO":                  12,
		"VIDEO_TYPE_CORPORATEFILM":                 13,
		"VIDEO_TYPE_CREDITS":                       14,
		"VIDEO_TYPE_DOCUMENTARY":                   15,
		"VIDEO_TYPE_EDUCATIONALVIDEO":              16,
		"VIDEO_TYPE_EPISODE":                       17,
		"VIDEO_TYPE_FEATUREFILM":                   18,
		"VIDEO_TYPE_FICTION":                       19,
		"VIDEO_TYPE_INFOMERCIALVIDEO":              20,
		"VIDEO_TYPE_INTERVIEW":                     21,
		"VIDEO_TYPE_KARAOKE":                       22,
		"VIDEO_TYPE_LIVEEVENTVIDEO":                23,
		"VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO":      24,
		"VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO":   25,
		"VIDEO_TYPE_LYRICVIDEO":                    26,
		"VIDEO_TYPE_MAGAZINE":                      27,
		"VIDEO_TYPE_MENU":                          28,
		"VIDEO_TYPE_MULTIMEDIAVIDEO":               29,
		"VIDEO_TYPE_MUSICALWORKCLIP":               30,
		"VIDEO_TYPE_MUSICALWORKREADALONGVIDEO":     31,
		"VIDEO_TYPE_MUSICALWORKTRAILER":            32,
		"VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER":       33,
		"VIDEO_TYPE_NEWS":                          34,
		"VIDEO_TYPE_NONMUSICALWORKCLIP":            35,
		"VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO":  36,
		"VIDEO_TYPE_NONMUSICALWORKTRAILER":         37,
		"VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER":    38,
		"VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING": 39,
		"VIDEO_TYPE_OPERAVIDEO":                    40,
		"VIDEO_TYPE_PERFORMANCE":                   41,
		"VIDEO_TYPE_READALONGVIDEO":                42,
		"VIDEO_TYPE_REALITYTVSHOWVIDEO":            43,
		"VIDEO_TYPE_SEASON":                        44,
		"VIDEO_TYPE_SERIALAUDIOVISUALRECORDING":    45,
		"VIDEO_TYPE_SERIES":                        46,
		"VIDEO_TYPE_SHORTFILM":                     47,
		"VIDEO_TYPE_SILENTVIDEO":                   48,
		"VIDEO_TYPE_SKETCHVIDEO":                   49,
		"VIDEO_TYPE_SOAPSITCOM":                    50,
		"VIDEO_TYPE_SPECIALEVENT":                  51,
		"VIDEO_TYPE_SPORT":                         52,
		"VIDEO_TYPE_THEATRICALWORKVIDEO":           53,
		"VIDEO_TYPE_TRAILERVIDEO":                  54,
		"VIDEO_TYPE_TVFILM":                        55,
		"VIDEO_TYPE_TVPROGRAM":                     56,
		"VIDEO_TYPE_TVSHOWVIDEO":                   57,
		"VIDEO_TYPE_UNKNOWN":                       58,
		"VIDEO_TYPE_VIDEOCHAPTER":                  59,
		"VIDEO_TYPE_VIDEOCLIP":                     60,
		"VIDEO_TYPE_VIDEOREPORT":                   61,
		"VIDEO_TYPE_VIDEOSTEM":                     62,
		"VIDEO_TYPE_DRAMA":                         63,
		"VIDEO_TYPE_DRAMATICOMUSICALVIDEO":         64,
		"VIDEO_TYPE_INTERACTIVERESOURCE":           65,
		"VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO":     66,
		"VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO":  67,
		"VIDEO_TYPE_USERDEFINED":                   68,
		"VIDEO_TYPE_WEBRESOURCE":                   69,
	}
)

func (x VideoType) Enum() *VideoType {
	p := new(VideoType)
	*p = x
	return p
}

func (x VideoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[253].Descriptor()
}

func (VideoType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[253]
}

func (x VideoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoType.Descriptor instead.
func (VideoType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{253}
}

type VideoTypeDSR int32

const (
	VideoTypeDSR_VIDEO_TYPE_D_S_R_UNSPECIFIED                   VideoTypeDSR = 0
	VideoTypeDSR_VIDEO_TYPE_D_S_R_ADULTCONTENT                  VideoTypeDSR = 1
	VideoTypeDSR_VIDEO_TYPE_D_S_R_ADVERTISEMENTVIDEO            VideoTypeDSR = 2
	VideoTypeDSR_VIDEO_TYPE_D_S_R_ADVICEMAGAZINE                VideoTypeDSR = 3
	VideoTypeDSR_VIDEO_TYPE_D_S_R_ANIMATION                     VideoTypeDSR = 4
	VideoTypeDSR_VIDEO_TYPE_D_S_R_BALLETVIDEO                   VideoTypeDSR = 5
	VideoTypeDSR_VIDEO_TYPE_D_S_R_BEHINDTHESCENES               VideoTypeDSR = 6
	VideoTypeDSR_VIDEO_TYPE_D_S_R_BLACKANDWHITEVIDEO            VideoTypeDSR = 7
	VideoTypeDSR_VIDEO_TYPE_D_S_R_CHILDRENSFILM                 VideoTypeDSR = 8
	VideoTypeDSR_VIDEO_TYPE_D_S_R_COLORIZEDVIDEO                VideoTypeDSR = 9
	VideoTypeDSR_VIDEO_TYPE_D_S_R_COLUMNVIDEO                   VideoTypeDSR = 10
	VideoTypeDSR_VIDEO_TYPE_D_S_R_CONCERTCLIP                   VideoTypeDSR = 11
	VideoTypeDSR_VIDEO_TYPE_D_S_R_CONCERTVIDEO                  VideoTypeDSR = 12
	VideoTypeDSR_VIDEO_TYPE_D_S_R_CORPORATEFILM                 VideoTypeDSR = 13
	VideoTypeDSR_VIDEO_TYPE_D_S_R_CREDITS                       VideoTypeDSR = 14
	VideoTypeDSR_VIDEO_TYPE_D_S_R_DOCUMENTARY                   VideoTypeDSR = 15
	VideoTypeDSR_VIDEO_TYPE_D_S_R_EDUCATIONALVIDEO              VideoTypeDSR = 16
	VideoTypeDSR_VIDEO_TYPE_D_S_R_EPISODE                       VideoTypeDSR = 17
	VideoTypeDSR_VIDEO_TYPE_D_S_R_FEATUREFILM                   VideoTypeDSR = 18
	VideoTypeDSR_VIDEO_TYPE_D_S_R_FICTION                       VideoTypeDSR = 19
	VideoTypeDSR_VIDEO_TYPE_D_S_R_INFOMERCIALVIDEO              VideoTypeDSR = 20
	VideoTypeDSR_VIDEO_TYPE_D_S_R_INTERVIEW                     VideoTypeDSR = 21
	VideoTypeDSR_VIDEO_TYPE_D_S_R_KARAOKE                       VideoTypeDSR = 22
	VideoTypeDSR_VIDEO_TYPE_D_S_R_LIVEEVENTVIDEO                VideoTypeDSR = 23
	VideoTypeDSR_VIDEO_TYPE_D_S_R_LONGFORMMUSICALWORKVIDEO      VideoTypeDSR = 24
	VideoTypeDSR_VIDEO_TYPE_D_S_R_LONGFORMNONMUSICALWORKVIDEO   VideoTypeDSR = 25
	VideoTypeDSR_VIDEO_TYPE_D_S_R_LYRICVIDEO                    VideoTypeDSR = 26
	VideoTypeDSR_VIDEO_TYPE_D_S_R_MAGAZINE                      VideoTypeDSR = 27
	VideoTypeDSR_VIDEO_TYPE_D_S_R_MENU                          VideoTypeDSR = 28
	VideoTypeDSR_VIDEO_TYPE_D_S_R_MULTIMEDIAVIDEO               VideoTypeDSR = 29
	VideoTypeDSR_VIDEO_TYPE_D_S_R_MUSICALWORKCLIP               VideoTypeDSR = 30
	VideoTypeDSR_VIDEO_TYPE_D_S_R_MUSICALWORKREADALONGVIDEO     VideoTypeDSR = 31
	VideoTypeDSR_VIDEO_TYPE_D_S_R_MUSICALWORKTRAILER            VideoTypeDSR = 32
	VideoTypeDSR_VIDEO_TYPE_D_S_R_MUSICALWORKVIDEOCHAPTER       VideoTypeDSR = 33
	VideoTypeDSR_VIDEO_TYPE_D_S_R_NEWS                          VideoTypeDSR = 34
	VideoTypeDSR_VIDEO_TYPE_D_S_R_NONMUSICALWORKCLIP            VideoTypeDSR = 35
	VideoTypeDSR_VIDEO_TYPE_D_S_R_NONMUSICALWORKREADALONGVIDEO  VideoTypeDSR = 36
	VideoTypeDSR_VIDEO_TYPE_D_S_R_NONMUSICALWORKTRAILER         VideoTypeDSR = 37
	VideoTypeDSR_VIDEO_TYPE_D_S_R_NONMUSICALWORKVIDEOCHAPTER    VideoTypeDSR = 38
	VideoTypeDSR_VIDEO_TYPE_D_S_R_NONSERIALAUDIOVISUALRECORDING VideoTypeDSR = 39
	VideoTypeDSR_VIDEO_TYPE_D_S_R_OPERAVIDEO                    VideoTypeDSR = 40
	VideoTypeDSR_VIDEO_TYPE_D_S_R_PERFORMANCE                   VideoTypeDSR = 41
	VideoTypeDSR_VIDEO_TYPE_D_S_R_READALONGVIDEO                VideoTypeDSR = 42
	VideoTypeDSR_VIDEO_TYPE_D_S_R_REALITYTVSHOWVIDEO            VideoTypeDSR = 43
	VideoTypeDSR_VIDEO_TYPE_D_S_R_SEASON                        VideoTypeDSR = 44
	VideoTypeDSR_VIDEO_TYPE_D_S_R_SERIALAUDIOVISUALRECORDING    VideoTypeDSR = 45
	VideoTypeDSR_VIDEO_TYPE_D_S_R_SERIES                        VideoTypeDSR = 46
	VideoTypeDSR_VIDEO_TYPE_D_S_R_SHORTFILM                     VideoTypeDSR = 47
	VideoTypeDSR_VIDEO_TYPE_D_S_R_SILENTVIDEO                   VideoTypeDSR = 48
	VideoTypeDSR_VIDEO_TYPE_D_S_R_SKETCHVIDEO                   VideoTypeDSR = 49
	VideoTypeDSR_VIDEO_TYPE_D_S_R_SOAPSITCOM                    VideoTypeDSR = 50
	VideoTypeDSR_VIDEO_TYPE_D_S_R_SPECIALEVENT                  VideoTypeDSR = 51
	VideoTypeDSR_VIDEO_TYPE_D_S_R_SPORT                         VideoTypeDSR = 52
	VideoTypeDSR_VIDEO_TYPE_D_S_R_THEATRICALWORKVIDEO           VideoTypeDSR = 53
	VideoTypeDSR_VIDEO_TYPE_D_S_R_TRAILERVIDEO                  VideoTypeDSR = 54
	VideoTypeDSR_VIDEO_TYPE_D_S_R_TVFILM                        VideoTypeDSR = 55
	VideoTypeDSR_VIDEO_TYPE_D_S_R_TVPROGRAM                     VideoTypeDSR = 56
	VideoTypeDSR_VIDEO_TYPE_D_S_R_TVSHOWVIDEO                   VideoTypeDSR = 57
	VideoTypeDSR_VIDEO_TYPE_D_S_R_UNKNOWN                       VideoTypeDSR = 58
	VideoTypeDSR_VIDEO_TYPE_D_S_R_VIDEOCHAPTER                  VideoTypeDSR = 59
	VideoTypeDSR_VIDEO_TYPE_D_S_R_VIDEOCLIP                     VideoTypeDSR = 60
	VideoTypeDSR_VIDEO_TYPE_D_S_R_VIDEOREPORT                   VideoTypeDSR = 61
	VideoTypeDSR_VIDEO_TYPE_D_S_R_VIDEOSTEM                     VideoTypeDSR = 62
)

// Enum value maps for VideoTypeDSR.
var (
	VideoTypeDSR_name = map[int32]string{
		0:  "VIDEO_TYPE_D_S_R_UNSPECIFIED",
		1:  "VIDEO_TYPE_D_S_R_ADULTCONTENT",
		2:  "VIDEO_TYPE_D_S_R_ADVERTISEMENTVIDEO",
		3:  "VIDEO_TYPE_D_S_R_ADVICEMAGAZINE",
		4:  "VIDEO_TYPE_D_S_R_ANIMATION",
		5:  "VIDEO_TYPE_D_S_R_BALLETVIDEO",
		6:  "VIDEO_TYPE_D_S_R_BEHINDTHESCENES",
		7:  "VIDEO_TYPE_D_S_R_BLACKANDWHITEVIDEO",
		8:  "VIDEO_TYPE_D_S_R_CHILDRENSFILM",
		9:  "VIDEO_TYPE_D_S_R_COLORIZEDVIDEO",
		10: "VIDEO_TYPE_D_S_R_COLUMNVIDEO",
		11: "VIDEO_TYPE_D_S_R_CONCERTCLIP",
		12: "VIDEO_TYPE_D_S_R_CONCERTVIDEO",
		13: "VIDEO_TYPE_D_S_R_CORPORATEFILM",
		14: "VIDEO_TYPE_D_S_R_CREDITS",
		15: "VIDEO_TYPE_D_S_R_DOCUMENTARY",
		16: "VIDEO_TYPE_D_S_R_EDUCATIONALVIDEO",
		17: "VIDEO_TYPE_D_S_R_EPISODE",
		18: "VIDEO_TYPE_D_S_R_FEATUREFILM",
		19: "VIDEO_TYPE_D_S_R_FICTION",
		20: "VIDEO_TYPE_D_S_R_INFOMERCIALVIDEO",
		21: "VIDEO_TYPE_D_S_R_INTERVIEW",
		22: "VIDEO_TYPE_D_S_R_KARAOKE",
		23: "VIDEO_TYPE_D_S_R_LIVEEVENTVIDEO",
		24: "VIDEO_TYPE_D_S_R_LONGFORMMUSICALWORKVIDEO",
		25: "VIDEO_TYPE_D_S_R_LONGFORMNONMUSICALWORKVIDEO",
		26: "VIDEO_TYPE_D_S_R_LYRICVIDEO",
		27: "VIDEO_TYPE_D_S_R_MAGAZINE",
		28: "VIDEO_TYPE_D_S_R_MENU",
		29: "VIDEO_TYPE_D_S_R_MULTIMEDIAVIDEO",
		30: "VIDEO_TYPE_D_S_R_MUSICALWORKCLIP",
		31: "VIDEO_TYPE_D_S_R_MUSICALWORKREADALONGVIDEO",
		32: "VIDEO_TYPE_D_S_R_MUSICALWORKTRAILER",
		33: "VIDEO_TYPE_D_S_R_MUSICALWORKVIDEOCHAPTER",
		34: "VIDEO_TYPE_D_S_R_NEWS",
		35: "VIDEO_TYPE_D_S_R_NONMUSICALWORKCLIP",
		36: "VIDEO_TYPE_D_S_R_NONMUSICALWORKREADALONGVIDEO",
		37: "VIDEO_TYPE_D_S_R_NONMUSICALWORKTRAILER",
		38: "VIDEO_TYPE_D_S_R_NONMUSICALWORKVIDEOCHAPTER",
		39: "VIDEO_TYPE_D_S_R_NONSERIALAUDIOVISUALRECORDING",
		40: "VIDEO_TYPE_D_S_R_OPERAVIDEO",
		41: "VIDEO_TYPE_D_S_R_PERFORMANCE",
		42: "VIDEO_TYPE_D_S_R_READALONGVIDEO",
		43: "VIDEO_TYPE_D_S_R_REALITYTVSHOWVIDEO",
		44: "VIDEO_TYPE_D_S_R_SEASON",
		45: "VIDEO_TYPE_D_S_R_SERIALAUDIOVISUALRECORDING",
		46: "VIDEO_TYPE_D_S_R_SERIES",
		47: "VIDEO_TYPE_D_S_R_SHORTFILM",
		48: "VIDEO_TYPE_D_S_R_SILENTVIDEO",
		49: "VIDEO_TYPE_D_S_R_SKETCHVIDEO",
		50: "VIDEO_TYPE_D_S_R_SOAPSITCOM",
		51: "VIDEO_TYPE_D_S_R_SPECIALEVENT",
		52: "VIDEO_TYPE_D_S_R_SPORT",
		53: "VIDEO_TYPE_D_S_R_THEATRICALWORKVIDEO",
		54: "VIDEO_TYPE_D_S_R_TRAILERVIDEO",
		55: "VIDEO_TYPE_D_S_R_TVFILM",
		56: "VIDEO_TYPE_D_S_R_TVPROGRAM",
		57: "VIDEO_TYPE_D_S_R_TVSHOWVIDEO",
		58: "VIDEO_TYPE_D_S_R_UNKNOWN",
		59: "VIDEO_TYPE_D_S_R_VIDEOCHAPTER",
		60: "VIDEO_TYPE_D_S_R_VIDEOCLIP",
		61: "VIDEO_TYPE_D_S_R_VIDEOREPORT",
		62: "VIDEO_TYPE_D_S_R_VIDEOSTEM",
	}
	VideoTypeDSR_value = map[string]int32{
		"VIDEO_TYPE_D_S_R_UNSPECIFIED":                   0,
		"VIDEO_TYPE_D_S_R_ADULTCONTENT":                  1,
		"VIDEO_TYPE_D_S_R_ADVERTISEMENTVIDEO":            2,
		"VIDEO_TYPE_D_S_R_ADVICEMAGAZINE":                3,
		"VIDEO_TYPE_D_S_R_ANIMATION":                     4,
		"VIDEO_TYPE_D_S_R_BALLETVIDEO":                   5,
		"VIDEO_TYPE_D_S_R_BEHINDTHESCENES":               6,
		"VIDEO_TYPE_D_S_R_BLACKANDWHITEVIDEO":            7,
		"VIDEO_TYPE_D_S_R_CHILDRENSFILM":                 8,
		"VIDEO_TYPE_D_S_R_COLORIZEDVIDEO":                9,
		"VIDEO_TYPE_D_S_R_COLUMNVIDEO":                   10,
		"VIDEO_TYPE_D_S_R_CONCERTCLIP":                   11,
		"VIDEO_TYPE_D_S_R_CONCERTVIDEO":                  12,
		"VIDEO_TYPE_D_S_R_CORPORATEFILM":                 13,
		"VIDEO_TYPE_D_S_R_CREDITS":                       14,
		"VIDEO_TYPE_D_S_R_DOCUMENTARY":                   15,
		"VIDEO_TYPE_D_S_R_EDUCATIONALVIDEO":              16,
		"VIDEO_TYPE_D_S_R_EPISODE":                       17,
		"VIDEO_TYPE_D_S_R_FEATUREFILM":                   18,
		"VIDEO_TYPE_D_S_R_FICTION":                       19,
		"VIDEO_TYPE_D_S_R_INFOMERCIALVIDEO":              20,
		"VIDEO_TYPE_D_S_R_INTERVIEW":                     21,
		"VIDEO_TYPE_D_S_R_KARAOKE":                       22,
		"VIDEO_TYPE_D_S_R_LIVEEVENTVIDEO":                23,
		"VIDEO_TYPE_D_S_R_LONGFORMMUSICALWORKVIDEO":      24,
		"VIDEO_TYPE_D_S_R_LONGFORMNONMUSICALWORKVIDEO":   25,
		"VIDEO_TYPE_D_S_R_LYRICVIDEO":                    26,
		"VIDEO_TYPE_D_S_R_MAGAZINE":                      27,
		"VIDEO_TYPE_D_S_R_MENU":                          28,
		"VIDEO_TYPE_D_S_R_MULTIMEDIAVIDEO":               29,
		"VIDEO_TYPE_D_S_R_MUSICALWORKCLIP":               30,
		"VIDEO_TYPE_D_S_R_MUSICALWORKREADALONGVIDEO":     31,
		"VIDEO_TYPE_D_S_R_MUSICALWORKTRAILER":            32,
		"VIDEO_TYPE_D_S_R_MUSICALWORKVIDEOCHAPTER":       33,
		"VIDEO_TYPE_D_S_R_NEWS":                          34,
		"VIDEO_TYPE_D_S_R_NONMUSICALWORKCLIP":            35,
		"VIDEO_TYPE_D_S_R_NONMUSICALWORKREADALONGVIDEO":  36,
		"VIDEO_TYPE_D_S_R_NONMUSICALWORKTRAILER":         37,
		"VIDEO_TYPE_D_S_R_NONMUSICALWORKVIDEOCHAPTER":    38,
		"VIDEO_TYPE_D_S_R_NONSERIALAUDIOVISUALRECORDING": 39,
		"VIDEO_TYPE_D_S_R_OPERAVIDEO":                    40,
		"VIDEO_TYPE_D_S_R_PERFORMANCE":                   41,
		"VIDEO_TYPE_D_S_R_READALONGVIDEO":                42,
		"VIDEO_TYPE_D_S_R_REALITYTVSHOWVIDEO":            43,
		"VIDEO_TYPE_D_S_R_SEASON":                        44,
		"VIDEO_TYPE_D_S_R_SERIALAUDIOVISUALRECORDING":    45,
		"VIDEO_TYPE_D_S_R_SERIES":                        46,
		"VIDEO_TYPE_D_S_R_SHORTFILM":                     47,
		"VIDEO_TYPE_D_S_R_SILENTVIDEO":                   48,
		"VIDEO_TYPE_D_S_R_SKETCHVIDEO":                   49,
		"VIDEO_TYPE_D_S_R_SOAPSITCOM":                    50,
		"VIDEO_TYPE_D_S_R_SPECIALEVENT":                  51,
		"VIDEO_TYPE_D_S_R_SPORT":                         52,
		"VIDEO_TYPE_D_S_R_THEATRICALWORKVIDEO":           53,
		"VIDEO_TYPE_D_S_R_TRAILERVIDEO":                  54,
		"VIDEO_TYPE_D_S_R_TVFILM":                        55,
		"VIDEO_TYPE_D_S_R_TVPROGRAM":                     56,
		"VIDEO_TYPE_D_S_R_TVSHOWVIDEO":                   57,
		"VIDEO_TYPE_D_S_R_UNKNOWN":                       58,
		"VIDEO_TYPE_D_S_R_VIDEOCHAPTER":                  59,
		"VIDEO_TYPE_D_S_R_VIDEOCLIP":                     60,
		"VIDEO_TYPE_D_S_R_VIDEOREPORT":                   61,
		"VIDEO_TYPE_D_S_R_VIDEOSTEM":                     62,
	}
)

func (x VideoTypeDSR) Enum() *VideoTypeDSR {
	p := new(VideoTypeDSR)
	*p = x
	return p
}

func (x VideoTypeDSR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoTypeDSR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[254].Descriptor()
}

func (VideoTypeDSR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[254]
}

func (x VideoTypeDSR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoTypeDSR.Descriptor instead.
func (VideoTypeDSR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{254}
}

type VideoTypeERN43 int32

const (
	VideoTypeERN43_VIDEO_TYPE_E_R_N43_UNSPECIFIED                  VideoTypeERN43 = 0
	VideoTypeERN43_VIDEO_TYPE_E_R_N43_CLIP                         VideoTypeERN43 = 1
	VideoTypeERN43_VIDEO_TYPE_E_R_N43_FRONTCOVERVIDEO              VideoTypeERN43 = 2
	VideoTypeERN43_VIDEO_TYPE_E_R_N43_LONGFORMMUSICALWORKVIDEO     VideoTypeERN43 = 3
	VideoTypeERN43_VIDEO_TYPE_E_R_N43_LONGFORMNONMUSICALWORKVIDEO  VideoTypeERN43 = 4
	VideoTypeERN43_VIDEO_TYPE_E_R_N43_SHORTFORMMUSICALWORKVIDEO    VideoTypeERN43 = 5
	VideoTypeERN43_VIDEO_TYPE_E_R_N43_SHORTFORMNONMUSICALWORKVIDEO VideoTypeERN43 = 6
	VideoTypeERN43_VIDEO_TYPE_E_R_N43_USERDEFINED                  VideoTypeERN43 = 7
)

// Enum value maps for VideoTypeERN43.
var (
	VideoTypeERN43_name = map[int32]string{
		0: "VIDEO_TYPE_E_R_N43_UNSPECIFIED",
		1: "VIDEO_TYPE_E_R_N43_CLIP",
		2: "VIDEO_TYPE_E_R_N43_FRONTCOVERVIDEO",
		3: "VIDEO_TYPE_E_R_N43_LONGFORMMUSICALWORKVIDEO",
		4: "VIDEO_TYPE_E_R_N43_LONGFORMNONMUSICALWORKVIDEO",
		5: "VIDEO_TYPE_E_R_N43_SHORTFORMMUSICALWORKVIDEO",
		6: "VIDEO_TYPE_E_R_N43_SHORTFORMNONMUSICALWORKVIDEO",
		7: "VIDEO_TYPE_E_R_N43_USERDEFINED",
	}
	VideoTypeERN43_value = map[string]int32{
		"VIDEO_TYPE_E_R_N43_UNSPECIFIED":                  0,
		"VIDEO_TYPE_E_R_N43_CLIP":                         1,
		"VIDEO_TYPE_E_R_N43_FRONTCOVERVIDEO":              2,
		"VIDEO_TYPE_E_R_N43_LONGFORMMUSICALWORKVIDEO":     3,
		"VIDEO_TYPE_E_R_N43_LONGFORMNONMUSICALWORKVIDEO":  4,
		"VIDEO_TYPE_E_R_N43_SHORTFORMMUSICALWORKVIDEO":    5,
		"VIDEO_TYPE_E_R_N43_SHORTFORMNONMUSICALWORKVIDEO": 6,
		"VIDEO_TYPE_E_R_N43_USERDEFINED":                  7,
	}
)

func (x VideoTypeERN43) Enum() *VideoTypeERN43 {
	p := new(VideoTypeERN43)
	*p = x
	return p
}

func (x VideoTypeERN43) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoTypeERN43) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[255].Descriptor()
}

func (VideoTypeERN43) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[255]
}

func (x VideoTypeERN43) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoTypeERN43.Descriptor instead.
func (VideoTypeERN43) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{255}
}

type VisualPerceptionType int32

const (
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_UNSPECIFIED VisualPerceptionType = 0
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_BACKGROUND  VisualPerceptionType = 1
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_USERDEFINED VisualPerceptionType = 2
	VisualPerceptionType_VISUAL_PERCEPTION_TYPE_VISUAL      VisualPerceptionType = 3
)

// Enum value maps for VisualPerceptionType.
var (
	VisualPerceptionType_name = map[int32]string{
		0: "VISUAL_PERCEPTION_TYPE_UNSPECIFIED",
		1: "VISUAL_PERCEPTION_TYPE_BACKGROUND",
		2: "VISUAL_PERCEPTION_TYPE_USERDEFINED",
		3: "VISUAL_PERCEPTION_TYPE_VISUAL",
	}
	VisualPerceptionType_value = map[string]int32{
		"VISUAL_PERCEPTION_TYPE_UNSPECIFIED": 0,
		"VISUAL_PERCEPTION_TYPE_BACKGROUND":  1,
		"VISUAL_PERCEPTION_TYPE_USERDEFINED": 2,
		"VISUAL_PERCEPTION_TYPE_VISUAL":      3,
	}
)

func (x VisualPerceptionType) Enum() *VisualPerceptionType {
	p := new(VisualPerceptionType)
	*p = x
	return p
}

func (x VisualPerceptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisualPerceptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[256].Descriptor()
}

func (VisualPerceptionType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[256]
}

func (x VisualPerceptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisualPerceptionType.Descriptor instead.
func (VisualPerceptionType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{256}
}

type VocalType int32

const (
	VocalType_VOCAL_TYPE_UNSPECIFIED  VocalType = 0
	VocalType_VOCAL_TYPE_INSTRUMENTAL VocalType = 1
	VocalType_VOCAL_TYPE_USERDEFINED  VocalType = 2
	VocalType_VOCAL_TYPE_VOCAL        VocalType = 3
)

// Enum value maps for VocalType.
var (
	VocalType_name = map[int32]string{
		0: "VOCAL_TYPE_UNSPECIFIED",
		1: "VOCAL_TYPE_INSTRUMENTAL",
		2: "VOCAL_TYPE_USERDEFINED",
		3: "VOCAL_TYPE_VOCAL",
	}
	VocalType_value = map[string]int32{
		"VOCAL_TYPE_UNSPECIFIED":  0,
		"VOCAL_TYPE_INSTRUMENTAL": 1,
		"VOCAL_TYPE_USERDEFINED":  2,
		"VOCAL_TYPE_VOCAL":        3,
	}
)

func (x VocalType) Enum() *VocalType {
	p := new(VocalType)
	*p = x
	return p
}

func (x VocalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VocalType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[257].Descriptor()
}

func (VocalType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[257]
}

func (x VocalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VocalType.Descriptor instead.
func (VocalType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{257}
}

type WorkPart int32

const (
	WorkPart_WORK_PART_UNSPECIFIED     WorkPart = 0
	WorkPart_WORK_PART_LYRICS          WorkPart = 1
	WorkPart_WORK_PART_LYRICSANDMELODY WorkPart = 2
	WorkPart_WORK_PART_MELODY          WorkPart = 3
)

// Enum value maps for WorkPart.
var (
	WorkPart_name = map[int32]string{
		0: "WORK_PART_UNSPECIFIED",
		1: "WORK_PART_LYRICS",
		2: "WORK_PART_LYRICSANDMELODY",
		3: "WORK_PART_MELODY",
	}
	WorkPart_value = map[string]int32{
		"WORK_PART_UNSPECIFIED":     0,
		"WORK_PART_LYRICS":          1,
		"WORK_PART_LYRICSANDMELODY": 2,
		"WORK_PART_MELODY":          3,
	}
)

func (x WorkPart) Enum() *WorkPart {
	p := new(WorkPart)
	*p = x
	return p
}

func (x WorkPart) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkPart) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[258].Descriptor()
}

func (WorkPart) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[258]
}

func (x WorkPart) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkPart.Descriptor instead.
func (WorkPart) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{258}
}

type WorkRelationshipTypeMWDR int32

const (
	WorkRelationshipTypeMWDR_WORK_RELATIONSHIP_TYPE_M_W_D_R_UNSPECIFIED   WorkRelationshipTypeMWDR = 0
	WorkRelationshipTypeMWDR_WORK_RELATIONSHIP_TYPE_M_W_D_R_CONTAINS      WorkRelationshipTypeMWDR = 1
	WorkRelationshipTypeMWDR_WORK_RELATIONSHIP_TYPE_M_W_D_R_ISCONTAINEDIN WorkRelationshipTypeMWDR = 2
	WorkRelationshipTypeMWDR_WORK_RELATIONSHIP_TYPE_M_W_D_R_UNKNOWN       WorkRelationshipTypeMWDR = 3
	WorkRelationshipTypeMWDR_WORK_RELATIONSHIP_TYPE_M_W_D_R_USERDEFINED   WorkRelationshipTypeMWDR = 4
)

// Enum value maps for WorkRelationshipTypeMWDR.
var (
	WorkRelationshipTypeMWDR_name = map[int32]string{
		0: "WORK_RELATIONSHIP_TYPE_M_W_D_R_UNSPECIFIED",
		1: "WORK_RELATIONSHIP_TYPE_M_W_D_R_CONTAINS",
		2: "WORK_RELATIONSHIP_TYPE_M_W_D_R_ISCONTAINEDIN",
		3: "WORK_RELATIONSHIP_TYPE_M_W_D_R_UNKNOWN",
		4: "WORK_RELATIONSHIP_TYPE_M_W_D_R_USERDEFINED",
	}
	WorkRelationshipTypeMWDR_value = map[string]int32{
		"WORK_RELATIONSHIP_TYPE_M_W_D_R_UNSPECIFIED":   0,
		"WORK_RELATIONSHIP_TYPE_M_W_D_R_CONTAINS":      1,
		"WORK_RELATIONSHIP_TYPE_M_W_D_R_ISCONTAINEDIN": 2,
		"WORK_RELATIONSHIP_TYPE_M_W_D_R_UNKNOWN":       3,
		"WORK_RELATIONSHIP_TYPE_M_W_D_R_USERDEFINED":   4,
	}
)

func (x WorkRelationshipTypeMWDR) Enum() *WorkRelationshipTypeMWDR {
	p := new(WorkRelationshipTypeMWDR)
	*p = x
	return p
}

func (x WorkRelationshipTypeMWDR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkRelationshipTypeMWDR) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[259].Descriptor()
}

func (WorkRelationshipTypeMWDR) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[259]
}

func (x WorkRelationshipTypeMWDR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkRelationshipTypeMWDR.Descriptor instead.
func (WorkRelationshipTypeMWDR) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{259}
}

type WorkType int32

const (
	WorkType_WORK_TYPE_UNSPECIFIED   WorkType = 0
	WorkType_WORK_TYPE_GRAPHICALWORK WorkType = 1
	WorkType_WORK_TYPE_LITERARYWORK  WorkType = 2
)

// Enum value maps for WorkType.
var (
	WorkType_name = map[int32]string{
		0: "WORK_TYPE_UNSPECIFIED",
		1: "WORK_TYPE_GRAPHICALWORK",
		2: "WORK_TYPE_LITERARYWORK",
	}
	WorkType_value = map[string]int32{
		"WORK_TYPE_UNSPECIFIED":   0,
		"WORK_TYPE_GRAPHICALWORK": 1,
		"WORK_TYPE_LITERARYWORK":  2,
	}
)

func (x WorkType) Enum() *WorkType {
	p := new(WorkType)
	*p = x
	return p
}

func (x WorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_meadv11_mead_proto_enumTypes[260].Descriptor()
}

func (WorkType) Type() protoreflect.EnumType {
	return &file_meadv11_mead_proto_enumTypes[260]
}

func (x WorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkType.Descriptor instead.
func (WorkType) EnumDescriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{260}
}

type MeadMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MessageHeader"
	MessageHeader *MessageHeader `protobuf:"bytes,1,opt,name=message_header,json=messageHeader,proto3" json:"message_header,omitempty" xml:"MessageHeader"`
	// @gotags: xml:"SubscriptionId"
	SubscriptionId string `protobuf:"bytes,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty" xml:"SubscriptionId"`
	// @gotags: xml:"MetadataSourceList"
	MetadataSourceList *MetadataSourceList `protobuf:"bytes,3,opt,name=metadata_source_list,json=metadataSourceList,proto3" json:"metadata_source_list,omitempty" xml:"MetadataSourceList"`
	// @gotags: xml:"WorkInformationList"
	WorkInformationList *WorkInformationList `protobuf:"bytes,4,opt,name=work_information_list,json=workInformationList,proto3" json:"work_information_list,omitempty" xml:"WorkInformationList"`
	// @gotags: xml:"ResourceInformationList"
	ResourceInformationList *ResourceInformationList `protobuf:"bytes,5,opt,name=resource_information_list,json=resourceInformationList,proto3" json:"resource_information_list,omitempty" xml:"ResourceInformationList"`
	// @gotags: xml:"ReleaseInformationList"
	ReleaseInformationList *ReleaseInformationList `protobuf:"bytes,6,opt,name=release_information_list,json=releaseInformationList,proto3" json:"release_information_list,omitempty" xml:"ReleaseInformationList"`
	// @gotags: xml:"AvsVersionId,attr"
	AvsVersionId string `protobuf:"bytes,7,opt,name=avs_version_id,json=avsVersionId,proto3" json:"avs_version_id,omitempty" xml:"AvsVersionId,attr"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,8,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MeadMessage) Reset() {
	*x = MeadMessage{}
	mi := &file_meadv11_mead_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeadMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeadMessage) ProtoMessage() {}

func (x *MeadMessage) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeadMessage.ProtoReflect.Descriptor instead.
func (*MeadMessage) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{0}
}

func (x *MeadMessage) GetMessageHeader() *MessageHeader {
	if x != nil {
		return x.MessageHeader
	}
	return nil
}

func (x *MeadMessage) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *MeadMessage) GetMetadataSourceList() *MetadataSourceList {
	if x != nil {
		return x.MetadataSourceList
	}
	return nil
}

func (x *MeadMessage) GetWorkInformationList() *WorkInformationList {
	if x != nil {
		return x.WorkInformationList
	}
	return nil
}

func (x *MeadMessage) GetResourceInformationList() *ResourceInformationList {
	if x != nil {
		return x.ResourceInformationList
	}
	return nil
}

func (x *MeadMessage) GetReleaseInformationList() *ReleaseInformationList {
	if x != nil {
		return x.ReleaseInformationList
	}
	return nil
}

func (x *MeadMessage) GetAvsVersionId() string {
	if x != nil {
		return x.AvsVersionId
	}
	return ""
}

func (x *MeadMessage) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

type Feed struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Choice:
	//
	//	*Feed_Author
	//	*Feed_Category
	//	*Feed_Contributor
	//	*Feed_Generator
	//	*Feed_Icon
	//	*Feed_Id
	//	*Feed_Link
	//	*Feed_Logo
	//	*Feed_Rights
	//	*Feed_Subtitle
	//	*Feed_Title
	//	*Feed_Updated
	//	*Feed_Entry
	Choice        isFeed_Choice `protobuf_oneof:"choice"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Feed) Reset() {
	*x = Feed{}
	mi := &file_meadv11_mead_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Feed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feed) ProtoMessage() {}

func (x *Feed) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feed.ProtoReflect.Descriptor instead.
func (*Feed) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{1}
}

func (x *Feed) GetChoice() isFeed_Choice {
	if x != nil {
		return x.Choice
	}
	return nil
}

func (x *Feed) GetAuthor() *Person {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Author); ok {
			return x.Author
		}
	}
	return nil
}

func (x *Feed) GetCategory() *Category {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Category); ok {
			return x.Category
		}
	}
	return nil
}

func (x *Feed) GetContributor() *Person {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Contributor); ok {
			return x.Contributor
		}
	}
	return nil
}

func (x *Feed) GetGenerator() *Generator {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Generator); ok {
			return x.Generator
		}
	}
	return nil
}

func (x *Feed) GetIcon() *Icon {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Icon); ok {
			return x.Icon
		}
	}
	return nil
}

func (x *Feed) GetId() *Id {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Id); ok {
			return x.Id
		}
	}
	return nil
}

func (x *Feed) GetLink() *Link {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Link); ok {
			return x.Link
		}
	}
	return nil
}

func (x *Feed) GetLogo() *Logo {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Logo); ok {
			return x.Logo
		}
	}
	return nil
}

func (x *Feed) GetRights() *Text {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Rights); ok {
			return x.Rights
		}
	}
	return nil
}

func (x *Feed) GetSubtitle() *Text {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Subtitle); ok {
			return x.Subtitle
		}
	}
	return nil
}

func (x *Feed) GetTitle() *Text {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Title); ok {
			return x.Title
		}
	}
	return nil
}

func (x *Feed) GetUpdated() *DateTime {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Updated); ok {
			return x.Updated
		}
	}
	return nil
}

func (x *Feed) GetEntry() *Entry {
	if x != nil {
		if x, ok := x.Choice.(*Feed_Entry); ok {
			return x.Entry
		}
	}
	return nil
}

type isFeed_Choice interface {
	isFeed_Choice()
}

type Feed_Author struct {
	// @gotags: xml:"author"
	Author *Person `protobuf:"bytes,1,opt,name=author,proto3,oneof" xml:"author"`
}

type Feed_Category struct {
	// @gotags: xml:"category"
	Category *Category `protobuf:"bytes,2,opt,name=category,proto3,oneof" xml:"category"`
}

type Feed_Contributor struct {
	// @gotags: xml:"contributor"
	Contributor *Person `protobuf:"bytes,3,opt,name=contributor,proto3,oneof" xml:"contributor"`
}

type Feed_Generator struct {
	// @gotags: xml:"generator"
	Generator *Generator `protobuf:"bytes,4,opt,name=generator,proto3,oneof" xml:"generator"`
}

type Feed_Icon struct {
	// @gotags: xml:"icon"
	Icon *Icon `protobuf:"bytes,5,opt,name=icon,proto3,oneof" xml:"icon"`
}

type Feed_Id struct {
	// @gotags: xml:"id"
	Id *Id `protobuf:"bytes,6,opt,name=id,proto3,oneof" xml:"id"`
}

type Feed_Link struct {
	// @gotags: xml:"link"
	Link *Link `protobuf:"bytes,7,opt,name=link,proto3,oneof" xml:"link"`
}

type Feed_Logo struct {
	// @gotags: xml:"logo"
	Logo *Logo `protobuf:"bytes,8,opt,name=logo,proto3,oneof" xml:"logo"`
}

type Feed_Rights struct {
	// @gotags: xml:"rights"
	Rights *Text `protobuf:"bytes,9,opt,name=rights,proto3,oneof" xml:"rights"`
}

type Feed_Subtitle struct {
	// @gotags: xml:"subtitle"
	Subtitle *Text `protobuf:"bytes,10,opt,name=subtitle,proto3,oneof" xml:"subtitle"`
}

type Feed_Title struct {
	// @gotags: xml:"title"
	Title *Text `protobuf:"bytes,11,opt,name=title,proto3,oneof" xml:"title"`
}

type Feed_Updated struct {
	// @gotags: xml:"updated"
	Updated *DateTime `protobuf:"bytes,12,opt,name=updated,proto3,oneof" xml:"updated"`
}

type Feed_Entry struct {
	// @gotags: xml:"entry"
	Entry *Entry `protobuf:"bytes,13,opt,name=entry,proto3,oneof" xml:"entry"`
}

func (*Feed_Author) isFeed_Choice() {}

func (*Feed_Category) isFeed_Choice() {}

func (*Feed_Contributor) isFeed_Choice() {}

func (*Feed_Generator) isFeed_Choice() {}

func (*Feed_Icon) isFeed_Choice() {}

func (*Feed_Id) isFeed_Choice() {}

func (*Feed_Link) isFeed_Choice() {}

func (*Feed_Logo) isFeed_Choice() {}

func (*Feed_Rights) isFeed_Choice() {}

func (*Feed_Subtitle) isFeed_Choice() {}

func (*Feed_Title) isFeed_Choice() {}

func (*Feed_Updated) isFeed_Choice() {}

func (*Feed_Entry) isFeed_Choice() {}

type AbsolutePitch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	// @gotags: xml:"Modulation"
	Modulation    []*Modulation `protobuf:"bytes,3,rep,name=modulation,proto3" json:"modulation,omitempty" xml:"Modulation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbsolutePitch) Reset() {
	*x = AbsolutePitch{}
	mi := &file_meadv11_mead_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsolutePitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsolutePitch) ProtoMessage() {}

func (x *AbsolutePitch) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsolutePitch.ProtoReflect.Descriptor instead.
func (*AbsolutePitch) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{2}
}

func (x *AbsolutePitch) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *AbsolutePitch) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AbsolutePitch) GetModulation() []*Modulation {
	if x != nil {
		return x.Modulation
	}
	return nil
}

type Activity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value *ActivityValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	// @gotags: xml:"Description"
	Description []*TextWithoutTerritory `protobuf:"bytes,3,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	// @gotags: xml:"LanguageAndScriptOfActivity"
	LanguageAndScriptOfActivity []string `protobuf:"bytes,4,rep,name=language_and_script_of_activity,json=languageAndScriptOfActivity,proto3" json:"language_and_script_of_activity,omitempty" xml:"LanguageAndScriptOfActivity"`
	// @gotags: xml:"TerritoryOfActivityDescription"
	TerritoryOfActivityDescription []*CurrentTerritoryCode `protobuf:"bytes,5,rep,name=territory_of_activity_description,json=territoryOfActivityDescription,proto3" json:"territory_of_activity_description,omitempty" xml:"TerritoryOfActivityDescription"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *Activity) Reset() {
	*x = Activity{}
	mi := &file_meadv11_mead_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{3}
}

func (x *Activity) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Activity) GetValue() *ActivityValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Activity) GetDescription() []*TextWithoutTerritory {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Activity) GetLanguageAndScriptOfActivity() []string {
	if x != nil {
		return x.LanguageAndScriptOfActivity
	}
	return nil
}

func (x *Activity) GetTerritoryOfActivityDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfActivityDescription
	}
	return nil
}

type ActivityValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ActivityValue) Reset() {
	*x = ActivityValue{}
	mi := &file_meadv11_mead_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityValue) ProtoMessage() {}

func (x *ActivityValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityValue.ProtoReflect.Descriptor instead.
func (*ActivityValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{4}
}

func (x *ActivityValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ActivityValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ActivityValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type AlternativeTitle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"TitleText"
	TitleText *TitleText `protobuf:"bytes,2,opt,name=title_text,json=titleText,proto3" json:"title_text,omitempty" xml:"TitleText"`
	// @gotags: xml:"SubTitle"
	SubTitle *TitleText `protobuf:"bytes,3,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty" xml:"SubTitle"`
	// @gotags: xml:"LanguageAndScriptOfTitle"
	LanguageAndScriptOfTitle []string `protobuf:"bytes,4,rep,name=language_and_script_of_title,json=languageAndScriptOfTitle,proto3" json:"language_and_script_of_title,omitempty" xml:"LanguageAndScriptOfTitle"`
	// @gotags: xml:"TitleType,attr"
	TitleType TitleType `protobuf:"varint,5,opt,name=title_type,json=titleType,proto3,enum=ddex.mead.v11.TitleType" json:"title_type,omitempty" xml:"TitleType,attr"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,7,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AlternativeTitle) Reset() {
	*x = AlternativeTitle{}
	mi := &file_meadv11_mead_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlternativeTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlternativeTitle) ProtoMessage() {}

func (x *AlternativeTitle) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlternativeTitle.ProtoReflect.Descriptor instead.
func (*AlternativeTitle) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{5}
}

func (x *AlternativeTitle) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *AlternativeTitle) GetTitleText() *TitleText {
	if x != nil {
		return x.TitleText
	}
	return nil
}

func (x *AlternativeTitle) GetSubTitle() *TitleText {
	if x != nil {
		return x.SubTitle
	}
	return nil
}

func (x *AlternativeTitle) GetLanguageAndScriptOfTitle() []string {
	if x != nil {
		return x.LanguageAndScriptOfTitle
	}
	return nil
}

func (x *AlternativeTitle) GetTitleType() TitleType {
	if x != nil {
		return x.TitleType
	}
	return TitleType_TITLE_TYPE_UNSPECIFIED
}

func (x *AlternativeTitle) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AlternativeTitle) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type Annotation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Text"
	Text          *TextWithFormat `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty" xml:"Text"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	mi := &file_meadv11_mead_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{6}
}

func (x *Annotation) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Annotation) GetText() *TextWithFormat {
	if x != nil {
		return x.Text
	}
	return nil
}

type ArtisticStyle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value *ArtistTypeValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	// @gotags: xml:"TerritoryOfArtisticStyleDescription"
	TerritoryOfArtisticStyleDescription []*CurrentTerritoryCode `protobuf:"bytes,3,rep,name=territory_of_artistic_style_description,json=territoryOfArtisticStyleDescription,proto3" json:"territory_of_artistic_style_description,omitempty" xml:"TerritoryOfArtisticStyleDescription"`
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *ArtisticStyle) Reset() {
	*x = ArtisticStyle{}
	mi := &file_meadv11_mead_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtisticStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtisticStyle) ProtoMessage() {}

func (x *ArtisticStyle) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtisticStyle.ProtoReflect.Descriptor instead.
func (*ArtisticStyle) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{7}
}

func (x *ArtisticStyle) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *ArtisticStyle) GetValue() *ArtistTypeValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ArtisticStyle) GetTerritoryOfArtisticStyleDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfArtisticStyleDescription
	}
	return nil
}

type BeatsPerMinute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	// @gotags: xml:"Modulation"
	Modulation    []*Modulation `protobuf:"bytes,3,rep,name=modulation,proto3" json:"modulation,omitempty" xml:"Modulation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeatsPerMinute) Reset() {
	*x = BeatsPerMinute{}
	mi := &file_meadv11_mead_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeatsPerMinute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeatsPerMinute) ProtoMessage() {}

func (x *BeatsPerMinute) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeatsPerMinute.ProtoReflect.Descriptor instead.
func (*BeatsPerMinute) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{8}
}

func (x *BeatsPerMinute) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *BeatsPerMinute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *BeatsPerMinute) GetModulation() []*Modulation {
	if x != nil {
		return x.Modulation
	}
	return nil
}

type ChildWorkHierarchy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"IsDescribedElement"
	IsDescribedElement bool `protobuf:"varint,1,opt,name=is_described_element,json=isDescribedElement,proto3" json:"is_described_element,omitempty" xml:"IsDescribedElement"`
	// @gotags: xml:"IsComplete"
	IsComplete bool `protobuf:"varint,2,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty" xml:"IsComplete"`
	// @gotags: xml:"SequenceNumber"
	SequenceNumber int32 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty" xml:"SequenceNumber"`
	// @gotags: xml:"WorkId"
	WorkId *MusicalWorkIdWithoutFlag `protobuf:"bytes,4,opt,name=work_id,json=workId,proto3" json:"work_id,omitempty" xml:"WorkId"`
	// @gotags: xml:"WorkTitle"
	WorkTitle []*WorkTitle `protobuf:"bytes,5,rep,name=work_title,json=workTitle,proto3" json:"work_title,omitempty" xml:"WorkTitle"`
	// @gotags: xml:"Child"
	Child []*ChildWorkHierarchy `protobuf:"bytes,6,rep,name=child,proto3" json:"child,omitempty" xml:"Child"`
	// @gotags: xml:"Form"
	Form          *Form `protobuf:"bytes,7,opt,name=form,proto3" json:"form,omitempty" xml:"Form"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChildWorkHierarchy) Reset() {
	*x = ChildWorkHierarchy{}
	mi := &file_meadv11_mead_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChildWorkHierarchy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildWorkHierarchy) ProtoMessage() {}

func (x *ChildWorkHierarchy) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildWorkHierarchy.ProtoReflect.Descriptor instead.
func (*ChildWorkHierarchy) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{9}
}

func (x *ChildWorkHierarchy) GetIsDescribedElement() bool {
	if x != nil {
		return x.IsDescribedElement
	}
	return false
}

func (x *ChildWorkHierarchy) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

func (x *ChildWorkHierarchy) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ChildWorkHierarchy) GetWorkId() *MusicalWorkIdWithoutFlag {
	if x != nil {
		return x.WorkId
	}
	return nil
}

func (x *ChildWorkHierarchy) GetWorkTitle() []*WorkTitle {
	if x != nil {
		return x.WorkTitle
	}
	return nil
}

func (x *ChildWorkHierarchy) GetChild() []*ChildWorkHierarchy {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *ChildWorkHierarchy) GetForm() *Form {
	if x != nil {
		return x.Form
	}
	return nil
}

type Contributor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"Identifier"
	Identifier *DetailedPartyId `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty" xml:"Identifier"`
	// @gotags: xml:"Name"
	Name *PartyNameWithPronunciation `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" xml:"Name"`
	// @gotags: xml:"Role"
	Role          []*ResourceContributorRole `protobuf:"bytes,3,rep,name=role,proto3" json:"role,omitempty" xml:"Role"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contributor) Reset() {
	*x = Contributor{}
	mi := &file_meadv11_mead_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contributor) ProtoMessage() {}

func (x *Contributor) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contributor.ProtoReflect.Descriptor instead.
func (*Contributor) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{10}
}

func (x *Contributor) GetIdentifier() *DetailedPartyId {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Contributor) GetName() *PartyNameWithPronunciation {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Contributor) GetRole() []*ResourceContributorRole {
	if x != nil {
		return x.Role
	}
	return nil
}

type DanceStyle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value *DanceStyleValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	// @gotags: xml:"Description"
	Description []*TextWithoutTerritory `protobuf:"bytes,3,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	// @gotags: xml:"LanguageAndScriptOfDanceStyle"
	LanguageAndScriptOfDanceStyle []string `protobuf:"bytes,4,rep,name=language_and_script_of_dance_style,json=languageAndScriptOfDanceStyle,proto3" json:"language_and_script_of_dance_style,omitempty" xml:"LanguageAndScriptOfDanceStyle"`
	// @gotags: xml:"TerritoryOfDanceStyleDescription"
	TerritoryOfDanceStyleDescription []*CurrentTerritoryCode `protobuf:"bytes,5,rep,name=territory_of_dance_style_description,json=territoryOfDanceStyleDescription,proto3" json:"territory_of_dance_style_description,omitempty" xml:"TerritoryOfDanceStyleDescription"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *DanceStyle) Reset() {
	*x = DanceStyle{}
	mi := &file_meadv11_mead_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DanceStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanceStyle) ProtoMessage() {}

func (x *DanceStyle) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanceStyle.ProtoReflect.Descriptor instead.
func (*DanceStyle) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{11}
}

func (x *DanceStyle) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *DanceStyle) GetValue() *DanceStyleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DanceStyle) GetDescription() []*TextWithoutTerritory {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *DanceStyle) GetLanguageAndScriptOfDanceStyle() []string {
	if x != nil {
		return x.LanguageAndScriptOfDanceStyle
	}
	return nil
}

func (x *DanceStyle) GetTerritoryOfDanceStyleDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfDanceStyleDescription
	}
	return nil
}

type DanceStyleValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DanceStyleValue) Reset() {
	*x = DanceStyleValue{}
	mi := &file_meadv11_mead_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DanceStyleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DanceStyleValue) ProtoMessage() {}

func (x *DanceStyleValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DanceStyleValue.ProtoReflect.Descriptor instead.
func (*DanceStyleValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{12}
}

func (x *DanceStyleValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DanceStyleValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DanceStyleValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type DerivedRecording struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"ResourceId"
	ResourceId *ResourceIdWithoutFlag `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty" xml:"ResourceId"`
	// @gotags: xml:"RelatedResourceType"
	RelatedResourceType *RelatedResourceType `protobuf:"bytes,3,opt,name=related_resource_type,json=relatedResourceType,proto3" json:"related_resource_type,omitempty" xml:"RelatedResourceType"`
	// @gotags: xml:"Title"
	Title []*TitleWithPronunciation `protobuf:"bytes,4,rep,name=title,proto3" json:"title,omitempty" xml:"Title"`
	// @gotags: xml:"DisplayArtistName"
	DisplayArtistName *DisplayArtistNameWithPronunciation `protobuf:"bytes,5,opt,name=display_artist_name,json=displayArtistName,proto3" json:"display_artist_name,omitempty" xml:"DisplayArtistName"`
	// @gotags: xml:"DisplayArtist"
	DisplayArtist []*PartyDescriptorWithPronunciation `protobuf:"bytes,6,rep,name=display_artist,json=displayArtist,proto3" json:"display_artist,omitempty" xml:"DisplayArtist"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DerivedRecording) Reset() {
	*x = DerivedRecording{}
	mi := &file_meadv11_mead_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivedRecording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivedRecording) ProtoMessage() {}

func (x *DerivedRecording) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivedRecording.ProtoReflect.Descriptor instead.
func (*DerivedRecording) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{13}
}

func (x *DerivedRecording) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *DerivedRecording) GetResourceId() *ResourceIdWithoutFlag {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *DerivedRecording) GetRelatedResourceType() *RelatedResourceType {
	if x != nil {
		return x.RelatedResourceType
	}
	return nil
}

func (x *DerivedRecording) GetTitle() []*TitleWithPronunciation {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *DerivedRecording) GetDisplayArtistName() *DisplayArtistNameWithPronunciation {
	if x != nil {
		return x.DisplayArtistName
	}
	return nil
}

func (x *DerivedRecording) GetDisplayArtist() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.DisplayArtist
	}
	return nil
}

type DisplaySubTitle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"Title"
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" xml:"Title"`
	// @gotags: xml:"Pronunciation"
	Pronunciation []*Pronunciation `protobuf:"bytes,2,rep,name=pronunciation,proto3" json:"pronunciation,omitempty" xml:"Pronunciation"`
	// @gotags: xml:"SequenceNumber,attr"
	SequenceNumber int32 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty" xml:"SequenceNumber,attr"`
	// @gotags: xml:"IsDisplayedInTitle,attr"
	IsDisplayedInTitle bool `protobuf:"varint,4,opt,name=is_displayed_in_title,json=isDisplayedInTitle,proto3" json:"is_displayed_in_title,omitempty" xml:"IsDisplayedInTitle,attr"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,6,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	// @gotags: xml:"SubTitleType,attr"
	SubTitleType  string `protobuf:"bytes,7,opt,name=sub_title_type,json=subTitleType,proto3" json:"sub_title_type,omitempty" xml:"SubTitleType,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisplaySubTitle) Reset() {
	*x = DisplaySubTitle{}
	mi := &file_meadv11_mead_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisplaySubTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplaySubTitle) ProtoMessage() {}

func (x *DisplaySubTitle) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplaySubTitle.ProtoReflect.Descriptor instead.
func (*DisplaySubTitle) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{14}
}

func (x *DisplaySubTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DisplaySubTitle) GetPronunciation() []*Pronunciation {
	if x != nil {
		return x.Pronunciation
	}
	return nil
}

func (x *DisplaySubTitle) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *DisplaySubTitle) GetIsDisplayedInTitle() bool {
	if x != nil {
		return x.IsDisplayedInTitle
	}
	return false
}

func (x *DisplaySubTitle) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DisplaySubTitle) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

func (x *DisplaySubTitle) GetSubTitleType() string {
	if x != nil {
		return x.SubTitleType
	}
	return ""
}

type DisplayTitle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"TitleText"
	TitleText *TitleText `protobuf:"bytes,1,opt,name=title_text,json=titleText,proto3" json:"title_text,omitempty" xml:"TitleText"`
	// @gotags: xml:"SubTitle"
	SubTitle []*DisplaySubTitle `protobuf:"bytes,2,rep,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty" xml:"SubTitle"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,3,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	// @gotags: xml:"ApplicableTerritoryCode,attr"
	ApplicableTerritoryCode *CurrentTerritoryCode `protobuf:"bytes,4,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty" xml:"ApplicableTerritoryCode,attr"`
	// @gotags: xml:"IsDefault,attr"
	IsDefault     bool `protobuf:"varint,5,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty" xml:"IsDefault,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisplayTitle) Reset() {
	*x = DisplayTitle{}
	mi := &file_meadv11_mead_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisplayTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayTitle) ProtoMessage() {}

func (x *DisplayTitle) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayTitle.ProtoReflect.Descriptor instead.
func (*DisplayTitle) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{15}
}

func (x *DisplayTitle) GetTitleText() *TitleText {
	if x != nil {
		return x.TitleText
	}
	return nil
}

func (x *DisplayTitle) GetSubTitle() []*DisplaySubTitle {
	if x != nil {
		return x.SubTitle
	}
	return nil
}

func (x *DisplayTitle) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

func (x *DisplayTitle) GetApplicableTerritoryCode() *CurrentTerritoryCode {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return nil
}

func (x *DisplayTitle) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type Entry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Choice:
	//
	//	*Entry_Author
	//	*Entry_Category
	//	*Entry_Content
	//	*Entry_Contributor
	//	*Entry_Id
	//	*Entry_Link
	//	*Entry_Published
	//	*Entry_Rights
	//	*Entry_Source
	//	*Entry_Summary
	//	*Entry_Title
	//	*Entry_Updated
	//	*Entry_SubscriptionId
	Choice isEntry_Choice `protobuf_oneof:"choice"`
	// @gotags: xml:"AvsVersionId,attr"
	AvsVersionId  string `protobuf:"bytes,14,opt,name=avs_version_id,json=avsVersionId,proto3" json:"avs_version_id,omitempty" xml:"AvsVersionId,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entry) Reset() {
	*x = Entry{}
	mi := &file_meadv11_mead_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{16}
}

func (x *Entry) GetChoice() isEntry_Choice {
	if x != nil {
		return x.Choice
	}
	return nil
}

func (x *Entry) GetAuthor() *Person {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Author); ok {
			return x.Author
		}
	}
	return nil
}

func (x *Entry) GetCategory() *Category {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Category); ok {
			return x.Category
		}
	}
	return nil
}

func (x *Entry) GetContent() *Content {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Content); ok {
			return x.Content
		}
	}
	return nil
}

func (x *Entry) GetContributor() *Person {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Contributor); ok {
			return x.Contributor
		}
	}
	return nil
}

func (x *Entry) GetId() *Id {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Id); ok {
			return x.Id
		}
	}
	return nil
}

func (x *Entry) GetLink() *Link {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Link); ok {
			return x.Link
		}
	}
	return nil
}

func (x *Entry) GetPublished() *DateTime {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Published); ok {
			return x.Published
		}
	}
	return nil
}

func (x *Entry) GetRights() *Text {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Rights); ok {
			return x.Rights
		}
	}
	return nil
}

func (x *Entry) GetSource() *Source {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Source); ok {
			return x.Source
		}
	}
	return nil
}

func (x *Entry) GetSummary() *Text {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Summary); ok {
			return x.Summary
		}
	}
	return nil
}

func (x *Entry) GetTitle() *Text {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Title); ok {
			return x.Title
		}
	}
	return nil
}

func (x *Entry) GetUpdated() *DateTime {
	if x != nil {
		if x, ok := x.Choice.(*Entry_Updated); ok {
			return x.Updated
		}
	}
	return nil
}

func (x *Entry) GetSubscriptionId() string {
	if x != nil {
		if x, ok := x.Choice.(*Entry_SubscriptionId); ok {
			return x.SubscriptionId
		}
	}
	return ""
}

func (x *Entry) GetAvsVersionId() string {
	if x != nil {
		return x.AvsVersionId
	}
	return ""
}

type isEntry_Choice interface {
	isEntry_Choice()
}

type Entry_Author struct {
	// @gotags: xml:"author"
	Author *Person `protobuf:"bytes,1,opt,name=author,proto3,oneof" xml:"author"`
}

type Entry_Category struct {
	// @gotags: xml:"category"
	Category *Category `protobuf:"bytes,2,opt,name=category,proto3,oneof" xml:"category"`
}

type Entry_Content struct {
	// @gotags: xml:"content"
	Content *Content `protobuf:"bytes,3,opt,name=content,proto3,oneof" xml:"content"`
}

type Entry_Contributor struct {
	// @gotags: xml:"contributor"
	Contributor *Person `protobuf:"bytes,4,opt,name=contributor,proto3,oneof" xml:"contributor"`
}

type Entry_Id struct {
	// @gotags: xml:"id"
	Id *Id `protobuf:"bytes,5,opt,name=id,proto3,oneof" xml:"id"`
}

type Entry_Link struct {
	// @gotags: xml:"link"
	Link *Link `protobuf:"bytes,6,opt,name=link,proto3,oneof" xml:"link"`
}

type Entry_Published struct {
	// @gotags: xml:"published"
	Published *DateTime `protobuf:"bytes,7,opt,name=published,proto3,oneof" xml:"published"`
}

type Entry_Rights struct {
	// @gotags: xml:"rights"
	Rights *Text `protobuf:"bytes,8,opt,name=rights,proto3,oneof" xml:"rights"`
}

type Entry_Source struct {
	// @gotags: xml:"source"
	Source *Source `protobuf:"bytes,9,opt,name=source,proto3,oneof" xml:"source"`
}

type Entry_Summary struct {
	// @gotags: xml:"summary"
	Summary *Text `protobuf:"bytes,10,opt,name=summary,proto3,oneof" xml:"summary"`
}

type Entry_Title struct {
	// @gotags: xml:"title"
	Title *Text `protobuf:"bytes,11,opt,name=title,proto3,oneof" xml:"title"`
}

type Entry_Updated struct {
	// @gotags: xml:"updated"
	Updated *DateTime `protobuf:"bytes,12,opt,name=updated,proto3,oneof" xml:"updated"`
}

type Entry_SubscriptionId struct {
	// @gotags: xml:"SubscriptionId"
	SubscriptionId string `protobuf:"bytes,13,opt,name=subscription_id,json=subscriptionId,proto3,oneof" xml:"SubscriptionId"`
}

func (*Entry_Author) isEntry_Choice() {}

func (*Entry_Category) isEntry_Choice() {}

func (*Entry_Content) isEntry_Choice() {}

func (*Entry_Contributor) isEntry_Choice() {}

func (*Entry_Id) isEntry_Choice() {}

func (*Entry_Link) isEntry_Choice() {}

func (*Entry_Published) isEntry_Choice() {}

func (*Entry_Rights) isEntry_Choice() {}

func (*Entry_Source) isEntry_Choice() {}

func (*Entry_Summary) isEntry_Choice() {}

func (*Entry_Title) isEntry_Choice() {}

func (*Entry_Updated) isEntry_Choice() {}

func (*Entry_SubscriptionId) isEntry_Choice() {}

type Flag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value         bool `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flag) Reset() {
	*x = Flag{}
	mi := &file_meadv11_mead_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{17}
}

func (x *Flag) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Flag) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type Form struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value         *FormValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Form) Reset() {
	*x = Form{}
	mi := &file_meadv11_mead_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Form) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Form) ProtoMessage() {}

func (x *Form) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Form.ProtoReflect.Descriptor instead.
func (*Form) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{18}
}

func (x *Form) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Form) GetValue() *FormValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type FormValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FormValue) Reset() {
	*x = FormValue{}
	mi := &file_meadv11_mead_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormValue) ProtoMessage() {}

func (x *FormValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormValue.ProtoReflect.Descriptor instead.
func (*FormValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{19}
}

func (x *FormValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FormValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FormValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type GenreCategory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"TerritoryOfGenreCategoryDescription"
	TerritoryOfGenreCategoryDescription []*CurrentTerritoryCode `protobuf:"bytes,2,rep,name=territory_of_genre_category_description,json=territoryOfGenreCategoryDescription,proto3" json:"territory_of_genre_category_description,omitempty" xml:"TerritoryOfGenreCategoryDescription"`
	// @gotags: xml:"Value"
	Value *GenreCategoryValue `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	// @gotags: xml:"Description"
	Description   []*TextWithoutTerritory `protobuf:"bytes,4,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenreCategory) Reset() {
	*x = GenreCategory{}
	mi := &file_meadv11_mead_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenreCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenreCategory) ProtoMessage() {}

func (x *GenreCategory) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenreCategory.ProtoReflect.Descriptor instead.
func (*GenreCategory) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{20}
}

func (x *GenreCategory) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *GenreCategory) GetTerritoryOfGenreCategoryDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfGenreCategoryDescription
	}
	return nil
}

func (x *GenreCategory) GetValue() *GenreCategoryValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GenreCategory) GetDescription() []*TextWithoutTerritory {
	if x != nil {
		return x.Description
	}
	return nil
}

type Harmony struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"RootChordNote"
	RootChordNote *RootChordNote `protobuf:"bytes,2,opt,name=root_chord_note,json=rootChordNote,proto3" json:"root_chord_note,omitempty" xml:"RootChordNote"`
	// @gotags: xml:"RootChordQuality"
	RootChordQuality *RootChordQuality `protobuf:"bytes,3,opt,name=root_chord_quality,json=rootChordQuality,proto3" json:"root_chord_quality,omitempty" xml:"RootChordQuality"`
	// @gotags: xml:"Mode"
	Mode *Mode `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty" xml:"Mode"`
	// @gotags: xml:"Modulation"
	Modulation    []*HarmonyModulation `protobuf:"bytes,5,rep,name=modulation,proto3" json:"modulation,omitempty" xml:"Modulation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Harmony) Reset() {
	*x = Harmony{}
	mi := &file_meadv11_mead_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Harmony) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Harmony) ProtoMessage() {}

func (x *Harmony) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Harmony.ProtoReflect.Descriptor instead.
func (*Harmony) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{21}
}

func (x *Harmony) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Harmony) GetRootChordNote() *RootChordNote {
	if x != nil {
		return x.RootChordNote
	}
	return nil
}

func (x *Harmony) GetRootChordQuality() *RootChordQuality {
	if x != nil {
		return x.RootChordQuality
	}
	return nil
}

func (x *Harmony) GetMode() *Mode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Harmony) GetModulation() []*HarmonyModulation {
	if x != nil {
		return x.Modulation
	}
	return nil
}

type HarmonyModulation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"RootChordNote"
	RootChordNote *RootChordNote `protobuf:"bytes,1,opt,name=root_chord_note,json=rootChordNote,proto3" json:"root_chord_note,omitempty" xml:"RootChordNote"`
	// @gotags: xml:"RootChordQuality"
	RootChordQuality *RootChordQuality `protobuf:"bytes,2,opt,name=root_chord_quality,json=rootChordQuality,proto3" json:"root_chord_quality,omitempty" xml:"RootChordQuality"`
	// @gotags: xml:"Mode"
	Mode          *Mode `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty" xml:"Mode"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HarmonyModulation) Reset() {
	*x = HarmonyModulation{}
	mi := &file_meadv11_mead_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HarmonyModulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HarmonyModulation) ProtoMessage() {}

func (x *HarmonyModulation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HarmonyModulation.ProtoReflect.Descriptor instead.
func (*HarmonyModulation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{22}
}

func (x *HarmonyModulation) GetRootChordNote() *RootChordNote {
	if x != nil {
		return x.RootChordNote
	}
	return nil
}

func (x *HarmonyModulation) GetRootChordQuality() *RootChordQuality {
	if x != nil {
		return x.RootChordQuality
	}
	return nil
}

func (x *HarmonyModulation) GetMode() *Mode {
	if x != nil {
		return x.Mode
	}
	return nil
}

type ImpactDate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"Date"
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty" xml:"Date"`
	// @gotags: xml:"TerritoryCode"
	TerritoryCode []*CurrentTerritoryCode `protobuf:"bytes,2,rep,name=territory_code,json=territoryCode,proto3" json:"territory_code,omitempty" xml:"TerritoryCode"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImpactDate) Reset() {
	*x = ImpactDate{}
	mi := &file_meadv11_mead_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImpactDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpactDate) ProtoMessage() {}

func (x *ImpactDate) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpactDate.ProtoReflect.Descriptor instead.
func (*ImpactDate) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{23}
}

func (x *ImpactDate) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ImpactDate) GetTerritoryCode() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryCode
	}
	return nil
}

type Instrument struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value         *InstrumentValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	mi := &file_meadv11_mead_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{24}
}

func (x *Instrument) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Instrument) GetValue() *InstrumentValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type InstrumentUsed struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value *InstrumentValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	// @gotags: xml:"IsFeatured,attr"
	IsFeatured    bool `protobuf:"varint,3,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty" xml:"IsFeatured,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstrumentUsed) Reset() {
	*x = InstrumentUsed{}
	mi := &file_meadv11_mead_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentUsed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentUsed) ProtoMessage() {}

func (x *InstrumentUsed) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentUsed.ProtoReflect.Descriptor instead.
func (*InstrumentUsed) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{25}
}

func (x *InstrumentUsed) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *InstrumentUsed) GetValue() *InstrumentValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InstrumentUsed) GetIsFeatured() bool {
	if x != nil {
		return x.IsFeatured
	}
	return false
}

type InstrumentValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *InstrumentValue) Reset() {
	*x = InstrumentValue{}
	mi := &file_meadv11_mead_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentValue) ProtoMessage() {}

func (x *InstrumentValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentValue.ProtoReflect.Descriptor instead.
func (*InstrumentValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{26}
}

func (x *InstrumentValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *InstrumentValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InstrumentValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type Intensity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value         *IntensityValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Intensity) Reset() {
	*x = Intensity{}
	mi := &file_meadv11_mead_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Intensity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intensity) ProtoMessage() {}

func (x *Intensity) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intensity.ProtoReflect.Descriptor instead.
func (*Intensity) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{27}
}

func (x *Intensity) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Intensity) GetValue() *IntensityValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type IntensityValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *IntensityValue) Reset() {
	*x = IntensityValue{}
	mi := &file_meadv11_mead_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntensityValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntensityValue) ProtoMessage() {}

func (x *IntensityValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntensityValue.ProtoReflect.Descriptor instead.
func (*IntensityValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{28}
}

func (x *IntensityValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *IntensityValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *IntensityValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type LocationAndDateOfSession struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"SessionType"
	SessionType []*SessionType `protobuf:"bytes,2,rep,name=session_type,json=sessionType,proto3" json:"session_type,omitempty" xml:"SessionType"`
	// @gotags: xml:"Period"
	Period *Period `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty" xml:"Period"`
	// @gotags: xml:"Venue"
	Venue []*Venue `protobuf:"bytes,4,rep,name=venue,proto3" json:"venue,omitempty" xml:"Venue"`
	// @gotags: xml:"Comment"
	Comment *TextWithFormat `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty" xml:"Comment"`
	// @gotags: xml:"Contributor"
	Contributor   []*Contributor `protobuf:"bytes,6,rep,name=contributor,proto3" json:"contributor,omitempty" xml:"Contributor"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocationAndDateOfSession) Reset() {
	*x = LocationAndDateOfSession{}
	mi := &file_meadv11_mead_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationAndDateOfSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationAndDateOfSession) ProtoMessage() {}

func (x *LocationAndDateOfSession) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationAndDateOfSession.ProtoReflect.Descriptor instead.
func (*LocationAndDateOfSession) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{29}
}

func (x *LocationAndDateOfSession) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *LocationAndDateOfSession) GetSessionType() []*SessionType {
	if x != nil {
		return x.SessionType
	}
	return nil
}

func (x *LocationAndDateOfSession) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *LocationAndDateOfSession) GetVenue() []*Venue {
	if x != nil {
		return x.Venue
	}
	return nil
}

func (x *LocationAndDateOfSession) GetComment() *TextWithFormat {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *LocationAndDateOfSession) GetContributor() []*Contributor {
	if x != nil {
		return x.Contributor
	}
	return nil
}

type Lyrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Text"
	Text *LyricsText `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty" xml:"Text"`
	// @gotags: xml:"LanguageAndScriptOfLyrics"
	LanguageAndScriptOfLyrics []string `protobuf:"bytes,3,rep,name=language_and_script_of_lyrics,json=languageAndScriptOfLyrics,proto3" json:"language_and_script_of_lyrics,omitempty" xml:"LanguageAndScriptOfLyrics"`
	// @gotags: xml:"TerritoryOfLyricsDescription"
	TerritoryOfLyricsDescription []*CurrentTerritoryCode `protobuf:"bytes,4,rep,name=territory_of_lyrics_description,json=territoryOfLyricsDescription,proto3" json:"territory_of_lyrics_description,omitempty" xml:"TerritoryOfLyricsDescription"`
	// @gotags: xml:"Pronunciation"
	Pronunciation []*Pronunciation `protobuf:"bytes,5,rep,name=pronunciation,proto3" json:"pronunciation,omitempty" xml:"Pronunciation"`
	// @gotags: xml:"SequenceNumber,attr"
	SequenceNumber int32 `protobuf:"varint,6,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty" xml:"SequenceNumber,attr"`
	// @gotags: xml:"LyricsType,attr"
	LyricsType LyricsType `protobuf:"varint,7,opt,name=lyrics_type,json=lyricsType,proto3,enum=ddex.mead.v11.LyricsType" json:"lyrics_type,omitempty" xml:"LyricsType,attr"`
	// @gotags: xml:"LyricsTypeNamespace,attr"
	LyricsTypeNamespace string `protobuf:"bytes,8,opt,name=lyrics_type_namespace,json=lyricsTypeNamespace,proto3" json:"lyrics_type_namespace,omitempty" xml:"LyricsTypeNamespace,attr"`
	// @gotags: xml:"LyricsTypeUserDefinedValue,attr"
	LyricsTypeUserDefinedValue string `protobuf:"bytes,9,opt,name=lyrics_type_user_defined_value,json=lyricsTypeUserDefinedValue,proto3" json:"lyrics_type_user_defined_value,omitempty" xml:"LyricsTypeUserDefinedValue,attr"`
	// @gotags: xml:"IsMisquoted,attr"
	IsMisquoted   bool `protobuf:"varint,10,opt,name=is_misquoted,json=isMisquoted,proto3" json:"is_misquoted,omitempty" xml:"IsMisquoted,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Lyrics) Reset() {
	*x = Lyrics{}
	mi := &file_meadv11_mead_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Lyrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lyrics) ProtoMessage() {}

func (x *Lyrics) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lyrics.ProtoReflect.Descriptor instead.
func (*Lyrics) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{30}
}

func (x *Lyrics) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Lyrics) GetText() *LyricsText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Lyrics) GetLanguageAndScriptOfLyrics() []string {
	if x != nil {
		return x.LanguageAndScriptOfLyrics
	}
	return nil
}

func (x *Lyrics) GetTerritoryOfLyricsDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfLyricsDescription
	}
	return nil
}

func (x *Lyrics) GetPronunciation() []*Pronunciation {
	if x != nil {
		return x.Pronunciation
	}
	return nil
}

func (x *Lyrics) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Lyrics) GetLyricsType() LyricsType {
	if x != nil {
		return x.LyricsType
	}
	return LyricsType_LYRICS_TYPE_UNSPECIFIED
}

func (x *Lyrics) GetLyricsTypeNamespace() string {
	if x != nil {
		return x.LyricsTypeNamespace
	}
	return ""
}

func (x *Lyrics) GetLyricsTypeUserDefinedValue() string {
	if x != nil {
		return x.LyricsTypeUserDefinedValue
	}
	return ""
}

func (x *Lyrics) GetIsMisquoted() bool {
	if x != nil {
		return x.IsMisquoted
	}
	return false
}

type LyricsText struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Format,attr"
	Format TextCodecType `protobuf:"varint,2,opt,name=format,proto3,enum=ddex.mead.v11.TextCodecType" json:"format,omitempty" xml:"Format,attr"`
	// @gotags: xml:"FormatNamespace,attr"
	FormatNamespace string `protobuf:"bytes,3,opt,name=format_namespace,json=formatNamespace,proto3" json:"format_namespace,omitempty" xml:"FormatNamespace,attr"`
	// @gotags: xml:"FormatUserDefinedValue,attr"
	FormatUserDefinedValue string `protobuf:"bytes,4,opt,name=format_user_defined_value,json=formatUserDefinedValue,proto3" json:"format_user_defined_value,omitempty" xml:"FormatUserDefinedValue,attr"`
	// @gotags: xml:"IsComplete,attr"
	IsComplete    bool `protobuf:"varint,5,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty" xml:"IsComplete,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LyricsText) Reset() {
	*x = LyricsText{}
	mi := &file_meadv11_mead_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LyricsText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LyricsText) ProtoMessage() {}

func (x *LyricsText) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LyricsText.ProtoReflect.Descriptor instead.
func (*LyricsText) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{31}
}

func (x *LyricsText) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LyricsText) GetFormat() TextCodecType {
	if x != nil {
		return x.Format
	}
	return TextCodecType_TEXT_CODEC_TYPE_UNSPECIFIED
}

func (x *LyricsText) GetFormatNamespace() string {
	if x != nil {
		return x.FormatNamespace
	}
	return ""
}

func (x *LyricsText) GetFormatUserDefinedValue() string {
	if x != nil {
		return x.FormatUserDefinedValue
	}
	return ""
}

func (x *LyricsText) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

type Meter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"NumberOfBeatsInBar"
	NumberOfBeatsInBar int32 `protobuf:"varint,1,opt,name=number_of_beats_in_bar,json=numberOfBeatsInBar,proto3" json:"number_of_beats_in_bar,omitempty" xml:"NumberOfBeatsInBar"`
	// @gotags: xml:"NoteEquivalentToBeat"
	NoteEquivalentToBeat int32 `protobuf:"varint,2,opt,name=note_equivalent_to_beat,json=noteEquivalentToBeat,proto3" json:"note_equivalent_to_beat,omitempty" xml:"NoteEquivalentToBeat"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Meter) Reset() {
	*x = Meter{}
	mi := &file_meadv11_mead_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Meter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meter) ProtoMessage() {}

func (x *Meter) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meter.ProtoReflect.Descriptor instead.
func (*Meter) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{32}
}

func (x *Meter) GetNumberOfBeatsInBar() int32 {
	if x != nil {
		return x.NumberOfBeatsInBar
	}
	return 0
}

func (x *Meter) GetNoteEquivalentToBeat() int32 {
	if x != nil {
		return x.NoteEquivalentToBeat
	}
	return 0
}

type Mode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Mode) Reset() {
	*x = Mode{}
	mi := &file_meadv11_mead_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mode) ProtoMessage() {}

func (x *Mode) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mode.ProtoReflect.Descriptor instead.
func (*Mode) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{33}
}

func (x *Mode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Mode) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Mode) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type Modulation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"Value"
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Modulation) Reset() {
	*x = Modulation{}
	mi := &file_meadv11_mead_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Modulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modulation) ProtoMessage() {}

func (x *Modulation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modulation.ProtoReflect.Descriptor instead.
func (*Modulation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{34}
}

func (x *Modulation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Mood struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value *MoodValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	// @gotags: xml:"Description"
	Description []*TextWithoutTerritory `protobuf:"bytes,3,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	// @gotags: xml:"LanguageAndScriptOfMood"
	LanguageAndScriptOfMood []string `protobuf:"bytes,4,rep,name=language_and_script_of_mood,json=languageAndScriptOfMood,proto3" json:"language_and_script_of_mood,omitempty" xml:"LanguageAndScriptOfMood"`
	// @gotags: xml:"TerritoryOfMoodDescription"
	TerritoryOfMoodDescription []*CurrentTerritoryCode `protobuf:"bytes,5,rep,name=territory_of_mood_description,json=territoryOfMoodDescription,proto3" json:"territory_of_mood_description,omitempty" xml:"TerritoryOfMoodDescription"`
	// @gotags: xml:"MoodType,attr"
	MoodType      MoodOrThemeType `protobuf:"varint,6,opt,name=mood_type,json=moodType,proto3,enum=ddex.mead.v11.MoodOrThemeType" json:"mood_type,omitempty" xml:"MoodType,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mood) Reset() {
	*x = Mood{}
	mi := &file_meadv11_mead_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mood) ProtoMessage() {}

func (x *Mood) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mood.ProtoReflect.Descriptor instead.
func (*Mood) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{35}
}

func (x *Mood) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Mood) GetValue() *MoodValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Mood) GetDescription() []*TextWithoutTerritory {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Mood) GetLanguageAndScriptOfMood() []string {
	if x != nil {
		return x.LanguageAndScriptOfMood
	}
	return nil
}

func (x *Mood) GetTerritoryOfMoodDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfMoodDescription
	}
	return nil
}

func (x *Mood) GetMoodType() MoodOrThemeType {
	if x != nil {
		return x.MoodType
	}
	return MoodOrThemeType_MOOD_OR_THEME_TYPE_UNSPECIFIED
}

type MoodValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	// @gotags: xml:"AppliesToComposition,attr"
	AppliesToComposition bool `protobuf:"varint,4,opt,name=applies_to_composition,json=appliesToComposition,proto3" json:"applies_to_composition,omitempty" xml:"AppliesToComposition,attr"`
	// @gotags: xml:"AppliesToLyrics,attr"
	AppliesToLyrics bool `protobuf:"varint,5,opt,name=applies_to_lyrics,json=appliesToLyrics,proto3" json:"applies_to_lyrics,omitempty" xml:"AppliesToLyrics,attr"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MoodValue) Reset() {
	*x = MoodValue{}
	mi := &file_meadv11_mead_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoodValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoodValue) ProtoMessage() {}

func (x *MoodValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoodValue.ProtoReflect.Descriptor instead.
func (*MoodValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{36}
}

func (x *MoodValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MoodValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *MoodValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

func (x *MoodValue) GetAppliesToComposition() bool {
	if x != nil {
		return x.AppliesToComposition
	}
	return false
}

func (x *MoodValue) GetAppliesToLyrics() bool {
	if x != nil {
		return x.AppliesToLyrics
	}
	return false
}

type Party struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ISNI"
	ISNI string `protobuf:"bytes,1,opt,name=i_s_n_i,json=iSNI,proto3" json:"i_s_n_i,omitempty" xml:"ISNI"`
	// @gotags: xml:"DPID"
	DPID string `protobuf:"bytes,2,opt,name=d_p_i_d,json=dPID,proto3" json:"d_p_i_d,omitempty" xml:"DPID"`
	// @gotags: xml:"IpiNameNumber"
	IpiNameNumber string `protobuf:"bytes,3,opt,name=ipi_name_number,json=ipiNameNumber,proto3" json:"ipi_name_number,omitempty" xml:"IpiNameNumber"`
	// @gotags: xml:"IPN"
	IPN string `protobuf:"bytes,4,opt,name=i_p_n,json=iPN,proto3" json:"i_p_n,omitempty" xml:"IPN"`
	// @gotags: xml:"ProprietaryId"
	ProprietaryId []*ProprietaryId `protobuf:"bytes,5,rep,name=proprietary_id,json=proprietaryId,proto3" json:"proprietary_id,omitempty" xml:"ProprietaryId"`
	// @gotags: xml:"PartyName"
	PartyName     string `protobuf:"bytes,6,opt,name=party_name,json=partyName,proto3" json:"party_name,omitempty" xml:"PartyName"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Party) Reset() {
	*x = Party{}
	mi := &file_meadv11_mead_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{37}
}

func (x *Party) GetISNI() string {
	if x != nil {
		return x.ISNI
	}
	return ""
}

func (x *Party) GetDPID() string {
	if x != nil {
		return x.DPID
	}
	return ""
}

func (x *Party) GetIpiNameNumber() string {
	if x != nil {
		return x.IpiNameNumber
	}
	return ""
}

func (x *Party) GetIPN() string {
	if x != nil {
		return x.IPN
	}
	return ""
}

func (x *Party) GetProprietaryId() []*ProprietaryId {
	if x != nil {
		return x.ProprietaryId
	}
	return nil
}

func (x *Party) GetPartyName() string {
	if x != nil {
		return x.PartyName
	}
	return ""
}

type RecordingPart struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Unit"
	Unit UnitOfCuePoints `protobuf:"varint,2,opt,name=unit,proto3,enum=ddex.mead.v11.UnitOfCuePoints" json:"unit,omitempty" xml:"Unit"`
	// @gotags: xml:"StartPoint"
	StartPoint string `protobuf:"bytes,3,opt,name=start_point,json=startPoint,proto3" json:"start_point,omitempty" xml:"StartPoint"`
	// @gotags: xml:"EndPoint"
	EndPoint string `protobuf:"bytes,4,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty" xml:"EndPoint"`
	// @gotags: xml:"RecordingPartType"
	RecordingPartType *RecordingPartType `protobuf:"bytes,5,opt,name=recording_part_type,json=recordingPartType,proto3" json:"recording_part_type,omitempty" xml:"RecordingPartType"`
	// @gotags: xml:"Comment"
	Comment []*Annotation `protobuf:"bytes,6,rep,name=comment,proto3" json:"comment,omitempty" xml:"Comment"`
	// @gotags: xml:"UsageInformation"
	UsageInformation []*TextWithFormat `protobuf:"bytes,7,rep,name=usage_information,json=usageInformation,proto3" json:"usage_information,omitempty" xml:"UsageInformation"`
	// @gotags: xml:"SequenceNumber,attr"
	SequenceNumber int32 `protobuf:"varint,8,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty" xml:"SequenceNumber,attr"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RecordingPart) Reset() {
	*x = RecordingPart{}
	mi := &file_meadv11_mead_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingPart) ProtoMessage() {}

func (x *RecordingPart) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingPart.ProtoReflect.Descriptor instead.
func (*RecordingPart) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{38}
}

func (x *RecordingPart) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *RecordingPart) GetUnit() UnitOfCuePoints {
	if x != nil {
		return x.Unit
	}
	return UnitOfCuePoints_UNIT_OF_CUE_POINTS_UNSPECIFIED
}

func (x *RecordingPart) GetStartPoint() string {
	if x != nil {
		return x.StartPoint
	}
	return ""
}

func (x *RecordingPart) GetEndPoint() string {
	if x != nil {
		return x.EndPoint
	}
	return ""
}

func (x *RecordingPart) GetRecordingPartType() *RecordingPartType {
	if x != nil {
		return x.RecordingPartType
	}
	return nil
}

func (x *RecordingPart) GetComment() []*Annotation {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *RecordingPart) GetUsageInformation() []*TextWithFormat {
	if x != nil {
		return x.UsageInformation
	}
	return nil
}

func (x *RecordingPart) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type RelatedWork struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"WorkId"
	WorkId *MusicalWorkIdWithoutFlag `protobuf:"bytes,2,opt,name=work_id,json=workId,proto3" json:"work_id,omitempty" xml:"WorkId"`
	// @gotags: xml:"WorkTitle"
	WorkTitle []*WorkTitle `protobuf:"bytes,3,rep,name=work_title,json=workTitle,proto3" json:"work_title,omitempty" xml:"WorkTitle"`
	// @gotags: xml:"WorkRelationshipType"
	WorkRelationshipType *WorkRelationshipType `protobuf:"bytes,4,opt,name=work_relationship_type,json=workRelationshipType,proto3" json:"work_relationship_type,omitempty" xml:"WorkRelationshipType"`
	// @gotags: xml:"Writer"
	Writer        []*PartyDescriptorWithPronunciation `protobuf:"bytes,5,rep,name=writer,proto3" json:"writer,omitempty" xml:"Writer"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelatedWork) Reset() {
	*x = RelatedWork{}
	mi := &file_meadv11_mead_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedWork) ProtoMessage() {}

func (x *RelatedWork) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedWork.ProtoReflect.Descriptor instead.
func (*RelatedWork) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{39}
}

func (x *RelatedWork) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *RelatedWork) GetWorkId() *MusicalWorkIdWithoutFlag {
	if x != nil {
		return x.WorkId
	}
	return nil
}

func (x *RelatedWork) GetWorkTitle() []*WorkTitle {
	if x != nil {
		return x.WorkTitle
	}
	return nil
}

func (x *RelatedWork) GetWorkRelationshipType() *WorkRelationshipType {
	if x != nil {
		return x.WorkRelationshipType
	}
	return nil
}

func (x *RelatedWork) GetWriter() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.Writer
	}
	return nil
}

type ReleaseInformation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ReleaseSummary"
	ReleaseSummary *ReleaseSummary `protobuf:"bytes,1,opt,name=release_summary,json=releaseSummary,proto3" json:"release_summary,omitempty" xml:"ReleaseSummary"`
	// @gotags: xml:"GenreCategory"
	GenreCategory []*GenreCategory `protobuf:"bytes,2,rep,name=genre_category,json=genreCategory,proto3" json:"genre_category,omitempty" xml:"GenreCategory"`
	// @gotags: xml:"SubGenreCategory"
	SubGenreCategory []*SubGenreCategory `protobuf:"bytes,3,rep,name=sub_genre_category,json=subGenreCategory,proto3" json:"sub_genre_category,omitempty" xml:"SubGenreCategory"`
	// @gotags: xml:"Focus"
	Focus []*Focus `protobuf:"bytes,4,rep,name=focus,proto3" json:"focus,omitempty" xml:"Focus"`
	// @gotags: xml:"Mood"
	Mood []*Mood `protobuf:"bytes,5,rep,name=mood,proto3" json:"mood,omitempty" xml:"Mood"`
	// @gotags: xml:"ArtisticStyle"
	ArtisticStyle []*ArtisticStyle `protobuf:"bytes,6,rep,name=artistic_style,json=artisticStyle,proto3" json:"artistic_style,omitempty" xml:"ArtisticStyle"`
	// @gotags: xml:"Theme"
	Theme []*Theme `protobuf:"bytes,7,rep,name=theme,proto3" json:"theme,omitempty" xml:"Theme"`
	// @gotags: xml:"Activity"
	Activity []*Activity `protobuf:"bytes,8,rep,name=activity,proto3" json:"activity,omitempty" xml:"Activity"`
	// @gotags: xml:"CommentaryNote"
	CommentaryNote []*CommentaryNote `protobuf:"bytes,9,rep,name=commentary_note,json=commentaryNote,proto3" json:"commentary_note,omitempty" xml:"CommentaryNote"`
	// @gotags: xml:"Epoch"
	Epoch []*Epoch `protobuf:"bytes,10,rep,name=epoch,proto3" json:"epoch,omitempty" xml:"Epoch"`
	// @gotags: xml:"ArtisticInfluence"
	ArtisticInfluence []*ArtisticInfluence `protobuf:"bytes,11,rep,name=artistic_influence,json=artisticInfluence,proto3" json:"artistic_influence,omitempty" xml:"ArtisticInfluence"`
	// @gotags: xml:"IsSimilar"
	IsSimilar []*SimilarRelease `protobuf:"bytes,12,rep,name=is_similar,json=isSimilar,proto3" json:"is_similar,omitempty" xml:"IsSimilar"`
	// @gotags: xml:"HistoricChartingInformation"
	HistoricChartingInformation []*HistoricChartingInformation `protobuf:"bytes,13,rep,name=historic_charting_information,json=historicChartingInformation,proto3" json:"historic_charting_information,omitempty" xml:"HistoricChartingInformation"`
	// @gotags: xml:"Award"
	Award []*Award `protobuf:"bytes,14,rep,name=award,proto3" json:"award,omitempty" xml:"Award"`
	// @gotags: xml:"AlternativeTitle"
	AlternativeTitle []*AlternativeTitle `protobuf:"bytes,15,rep,name=alternative_title,json=alternativeTitle,proto3" json:"alternative_title,omitempty" xml:"AlternativeTitle"`
	// @gotags: xml:"Image"
	Image []*Image `protobuf:"bytes,16,rep,name=image,proto3" json:"image,omitempty" xml:"Image"`
	// @gotags: xml:"PriorityPeriodStartDate,attr"
	PriorityPeriodStartDate string `protobuf:"bytes,17,opt,name=priority_period_start_date,json=priorityPeriodStartDate,proto3" json:"priority_period_start_date,omitempty" xml:"PriorityPeriodStartDate,attr"`
	// @gotags: xml:"PriorityPeriodEndDate,attr"
	PriorityPeriodEndDate string `protobuf:"bytes,18,opt,name=priority_period_end_date,json=priorityPeriodEndDate,proto3" json:"priority_period_end_date,omitempty" xml:"PriorityPeriodEndDate,attr"`
	// @gotags: xml:"ApplicableTerritoryCode,attr"
	ApplicableTerritoryCode *CurrentTerritoryCode `protobuf:"bytes,19,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty" xml:"ApplicableTerritoryCode,attr"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ReleaseInformation) Reset() {
	*x = ReleaseInformation{}
	mi := &file_meadv11_mead_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseInformation) ProtoMessage() {}

func (x *ReleaseInformation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseInformation.ProtoReflect.Descriptor instead.
func (*ReleaseInformation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{40}
}

func (x *ReleaseInformation) GetReleaseSummary() *ReleaseSummary {
	if x != nil {
		return x.ReleaseSummary
	}
	return nil
}

func (x *ReleaseInformation) GetGenreCategory() []*GenreCategory {
	if x != nil {
		return x.GenreCategory
	}
	return nil
}

func (x *ReleaseInformation) GetSubGenreCategory() []*SubGenreCategory {
	if x != nil {
		return x.SubGenreCategory
	}
	return nil
}

func (x *ReleaseInformation) GetFocus() []*Focus {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *ReleaseInformation) GetMood() []*Mood {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *ReleaseInformation) GetArtisticStyle() []*ArtisticStyle {
	if x != nil {
		return x.ArtisticStyle
	}
	return nil
}

func (x *ReleaseInformation) GetTheme() []*Theme {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *ReleaseInformation) GetActivity() []*Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *ReleaseInformation) GetCommentaryNote() []*CommentaryNote {
	if x != nil {
		return x.CommentaryNote
	}
	return nil
}

func (x *ReleaseInformation) GetEpoch() []*Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ReleaseInformation) GetArtisticInfluence() []*ArtisticInfluence {
	if x != nil {
		return x.ArtisticInfluence
	}
	return nil
}

func (x *ReleaseInformation) GetIsSimilar() []*SimilarRelease {
	if x != nil {
		return x.IsSimilar
	}
	return nil
}

func (x *ReleaseInformation) GetHistoricChartingInformation() []*HistoricChartingInformation {
	if x != nil {
		return x.HistoricChartingInformation
	}
	return nil
}

func (x *ReleaseInformation) GetAward() []*Award {
	if x != nil {
		return x.Award
	}
	return nil
}

func (x *ReleaseInformation) GetAlternativeTitle() []*AlternativeTitle {
	if x != nil {
		return x.AlternativeTitle
	}
	return nil
}

func (x *ReleaseInformation) GetImage() []*Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ReleaseInformation) GetPriorityPeriodStartDate() string {
	if x != nil {
		return x.PriorityPeriodStartDate
	}
	return ""
}

func (x *ReleaseInformation) GetPriorityPeriodEndDate() string {
	if x != nil {
		return x.PriorityPeriodEndDate
	}
	return ""
}

func (x *ReleaseInformation) GetApplicableTerritoryCode() *CurrentTerritoryCode {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return nil
}

type ReleaseInformationList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ReleaseInformation"
	ReleaseInformation []*ReleaseInformation `protobuf:"bytes,1,rep,name=release_information,json=releaseInformation,proto3" json:"release_information,omitempty" xml:"ReleaseInformation"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ReleaseInformationList) Reset() {
	*x = ReleaseInformationList{}
	mi := &file_meadv11_mead_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseInformationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseInformationList) ProtoMessage() {}

func (x *ReleaseInformationList) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseInformationList.ProtoReflect.Descriptor instead.
func (*ReleaseInformationList) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{41}
}

func (x *ReleaseInformationList) GetReleaseInformation() []*ReleaseInformation {
	if x != nil {
		return x.ReleaseInformation
	}
	return nil
}

type ReleaseSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ReleaseId"
	ReleaseId *ReleaseId `protobuf:"bytes,1,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty" xml:"ReleaseId"`
	// @gotags: xml:"DisplayTitle"
	DisplayTitle []*DisplayTitle `protobuf:"bytes,2,rep,name=display_title,json=displayTitle,proto3" json:"display_title,omitempty" xml:"DisplayTitle"`
	// @gotags: xml:"DisplayArtistName"
	DisplayArtistName []*DisplayArtistNameWithPronunciation `protobuf:"bytes,3,rep,name=display_artist_name,json=displayArtistName,proto3" json:"display_artist_name,omitempty" xml:"DisplayArtistName"`
	// @gotags: xml:"DisplayArtist"
	DisplayArtist []*PartyDescriptorWithPronunciation `protobuf:"bytes,4,rep,name=display_artist,json=displayArtist,proto3" json:"display_artist,omitempty" xml:"DisplayArtist"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseSummary) Reset() {
	*x = ReleaseSummary{}
	mi := &file_meadv11_mead_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSummary) ProtoMessage() {}

func (x *ReleaseSummary) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSummary.ProtoReflect.Descriptor instead.
func (*ReleaseSummary) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{42}
}

func (x *ReleaseSummary) GetReleaseId() *ReleaseId {
	if x != nil {
		return x.ReleaseId
	}
	return nil
}

func (x *ReleaseSummary) GetDisplayTitle() []*DisplayTitle {
	if x != nil {
		return x.DisplayTitle
	}
	return nil
}

func (x *ReleaseSummary) GetDisplayArtistName() []*DisplayArtistNameWithPronunciation {
	if x != nil {
		return x.DisplayArtistName
	}
	return nil
}

func (x *ReleaseSummary) GetDisplayArtist() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.DisplayArtist
	}
	return nil
}

type RelevantResource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ResourceId"
	ResourceId *ResourceIdWithoutFlag `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty" xml:"ResourceId"`
	// @gotags: xml:"ResourceRelationshipType"
	ResourceRelationshipType *ResourceRelationshipType `protobuf:"bytes,2,opt,name=resource_relationship_type,json=resourceRelationshipType,proto3" json:"resource_relationship_type,omitempty" xml:"ResourceRelationshipType"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *RelevantResource) Reset() {
	*x = RelevantResource{}
	mi := &file_meadv11_mead_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelevantResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantResource) ProtoMessage() {}

func (x *RelevantResource) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantResource.ProtoReflect.Descriptor instead.
func (*RelevantResource) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{43}
}

func (x *RelevantResource) GetResourceId() *ResourceIdWithoutFlag {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *RelevantResource) GetResourceRelationshipType() *ResourceRelationshipType {
	if x != nil {
		return x.ResourceRelationshipType
	}
	return nil
}

type ResourceInformation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ResourceSummary"
	ResourceSummary *ResourceSummary `protobuf:"bytes,1,opt,name=resource_summary,json=resourceSummary,proto3" json:"resource_summary,omitempty" xml:"ResourceSummary"`
	// @gotags: xml:"GenreCategory"
	GenreCategory []*GenreCategory `protobuf:"bytes,2,rep,name=genre_category,json=genreCategory,proto3" json:"genre_category,omitempty" xml:"GenreCategory"`
	// @gotags: xml:"SubGenreCategory"
	SubGenreCategory []*SubGenreCategory `protobuf:"bytes,3,rep,name=sub_genre_category,json=subGenreCategory,proto3" json:"sub_genre_category,omitempty" xml:"SubGenreCategory"`
	// @gotags: xml:"Form"
	Form *Form `protobuf:"bytes,4,opt,name=form,proto3" json:"form,omitempty" xml:"Form"`
	// @gotags: xml:"VocalRegister"
	VocalRegister []*VocalRegister `protobuf:"bytes,5,rep,name=vocal_register,json=vocalRegister,proto3" json:"vocal_register,omitempty" xml:"VocalRegister"`
	// @gotags: xml:"Focus"
	Focus []*Focus `protobuf:"bytes,6,rep,name=focus,proto3" json:"focus,omitempty" xml:"Focus"`
	// @gotags: xml:"AbsolutePitch"
	AbsolutePitch []*AbsolutePitch `protobuf:"bytes,7,rep,name=absolute_pitch,json=absolutePitch,proto3" json:"absolute_pitch,omitempty" xml:"AbsolutePitch"`
	// @gotags: xml:"TimeSignature"
	TimeSignature []*TimeSignature `protobuf:"bytes,8,rep,name=time_signature,json=timeSignature,proto3" json:"time_signature,omitempty" xml:"TimeSignature"`
	// @gotags: xml:"Tempo"
	Tempo []*TempoValue `protobuf:"bytes,9,rep,name=tempo,proto3" json:"tempo,omitempty" xml:"Tempo"`
	// @gotags: xml:"BeatsPerMinute"
	BeatsPerMinute []*BeatsPerMinute `protobuf:"bytes,10,rep,name=beats_per_minute,json=beatsPerMinute,proto3" json:"beats_per_minute,omitempty" xml:"BeatsPerMinute"`
	// @gotags: xml:"Intensity"
	Intensity []*Intensity `protobuf:"bytes,11,rep,name=intensity,proto3" json:"intensity,omitempty" xml:"Intensity"`
	// @gotags: xml:"InstrumentUsed"
	InstrumentUsed []*InstrumentUsed `protobuf:"bytes,12,rep,name=instrument_used,json=instrumentUsed,proto3" json:"instrument_used,omitempty" xml:"InstrumentUsed"`
	// @gotags: xml:"Harmony"
	Harmony []*Harmony `protobuf:"bytes,13,rep,name=harmony,proto3" json:"harmony,omitempty" xml:"Harmony"`
	// @gotags: xml:"Mood"
	Mood []*Mood `protobuf:"bytes,14,rep,name=mood,proto3" json:"mood,omitempty" xml:"Mood"`
	// @gotags: xml:"DanceStyle"
	DanceStyle []*DanceStyle `protobuf:"bytes,15,rep,name=dance_style,json=danceStyle,proto3" json:"dance_style,omitempty" xml:"DanceStyle"`
	// @gotags: xml:"RhythmStyle"
	RhythmStyle []*RhythmStyle `protobuf:"bytes,16,rep,name=rhythm_style,json=rhythmStyle,proto3" json:"rhythm_style,omitempty" xml:"RhythmStyle"`
	// @gotags: xml:"ArtisticStyle"
	ArtisticStyle []*ArtisticStyle `protobuf:"bytes,17,rep,name=artistic_style,json=artisticStyle,proto3" json:"artistic_style,omitempty" xml:"ArtisticStyle"`
	// @gotags: xml:"Theme"
	Theme []*Theme `protobuf:"bytes,18,rep,name=theme,proto3" json:"theme,omitempty" xml:"Theme"`
	// @gotags: xml:"Activity"
	Activity []*Activity `protobuf:"bytes,19,rep,name=activity,proto3" json:"activity,omitempty" xml:"Activity"`
	// @gotags: xml:"UsedMusicalWork"
	UsedMusicalWork []*UsedMusicalWork `protobuf:"bytes,20,rep,name=used_musical_work,json=usedMusicalWork,proto3" json:"used_musical_work,omitempty" xml:"UsedMusicalWork"`
	// @gotags: xml:"RelatedResource"
	RelatedResource []*ResourceRelationship `protobuf:"bytes,21,rep,name=related_resource,json=relatedResource,proto3" json:"related_resource,omitempty" xml:"RelatedResource"`
	// @gotags: xml:"Lyrics"
	Lyrics []*Lyrics `protobuf:"bytes,22,rep,name=lyrics,proto3" json:"lyrics,omitempty" xml:"Lyrics"`
	// @gotags: xml:"CommentaryNote"
	CommentaryNote []*CommentaryNote `protobuf:"bytes,23,rep,name=commentary_note,json=commentaryNote,proto3" json:"commentary_note,omitempty" xml:"CommentaryNote"`
	// @gotags: xml:"Sample"
	Sample []*Sample `protobuf:"bytes,24,rep,name=sample,proto3" json:"sample,omitempty" xml:"Sample"`
	// @gotags: xml:"RecordingPart"
	RecordingPart []*RecordingPart `protobuf:"bytes,25,rep,name=recording_part,json=recordingPart,proto3" json:"recording_part,omitempty" xml:"RecordingPart"`
	// @gotags: xml:"Usage"
	Usage []*Usage `protobuf:"bytes,26,rep,name=usage,proto3" json:"usage,omitempty" xml:"Usage"`
	// @gotags: xml:"ImpactDate"
	ImpactDate []*ImpactDate `protobuf:"bytes,27,rep,name=impact_date,json=impactDate,proto3" json:"impact_date,omitempty" xml:"ImpactDate"`
	// @gotags: xml:"ClassicalPeriod"
	ClassicalPeriod *ClassicalPeriod `protobuf:"bytes,28,opt,name=classical_period,json=classicalPeriod,proto3" json:"classical_period,omitempty" xml:"ClassicalPeriod"`
	// @gotags: xml:"Epoch"
	Epoch []*Epoch `protobuf:"bytes,29,rep,name=epoch,proto3" json:"epoch,omitempty" xml:"Epoch"`
	// @gotags: xml:"ArtisticInfluence"
	ArtisticInfluence []*ArtisticInfluence `protobuf:"bytes,30,rep,name=artistic_influence,json=artisticInfluence,proto3" json:"artistic_influence,omitempty" xml:"ArtisticInfluence"`
	// @gotags: xml:"IsSimilar"
	IsSimilar []*SimilarResource `protobuf:"bytes,31,rep,name=is_similar,json=isSimilar,proto3" json:"is_similar,omitempty" xml:"IsSimilar"`
	// @gotags: xml:"HistoricChartingInformation"
	HistoricChartingInformation []*HistoricChartingInformation `protobuf:"bytes,32,rep,name=historic_charting_information,json=historicChartingInformation,proto3" json:"historic_charting_information,omitempty" xml:"HistoricChartingInformation"`
	// @gotags: xml:"Award"
	Award []*Award `protobuf:"bytes,33,rep,name=award,proto3" json:"award,omitempty" xml:"Award"`
	// @gotags: xml:"LocationAndDateOfSession"
	LocationAndDateOfSession []*LocationAndDateOfSession `protobuf:"bytes,34,rep,name=location_and_date_of_session,json=locationAndDateOfSession,proto3" json:"location_and_date_of_session,omitempty" xml:"LocationAndDateOfSession"`
	// @gotags: xml:"AlternativeTitle"
	AlternativeTitle []*AlternativeTitle `protobuf:"bytes,35,rep,name=alternative_title,json=alternativeTitle,proto3" json:"alternative_title,omitempty" xml:"AlternativeTitle"`
	// @gotags: xml:"Image"
	Image []*Image `protobuf:"bytes,36,rep,name=image,proto3" json:"image,omitempty" xml:"Image"`
	// @gotags: xml:"PriorityPeriodStartDate,attr"
	PriorityPeriodStartDate string `protobuf:"bytes,37,opt,name=priority_period_start_date,json=priorityPeriodStartDate,proto3" json:"priority_period_start_date,omitempty" xml:"PriorityPeriodStartDate,attr"`
	// @gotags: xml:"PriorityPeriodEndDate,attr"
	PriorityPeriodEndDate string `protobuf:"bytes,38,opt,name=priority_period_end_date,json=priorityPeriodEndDate,proto3" json:"priority_period_end_date,omitempty" xml:"PriorityPeriodEndDate,attr"`
	// @gotags: xml:"ApplicableTerritoryCode,attr"
	ApplicableTerritoryCode *CurrentTerritoryCode `protobuf:"bytes,39,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty" xml:"ApplicableTerritoryCode,attr"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ResourceInformation) Reset() {
	*x = ResourceInformation{}
	mi := &file_meadv11_mead_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInformation) ProtoMessage() {}

func (x *ResourceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInformation.ProtoReflect.Descriptor instead.
func (*ResourceInformation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{44}
}

func (x *ResourceInformation) GetResourceSummary() *ResourceSummary {
	if x != nil {
		return x.ResourceSummary
	}
	return nil
}

func (x *ResourceInformation) GetGenreCategory() []*GenreCategory {
	if x != nil {
		return x.GenreCategory
	}
	return nil
}

func (x *ResourceInformation) GetSubGenreCategory() []*SubGenreCategory {
	if x != nil {
		return x.SubGenreCategory
	}
	return nil
}

func (x *ResourceInformation) GetForm() *Form {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *ResourceInformation) GetVocalRegister() []*VocalRegister {
	if x != nil {
		return x.VocalRegister
	}
	return nil
}

func (x *ResourceInformation) GetFocus() []*Focus {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *ResourceInformation) GetAbsolutePitch() []*AbsolutePitch {
	if x != nil {
		return x.AbsolutePitch
	}
	return nil
}

func (x *ResourceInformation) GetTimeSignature() []*TimeSignature {
	if x != nil {
		return x.TimeSignature
	}
	return nil
}

func (x *ResourceInformation) GetTempo() []*TempoValue {
	if x != nil {
		return x.Tempo
	}
	return nil
}

func (x *ResourceInformation) GetBeatsPerMinute() []*BeatsPerMinute {
	if x != nil {
		return x.BeatsPerMinute
	}
	return nil
}

func (x *ResourceInformation) GetIntensity() []*Intensity {
	if x != nil {
		return x.Intensity
	}
	return nil
}

func (x *ResourceInformation) GetInstrumentUsed() []*InstrumentUsed {
	if x != nil {
		return x.InstrumentUsed
	}
	return nil
}

func (x *ResourceInformation) GetHarmony() []*Harmony {
	if x != nil {
		return x.Harmony
	}
	return nil
}

func (x *ResourceInformation) GetMood() []*Mood {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *ResourceInformation) GetDanceStyle() []*DanceStyle {
	if x != nil {
		return x.DanceStyle
	}
	return nil
}

func (x *ResourceInformation) GetRhythmStyle() []*RhythmStyle {
	if x != nil {
		return x.RhythmStyle
	}
	return nil
}

func (x *ResourceInformation) GetArtisticStyle() []*ArtisticStyle {
	if x != nil {
		return x.ArtisticStyle
	}
	return nil
}

func (x *ResourceInformation) GetTheme() []*Theme {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *ResourceInformation) GetActivity() []*Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *ResourceInformation) GetUsedMusicalWork() []*UsedMusicalWork {
	if x != nil {
		return x.UsedMusicalWork
	}
	return nil
}

func (x *ResourceInformation) GetRelatedResource() []*ResourceRelationship {
	if x != nil {
		return x.RelatedResource
	}
	return nil
}

func (x *ResourceInformation) GetLyrics() []*Lyrics {
	if x != nil {
		return x.Lyrics
	}
	return nil
}

func (x *ResourceInformation) GetCommentaryNote() []*CommentaryNote {
	if x != nil {
		return x.CommentaryNote
	}
	return nil
}

func (x *ResourceInformation) GetSample() []*Sample {
	if x != nil {
		return x.Sample
	}
	return nil
}

func (x *ResourceInformation) GetRecordingPart() []*RecordingPart {
	if x != nil {
		return x.RecordingPart
	}
	return nil
}

func (x *ResourceInformation) GetUsage() []*Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ResourceInformation) GetImpactDate() []*ImpactDate {
	if x != nil {
		return x.ImpactDate
	}
	return nil
}

func (x *ResourceInformation) GetClassicalPeriod() *ClassicalPeriod {
	if x != nil {
		return x.ClassicalPeriod
	}
	return nil
}

func (x *ResourceInformation) GetEpoch() []*Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ResourceInformation) GetArtisticInfluence() []*ArtisticInfluence {
	if x != nil {
		return x.ArtisticInfluence
	}
	return nil
}

func (x *ResourceInformation) GetIsSimilar() []*SimilarResource {
	if x != nil {
		return x.IsSimilar
	}
	return nil
}

func (x *ResourceInformation) GetHistoricChartingInformation() []*HistoricChartingInformation {
	if x != nil {
		return x.HistoricChartingInformation
	}
	return nil
}

func (x *ResourceInformation) GetAward() []*Award {
	if x != nil {
		return x.Award
	}
	return nil
}

func (x *ResourceInformation) GetLocationAndDateOfSession() []*LocationAndDateOfSession {
	if x != nil {
		return x.LocationAndDateOfSession
	}
	return nil
}

func (x *ResourceInformation) GetAlternativeTitle() []*AlternativeTitle {
	if x != nil {
		return x.AlternativeTitle
	}
	return nil
}

func (x *ResourceInformation) GetImage() []*Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ResourceInformation) GetPriorityPeriodStartDate() string {
	if x != nil {
		return x.PriorityPeriodStartDate
	}
	return ""
}

func (x *ResourceInformation) GetPriorityPeriodEndDate() string {
	if x != nil {
		return x.PriorityPeriodEndDate
	}
	return ""
}

func (x *ResourceInformation) GetApplicableTerritoryCode() *CurrentTerritoryCode {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return nil
}

type ResourceInformationList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ResourceInformation"
	ResourceInformation []*ResourceInformation `protobuf:"bytes,1,rep,name=resource_information,json=resourceInformation,proto3" json:"resource_information,omitempty" xml:"ResourceInformation"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ResourceInformationList) Reset() {
	*x = ResourceInformationList{}
	mi := &file_meadv11_mead_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceInformationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInformationList) ProtoMessage() {}

func (x *ResourceInformationList) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInformationList.ProtoReflect.Descriptor instead.
func (*ResourceInformationList) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{45}
}

func (x *ResourceInformationList) GetResourceInformation() []*ResourceInformation {
	if x != nil {
		return x.ResourceInformation
	}
	return nil
}

type ResourceRelationship struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"ResourceId"
	ResourceId *ResourceIdWithoutFlag `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty" xml:"ResourceId"`
	// @gotags: xml:"RelatedResourceType"
	RelatedResourceType *RelatedResourceType `protobuf:"bytes,3,opt,name=related_resource_type,json=relatedResourceType,proto3" json:"related_resource_type,omitempty" xml:"RelatedResourceType"`
	// @gotags: xml:"Title"
	Title []*TitleWithPronunciation `protobuf:"bytes,4,rep,name=title,proto3" json:"title,omitempty" xml:"Title"`
	// @gotags: xml:"DisplayArtistName"
	DisplayArtistName *DisplayArtistNameWithPronunciation `protobuf:"bytes,5,opt,name=display_artist_name,json=displayArtistName,proto3" json:"display_artist_name,omitempty" xml:"DisplayArtistName"`
	// @gotags: xml:"DisplayArtist"
	DisplayArtist []*PartyDescriptorWithPronunciation `protobuf:"bytes,6,rep,name=display_artist,json=displayArtist,proto3" json:"display_artist,omitempty" xml:"DisplayArtist"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceRelationship) Reset() {
	*x = ResourceRelationship{}
	mi := &file_meadv11_mead_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRelationship) ProtoMessage() {}

func (x *ResourceRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRelationship.ProtoReflect.Descriptor instead.
func (*ResourceRelationship) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{46}
}

func (x *ResourceRelationship) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *ResourceRelationship) GetResourceId() *ResourceIdWithoutFlag {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *ResourceRelationship) GetRelatedResourceType() *RelatedResourceType {
	if x != nil {
		return x.RelatedResourceType
	}
	return nil
}

func (x *ResourceRelationship) GetTitle() []*TitleWithPronunciation {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ResourceRelationship) GetDisplayArtistName() *DisplayArtistNameWithPronunciation {
	if x != nil {
		return x.DisplayArtistName
	}
	return nil
}

func (x *ResourceRelationship) GetDisplayArtist() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.DisplayArtist
	}
	return nil
}

type ResourceSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ResourceId"
	ResourceId *ResourceIdWithoutFlag `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty" xml:"ResourceId"`
	// @gotags: xml:"DisplayTitle"
	DisplayTitle []*DisplayTitle `protobuf:"bytes,2,rep,name=display_title,json=displayTitle,proto3" json:"display_title,omitempty" xml:"DisplayTitle"`
	// @gotags: xml:"DisplayArtistName"
	DisplayArtistName []*DisplayArtistNameWithPronunciation `protobuf:"bytes,3,rep,name=display_artist_name,json=displayArtistName,proto3" json:"display_artist_name,omitempty" xml:"DisplayArtistName"`
	// @gotags: xml:"DisplayArtist"
	DisplayArtist []*PartyDescriptorWithPronunciation `protobuf:"bytes,4,rep,name=display_artist,json=displayArtist,proto3" json:"display_artist,omitempty" xml:"DisplayArtist"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceSummary) Reset() {
	*x = ResourceSummary{}
	mi := &file_meadv11_mead_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSummary) ProtoMessage() {}

func (x *ResourceSummary) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSummary.ProtoReflect.Descriptor instead.
func (*ResourceSummary) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{47}
}

func (x *ResourceSummary) GetResourceId() *ResourceIdWithoutFlag {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *ResourceSummary) GetDisplayTitle() []*DisplayTitle {
	if x != nil {
		return x.DisplayTitle
	}
	return nil
}

func (x *ResourceSummary) GetDisplayArtistName() []*DisplayArtistNameWithPronunciation {
	if x != nil {
		return x.DisplayArtistName
	}
	return nil
}

func (x *ResourceSummary) GetDisplayArtist() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.DisplayArtist
	}
	return nil
}

type RhythmStyle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value *RhythmStyleValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	// @gotags: xml:"Description"
	Description []*TextWithoutTerritory `protobuf:"bytes,3,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	// @gotags: xml:"LanguageAndScriptOfRhythmStyle"
	LanguageAndScriptOfRhythmStyle []string `protobuf:"bytes,4,rep,name=language_and_script_of_rhythm_style,json=languageAndScriptOfRhythmStyle,proto3" json:"language_and_script_of_rhythm_style,omitempty" xml:"LanguageAndScriptOfRhythmStyle"`
	// @gotags: xml:"TerritoryOfRhythmStyleDescription"
	TerritoryOfRhythmStyleDescription []*CurrentTerritoryCode `protobuf:"bytes,5,rep,name=territory_of_rhythm_style_description,json=territoryOfRhythmStyleDescription,proto3" json:"territory_of_rhythm_style_description,omitempty" xml:"TerritoryOfRhythmStyleDescription"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *RhythmStyle) Reset() {
	*x = RhythmStyle{}
	mi := &file_meadv11_mead_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RhythmStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RhythmStyle) ProtoMessage() {}

func (x *RhythmStyle) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RhythmStyle.ProtoReflect.Descriptor instead.
func (*RhythmStyle) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{48}
}

func (x *RhythmStyle) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *RhythmStyle) GetValue() *RhythmStyleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RhythmStyle) GetDescription() []*TextWithoutTerritory {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *RhythmStyle) GetLanguageAndScriptOfRhythmStyle() []string {
	if x != nil {
		return x.LanguageAndScriptOfRhythmStyle
	}
	return nil
}

func (x *RhythmStyle) GetTerritoryOfRhythmStyleDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfRhythmStyleDescription
	}
	return nil
}

type RhythmStyleValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RhythmStyleValue) Reset() {
	*x = RhythmStyleValue{}
	mi := &file_meadv11_mead_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RhythmStyleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RhythmStyleValue) ProtoMessage() {}

func (x *RhythmStyleValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RhythmStyleValue.ProtoReflect.Descriptor instead.
func (*RhythmStyleValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{49}
}

func (x *RhythmStyleValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RhythmStyleValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RhythmStyleValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type RootChordNote struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RootChordNote) Reset() {
	*x = RootChordNote{}
	mi := &file_meadv11_mead_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RootChordNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootChordNote) ProtoMessage() {}

func (x *RootChordNote) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootChordNote.ProtoReflect.Descriptor instead.
func (*RootChordNote) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{50}
}

func (x *RootChordNote) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RootChordNote) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RootChordNote) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type RootChordQuality struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RootChordQuality) Reset() {
	*x = RootChordQuality{}
	mi := &file_meadv11_mead_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RootChordQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootChordQuality) ProtoMessage() {}

func (x *RootChordQuality) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootChordQuality.ProtoReflect.Descriptor instead.
func (*RootChordQuality) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{51}
}

func (x *RootChordQuality) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RootChordQuality) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RootChordQuality) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type Sample struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"RelatedResource"
	RelatedResource *ResourceSummary `protobuf:"bytes,2,opt,name=related_resource,json=relatedResource,proto3" json:"related_resource,omitempty" xml:"RelatedResource"`
	// @gotags: xml:"SampleFeature"
	SampleFeature []*SampleFeature `protobuf:"bytes,3,rep,name=sample_feature,json=sampleFeature,proto3" json:"sample_feature,omitempty" xml:"SampleFeature"`
	// @gotags: xml:"Description"
	Description   []*TextWithFormat `protobuf:"bytes,4,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sample) Reset() {
	*x = Sample{}
	mi := &file_meadv11_mead_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{52}
}

func (x *Sample) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Sample) GetRelatedResource() *ResourceSummary {
	if x != nil {
		return x.RelatedResource
	}
	return nil
}

func (x *Sample) GetSampleFeature() []*SampleFeature {
	if x != nil {
		return x.SampleFeature
	}
	return nil
}

func (x *Sample) GetDescription() []*TextWithFormat {
	if x != nil {
		return x.Description
	}
	return nil
}

type SampleFeature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,2,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SampleFeature) Reset() {
	*x = SampleFeature{}
	mi := &file_meadv11_mead_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SampleFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleFeature) ProtoMessage() {}

func (x *SampleFeature) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleFeature.ProtoReflect.Descriptor instead.
func (*SampleFeature) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{53}
}

func (x *SampleFeature) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SampleFeature) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

type SimilarRelease struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Release"
	Release *Release `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty" xml:"Release"`
	// @gotags: xml:"Description"
	Description   []*Annotation `protobuf:"bytes,3,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimilarRelease) Reset() {
	*x = SimilarRelease{}
	mi := &file_meadv11_mead_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimilarRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimilarRelease) ProtoMessage() {}

func (x *SimilarRelease) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimilarRelease.ProtoReflect.Descriptor instead.
func (*SimilarRelease) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{54}
}

func (x *SimilarRelease) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *SimilarRelease) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *SimilarRelease) GetDescription() []*Annotation {
	if x != nil {
		return x.Description
	}
	return nil
}

type SimilarResource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Resource"
	Resource *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty" xml:"Resource"`
	// @gotags: xml:"Description"
	Description   []*Annotation `protobuf:"bytes,3,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimilarResource) Reset() {
	*x = SimilarResource{}
	mi := &file_meadv11_mead_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimilarResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimilarResource) ProtoMessage() {}

func (x *SimilarResource) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimilarResource.ProtoReflect.Descriptor instead.
func (*SimilarResource) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{55}
}

func (x *SimilarResource) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *SimilarResource) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *SimilarResource) GetDescription() []*Annotation {
	if x != nil {
		return x.Description
	}
	return nil
}

type SimilarWork struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Work"
	Work *Work `protobuf:"bytes,2,opt,name=work,proto3" json:"work,omitempty" xml:"Work"`
	// @gotags: xml:"Description"
	Description   []*Annotation `protobuf:"bytes,3,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimilarWork) Reset() {
	*x = SimilarWork{}
	mi := &file_meadv11_mead_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimilarWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimilarWork) ProtoMessage() {}

func (x *SimilarWork) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimilarWork.ProtoReflect.Descriptor instead.
func (*SimilarWork) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{56}
}

func (x *SimilarWork) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *SimilarWork) GetWork() *Work {
	if x != nil {
		return x.Work
	}
	return nil
}

func (x *SimilarWork) GetDescription() []*Annotation {
	if x != nil {
		return x.Description
	}
	return nil
}

type SubGenreCategory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value         []*SubGenreCategoryValue `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty" xml:"Value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubGenreCategory) Reset() {
	*x = SubGenreCategory{}
	mi := &file_meadv11_mead_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubGenreCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubGenreCategory) ProtoMessage() {}

func (x *SubGenreCategory) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubGenreCategory.ProtoReflect.Descriptor instead.
func (*SubGenreCategory) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{57}
}

func (x *SubGenreCategory) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *SubGenreCategory) GetValue() []*SubGenreCategoryValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type TempoValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TempoValue) Reset() {
	*x = TempoValue{}
	mi := &file_meadv11_mead_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TempoValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempoValue) ProtoMessage() {}

func (x *TempoValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempoValue.ProtoReflect.Descriptor instead.
func (*TempoValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{58}
}

func (x *TempoValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TempoValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TempoValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type Theme struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value *ThemeValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	// @gotags: xml:"Description"
	Description []*TextWithoutTerritory `protobuf:"bytes,3,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	// @gotags: xml:"LanguageAndScriptOfTheme"
	LanguageAndScriptOfTheme []string `protobuf:"bytes,4,rep,name=language_and_script_of_theme,json=languageAndScriptOfTheme,proto3" json:"language_and_script_of_theme,omitempty" xml:"LanguageAndScriptOfTheme"`
	// @gotags: xml:"TerritoryOfThemeDescription"
	TerritoryOfThemeDescription []*CurrentTerritoryCode `protobuf:"bytes,5,rep,name=territory_of_theme_description,json=territoryOfThemeDescription,proto3" json:"territory_of_theme_description,omitempty" xml:"TerritoryOfThemeDescription"`
	// @gotags: xml:"ThemeType,attr"
	ThemeType     MoodOrThemeType `protobuf:"varint,6,opt,name=theme_type,json=themeType,proto3,enum=ddex.mead.v11.MoodOrThemeType" json:"theme_type,omitempty" xml:"ThemeType,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Theme) Reset() {
	*x = Theme{}
	mi := &file_meadv11_mead_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Theme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Theme) ProtoMessage() {}

func (x *Theme) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Theme.ProtoReflect.Descriptor instead.
func (*Theme) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{59}
}

func (x *Theme) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Theme) GetValue() *ThemeValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Theme) GetDescription() []*TextWithoutTerritory {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Theme) GetLanguageAndScriptOfTheme() []string {
	if x != nil {
		return x.LanguageAndScriptOfTheme
	}
	return nil
}

func (x *Theme) GetTerritoryOfThemeDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfThemeDescription
	}
	return nil
}

func (x *Theme) GetThemeType() MoodOrThemeType {
	if x != nil {
		return x.ThemeType
	}
	return MoodOrThemeType_MOOD_OR_THEME_TYPE_UNSPECIFIED
}

type ThemeValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ThemeValue) Reset() {
	*x = ThemeValue{}
	mi := &file_meadv11_mead_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThemeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeValue) ProtoMessage() {}

func (x *ThemeValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeValue.ProtoReflect.Descriptor instead.
func (*ThemeValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{60}
}

func (x *ThemeValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ThemeValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ThemeValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type TimeSignature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Modulation"
	Modulation    []*TimeSignatureModulation `protobuf:"bytes,2,rep,name=modulation,proto3" json:"modulation,omitempty" xml:"Modulation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeSignature) Reset() {
	*x = TimeSignature{}
	mi := &file_meadv11_mead_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSignature) ProtoMessage() {}

func (x *TimeSignature) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSignature.ProtoReflect.Descriptor instead.
func (*TimeSignature) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{61}
}

func (x *TimeSignature) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *TimeSignature) GetModulation() []*TimeSignatureModulation {
	if x != nil {
		return x.Modulation
	}
	return nil
}

type TimeSignatureModulation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"Value"
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeSignatureModulation) Reset() {
	*x = TimeSignatureModulation{}
	mi := &file_meadv11_mead_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSignatureModulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSignatureModulation) ProtoMessage() {}

func (x *TimeSignatureModulation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSignatureModulation.ProtoReflect.Descriptor instead.
func (*TimeSignatureModulation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{62}
}

func (x *TimeSignatureModulation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Usage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Description"
	Description []*TextWithFormat `protobuf:"bytes,2,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	// @gotags: xml:"TerritoryOfUsageDescription"
	TerritoryOfUsageDescription []*CurrentTerritoryCode `protobuf:"bytes,3,rep,name=territory_of_usage_description,json=territoryOfUsageDescription,proto3" json:"territory_of_usage_description,omitempty" xml:"TerritoryOfUsageDescription"`
	// @gotags: xml:"SequenceNumber"
	SequenceNumber int32 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty" xml:"SequenceNumber"`
	// @gotags: xml:"RelevantResource"
	RelevantResource []*RelevantResource `protobuf:"bytes,5,rep,name=relevant_resource,json=relevantResource,proto3" json:"relevant_resource,omitempty" xml:"RelevantResource"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Usage) Reset() {
	*x = Usage{}
	mi := &file_meadv11_mead_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{63}
}

func (x *Usage) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Usage) GetDescription() []*TextWithFormat {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Usage) GetTerritoryOfUsageDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfUsageDescription
	}
	return nil
}

func (x *Usage) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Usage) GetRelevantResource() []*RelevantResource {
	if x != nil {
		return x.RelevantResource
	}
	return nil
}

type UsagePeriod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"StartDate"
	StartDate *EventDateWithoutFlags `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty" xml:"StartDate"`
	// @gotags: xml:"EndDate"
	EndDate       *EventDateWithoutFlags `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty" xml:"EndDate"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsagePeriod) Reset() {
	*x = UsagePeriod{}
	mi := &file_meadv11_mead_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsagePeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsagePeriod) ProtoMessage() {}

func (x *UsagePeriod) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsagePeriod.ProtoReflect.Descriptor instead.
func (*UsagePeriod) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{64}
}

func (x *UsagePeriod) GetStartDate() *EventDateWithoutFlags {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *UsagePeriod) GetEndDate() *EventDateWithoutFlags {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type UsedMusicalWork struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"ResourceMusicalWorkReference"
	ResourceMusicalWorkReference []string `protobuf:"bytes,2,rep,name=resource_musical_work_reference,json=resourceMusicalWorkReference,proto3" json:"resource_musical_work_reference,omitempty" xml:"ResourceMusicalWorkReference"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *UsedMusicalWork) Reset() {
	*x = UsedMusicalWork{}
	mi := &file_meadv11_mead_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsedMusicalWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsedMusicalWork) ProtoMessage() {}

func (x *UsedMusicalWork) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsedMusicalWork.ProtoReflect.Descriptor instead.
func (*UsedMusicalWork) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{65}
}

func (x *UsedMusicalWork) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *UsedMusicalWork) GetResourceMusicalWorkReference() []string {
	if x != nil {
		return x.ResourceMusicalWorkReference
	}
	return nil
}

type WorkHierarchy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"IsDescribedElement"
	IsDescribedElement bool `protobuf:"varint,2,opt,name=is_described_element,json=isDescribedElement,proto3" json:"is_described_element,omitempty" xml:"IsDescribedElement"`
	// @gotags: xml:"IsComplete"
	IsComplete bool `protobuf:"varint,3,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty" xml:"IsComplete"`
	// @gotags: xml:"SequenceNumber"
	SequenceNumber int32 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty" xml:"SequenceNumber"`
	// @gotags: xml:"WorkId"
	WorkId *MusicalWorkIdWithoutFlag `protobuf:"bytes,5,opt,name=work_id,json=workId,proto3" json:"work_id,omitempty" xml:"WorkId"`
	// @gotags: xml:"WorkTitle"
	WorkTitle []*WorkTitle `protobuf:"bytes,6,rep,name=work_title,json=workTitle,proto3" json:"work_title,omitempty" xml:"WorkTitle"`
	// @gotags: xml:"Child"
	Child []*ChildWorkHierarchy `protobuf:"bytes,7,rep,name=child,proto3" json:"child,omitempty" xml:"Child"`
	// @gotags: xml:"Form"
	Form          *Form `protobuf:"bytes,8,opt,name=form,proto3" json:"form,omitempty" xml:"Form"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkHierarchy) Reset() {
	*x = WorkHierarchy{}
	mi := &file_meadv11_mead_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkHierarchy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkHierarchy) ProtoMessage() {}

func (x *WorkHierarchy) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkHierarchy.ProtoReflect.Descriptor instead.
func (*WorkHierarchy) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{66}
}

func (x *WorkHierarchy) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *WorkHierarchy) GetIsDescribedElement() bool {
	if x != nil {
		return x.IsDescribedElement
	}
	return false
}

func (x *WorkHierarchy) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

func (x *WorkHierarchy) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *WorkHierarchy) GetWorkId() *MusicalWorkIdWithoutFlag {
	if x != nil {
		return x.WorkId
	}
	return nil
}

func (x *WorkHierarchy) GetWorkTitle() []*WorkTitle {
	if x != nil {
		return x.WorkTitle
	}
	return nil
}

func (x *WorkHierarchy) GetChild() []*ChildWorkHierarchy {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *WorkHierarchy) GetForm() *Form {
	if x != nil {
		return x.Form
	}
	return nil
}

type WorkInformation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MusicalWorkReference"
	MusicalWorkReference string `protobuf:"bytes,1,opt,name=musical_work_reference,json=musicalWorkReference,proto3" json:"musical_work_reference,omitempty" xml:"MusicalWorkReference"`
	// @gotags: xml:"WorkSummary"
	WorkSummary *WorkSummary `protobuf:"bytes,2,opt,name=work_summary,json=workSummary,proto3" json:"work_summary,omitempty" xml:"WorkSummary"`
	// @gotags: xml:"GenreCategory"
	GenreCategory []*GenreCategory `protobuf:"bytes,3,rep,name=genre_category,json=genreCategory,proto3" json:"genre_category,omitempty" xml:"GenreCategory"`
	// @gotags: xml:"SubGenreCategory"
	SubGenreCategory []*SubGenreCategory `protobuf:"bytes,4,rep,name=sub_genre_category,json=subGenreCategory,proto3" json:"sub_genre_category,omitempty" xml:"SubGenreCategory"`
	// @gotags: xml:"Form"
	Form *Form `protobuf:"bytes,5,opt,name=form,proto3" json:"form,omitempty" xml:"Form"`
	// @gotags: xml:"VocalRegister"
	VocalRegister []*VocalRegister `protobuf:"bytes,6,rep,name=vocal_register,json=vocalRegister,proto3" json:"vocal_register,omitempty" xml:"VocalRegister"`
	// @gotags: xml:"Focus"
	Focus []*Focus `protobuf:"bytes,7,rep,name=focus,proto3" json:"focus,omitempty" xml:"Focus"`
	// @gotags: xml:"TimeSignature"
	TimeSignature []*TimeSignature `protobuf:"bytes,8,rep,name=time_signature,json=timeSignature,proto3" json:"time_signature,omitempty" xml:"TimeSignature"`
	// @gotags: xml:"Tempo"
	Tempo []*TempoValue `protobuf:"bytes,9,rep,name=tempo,proto3" json:"tempo,omitempty" xml:"Tempo"`
	// @gotags: xml:"TargetInstrument"
	TargetInstrument []*Instrument `protobuf:"bytes,10,rep,name=target_instrument,json=targetInstrument,proto3" json:"target_instrument,omitempty" xml:"TargetInstrument"`
	// @gotags: xml:"Harmony"
	Harmony []*Harmony `protobuf:"bytes,11,rep,name=harmony,proto3" json:"harmony,omitempty" xml:"Harmony"`
	// @gotags: xml:"Mood"
	Mood []*Mood `protobuf:"bytes,12,rep,name=mood,proto3" json:"mood,omitempty" xml:"Mood"`
	// @gotags: xml:"DanceStyle"
	DanceStyle []*DanceStyle `protobuf:"bytes,13,rep,name=dance_style,json=danceStyle,proto3" json:"dance_style,omitempty" xml:"DanceStyle"`
	// @gotags: xml:"RhythmStyle"
	RhythmStyle []*RhythmStyle `protobuf:"bytes,14,rep,name=rhythm_style,json=rhythmStyle,proto3" json:"rhythm_style,omitempty" xml:"RhythmStyle"`
	// @gotags: xml:"Theme"
	Theme []*Theme `protobuf:"bytes,15,rep,name=theme,proto3" json:"theme,omitempty" xml:"Theme"`
	// @gotags: xml:"Activity"
	Activity []*Activity `protobuf:"bytes,16,rep,name=activity,proto3" json:"activity,omitempty" xml:"Activity"`
	// @gotags: xml:"WorkHierarchy"
	WorkHierarchy []*WorkHierarchy `protobuf:"bytes,17,rep,name=work_hierarchy,json=workHierarchy,proto3" json:"work_hierarchy,omitempty" xml:"WorkHierarchy"`
	// @gotags: xml:"RelatedWork"
	RelatedWork []*RelatedWork `protobuf:"bytes,18,rep,name=related_work,json=relatedWork,proto3" json:"related_work,omitempty" xml:"RelatedWork"`
	// @gotags: xml:"DerivedRecording"
	DerivedRecording []*DerivedRecording `protobuf:"bytes,19,rep,name=derived_recording,json=derivedRecording,proto3" json:"derived_recording,omitempty" xml:"DerivedRecording"`
	// @gotags: xml:"Lyrics"
	Lyrics []*Lyrics `protobuf:"bytes,20,rep,name=lyrics,proto3" json:"lyrics,omitempty" xml:"Lyrics"`
	// @gotags: xml:"CommentaryNote"
	CommentaryNote []*CommentaryNote `protobuf:"bytes,21,rep,name=commentary_note,json=commentaryNote,proto3" json:"commentary_note,omitempty" xml:"CommentaryNote"`
	// @gotags: xml:"ClassicalPeriod"
	ClassicalPeriod *ClassicalPeriod `protobuf:"bytes,22,opt,name=classical_period,json=classicalPeriod,proto3" json:"classical_period,omitempty" xml:"ClassicalPeriod"`
	// @gotags: xml:"Epoch"
	Epoch []*Epoch `protobuf:"bytes,23,rep,name=epoch,proto3" json:"epoch,omitempty" xml:"Epoch"`
	// @gotags: xml:"ArtisticInfluence"
	ArtisticInfluence []*ArtisticInfluence `protobuf:"bytes,24,rep,name=artistic_influence,json=artisticInfluence,proto3" json:"artistic_influence,omitempty" xml:"ArtisticInfluence"`
	// @gotags: xml:"IsSimilar"
	IsSimilar []*SimilarWork `protobuf:"bytes,25,rep,name=is_similar,json=isSimilar,proto3" json:"is_similar,omitempty" xml:"IsSimilar"`
	// @gotags: xml:"Award"
	Award []*Award `protobuf:"bytes,26,rep,name=award,proto3" json:"award,omitempty" xml:"Award"`
	// @gotags: xml:"AlternativeTitle"
	AlternativeTitle []*AlternativeTitle `protobuf:"bytes,27,rep,name=alternative_title,json=alternativeTitle,proto3" json:"alternative_title,omitempty" xml:"AlternativeTitle"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WorkInformation) Reset() {
	*x = WorkInformation{}
	mi := &file_meadv11_mead_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkInformation) ProtoMessage() {}

func (x *WorkInformation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkInformation.ProtoReflect.Descriptor instead.
func (*WorkInformation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{67}
}

func (x *WorkInformation) GetMusicalWorkReference() string {
	if x != nil {
		return x.MusicalWorkReference
	}
	return ""
}

func (x *WorkInformation) GetWorkSummary() *WorkSummary {
	if x != nil {
		return x.WorkSummary
	}
	return nil
}

func (x *WorkInformation) GetGenreCategory() []*GenreCategory {
	if x != nil {
		return x.GenreCategory
	}
	return nil
}

func (x *WorkInformation) GetSubGenreCategory() []*SubGenreCategory {
	if x != nil {
		return x.SubGenreCategory
	}
	return nil
}

func (x *WorkInformation) GetForm() *Form {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *WorkInformation) GetVocalRegister() []*VocalRegister {
	if x != nil {
		return x.VocalRegister
	}
	return nil
}

func (x *WorkInformation) GetFocus() []*Focus {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *WorkInformation) GetTimeSignature() []*TimeSignature {
	if x != nil {
		return x.TimeSignature
	}
	return nil
}

func (x *WorkInformation) GetTempo() []*TempoValue {
	if x != nil {
		return x.Tempo
	}
	return nil
}

func (x *WorkInformation) GetTargetInstrument() []*Instrument {
	if x != nil {
		return x.TargetInstrument
	}
	return nil
}

func (x *WorkInformation) GetHarmony() []*Harmony {
	if x != nil {
		return x.Harmony
	}
	return nil
}

func (x *WorkInformation) GetMood() []*Mood {
	if x != nil {
		return x.Mood
	}
	return nil
}

func (x *WorkInformation) GetDanceStyle() []*DanceStyle {
	if x != nil {
		return x.DanceStyle
	}
	return nil
}

func (x *WorkInformation) GetRhythmStyle() []*RhythmStyle {
	if x != nil {
		return x.RhythmStyle
	}
	return nil
}

func (x *WorkInformation) GetTheme() []*Theme {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *WorkInformation) GetActivity() []*Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *WorkInformation) GetWorkHierarchy() []*WorkHierarchy {
	if x != nil {
		return x.WorkHierarchy
	}
	return nil
}

func (x *WorkInformation) GetRelatedWork() []*RelatedWork {
	if x != nil {
		return x.RelatedWork
	}
	return nil
}

func (x *WorkInformation) GetDerivedRecording() []*DerivedRecording {
	if x != nil {
		return x.DerivedRecording
	}
	return nil
}

func (x *WorkInformation) GetLyrics() []*Lyrics {
	if x != nil {
		return x.Lyrics
	}
	return nil
}

func (x *WorkInformation) GetCommentaryNote() []*CommentaryNote {
	if x != nil {
		return x.CommentaryNote
	}
	return nil
}

func (x *WorkInformation) GetClassicalPeriod() *ClassicalPeriod {
	if x != nil {
		return x.ClassicalPeriod
	}
	return nil
}

func (x *WorkInformation) GetEpoch() []*Epoch {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *WorkInformation) GetArtisticInfluence() []*ArtisticInfluence {
	if x != nil {
		return x.ArtisticInfluence
	}
	return nil
}

func (x *WorkInformation) GetIsSimilar() []*SimilarWork {
	if x != nil {
		return x.IsSimilar
	}
	return nil
}

func (x *WorkInformation) GetAward() []*Award {
	if x != nil {
		return x.Award
	}
	return nil
}

func (x *WorkInformation) GetAlternativeTitle() []*AlternativeTitle {
	if x != nil {
		return x.AlternativeTitle
	}
	return nil
}

type WorkInformationList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"WorkInformation"
	WorkInformation []*WorkInformation `protobuf:"bytes,1,rep,name=work_information,json=workInformation,proto3" json:"work_information,omitempty" xml:"WorkInformation"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WorkInformationList) Reset() {
	*x = WorkInformationList{}
	mi := &file_meadv11_mead_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkInformationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkInformationList) ProtoMessage() {}

func (x *WorkInformationList) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkInformationList.ProtoReflect.Descriptor instead.
func (*WorkInformationList) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{68}
}

func (x *WorkInformationList) GetWorkInformation() []*WorkInformation {
	if x != nil {
		return x.WorkInformation
	}
	return nil
}

type WorkSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MusicalWorkId"
	MusicalWorkId *MusicalWorkIdWithoutFlag `protobuf:"bytes,1,opt,name=musical_work_id,json=musicalWorkId,proto3" json:"musical_work_id,omitempty" xml:"MusicalWorkId"`
	// @gotags: xml:"WorkTitle"
	WorkTitle []*TitleWithPronunciation `protobuf:"bytes,2,rep,name=work_title,json=workTitle,proto3" json:"work_title,omitempty" xml:"WorkTitle"`
	// @gotags: xml:"Writer"
	Writer        []*PartyDescriptorWithPronunciation `protobuf:"bytes,3,rep,name=writer,proto3" json:"writer,omitempty" xml:"Writer"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkSummary) Reset() {
	*x = WorkSummary{}
	mi := &file_meadv11_mead_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkSummary) ProtoMessage() {}

func (x *WorkSummary) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkSummary.ProtoReflect.Descriptor instead.
func (*WorkSummary) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{69}
}

func (x *WorkSummary) GetMusicalWorkId() *MusicalWorkIdWithoutFlag {
	if x != nil {
		return x.MusicalWorkId
	}
	return nil
}

func (x *WorkSummary) GetWorkTitle() []*TitleWithPronunciation {
	if x != nil {
		return x.WorkTitle
	}
	return nil
}

func (x *WorkSummary) GetWriter() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.Writer
	}
	return nil
}

type Category struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"term,attr"
	Term string `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty" xml:"term,attr"`
	// @gotags: xml:"scheme,attr"
	Scheme string `protobuf:"bytes,2,opt,name=scheme,proto3" json:"scheme,omitempty" xml:"scheme,attr"`
	// @gotags: xml:"label,attr"
	Label         string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty" xml:"label,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Category) Reset() {
	*x = Category{}
	mi := &file_meadv11_mead_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{70}
}

func (x *Category) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *Category) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Category) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type Content struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"type,attr"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" xml:"type,attr"`
	// @gotags: xml:"src,attr"
	Src           string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty" xml:"src,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_meadv11_mead_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{71}
}

func (x *Content) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Content) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

type DateTime struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DateTime) Reset() {
	*x = DateTime{}
	mi := &file_meadv11_mead_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTime) ProtoMessage() {}

func (x *DateTime) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTime.ProtoReflect.Descriptor instead.
func (*DateTime) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{72}
}

func (x *DateTime) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Generator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"uri,attr"
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty" xml:"uri,attr"`
	// @gotags: xml:"version,attr"
	Version       string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" xml:"version,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Generator) Reset() {
	*x = Generator{}
	mi := &file_meadv11_mead_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Generator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Generator) ProtoMessage() {}

func (x *Generator) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Generator.ProtoReflect.Descriptor instead.
func (*Generator) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{73}
}

func (x *Generator) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Generator) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Generator) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Icon struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Icon) Reset() {
	*x = Icon{}
	mi := &file_meadv11_mead_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Icon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Icon) ProtoMessage() {}

func (x *Icon) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Icon.ProtoReflect.Descriptor instead.
func (*Icon) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{74}
}

func (x *Icon) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Id struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Id) Reset() {
	*x = Id{}
	mi := &file_meadv11_mead_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{75}
}

func (x *Id) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Link struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"href,attr"
	Href string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty" xml:"href,attr"`
	// @gotags: xml:"rel,attr"
	Rel string `protobuf:"bytes,2,opt,name=rel,proto3" json:"rel,omitempty" xml:"rel,attr"`
	// @gotags: xml:"type,attr"
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" xml:"type,attr"`
	// @gotags: xml:"hreflang,attr"
	Hreflang string `protobuf:"bytes,4,opt,name=hreflang,proto3" json:"hreflang,omitempty" xml:"hreflang,attr"`
	// @gotags: xml:"title,attr"
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty" xml:"title,attr"`
	// @gotags: xml:"length,attr"
	Length        int32 `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty" xml:"length,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_meadv11_mead_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{76}
}

func (x *Link) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *Link) GetRel() string {
	if x != nil {
		return x.Rel
	}
	return ""
}

func (x *Link) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Link) GetHreflang() string {
	if x != nil {
		return x.Hreflang
	}
	return ""
}

func (x *Link) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Link) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type Logo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Logo) Reset() {
	*x = Logo{}
	mi := &file_meadv11_mead_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logo) ProtoMessage() {}

func (x *Logo) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logo.ProtoReflect.Descriptor instead.
func (*Logo) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{77}
}

func (x *Logo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Person struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Choice:
	//
	//	*Person_Name
	//	*Person_Uri
	//	*Person_Email
	Choice        isPerson_Choice `protobuf_oneof:"choice"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Person) Reset() {
	*x = Person{}
	mi := &file_meadv11_mead_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{78}
}

func (x *Person) GetChoice() isPerson_Choice {
	if x != nil {
		return x.Choice
	}
	return nil
}

func (x *Person) GetName() string {
	if x != nil {
		if x, ok := x.Choice.(*Person_Name); ok {
			return x.Name
		}
	}
	return ""
}

func (x *Person) GetUri() *URI {
	if x != nil {
		if x, ok := x.Choice.(*Person_Uri); ok {
			return x.Uri
		}
	}
	return nil
}

func (x *Person) GetEmail() string {
	if x != nil {
		if x, ok := x.Choice.(*Person_Email); ok {
			return x.Email
		}
	}
	return ""
}

type isPerson_Choice interface {
	isPerson_Choice()
}

type Person_Name struct {
	// @gotags: xml:"name"
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof" xml:"name"`
}

type Person_Uri struct {
	// @gotags: xml:"uri"
	Uri *URI `protobuf:"bytes,2,opt,name=uri,proto3,oneof" xml:"uri"`
}

type Person_Email struct {
	// @gotags: xml:"email"
	Email string `protobuf:"bytes,3,opt,name=email,proto3,oneof" xml:"email"`
}

func (*Person_Name) isPerson_Choice() {}

func (*Person_Uri) isPerson_Choice() {}

func (*Person_Email) isPerson_Choice() {}

type Source struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Choice:
	//
	//	*Source_Author
	//	*Source_Category
	//	*Source_Contributor
	//	*Source_Generator
	//	*Source_Icon
	//	*Source_Id
	//	*Source_Link
	//	*Source_Logo
	//	*Source_Rights
	//	*Source_Subtitle
	//	*Source_Title
	//	*Source_Updated
	Choice        isSource_Choice `protobuf_oneof:"choice"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_meadv11_mead_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{79}
}

func (x *Source) GetChoice() isSource_Choice {
	if x != nil {
		return x.Choice
	}
	return nil
}

func (x *Source) GetAuthor() *Person {
	if x != nil {
		if x, ok := x.Choice.(*Source_Author); ok {
			return x.Author
		}
	}
	return nil
}

func (x *Source) GetCategory() *Category {
	if x != nil {
		if x, ok := x.Choice.(*Source_Category); ok {
			return x.Category
		}
	}
	return nil
}

func (x *Source) GetContributor() *Person {
	if x != nil {
		if x, ok := x.Choice.(*Source_Contributor); ok {
			return x.Contributor
		}
	}
	return nil
}

func (x *Source) GetGenerator() *Generator {
	if x != nil {
		if x, ok := x.Choice.(*Source_Generator); ok {
			return x.Generator
		}
	}
	return nil
}

func (x *Source) GetIcon() *Icon {
	if x != nil {
		if x, ok := x.Choice.(*Source_Icon); ok {
			return x.Icon
		}
	}
	return nil
}

func (x *Source) GetId() *Id {
	if x != nil {
		if x, ok := x.Choice.(*Source_Id); ok {
			return x.Id
		}
	}
	return nil
}

func (x *Source) GetLink() *Link {
	if x != nil {
		if x, ok := x.Choice.(*Source_Link); ok {
			return x.Link
		}
	}
	return nil
}

func (x *Source) GetLogo() *Logo {
	if x != nil {
		if x, ok := x.Choice.(*Source_Logo); ok {
			return x.Logo
		}
	}
	return nil
}

func (x *Source) GetRights() *Text {
	if x != nil {
		if x, ok := x.Choice.(*Source_Rights); ok {
			return x.Rights
		}
	}
	return nil
}

func (x *Source) GetSubtitle() *Text {
	if x != nil {
		if x, ok := x.Choice.(*Source_Subtitle); ok {
			return x.Subtitle
		}
	}
	return nil
}

func (x *Source) GetTitle() *Text {
	if x != nil {
		if x, ok := x.Choice.(*Source_Title); ok {
			return x.Title
		}
	}
	return nil
}

func (x *Source) GetUpdated() *DateTime {
	if x != nil {
		if x, ok := x.Choice.(*Source_Updated); ok {
			return x.Updated
		}
	}
	return nil
}

type isSource_Choice interface {
	isSource_Choice()
}

type Source_Author struct {
	// @gotags: xml:"author"
	Author *Person `protobuf:"bytes,1,opt,name=author,proto3,oneof" xml:"author"`
}

type Source_Category struct {
	// @gotags: xml:"category"
	Category *Category `protobuf:"bytes,2,opt,name=category,proto3,oneof" xml:"category"`
}

type Source_Contributor struct {
	// @gotags: xml:"contributor"
	Contributor *Person `protobuf:"bytes,3,opt,name=contributor,proto3,oneof" xml:"contributor"`
}

type Source_Generator struct {
	// @gotags: xml:"generator"
	Generator *Generator `protobuf:"bytes,4,opt,name=generator,proto3,oneof" xml:"generator"`
}

type Source_Icon struct {
	// @gotags: xml:"icon"
	Icon *Icon `protobuf:"bytes,5,opt,name=icon,proto3,oneof" xml:"icon"`
}

type Source_Id struct {
	// @gotags: xml:"id"
	Id *Id `protobuf:"bytes,6,opt,name=id,proto3,oneof" xml:"id"`
}

type Source_Link struct {
	// @gotags: xml:"link"
	Link *Link `protobuf:"bytes,7,opt,name=link,proto3,oneof" xml:"link"`
}

type Source_Logo struct {
	// @gotags: xml:"logo"
	Logo *Logo `protobuf:"bytes,8,opt,name=logo,proto3,oneof" xml:"logo"`
}

type Source_Rights struct {
	// @gotags: xml:"rights"
	Rights *Text `protobuf:"bytes,9,opt,name=rights,proto3,oneof" xml:"rights"`
}

type Source_Subtitle struct {
	// @gotags: xml:"subtitle"
	Subtitle *Text `protobuf:"bytes,10,opt,name=subtitle,proto3,oneof" xml:"subtitle"`
}

type Source_Title struct {
	// @gotags: xml:"title"
	Title *Text `protobuf:"bytes,11,opt,name=title,proto3,oneof" xml:"title"`
}

type Source_Updated struct {
	// @gotags: xml:"updated"
	Updated *DateTime `protobuf:"bytes,12,opt,name=updated,proto3,oneof" xml:"updated"`
}

func (*Source_Author) isSource_Choice() {}

func (*Source_Category) isSource_Choice() {}

func (*Source_Contributor) isSource_Choice() {}

func (*Source_Generator) isSource_Choice() {}

func (*Source_Icon) isSource_Choice() {}

func (*Source_Id) isSource_Choice() {}

func (*Source_Link) isSource_Choice() {}

func (*Source_Logo) isSource_Choice() {}

func (*Source_Rights) isSource_Choice() {}

func (*Source_Subtitle) isSource_Choice() {}

func (*Source_Title) isSource_Choice() {}

func (*Source_Updated) isSource_Choice() {}

type Text struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"type,attr"
	Type          TextTypeATOM `protobuf:"varint,1,opt,name=type,proto3,enum=ddex.mead.v11.TextTypeATOM" json:"type,omitempty" xml:"type,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Text) Reset() {
	*x = Text{}
	mi := &file_meadv11_mead_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{80}
}

func (x *Text) GetType() TextTypeATOM {
	if x != nil {
		return x.Type
	}
	return TextTypeATOM_TEXT_TYPE_A_T_O_M_UNSPECIFIED
}

type URI struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *URI) Reset() {
	*x = URI{}
	mi := &file_meadv11_mead_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *URI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URI) ProtoMessage() {}

func (x *URI) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URI.ProtoReflect.Descriptor instead.
func (*URI) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{81}
}

func (x *URI) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AllTerritoryCode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"IdentifierType,attr"
	IdentifierType TerritoryCodeTypeIncludingDeprecatedCodes `protobuf:"varint,2,opt,name=identifier_type,json=identifierType,proto3,enum=ddex.mead.v11.TerritoryCodeTypeIncludingDeprecatedCodes" json:"identifier_type,omitempty" xml:"IdentifierType,attr"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AllTerritoryCode) Reset() {
	*x = AllTerritoryCode{}
	mi := &file_meadv11_mead_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllTerritoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTerritoryCode) ProtoMessage() {}

func (x *AllTerritoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTerritoryCode.ProtoReflect.Descriptor instead.
func (*AllTerritoryCode) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{82}
}

func (x *AllTerritoryCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AllTerritoryCode) GetIdentifierType() TerritoryCodeTypeIncludingDeprecatedCodes {
	if x != nil {
		return x.IdentifierType
	}
	return TerritoryCodeTypeIncludingDeprecatedCodes_TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED
}

type ArtistTypeValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ArtistTypeValue) Reset() {
	*x = ArtistTypeValue{}
	mi := &file_meadv11_mead_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtistTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistTypeValue) ProtoMessage() {}

func (x *ArtistTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistTypeValue.ProtoReflect.Descriptor instead.
func (*ArtistTypeValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{83}
}

func (x *ArtistTypeValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ArtistTypeValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ArtistTypeValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type ArtisticInfluence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Party"
	Party []*PartyDescriptorWithPronunciation `protobuf:"bytes,2,rep,name=party,proto3" json:"party,omitempty" xml:"Party"`
	// @gotags: xml:"Work"
	Work []*Work `protobuf:"bytes,3,rep,name=work,proto3" json:"work,omitempty" xml:"Work"`
	// @gotags: xml:"Resource"
	Resource []*Resource `protobuf:"bytes,4,rep,name=resource,proto3" json:"resource,omitempty" xml:"Resource"`
	// @gotags: xml:"Release"
	Release []*Release `protobuf:"bytes,5,rep,name=release,proto3" json:"release,omitempty" xml:"Release"`
	// @gotags: xml:"Description"
	Description []*TextWithFormat `protobuf:"bytes,6,rep,name=description,proto3" json:"description,omitempty" xml:"Description"`
	// @gotags: xml:"IsInfluenced"
	IsInfluenced bool `protobuf:"varint,7,opt,name=is_influenced,json=isInfluenced,proto3" json:"is_influenced,omitempty" xml:"IsInfluenced"`
	// @gotags: xml:"IsInfluencer"
	IsInfluencer  bool `protobuf:"varint,8,opt,name=is_influencer,json=isInfluencer,proto3" json:"is_influencer,omitempty" xml:"IsInfluencer"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtisticInfluence) Reset() {
	*x = ArtisticInfluence{}
	mi := &file_meadv11_mead_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtisticInfluence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtisticInfluence) ProtoMessage() {}

func (x *ArtisticInfluence) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtisticInfluence.ProtoReflect.Descriptor instead.
func (*ArtisticInfluence) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{84}
}

func (x *ArtisticInfluence) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *ArtisticInfluence) GetParty() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *ArtisticInfluence) GetWork() []*Work {
	if x != nil {
		return x.Work
	}
	return nil
}

func (x *ArtisticInfluence) GetResource() []*Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ArtisticInfluence) GetRelease() []*Release {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *ArtisticInfluence) GetDescription() []*TextWithFormat {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ArtisticInfluence) GetIsInfluenced() bool {
	if x != nil {
		return x.IsInfluenced
	}
	return false
}

func (x *ArtisticInfluence) GetIsInfluencer() bool {
	if x != nil {
		return x.IsInfluencer
	}
	return false
}

type Award struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"AwardingBody"
	AwardingBody *PartyDescriptorWithPronunciation `protobuf:"bytes,2,opt,name=awarding_body,json=awardingBody,proto3" json:"awarding_body,omitempty" xml:"AwardingBody"`
	// @gotags: xml:"AwardedParty"
	AwardedParty *PartyDescriptorWithPronunciation `protobuf:"bytes,3,opt,name=awarded_party,json=awardedParty,proto3" json:"awarded_party,omitempty" xml:"AwardedParty"`
	// @gotags: xml:"AwardName"
	AwardName *NameWithPronunciationAndScriptCode `protobuf:"bytes,4,opt,name=award_name,json=awardName,proto3" json:"award_name,omitempty" xml:"AwardName"`
	// @gotags: xml:"Date"
	Date *EventDate `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty" xml:"Date"`
	// @gotags: xml:"IsWinner"
	IsWinner bool `protobuf:"varint,6,opt,name=is_winner,json=isWinner,proto3" json:"is_winner,omitempty" xml:"IsWinner"`
	// @gotags: xml:"Comment"
	Comment       []*TextWithFormat `protobuf:"bytes,7,rep,name=comment,proto3" json:"comment,omitempty" xml:"Comment"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Award) Reset() {
	*x = Award{}
	mi := &file_meadv11_mead_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Award) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Award) ProtoMessage() {}

func (x *Award) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Award.ProtoReflect.Descriptor instead.
func (*Award) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{85}
}

func (x *Award) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Award) GetAwardingBody() *PartyDescriptorWithPronunciation {
	if x != nil {
		return x.AwardingBody
	}
	return nil
}

func (x *Award) GetAwardedParty() *PartyDescriptorWithPronunciation {
	if x != nil {
		return x.AwardedParty
	}
	return nil
}

func (x *Award) GetAwardName() *NameWithPronunciationAndScriptCode {
	if x != nil {
		return x.AwardName
	}
	return nil
}

func (x *Award) GetDate() *EventDate {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Award) GetIsWinner() bool {
	if x != nil {
		return x.IsWinner
	}
	return false
}

func (x *Award) GetComment() []*TextWithFormat {
	if x != nil {
		return x.Comment
	}
	return nil
}

type CatalogNumber struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace     string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CatalogNumber) Reset() {
	*x = CatalogNumber{}
	mi := &file_meadv11_mead_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CatalogNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogNumber) ProtoMessage() {}

func (x *CatalogNumber) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatalogNumber.ProtoReflect.Descriptor instead.
func (*CatalogNumber) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{86}
}

func (x *CatalogNumber) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CatalogNumber) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ChartEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"Position"
	Position int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty" xml:"Position"`
	// @gotags: xml:"Date"
	Date string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty" xml:"Date"`
	// @gotags: xml:"Duration"
	Duration *Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty" xml:"Duration"`
	// @gotags: xml:"Comment"
	Comment       []*TextWithFormat `protobuf:"bytes,4,rep,name=comment,proto3" json:"comment,omitempty" xml:"Comment"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChartEntry) Reset() {
	*x = ChartEntry{}
	mi := &file_meadv11_mead_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartEntry) ProtoMessage() {}

func (x *ChartEntry) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartEntry.ProtoReflect.Descriptor instead.
func (*ChartEntry) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{87}
}

func (x *ChartEntry) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ChartEntry) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ChartEntry) GetDuration() *Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ChartEntry) GetComment() []*TextWithFormat {
	if x != nil {
		return x.Comment
	}
	return nil
}

type ClassicalPeriod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Name"
	Name *PeriodValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" xml:"Name"`
	// @gotags: xml:"LanguageAndScriptOfClassicalPeriod"
	LanguageAndScriptOfClassicalPeriod []string `protobuf:"bytes,3,rep,name=language_and_script_of_classical_period,json=languageAndScriptOfClassicalPeriod,proto3" json:"language_and_script_of_classical_period,omitempty" xml:"LanguageAndScriptOfClassicalPeriod"`
	// @gotags: xml:"TerritoryOfClassicalPeriodDescription"
	TerritoryOfClassicalPeriodDescription []*CurrentTerritoryCode `protobuf:"bytes,4,rep,name=territory_of_classical_period_description,json=territoryOfClassicalPeriodDescription,proto3" json:"territory_of_classical_period_description,omitempty" xml:"TerritoryOfClassicalPeriodDescription"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *ClassicalPeriod) Reset() {
	*x = ClassicalPeriod{}
	mi := &file_meadv11_mead_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassicalPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassicalPeriod) ProtoMessage() {}

func (x *ClassicalPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassicalPeriod.ProtoReflect.Descriptor instead.
func (*ClassicalPeriod) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{88}
}

func (x *ClassicalPeriod) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *ClassicalPeriod) GetName() *PeriodValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ClassicalPeriod) GetLanguageAndScriptOfClassicalPeriod() []string {
	if x != nil {
		return x.LanguageAndScriptOfClassicalPeriod
	}
	return nil
}

func (x *ClassicalPeriod) GetTerritoryOfClassicalPeriodDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfClassicalPeriodDescription
	}
	return nil
}

type CommentaryNote struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Text"
	Text []*TextWithoutTerritory `protobuf:"bytes,2,rep,name=text,proto3" json:"text,omitempty" xml:"Text"`
	// @gotags: xml:"CommentaryNoteType"
	CommentaryNoteType []*CommentaryNoteType `protobuf:"bytes,3,rep,name=commentary_note_type,json=commentaryNoteType,proto3" json:"commentary_note_type,omitempty" xml:"CommentaryNoteType"`
	// @gotags: xml:"LanguageAndScriptOfCommentaryNote"
	LanguageAndScriptOfCommentaryNote []string `protobuf:"bytes,4,rep,name=language_and_script_of_commentary_note,json=languageAndScriptOfCommentaryNote,proto3" json:"language_and_script_of_commentary_note,omitempty" xml:"LanguageAndScriptOfCommentaryNote"`
	// @gotags: xml:"TerritoryOfCommentaryNoteDescription"
	TerritoryOfCommentaryNoteDescription []*CurrentTerritoryCode `protobuf:"bytes,5,rep,name=territory_of_commentary_note_description,json=territoryOfCommentaryNoteDescription,proto3" json:"territory_of_commentary_note_description,omitempty" xml:"TerritoryOfCommentaryNoteDescription"`
	// @gotags: xml:"Author"
	Author        []*PartyDescriptorWithPronunciation `protobuf:"bytes,6,rep,name=author,proto3" json:"author,omitempty" xml:"Author"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommentaryNote) Reset() {
	*x = CommentaryNote{}
	mi := &file_meadv11_mead_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentaryNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentaryNote) ProtoMessage() {}

func (x *CommentaryNote) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentaryNote.ProtoReflect.Descriptor instead.
func (*CommentaryNote) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{89}
}

func (x *CommentaryNote) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *CommentaryNote) GetText() []*TextWithoutTerritory {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *CommentaryNote) GetCommentaryNoteType() []*CommentaryNoteType {
	if x != nil {
		return x.CommentaryNoteType
	}
	return nil
}

func (x *CommentaryNote) GetLanguageAndScriptOfCommentaryNote() []string {
	if x != nil {
		return x.LanguageAndScriptOfCommentaryNote
	}
	return nil
}

func (x *CommentaryNote) GetTerritoryOfCommentaryNoteDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfCommentaryNoteDescription
	}
	return nil
}

func (x *CommentaryNote) GetAuthor() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.Author
	}
	return nil
}

type CommentaryNoteType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CommentaryNoteType) Reset() {
	*x = CommentaryNoteType{}
	mi := &file_meadv11_mead_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommentaryNoteType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentaryNoteType) ProtoMessage() {}

func (x *CommentaryNoteType) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentaryNoteType.ProtoReflect.Descriptor instead.
func (*CommentaryNoteType) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{90}
}

func (x *CommentaryNoteType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CommentaryNoteType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CommentaryNoteType) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type CurrentTerritoryCode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"IdentifierType,attr"
	IdentifierType TerritoryCodeType `protobuf:"varint,2,opt,name=identifier_type,json=identifierType,proto3,enum=ddex.mead.v11.TerritoryCodeType" json:"identifier_type,omitempty" xml:"IdentifierType,attr"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CurrentTerritoryCode) Reset() {
	*x = CurrentTerritoryCode{}
	mi := &file_meadv11_mead_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrentTerritoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentTerritoryCode) ProtoMessage() {}

func (x *CurrentTerritoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentTerritoryCode.ProtoReflect.Descriptor instead.
func (*CurrentTerritoryCode) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{91}
}

func (x *CurrentTerritoryCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CurrentTerritoryCode) GetIdentifierType() TerritoryCodeType {
	if x != nil {
		return x.IdentifierType
	}
	return TerritoryCodeType_TERRITORY_CODE_TYPE_UNSPECIFIED
}

type Date struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"IsApproximate,attr"
	IsApproximate bool `protobuf:"varint,2,opt,name=is_approximate,json=isApproximate,proto3" json:"is_approximate,omitempty" xml:"IsApproximate,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Date) Reset() {
	*x = Date{}
	mi := &file_meadv11_mead_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{92}
}

func (x *Date) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Date) GetIsApproximate() bool {
	if x != nil {
		return x.IsApproximate
	}
	return false
}

type DetailedHashSum struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"Algorithm"
	Algorithm *HashSumAlgorithmType `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty" xml:"Algorithm"`
	// @gotags: xml:"Version"
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" xml:"Version"`
	// @gotags: xml:"Parameter"
	Parameter string `protobuf:"bytes,3,opt,name=parameter,proto3" json:"parameter,omitempty" xml:"Parameter"`
	// @gotags: xml:"DataType"
	DataType BinaryDataType `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=ddex.mead.v11.BinaryDataType" json:"data_type,omitempty" xml:"DataType"`
	// @gotags: xml:"HashSumValue"
	HashSumValue  string `protobuf:"bytes,5,opt,name=hash_sum_value,json=hashSumValue,proto3" json:"hash_sum_value,omitempty" xml:"HashSumValue"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DetailedHashSum) Reset() {
	*x = DetailedHashSum{}
	mi := &file_meadv11_mead_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetailedHashSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedHashSum) ProtoMessage() {}

func (x *DetailedHashSum) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedHashSum.ProtoReflect.Descriptor instead.
func (*DetailedHashSum) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{93}
}

func (x *DetailedHashSum) GetAlgorithm() *HashSumAlgorithmType {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *DetailedHashSum) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DetailedHashSum) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

func (x *DetailedHashSum) GetDataType() BinaryDataType {
	if x != nil {
		return x.DataType
	}
	return BinaryDataType_BINARY_DATA_TYPE_UNSPECIFIED
}

func (x *DetailedHashSum) GetHashSumValue() string {
	if x != nil {
		return x.HashSumValue
	}
	return ""
}

type DetailedPartyId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ISNI"
	ISNI string `protobuf:"bytes,1,opt,name=i_s_n_i,json=iSNI,proto3" json:"i_s_n_i,omitempty" xml:"ISNI"`
	// @gotags: xml:"DPID"
	DPID string `protobuf:"bytes,2,opt,name=d_p_i_d,json=dPID,proto3" json:"d_p_i_d,omitempty" xml:"DPID"`
	// @gotags: xml:"IpiNameNumber"
	IpiNameNumber string `protobuf:"bytes,3,opt,name=ipi_name_number,json=ipiNameNumber,proto3" json:"ipi_name_number,omitempty" xml:"IpiNameNumber"`
	// @gotags: xml:"IPN"
	IPN string `protobuf:"bytes,4,opt,name=i_p_n,json=iPN,proto3" json:"i_p_n,omitempty" xml:"IPN"`
	// @gotags: xml:"CisacSocietyId"
	CisacSocietyId string `protobuf:"bytes,5,opt,name=cisac_society_id,json=cisacSocietyId,proto3" json:"cisac_society_id,omitempty" xml:"CisacSocietyId"`
	// @gotags: xml:"ProprietaryId"
	ProprietaryId []*ProprietaryId `protobuf:"bytes,6,rep,name=proprietary_id,json=proprietaryId,proto3" json:"proprietary_id,omitempty" xml:"ProprietaryId"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DetailedPartyId) Reset() {
	*x = DetailedPartyId{}
	mi := &file_meadv11_mead_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetailedPartyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedPartyId) ProtoMessage() {}

func (x *DetailedPartyId) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedPartyId.ProtoReflect.Descriptor instead.
func (*DetailedPartyId) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{94}
}

func (x *DetailedPartyId) GetISNI() string {
	if x != nil {
		return x.ISNI
	}
	return ""
}

func (x *DetailedPartyId) GetDPID() string {
	if x != nil {
		return x.DPID
	}
	return ""
}

func (x *DetailedPartyId) GetIpiNameNumber() string {
	if x != nil {
		return x.IpiNameNumber
	}
	return ""
}

func (x *DetailedPartyId) GetIPN() string {
	if x != nil {
		return x.IPN
	}
	return ""
}

func (x *DetailedPartyId) GetCisacSocietyId() string {
	if x != nil {
		return x.CisacSocietyId
	}
	return ""
}

func (x *DetailedPartyId) GetProprietaryId() []*ProprietaryId {
	if x != nil {
		return x.ProprietaryId
	}
	return nil
}

type DisplayArtistNameWithDefault struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,2,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	// @gotags: xml:"ApplicableTerritoryCode,attr"
	ApplicableTerritoryCode *CurrentTerritoryCode `protobuf:"bytes,3,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty" xml:"ApplicableTerritoryCode,attr"`
	// @gotags: xml:"IsDefault,attr"
	IsDefault     bool `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty" xml:"IsDefault,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisplayArtistNameWithDefault) Reset() {
	*x = DisplayArtistNameWithDefault{}
	mi := &file_meadv11_mead_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisplayArtistNameWithDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayArtistNameWithDefault) ProtoMessage() {}

func (x *DisplayArtistNameWithDefault) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayArtistNameWithDefault.ProtoReflect.Descriptor instead.
func (*DisplayArtistNameWithDefault) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{95}
}

func (x *DisplayArtistNameWithDefault) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DisplayArtistNameWithDefault) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

func (x *DisplayArtistNameWithDefault) GetApplicableTerritoryCode() *CurrentTerritoryCode {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return nil
}

func (x *DisplayArtistNameWithDefault) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type DisplayArtistNameWithPronunciation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"Name"
	Name *DisplayArtistNameWithDefault `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" xml:"Name"`
	// @gotags: xml:"Pronunciation"
	Pronunciation []*Pronunciation `protobuf:"bytes,2,rep,name=pronunciation,proto3" json:"pronunciation,omitempty" xml:"Pronunciation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisplayArtistNameWithPronunciation) Reset() {
	*x = DisplayArtistNameWithPronunciation{}
	mi := &file_meadv11_mead_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisplayArtistNameWithPronunciation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayArtistNameWithPronunciation) ProtoMessage() {}

func (x *DisplayArtistNameWithPronunciation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayArtistNameWithPronunciation.ProtoReflect.Descriptor instead.
func (*DisplayArtistNameWithPronunciation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{96}
}

func (x *DisplayArtistNameWithPronunciation) GetName() *DisplayArtistNameWithDefault {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DisplayArtistNameWithPronunciation) GetPronunciation() []*Pronunciation {
	if x != nil {
		return x.Pronunciation
	}
	return nil
}

type Duration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"UnitOfDuration,attr"
	UnitOfDuration UnitOfDuration `protobuf:"varint,2,opt,name=unit_of_duration,json=unitOfDuration,proto3,enum=ddex.mead.v11.UnitOfDuration" json:"unit_of_duration,omitempty" xml:"UnitOfDuration,attr"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,4,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Duration) Reset() {
	*x = Duration{}
	mi := &file_meadv11_mead_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{97}
}

func (x *Duration) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Duration) GetUnitOfDuration() UnitOfDuration {
	if x != nil {
		return x.UnitOfDuration
	}
	return UnitOfDuration_UNIT_OF_DURATION_UNSPECIFIED
}

func (x *Duration) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Duration) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type Epoch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value []*Name `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty" xml:"Value"`
	// @gotags: xml:"RelatedArtist"
	RelatedArtist []*PartyDescriptorWithPronunciation `protobuf:"bytes,3,rep,name=related_artist,json=relatedArtist,proto3" json:"related_artist,omitempty" xml:"RelatedArtist"`
	// @gotags: xml:"RelatedCreation"
	RelatedCreation []*RelatedCreation `protobuf:"bytes,4,rep,name=related_creation,json=relatedCreation,proto3" json:"related_creation,omitempty" xml:"RelatedCreation"`
	// @gotags: xml:"StartDate"
	StartDate *Date `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty" xml:"StartDate"`
	// @gotags: xml:"EndDate"
	EndDate *Date `protobuf:"bytes,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty" xml:"EndDate"`
	// @gotags: xml:"LanguageAndScriptOfEpoch"
	LanguageAndScriptOfEpoch []string `protobuf:"bytes,7,rep,name=language_and_script_of_epoch,json=languageAndScriptOfEpoch,proto3" json:"language_and_script_of_epoch,omitempty" xml:"LanguageAndScriptOfEpoch"`
	// @gotags: xml:"TerritoryOfEpochDescription"
	TerritoryOfEpochDescription []*CurrentTerritoryCode `protobuf:"bytes,8,rep,name=territory_of_epoch_description,json=territoryOfEpochDescription,proto3" json:"territory_of_epoch_description,omitempty" xml:"TerritoryOfEpochDescription"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Epoch) Reset() {
	*x = Epoch{}
	mi := &file_meadv11_mead_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Epoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epoch) ProtoMessage() {}

func (x *Epoch) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epoch.ProtoReflect.Descriptor instead.
func (*Epoch) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{98}
}

func (x *Epoch) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Epoch) GetValue() []*Name {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Epoch) GetRelatedArtist() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.RelatedArtist
	}
	return nil
}

func (x *Epoch) GetRelatedCreation() []*RelatedCreation {
	if x != nil {
		return x.RelatedCreation
	}
	return nil
}

func (x *Epoch) GetStartDate() *Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Epoch) GetEndDate() *Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Epoch) GetLanguageAndScriptOfEpoch() []string {
	if x != nil {
		return x.LanguageAndScriptOfEpoch
	}
	return nil
}

func (x *Epoch) GetTerritoryOfEpochDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfEpochDescription
	}
	return nil
}

type EventDate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"IsApproximate,attr"
	IsApproximate bool `protobuf:"varint,2,opt,name=is_approximate,json=isApproximate,proto3" json:"is_approximate,omitempty" xml:"IsApproximate,attr"`
	// @gotags: xml:"IsBefore,attr"
	IsBefore bool `protobuf:"varint,3,opt,name=is_before,json=isBefore,proto3" json:"is_before,omitempty" xml:"IsBefore,attr"`
	// @gotags: xml:"IsAfter,attr"
	IsAfter bool `protobuf:"varint,4,opt,name=is_after,json=isAfter,proto3" json:"is_after,omitempty" xml:"IsAfter,attr"`
	// @gotags: xml:"ApplicableTerritoryCode,attr"
	ApplicableTerritoryCode *AllTerritoryCode `protobuf:"bytes,5,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty" xml:"ApplicableTerritoryCode,attr"`
	// @gotags: xml:"LocationDescription,attr"
	LocationDescription string `protobuf:"bytes,6,opt,name=location_description,json=locationDescription,proto3" json:"location_description,omitempty" xml:"LocationDescription,attr"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,7,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *EventDate) Reset() {
	*x = EventDate{}
	mi := &file_meadv11_mead_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDate) ProtoMessage() {}

func (x *EventDate) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDate.ProtoReflect.Descriptor instead.
func (*EventDate) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{99}
}

func (x *EventDate) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EventDate) GetIsApproximate() bool {
	if x != nil {
		return x.IsApproximate
	}
	return false
}

func (x *EventDate) GetIsBefore() bool {
	if x != nil {
		return x.IsBefore
	}
	return false
}

func (x *EventDate) GetIsAfter() bool {
	if x != nil {
		return x.IsAfter
	}
	return false
}

func (x *EventDate) GetApplicableTerritoryCode() *AllTerritoryCode {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return nil
}

func (x *EventDate) GetLocationDescription() string {
	if x != nil {
		return x.LocationDescription
	}
	return ""
}

func (x *EventDate) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

type EventDateTime struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"IsApproximate,attr"
	IsApproximate bool `protobuf:"varint,2,opt,name=is_approximate,json=isApproximate,proto3" json:"is_approximate,omitempty" xml:"IsApproximate,attr"`
	// @gotags: xml:"IsBefore,attr"
	IsBefore bool `protobuf:"varint,3,opt,name=is_before,json=isBefore,proto3" json:"is_before,omitempty" xml:"IsBefore,attr"`
	// @gotags: xml:"IsAfter,attr"
	IsAfter bool `protobuf:"varint,4,opt,name=is_after,json=isAfter,proto3" json:"is_after,omitempty" xml:"IsAfter,attr"`
	// @gotags: xml:"TerritoryCode,attr"
	TerritoryCode *AllTerritoryCode `protobuf:"bytes,5,opt,name=territory_code,json=territoryCode,proto3" json:"territory_code,omitempty" xml:"TerritoryCode,attr"`
	// @gotags: xml:"LocationDescription,attr"
	LocationDescription string `protobuf:"bytes,6,opt,name=location_description,json=locationDescription,proto3" json:"location_description,omitempty" xml:"LocationDescription,attr"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,7,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *EventDateTime) Reset() {
	*x = EventDateTime{}
	mi := &file_meadv11_mead_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventDateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDateTime) ProtoMessage() {}

func (x *EventDateTime) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDateTime.ProtoReflect.Descriptor instead.
func (*EventDateTime) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{100}
}

func (x *EventDateTime) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EventDateTime) GetIsApproximate() bool {
	if x != nil {
		return x.IsApproximate
	}
	return false
}

func (x *EventDateTime) GetIsBefore() bool {
	if x != nil {
		return x.IsBefore
	}
	return false
}

func (x *EventDateTime) GetIsAfter() bool {
	if x != nil {
		return x.IsAfter
	}
	return false
}

func (x *EventDateTime) GetTerritoryCode() *AllTerritoryCode {
	if x != nil {
		return x.TerritoryCode
	}
	return nil
}

func (x *EventDateTime) GetLocationDescription() string {
	if x != nil {
		return x.LocationDescription
	}
	return ""
}

func (x *EventDateTime) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

type File struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"URI"
	URI string `protobuf:"bytes,1,opt,name=u_r_i,json=uRI,proto3" json:"u_r_i,omitempty" xml:"URI"`
	// @gotags: xml:"HashSum"
	HashSum *DetailedHashSum `protobuf:"bytes,2,opt,name=hash_sum,json=hashSum,proto3" json:"hash_sum,omitempty" xml:"HashSum"`
	// @gotags: xml:"FileSize"
	FileSize      string `protobuf:"bytes,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty" xml:"FileSize"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_meadv11_mead_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{101}
}

func (x *File) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *File) GetHashSum() *DetailedHashSum {
	if x != nil {
		return x.HashSum
	}
	return nil
}

func (x *File) GetFileSize() string {
	if x != nil {
		return x.FileSize
	}
	return ""
}

type Focus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Party"
	Party []*PartyDescriptorWithPronunciation `protobuf:"bytes,2,rep,name=party,proto3" json:"party,omitempty" xml:"Party"`
	// @gotags: xml:"DisplayArtistName"
	DisplayArtistName []*DisplayArtistNameWithPronunciation `protobuf:"bytes,3,rep,name=display_artist_name,json=displayArtistName,proto3" json:"display_artist_name,omitempty" xml:"DisplayArtistName"`
	// @gotags: xml:"DisplayArtist"
	DisplayArtist []*PartyDescriptorWithPronunciation `protobuf:"bytes,4,rep,name=display_artist,json=displayArtist,proto3" json:"display_artist,omitempty" xml:"DisplayArtist"`
	// @gotags: xml:"Writer"
	Writer []*PartyDescriptorWithPronunciation `protobuf:"bytes,5,rep,name=writer,proto3" json:"writer,omitempty" xml:"Writer"`
	// @gotags: xml:"SequenceNumber"
	SequenceNumber int32 `protobuf:"varint,6,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty" xml:"SequenceNumber"`
	// @gotags: xml:"PeriodOfBeingFocus"
	PeriodOfBeingFocus []*PeriodWithTime `protobuf:"bytes,7,rep,name=period_of_being_focus,json=periodOfBeingFocus,proto3" json:"period_of_being_focus,omitempty" xml:"PeriodOfBeingFocus"`
	// @gotags: xml:"TerritoryOfBeingFocusTrackDescription"
	TerritoryOfBeingFocusTrackDescription []*CurrentTerritoryCode `protobuf:"bytes,8,rep,name=territory_of_being_focus_track_description,json=territoryOfBeingFocusTrackDescription,proto3" json:"territory_of_being_focus_track_description,omitempty" xml:"TerritoryOfBeingFocusTrackDescription"`
	// @gotags: xml:"Comment"
	Comment []*TextWithoutTerritory `protobuf:"bytes,9,rep,name=comment,proto3" json:"comment,omitempty" xml:"Comment"`
	// @gotags: xml:"IsDefault,attr"
	IsDefault     bool `protobuf:"varint,10,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty" xml:"IsDefault,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Focus) Reset() {
	*x = Focus{}
	mi := &file_meadv11_mead_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Focus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Focus) ProtoMessage() {}

func (x *Focus) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Focus.ProtoReflect.Descriptor instead.
func (*Focus) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{102}
}

func (x *Focus) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Focus) GetParty() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *Focus) GetDisplayArtistName() []*DisplayArtistNameWithPronunciation {
	if x != nil {
		return x.DisplayArtistName
	}
	return nil
}

func (x *Focus) GetDisplayArtist() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.DisplayArtist
	}
	return nil
}

func (x *Focus) GetWriter() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.Writer
	}
	return nil
}

func (x *Focus) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Focus) GetPeriodOfBeingFocus() []*PeriodWithTime {
	if x != nil {
		return x.PeriodOfBeingFocus
	}
	return nil
}

func (x *Focus) GetTerritoryOfBeingFocusTrackDescription() []*CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryOfBeingFocusTrackDescription
	}
	return nil
}

func (x *Focus) GetComment() []*TextWithoutTerritory {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *Focus) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type GenreCategoryValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,2,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,4,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GenreCategoryValue) Reset() {
	*x = GenreCategoryValue{}
	mi := &file_meadv11_mead_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenreCategoryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenreCategoryValue) ProtoMessage() {}

func (x *GenreCategoryValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenreCategoryValue.ProtoReflect.Descriptor instead.
func (*GenreCategoryValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{103}
}

func (x *GenreCategoryValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GenreCategoryValue) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

func (x *GenreCategoryValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GenreCategoryValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type HashSumAlgorithmType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HashSumAlgorithmType) Reset() {
	*x = HashSumAlgorithmType{}
	mi := &file_meadv11_mead_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashSumAlgorithmType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashSumAlgorithmType) ProtoMessage() {}

func (x *HashSumAlgorithmType) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashSumAlgorithmType.ProtoReflect.Descriptor instead.
func (*HashSumAlgorithmType) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{104}
}

func (x *HashSumAlgorithmType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HashSumAlgorithmType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HashSumAlgorithmType) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type HistoricChartingInformation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"TerritoryCode"
	TerritoryCode *CurrentTerritoryCode `protobuf:"bytes,2,opt,name=territory_code,json=territoryCode,proto3" json:"territory_code,omitempty" xml:"TerritoryCode"`
	// @gotags: xml:"ChartName"
	ChartName []*NameWithPronunciationAndScriptCode `protobuf:"bytes,3,rep,name=chart_name,json=chartName,proto3" json:"chart_name,omitempty" xml:"ChartName"`
	// @gotags: xml:"DurationInCharts"
	DurationInCharts *Duration `protobuf:"bytes,4,opt,name=duration_in_charts,json=durationInCharts,proto3" json:"duration_in_charts,omitempty" xml:"DurationInCharts"`
	// @gotags: xml:"TopPosition"
	TopPosition int32 `protobuf:"varint,5,opt,name=top_position,json=topPosition,proto3" json:"top_position,omitempty" xml:"TopPosition"`
	// @gotags: xml:"ChartEntry"
	ChartEntry []*ChartEntry `protobuf:"bytes,6,rep,name=chart_entry,json=chartEntry,proto3" json:"chart_entry,omitempty" xml:"ChartEntry"`
	// @gotags: xml:"Comment"
	Comment       []*TextWithFormat `protobuf:"bytes,7,rep,name=comment,proto3" json:"comment,omitempty" xml:"Comment"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoricChartingInformation) Reset() {
	*x = HistoricChartingInformation{}
	mi := &file_meadv11_mead_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoricChartingInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricChartingInformation) ProtoMessage() {}

func (x *HistoricChartingInformation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricChartingInformation.ProtoReflect.Descriptor instead.
func (*HistoricChartingInformation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{105}
}

func (x *HistoricChartingInformation) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *HistoricChartingInformation) GetTerritoryCode() *CurrentTerritoryCode {
	if x != nil {
		return x.TerritoryCode
	}
	return nil
}

func (x *HistoricChartingInformation) GetChartName() []*NameWithPronunciationAndScriptCode {
	if x != nil {
		return x.ChartName
	}
	return nil
}

func (x *HistoricChartingInformation) GetDurationInCharts() *Duration {
	if x != nil {
		return x.DurationInCharts
	}
	return nil
}

func (x *HistoricChartingInformation) GetTopPosition() int32 {
	if x != nil {
		return x.TopPosition
	}
	return 0
}

func (x *HistoricChartingInformation) GetChartEntry() []*ChartEntry {
	if x != nil {
		return x.ChartEntry
	}
	return nil
}

func (x *HistoricChartingInformation) GetComment() []*TextWithFormat {
	if x != nil {
		return x.Comment
	}
	return nil
}

type Image struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"File"
	File *File `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty" xml:"File"`
	// @gotags: xml:"ImageType"
	ImageType     []*ImageType `protobuf:"bytes,3,rep,name=image_type,json=imageType,proto3" json:"image_type,omitempty" xml:"ImageType"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_meadv11_mead_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{106}
}

func (x *Image) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *Image) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Image) GetImageType() []*ImageType {
	if x != nil {
		return x.ImageType
	}
	return nil
}

type ImageType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ImageType) Reset() {
	*x = ImageType{}
	mi := &file_meadv11_mead_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageType) ProtoMessage() {}

func (x *ImageType) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageType.ProtoReflect.Descriptor instead.
func (*ImageType) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{107}
}

func (x *ImageType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ImageType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ImageType) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type MessageAuditTrail struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MessageAuditTrailEvent"
	MessageAuditTrailEvent []*MessageAuditTrailEvent `protobuf:"bytes,1,rep,name=message_audit_trail_event,json=messageAuditTrailEvent,proto3" json:"message_audit_trail_event,omitempty" xml:"MessageAuditTrailEvent"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MessageAuditTrail) Reset() {
	*x = MessageAuditTrail{}
	mi := &file_meadv11_mead_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageAuditTrail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAuditTrail) ProtoMessage() {}

func (x *MessageAuditTrail) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAuditTrail.ProtoReflect.Descriptor instead.
func (*MessageAuditTrail) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{108}
}

func (x *MessageAuditTrail) GetMessageAuditTrailEvent() []*MessageAuditTrailEvent {
	if x != nil {
		return x.MessageAuditTrailEvent
	}
	return nil
}

type MessageAuditTrailEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MessagingPartyDescriptor"
	MessagingPartyDescriptor *MessagingPartyWithoutCode `protobuf:"bytes,1,opt,name=messaging_party_descriptor,json=messagingPartyDescriptor,proto3" json:"messaging_party_descriptor,omitempty" xml:"MessagingPartyDescriptor"`
	// @gotags: xml:"DateTime"
	DateTime      string `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty" xml:"DateTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageAuditTrailEvent) Reset() {
	*x = MessageAuditTrailEvent{}
	mi := &file_meadv11_mead_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageAuditTrailEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAuditTrailEvent) ProtoMessage() {}

func (x *MessageAuditTrailEvent) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAuditTrailEvent.ProtoReflect.Descriptor instead.
func (*MessageAuditTrailEvent) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{109}
}

func (x *MessageAuditTrailEvent) GetMessagingPartyDescriptor() *MessagingPartyWithoutCode {
	if x != nil {
		return x.MessagingPartyDescriptor
	}
	return nil
}

func (x *MessageAuditTrailEvent) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

type MessageHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MessageThreadId"
	MessageThreadId string `protobuf:"bytes,1,opt,name=message_thread_id,json=messageThreadId,proto3" json:"message_thread_id,omitempty" xml:"MessageThreadId"`
	// @gotags: xml:"MessageId"
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty" xml:"MessageId"`
	// @gotags: xml:"MessageFileName"
	MessageFileName string `protobuf:"bytes,3,opt,name=message_file_name,json=messageFileName,proto3" json:"message_file_name,omitempty" xml:"MessageFileName"`
	// @gotags: xml:"MessageSender"
	MessageSender *MessagingPartyWithoutCode `protobuf:"bytes,4,opt,name=message_sender,json=messageSender,proto3" json:"message_sender,omitempty" xml:"MessageSender"`
	// @gotags: xml:"SentOnBehalfOf"
	SentOnBehalfOf *MessagingPartyWithoutCode `protobuf:"bytes,5,opt,name=sent_on_behalf_of,json=sentOnBehalfOf,proto3" json:"sent_on_behalf_of,omitempty" xml:"SentOnBehalfOf"`
	// @gotags: xml:"MessageRecipient"
	MessageRecipient []*MessagingPartyWithoutCode `protobuf:"bytes,6,rep,name=message_recipient,json=messageRecipient,proto3" json:"message_recipient,omitempty" xml:"MessageRecipient"`
	// @gotags: xml:"MessageCreatedDateTime"
	MessageCreatedDateTime string `protobuf:"bytes,7,opt,name=message_created_date_time,json=messageCreatedDateTime,proto3" json:"message_created_date_time,omitempty" xml:"MessageCreatedDateTime"`
	// @gotags: xml:"MessageAuditTrail"
	MessageAuditTrail *MessageAuditTrail `protobuf:"bytes,8,opt,name=message_audit_trail,json=messageAuditTrail,proto3" json:"message_audit_trail,omitempty" xml:"MessageAuditTrail"`
	// @gotags: xml:"MessageControlType"
	MessageControlType MessageControlType `protobuf:"varint,9,opt,name=message_control_type,json=messageControlType,proto3,enum=ddex.mead.v11.MessageControlType" json:"message_control_type,omitempty" xml:"MessageControlType"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MessageHeader) Reset() {
	*x = MessageHeader{}
	mi := &file_meadv11_mead_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageHeader) ProtoMessage() {}

func (x *MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageHeader.ProtoReflect.Descriptor instead.
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{110}
}

func (x *MessageHeader) GetMessageThreadId() string {
	if x != nil {
		return x.MessageThreadId
	}
	return ""
}

func (x *MessageHeader) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageHeader) GetMessageFileName() string {
	if x != nil {
		return x.MessageFileName
	}
	return ""
}

func (x *MessageHeader) GetMessageSender() *MessagingPartyWithoutCode {
	if x != nil {
		return x.MessageSender
	}
	return nil
}

func (x *MessageHeader) GetSentOnBehalfOf() *MessagingPartyWithoutCode {
	if x != nil {
		return x.SentOnBehalfOf
	}
	return nil
}

func (x *MessageHeader) GetMessageRecipient() []*MessagingPartyWithoutCode {
	if x != nil {
		return x.MessageRecipient
	}
	return nil
}

func (x *MessageHeader) GetMessageCreatedDateTime() string {
	if x != nil {
		return x.MessageCreatedDateTime
	}
	return ""
}

func (x *MessageHeader) GetMessageAuditTrail() *MessageAuditTrail {
	if x != nil {
		return x.MessageAuditTrail
	}
	return nil
}

func (x *MessageHeader) GetMessageControlType() MessageControlType {
	if x != nil {
		return x.MessageControlType
	}
	return MessageControlType_MESSAGE_CONTROL_TYPE_UNSPECIFIED
}

type MessagingPartyWithoutCode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"PartyId"
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty" xml:"PartyId"`
	// @gotags: xml:"PartyName"
	PartyName *PartyNameWithoutCode `protobuf:"bytes,2,opt,name=party_name,json=partyName,proto3" json:"party_name,omitempty" xml:"PartyName"`
	// @gotags: xml:"TradingName"
	TradingName   string `protobuf:"bytes,3,opt,name=trading_name,json=tradingName,proto3" json:"trading_name,omitempty" xml:"TradingName"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessagingPartyWithoutCode) Reset() {
	*x = MessagingPartyWithoutCode{}
	mi := &file_meadv11_mead_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagingPartyWithoutCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingPartyWithoutCode) ProtoMessage() {}

func (x *MessagingPartyWithoutCode) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingPartyWithoutCode.ProtoReflect.Descriptor instead.
func (*MessagingPartyWithoutCode) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{111}
}

func (x *MessagingPartyWithoutCode) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *MessagingPartyWithoutCode) GetPartyName() *PartyNameWithoutCode {
	if x != nil {
		return x.PartyName
	}
	return nil
}

func (x *MessagingPartyWithoutCode) GetTradingName() string {
	if x != nil {
		return x.TradingName
	}
	return ""
}

type MetadataSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"SourceReference"
	SourceReference string `protobuf:"bytes,1,opt,name=source_reference,json=sourceReference,proto3" json:"source_reference,omitempty" xml:"SourceReference"`
	// @gotags: xml:"MetadataSourceType"
	MetadataSourceType *MetadataSourceType `protobuf:"bytes,2,opt,name=metadata_source_type,json=metadataSourceType,proto3" json:"metadata_source_type,omitempty" xml:"MetadataSourceType"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MetadataSource) Reset() {
	*x = MetadataSource{}
	mi := &file_meadv11_mead_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSource) ProtoMessage() {}

func (x *MetadataSource) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSource.ProtoReflect.Descriptor instead.
func (*MetadataSource) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{112}
}

func (x *MetadataSource) GetSourceReference() string {
	if x != nil {
		return x.SourceReference
	}
	return ""
}

func (x *MetadataSource) GetMetadataSourceType() *MetadataSourceType {
	if x != nil {
		return x.MetadataSourceType
	}
	return nil
}

type MetadataSourceList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSource"
	MetadataSource []*MetadataSource `protobuf:"bytes,1,rep,name=metadata_source,json=metadataSource,proto3" json:"metadata_source,omitempty" xml:"MetadataSource"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MetadataSourceList) Reset() {
	*x = MetadataSourceList{}
	mi := &file_meadv11_mead_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataSourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSourceList) ProtoMessage() {}

func (x *MetadataSourceList) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSourceList.ProtoReflect.Descriptor instead.
func (*MetadataSourceList) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{113}
}

func (x *MetadataSourceList) GetMetadataSource() []*MetadataSource {
	if x != nil {
		return x.MetadataSource
	}
	return nil
}

type MetadataSourceReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"AssertionDateTime,attr"
	AssertionDateTime string `protobuf:"bytes,2,opt,name=assertion_date_time,json=assertionDateTime,proto3" json:"assertion_date_time,omitempty" xml:"AssertionDateTime,attr"`
	// @gotags: xml:"Status,attr"
	Status AssertionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=ddex.mead.v11.AssertionStatus" json:"status,omitempty" xml:"Status,attr"`
	// @gotags: xml:"Weight,attr"
	Weight        string `protobuf:"bytes,4,opt,name=weight,proto3" json:"weight,omitempty" xml:"Weight,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataSourceReference) Reset() {
	*x = MetadataSourceReference{}
	mi := &file_meadv11_mead_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSourceReference) ProtoMessage() {}

func (x *MetadataSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSourceReference.ProtoReflect.Descriptor instead.
func (*MetadataSourceReference) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{114}
}

func (x *MetadataSourceReference) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MetadataSourceReference) GetAssertionDateTime() string {
	if x != nil {
		return x.AssertionDateTime
	}
	return ""
}

func (x *MetadataSourceReference) GetStatus() AssertionStatus {
	if x != nil {
		return x.Status
	}
	return AssertionStatus_ASSERTION_STATUS_UNSPECIFIED
}

func (x *MetadataSourceReference) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

type MetadataSourceType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MetadataSourceType) Reset() {
	*x = MetadataSourceType{}
	mi := &file_meadv11_mead_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataSourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSourceType) ProtoMessage() {}

func (x *MetadataSourceType) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSourceType.ProtoReflect.Descriptor instead.
func (*MetadataSourceType) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{115}
}

func (x *MetadataSourceType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MetadataSourceType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *MetadataSourceType) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type MusicalWorkIdWithoutFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ISWC"
	ISWC string `protobuf:"bytes,1,opt,name=i_s_w_c,json=iSWC,proto3" json:"i_s_w_c,omitempty" xml:"ISWC"`
	// @gotags: xml:"OpusNumber"
	OpusNumber string `protobuf:"bytes,2,opt,name=opus_number,json=opusNumber,proto3" json:"opus_number,omitempty" xml:"OpusNumber"`
	// @gotags: xml:"ComposerCatalogNumber"
	ComposerCatalogNumber []string `protobuf:"bytes,3,rep,name=composer_catalog_number,json=composerCatalogNumber,proto3" json:"composer_catalog_number,omitempty" xml:"ComposerCatalogNumber"`
	// @gotags: xml:"ProprietaryId"
	ProprietaryId []*ProprietaryId `protobuf:"bytes,4,rep,name=proprietary_id,json=proprietaryId,proto3" json:"proprietary_id,omitempty" xml:"ProprietaryId"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MusicalWorkIdWithoutFlag) Reset() {
	*x = MusicalWorkIdWithoutFlag{}
	mi := &file_meadv11_mead_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MusicalWorkIdWithoutFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicalWorkIdWithoutFlag) ProtoMessage() {}

func (x *MusicalWorkIdWithoutFlag) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicalWorkIdWithoutFlag.ProtoReflect.Descriptor instead.
func (*MusicalWorkIdWithoutFlag) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{116}
}

func (x *MusicalWorkIdWithoutFlag) GetISWC() string {
	if x != nil {
		return x.ISWC
	}
	return ""
}

func (x *MusicalWorkIdWithoutFlag) GetOpusNumber() string {
	if x != nil {
		return x.OpusNumber
	}
	return ""
}

func (x *MusicalWorkIdWithoutFlag) GetComposerCatalogNumber() []string {
	if x != nil {
		return x.ComposerCatalogNumber
	}
	return nil
}

func (x *MusicalWorkIdWithoutFlag) GetProprietaryId() []*ProprietaryId {
	if x != nil {
		return x.ProprietaryId
	}
	return nil
}

type Name struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,2,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Name) Reset() {
	*x = Name{}
	mi := &file_meadv11_mead_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Name) ProtoMessage() {}

func (x *Name) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Name.ProtoReflect.Descriptor instead.
func (*Name) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{117}
}

func (x *Name) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Name) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

type NameWithPronunciationAndScriptCode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"Name"
	Name *Name `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" xml:"Name"`
	// @gotags: xml:"Pronunciation"
	Pronunciation []*Pronunciation `protobuf:"bytes,2,rep,name=pronunciation,proto3" json:"pronunciation,omitempty" xml:"Pronunciation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NameWithPronunciationAndScriptCode) Reset() {
	*x = NameWithPronunciationAndScriptCode{}
	mi := &file_meadv11_mead_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NameWithPronunciationAndScriptCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameWithPronunciationAndScriptCode) ProtoMessage() {}

func (x *NameWithPronunciationAndScriptCode) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameWithPronunciationAndScriptCode.ProtoReflect.Descriptor instead.
func (*NameWithPronunciationAndScriptCode) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{118}
}

func (x *NameWithPronunciationAndScriptCode) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NameWithPronunciationAndScriptCode) GetPronunciation() []*Pronunciation {
	if x != nil {
		return x.Pronunciation
	}
	return nil
}

type PartyDescriptorWithPronunciation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Choice:
	//
	//	*PartyDescriptorWithPronunciation_PartyId
	Choice        isPartyDescriptorWithPronunciation_Choice `protobuf_oneof:"choice"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartyDescriptorWithPronunciation) Reset() {
	*x = PartyDescriptorWithPronunciation{}
	mi := &file_meadv11_mead_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyDescriptorWithPronunciation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyDescriptorWithPronunciation) ProtoMessage() {}

func (x *PartyDescriptorWithPronunciation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyDescriptorWithPronunciation.ProtoReflect.Descriptor instead.
func (*PartyDescriptorWithPronunciation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{119}
}

func (x *PartyDescriptorWithPronunciation) GetChoice() isPartyDescriptorWithPronunciation_Choice {
	if x != nil {
		return x.Choice
	}
	return nil
}

func (x *PartyDescriptorWithPronunciation) GetPartyId() *DetailedPartyId {
	if x != nil {
		if x, ok := x.Choice.(*PartyDescriptorWithPronunciation_PartyId); ok {
			return x.PartyId
		}
	}
	return nil
}

type isPartyDescriptorWithPronunciation_Choice interface {
	isPartyDescriptorWithPronunciation_Choice()
}

type PartyDescriptorWithPronunciation_PartyId struct {
	// @gotags: xml:"PartyId"
	PartyId *DetailedPartyId `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3,oneof" xml:"PartyId"`
}

func (*PartyDescriptorWithPronunciation_PartyId) isPartyDescriptorWithPronunciation_Choice() {}

type PartyNameWithPronunciation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"FullName"
	FullName *NameWithPronunciationAndScriptCode `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty" xml:"FullName"`
	// @gotags: xml:"FullNameAsciiTranscribed"
	FullNameAsciiTranscribed *NameWithPronunciationAndScriptCode `protobuf:"bytes,2,opt,name=full_name_ascii_transcribed,json=fullNameAsciiTranscribed,proto3" json:"full_name_ascii_transcribed,omitempty" xml:"FullNameAsciiTranscribed"`
	// @gotags: xml:"FullNameIndexed"
	FullNameIndexed *NameWithPronunciationAndScriptCode `protobuf:"bytes,3,opt,name=full_name_indexed,json=fullNameIndexed,proto3" json:"full_name_indexed,omitempty" xml:"FullNameIndexed"`
	// @gotags: xml:"NamesBeforeKeyName"
	NamesBeforeKeyName *NameWithPronunciationAndScriptCode `protobuf:"bytes,4,opt,name=names_before_key_name,json=namesBeforeKeyName,proto3" json:"names_before_key_name,omitempty" xml:"NamesBeforeKeyName"`
	// @gotags: xml:"KeyName"
	KeyName *NameWithPronunciationAndScriptCode `protobuf:"bytes,5,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty" xml:"KeyName"`
	// @gotags: xml:"NamesAfterKeyName"
	NamesAfterKeyName *NameWithPronunciationAndScriptCode `protobuf:"bytes,6,opt,name=names_after_key_name,json=namesAfterKeyName,proto3" json:"names_after_key_name,omitempty" xml:"NamesAfterKeyName"`
	// @gotags: xml:"AbbreviatedName"
	AbbreviatedName *NameWithPronunciationAndScriptCode `protobuf:"bytes,7,opt,name=abbreviated_name,json=abbreviatedName,proto3" json:"abbreviated_name,omitempty" xml:"AbbreviatedName"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,8,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	// @gotags: xml:"ApplicableTerritoryCode,attr"
	ApplicableTerritoryCode *CurrentTerritoryCode `protobuf:"bytes,9,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty" xml:"ApplicableTerritoryCode,attr"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PartyNameWithPronunciation) Reset() {
	*x = PartyNameWithPronunciation{}
	mi := &file_meadv11_mead_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyNameWithPronunciation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyNameWithPronunciation) ProtoMessage() {}

func (x *PartyNameWithPronunciation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyNameWithPronunciation.ProtoReflect.Descriptor instead.
func (*PartyNameWithPronunciation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{120}
}

func (x *PartyNameWithPronunciation) GetFullName() *NameWithPronunciationAndScriptCode {
	if x != nil {
		return x.FullName
	}
	return nil
}

func (x *PartyNameWithPronunciation) GetFullNameAsciiTranscribed() *NameWithPronunciationAndScriptCode {
	if x != nil {
		return x.FullNameAsciiTranscribed
	}
	return nil
}

func (x *PartyNameWithPronunciation) GetFullNameIndexed() *NameWithPronunciationAndScriptCode {
	if x != nil {
		return x.FullNameIndexed
	}
	return nil
}

func (x *PartyNameWithPronunciation) GetNamesBeforeKeyName() *NameWithPronunciationAndScriptCode {
	if x != nil {
		return x.NamesBeforeKeyName
	}
	return nil
}

func (x *PartyNameWithPronunciation) GetKeyName() *NameWithPronunciationAndScriptCode {
	if x != nil {
		return x.KeyName
	}
	return nil
}

func (x *PartyNameWithPronunciation) GetNamesAfterKeyName() *NameWithPronunciationAndScriptCode {
	if x != nil {
		return x.NamesAfterKeyName
	}
	return nil
}

func (x *PartyNameWithPronunciation) GetAbbreviatedName() *NameWithPronunciationAndScriptCode {
	if x != nil {
		return x.AbbreviatedName
	}
	return nil
}

func (x *PartyNameWithPronunciation) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

func (x *PartyNameWithPronunciation) GetApplicableTerritoryCode() *CurrentTerritoryCode {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return nil
}

type PartyNameWithoutCode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"FullName"
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty" xml:"FullName"`
	// @gotags: xml:"FullNameAsciiTranscribed"
	FullNameAsciiTranscribed string `protobuf:"bytes,2,opt,name=full_name_ascii_transcribed,json=fullNameAsciiTranscribed,proto3" json:"full_name_ascii_transcribed,omitempty" xml:"FullNameAsciiTranscribed"`
	// @gotags: xml:"FullNameIndexed"
	FullNameIndexed string `protobuf:"bytes,3,opt,name=full_name_indexed,json=fullNameIndexed,proto3" json:"full_name_indexed,omitempty" xml:"FullNameIndexed"`
	// @gotags: xml:"NamesBeforeKeyName"
	NamesBeforeKeyName string `protobuf:"bytes,4,opt,name=names_before_key_name,json=namesBeforeKeyName,proto3" json:"names_before_key_name,omitempty" xml:"NamesBeforeKeyName"`
	// @gotags: xml:"KeyName"
	KeyName string `protobuf:"bytes,5,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty" xml:"KeyName"`
	// @gotags: xml:"NamesAfterKeyName"
	NamesAfterKeyName string `protobuf:"bytes,6,opt,name=names_after_key_name,json=namesAfterKeyName,proto3" json:"names_after_key_name,omitempty" xml:"NamesAfterKeyName"`
	// @gotags: xml:"AbbreviatedName"
	AbbreviatedName string `protobuf:"bytes,7,opt,name=abbreviated_name,json=abbreviatedName,proto3" json:"abbreviated_name,omitempty" xml:"AbbreviatedName"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PartyNameWithoutCode) Reset() {
	*x = PartyNameWithoutCode{}
	mi := &file_meadv11_mead_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyNameWithoutCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyNameWithoutCode) ProtoMessage() {}

func (x *PartyNameWithoutCode) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyNameWithoutCode.ProtoReflect.Descriptor instead.
func (*PartyNameWithoutCode) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{121}
}

func (x *PartyNameWithoutCode) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *PartyNameWithoutCode) GetFullNameAsciiTranscribed() string {
	if x != nil {
		return x.FullNameAsciiTranscribed
	}
	return ""
}

func (x *PartyNameWithoutCode) GetFullNameIndexed() string {
	if x != nil {
		return x.FullNameIndexed
	}
	return ""
}

func (x *PartyNameWithoutCode) GetNamesBeforeKeyName() string {
	if x != nil {
		return x.NamesBeforeKeyName
	}
	return ""
}

func (x *PartyNameWithoutCode) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *PartyNameWithoutCode) GetNamesAfterKeyName() string {
	if x != nil {
		return x.NamesAfterKeyName
	}
	return ""
}

func (x *PartyNameWithoutCode) GetAbbreviatedName() string {
	if x != nil {
		return x.AbbreviatedName
	}
	return ""
}

type Period struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Period) Reset() {
	*x = Period{}
	mi := &file_meadv11_mead_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Period) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Period) ProtoMessage() {}

func (x *Period) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Period.ProtoReflect.Descriptor instead.
func (*Period) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{122}
}

type PeriodValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PeriodValue) Reset() {
	*x = PeriodValue{}
	mi := &file_meadv11_mead_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeriodValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodValue) ProtoMessage() {}

func (x *PeriodValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodValue.ProtoReflect.Descriptor instead.
func (*PeriodValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{123}
}

func (x *PeriodValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PeriodValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PeriodValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type PeriodWithTime struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"StartDateTime"
	StartDateTime string `protobuf:"bytes,1,opt,name=start_date_time,json=startDateTime,proto3" json:"start_date_time,omitempty" xml:"StartDateTime"`
	// @gotags: xml:"EndDateTime"
	EndDateTime   string `protobuf:"bytes,2,opt,name=end_date_time,json=endDateTime,proto3" json:"end_date_time,omitempty" xml:"EndDateTime"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeriodWithTime) Reset() {
	*x = PeriodWithTime{}
	mi := &file_meadv11_mead_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeriodWithTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodWithTime) ProtoMessage() {}

func (x *PeriodWithTime) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodWithTime.ProtoReflect.Descriptor instead.
func (*PeriodWithTime) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{124}
}

func (x *PeriodWithTime) GetStartDateTime() string {
	if x != nil {
		return x.StartDateTime
	}
	return ""
}

func (x *PeriodWithTime) GetEndDateTime() string {
	if x != nil {
		return x.EndDateTime
	}
	return ""
}

type Pronunciation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"IsCanonical,attr"
	IsCanonical bool `protobuf:"varint,2,opt,name=is_canonical,json=isCanonical,proto3" json:"is_canonical,omitempty" xml:"IsCanonical,attr"`
	// @gotags: xml:"LanguageCode,attr"
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty" xml:"LanguageCode,attr"`
	// @gotags: xml:"EncodingType,attr"
	EncodingType EncodingType `protobuf:"varint,4,opt,name=encoding_type,json=encodingType,proto3,enum=ddex.mead.v11.EncodingType" json:"encoding_type,omitempty" xml:"EncodingType,attr"`
	// @gotags: xml:"EncodingNamespace,attr"
	EncodingNamespace string `protobuf:"bytes,5,opt,name=encoding_namespace,json=encodingNamespace,proto3" json:"encoding_namespace,omitempty" xml:"EncodingNamespace,attr"`
	// @gotags: xml:"EncodingUserDefinedValue,attr"
	EncodingUserDefinedValue string `protobuf:"bytes,6,opt,name=encoding_user_defined_value,json=encodingUserDefinedValue,proto3" json:"encoding_user_defined_value,omitempty" xml:"EncodingUserDefinedValue,attr"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Pronunciation) Reset() {
	*x = Pronunciation{}
	mi := &file_meadv11_mead_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pronunciation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pronunciation) ProtoMessage() {}

func (x *Pronunciation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pronunciation.ProtoReflect.Descriptor instead.
func (*Pronunciation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{125}
}

func (x *Pronunciation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Pronunciation) GetIsCanonical() bool {
	if x != nil {
		return x.IsCanonical
	}
	return false
}

func (x *Pronunciation) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *Pronunciation) GetEncodingType() EncodingType {
	if x != nil {
		return x.EncodingType
	}
	return EncodingType_ENCODING_TYPE_UNSPECIFIED
}

func (x *Pronunciation) GetEncodingNamespace() string {
	if x != nil {
		return x.EncodingNamespace
	}
	return ""
}

func (x *Pronunciation) GetEncodingUserDefinedValue() string {
	if x != nil {
		return x.EncodingUserDefinedValue
	}
	return ""
}

type ProprietaryId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace     string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProprietaryId) Reset() {
	*x = ProprietaryId{}
	mi := &file_meadv11_mead_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProprietaryId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProprietaryId) ProtoMessage() {}

func (x *ProprietaryId) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProprietaryId.ProtoReflect.Descriptor instead.
func (*ProprietaryId) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{126}
}

func (x *ProprietaryId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ProprietaryId) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type RecordingPartType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RecordingPartType) Reset() {
	*x = RecordingPartType{}
	mi := &file_meadv11_mead_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingPartType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingPartType) ProtoMessage() {}

func (x *RecordingPartType) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingPartType.ProtoReflect.Descriptor instead.
func (*RecordingPartType) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{127}
}

func (x *RecordingPartType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RecordingPartType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RecordingPartType) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type RelatedCreation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"Title"
	Title         *TitleWithPronunciation `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" xml:"Title"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelatedCreation) Reset() {
	*x = RelatedCreation{}
	mi := &file_meadv11_mead_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedCreation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedCreation) ProtoMessage() {}

func (x *RelatedCreation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedCreation.ProtoReflect.Descriptor instead.
func (*RelatedCreation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{128}
}

func (x *RelatedCreation) GetTitle() *TitleWithPronunciation {
	if x != nil {
		return x.Title
	}
	return nil
}

type RelatedResourceType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RelatedResourceType) Reset() {
	*x = RelatedResourceType{}
	mi := &file_meadv11_mead_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedResourceType) ProtoMessage() {}

func (x *RelatedResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedResourceType.ProtoReflect.Descriptor instead.
func (*RelatedResourceType) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{129}
}

func (x *RelatedResourceType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RelatedResourceType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RelatedResourceType) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type Release struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"GRid"
	GRid string `protobuf:"bytes,1,opt,name=g_rid,json=gRid,proto3" json:"g_rid,omitempty" xml:"GRid"`
	// @gotags: xml:"ICPN"
	ICPN string `protobuf:"bytes,2,opt,name=i_c_p_n,json=iCPN,proto3" json:"i_c_p_n,omitempty" xml:"ICPN"`
	// @gotags: xml:"ProprietaryReleaseId"
	ProprietaryReleaseId string `protobuf:"bytes,3,opt,name=proprietary_release_id,json=proprietaryReleaseId,proto3" json:"proprietary_release_id,omitempty" xml:"ProprietaryReleaseId"`
	// @gotags: xml:"ReleaseTitle"
	ReleaseTitle []*ReleaseTitle `protobuf:"bytes,4,rep,name=release_title,json=releaseTitle,proto3" json:"release_title,omitempty" xml:"ReleaseTitle"`
	// @gotags: xml:"DisplayArtistName"
	DisplayArtistName []*DisplayArtistNameWithPronunciation `protobuf:"bytes,5,rep,name=display_artist_name,json=displayArtistName,proto3" json:"display_artist_name,omitempty" xml:"DisplayArtistName"`
	// @gotags: xml:"DisplayArtist"
	DisplayArtist []*PartyDescriptorWithPronunciation `protobuf:"bytes,6,rep,name=display_artist,json=displayArtist,proto3" json:"display_artist,omitempty" xml:"DisplayArtist"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Release) Reset() {
	*x = Release{}
	mi := &file_meadv11_mead_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{130}
}

func (x *Release) GetGRid() string {
	if x != nil {
		return x.GRid
	}
	return ""
}

func (x *Release) GetICPN() string {
	if x != nil {
		return x.ICPN
	}
	return ""
}

func (x *Release) GetProprietaryReleaseId() string {
	if x != nil {
		return x.ProprietaryReleaseId
	}
	return ""
}

func (x *Release) GetReleaseTitle() []*ReleaseTitle {
	if x != nil {
		return x.ReleaseTitle
	}
	return nil
}

func (x *Release) GetDisplayArtistName() []*DisplayArtistNameWithPronunciation {
	if x != nil {
		return x.DisplayArtistName
	}
	return nil
}

func (x *Release) GetDisplayArtist() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.DisplayArtist
	}
	return nil
}

type ReleaseId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"GRid"
	GRid string `protobuf:"bytes,1,opt,name=g_rid,json=gRid,proto3" json:"g_rid,omitempty" xml:"GRid"`
	// @gotags: xml:"ISRC"
	ISRC string `protobuf:"bytes,2,opt,name=i_s_r_c,json=iSRC,proto3" json:"i_s_r_c,omitempty" xml:"ISRC"`
	// @gotags: xml:"ICPN"
	ICPN string `protobuf:"bytes,3,opt,name=i_c_p_n,json=iCPN,proto3" json:"i_c_p_n,omitempty" xml:"ICPN"`
	// @gotags: xml:"CatalogNumber"
	CatalogNumber *CatalogNumber `protobuf:"bytes,4,opt,name=catalog_number,json=catalogNumber,proto3" json:"catalog_number,omitempty" xml:"CatalogNumber"`
	// @gotags: xml:"ProprietaryId"
	ProprietaryId []*ProprietaryId `protobuf:"bytes,5,rep,name=proprietary_id,json=proprietaryId,proto3" json:"proprietary_id,omitempty" xml:"ProprietaryId"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseId) Reset() {
	*x = ReleaseId{}
	mi := &file_meadv11_mead_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseId) ProtoMessage() {}

func (x *ReleaseId) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseId.ProtoReflect.Descriptor instead.
func (*ReleaseId) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{131}
}

func (x *ReleaseId) GetGRid() string {
	if x != nil {
		return x.GRid
	}
	return ""
}

func (x *ReleaseId) GetISRC() string {
	if x != nil {
		return x.ISRC
	}
	return ""
}

func (x *ReleaseId) GetICPN() string {
	if x != nil {
		return x.ICPN
	}
	return ""
}

func (x *ReleaseId) GetCatalogNumber() *CatalogNumber {
	if x != nil {
		return x.CatalogNumber
	}
	return nil
}

func (x *ReleaseId) GetProprietaryId() []*ProprietaryId {
	if x != nil {
		return x.ProprietaryId
	}
	return nil
}

type ReleaseTitle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,2,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ReleaseTitle) Reset() {
	*x = ReleaseTitle{}
	mi := &file_meadv11_mead_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseTitle) ProtoMessage() {}

func (x *ReleaseTitle) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseTitle.ProtoReflect.Descriptor instead.
func (*ReleaseTitle) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{132}
}

func (x *ReleaseTitle) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ReleaseTitle) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

type Resource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ISRC"
	ISRC string `protobuf:"bytes,1,opt,name=i_s_r_c,json=iSRC,proto3" json:"i_s_r_c,omitempty" xml:"ISRC"`
	// @gotags: xml:"CatalogNumber"
	CatalogNumber string `protobuf:"bytes,2,opt,name=catalog_number,json=catalogNumber,proto3" json:"catalog_number,omitempty" xml:"CatalogNumber"`
	// @gotags: xml:"ProprietaryResourceId"
	ProprietaryResourceId string `protobuf:"bytes,3,opt,name=proprietary_resource_id,json=proprietaryResourceId,proto3" json:"proprietary_resource_id,omitempty" xml:"ProprietaryResourceId"`
	// @gotags: xml:"ResourceTitle"
	ResourceTitle []*ResourceTitle `protobuf:"bytes,4,rep,name=resource_title,json=resourceTitle,proto3" json:"resource_title,omitempty" xml:"ResourceTitle"`
	// @gotags: xml:"DisplayArtistName"
	DisplayArtistName []*DisplayArtistNameWithPronunciation `protobuf:"bytes,5,rep,name=display_artist_name,json=displayArtistName,proto3" json:"display_artist_name,omitempty" xml:"DisplayArtistName"`
	// @gotags: xml:"DisplayArtist"
	DisplayArtist []*PartyDescriptorWithPronunciation `protobuf:"bytes,6,rep,name=display_artist,json=displayArtist,proto3" json:"display_artist,omitempty" xml:"DisplayArtist"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_meadv11_mead_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{133}
}

func (x *Resource) GetISRC() string {
	if x != nil {
		return x.ISRC
	}
	return ""
}

func (x *Resource) GetCatalogNumber() string {
	if x != nil {
		return x.CatalogNumber
	}
	return ""
}

func (x *Resource) GetProprietaryResourceId() string {
	if x != nil {
		return x.ProprietaryResourceId
	}
	return ""
}

func (x *Resource) GetResourceTitle() []*ResourceTitle {
	if x != nil {
		return x.ResourceTitle
	}
	return nil
}

func (x *Resource) GetDisplayArtistName() []*DisplayArtistNameWithPronunciation {
	if x != nil {
		return x.DisplayArtistName
	}
	return nil
}

func (x *Resource) GetDisplayArtist() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.DisplayArtist
	}
	return nil
}

type ResourceContributorRole struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResourceContributorRole) Reset() {
	*x = ResourceContributorRole{}
	mi := &file_meadv11_mead_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceContributorRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceContributorRole) ProtoMessage() {}

func (x *ResourceContributorRole) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceContributorRole.ProtoReflect.Descriptor instead.
func (*ResourceContributorRole) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{134}
}

func (x *ResourceContributorRole) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ResourceContributorRole) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResourceContributorRole) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type ResourceIdWithoutFlag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ISRC"
	ISRC string `protobuf:"bytes,1,opt,name=i_s_r_c,json=iSRC,proto3" json:"i_s_r_c,omitempty" xml:"ISRC"`
	// @gotags: xml:"ISMN"
	ISMN string `protobuf:"bytes,2,opt,name=i_s_m_n,json=iSMN,proto3" json:"i_s_m_n,omitempty" xml:"ISMN"`
	// @gotags: xml:"ISAN"
	ISAN string `protobuf:"bytes,3,opt,name=i_s_a_n,json=iSAN,proto3" json:"i_s_a_n,omitempty" xml:"ISAN"`
	// @gotags: xml:"VISAN"
	VISAN string `protobuf:"bytes,4,opt,name=v_i_s_a_n,json=vISAN,proto3" json:"v_i_s_a_n,omitempty" xml:"VISAN"`
	// @gotags: xml:"ISBN"
	ISBN string `protobuf:"bytes,5,opt,name=i_s_b_n,json=iSBN,proto3" json:"i_s_b_n,omitempty" xml:"ISBN"`
	// @gotags: xml:"ISSN"
	ISSN string `protobuf:"bytes,6,opt,name=i_s_s_n,json=iSSN,proto3" json:"i_s_s_n,omitempty" xml:"ISSN"`
	// @gotags: xml:"SICI"
	SICI string `protobuf:"bytes,7,opt,name=s_i_c_i,json=sICI,proto3" json:"s_i_c_i,omitempty" xml:"SICI"`
	// @gotags: xml:"CatalogNumber"
	CatalogNumber *CatalogNumber `protobuf:"bytes,8,opt,name=catalog_number,json=catalogNumber,proto3" json:"catalog_number,omitempty" xml:"CatalogNumber"`
	// @gotags: xml:"ProprietaryId"
	ProprietaryId []*ProprietaryId `protobuf:"bytes,9,rep,name=proprietary_id,json=proprietaryId,proto3" json:"proprietary_id,omitempty" xml:"ProprietaryId"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceIdWithoutFlag) Reset() {
	*x = ResourceIdWithoutFlag{}
	mi := &file_meadv11_mead_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceIdWithoutFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceIdWithoutFlag) ProtoMessage() {}

func (x *ResourceIdWithoutFlag) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceIdWithoutFlag.ProtoReflect.Descriptor instead.
func (*ResourceIdWithoutFlag) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{135}
}

func (x *ResourceIdWithoutFlag) GetISRC() string {
	if x != nil {
		return x.ISRC
	}
	return ""
}

func (x *ResourceIdWithoutFlag) GetISMN() string {
	if x != nil {
		return x.ISMN
	}
	return ""
}

func (x *ResourceIdWithoutFlag) GetISAN() string {
	if x != nil {
		return x.ISAN
	}
	return ""
}

func (x *ResourceIdWithoutFlag) GetVISAN() string {
	if x != nil {
		return x.VISAN
	}
	return ""
}

func (x *ResourceIdWithoutFlag) GetISBN() string {
	if x != nil {
		return x.ISBN
	}
	return ""
}

func (x *ResourceIdWithoutFlag) GetISSN() string {
	if x != nil {
		return x.ISSN
	}
	return ""
}

func (x *ResourceIdWithoutFlag) GetSICI() string {
	if x != nil {
		return x.SICI
	}
	return ""
}

func (x *ResourceIdWithoutFlag) GetCatalogNumber() *CatalogNumber {
	if x != nil {
		return x.CatalogNumber
	}
	return nil
}

func (x *ResourceIdWithoutFlag) GetProprietaryId() []*ProprietaryId {
	if x != nil {
		return x.ProprietaryId
	}
	return nil
}

type ResourceRelationshipType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResourceRelationshipType) Reset() {
	*x = ResourceRelationshipType{}
	mi := &file_meadv11_mead_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceRelationshipType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRelationshipType) ProtoMessage() {}

func (x *ResourceRelationshipType) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRelationshipType.ProtoReflect.Descriptor instead.
func (*ResourceRelationshipType) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{136}
}

func (x *ResourceRelationshipType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ResourceRelationshipType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ResourceRelationshipType) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type ResourceTitle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,2,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ResourceTitle) Reset() {
	*x = ResourceTitle{}
	mi := &file_meadv11_mead_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTitle) ProtoMessage() {}

func (x *ResourceTitle) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTitle.ProtoReflect.Descriptor instead.
func (*ResourceTitle) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{137}
}

func (x *ResourceTitle) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ResourceTitle) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

type SessionType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SessionType) Reset() {
	*x = SessionType{}
	mi := &file_meadv11_mead_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionType) ProtoMessage() {}

func (x *SessionType) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionType.ProtoReflect.Descriptor instead.
func (*SessionType) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{138}
}

func (x *SessionType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SessionType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SessionType) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type SubGenreCategoryValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SubGenreCategoryValue) Reset() {
	*x = SubGenreCategoryValue{}
	mi := &file_meadv11_mead_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubGenreCategoryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubGenreCategoryValue) ProtoMessage() {}

func (x *SubGenreCategoryValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubGenreCategoryValue.ProtoReflect.Descriptor instead.
func (*SubGenreCategoryValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{139}
}

func (x *SubGenreCategoryValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SubGenreCategoryValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SubGenreCategoryValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type TextWithFormat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,2,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	// @gotags: xml:"ApplicableTerritoryCode,attr"
	ApplicableTerritoryCode *CurrentTerritoryCode `protobuf:"bytes,3,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty" xml:"ApplicableTerritoryCode,attr"`
	// @gotags: xml:"IsDefault,attr"
	IsDefault bool `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty" xml:"IsDefault,attr"`
	// @gotags: xml:"Format,attr"
	Format TextCodecType `protobuf:"varint,5,opt,name=format,proto3,enum=ddex.mead.v11.TextCodecType" json:"format,omitempty" xml:"Format,attr"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,7,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TextWithFormat) Reset() {
	*x = TextWithFormat{}
	mi := &file_meadv11_mead_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextWithFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextWithFormat) ProtoMessage() {}

func (x *TextWithFormat) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextWithFormat.ProtoReflect.Descriptor instead.
func (*TextWithFormat) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{140}
}

func (x *TextWithFormat) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TextWithFormat) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

func (x *TextWithFormat) GetApplicableTerritoryCode() *CurrentTerritoryCode {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return nil
}

func (x *TextWithFormat) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *TextWithFormat) GetFormat() TextCodecType {
	if x != nil {
		return x.Format
	}
	return TextCodecType_TEXT_CODEC_TYPE_UNSPECIFIED
}

func (x *TextWithFormat) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TextWithFormat) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type TextWithoutTerritory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,2,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	// @gotags: xml:"ApplicableTerritoryCode,attr"
	ApplicableTerritoryCode *CurrentTerritoryCode `protobuf:"bytes,3,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty" xml:"ApplicableTerritoryCode,attr"`
	// @gotags: xml:"IsDefault,attr"
	IsDefault bool `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty" xml:"IsDefault,attr"`
	// @gotags: xml:"Format,attr"
	Format TextCodecType `protobuf:"varint,5,opt,name=format,proto3,enum=ddex.mead.v11.TextCodecType" json:"format,omitempty" xml:"Format,attr"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,7,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TextWithoutTerritory) Reset() {
	*x = TextWithoutTerritory{}
	mi := &file_meadv11_mead_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextWithoutTerritory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextWithoutTerritory) ProtoMessage() {}

func (x *TextWithoutTerritory) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextWithoutTerritory.ProtoReflect.Descriptor instead.
func (*TextWithoutTerritory) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{141}
}

func (x *TextWithoutTerritory) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TextWithoutTerritory) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

func (x *TextWithoutTerritory) GetApplicableTerritoryCode() *CurrentTerritoryCode {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return nil
}

func (x *TextWithoutTerritory) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *TextWithoutTerritory) GetFormat() TextCodecType {
	if x != nil {
		return x.Format
	}
	return TextCodecType_TEXT_CODEC_TYPE_UNSPECIFIED
}

func (x *TextWithoutTerritory) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TextWithoutTerritory) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type TitleText struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"Title"
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" xml:"Title"`
	// @gotags: xml:"Pronunciation"
	Pronunciation []*Pronunciation `protobuf:"bytes,2,rep,name=pronunciation,proto3" json:"pronunciation,omitempty" xml:"Pronunciation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TitleText) Reset() {
	*x = TitleText{}
	mi := &file_meadv11_mead_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleText) ProtoMessage() {}

func (x *TitleText) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleText.ProtoReflect.Descriptor instead.
func (*TitleText) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{142}
}

func (x *TitleText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TitleText) GetPronunciation() []*Pronunciation {
	if x != nil {
		return x.Pronunciation
	}
	return nil
}

type TitleWithPronunciation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"TitleText"
	TitleText *TitleText `protobuf:"bytes,1,opt,name=title_text,json=titleText,proto3" json:"title_text,omitempty" xml:"TitleText"`
	// @gotags: xml:"SubTitle"
	SubTitle *TitleText `protobuf:"bytes,2,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty" xml:"SubTitle"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,3,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	// @gotags: xml:"TitleType,attr"
	TitleType TitleType `protobuf:"varint,4,opt,name=title_type,json=titleType,proto3,enum=ddex.mead.v11.TitleType" json:"title_type,omitempty" xml:"TitleType,attr"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,6,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TitleWithPronunciation) Reset() {
	*x = TitleWithPronunciation{}
	mi := &file_meadv11_mead_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleWithPronunciation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleWithPronunciation) ProtoMessage() {}

func (x *TitleWithPronunciation) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleWithPronunciation.ProtoReflect.Descriptor instead.
func (*TitleWithPronunciation) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{143}
}

func (x *TitleWithPronunciation) GetTitleText() *TitleText {
	if x != nil {
		return x.TitleText
	}
	return nil
}

func (x *TitleWithPronunciation) GetSubTitle() *TitleText {
	if x != nil {
		return x.SubTitle
	}
	return nil
}

func (x *TitleWithPronunciation) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

func (x *TitleWithPronunciation) GetTitleType() TitleType {
	if x != nil {
		return x.TitleType
	}
	return TitleType_TITLE_TYPE_UNSPECIFIED
}

func (x *TitleWithPronunciation) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TitleWithPronunciation) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type Venue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"VenueName"
	VenueName string `protobuf:"bytes,1,opt,name=venue_name,json=venueName,proto3" json:"venue_name,omitempty" xml:"VenueName"`
	// @gotags: xml:"VenueAddress"
	VenueAddress string `protobuf:"bytes,2,opt,name=venue_address,json=venueAddress,proto3" json:"venue_address,omitempty" xml:"VenueAddress"`
	// @gotags: xml:"TerritoryCode"
	TerritoryCode *AllTerritoryCode `protobuf:"bytes,3,opt,name=territory_code,json=territoryCode,proto3" json:"territory_code,omitempty" xml:"TerritoryCode"`
	// @gotags: xml:"LocationCode"
	LocationCode string `protobuf:"bytes,4,opt,name=location_code,json=locationCode,proto3" json:"location_code,omitempty" xml:"LocationCode"`
	// @gotags: xml:"VenueRoom"
	VenueRoom     string `protobuf:"bytes,5,opt,name=venue_room,json=venueRoom,proto3" json:"venue_room,omitempty" xml:"VenueRoom"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Venue) Reset() {
	*x = Venue{}
	mi := &file_meadv11_mead_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Venue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Venue) ProtoMessage() {}

func (x *Venue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Venue.ProtoReflect.Descriptor instead.
func (*Venue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{144}
}

func (x *Venue) GetVenueName() string {
	if x != nil {
		return x.VenueName
	}
	return ""
}

func (x *Venue) GetVenueAddress() string {
	if x != nil {
		return x.VenueAddress
	}
	return ""
}

func (x *Venue) GetTerritoryCode() *AllTerritoryCode {
	if x != nil {
		return x.TerritoryCode
	}
	return nil
}

func (x *Venue) GetLocationCode() string {
	if x != nil {
		return x.LocationCode
	}
	return ""
}

func (x *Venue) GetVenueRoom() string {
	if x != nil {
		return x.VenueRoom
	}
	return ""
}

type VocalRegister struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"MetadataSourceReference"
	MetadataSourceReference []*MetadataSourceReference `protobuf:"bytes,1,rep,name=metadata_source_reference,json=metadataSourceReference,proto3" json:"metadata_source_reference,omitempty" xml:"MetadataSourceReference"`
	// @gotags: xml:"Value"
	Value         *VocalRegisterValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" xml:"Value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VocalRegister) Reset() {
	*x = VocalRegister{}
	mi := &file_meadv11_mead_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VocalRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VocalRegister) ProtoMessage() {}

func (x *VocalRegister) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VocalRegister.ProtoReflect.Descriptor instead.
func (*VocalRegister) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{145}
}

func (x *VocalRegister) GetMetadataSourceReference() []*MetadataSourceReference {
	if x != nil {
		return x.MetadataSourceReference
	}
	return nil
}

func (x *VocalRegister) GetValue() *VocalRegisterValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type VocalRegisterValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VocalRegisterValue) Reset() {
	*x = VocalRegisterValue{}
	mi := &file_meadv11_mead_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VocalRegisterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VocalRegisterValue) ProtoMessage() {}

func (x *VocalRegisterValue) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VocalRegisterValue.ProtoReflect.Descriptor instead.
func (*VocalRegisterValue) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{146}
}

func (x *VocalRegisterValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *VocalRegisterValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VocalRegisterValue) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type Work struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"ISWC"
	ISWC string `protobuf:"bytes,1,opt,name=i_s_w_c,json=iSWC,proto3" json:"i_s_w_c,omitempty" xml:"ISWC"`
	// @gotags: xml:"ProprietaryWorkId"
	ProprietaryWorkId string `protobuf:"bytes,2,opt,name=proprietary_work_id,json=proprietaryWorkId,proto3" json:"proprietary_work_id,omitempty" xml:"ProprietaryWorkId"`
	// @gotags: xml:"WorkTitle"
	WorkTitle []*WorkTitle `protobuf:"bytes,3,rep,name=work_title,json=workTitle,proto3" json:"work_title,omitempty" xml:"WorkTitle"`
	// @gotags: xml:"Writer"
	Writer        []*PartyDescriptorWithPronunciation `protobuf:"bytes,4,rep,name=writer,proto3" json:"writer,omitempty" xml:"Writer"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Work) Reset() {
	*x = Work{}
	mi := &file_meadv11_mead_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Work) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Work) ProtoMessage() {}

func (x *Work) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Work.ProtoReflect.Descriptor instead.
func (*Work) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{147}
}

func (x *Work) GetISWC() string {
	if x != nil {
		return x.ISWC
	}
	return ""
}

func (x *Work) GetProprietaryWorkId() string {
	if x != nil {
		return x.ProprietaryWorkId
	}
	return ""
}

func (x *Work) GetWorkTitle() []*WorkTitle {
	if x != nil {
		return x.WorkTitle
	}
	return nil
}

func (x *Work) GetWriter() []*PartyDescriptorWithPronunciation {
	if x != nil {
		return x.Writer
	}
	return nil
}

type WorkRelationshipType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"Namespace,attr"
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" xml:"Namespace,attr"`
	// @gotags: xml:"UserDefinedValue,attr"
	UserDefinedValue string `protobuf:"bytes,3,opt,name=user_defined_value,json=userDefinedValue,proto3" json:"user_defined_value,omitempty" xml:"UserDefinedValue,attr"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WorkRelationshipType) Reset() {
	*x = WorkRelationshipType{}
	mi := &file_meadv11_mead_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkRelationshipType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRelationshipType) ProtoMessage() {}

func (x *WorkRelationshipType) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRelationshipType.ProtoReflect.Descriptor instead.
func (*WorkRelationshipType) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{148}
}

func (x *WorkRelationshipType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *WorkRelationshipType) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkRelationshipType) GetUserDefinedValue() string {
	if x != nil {
		return x.UserDefinedValue
	}
	return ""
}

type WorkTitle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,2,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *WorkTitle) Reset() {
	*x = WorkTitle{}
	mi := &file_meadv11_mead_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkTitle) ProtoMessage() {}

func (x *WorkTitle) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkTitle.ProtoReflect.Descriptor instead.
func (*WorkTitle) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{149}
}

func (x *WorkTitle) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *WorkTitle) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

type EventDateWithoutFlags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:",chardata"
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty" xml:",chardata"`
	// @gotags: xml:"IsApproximate,attr"
	IsApproximate bool `protobuf:"varint,2,opt,name=is_approximate,json=isApproximate,proto3" json:"is_approximate,omitempty" xml:"IsApproximate,attr"`
	// @gotags: xml:"ApplicableTerritoryCode,attr"
	ApplicableTerritoryCode *AllTerritoryCode `protobuf:"bytes,3,opt,name=applicable_territory_code,json=applicableTerritoryCode,proto3" json:"applicable_territory_code,omitempty" xml:"ApplicableTerritoryCode,attr"`
	// @gotags: xml:"LocationDescription,attr"
	LocationDescription string `protobuf:"bytes,4,opt,name=location_description,json=locationDescription,proto3" json:"location_description,omitempty" xml:"LocationDescription,attr"`
	// @gotags: xml:"LanguageAndScriptCode,attr"
	LanguageAndScriptCode string `protobuf:"bytes,5,opt,name=language_and_script_code,json=languageAndScriptCode,proto3" json:"language_and_script_code,omitempty" xml:"LanguageAndScriptCode,attr"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *EventDateWithoutFlags) Reset() {
	*x = EventDateWithoutFlags{}
	mi := &file_meadv11_mead_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventDateWithoutFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDateWithoutFlags) ProtoMessage() {}

func (x *EventDateWithoutFlags) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDateWithoutFlags.ProtoReflect.Descriptor instead.
func (*EventDateWithoutFlags) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{150}
}

func (x *EventDateWithoutFlags) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EventDateWithoutFlags) GetIsApproximate() bool {
	if x != nil {
		return x.IsApproximate
	}
	return false
}

func (x *EventDateWithoutFlags) GetApplicableTerritoryCode() *AllTerritoryCode {
	if x != nil {
		return x.ApplicableTerritoryCode
	}
	return nil
}

func (x *EventDateWithoutFlags) GetLocationDescription() string {
	if x != nil {
		return x.LocationDescription
	}
	return ""
}

func (x *EventDateWithoutFlags) GetLanguageAndScriptCode() string {
	if x != nil {
		return x.LanguageAndScriptCode
	}
	return ""
}

type Timing struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: xml:"StartPoint"
	StartPoint string `protobuf:"bytes,1,opt,name=start_point,json=startPoint,proto3" json:"start_point,omitempty" xml:"StartPoint"`
	// @gotags: xml:"DurationUsed"
	DurationUsed  string `protobuf:"bytes,2,opt,name=duration_used,json=durationUsed,proto3" json:"duration_used,omitempty" xml:"DurationUsed"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timing) Reset() {
	*x = Timing{}
	mi := &file_meadv11_mead_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing) ProtoMessage() {}

func (x *Timing) ProtoReflect() protoreflect.Message {
	mi := &file_meadv11_mead_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing.ProtoReflect.Descriptor instead.
func (*Timing) Descriptor() ([]byte, []int) {
	return file_meadv11_mead_proto_rawDescGZIP(), []int{151}
}

func (x *Timing) GetStartPoint() string {
	if x != nil {
		return x.StartPoint
	}
	return ""
}

func (x *Timing) GetDurationUsed() string {
	if x != nil {
		return x.DurationUsed
	}
	return ""
}

var File_meadv11_mead_proto protoreflect.FileDescriptor

const file_meadv11_mead_proto_rawDesc = "" +
	"\n" +
	"\x12meadv11/mead.proto\x12\rddex.mead.v11\"\xcc\x04\n" +
	"\vMeadMessage\x12C\n" +
	"\x0emessage_header\x18\x01 \x01(\v2\x1c.ddex.mead.v11.MessageHeaderR\rmessageHeader\x12'\n" +
	"\x0fsubscription_id\x18\x02 \x01(\tR\x0esubscriptionId\x12S\n" +
	"\x14metadata_source_list\x18\x03 \x01(\v2!.ddex.mead.v11.MetadataSourceListR\x12metadataSourceList\x12V\n" +
	"\x15work_information_list\x18\x04 \x01(\v2\".ddex.mead.v11.WorkInformationListR\x13workInformationList\x12b\n" +
	"\x19resource_information_list\x18\x05 \x01(\v2&.ddex.mead.v11.ResourceInformationListR\x17resourceInformationList\x12_\n" +
	"\x18release_information_list\x18\x06 \x01(\v2%.ddex.mead.v11.ReleaseInformationListR\x16releaseInformationList\x12$\n" +
	"\x0eavs_version_id\x18\a \x01(\tR\favsVersionId\x127\n" +
	"\x18language_and_script_code\x18\b \x01(\tR\x15languageAndScriptCode\"\x85\x05\n" +
	"\x04Feed\x12/\n" +
	"\x06author\x18\x01 \x01(\v2\x15.ddex.mead.v11.PersonH\x00R\x06author\x125\n" +
	"\bcategory\x18\x02 \x01(\v2\x17.ddex.mead.v11.CategoryH\x00R\bcategory\x129\n" +
	"\vcontributor\x18\x03 \x01(\v2\x15.ddex.mead.v11.PersonH\x00R\vcontributor\x128\n" +
	"\tgenerator\x18\x04 \x01(\v2\x18.ddex.mead.v11.GeneratorH\x00R\tgenerator\x12)\n" +
	"\x04icon\x18\x05 \x01(\v2\x13.ddex.mead.v11.IconH\x00R\x04icon\x12#\n" +
	"\x02id\x18\x06 \x01(\v2\x11.ddex.mead.v11.IdH\x00R\x02id\x12)\n" +
	"\x04link\x18\a \x01(\v2\x13.ddex.mead.v11.LinkH\x00R\x04link\x12)\n" +
	"\x04logo\x18\b \x01(\v2\x13.ddex.mead.v11.LogoH\x00R\x04logo\x12-\n" +
	"\x06rights\x18\t \x01(\v2\x13.ddex.mead.v11.TextH\x00R\x06rights\x121\n" +
	"\bsubtitle\x18\n" +
	" \x01(\v2\x13.ddex.mead.v11.TextH\x00R\bsubtitle\x12+\n" +
	"\x05title\x18\v \x01(\v2\x13.ddex.mead.v11.TextH\x00R\x05title\x123\n" +
	"\aupdated\x18\f \x01(\v2\x17.ddex.mead.v11.DateTimeH\x00R\aupdated\x12,\n" +
	"\x05entry\x18\r \x01(\v2\x14.ddex.mead.v11.EntryH\x00R\x05entryB\b\n" +
	"\x06choice\"\xc4\x01\n" +
	"\rAbsolutePitch\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x129\n" +
	"\n" +
	"modulation\x18\x03 \x03(\v2\x19.ddex.mead.v11.ModulationR\n" +
	"modulation\"\x9f\x03\n" +
	"\bActivity\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.ddex.mead.v11.ActivityValueR\x05value\x12E\n" +
	"\vdescription\x18\x03 \x03(\v2#.ddex.mead.v11.TextWithoutTerritoryR\vdescription\x12D\n" +
	"\x1flanguage_and_script_of_activity\x18\x04 \x03(\tR\x1blanguageAndScriptOfActivity\x12n\n" +
	"!territory_of_activity_description\x18\x05 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x1eterritoryOfActivityDescription\"q\n" +
	"\rActivityValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xab\x03\n" +
	"\x10AlternativeTitle\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x127\n" +
	"\n" +
	"title_text\x18\x02 \x01(\v2\x18.ddex.mead.v11.TitleTextR\ttitleText\x125\n" +
	"\tsub_title\x18\x03 \x01(\v2\x18.ddex.mead.v11.TitleTextR\bsubTitle\x12>\n" +
	"\x1clanguage_and_script_of_title\x18\x04 \x03(\tR\x18languageAndScriptOfTitle\x127\n" +
	"\n" +
	"title_type\x18\x05 \x01(\x0e2\x18.ddex.mead.v11.TitleTypeR\ttitleType\x12\x1c\n" +
	"\tnamespace\x18\x06 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\a \x01(\tR\x10userDefinedValue\"\xa3\x01\n" +
	"\n" +
	"Annotation\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x121\n" +
	"\x04text\x18\x02 \x01(\v2\x1d.ddex.mead.v11.TextWithFormatR\x04text\"\xa4\x02\n" +
	"\rArtisticStyle\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.ddex.mead.v11.ArtistTypeValueR\x05value\x12y\n" +
	"'territory_of_artistic_style_description\x18\x03 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR#territoryOfArtisticStyleDescription\"\xc5\x01\n" +
	"\x0eBeatsPerMinute\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x129\n" +
	"\n" +
	"modulation\x18\x03 \x03(\v2\x19.ddex.mead.v11.ModulationR\n" +
	"modulation\"\xed\x02\n" +
	"\x12ChildWorkHierarchy\x120\n" +
	"\x14is_described_element\x18\x01 \x01(\bR\x12isDescribedElement\x12\x1f\n" +
	"\vis_complete\x18\x02 \x01(\bR\n" +
	"isComplete\x12'\n" +
	"\x0fsequence_number\x18\x03 \x01(\x05R\x0esequenceNumber\x12@\n" +
	"\awork_id\x18\x04 \x01(\v2'.ddex.mead.v11.MusicalWorkIdWithoutFlagR\x06workId\x127\n" +
	"\n" +
	"work_title\x18\x05 \x03(\v2\x18.ddex.mead.v11.WorkTitleR\tworkTitle\x127\n" +
	"\x05child\x18\x06 \x03(\v2!.ddex.mead.v11.ChildWorkHierarchyR\x05child\x12'\n" +
	"\x04form\x18\a \x01(\v2\x13.ddex.mead.v11.FormR\x04form\"\xc8\x01\n" +
	"\vContributor\x12>\n" +
	"\n" +
	"identifier\x18\x01 \x01(\v2\x1e.ddex.mead.v11.DetailedPartyIdR\n" +
	"identifier\x12=\n" +
	"\x04name\x18\x02 \x01(\v2).ddex.mead.v11.PartyNameWithPronunciationR\x04name\x12:\n" +
	"\x04role\x18\x03 \x03(\v2&.ddex.mead.v11.ResourceContributorRoleR\x04role\"\xad\x03\n" +
	"\n" +
	"DanceStyle\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.ddex.mead.v11.DanceStyleValueR\x05value\x12E\n" +
	"\vdescription\x18\x03 \x03(\v2#.ddex.mead.v11.TextWithoutTerritoryR\vdescription\x12I\n" +
	"\"language_and_script_of_dance_style\x18\x04 \x03(\tR\x1dlanguageAndScriptOfDanceStyle\x12s\n" +
	"$territory_of_dance_style_description\x18\x05 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR territoryOfDanceStyleDescription\"s\n" +
	"\x0fDanceStyleValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\x8d\x04\n" +
	"\x10DerivedRecording\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12E\n" +
	"\vresource_id\x18\x02 \x01(\v2$.ddex.mead.v11.ResourceIdWithoutFlagR\n" +
	"resourceId\x12V\n" +
	"\x15related_resource_type\x18\x03 \x01(\v2\".ddex.mead.v11.RelatedResourceTypeR\x13relatedResourceType\x12;\n" +
	"\x05title\x18\x04 \x03(\v2%.ddex.mead.v11.TitleWithPronunciationR\x05title\x12a\n" +
	"\x13display_artist_name\x18\x05 \x01(\v21.ddex.mead.v11.DisplayArtistNameWithPronunciationR\x11displayArtistName\x12V\n" +
	"\x0edisplay_artist\x18\x06 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\rdisplayArtist\"\xb9\x02\n" +
	"\x0fDisplaySubTitle\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12B\n" +
	"\rpronunciation\x18\x02 \x03(\v2\x1c.ddex.mead.v11.PronunciationR\rpronunciation\x12'\n" +
	"\x0fsequence_number\x18\x03 \x01(\x05R\x0esequenceNumber\x121\n" +
	"\x15is_displayed_in_title\x18\x04 \x01(\bR\x12isDisplayedInTitle\x12\x1c\n" +
	"\tnamespace\x18\x05 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x06 \x01(\tR\x10userDefinedValue\x12$\n" +
	"\x0esub_title_type\x18\a \x01(\tR\fsubTitleType\"\xbd\x02\n" +
	"\fDisplayTitle\x127\n" +
	"\n" +
	"title_text\x18\x01 \x01(\v2\x18.ddex.mead.v11.TitleTextR\ttitleText\x12;\n" +
	"\tsub_title\x18\x02 \x03(\v2\x1e.ddex.mead.v11.DisplaySubTitleR\bsubTitle\x127\n" +
	"\x18language_and_script_code\x18\x03 \x01(\tR\x15languageAndScriptCode\x12_\n" +
	"\x19applicable_territory_code\x18\x04 \x01(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x17applicableTerritoryCode\x12\x1d\n" +
	"\n" +
	"is_default\x18\x05 \x01(\bR\tisDefault\"\xb5\x05\n" +
	"\x05Entry\x12/\n" +
	"\x06author\x18\x01 \x01(\v2\x15.ddex.mead.v11.PersonH\x00R\x06author\x125\n" +
	"\bcategory\x18\x02 \x01(\v2\x17.ddex.mead.v11.CategoryH\x00R\bcategory\x122\n" +
	"\acontent\x18\x03 \x01(\v2\x16.ddex.mead.v11.ContentH\x00R\acontent\x129\n" +
	"\vcontributor\x18\x04 \x01(\v2\x15.ddex.mead.v11.PersonH\x00R\vcontributor\x12#\n" +
	"\x02id\x18\x05 \x01(\v2\x11.ddex.mead.v11.IdH\x00R\x02id\x12)\n" +
	"\x04link\x18\x06 \x01(\v2\x13.ddex.mead.v11.LinkH\x00R\x04link\x127\n" +
	"\tpublished\x18\a \x01(\v2\x17.ddex.mead.v11.DateTimeH\x00R\tpublished\x12-\n" +
	"\x06rights\x18\b \x01(\v2\x13.ddex.mead.v11.TextH\x00R\x06rights\x12/\n" +
	"\x06source\x18\t \x01(\v2\x15.ddex.mead.v11.SourceH\x00R\x06source\x12/\n" +
	"\asummary\x18\n" +
	" \x01(\v2\x13.ddex.mead.v11.TextH\x00R\asummary\x12+\n" +
	"\x05title\x18\v \x01(\v2\x13.ddex.mead.v11.TextH\x00R\x05title\x123\n" +
	"\aupdated\x18\f \x01(\v2\x17.ddex.mead.v11.DateTimeH\x00R\aupdated\x12)\n" +
	"\x0fsubscription_id\x18\r \x01(\tH\x00R\x0esubscriptionId\x12$\n" +
	"\x0eavs_version_id\x18\x0e \x01(\tR\favsVersionIdB\b\n" +
	"\x06choice\"\x80\x01\n" +
	"\x04Flag\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value\"\x9a\x01\n" +
	"\x04Form\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.ddex.mead.v11.FormValueR\x05value\"m\n" +
	"\tFormValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xee\x02\n" +
	"\rGenreCategory\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12y\n" +
	"'territory_of_genre_category_description\x18\x02 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR#territoryOfGenreCategoryDescription\x127\n" +
	"\x05value\x18\x03 \x01(\v2!.ddex.mead.v11.GenreCategoryValueR\x05value\x12E\n" +
	"\vdescription\x18\x04 \x03(\v2#.ddex.mead.v11.TextWithoutTerritoryR\vdescription\"\xed\x02\n" +
	"\aHarmony\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12D\n" +
	"\x0froot_chord_note\x18\x02 \x01(\v2\x1c.ddex.mead.v11.RootChordNoteR\rrootChordNote\x12M\n" +
	"\x12root_chord_quality\x18\x03 \x01(\v2\x1f.ddex.mead.v11.RootChordQualityR\x10rootChordQuality\x12'\n" +
	"\x04mode\x18\x04 \x01(\v2\x13.ddex.mead.v11.ModeR\x04mode\x12@\n" +
	"\n" +
	"modulation\x18\x05 \x03(\v2 .ddex.mead.v11.HarmonyModulationR\n" +
	"modulation\"\xd1\x01\n" +
	"\x11HarmonyModulation\x12D\n" +
	"\x0froot_chord_note\x18\x01 \x01(\v2\x1c.ddex.mead.v11.RootChordNoteR\rrootChordNote\x12M\n" +
	"\x12root_chord_quality\x18\x02 \x01(\v2\x1f.ddex.mead.v11.RootChordQualityR\x10rootChordQuality\x12'\n" +
	"\x04mode\x18\x03 \x01(\v2\x13.ddex.mead.v11.ModeR\x04mode\"l\n" +
	"\n" +
	"ImpactDate\x12\x12\n" +
	"\x04date\x18\x01 \x01(\tR\x04date\x12J\n" +
	"\x0eterritory_code\x18\x02 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\rterritoryCode\"\xa6\x01\n" +
	"\n" +
	"Instrument\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.ddex.mead.v11.InstrumentValueR\x05value\"\xcb\x01\n" +
	"\x0eInstrumentUsed\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.ddex.mead.v11.InstrumentValueR\x05value\x12\x1f\n" +
	"\vis_featured\x18\x03 \x01(\bR\n" +
	"isFeatured\"s\n" +
	"\x0fInstrumentValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xa4\x01\n" +
	"\tIntensity\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x123\n" +
	"\x05value\x18\x02 \x01(\v2\x1d.ddex.mead.v11.IntensityValueR\x05value\"r\n" +
	"\x0eIntensityValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\x8f\x03\n" +
	"\x18LocationAndDateOfSession\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12=\n" +
	"\fsession_type\x18\x02 \x03(\v2\x1a.ddex.mead.v11.SessionTypeR\vsessionType\x12-\n" +
	"\x06period\x18\x03 \x01(\v2\x15.ddex.mead.v11.PeriodR\x06period\x12*\n" +
	"\x05venue\x18\x04 \x03(\v2\x14.ddex.mead.v11.VenueR\x05venue\x127\n" +
	"\acomment\x18\x05 \x01(\v2\x1d.ddex.mead.v11.TextWithFormatR\acomment\x12<\n" +
	"\vcontributor\x18\x06 \x03(\v2\x1a.ddex.mead.v11.ContributorR\vcontributor\"\x8d\x05\n" +
	"\x06Lyrics\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12-\n" +
	"\x04text\x18\x02 \x01(\v2\x19.ddex.mead.v11.LyricsTextR\x04text\x12@\n" +
	"\x1dlanguage_and_script_of_lyrics\x18\x03 \x03(\tR\x19languageAndScriptOfLyrics\x12j\n" +
	"\x1fterritory_of_lyrics_description\x18\x04 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x1cterritoryOfLyricsDescription\x12B\n" +
	"\rpronunciation\x18\x05 \x03(\v2\x1c.ddex.mead.v11.PronunciationR\rpronunciation\x12'\n" +
	"\x0fsequence_number\x18\x06 \x01(\x05R\x0esequenceNumber\x12:\n" +
	"\vlyrics_type\x18\a \x01(\x0e2\x19.ddex.mead.v11.LyricsTypeR\n" +
	"lyricsType\x122\n" +
	"\x15lyrics_type_namespace\x18\b \x01(\tR\x13lyricsTypeNamespace\x12B\n" +
	"\x1elyrics_type_user_defined_value\x18\t \x01(\tR\x1alyricsTypeUserDefinedValue\x12!\n" +
	"\fis_misquoted\x18\n" +
	" \x01(\bR\visMisquoted\"\xdf\x01\n" +
	"\n" +
	"LyricsText\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x124\n" +
	"\x06format\x18\x02 \x01(\x0e2\x1c.ddex.mead.v11.TextCodecTypeR\x06format\x12)\n" +
	"\x10format_namespace\x18\x03 \x01(\tR\x0fformatNamespace\x129\n" +
	"\x19format_user_defined_value\x18\x04 \x01(\tR\x16formatUserDefinedValue\x12\x1f\n" +
	"\vis_complete\x18\x05 \x01(\bR\n" +
	"isComplete\"r\n" +
	"\x05Meter\x122\n" +
	"\x16number_of_beats_in_bar\x18\x01 \x01(\x05R\x12numberOfBeatsInBar\x125\n" +
	"\x17note_equivalent_to_beat\x18\x02 \x01(\x05R\x14noteEquivalentToBeat\"h\n" +
	"\x04Mode\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\"\n" +
	"\n" +
	"Modulation\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"\xc4\x03\n" +
	"\x04Mood\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.ddex.mead.v11.MoodValueR\x05value\x12E\n" +
	"\vdescription\x18\x03 \x03(\v2#.ddex.mead.v11.TextWithoutTerritoryR\vdescription\x12<\n" +
	"\x1blanguage_and_script_of_mood\x18\x04 \x03(\tR\x17languageAndScriptOfMood\x12f\n" +
	"\x1dterritory_of_mood_description\x18\x05 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x1aterritoryOfMoodDescription\x12;\n" +
	"\tmood_type\x18\x06 \x01(\x0e2\x1e.ddex.mead.v11.MoodOrThemeTypeR\bmoodType\"\xcf\x01\n" +
	"\tMoodValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\x124\n" +
	"\x16applies_to_composition\x18\x04 \x01(\bR\x14appliesToComposition\x12*\n" +
	"\x11applies_to_lyrics\x18\x05 \x01(\bR\x0fappliesToLyrics\"\xd5\x01\n" +
	"\x05Party\x12\x15\n" +
	"\ai_s_n_i\x18\x01 \x01(\tR\x04iSNI\x12\x15\n" +
	"\ad_p_i_d\x18\x02 \x01(\tR\x04dPID\x12&\n" +
	"\x0fipi_name_number\x18\x03 \x01(\tR\ripiNameNumber\x12\x12\n" +
	"\x05i_p_n\x18\x04 \x01(\tR\x03iPN\x12C\n" +
	"\x0eproprietary_id\x18\x05 \x03(\v2\x1c.ddex.mead.v11.ProprietaryIdR\rproprietaryId\x12\x1d\n" +
	"\n" +
	"party_name\x18\x06 \x01(\tR\tpartyName\"\xe1\x03\n" +
	"\rRecordingPart\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x122\n" +
	"\x04unit\x18\x02 \x01(\x0e2\x1e.ddex.mead.v11.UnitOfCuePointsR\x04unit\x12\x1f\n" +
	"\vstart_point\x18\x03 \x01(\tR\n" +
	"startPoint\x12\x1b\n" +
	"\tend_point\x18\x04 \x01(\tR\bendPoint\x12P\n" +
	"\x13recording_part_type\x18\x05 \x01(\v2 .ddex.mead.v11.RecordingPartTypeR\x11recordingPartType\x123\n" +
	"\acomment\x18\x06 \x03(\v2\x19.ddex.mead.v11.AnnotationR\acomment\x12J\n" +
	"\x11usage_information\x18\a \x03(\v2\x1d.ddex.mead.v11.TextWithFormatR\x10usageInformation\x12'\n" +
	"\x0fsequence_number\x18\b \x01(\x05R\x0esequenceNumber\"\x90\x03\n" +
	"\vRelatedWork\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12@\n" +
	"\awork_id\x18\x02 \x01(\v2'.ddex.mead.v11.MusicalWorkIdWithoutFlagR\x06workId\x127\n" +
	"\n" +
	"work_title\x18\x03 \x03(\v2\x18.ddex.mead.v11.WorkTitleR\tworkTitle\x12Y\n" +
	"\x16work_relationship_type\x18\x04 \x01(\v2#.ddex.mead.v11.WorkRelationshipTypeR\x14workRelationshipType\x12G\n" +
	"\x06writer\x18\x05 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\x06writer\"\xdb\t\n" +
	"\x12ReleaseInformation\x12F\n" +
	"\x0frelease_summary\x18\x01 \x01(\v2\x1d.ddex.mead.v11.ReleaseSummaryR\x0ereleaseSummary\x12C\n" +
	"\x0egenre_category\x18\x02 \x03(\v2\x1c.ddex.mead.v11.GenreCategoryR\rgenreCategory\x12M\n" +
	"\x12sub_genre_category\x18\x03 \x03(\v2\x1f.ddex.mead.v11.SubGenreCategoryR\x10subGenreCategory\x12*\n" +
	"\x05focus\x18\x04 \x03(\v2\x14.ddex.mead.v11.FocusR\x05focus\x12'\n" +
	"\x04mood\x18\x05 \x03(\v2\x13.ddex.mead.v11.MoodR\x04mood\x12C\n" +
	"\x0eartistic_style\x18\x06 \x03(\v2\x1c.ddex.mead.v11.ArtisticStyleR\rartisticStyle\x12*\n" +
	"\x05theme\x18\a \x03(\v2\x14.ddex.mead.v11.ThemeR\x05theme\x123\n" +
	"\bactivity\x18\b \x03(\v2\x17.ddex.mead.v11.ActivityR\bactivity\x12F\n" +
	"\x0fcommentary_note\x18\t \x03(\v2\x1d.ddex.mead.v11.CommentaryNoteR\x0ecommentaryNote\x12*\n" +
	"\x05epoch\x18\n" +
	" \x03(\v2\x14.ddex.mead.v11.EpochR\x05epoch\x12O\n" +
	"\x12artistic_influence\x18\v \x03(\v2 .ddex.mead.v11.ArtisticInfluenceR\x11artisticInfluence\x12<\n" +
	"\n" +
	"is_similar\x18\f \x03(\v2\x1d.ddex.mead.v11.SimilarReleaseR\tisSimilar\x12n\n" +
	"\x1dhistoric_charting_information\x18\r \x03(\v2*.ddex.mead.v11.HistoricChartingInformationR\x1bhistoricChartingInformation\x12*\n" +
	"\x05award\x18\x0e \x03(\v2\x14.ddex.mead.v11.AwardR\x05award\x12L\n" +
	"\x11alternative_title\x18\x0f \x03(\v2\x1f.ddex.mead.v11.AlternativeTitleR\x10alternativeTitle\x12*\n" +
	"\x05image\x18\x10 \x03(\v2\x14.ddex.mead.v11.ImageR\x05image\x12;\n" +
	"\x1apriority_period_start_date\x18\x11 \x01(\tR\x17priorityPeriodStartDate\x127\n" +
	"\x18priority_period_end_date\x18\x12 \x01(\tR\x15priorityPeriodEndDate\x12_\n" +
	"\x19applicable_territory_code\x18\x13 \x01(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x17applicableTerritoryCode\"l\n" +
	"\x16ReleaseInformationList\x12R\n" +
	"\x13release_information\x18\x01 \x03(\v2!.ddex.mead.v11.ReleaseInformationR\x12releaseInformation\"\xc6\x02\n" +
	"\x0eReleaseSummary\x127\n" +
	"\n" +
	"release_id\x18\x01 \x01(\v2\x18.ddex.mead.v11.ReleaseIdR\treleaseId\x12@\n" +
	"\rdisplay_title\x18\x02 \x03(\v2\x1b.ddex.mead.v11.DisplayTitleR\fdisplayTitle\x12a\n" +
	"\x13display_artist_name\x18\x03 \x03(\v21.ddex.mead.v11.DisplayArtistNameWithPronunciationR\x11displayArtistName\x12V\n" +
	"\x0edisplay_artist\x18\x04 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\rdisplayArtist\"\xc0\x01\n" +
	"\x10RelevantResource\x12E\n" +
	"\vresource_id\x18\x01 \x01(\v2$.ddex.mead.v11.ResourceIdWithoutFlagR\n" +
	"resourceId\x12e\n" +
	"\x1aresource_relationship_type\x18\x02 \x01(\v2'.ddex.mead.v11.ResourceRelationshipTypeR\x18resourceRelationshipType\"\xda\x13\n" +
	"\x13ResourceInformation\x12I\n" +
	"\x10resource_summary\x18\x01 \x01(\v2\x1e.ddex.mead.v11.ResourceSummaryR\x0fresourceSummary\x12C\n" +
	"\x0egenre_category\x18\x02 \x03(\v2\x1c.ddex.mead.v11.GenreCategoryR\rgenreCategory\x12M\n" +
	"\x12sub_genre_category\x18\x03 \x03(\v2\x1f.ddex.mead.v11.SubGenreCategoryR\x10subGenreCategory\x12'\n" +
	"\x04form\x18\x04 \x01(\v2\x13.ddex.mead.v11.FormR\x04form\x12C\n" +
	"\x0evocal_register\x18\x05 \x03(\v2\x1c.ddex.mead.v11.VocalRegisterR\rvocalRegister\x12*\n" +
	"\x05focus\x18\x06 \x03(\v2\x14.ddex.mead.v11.FocusR\x05focus\x12C\n" +
	"\x0eabsolute_pitch\x18\a \x03(\v2\x1c.ddex.mead.v11.AbsolutePitchR\rabsolutePitch\x12C\n" +
	"\x0etime_signature\x18\b \x03(\v2\x1c.ddex.mead.v11.TimeSignatureR\rtimeSignature\x12/\n" +
	"\x05tempo\x18\t \x03(\v2\x19.ddex.mead.v11.TempoValueR\x05tempo\x12G\n" +
	"\x10beats_per_minute\x18\n" +
	" \x03(\v2\x1d.ddex.mead.v11.BeatsPerMinuteR\x0ebeatsPerMinute\x126\n" +
	"\tintensity\x18\v \x03(\v2\x18.ddex.mead.v11.IntensityR\tintensity\x12F\n" +
	"\x0finstrument_used\x18\f \x03(\v2\x1d.ddex.mead.v11.InstrumentUsedR\x0einstrumentUsed\x120\n" +
	"\aharmony\x18\r \x03(\v2\x16.ddex.mead.v11.HarmonyR\aharmony\x12'\n" +
	"\x04mood\x18\x0e \x03(\v2\x13.ddex.mead.v11.MoodR\x04mood\x12:\n" +
	"\vdance_style\x18\x0f \x03(\v2\x19.ddex.mead.v11.DanceStyleR\n" +
	"danceStyle\x12=\n" +
	"\frhythm_style\x18\x10 \x03(\v2\x1a.ddex.mead.v11.RhythmStyleR\vrhythmStyle\x12C\n" +
	"\x0eartistic_style\x18\x11 \x03(\v2\x1c.ddex.mead.v11.ArtisticStyleR\rartisticStyle\x12*\n" +
	"\x05theme\x18\x12 \x03(\v2\x14.ddex.mead.v11.ThemeR\x05theme\x123\n" +
	"\bactivity\x18\x13 \x03(\v2\x17.ddex.mead.v11.ActivityR\bactivity\x12J\n" +
	"\x11used_musical_work\x18\x14 \x03(\v2\x1e.ddex.mead.v11.UsedMusicalWorkR\x0fusedMusicalWork\x12N\n" +
	"\x10related_resource\x18\x15 \x03(\v2#.ddex.mead.v11.ResourceRelationshipR\x0frelatedResource\x12-\n" +
	"\x06lyrics\x18\x16 \x03(\v2\x15.ddex.mead.v11.LyricsR\x06lyrics\x12F\n" +
	"\x0fcommentary_note\x18\x17 \x03(\v2\x1d.ddex.mead.v11.CommentaryNoteR\x0ecommentaryNote\x12-\n" +
	"\x06sample\x18\x18 \x03(\v2\x15.ddex.mead.v11.SampleR\x06sample\x12C\n" +
	"\x0erecording_part\x18\x19 \x03(\v2\x1c.ddex.mead.v11.RecordingPartR\rrecordingPart\x12*\n" +
	"\x05usage\x18\x1a \x03(\v2\x14.ddex.mead.v11.UsageR\x05usage\x12:\n" +
	"\vimpact_date\x18\x1b \x03(\v2\x19.ddex.mead.v11.ImpactDateR\n" +
	"impactDate\x12I\n" +
	"\x10classical_period\x18\x1c \x01(\v2\x1e.ddex.mead.v11.ClassicalPeriodR\x0fclassicalPeriod\x12*\n" +
	"\x05epoch\x18\x1d \x03(\v2\x14.ddex.mead.v11.EpochR\x05epoch\x12O\n" +
	"\x12artistic_influence\x18\x1e \x03(\v2 .ddex.mead.v11.ArtisticInfluenceR\x11artisticInfluence\x12=\n" +
	"\n" +
	"is_similar\x18\x1f \x03(\v2\x1e.ddex.mead.v11.SimilarResourceR\tisSimilar\x12n\n" +
	"\x1dhistoric_charting_information\x18  \x03(\v2*.ddex.mead.v11.HistoricChartingInformationR\x1bhistoricChartingInformation\x12*\n" +
	"\x05award\x18! \x03(\v2\x14.ddex.mead.v11.AwardR\x05award\x12g\n" +
	"\x1clocation_and_date_of_session\x18\" \x03(\v2'.ddex.mead.v11.LocationAndDateOfSessionR\x18locationAndDateOfSession\x12L\n" +
	"\x11alternative_title\x18# \x03(\v2\x1f.ddex.mead.v11.AlternativeTitleR\x10alternativeTitle\x12*\n" +
	"\x05image\x18$ \x03(\v2\x14.ddex.mead.v11.ImageR\x05image\x12;\n" +
	"\x1apriority_period_start_date\x18% \x01(\tR\x17priorityPeriodStartDate\x127\n" +
	"\x18priority_period_end_date\x18& \x01(\tR\x15priorityPeriodEndDate\x12_\n" +
	"\x19applicable_territory_code\x18' \x01(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x17applicableTerritoryCode\"p\n" +
	"\x17ResourceInformationList\x12U\n" +
	"\x14resource_information\x18\x01 \x03(\v2\".ddex.mead.v11.ResourceInformationR\x13resourceInformation\"\x91\x04\n" +
	"\x14ResourceRelationship\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12E\n" +
	"\vresource_id\x18\x02 \x01(\v2$.ddex.mead.v11.ResourceIdWithoutFlagR\n" +
	"resourceId\x12V\n" +
	"\x15related_resource_type\x18\x03 \x01(\v2\".ddex.mead.v11.RelatedResourceTypeR\x13relatedResourceType\x12;\n" +
	"\x05title\x18\x04 \x03(\v2%.ddex.mead.v11.TitleWithPronunciationR\x05title\x12a\n" +
	"\x13display_artist_name\x18\x05 \x01(\v21.ddex.mead.v11.DisplayArtistNameWithPronunciationR\x11displayArtistName\x12V\n" +
	"\x0edisplay_artist\x18\x06 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\rdisplayArtist\"\xd5\x02\n" +
	"\x0fResourceSummary\x12E\n" +
	"\vresource_id\x18\x01 \x01(\v2$.ddex.mead.v11.ResourceIdWithoutFlagR\n" +
	"resourceId\x12@\n" +
	"\rdisplay_title\x18\x02 \x03(\v2\x1b.ddex.mead.v11.DisplayTitleR\fdisplayTitle\x12a\n" +
	"\x13display_artist_name\x18\x03 \x03(\v21.ddex.mead.v11.DisplayArtistNameWithPronunciationR\x11displayArtistName\x12V\n" +
	"\x0edisplay_artist\x18\x04 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\rdisplayArtist\"\xb3\x03\n" +
	"\vRhythmStyle\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x125\n" +
	"\x05value\x18\x02 \x01(\v2\x1f.ddex.mead.v11.RhythmStyleValueR\x05value\x12E\n" +
	"\vdescription\x18\x03 \x03(\v2#.ddex.mead.v11.TextWithoutTerritoryR\vdescription\x12K\n" +
	"#language_and_script_of_rhythm_style\x18\x04 \x03(\tR\x1elanguageAndScriptOfRhythmStyle\x12u\n" +
	"%territory_of_rhythm_style_description\x18\x05 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR!territoryOfRhythmStyleDescription\"t\n" +
	"\x10RhythmStyleValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"q\n" +
	"\rRootChordNote\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"t\n" +
	"\x10RootChordQuality\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xbd\x02\n" +
	"\x06Sample\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12I\n" +
	"\x10related_resource\x18\x02 \x01(\v2\x1e.ddex.mead.v11.ResourceSummaryR\x0frelatedResource\x12C\n" +
	"\x0esample_feature\x18\x03 \x03(\v2\x1c.ddex.mead.v11.SampleFeatureR\rsampleFeature\x12?\n" +
	"\vdescription\x18\x04 \x03(\v2\x1d.ddex.mead.v11.TextWithFormatR\vdescription\"^\n" +
	"\rSampleFeature\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x127\n" +
	"\x18language_and_script_code\x18\x02 \x01(\tR\x15languageAndScriptCode\"\xe3\x01\n" +
	"\x0eSimilarRelease\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x120\n" +
	"\arelease\x18\x02 \x01(\v2\x16.ddex.mead.v11.ReleaseR\arelease\x12;\n" +
	"\vdescription\x18\x03 \x03(\v2\x19.ddex.mead.v11.AnnotationR\vdescription\"\xe7\x01\n" +
	"\x0fSimilarResource\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x123\n" +
	"\bresource\x18\x02 \x01(\v2\x17.ddex.mead.v11.ResourceR\bresource\x12;\n" +
	"\vdescription\x18\x03 \x03(\v2\x19.ddex.mead.v11.AnnotationR\vdescription\"\xd7\x01\n" +
	"\vSimilarWork\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12'\n" +
	"\x04work\x18\x02 \x01(\v2\x13.ddex.mead.v11.WorkR\x04work\x12;\n" +
	"\vdescription\x18\x03 \x03(\v2\x19.ddex.mead.v11.AnnotationR\vdescription\"\xb2\x01\n" +
	"\x10SubGenreCategory\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12:\n" +
	"\x05value\x18\x02 \x03(\v2$.ddex.mead.v11.SubGenreCategoryValueR\x05value\"n\n" +
	"\n" +
	"TempoValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xcc\x03\n" +
	"\x05Theme\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.ddex.mead.v11.ThemeValueR\x05value\x12E\n" +
	"\vdescription\x18\x03 \x03(\v2#.ddex.mead.v11.TextWithoutTerritoryR\vdescription\x12>\n" +
	"\x1clanguage_and_script_of_theme\x18\x04 \x03(\tR\x18languageAndScriptOfTheme\x12h\n" +
	"\x1eterritory_of_theme_description\x18\x05 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x1bterritoryOfThemeDescription\x12=\n" +
	"\n" +
	"theme_type\x18\x06 \x01(\x0e2\x1e.ddex.mead.v11.MoodOrThemeTypeR\tthemeType\"n\n" +
	"\n" +
	"ThemeValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xbb\x01\n" +
	"\rTimeSignature\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12F\n" +
	"\n" +
	"modulation\x18\x02 \x03(\v2&.ddex.mead.v11.TimeSignatureModulationR\n" +
	"modulation\"/\n" +
	"\x17TimeSignatureModulation\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"\x8d\x03\n" +
	"\x05Usage\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12?\n" +
	"\vdescription\x18\x02 \x03(\v2\x1d.ddex.mead.v11.TextWithFormatR\vdescription\x12h\n" +
	"\x1eterritory_of_usage_description\x18\x03 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x1bterritoryOfUsageDescription\x12'\n" +
	"\x0fsequence_number\x18\x04 \x01(\x05R\x0esequenceNumber\x12L\n" +
	"\x11relevant_resource\x18\x05 \x03(\v2\x1f.ddex.mead.v11.RelevantResourceR\x10relevantResource\"\x93\x01\n" +
	"\vUsagePeriod\x12C\n" +
	"\n" +
	"start_date\x18\x01 \x01(\v2$.ddex.mead.v11.EventDateWithoutFlagsR\tstartDate\x12?\n" +
	"\bend_date\x18\x02 \x01(\v2$.ddex.mead.v11.EventDateWithoutFlagsR\aendDate\"\xbc\x01\n" +
	"\x0fUsedMusicalWork\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12E\n" +
	"\x1fresource_musical_work_reference\x18\x02 \x03(\tR\x1cresourceMusicalWorkReference\"\xcc\x03\n" +
	"\rWorkHierarchy\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x120\n" +
	"\x14is_described_element\x18\x02 \x01(\bR\x12isDescribedElement\x12\x1f\n" +
	"\vis_complete\x18\x03 \x01(\bR\n" +
	"isComplete\x12'\n" +
	"\x0fsequence_number\x18\x04 \x01(\x05R\x0esequenceNumber\x12@\n" +
	"\awork_id\x18\x05 \x01(\v2'.ddex.mead.v11.MusicalWorkIdWithoutFlagR\x06workId\x127\n" +
	"\n" +
	"work_title\x18\x06 \x03(\v2\x18.ddex.mead.v11.WorkTitleR\tworkTitle\x127\n" +
	"\x05child\x18\a \x03(\v2!.ddex.mead.v11.ChildWorkHierarchyR\x05child\x12'\n" +
	"\x04form\x18\b \x01(\v2\x13.ddex.mead.v11.FormR\x04form\"\xef\f\n" +
	"\x0fWorkInformation\x124\n" +
	"\x16musical_work_reference\x18\x01 \x01(\tR\x14musicalWorkReference\x12=\n" +
	"\fwork_summary\x18\x02 \x01(\v2\x1a.ddex.mead.v11.WorkSummaryR\vworkSummary\x12C\n" +
	"\x0egenre_category\x18\x03 \x03(\v2\x1c.ddex.mead.v11.GenreCategoryR\rgenreCategory\x12M\n" +
	"\x12sub_genre_category\x18\x04 \x03(\v2\x1f.ddex.mead.v11.SubGenreCategoryR\x10subGenreCategory\x12'\n" +
	"\x04form\x18\x05 \x01(\v2\x13.ddex.mead.v11.FormR\x04form\x12C\n" +
	"\x0evocal_register\x18\x06 \x03(\v2\x1c.ddex.mead.v11.VocalRegisterR\rvocalRegister\x12*\n" +
	"\x05focus\x18\a \x03(\v2\x14.ddex.mead.v11.FocusR\x05focus\x12C\n" +
	"\x0etime_signature\x18\b \x03(\v2\x1c.ddex.mead.v11.TimeSignatureR\rtimeSignature\x12/\n" +
	"\x05tempo\x18\t \x03(\v2\x19.ddex.mead.v11.TempoValueR\x05tempo\x12F\n" +
	"\x11target_instrument\x18\n" +
	" \x03(\v2\x19.ddex.mead.v11.InstrumentR\x10targetInstrument\x120\n" +
	"\aharmony\x18\v \x03(\v2\x16.ddex.mead.v11.HarmonyR\aharmony\x12'\n" +
	"\x04mood\x18\f \x03(\v2\x13.ddex.mead.v11.MoodR\x04mood\x12:\n" +
	"\vdance_style\x18\r \x03(\v2\x19.ddex.mead.v11.DanceStyleR\n" +
	"danceStyle\x12=\n" +
	"\frhythm_style\x18\x0e \x03(\v2\x1a.ddex.mead.v11.RhythmStyleR\vrhythmStyle\x12*\n" +
	"\x05theme\x18\x0f \x03(\v2\x14.ddex.mead.v11.ThemeR\x05theme\x123\n" +
	"\bactivity\x18\x10 \x03(\v2\x17.ddex.mead.v11.ActivityR\bactivity\x12C\n" +
	"\x0ework_hierarchy\x18\x11 \x03(\v2\x1c.ddex.mead.v11.WorkHierarchyR\rworkHierarchy\x12=\n" +
	"\frelated_work\x18\x12 \x03(\v2\x1a.ddex.mead.v11.RelatedWorkR\vrelatedWork\x12L\n" +
	"\x11derived_recording\x18\x13 \x03(\v2\x1f.ddex.mead.v11.DerivedRecordingR\x10derivedRecording\x12-\n" +
	"\x06lyrics\x18\x14 \x03(\v2\x15.ddex.mead.v11.LyricsR\x06lyrics\x12F\n" +
	"\x0fcommentary_note\x18\x15 \x03(\v2\x1d.ddex.mead.v11.CommentaryNoteR\x0ecommentaryNote\x12I\n" +
	"\x10classical_period\x18\x16 \x01(\v2\x1e.ddex.mead.v11.ClassicalPeriodR\x0fclassicalPeriod\x12*\n" +
	"\x05epoch\x18\x17 \x03(\v2\x14.ddex.mead.v11.EpochR\x05epoch\x12O\n" +
	"\x12artistic_influence\x18\x18 \x03(\v2 .ddex.mead.v11.ArtisticInfluenceR\x11artisticInfluence\x129\n" +
	"\n" +
	"is_similar\x18\x19 \x03(\v2\x1a.ddex.mead.v11.SimilarWorkR\tisSimilar\x12*\n" +
	"\x05award\x18\x1a \x03(\v2\x14.ddex.mead.v11.AwardR\x05award\x12L\n" +
	"\x11alternative_title\x18\x1b \x03(\v2\x1f.ddex.mead.v11.AlternativeTitleR\x10alternativeTitle\"`\n" +
	"\x13WorkInformationList\x12I\n" +
	"\x10work_information\x18\x01 \x03(\v2\x1e.ddex.mead.v11.WorkInformationR\x0fworkInformation\"\xed\x01\n" +
	"\vWorkSummary\x12O\n" +
	"\x0fmusical_work_id\x18\x01 \x01(\v2'.ddex.mead.v11.MusicalWorkIdWithoutFlagR\rmusicalWorkId\x12D\n" +
	"\n" +
	"work_title\x18\x02 \x03(\v2%.ddex.mead.v11.TitleWithPronunciationR\tworkTitle\x12G\n" +
	"\x06writer\x18\x03 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\x06writer\"L\n" +
	"\bCategory\x12\x12\n" +
	"\x04term\x18\x01 \x01(\tR\x04term\x12\x16\n" +
	"\x06scheme\x18\x02 \x01(\tR\x06scheme\x12\x14\n" +
	"\x05label\x18\x03 \x01(\tR\x05label\"/\n" +
	"\aContent\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x10\n" +
	"\x03src\x18\x02 \x01(\tR\x03src\" \n" +
	"\bDateTime\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"M\n" +
	"\tGenerator\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x10\n" +
	"\x03uri\x18\x02 \x01(\tR\x03uri\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\"\x1c\n" +
	"\x04Icon\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"\x1a\n" +
	"\x02Id\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"\x8a\x01\n" +
	"\x04Link\x12\x12\n" +
	"\x04href\x18\x01 \x01(\tR\x04href\x12\x10\n" +
	"\x03rel\x18\x02 \x01(\tR\x03rel\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x1a\n" +
	"\bhreflang\x18\x04 \x01(\tR\bhreflang\x12\x14\n" +
	"\x05title\x18\x05 \x01(\tR\x05title\x12\x16\n" +
	"\x06length\x18\x06 \x01(\x05R\x06length\"\x1c\n" +
	"\x04Logo\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"h\n" +
	"\x06Person\x12\x14\n" +
	"\x04name\x18\x01 \x01(\tH\x00R\x04name\x12&\n" +
	"\x03uri\x18\x02 \x01(\v2\x12.ddex.mead.v11.URIH\x00R\x03uri\x12\x16\n" +
	"\x05email\x18\x03 \x01(\tH\x00R\x05emailB\b\n" +
	"\x06choice\"\xd9\x04\n" +
	"\x06Source\x12/\n" +
	"\x06author\x18\x01 \x01(\v2\x15.ddex.mead.v11.PersonH\x00R\x06author\x125\n" +
	"\bcategory\x18\x02 \x01(\v2\x17.ddex.mead.v11.CategoryH\x00R\bcategory\x129\n" +
	"\vcontributor\x18\x03 \x01(\v2\x15.ddex.mead.v11.PersonH\x00R\vcontributor\x128\n" +
	"\tgenerator\x18\x04 \x01(\v2\x18.ddex.mead.v11.GeneratorH\x00R\tgenerator\x12)\n" +
	"\x04icon\x18\x05 \x01(\v2\x13.ddex.mead.v11.IconH\x00R\x04icon\x12#\n" +
	"\x02id\x18\x06 \x01(\v2\x11.ddex.mead.v11.IdH\x00R\x02id\x12)\n" +
	"\x04link\x18\a \x01(\v2\x13.ddex.mead.v11.LinkH\x00R\x04link\x12)\n" +
	"\x04logo\x18\b \x01(\v2\x13.ddex.mead.v11.LogoH\x00R\x04logo\x12-\n" +
	"\x06rights\x18\t \x01(\v2\x13.ddex.mead.v11.TextH\x00R\x06rights\x121\n" +
	"\bsubtitle\x18\n" +
	" \x01(\v2\x13.ddex.mead.v11.TextH\x00R\bsubtitle\x12+\n" +
	"\x05title\x18\v \x01(\v2\x13.ddex.mead.v11.TextH\x00R\x05title\x123\n" +
	"\aupdated\x18\f \x01(\v2\x17.ddex.mead.v11.DateTimeH\x00R\aupdatedB\b\n" +
	"\x06choice\"7\n" +
	"\x04Text\x12/\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1b.ddex.mead.v11.TextTypeATOMR\x04type\"\x1b\n" +
	"\x03URI\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"\x8b\x01\n" +
	"\x10AllTerritoryCode\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12a\n" +
	"\x0fidentifier_type\x18\x02 \x01(\x0e28.ddex.mead.v11.TerritoryCodeTypeIncludingDeprecatedCodesR\x0eidentifierType\"s\n" +
	"\x0fArtistTypeValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xd9\x03\n" +
	"\x11ArtisticInfluence\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12E\n" +
	"\x05party\x18\x02 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\x05party\x12'\n" +
	"\x04work\x18\x03 \x03(\v2\x13.ddex.mead.v11.WorkR\x04work\x123\n" +
	"\bresource\x18\x04 \x03(\v2\x17.ddex.mead.v11.ResourceR\bresource\x120\n" +
	"\arelease\x18\x05 \x03(\v2\x16.ddex.mead.v11.ReleaseR\arelease\x12?\n" +
	"\vdescription\x18\x06 \x03(\v2\x1d.ddex.mead.v11.TextWithFormatR\vdescription\x12#\n" +
	"\ris_influenced\x18\a \x01(\bR\fisInfluenced\x12#\n" +
	"\ris_influencer\x18\b \x01(\bR\fisInfluencer\"\xed\x03\n" +
	"\x05Award\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12T\n" +
	"\rawarding_body\x18\x02 \x01(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\fawardingBody\x12T\n" +
	"\rawarded_party\x18\x03 \x01(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\fawardedParty\x12P\n" +
	"\n" +
	"award_name\x18\x04 \x01(\v21.ddex.mead.v11.NameWithPronunciationAndScriptCodeR\tawardName\x12,\n" +
	"\x04date\x18\x05 \x01(\v2\x18.ddex.mead.v11.EventDateR\x04date\x12\x1b\n" +
	"\tis_winner\x18\x06 \x01(\bR\bisWinner\x127\n" +
	"\acomment\x18\a \x03(\v2\x1d.ddex.mead.v11.TextWithFormatR\acomment\"C\n" +
	"\rCatalogNumber\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\"\xaa\x01\n" +
	"\n" +
	"ChartEntry\x12\x1a\n" +
	"\bposition\x18\x01 \x01(\x05R\bposition\x12\x12\n" +
	"\x04date\x18\x02 \x01(\tR\x04date\x123\n" +
	"\bduration\x18\x03 \x01(\v2\x17.ddex.mead.v11.DurationR\bduration\x127\n" +
	"\acomment\x18\x04 \x03(\v2\x1d.ddex.mead.v11.TextWithFormatR\acomment\"\xf9\x02\n" +
	"\x0fClassicalPeriod\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12.\n" +
	"\x04name\x18\x02 \x01(\v2\x1a.ddex.mead.v11.PeriodValueR\x04name\x12S\n" +
	"'language_and_script_of_classical_period\x18\x03 \x03(\tR\"languageAndScriptOfClassicalPeriod\x12}\n" +
	")territory_of_classical_period_description\x18\x04 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR%territoryOfClassicalPeriodDescription\"\x9b\x04\n" +
	"\x0eCommentaryNote\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x127\n" +
	"\x04text\x18\x02 \x03(\v2#.ddex.mead.v11.TextWithoutTerritoryR\x04text\x12S\n" +
	"\x14commentary_note_type\x18\x03 \x03(\v2!.ddex.mead.v11.CommentaryNoteTypeR\x12commentaryNoteType\x12Q\n" +
	"&language_and_script_of_commentary_note\x18\x04 \x03(\tR!languageAndScriptOfCommentaryNote\x12{\n" +
	"(territory_of_commentary_note_description\x18\x05 \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR$territoryOfCommentaryNoteDescription\x12G\n" +
	"\x06author\x18\x06 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\x06author\"v\n" +
	"\x12CommentaryNoteType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"w\n" +
	"\x14CurrentTerritoryCode\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12I\n" +
	"\x0fidentifier_type\x18\x02 \x01(\x0e2 .ddex.mead.v11.TerritoryCodeTypeR\x0eidentifierType\"C\n" +
	"\x04Date\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12%\n" +
	"\x0eis_approximate\x18\x02 \x01(\bR\risApproximate\"\xee\x01\n" +
	"\x0fDetailedHashSum\x12A\n" +
	"\talgorithm\x18\x01 \x01(\v2#.ddex.mead.v11.HashSumAlgorithmTypeR\talgorithm\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x1c\n" +
	"\tparameter\x18\x03 \x01(\tR\tparameter\x12:\n" +
	"\tdata_type\x18\x04 \x01(\x0e2\x1d.ddex.mead.v11.BinaryDataTypeR\bdataType\x12$\n" +
	"\x0ehash_sum_value\x18\x05 \x01(\tR\fhashSumValue\"\xea\x01\n" +
	"\x0fDetailedPartyId\x12\x15\n" +
	"\ai_s_n_i\x18\x01 \x01(\tR\x04iSNI\x12\x15\n" +
	"\ad_p_i_d\x18\x02 \x01(\tR\x04dPID\x12&\n" +
	"\x0fipi_name_number\x18\x03 \x01(\tR\ripiNameNumber\x12\x12\n" +
	"\x05i_p_n\x18\x04 \x01(\tR\x03iPN\x12(\n" +
	"\x10cisac_society_id\x18\x05 \x01(\tR\x0ecisacSocietyId\x12C\n" +
	"\x0eproprietary_id\x18\x06 \x03(\v2\x1c.ddex.mead.v11.ProprietaryIdR\rproprietaryId\"\xed\x01\n" +
	"\x1cDisplayArtistNameWithDefault\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x127\n" +
	"\x18language_and_script_code\x18\x02 \x01(\tR\x15languageAndScriptCode\x12_\n" +
	"\x19applicable_territory_code\x18\x03 \x01(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x17applicableTerritoryCode\x12\x1d\n" +
	"\n" +
	"is_default\x18\x04 \x01(\bR\tisDefault\"\xa9\x01\n" +
	"\"DisplayArtistNameWithPronunciation\x12?\n" +
	"\x04name\x18\x01 \x01(\v2+.ddex.mead.v11.DisplayArtistNameWithDefaultR\x04name\x12B\n" +
	"\rpronunciation\x18\x02 \x03(\v2\x1c.ddex.mead.v11.PronunciationR\rpronunciation\"\xb5\x01\n" +
	"\bDuration\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12G\n" +
	"\x10unit_of_duration\x18\x02 \x01(\x0e2\x1d.ddex.mead.v11.UnitOfDurationR\x0eunitOfDuration\x12\x1c\n" +
	"\tnamespace\x18\x03 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x04 \x01(\tR\x10userDefinedValue\"\xc7\x04\n" +
	"\x05Epoch\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12)\n" +
	"\x05value\x18\x02 \x03(\v2\x13.ddex.mead.v11.NameR\x05value\x12V\n" +
	"\x0erelated_artist\x18\x03 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\rrelatedArtist\x12I\n" +
	"\x10related_creation\x18\x04 \x03(\v2\x1e.ddex.mead.v11.RelatedCreationR\x0frelatedCreation\x122\n" +
	"\n" +
	"start_date\x18\x05 \x01(\v2\x13.ddex.mead.v11.DateR\tstartDate\x12.\n" +
	"\bend_date\x18\x06 \x01(\v2\x13.ddex.mead.v11.DateR\aendDate\x12>\n" +
	"\x1clanguage_and_script_of_epoch\x18\a \x03(\tR\x18languageAndScriptOfEpoch\x12h\n" +
	"\x1eterritory_of_epoch_description\x18\b \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x1bterritoryOfEpochDescription\"\xc9\x02\n" +
	"\tEventDate\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12%\n" +
	"\x0eis_approximate\x18\x02 \x01(\bR\risApproximate\x12\x1b\n" +
	"\tis_before\x18\x03 \x01(\bR\bisBefore\x12\x19\n" +
	"\bis_after\x18\x04 \x01(\bR\aisAfter\x12[\n" +
	"\x19applicable_territory_code\x18\x05 \x01(\v2\x1f.ddex.mead.v11.AllTerritoryCodeR\x17applicableTerritoryCode\x121\n" +
	"\x14location_description\x18\x06 \x01(\tR\x13locationDescription\x127\n" +
	"\x18language_and_script_code\x18\a \x01(\tR\x15languageAndScriptCode\"\xb8\x02\n" +
	"\rEventDateTime\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12%\n" +
	"\x0eis_approximate\x18\x02 \x01(\bR\risApproximate\x12\x1b\n" +
	"\tis_before\x18\x03 \x01(\bR\bisBefore\x12\x19\n" +
	"\bis_after\x18\x04 \x01(\bR\aisAfter\x12F\n" +
	"\x0eterritory_code\x18\x05 \x01(\v2\x1f.ddex.mead.v11.AllTerritoryCodeR\rterritoryCode\x121\n" +
	"\x14location_description\x18\x06 \x01(\tR\x13locationDescription\x127\n" +
	"\x18language_and_script_code\x18\a \x01(\tR\x15languageAndScriptCode\"r\n" +
	"\x04File\x12\x12\n" +
	"\x05u_r_i\x18\x01 \x01(\tR\x03uRI\x129\n" +
	"\bhash_sum\x18\x02 \x01(\v2\x1e.ddex.mead.v11.DetailedHashSumR\ahashSum\x12\x1b\n" +
	"\tfile_size\x18\x03 \x01(\tR\bfileSize\"\x8f\x06\n" +
	"\x05Focus\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12E\n" +
	"\x05party\x18\x02 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\x05party\x12a\n" +
	"\x13display_artist_name\x18\x03 \x03(\v21.ddex.mead.v11.DisplayArtistNameWithPronunciationR\x11displayArtistName\x12V\n" +
	"\x0edisplay_artist\x18\x04 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\rdisplayArtist\x12G\n" +
	"\x06writer\x18\x05 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\x06writer\x12'\n" +
	"\x0fsequence_number\x18\x06 \x01(\x05R\x0esequenceNumber\x12P\n" +
	"\x15period_of_being_focus\x18\a \x03(\v2\x1d.ddex.mead.v11.PeriodWithTimeR\x12periodOfBeingFocus\x12~\n" +
	"*territory_of_being_focus_track_description\x18\b \x03(\v2#.ddex.mead.v11.CurrentTerritoryCodeR%territoryOfBeingFocusTrackDescription\x12=\n" +
	"\acomment\x18\t \x03(\v2#.ddex.mead.v11.TextWithoutTerritoryR\acomment\x12\x1d\n" +
	"\n" +
	"is_default\x18\n" +
	" \x01(\bR\tisDefault\"\xaf\x01\n" +
	"\x12GenreCategoryValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x127\n" +
	"\x18language_and_script_code\x18\x02 \x01(\tR\x15languageAndScriptCode\x12\x1c\n" +
	"\tnamespace\x18\x03 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x04 \x01(\tR\x10userDefinedValue\"x\n" +
	"\x14HashSumAlgorithmType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xfe\x03\n" +
	"\x1bHistoricChartingInformation\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12J\n" +
	"\x0eterritory_code\x18\x02 \x01(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\rterritoryCode\x12P\n" +
	"\n" +
	"chart_name\x18\x03 \x03(\v21.ddex.mead.v11.NameWithPronunciationAndScriptCodeR\tchartName\x12E\n" +
	"\x12duration_in_charts\x18\x04 \x01(\v2\x17.ddex.mead.v11.DurationR\x10durationInCharts\x12!\n" +
	"\ftop_position\x18\x05 \x01(\x05R\vtopPosition\x12:\n" +
	"\vchart_entry\x18\x06 \x03(\v2\x19.ddex.mead.v11.ChartEntryR\n" +
	"chartEntry\x127\n" +
	"\acomment\x18\a \x03(\v2\x1d.ddex.mead.v11.TextWithFormatR\acomment\"\xcd\x01\n" +
	"\x05Image\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x12'\n" +
	"\x04file\x18\x02 \x01(\v2\x13.ddex.mead.v11.FileR\x04file\x127\n" +
	"\n" +
	"image_type\x18\x03 \x03(\v2\x18.ddex.mead.v11.ImageTypeR\timageType\"m\n" +
	"\tImageType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"u\n" +
	"\x11MessageAuditTrail\x12`\n" +
	"\x19message_audit_trail_event\x18\x01 \x03(\v2%.ddex.mead.v11.MessageAuditTrailEventR\x16messageAuditTrailEvent\"\x9d\x01\n" +
	"\x16MessageAuditTrailEvent\x12f\n" +
	"\x1amessaging_party_descriptor\x18\x01 \x01(\v2(.ddex.mead.v11.MessagingPartyWithoutCodeR\x18messagingPartyDescriptor\x12\x1b\n" +
	"\tdate_time\x18\x02 \x01(\tR\bdateTime\"\xe5\x04\n" +
	"\rMessageHeader\x12*\n" +
	"\x11message_thread_id\x18\x01 \x01(\tR\x0fmessageThreadId\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\tR\tmessageId\x12*\n" +
	"\x11message_file_name\x18\x03 \x01(\tR\x0fmessageFileName\x12O\n" +
	"\x0emessage_sender\x18\x04 \x01(\v2(.ddex.mead.v11.MessagingPartyWithoutCodeR\rmessageSender\x12S\n" +
	"\x11sent_on_behalf_of\x18\x05 \x01(\v2(.ddex.mead.v11.MessagingPartyWithoutCodeR\x0esentOnBehalfOf\x12U\n" +
	"\x11message_recipient\x18\x06 \x03(\v2(.ddex.mead.v11.MessagingPartyWithoutCodeR\x10messageRecipient\x129\n" +
	"\x19message_created_date_time\x18\a \x01(\tR\x16messageCreatedDateTime\x12P\n" +
	"\x13message_audit_trail\x18\b \x01(\v2 .ddex.mead.v11.MessageAuditTrailR\x11messageAuditTrail\x12S\n" +
	"\x14message_control_type\x18\t \x01(\x0e2!.ddex.mead.v11.MessageControlTypeR\x12messageControlType\"\x9d\x01\n" +
	"\x19MessagingPartyWithoutCode\x12\x19\n" +
	"\bparty_id\x18\x01 \x01(\tR\apartyId\x12B\n" +
	"\n" +
	"party_name\x18\x02 \x01(\v2#.ddex.mead.v11.PartyNameWithoutCodeR\tpartyName\x12!\n" +
	"\ftrading_name\x18\x03 \x01(\tR\vtradingName\"\x90\x01\n" +
	"\x0eMetadataSource\x12)\n" +
	"\x10source_reference\x18\x01 \x01(\tR\x0fsourceReference\x12S\n" +
	"\x14metadata_source_type\x18\x02 \x01(\v2!.ddex.mead.v11.MetadataSourceTypeR\x12metadataSourceType\"\\\n" +
	"\x12MetadataSourceList\x12F\n" +
	"\x0fmetadata_source\x18\x01 \x03(\v2\x1d.ddex.mead.v11.MetadataSourceR\x0emetadataSource\"\xaf\x01\n" +
	"\x17MetadataSourceReference\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12.\n" +
	"\x13assertion_date_time\x18\x02 \x01(\tR\x11assertionDateTime\x126\n" +
	"\x06status\x18\x03 \x01(\x0e2\x1e.ddex.mead.v11.AssertionStatusR\x06status\x12\x16\n" +
	"\x06weight\x18\x04 \x01(\tR\x06weight\"v\n" +
	"\x12MetadataSourceType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xcf\x01\n" +
	"\x18MusicalWorkIdWithoutFlag\x12\x15\n" +
	"\ai_s_w_c\x18\x01 \x01(\tR\x04iSWC\x12\x1f\n" +
	"\vopus_number\x18\x02 \x01(\tR\n" +
	"opusNumber\x126\n" +
	"\x17composer_catalog_number\x18\x03 \x03(\tR\x15composerCatalogNumber\x12C\n" +
	"\x0eproprietary_id\x18\x04 \x03(\v2\x1c.ddex.mead.v11.ProprietaryIdR\rproprietaryId\"U\n" +
	"\x04Name\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x127\n" +
	"\x18language_and_script_code\x18\x02 \x01(\tR\x15languageAndScriptCode\"\x91\x01\n" +
	"\"NameWithPronunciationAndScriptCode\x12'\n" +
	"\x04name\x18\x01 \x01(\v2\x13.ddex.mead.v11.NameR\x04name\x12B\n" +
	"\rpronunciation\x18\x02 \x03(\v2\x1c.ddex.mead.v11.PronunciationR\rpronunciation\"i\n" +
	" PartyDescriptorWithPronunciation\x12;\n" +
	"\bparty_id\x18\x01 \x01(\v2\x1e.ddex.mead.v11.DetailedPartyIdH\x00R\apartyIdB\b\n" +
	"\x06choice\"\xcd\x06\n" +
	"\x1aPartyNameWithPronunciation\x12N\n" +
	"\tfull_name\x18\x01 \x01(\v21.ddex.mead.v11.NameWithPronunciationAndScriptCodeR\bfullName\x12p\n" +
	"\x1bfull_name_ascii_transcribed\x18\x02 \x01(\v21.ddex.mead.v11.NameWithPronunciationAndScriptCodeR\x18fullNameAsciiTranscribed\x12]\n" +
	"\x11full_name_indexed\x18\x03 \x01(\v21.ddex.mead.v11.NameWithPronunciationAndScriptCodeR\x0ffullNameIndexed\x12d\n" +
	"\x15names_before_key_name\x18\x04 \x01(\v21.ddex.mead.v11.NameWithPronunciationAndScriptCodeR\x12namesBeforeKeyName\x12L\n" +
	"\bkey_name\x18\x05 \x01(\v21.ddex.mead.v11.NameWithPronunciationAndScriptCodeR\akeyName\x12b\n" +
	"\x14names_after_key_name\x18\x06 \x01(\v21.ddex.mead.v11.NameWithPronunciationAndScriptCodeR\x11namesAfterKeyName\x12\\\n" +
	"\x10abbreviated_name\x18\a \x01(\v21.ddex.mead.v11.NameWithPronunciationAndScriptCodeR\x0fabbreviatedName\x127\n" +
	"\x18language_and_script_code\x18\b \x01(\tR\x15languageAndScriptCode\x12_\n" +
	"\x19applicable_territory_code\x18\t \x01(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x17applicableTerritoryCode\"\xc8\x02\n" +
	"\x14PartyNameWithoutCode\x12\x1b\n" +
	"\tfull_name\x18\x01 \x01(\tR\bfullName\x12=\n" +
	"\x1bfull_name_ascii_transcribed\x18\x02 \x01(\tR\x18fullNameAsciiTranscribed\x12*\n" +
	"\x11full_name_indexed\x18\x03 \x01(\tR\x0ffullNameIndexed\x121\n" +
	"\x15names_before_key_name\x18\x04 \x01(\tR\x12namesBeforeKeyName\x12\x19\n" +
	"\bkey_name\x18\x05 \x01(\tR\akeyName\x12/\n" +
	"\x14names_after_key_name\x18\x06 \x01(\tR\x11namesAfterKeyName\x12)\n" +
	"\x10abbreviated_name\x18\a \x01(\tR\x0fabbreviatedName\"\b\n" +
	"\x06Period\"o\n" +
	"\vPeriodValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\\\n" +
	"\x0ePeriodWithTime\x12&\n" +
	"\x0fstart_date_time\x18\x01 \x01(\tR\rstartDateTime\x12\"\n" +
	"\rend_date_time\x18\x02 \x01(\tR\vendDateTime\"\x9d\x02\n" +
	"\rPronunciation\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12!\n" +
	"\fis_canonical\x18\x02 \x01(\bR\visCanonical\x12#\n" +
	"\rlanguage_code\x18\x03 \x01(\tR\flanguageCode\x12@\n" +
	"\rencoding_type\x18\x04 \x01(\x0e2\x1b.ddex.mead.v11.EncodingTypeR\fencodingType\x12-\n" +
	"\x12encoding_namespace\x18\x05 \x01(\tR\x11encodingNamespace\x12=\n" +
	"\x1bencoding_user_defined_value\x18\x06 \x01(\tR\x18encodingUserDefinedValue\"C\n" +
	"\rProprietaryId\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\"u\n" +
	"\x11RecordingPartType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"N\n" +
	"\x0fRelatedCreation\x12;\n" +
	"\x05title\x18\x01 \x01(\v2%.ddex.mead.v11.TitleWithPronunciationR\x05title\"w\n" +
	"\x13RelatedResourceType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xe8\x02\n" +
	"\aRelease\x12\x13\n" +
	"\x05g_rid\x18\x01 \x01(\tR\x04gRid\x12\x15\n" +
	"\ai_c_p_n\x18\x02 \x01(\tR\x04iCPN\x124\n" +
	"\x16proprietary_release_id\x18\x03 \x01(\tR\x14proprietaryReleaseId\x12@\n" +
	"\rrelease_title\x18\x04 \x03(\v2\x1b.ddex.mead.v11.ReleaseTitleR\freleaseTitle\x12a\n" +
	"\x13display_artist_name\x18\x05 \x03(\v21.ddex.mead.v11.DisplayArtistNameWithPronunciationR\x11displayArtistName\x12V\n" +
	"\x0edisplay_artist\x18\x06 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\rdisplayArtist\"\xd8\x01\n" +
	"\tReleaseId\x12\x13\n" +
	"\x05g_rid\x18\x01 \x01(\tR\x04gRid\x12\x15\n" +
	"\ai_s_r_c\x18\x02 \x01(\tR\x04iSRC\x12\x15\n" +
	"\ai_c_p_n\x18\x03 \x01(\tR\x04iCPN\x12C\n" +
	"\x0ecatalog_number\x18\x04 \x01(\v2\x1c.ddex.mead.v11.CatalogNumberR\rcatalogNumber\x12C\n" +
	"\x0eproprietary_id\x18\x05 \x03(\v2\x1c.ddex.mead.v11.ProprietaryIdR\rproprietaryId\"]\n" +
	"\fReleaseTitle\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x127\n" +
	"\x18language_and_script_code\x18\x02 \x01(\tR\x15languageAndScriptCode\"\x80\x03\n" +
	"\bResource\x12\x15\n" +
	"\ai_s_r_c\x18\x01 \x01(\tR\x04iSRC\x12%\n" +
	"\x0ecatalog_number\x18\x02 \x01(\tR\rcatalogNumber\x126\n" +
	"\x17proprietary_resource_id\x18\x03 \x01(\tR\x15proprietaryResourceId\x12C\n" +
	"\x0eresource_title\x18\x04 \x03(\v2\x1c.ddex.mead.v11.ResourceTitleR\rresourceTitle\x12a\n" +
	"\x13display_artist_name\x18\x05 \x03(\v21.ddex.mead.v11.DisplayArtistNameWithPronunciationR\x11displayArtistName\x12V\n" +
	"\x0edisplay_artist\x18\x06 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\rdisplayArtist\"{\n" +
	"\x17ResourceContributorRole\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xc5\x02\n" +
	"\x15ResourceIdWithoutFlag\x12\x15\n" +
	"\ai_s_r_c\x18\x01 \x01(\tR\x04iSRC\x12\x15\n" +
	"\ai_s_m_n\x18\x02 \x01(\tR\x04iSMN\x12\x15\n" +
	"\ai_s_a_n\x18\x03 \x01(\tR\x04iSAN\x12\x18\n" +
	"\tv_i_s_a_n\x18\x04 \x01(\tR\x05vISAN\x12\x15\n" +
	"\ai_s_b_n\x18\x05 \x01(\tR\x04iSBN\x12\x15\n" +
	"\ai_s_s_n\x18\x06 \x01(\tR\x04iSSN\x12\x15\n" +
	"\as_i_c_i\x18\a \x01(\tR\x04sICI\x12C\n" +
	"\x0ecatalog_number\x18\b \x01(\v2\x1c.ddex.mead.v11.CatalogNumberR\rcatalogNumber\x12C\n" +
	"\x0eproprietary_id\x18\t \x03(\v2\x1c.ddex.mead.v11.ProprietaryIdR\rproprietaryId\"|\n" +
	"\x18ResourceRelationshipType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"^\n" +
	"\rResourceTitle\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x127\n" +
	"\x18language_and_script_code\x18\x02 \x01(\tR\x15languageAndScriptCode\"o\n" +
	"\vSessionType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"y\n" +
	"\x15SubGenreCategoryValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xe1\x02\n" +
	"\x0eTextWithFormat\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x127\n" +
	"\x18language_and_script_code\x18\x02 \x01(\tR\x15languageAndScriptCode\x12_\n" +
	"\x19applicable_territory_code\x18\x03 \x01(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x17applicableTerritoryCode\x12\x1d\n" +
	"\n" +
	"is_default\x18\x04 \x01(\bR\tisDefault\x124\n" +
	"\x06format\x18\x05 \x01(\x0e2\x1c.ddex.mead.v11.TextCodecTypeR\x06format\x12\x1c\n" +
	"\tnamespace\x18\x06 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\a \x01(\tR\x10userDefinedValue\"\xe7\x02\n" +
	"\x14TextWithoutTerritory\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x127\n" +
	"\x18language_and_script_code\x18\x02 \x01(\tR\x15languageAndScriptCode\x12_\n" +
	"\x19applicable_territory_code\x18\x03 \x01(\v2#.ddex.mead.v11.CurrentTerritoryCodeR\x17applicableTerritoryCode\x12\x1d\n" +
	"\n" +
	"is_default\x18\x04 \x01(\bR\tisDefault\x124\n" +
	"\x06format\x18\x05 \x01(\x0e2\x1c.ddex.mead.v11.TextCodecTypeR\x06format\x12\x1c\n" +
	"\tnamespace\x18\x06 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\a \x01(\tR\x10userDefinedValue\"e\n" +
	"\tTitleText\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12B\n" +
	"\rpronunciation\x18\x02 \x03(\v2\x1c.ddex.mead.v11.PronunciationR\rpronunciation\"\xc6\x02\n" +
	"\x16TitleWithPronunciation\x127\n" +
	"\n" +
	"title_text\x18\x01 \x01(\v2\x18.ddex.mead.v11.TitleTextR\ttitleText\x125\n" +
	"\tsub_title\x18\x02 \x01(\v2\x18.ddex.mead.v11.TitleTextR\bsubTitle\x127\n" +
	"\x18language_and_script_code\x18\x03 \x01(\tR\x15languageAndScriptCode\x127\n" +
	"\n" +
	"title_type\x18\x04 \x01(\x0e2\x18.ddex.mead.v11.TitleTypeR\ttitleType\x12\x1c\n" +
	"\tnamespace\x18\x05 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x06 \x01(\tR\x10userDefinedValue\"\xd7\x01\n" +
	"\x05Venue\x12\x1d\n" +
	"\n" +
	"venue_name\x18\x01 \x01(\tR\tvenueName\x12#\n" +
	"\rvenue_address\x18\x02 \x01(\tR\fvenueAddress\x12F\n" +
	"\x0eterritory_code\x18\x03 \x01(\v2\x1f.ddex.mead.v11.AllTerritoryCodeR\rterritoryCode\x12#\n" +
	"\rlocation_code\x18\x04 \x01(\tR\flocationCode\x12\x1d\n" +
	"\n" +
	"venue_room\x18\x05 \x01(\tR\tvenueRoom\"\xac\x01\n" +
	"\rVocalRegister\x12b\n" +
	"\x19metadata_source_reference\x18\x01 \x03(\v2&.ddex.mead.v11.MetadataSourceReferenceR\x17metadataSourceReference\x127\n" +
	"\x05value\x18\x02 \x01(\v2!.ddex.mead.v11.VocalRegisterValueR\x05value\"v\n" +
	"\x12VocalRegisterValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"\xcf\x01\n" +
	"\x04Work\x12\x15\n" +
	"\ai_s_w_c\x18\x01 \x01(\tR\x04iSWC\x12.\n" +
	"\x13proprietary_work_id\x18\x02 \x01(\tR\x11proprietaryWorkId\x127\n" +
	"\n" +
	"work_title\x18\x03 \x03(\v2\x18.ddex.mead.v11.WorkTitleR\tworkTitle\x12G\n" +
	"\x06writer\x18\x04 \x03(\v2/.ddex.mead.v11.PartyDescriptorWithPronunciationR\x06writer\"x\n" +
	"\x14WorkRelationshipType\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12,\n" +
	"\x12user_defined_value\x18\x03 \x01(\tR\x10userDefinedValue\"Z\n" +
	"\tWorkTitle\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x127\n" +
	"\x18language_and_script_code\x18\x02 \x01(\tR\x15languageAndScriptCode\"\x9d\x02\n" +
	"\x15EventDateWithoutFlags\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12%\n" +
	"\x0eis_approximate\x18\x02 \x01(\bR\risApproximate\x12[\n" +
	"\x19applicable_territory_code\x18\x03 \x01(\v2\x1f.ddex.mead.v11.AllTerritoryCodeR\x17applicableTerritoryCode\x121\n" +
	"\x14location_description\x18\x04 \x01(\tR\x13locationDescription\x127\n" +
	"\x18language_and_script_code\x18\x05 \x01(\tR\x15languageAndScriptCode\"N\n" +
	"\x06Timing\x12\x1f\n" +
	"\vstart_point\x18\x01 \x01(\tR\n" +
	"startPoint\x12#\n" +
	"\rduration_used\x18\x02 \x01(\tR\fdurationUsed*n\n" +
	"\x19AdditionalContributorRole\x12+\n" +
	"'ADDITIONAL_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x12$\n" +
	" ADDITIONAL_CONTRIBUTOR_ROLE_MIME\x10\x01*z\n" +
	"\x1bAdditionalRightsClaimStatus\x12.\n" +
	"*ADDITIONAL_RIGHTS_CLAIM_STATUS_UNSPECIFIED\x10\x00\x12+\n" +
	"'ADDITIONAL_RIGHTS_CLAIM_STATUS_ACCEPTED\x10\x01*\x8e\x03\n" +
	"\x13AdditionalTitleType\x12%\n" +
	"!ADDITIONAL_TITLE_TYPE_UNSPECIFIED\x10\x00\x12*\n" +
	"&ADDITIONAL_TITLE_TYPE_ALTERNATIVETITLE\x10\x01\x12%\n" +
	"!ADDITIONAL_TITLE_TYPE_FORMALTITLE\x10\x02\x12'\n" +
	"#ADDITIONAL_TITLE_TYPE_GROUPINGTITLE\x10\x03\x12*\n" +
	"&ADDITIONAL_TITLE_TYPE_MUSICALWORKTITLE\x10\x04\x12'\n" +
	"#ADDITIONAL_TITLE_TYPE_ORIGINALTITLE\x10\x05\x12)\n" +
	"%ADDITIONAL_TITLE_TYPE_TRANSLATEDTITLE\x10\x06\x12-\n" +
	")ADDITIONAL_TITLE_TYPE_TRANSLITERATEDTITLE\x10\a\x12%\n" +
	"!ADDITIONAL_TITLE_TYPE_USERDEFINED\x10\b*\xf8\x02\n" +
	"\x13AdditionalVideoType\x12%\n" +
	"!ADDITIONAL_VIDEO_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bADDITIONAL_VIDEO_TYPE_DRAMA\x10\x01\x12/\n" +
	"+ADDITIONAL_VIDEO_TYPE_DRAMATICOMUSICALVIDEO\x10\x02\x12-\n" +
	")ADDITIONAL_VIDEO_TYPE_INTERACTIVERESOURCE\x10\x03\x123\n" +
	"/ADDITIONAL_VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO\x10\x04\x126\n" +
	"2ADDITIONAL_VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO\x10\x05\x12%\n" +
	"!ADDITIONAL_VIDEO_TYPE_USERDEFINED\x10\x06\x12%\n" +
	"!ADDITIONAL_VIDEO_TYPE_WEBRESOURCE\x10\a*\xf8\x02\n" +
	"\x1fAdministratingRecordCompanyRole\x122\n" +
	".ADMINISTRATING_RECORD_COMPANY_ROLE_UNSPECIFIED\x10\x00\x12D\n" +
	"@ADMINISTRATING_RECORD_COMPANY_ROLE_DESIGNATEDDSRMESSAGERECIPIENT\x10\x01\x12:\n" +
	"6ADMINISTRATING_RECORD_COMPANY_ROLE_RIGHTSADMINISTRATOR\x10\x02\x12;\n" +
	"7ADMINISTRATING_RECORD_COMPANY_ROLE_ROYALTYADMINISTRATOR\x10\x03\x12.\n" +
	"*ADMINISTRATING_RECORD_COMPANY_ROLE_UNKNOWN\x10\x04\x122\n" +
	".ADMINISTRATING_RECORD_COMPANY_ROLE_USERDEFINED\x10\x05*\xf3\x01\n" +
	"\x0fAffiliationType\x12 \n" +
	"\x1cAFFILIATION_TYPE_UNSPECIFIED\x10\x00\x12*\n" +
	"&AFFILIATION_TYPE_MUSICLICENSINGCOMPANY\x10\x01\x12#\n" +
	"\x1fAFFILIATION_TYPE_MUSICPUBLISHER\x10\x02\x12'\n" +
	"#AFFILIATION_TYPE_MUSICRIGHTSSOCIETY\x10\x03\x12\"\n" +
	"\x1eAFFILIATION_TYPE_RECORDCOMPANY\x10\x04\x12 \n" +
	"\x1cAFFILIATION_TYPE_USERDEFINED\x10\x05*\xecG\n" +
	"\x13AllIsoTerritoryCode\x12&\n" +
	"\"ALL_ISO_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AD\x10\x01\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AE\x10\x02\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AF\x10\x03\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AG\x10\x04\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AI\x10\x05\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AL\x10\x06\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AM\x10\a\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AN\x10\b\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AO\x10\t\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AQ\x10\n" +
	"\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AR\x10\v\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AS\x10\f\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AT\x10\r\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AU\x10\x0e\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AW\x10\x0f\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AX\x10\x10\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_AZ\x10\x11\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BA\x10\x12\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BB\x10\x13\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BD\x10\x14\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BE\x10\x15\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BF\x10\x16\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BG\x10\x17\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BH\x10\x18\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BI\x10\x19\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BJ\x10\x1a\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BL\x10\x1b\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BM\x10\x1c\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BN\x10\x1d\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BO\x10\x1e\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BQ\x10\x1f\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BR\x10 \x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BS\x10!\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BT\x10\"\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BV\x10#\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BW\x10$\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BY\x10%\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_BZ\x10&\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CA\x10'\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CC\x10(\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CD\x10)\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CF\x10*\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CG\x10+\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CH\x10,\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CI\x10-\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CK\x10.\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CL\x10/\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CM\x100\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CN\x101\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CO\x102\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CR\x103\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CS\x104\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CU\x105\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CV\x106\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CW\x107\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CX\x108\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CY\x109\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_CZ\x10:\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_DE\x10;\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_DJ\x10<\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_DK\x10=\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_DM\x10>\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_DO\x10?\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_DZ\x10@\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_EC\x10A\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_EE\x10B\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_EG\x10C\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_EH\x10D\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_ER\x10E\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_ES\x10F\x12 \n" +
	"\x1cALL_ISO_TERRITORY_CODE_ES_CE\x10G\x12 \n" +
	"\x1cALL_ISO_TERRITORY_CODE_ES_CN\x10H\x12 \n" +
	"\x1cALL_ISO_TERRITORY_CODE_ES_ML\x10I\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_ET\x10J\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_FI\x10K\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_FJ\x10L\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_FK\x10M\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_FM\x10N\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_FO\x10O\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_FR\x10P\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GA\x10Q\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GB\x10R\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GD\x10S\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GE\x10T\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GF\x10U\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GG\x10V\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GH\x10W\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GI\x10X\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GL\x10Y\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GM\x10Z\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GN\x10[\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GP\x10\\\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GQ\x10]\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GR\x10^\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GS\x10_\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GT\x10`\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GU\x10a\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GW\x10b\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_GY\x10c\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_HK\x10d\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_HM\x10e\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_HN\x10f\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_HR\x10g\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_HT\x10h\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_HU\x10i\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_ID\x10j\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_IE\x10k\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_IL\x10l\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_IM\x10m\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_IN\x10n\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_IO\x10o\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_IQ\x10p\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_IR\x10q\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_IS\x10r\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_IT\x10s\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_JE\x10t\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_JM\x10u\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_JO\x10v\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_JP\x10w\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_KE\x10x\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_KG\x10y\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_KH\x10z\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_KI\x10{\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_KM\x10|\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_KN\x10}\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_KP\x10~\x12\x1d\n" +
	"\x19ALL_ISO_TERRITORY_CODE_KR\x10\x7f\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_KW\x10\x80\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_KY\x10\x81\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_KZ\x10\x82\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_LA\x10\x83\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_LB\x10\x84\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_LC\x10\x85\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_LI\x10\x86\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_LK\x10\x87\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_LR\x10\x88\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_LS\x10\x89\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_LT\x10\x8a\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_LU\x10\x8b\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_LV\x10\x8c\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_LY\x10\x8d\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MA\x10\x8e\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MC\x10\x8f\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MD\x10\x90\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_ME\x10\x91\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MF\x10\x92\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MG\x10\x93\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MH\x10\x94\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MK\x10\x95\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_ML\x10\x96\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MM\x10\x97\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MN\x10\x98\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MO\x10\x99\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MP\x10\x9a\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MQ\x10\x9b\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MR\x10\x9c\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MS\x10\x9d\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MT\x10\x9e\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MU\x10\x9f\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MV\x10\xa0\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MW\x10\xa1\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MX\x10\xa2\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MY\x10\xa3\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_MZ\x10\xa4\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NA\x10\xa5\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NC\x10\xa6\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NE\x10\xa7\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NF\x10\xa8\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NG\x10\xa9\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NI\x10\xaa\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NL\x10\xab\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NO\x10\xac\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NP\x10\xad\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NR\x10\xae\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NU\x10\xaf\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_NZ\x10\xb0\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_OM\x10\xb1\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PA\x10\xb2\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PE\x10\xb3\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PF\x10\xb4\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PG\x10\xb5\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PH\x10\xb6\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PK\x10\xb7\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PL\x10\xb8\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PM\x10\xb9\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PN\x10\xba\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PR\x10\xbb\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PS\x10\xbc\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PT\x10\xbd\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PW\x10\xbe\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_PY\x10\xbf\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_QA\x10\xc0\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_RE\x10\xc1\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_RO\x10\xc2\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_RS\x10\xc3\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_RU\x10\xc4\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_RW\x10\xc5\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SA\x10\xc6\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SB\x10\xc7\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SC\x10\xc8\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SD\x10\xc9\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SE\x10\xca\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SG\x10\xcb\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SH\x10\xcc\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SI\x10\xcd\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SJ\x10\xce\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SK\x10\xcf\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SL\x10\xd0\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SM\x10\xd1\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SN\x10\xd2\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SO\x10\xd3\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SR\x10\xd4\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SS\x10\xd5\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_ST\x10\xd6\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SV\x10\xd7\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SX\x10\xd8\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SY\x10\xd9\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_SZ\x10\xda\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TC\x10\xdb\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TD\x10\xdc\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TF\x10\xdd\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TG\x10\xde\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TH\x10\xdf\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TJ\x10\xe0\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TK\x10\xe1\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TL\x10\xe2\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TM\x10\xe3\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TN\x10\xe4\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TO\x10\xe5\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TR\x10\xe6\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TT\x10\xe7\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TV\x10\xe8\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TW\x10\xe9\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_TZ\x10\xea\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_UA\x10\xeb\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_UG\x10\xec\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_UM\x10\xed\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_US\x10\xee\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_UY\x10\xef\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_UZ\x10\xf0\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_VA\x10\xf1\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_VC\x10\xf2\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_VE\x10\xf3\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_VG\x10\xf4\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_VI\x10\xf5\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_VN\x10\xf6\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_VU\x10\xf7\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_WF\x10\xf8\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_WS\x10\xf9\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_YE\x10\xfa\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_YT\x10\xfb\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_ZA\x10\xfc\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_ZM\x10\xfd\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_ZW\x10\xfe\x01\x12\x1e\n" +
	"\x19ALL_ISO_TERRITORY_CODE_XK\x10\xff\x01\x12%\n" +
	" ALL_ISO_TERRITORY_CODE_WORLDWIDE\x10\x80\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_AIDJ\x10\x81\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_ANHH\x10\x82\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_BQAQ\x10\x83\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_BUMM\x10\x84\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_BYAA\x10\x85\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_CSHH\x10\x86\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_CSXX\x10\x87\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_CTKI\x10\x88\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_DDDE\x10\x89\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_DYBJ\x10\x8a\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_FQHH\x10\x8b\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_FXFR\x10\x8c\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_GEHH\x10\x8d\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_HVBF\x10\x8e\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_JTUM\x10\x8f\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_MIUM\x10\x90\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_NHVU\x10\x91\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_NQAQ\x10\x92\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_NTHH\x10\x93\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_PCHH\x10\x94\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_PUUM\x10\x95\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_PZPA\x10\x96\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_RHZW\x10\x97\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_SKIN\x10\x98\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_SUHH\x10\x99\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_TPTL\x10\x9a\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_VDVN\x10\x9b\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_WKUM\x10\x9c\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_YDYE\x10\x9d\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_YUCS\x10\x9e\x02\x12 \n" +
	"\x1bALL_ISO_TERRITORY_CODE_ZRCD\x10\x9f\x02*\xe2\xb0\x01\n" +
	"\x1bAllTerritoryCodeNoWorldwide\x12/\n" +
	"+ALL_TERRITORY_CODE_NO_WORLDWIDE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AD\x10\x01\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AE\x10\x02\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AF\x10\x03\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AG\x10\x04\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AI\x10\x05\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AL\x10\x06\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AM\x10\a\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AN\x10\b\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AO\x10\t\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AQ\x10\n" +
	"\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AR\x10\v\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AS\x10\f\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AT\x10\r\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AU\x10\x0e\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AW\x10\x0f\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AX\x10\x10\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_AZ\x10\x11\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BA\x10\x12\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BB\x10\x13\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BD\x10\x14\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BE\x10\x15\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BF\x10\x16\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BG\x10\x17\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BH\x10\x18\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BI\x10\x19\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BJ\x10\x1a\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BL\x10\x1b\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BM\x10\x1c\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BN\x10\x1d\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BO\x10\x1e\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BQ\x10\x1f\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BR\x10 \x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BS\x10!\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BT\x10\"\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BV\x10#\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BW\x10$\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BY\x10%\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_BZ\x10&\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CA\x10'\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CC\x10(\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CD\x10)\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CF\x10*\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CG\x10+\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CH\x10,\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CI\x10-\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CK\x10.\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CL\x10/\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CM\x100\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CN\x101\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CO\x102\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CR\x103\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CS\x104\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CU\x105\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CV\x106\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CW\x107\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CX\x108\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CY\x109\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_CZ\x10:\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_DE\x10;\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_DJ\x10<\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_DK\x10=\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_DM\x10>\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_DO\x10?\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_DZ\x10@\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_EC\x10A\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_EE\x10B\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_EG\x10C\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_EH\x10D\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_ER\x10E\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_ES\x10F\x12)\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_CE\x10G\x12)\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_CN\x10H\x12)\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_ES_ML\x10I\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_ET\x10J\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_FI\x10K\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_FJ\x10L\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_FK\x10M\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_FM\x10N\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_FO\x10O\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_FR\x10P\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GA\x10Q\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GB\x10R\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GD\x10S\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GE\x10T\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GF\x10U\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GG\x10V\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GH\x10W\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GI\x10X\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GL\x10Y\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GM\x10Z\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GN\x10[\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GP\x10\\\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GQ\x10]\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GR\x10^\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GS\x10_\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GT\x10`\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GU\x10a\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GW\x10b\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_GY\x10c\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_HK\x10d\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_HM\x10e\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_HN\x10f\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_HR\x10g\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_HT\x10h\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_HU\x10i\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_ID\x10j\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_IE\x10k\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_IL\x10l\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_IM\x10m\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_IN\x10n\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_IO\x10o\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_IQ\x10p\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_IR\x10q\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_IS\x10r\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_IT\x10s\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_JE\x10t\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_JM\x10u\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_JO\x10v\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_JP\x10w\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_KE\x10x\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_KG\x10y\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_KH\x10z\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_KI\x10{\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_KM\x10|\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_KN\x10}\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_KP\x10~\x12&\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_KR\x10\x7f\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_KW\x10\x80\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_KY\x10\x81\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_KZ\x10\x82\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_LA\x10\x83\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_LB\x10\x84\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_LC\x10\x85\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_LI\x10\x86\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_LK\x10\x87\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_LR\x10\x88\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_LS\x10\x89\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_LT\x10\x8a\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_LU\x10\x8b\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_LV\x10\x8c\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_LY\x10\x8d\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MA\x10\x8e\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MC\x10\x8f\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MD\x10\x90\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_ME\x10\x91\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MF\x10\x92\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MG\x10\x93\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MH\x10\x94\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MK\x10\x95\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_ML\x10\x96\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MM\x10\x97\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MN\x10\x98\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MO\x10\x99\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MP\x10\x9a\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MQ\x10\x9b\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MR\x10\x9c\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MS\x10\x9d\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MT\x10\x9e\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MU\x10\x9f\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MV\x10\xa0\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MW\x10\xa1\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MX\x10\xa2\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MY\x10\xa3\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_MZ\x10\xa4\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NA\x10\xa5\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NC\x10\xa6\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NE\x10\xa7\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NF\x10\xa8\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NG\x10\xa9\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NI\x10\xaa\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NL\x10\xab\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NO\x10\xac\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NP\x10\xad\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NR\x10\xae\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NU\x10\xaf\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_NZ\x10\xb0\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_OM\x10\xb1\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PA\x10\xb2\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PE\x10\xb3\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PF\x10\xb4\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PG\x10\xb5\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PH\x10\xb6\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PK\x10\xb7\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PL\x10\xb8\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PM\x10\xb9\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PN\x10\xba\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PR\x10\xbb\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PS\x10\xbc\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PT\x10\xbd\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PW\x10\xbe\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_PY\x10\xbf\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_QA\x10\xc0\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_RE\x10\xc1\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_RO\x10\xc2\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_RS\x10\xc3\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_RU\x10\xc4\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_RW\x10\xc5\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SA\x10\xc6\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SB\x10\xc7\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SC\x10\xc8\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SD\x10\xc9\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SE\x10\xca\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SG\x10\xcb\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SH\x10\xcc\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SI\x10\xcd\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SJ\x10\xce\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SK\x10\xcf\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SL\x10\xd0\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SM\x10\xd1\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SN\x10\xd2\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SO\x10\xd3\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SR\x10\xd4\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SS\x10\xd5\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_ST\x10\xd6\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SV\x10\xd7\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SX\x10\xd8\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SY\x10\xd9\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_SZ\x10\xda\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TC\x10\xdb\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TD\x10\xdc\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TF\x10\xdd\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TG\x10\xde\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TH\x10\xdf\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TJ\x10\xe0\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TK\x10\xe1\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TL\x10\xe2\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TM\x10\xe3\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TN\x10\xe4\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TO\x10\xe5\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TR\x10\xe6\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TT\x10\xe7\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TV\x10\xe8\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TW\x10\xe9\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_TZ\x10\xea\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_UA\x10\xeb\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_UG\x10\xec\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_UM\x10\xed\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_US\x10\xee\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_UY\x10\xef\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_UZ\x10\xf0\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_VA\x10\xf1\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_VC\x10\xf2\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_VE\x10\xf3\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_VG\x10\xf4\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_VI\x10\xf5\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_VN\x10\xf6\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_VU\x10\xf7\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_WF\x10\xf8\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_WS\x10\xf9\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_YE\x10\xfa\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_YT\x10\xfb\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_ZA\x10\xfc\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_ZM\x10\xfd\x01\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_ZW\x10\xfe\x01\x12(\n" +
	"#ALL_TERRITORY_CODE_NO_WORLDWIDE_E_4\x10\xff\x01\x12(\n" +
	"#ALL_TERRITORY_CODE_NO_WORLDWIDE_E_8\x10\x80\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_12\x10\x81\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_20\x10\x82\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_24\x10\x83\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_28\x10\x84\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_31\x10\x85\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_32\x10\x86\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_36\x10\x87\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_40\x10\x88\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_44\x10\x89\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_48\x10\x8a\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_50\x10\x8b\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_51\x10\x8c\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_52\x10\x8d\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_56\x10\x8e\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_64\x10\x8f\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_68\x10\x90\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_70\x10\x91\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_72\x10\x92\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_76\x10\x93\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_84\x10\x94\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_90\x10\x95\x02\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_E_96\x10\x96\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_100\x10\x97\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_104\x10\x98\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_108\x10\x99\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_112\x10\x9a\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_116\x10\x9b\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_120\x10\x9c\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_124\x10\x9d\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_132\x10\x9e\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_140\x10\x9f\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_144\x10\xa0\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_148\x10\xa1\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_152\x10\xa2\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_156\x10\xa3\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_158\x10\xa4\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_170\x10\xa5\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_174\x10\xa6\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_178\x10\xa7\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_180\x10\xa8\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_188\x10\xa9\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_191\x10\xaa\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_192\x10\xab\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_196\x10\xac\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_200\x10\xad\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_203\x10\xae\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_204\x10\xaf\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_208\x10\xb0\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_212\x10\xb1\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_214\x10\xb2\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_218\x10\xb3\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_222\x10\xb4\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_226\x10\xb5\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_230\x10\xb6\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_231\x10\xb7\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_232\x10\xb8\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_233\x10\xb9\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_242\x10\xba\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_246\x10\xbb\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_250\x10\xbc\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_258\x10\xbd\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_262\x10\xbe\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_266\x10\xbf\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_268\x10\xc0\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_270\x10\xc1\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_276\x10\xc2\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_278\x10\xc3\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_280\x10\xc4\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_288\x10\xc5\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_296\x10\xc6\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_300\x10\xc7\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_308\x10\xc8\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_320\x10\xc9\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_324\x10\xca\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_328\x10\xcb\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_332\x10\xcc\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_336\x10\xcd\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_340\x10\xce\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_344\x10\xcf\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_348\x10\xd0\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_352\x10\xd1\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_356\x10\xd2\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_360\x10\xd3\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_364\x10\xd4\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_368\x10\xd5\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_372\x10\xd6\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_376\x10\xd7\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_380\x10\xd8\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_384\x10\xd9\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_388\x10\xda\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_392\x10\xdb\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_398\x10\xdc\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_400\x10\xdd\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_404\x10\xde\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_408\x10\xdf\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_410\x10\xe0\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_414\x10\xe1\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_417\x10\xe2\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_418\x10\xe3\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_422\x10\xe4\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_426\x10\xe5\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_428\x10\xe6\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_430\x10\xe7\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_434\x10\xe8\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_438\x10\xe9\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_440\x10\xea\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_442\x10\xeb\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_446\x10\xec\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_450\x10\xed\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_454\x10\xee\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_458\x10\xef\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_462\x10\xf0\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_466\x10\xf1\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_470\x10\xf2\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_478\x10\xf3\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_480\x10\xf4\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_484\x10\xf5\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_492\x10\xf6\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_496\x10\xf7\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_498\x10\xf8\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_499\x10\xf9\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_504\x10\xfa\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_508\x10\xfb\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_512\x10\xfc\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_516\x10\xfd\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_520\x10\xfe\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_524\x10\xff\x02\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_528\x10\x80\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_540\x10\x81\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_548\x10\x82\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_554\x10\x83\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_558\x10\x84\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_562\x10\x85\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_566\x10\x86\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_578\x10\x87\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_583\x10\x88\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_584\x10\x89\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_585\x10\x8a\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_586\x10\x8b\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_591\x10\x8c\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_598\x10\x8d\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_600\x10\x8e\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_604\x10\x8f\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_608\x10\x90\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_616\x10\x91\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_620\x10\x92\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_624\x10\x93\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_626\x10\x94\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_630\x10\x95\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_634\x10\x96\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_642\x10\x97\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_643\x10\x98\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_646\x10\x99\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_659\x10\x9a\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_662\x10\x9b\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_670\x10\x9c\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_674\x10\x9d\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_678\x10\x9e\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_682\x10\x9f\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_686\x10\xa0\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_688\x10\xa1\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_690\x10\xa2\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_694\x10\xa3\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_702\x10\xa4\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_703\x10\xa5\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_704\x10\xa6\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_705\x10\xa7\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_706\x10\xa8\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_710\x10\xa9\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_716\x10\xaa\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_720\x10\xab\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_724\x10\xac\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_728\x10\xad\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_729\x10\xae\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_732\x10\xaf\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_736\x10\xb0\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_740\x10\xb1\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_748\x10\xb2\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_752\x10\xb3\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_756\x10\xb4\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_760\x10\xb5\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_762\x10\xb6\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_764\x10\xb7\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_768\x10\xb8\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_776\x10\xb9\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_780\x10\xba\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_784\x10\xbb\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_788\x10\xbc\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_792\x10\xbd\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_795\x10\xbe\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_798\x10\xbf\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_800\x10\xc0\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_804\x10\xc1\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_807\x10\xc2\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_810\x10\xc3\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_818\x10\xc4\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_826\x10\xc5\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_834\x10\xc6\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_840\x10\xc7\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_854\x10\xc8\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_858\x10\xc9\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_860\x10\xca\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_862\x10\xcb\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_882\x10\xcc\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_886\x10\xcd\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_887\x10\xce\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_890\x10\xcf\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_891\x10\xd0\x03\x12*\n" +
	"%ALL_TERRITORY_CODE_NO_WORLDWIDE_E_894\x10\xd1\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2100\x10\xd2\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2101\x10\xd3\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2102\x10\xd4\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2103\x10\xd5\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2104\x10\xd6\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2105\x10\xd7\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2106\x10\xd8\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2107\x10\xd9\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2108\x10\xda\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2109\x10\xdb\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2110\x10\xdc\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2111\x10\xdd\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2112\x10\xde\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2113\x10\xdf\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2114\x10\xe0\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2115\x10\xe1\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2116\x10\xe2\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2117\x10\xe3\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2118\x10\xe4\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2119\x10\xe5\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2120\x10\xe6\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2121\x10\xe7\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2122\x10\xe8\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2123\x10\xe9\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2124\x10\xea\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2125\x10\xeb\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2126\x10\xec\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2127\x10\xed\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2128\x10\xee\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2129\x10\xef\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2130\x10\xf0\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2131\x10\xf1\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2132\x10\xf2\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2133\x10\xf3\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2134\x10\xf4\x03\x12+\n" +
	"&ALL_TERRITORY_CODE_NO_WORLDWIDE_E_2136\x10\xf5\x03\x12'\n" +
	"\"ALL_TERRITORY_CODE_NO_WORLDWIDE_XK\x10\xf6\x03\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_AIDJ\x10\xf7\x03\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_ANHH\x10\xf8\x03\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_BQAQ\x10\xf9\x03\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_BUMM\x10\xfa\x03\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_BYAA\x10\xfb\x03\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_CSHH\x10\xfc\x03\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_CSXX\x10\xfd\x03\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_CTKI\x10\xfe\x03\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_DDDE\x10\xff\x03\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_DYBJ\x10\x80\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_FQHH\x10\x81\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_FXFR\x10\x82\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_GEHH\x10\x83\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_HVBF\x10\x84\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_JTUM\x10\x85\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_MIUM\x10\x86\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_NHVU\x10\x87\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_NQAQ\x10\x88\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_NTHH\x10\x89\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_PCHH\x10\x8a\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_PUUM\x10\x8b\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_PZPA\x10\x8c\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_RHZW\x10\x8d\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_SKIN\x10\x8e\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_SUHH\x10\x8f\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_TPTL\x10\x90\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_VDVN\x10\x91\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_WKUM\x10\x92\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_YDYE\x10\x93\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_YUCS\x10\x94\x04\x12)\n" +
	"$ALL_TERRITORY_CODE_NO_WORLDWIDE_ZRCD\x10\x95\x04*\x9b\x02\n" +
	"\x17ArAcknowledgementStatus\x12)\n" +
	"%AR_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED\x10\x00\x12*\n" +
	"&AR_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED\x10\x01\x12'\n" +
	"#AR_ACKNOWLEDGEMENT_STATUS_CONFIRMED\x10\x02\x12+\n" +
	"'AR_ACKNOWLEDGEMENT_STATUS_NOTSUSPICIOUS\x10\x03\x12(\n" +
	"$AR_ACKNOWLEDGEMENT_STATUS_SUSPICIOUS\x10\x04\x12)\n" +
	"%AR_ACKNOWLEDGEMENT_STATUS_USERDEFINED\x10\x05*\xb3\x03\n" +
	"\fArActionType\x12\x1e\n" +
	"\x1aAR_ACTION_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eAR_ACTION_TYPE_ACCOUNTDISABLED\x10\x01\x12!\n" +
	"\x1dAR_ACTION_TYPE_ACCOUNTREMOVED\x10\x02\x12\"\n" +
	"\x1eAR_ACTION_TYPE_ANOMALYADJUSTED\x10\x03\x12%\n" +
	"!AR_ACTION_TYPE_ANOMALYNOTREPORTED\x10\x04\x12\"\n" +
	"\x1eAR_ACTION_TYPE_ANOMALYREPORTED\x10\x05\x12\"\n" +
	"\x1eAR_ACTION_TYPE_CREATIONREMOVED\x10\x06\x12\x1a\n" +
	"\x16AR_ACTION_TYPE_MONITOR\x10\a\x12)\n" +
	"%AR_ACTION_TYPE_MONITORRELATEDCREATION\x10\b\x12\x1e\n" +
	"\x1aAR_ACTION_TYPE_PAYMENTMADE\x10\t\x12\"\n" +
	"\x1eAR_ACTION_TYPE_PAYMENTWITHHELD\x10\n" +
	"\x12\x1e\n" +
	"\x1aAR_ACTION_TYPE_USERDEFINED\x10\v*\xdc\x04\n" +
	"\n" +
	"ArtistRole\x12\x1b\n" +
	"\x17ARTIST_ROLE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16ARTIST_ROLE_ARTCOPYIST\x10\x01\x12\x1c\n" +
	"\x18ARTIST_ROLE_CALLIGRAPHER\x10\x02\x12\x1c\n" +
	"\x18ARTIST_ROLE_CARTOGRAPHER\x10\x03\x12\x1a\n" +
	"\x16ARTIST_ROLE_CARTOONIST\x10\x04\x12&\n" +
	"\"ARTIST_ROLE_COMPUTERGRAPHICCREATOR\x10\x05\x12\"\n" +
	"\x1eARTIST_ROLE_COMPUTERPROGRAMMER\x10\x06\x12\x1a\n" +
	"\x16ARTIST_ROLE_DELINEATOR\x10\a\x12\x18\n" +
	"\x14ARTIST_ROLE_DESIGNER\x10\b\x12\x1b\n" +
	"\x17ARTIST_ROLE_DRAUGHTSMAN\x10\t\x12\x1b\n" +
	"\x17ARTIST_ROLE_FACSIMILIST\x10\n" +
	"\x12\x1d\n" +
	"\x19ARTIST_ROLE_GRAPHICARTIST\x10\v\x12\x1b\n" +
	"\x17ARTIST_ROLE_ILLUSTRATOR\x10\f\x12\x1c\n" +
	"\x18ARTIST_ROLE_MUSICCOPYIST\x10\r\x12\x1c\n" +
	"\x18ARTIST_ROLE_NOTSPECIFIED\x10\x0e\x12\x17\n" +
	"\x13ARTIST_ROLE_PAINTER\x10\x0f\x12\x1c\n" +
	"\x18ARTIST_ROLE_PHOTOGRAPHER\x10\x10\x12\x1c\n" +
	"\x18ARTIST_ROLE_TYPEDESIGNER\x10\x11\x12\x17\n" +
	"\x13ARTIST_ROLE_UNKNOWN\x10\x12\x12\x1b\n" +
	"\x17ARTIST_ROLE_USERDEFINED\x10\x13*\x8a\b\n" +
	"\n" +
	"ArtistType\x12\x1b\n" +
	"\x17ARTIST_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dARTIST_TYPE_ACAPPELLAENSEMBLE\x10\x01\x12\"\n" +
	"\x1eARTIST_TYPE_BARBERSHOPENSEMBLE\x10\x02\x12\x17\n" +
	"\x13ARTIST_TYPE_BIGBAND\x10\x03\x12\x19\n" +
	"\x15ARTIST_TYPE_BRASSBAND\x10\x04\x12 \n" +
	"\x1cARTIST_TYPE_CHAMBERORCHESTRA\x10\x05\x12\x1c\n" +
	"\x18ARTIST_TYPE_COUNTRYGROUP\x10\x06\x12\x14\n" +
	"\x10ARTIST_TYPE_DUET\x10\a\x12\x1f\n" +
	"\x1bARTIST_TYPE_ELECTRONICGROUP\x10\b\x12 \n" +
	"\x1cARTIST_TYPE_FIFEANDDRUMCORPS\x10\t\x12\x19\n" +
	"\x15ARTIST_TYPE_FOLKGROUP\x10\n" +
	"\x12*\n" +
	"&ARTIST_TYPE_INSTRUMENTANDACCOMPANIMENT\x10\v\x12\x19\n" +
	"\x15ARTIST_TYPE_JAZZCOMBO\x10\f\x12\x1a\n" +
	"\x16ARTIST_TYPE_LATINGROUP\x10\r\x12\x1c\n" +
	"\x18ARTIST_TYPE_MARCHINGBAND\x10\x0e\x12\x1c\n" +
	"\x18ARTIST_TYPE_MARIACHIBAND\x10\x0f\x12\x19\n" +
	"\x15ARTIST_TYPE_ORCHESTRA\x10\x10\x12\x1d\n" +
	"\x19ARTIST_TYPE_PIANOENSEMBLE\x10\x11\x12\x19\n" +
	"\x15ARTIST_TYPE_PIANOTRIO\x10\x12\x12\x1c\n" +
	"\x18ARTIST_TYPE_PIANOQUARTET\x10\x13\x12\x1c\n" +
	"\x18ARTIST_TYPE_PIANOQUINTET\x10\x14\x12 \n" +
	"\x1cARTIST_TYPE_PIPEANDDRUMGROUP\x10\x15\x12\x17\n" +
	"\x13ARTIST_TYPE_POPBAND\x10\x16\x12\x1a\n" +
	"\x16ARTIST_TYPE_REGGAEBAND\x10\x17\x12\x18\n" +
	"\x14ARTIST_TYPE_ROCKBAND\x10\x18\x12\x1e\n" +
	"\x1aARTIST_TYPE_SOLOINSTRUMENT\x10\x19\x12\x19\n" +
	"\x15ARTIST_TYPE_SOLOVOICE\x10\x1a\x12\x1e\n" +
	"\x1aARTIST_TYPE_STRINGENSEMBLE\x10\x1b\x12\x1d\n" +
	"\x19ARTIST_TYPE_STRINGQUARTET\x10\x1c\x12\x1d\n" +
	"\x19ARTIST_TYPE_STRINGQUINTET\x10\x1d\x12\x14\n" +
	"\x10ARTIST_TYPE_TRIO\x10\x1e\x12\x1b\n" +
	"\x17ARTIST_TYPE_USERDEFINED\x10\x1f\x12%\n" +
	"!ARTIST_TYPE_VOICEANDACCOMPANIMENT\x10 \x12\x1c\n" +
	"\x18ARTIST_TYPE_WINDENSEMBLE\x10!*\x85\x01\n" +
	"\x0fAspectRatioType\x12!\n" +
	"\x1dASPECT_RATIO_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ASPECT_RATIO_TYPE_DAR\x10\x01\x12\x19\n" +
	"\x15ASPECT_RATIO_TYPE_PAR\x10\x02\x12\x19\n" +
	"\x15ASPECT_RATIO_TYPE_SAR\x10\x03*\x94\x02\n" +
	"\fAsserterType\x12\x1d\n" +
	"\x19ASSERTER_TYPE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fASSERTER_TYPE_COLLECTIONSOCIETY\x10\x01\x12%\n" +
	"!ASSERTER_TYPE_INTERESTEDPUBLISHER\x10\x02\x12'\n" +
	"#ASSERTER_TYPE_MUSICLICENSINGCOMPANY\x10\x03\x12\x1b\n" +
	"\x17ASSERTER_TYPE_PUBLISHER\x10\x04\x125\n" +
	"1ASSERTER_TYPE_RECORDCOMPANYWITHINTERESTINRESOURCE\x10\x05\x12\x1c\n" +
	"\x18ASSERTER_TYPE_THIRDPARTY\x10\x06*R\n" +
	"\x0fAssertionStatus\x12 \n" +
	"\x1cASSERTION_STATUS_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19ASSERTION_STATUS_VERIFIED\x10\x01*\x88\x06\n" +
	"\x0eAudioCodecType\x12 \n" +
	"\x1cAUDIO_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_AAC\x10\x01\x12\x19\n" +
	"\x15AUDIO_CODEC_TYPE_AC_4\x10\x02\x12(\n" +
	"$AUDIO_CODEC_TYPE_DOLBYATMOSMASTERADM\x10\x03\x12\x1a\n" +
	"\x16AUDIO_CODEC_TYPE_ADPCM\x10\x04\x12\x19\n" +
	"\x15AUDIO_CODEC_TYPE_ALAW\x10\x05\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_AMR\x10\x06\x12\x1b\n" +
	"\x17AUDIO_CODEC_TYPE_AMR_NB\x10\a\x12\x1b\n" +
	"\x17AUDIO_CODEC_TYPE_AMR_WB\x10\b\x12%\n" +
	"!AUDIO_CODEC_TYPE_DOLBYDIGITALPLUS\x10\t\x12\x19\n" +
	"\x15AUDIO_CODEC_TYPE_FLAC\x10\n" +
	"\x12\x17\n" +
	"\x13AUDIO_CODEC_TYPE_MP\x10\v\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_MP2\x10\f\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_MP3\x10\r\x12\x1e\n" +
	"\x1aAUDIO_CODEC_TYPE_MPEG_H_3D\x10\x0e\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_MQA\x10\x0f\x12\x1a\n" +
	"\x16AUDIO_CODEC_TYPE_MULAW\x10\x10\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_PCM\x10\x11\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_PDM\x10\x12\x12\x1a\n" +
	"\x16AUDIO_CODEC_TYPE_QCELP\x10\x13\x12\x1e\n" +
	"\x1aAUDIO_CODEC_TYPE_REALAUDIO\x10\x14\x12\x1e\n" +
	"\x1aAUDIO_CODEC_TYPE_SHOCKWAVE\x10\x15\x12\x1c\n" +
	"\x18AUDIO_CODEC_TYPE_UNKNOWN\x10\x16\x12 \n" +
	"\x1cAUDIO_CODEC_TYPE_USERDEFINED\x10\x17\x12\x1b\n" +
	"\x17AUDIO_CODEC_TYPE_VORBIS\x10\x18\x12\x18\n" +
	"\x14AUDIO_CODEC_TYPE_WMA\x10\x19*\xe2\x13\n" +
	"\x0fAudioVisualType\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eAUDIO_VISUAL_TYPE_ADULTCONTENT\x10\x01\x12(\n" +
	"$AUDIO_VISUAL_TYPE_ADVERTISEMENTVIDEO\x10\x02\x12$\n" +
	" AUDIO_VISUAL_TYPE_ADVICEMAGAZINE\x10\x03\x12\x1f\n" +
	"\x1bAUDIO_VISUAL_TYPE_ANIMATION\x10\x04\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_BALLETVIDEO\x10\x05\x12%\n" +
	"!AUDIO_VISUAL_TYPE_BEHINDTHESCENES\x10\x06\x12(\n" +
	"$AUDIO_VISUAL_TYPE_BLACKANDWHITEVIDEO\x10\a\x12#\n" +
	"\x1fAUDIO_VISUAL_TYPE_CHILDRENSFILM\x10\b\x12$\n" +
	" AUDIO_VISUAL_TYPE_COLORIZEDVIDEO\x10\t\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_COLUMNVIDEO\x10\n" +
	"\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_CONCERTCLIP\x10\v\x12\"\n" +
	"\x1eAUDIO_VISUAL_TYPE_CONCERTVIDEO\x10\f\x12#\n" +
	"\x1fAUDIO_VISUAL_TYPE_CORPORATEFILM\x10\r\x12\x1d\n" +
	"\x19AUDIO_VISUAL_TYPE_CREDITS\x10\x0e\x12+\n" +
	"'AUDIO_VISUAL_TYPE_DRAMATICOMUSICALVIDEO\x10\x0f\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_DOCUMENTARY\x10\x10\x12&\n" +
	"\"AUDIO_VISUAL_TYPE_EDUCATIONALVIDEO\x10\x11\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_FEATUREFILM\x10\x12\x12\x1d\n" +
	"\x19AUDIO_VISUAL_TYPE_FICTION\x10\x13\x12&\n" +
	"\"AUDIO_VISUAL_TYPE_INFOMERCIALVIDEO\x10\x14\x12)\n" +
	"%AUDIO_VISUAL_TYPE_INTERACTIVERESOURCE\x10\x15\x12\x1f\n" +
	"\x1bAUDIO_VISUAL_TYPE_INTERVIEW\x10\x16\x12\x1d\n" +
	"\x19AUDIO_VISUAL_TYPE_KARAOKE\x10\x17\x12$\n" +
	" AUDIO_VISUAL_TYPE_LIVEEVENTVIDEO\x10\x18\x12.\n" +
	"*AUDIO_VISUAL_TYPE_LONGFORMMUSICALWORKVIDEO\x10\x19\x121\n" +
	"-AUDIO_VISUAL_TYPE_LONGFORMNONMUSICALWORKVIDEO\x10\x1a\x12 \n" +
	"\x1cAUDIO_VISUAL_TYPE_LYRICVIDEO\x10\x1b\x12\x1e\n" +
	"\x1aAUDIO_VISUAL_TYPE_MAGAZINE\x10\x1c\x12\x1a\n" +
	"\x16AUDIO_VISUAL_TYPE_MENU\x10\x1d\x12 \n" +
	"\x1cAUDIO_VISUAL_TYPE_MINISERIES\x10\x1e\x12%\n" +
	"!AUDIO_VISUAL_TYPE_MULTIMEDIAVIDEO\x10\x1f\x12%\n" +
	"!AUDIO_VISUAL_TYPE_MUSICALWORKCLIP\x10 \x12/\n" +
	"+AUDIO_VISUAL_TYPE_MUSICALWORKREADALONGVIDEO\x10!\x12(\n" +
	"$AUDIO_VISUAL_TYPE_MUSICALWORKTRAILER\x10\"\x12-\n" +
	")AUDIO_VISUAL_TYPE_MUSICALWORKVIDEOCHAPTER\x10#\x12\x1a\n" +
	"\x16AUDIO_VISUAL_TYPE_NEWS\x10$\x12(\n" +
	"$AUDIO_VISUAL_TYPE_NONMUSICALWORKCLIP\x10%\x122\n" +
	".AUDIO_VISUAL_TYPE_NONMUSICALWORKREADALONGVIDEO\x10&\x12+\n" +
	"'AUDIO_VISUAL_TYPE_NONMUSICALWORKTRAILER\x10'\x120\n" +
	",AUDIO_VISUAL_TYPE_NONMUSICALWORKVIDEOCHAPTER\x10(\x12 \n" +
	"\x1cAUDIO_VISUAL_TYPE_OPERAVIDEO\x10)\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_PERFORMANCE\x10*\x12$\n" +
	" AUDIO_VISUAL_TYPE_READALONGVIDEO\x10+\x12(\n" +
	"$AUDIO_VISUAL_TYPE_REALITYTVSHOWVIDEO\x10,\x12\x1c\n" +
	"\x18AUDIO_VISUAL_TYPE_SERIES\x10-\x12\x1f\n" +
	"\x1bAUDIO_VISUAL_TYPE_SHORTFILM\x10.\x12/\n" +
	"+AUDIO_VISUAL_TYPE_SHORTFORMMUSICALWORKVIDEO\x10/\x122\n" +
	".AUDIO_VISUAL_TYPE_SHORTFORMNONMUSICALWORKVIDEO\x100\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_SILENTVIDEO\x101\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_SKETCHVIDEO\x102\x12 \n" +
	"\x1cAUDIO_VISUAL_TYPE_SOAPSITCOM\x103\x12\"\n" +
	"\x1eAUDIO_VISUAL_TYPE_SPECIALEVENT\x104\x12\"\n" +
	"\x1eAUDIO_VISUAL_TYPE_SPECIALTOPIC\x105\x12\x1b\n" +
	"\x17AUDIO_VISUAL_TYPE_SPORT\x106\x12)\n" +
	"%AUDIO_VISUAL_TYPE_THEATRICALWORKVIDEO\x107\x12\"\n" +
	"\x1eAUDIO_VISUAL_TYPE_TRAILERVIDEO\x108\x12\x1c\n" +
	"\x18AUDIO_VISUAL_TYPE_TVFILM\x109\x12\x1f\n" +
	"\x1bAUDIO_VISUAL_TYPE_TVPROGRAM\x10:\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_TVSHOWVIDEO\x10;\x12\x1d\n" +
	"\x19AUDIO_VISUAL_TYPE_UNKNOWN\x10<\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_USERDEFINED\x10=\x12\"\n" +
	"\x1eAUDIO_VISUAL_TYPE_VIDEOCHAPTER\x10>\x12\x1f\n" +
	"\x1bAUDIO_VISUAL_TYPE_VIDEOCLIP\x10?\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_VIDEOREPORT\x10@\x12\x1f\n" +
	"\x1bAUDIO_VISUAL_TYPE_VIDEOSTEM\x10A\x12!\n" +
	"\x1dAUDIO_VISUAL_TYPE_WEBRESOURCE\x10B*\xf3\x03\n" +
	"\x19BasisForRevenueAllocation\x12,\n" +
	"(BASIS_FOR_REVENUE_ALLOCATION_UNSPECIFIED\x10\x00\x12+\n" +
	"'BASIS_FOR_REVENUE_ALLOCATION_FULLCENSUS\x10\x01\x12-\n" +
	")BASIS_FOR_REVENUE_ALLOCATION_FULLUSAGELOG\x10\x02\x12,\n" +
	"(BASIS_FOR_REVENUE_ALLOCATION_MARKETSHARE\x10\x03\x12&\n" +
	"\"BASIS_FOR_REVENUE_ALLOCATION_PROXY\x10\x04\x12-\n" +
	")BASIS_FOR_REVENUE_ALLOCATION_SALESFIGURES\x10\x05\x12-\n" +
	")BASIS_FOR_REVENUE_ALLOCATION_SAMPLECENSUS\x10\x06\x12/\n" +
	"+BASIS_FOR_REVENUE_ALLOCATION_SAMPLEUSAGELOG\x10\a\x129\n" +
	"5BASIS_FOR_REVENUE_ALLOCATION_UNITMULTIPLIEDBYDURATION\x10\b\x12,\n" +
	"(BASIS_FOR_REVENUE_ALLOCATION_USERDEFINED\x10\t*q\n" +
	"\x0eBinaryDataType\x12 \n" +
	"\x1cBINARY_DATA_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19BINARY_DATA_TYPE_BINARY64\x10\x01\x12\x1e\n" +
	"\x1aBINARY_DATA_TYPE_HEXBINARY\x10\x02*]\n" +
	"\n" +
	"Blockchain\x12\x1a\n" +
	"\x16BLOCKCHAIN_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13BLOCKCHAIN_ETHEREUM\x10\x01\x12\x1a\n" +
	"\x16BLOCKCHAIN_USERDEFINED\x10\x02*\xee\x05\n" +
	"\"BusinessMusicalWorkContributorRole\x126\n" +
	"2BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x128\n" +
	"4BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER\x10\x01\x12<\n" +
	"8BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT\x10\x02\x12:\n" +
	"6BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER\x10\x03\x129\n" +
	"5BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER\x10\x04\x12=\n" +
	"9BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER\x10\x05\x12<\n" +
	"8BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER\x10\x06\x12>\n" +
	":BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER\x10\a\x127\n" +
	"3BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER\x10\b\x12?\n" +
	";BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER\x10\t\x122\n" +
	".BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN\x10\n" +
	"\x126\n" +
	"2BUSINESS_MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED\x10\v*\x99\x1d\n" +
	"\vCarrierType\x12\x1c\n" +
	"\x18CARRIER_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%CARRIER_TYPE_E_12INCHDISCOSINGLEREMIX\x10\x01\x12 \n" +
	"\x1cCARRIER_TYPE_E_33RPM10INCHLP\x10\x02\x12$\n" +
	" CARRIER_TYPE_E_33RPM10INCHSINGLE\x10\x03\x12 \n" +
	"\x1cCARRIER_TYPE_E_33RPM12INCHLP\x10\x04\x12(\n" +
	"$CARRIER_TYPE_E_33RPM12INCHLP20TRACKS\x10\x05\x12(\n" +
	"$CARRIER_TYPE_E_33RPM12INCHMAXISINGLE\x10\x06\x12$\n" +
	" CARRIER_TYPE_E_33RPM12INCHSINGLE\x10\a\x12\x1f\n" +
	"\x1bCARRIER_TYPE_E_33RPM7INCHLP\x10\b\x12#\n" +
	"\x1fCARRIER_TYPE_E_33RPM7INCHSINGLE\x10\t\x12 \n" +
	"\x1cCARRIER_TYPE_E_45RPM10INCHLP\x10\n" +
	"\x12(\n" +
	"$CARRIER_TYPE_E_45RPM10INCHMAXISINGLE\x10\v\x12$\n" +
	" CARRIER_TYPE_E_45RPM10INCHSINGLE\x10\f\x12 \n" +
	"\x1cCARRIER_TYPE_E_45RPM12INCHLP\x10\r\x12(\n" +
	"$CARRIER_TYPE_E_45RPM12INCHMAXISINGLE\x10\x0e\x12$\n" +
	" CARRIER_TYPE_E_45RPM12INCHSINGLE\x10\x0f\x12\x1f\n" +
	"\x1bCARRIER_TYPE_E_45RPM7INCHEP\x10\x10\x12#\n" +
	"\x1fCARRIER_TYPE_E_45RPM7INCHSINGLE\x10\x11\x12'\n" +
	"#CARRIER_TYPE_E_7INCHMAXISINGLEREMIX\x10\x12\x12\x17\n" +
	"\x13CARRIER_TYPE_BLURAY\x10\x13\x12\x13\n" +
	"\x0fCARRIER_TYPE_CD\x10\x14\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDCOMPILATION\x10\x15\x12\x15\n" +
	"\x11CARRIER_TYPE_CDEP\x10\x16\x12\x1d\n" +
	"\x19CARRIER_TYPE_CDEPENHANCED\x10\x17\x12#\n" +
	"\x1fCARRIER_TYPE_CDEXTRACOMPILATION\x10\x18\x12\x1a\n" +
	"\x16CARRIER_TYPE_CDEXTRAEP\x10\x19\x12\x1a\n" +
	"\x16CARRIER_TYPE_CDEXTRALP\x10\x1a\x12!\n" +
	"\x1dCARRIER_TYPE_CDEXTRAMAXIREMIX\x10\x1b\x12\"\n" +
	"\x1eCARRIER_TYPE_CDEXTRAMAXISINGLE\x10\x1c\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDEXTRASINGLE\x10\x1d\x12%\n" +
	"!CARRIER_TYPE_CDEXTRASINGLE2TRACKS\x10\x1e\x12\x15\n" +
	"\x11CARRIER_TYPE_CDLP\x10\x1f\x12\x1a\n" +
	"\x16CARRIER_TYPE_CDLP5INCH\x10 \x12\x1d\n" +
	"\x19CARRIER_TYPE_CDLPENHANCED\x10!\x12 \n" +
	"\x1cCARRIER_TYPE_CDLPPLUSCDVIDEO\x10\"\x12!\n" +
	"\x1dCARRIER_TYPE_CDLPPLUSDVDAUDIO\x10#\x12!\n" +
	"\x1dCARRIER_TYPE_CDLPPLUSDVDVIDEO\x10$\x12\x1c\n" +
	"\x18CARRIER_TYPE_CDLPPLUSWEB\x10%\x12\x1d\n" +
	"\x19CARRIER_TYPE_CDMAXISINGLE\x10&\x12\"\n" +
	"\x1eCARRIER_TYPE_CDMAXISINGLE3INCH\x10'\x12%\n" +
	"!CARRIER_TYPE_CDMAXISINGLEENHANCED\x10(\x12\"\n" +
	"\x1eCARRIER_TYPE_CDMAXISINGLEREMIX\x10)\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDPLUSCDBONUS\x10*\x12\x1f\n" +
	"\x1bCARRIER_TYPE_CDPLUSDVDBONUS\x10+\x12\x16\n" +
	"\x12CARRIER_TYPE_CDROM\x10,\x12\x19\n" +
	"\x15CARRIER_TYPE_CDSINGLE\x10-\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDSINGLE3INCH\x10.\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDSINGLE5INCH\x10/\x12\x1f\n" +
	"\x1bCARRIER_TYPE_CDVIDEO5LPNTSC\x100\x12\x1e\n" +
	"\x1aCARRIER_TYPE_CDVIDEO5LPPAL\x101\x12'\n" +
	"#CARRIER_TYPE_CDVIDEOAUDIOCOMPATIBLE\x102\x12\x1a\n" +
	"\x16CARRIER_TYPE_COMBIPACK\x103\x12\x14\n" +
	"\x10CARRIER_TYPE_DCC\x104\x12\x1f\n" +
	"\x1bCARRIER_TYPE_DCCCOMPILATION\x105\x12\x19\n" +
	"\x15CARRIER_TYPE_DUALDISC\x106\x12\x14\n" +
	"\x10CARRIER_TYPE_DVD\x107\x12\x19\n" +
	"\x15CARRIER_TYPE_DVDAUDIO\x108\x12$\n" +
	" CARRIER_TYPE_DVDAUDIO5MAXISINGLE\x109\x12\x1b\n" +
	"\x17CARRIER_TYPE_DVDAUDIOLP\x10:\x12\x1f\n" +
	"\x1bCARRIER_TYPE_DVDAUDIOSINGLE\x10;\x12\x17\n" +
	"\x13CARRIER_TYPE_DVDROM\x10<\x12\x1a\n" +
	"\x16CARRIER_TYPE_DVDSINGLE\x10=\x12\x19\n" +
	"\x15CARRIER_TYPE_DVDVIDEO\x10>\x12(\n" +
	"$CARRIER_TYPE_DVDVIDEO5MAXISINGLENTSC\x10?\x12'\n" +
	"#CARRIER_TYPE_DVDVIDEO5MAXISINGLEPAL\x10@\x12$\n" +
	" CARRIER_TYPE_DVDVIDEO5SINGLENTSC\x10A\x12#\n" +
	"\x1fCARRIER_TYPE_DVDVIDEO5SINGLEPAL\x10B\x12\x1f\n" +
	"\x1bCARRIER_TYPE_DVDVIDEOLPNTSC\x10C\x12\x1e\n" +
	"\x1aCARRIER_TYPE_DVDVIDEOLPPAL\x10D\x12-\n" +
	")CARRIER_TYPE_DVDVIDEOLPPLUSCDLPORCDSINGLE\x10E\x12\x18\n" +
	"\x14CARRIER_TYPE_FANPACK\x10F\x12\x1b\n" +
	"\x17CARRIER_TYPE_FILESYSTEM\x10G\x12\x1d\n" +
	"\x19CARRIER_TYPE_HDDVDVIDEOLP\x10H\x12&\n" +
	"\"CARRIER_TYPE_LASERDISCLP12INCHNTSC\x10I\x12(\n" +
	"$CARRIER_TYPE_LPCOMPIDENTICALTOCDCOMP\x10J\x12\x1e\n" +
	"\x1aCARRIER_TYPE_LPCOMPILATION\x10K\x12 \n" +
	"\x1cCARRIER_TYPE_LPIDENTICALTOCD\x10L\x12\x13\n" +
	"\x0fCARRIER_TYPE_MC\x10M\x12(\n" +
	"$CARRIER_TYPE_MCCOMPIDENTICALTOCDCOMP\x10N\x12\x1e\n" +
	"\x1aCARRIER_TYPE_MCCOMPILATION\x10O\x12\x1b\n" +
	"\x17CARRIER_TYPE_MCDOUBLELP\x10P\x12\x15\n" +
	"\x11CARRIER_TYPE_MCEP\x10Q\x12 \n" +
	"\x1cCARRIER_TYPE_MCIDENTICALTOCD\x10R\x12\x15\n" +
	"\x11CARRIER_TYPE_MCLP\x10S\x12\x1d\n" +
	"\x19CARRIER_TYPE_MCMAXISINGLE\x10T\x12\x18\n" +
	"\x14CARRIER_TYPE_MCREMIX\x10U\x12\x19\n" +
	"\x15CARRIER_TYPE_MCSINGLE\x10V\x12'\n" +
	"#CARRIER_TYPE_MCSINGLEIDENTICALTOCDS\x10W\x12\x1d\n" +
	"\x19CARRIER_TYPE_MEMORYDEVICE\x10X\x12$\n" +
	" CARRIER_TYPE_MEMORYDEVICEAUDIOLP\x10Y\x12\"\n" +
	"\x1eCARRIER_TYPE_MEMORYDEVICEMIXLP\x10Z\x12$\n" +
	" CARRIER_TYPE_MEMORYDEVICEVIDEOLP\x10[\x12\x1c\n" +
	"\x18CARRIER_TYPE_MERCHANDISE\x10\\\x12\x19\n" +
	"\x15CARRIER_TYPE_MINIDISC\x10]\x12$\n" +
	" CARRIER_TYPE_MINIDISCCOMPILATION\x10^\x12\x1b\n" +
	"\x17CARRIER_TYPE_MINIDISCEP\x10_\x12\"\n" +
	"\x1eCARRIER_TYPE_MINIDISCMAXIREMIX\x10`\x12)\n" +
	"%CARRIER_TYPE_MINIDISCSINGLEMAXISINGLE\x10a\x12\x1d\n" +
	"\x19CARRIER_TYPE_ONLINESYSTEM\x10b\x12\x1c\n" +
	"\x18CARRIER_TYPE_PREPAIDCARD\x10c\x12\x15\n" +
	"\x11CARRIER_TYPE_SACD\x10d\x12 \n" +
	"\x1cCARRIER_TYPE_SACDCOMPILATION\x10e\x12\x1d\n" +
	"\x19CARRIER_TYPE_SACDLPSTEREO\x10f\x12$\n" +
	" CARRIER_TYPE_SACDLPSTEREOCDAUDIO\x10g\x12%\n" +
	"!CARRIER_TYPE_SACDLPSTEREOSURROUND\x10h\x12,\n" +
	"(CARRIER_TYPE_SACDLPSTEREOSURROUNDCDAUDIO\x10i\x12&\n" +
	"\"CARRIER_TYPE_SACDLPSURROUNDCDAUDIO\x10j\x12!\n" +
	"\x1dCARRIER_TYPE_SACDPLUSDVDVIDEO\x10k\x12\x1c\n" +
	"\x18CARRIER_TYPE_USERDEFINED\x10l\x12\x18\n" +
	"\x14CARRIER_TYPE_VHSNTSC\x10m\x12\x17\n" +
	"\x13CARRIER_TYPE_VHSPAL\x10n\x12\x1c\n" +
	"\x18CARRIER_TYPE_VHSPLUSCDLP\x10o\x12\x19\n" +
	"\x15CARRIER_TYPE_VHSSECAM\x10p*\xcc\x01\n" +
	"$CatalogTransferAcknowledgementStatus\x127\n" +
	"3CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED\x10\x00\x121\n" +
	"-CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_ERROR\x10\x01\x128\n" +
	"4CATALOG_TRANSFER_ACKNOWLEDGEMENT_STATUS_FILERECEIVED\x10\x02*\xb2\x01\n" +
	"\x15CatalogTransferStatus\x12'\n" +
	"#CATALOG_TRANSFER_STATUS_UNSPECIFIED\x10\x00\x12%\n" +
	"!CATALOG_TRANSFER_STATUS_CONFIRMED\x10\x01\x12#\n" +
	"\x1fCATALOG_TRANSFER_STATUS_PENDING\x10\x02\x12$\n" +
	" CATALOG_TRANSFER_STATUS_REJECTED\x10\x03*\x9f\x01\n" +
	"\x13CatalogTransferType\x12%\n" +
	"!CATALOG_TRANSFER_TYPE_UNSPECIFIED\x10\x00\x121\n" +
	"-CATALOG_TRANSFER_TYPE_STANDARDCATALOGTRANSFER\x10\x01\x12.\n" +
	"*CATALOG_TRANSFER_TYPE_USSTATUTORYREVERSION\x10\x02*\xc2\x02\n" +
	"\x10CdProtectionType\x12\"\n" +
	"\x1eCD_PROTECTION_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19CD_PROTECTION_TYPE_CDS100\x10\x01\x12\x1d\n" +
	"\x19CD_PROTECTION_TYPE_CDS200\x10\x02\x12\x1d\n" +
	"\x19CD_PROTECTION_TYPE_CDS300\x10\x03\x12 \n" +
	"\x1cCD_PROTECTION_TYPE_KEY2AUDIO\x10\x04\x12\"\n" +
	"\x1eCD_PROTECTION_TYPE_MEDIAMAXCD3\x10\x05\x12#\n" +
	"\x1fCD_PROTECTION_TYPE_NOTPROTECTED\x10\x06\x12\x1e\n" +
	"\x1aCD_PROTECTION_TYPE_UNKNOWN\x10\a\x12\"\n" +
	"\x1eCD_PROTECTION_TYPE_USERDEFINED\x10\b*\x9c\x01\n" +
	"\rCharacterType\x12\x1e\n" +
	"\x1aCHARACTER_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cCHARACTER_TYPE_MAINCHARACTER\x10\x01\x12!\n" +
	"\x1dCHARACTER_TYPE_OTHERCHARACTER\x10\x02\x12&\n" +
	"\"CHARACTER_TYPE_SUPPORTINGCHARACTER\x10\x03*t\n" +
	"\n" +
	"ClaimBasis\x12\x1b\n" +
	"\x17CLAIM_BASIS_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12CLAIM_BASIS_COPCON\x10\x01\x12\x16\n" +
	"\x12CLAIM_BASIS_DIRECT\x10\x02\x12\x19\n" +
	"\x15CLAIM_BASIS_UNMATCHED\x10\x03*`\n" +
	"\vClaimImpact\x12\x1c\n" +
	"\x18CLAIM_IMPACT_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12CLAIM_IMPACT_CLAIM\x10\x01\x12\x1b\n" +
	"\x17CLAIM_IMPACT_CLAIMDELTA\x10\x02*\xb4\x02\n" +
	"\vClaimStatus\x12\x1c\n" +
	"\x18CLAIM_STATUS_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aCLAIM_STATUS_COMPLETECLAIM\x10\x01\x12#\n" +
	"\x1fCLAIM_STATUS_COMPLETEUNDERCLAIM\x10\x02\x12 \n" +
	"\x1cCLAIM_STATUS_INCOMPLETECLAIM\x10\x03\x12%\n" +
	"!CLAIM_STATUS_INCOMPLETEUNDERCLAIM\x10\x04\x12\x1f\n" +
	"\x1bCLAIM_STATUS_MAJOROVERCLAIM\x10\x05\x12\x1f\n" +
	"\x1bCLAIM_STATUS_MINOROVERCLAIM\x10\x06\x12\x1a\n" +
	"\x16CLAIM_STATUS_OVERCLAIM\x10\a\x12\x1b\n" +
	"\x17CLAIM_STATUS_UNDERCLAIM\x10\b*\xb9\x04\n" +
	"\x0fClassifiedGenre\x12 \n" +
	"\x1cCLASSIFIED_GENRE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CLASSIFIED_GENRE_BLUES\x10\x01\x12#\n" +
	"\x1fCLASSIFIED_GENRE_CLASSICALMUSIC\x10\x02\x12!\n" +
	"\x1dCLASSIFIED_GENRE_COUNTRYMUSIC\x10\x03\x12$\n" +
	" CLASSIFIED_GENRE_ELECTRONICMUSIC\x10\x04\x12\x19\n" +
	"\x15CLASSIFIED_GENRE_FOLK\x10\x05\x12\x1b\n" +
	"\x17CLASSIFIED_GENRE_GOSPEL\x10\x06\x12\x1b\n" +
	"\x17CLASSIFIED_GENRE_HIPHOP\x10\a\x12\x19\n" +
	"\x15CLASSIFIED_GENRE_JAZZ\x10\b\x12\x1a\n" +
	"\x16CLASSIFIED_GENRE_LATIN\x10\t\x12\x18\n" +
	"\x14CLASSIFIED_GENRE_POP\x10\n" +
	"\x12\x1a\n" +
	"\x16CLASSIFIED_GENRE_R_N_B\x10\v\x12\x1b\n" +
	"\x17CLASSIFIED_GENRE_REGGAE\x10\f\x12\x19\n" +
	"\x15CLASSIFIED_GENRE_ROCK\x10\r\x12\x1b\n" +
	"\x17CLASSIFIED_GENRE_SPOKEN\x10\x0e\x12 \n" +
	"\x1cCLASSIFIED_GENRE_TRADITIONAL\x10\x0f\x12 \n" +
	"\x1cCLASSIFIED_GENRE_USERDEFINED\x10\x10\x12\x1f\n" +
	"\x1bCLASSIFIED_GENRE_WORLDMUSIC\x10\x11*u\n" +
	"\bClipType\x12\x19\n" +
	"\x15CLIP_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11CLIP_TYPE_PREVIEW\x10\x01\x12\x1c\n" +
	"\x18CLIP_TYPE_STANDALONECLIP\x10\x02\x12\x19\n" +
	"\x15CLIP_TYPE_USERDEFINED\x10\x03*Z\n" +
	"\n" +
	"CodingType\x12\x1b\n" +
	"\x17CODING_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14CODING_TYPE_LOSSLESS\x10\x01\x12\x15\n" +
	"\x11CODING_TYPE_LOSSY\x10\x02*\x97\x01\n" +
	"\x15CollectionMandateType\x12'\n" +
	"#COLLECTION_MANDATE_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!COLLECTION_MANDATE_TYPE_PERFORMER\x10\x01\x12.\n" +
	"*COLLECTION_MANDATE_TYPE_RIGHTSORGANIZATION\x10\x02*\xf6\x03\n" +
	"\x13CommercialModelType\x12%\n" +
	"!COMMERCIAL_MODEL_TYPE_UNSPECIFIED\x10\x00\x125\n" +
	"1COMMERCIAL_MODEL_TYPE_ADVERTISEMENTSUPPORTEDMODEL\x10\x01\x12'\n" +
	"#COMMERCIAL_MODEL_TYPE_ASPERCONTRACT\x10\x02\x12(\n" +
	"$COMMERCIAL_MODEL_TYPE_DEVICEFEEMODEL\x10\x03\x12+\n" +
	"'COMMERCIAL_MODEL_TYPE_FREEOFCHARGEMODEL\x10\x04\x12)\n" +
	"%COMMERCIAL_MODEL_TYPE_PAYASYOUGOMODEL\x10\x05\x123\n" +
	"/COMMERCIAL_MODEL_TYPE_PERFORMANCEROYALTIESMODEL\x10\x06\x12*\n" +
	"&COMMERCIAL_MODEL_TYPE_RIGHTSCLAIMMODEL\x10\a\x12+\n" +
	"'COMMERCIAL_MODEL_TYPE_SUBSCRIPTIONMODEL\x10\b\x12!\n" +
	"\x1dCOMMERCIAL_MODEL_TYPE_UNKNOWN\x10\t\x12%\n" +
	"!COMMERCIAL_MODEL_TYPE_USERDEFINED\x10\n" +
	"*\xe3\x03\n" +
	"\x16CommercialModelTypeERN\x12+\n" +
	"'COMMERCIAL_MODEL_TYPE_E_R_N_UNSPECIFIED\x10\x00\x12;\n" +
	"7COMMERCIAL_MODEL_TYPE_E_R_N_ADVERTISEMENTSUPPORTEDMODEL\x10\x01\x12.\n" +
	"*COMMERCIAL_MODEL_TYPE_E_R_N_DEVICEFEEMODEL\x10\x02\x121\n" +
	"-COMMERCIAL_MODEL_TYPE_E_R_N_FREEOFCHARGEMODEL\x10\x03\x12/\n" +
	"+COMMERCIAL_MODEL_TYPE_E_R_N_PAYASYOUGOMODEL\x10\x04\x129\n" +
	"5COMMERCIAL_MODEL_TYPE_E_R_N_PERFORMANCEROYALTIESMODEL\x10\x05\x120\n" +
	",COMMERCIAL_MODEL_TYPE_E_R_N_RIGHTSCLAIMMODEL\x10\x06\x121\n" +
	"-COMMERCIAL_MODEL_TYPE_E_R_N_SUBSCRIPTIONMODEL\x10\a\x12+\n" +
	"'COMMERCIAL_MODEL_TYPE_E_R_N_USERDEFINED\x10\b*\xef\x01\n" +
	"\x17CommercialModelTypeMWNL\x12-\n" +
	")COMMERCIAL_MODEL_TYPE_M_W_N_L_UNSPECIFIED\x10\x00\x12=\n" +
	"9COMMERCIAL_MODEL_TYPE_M_W_N_L_ADVERTISEMENTSUPPORTEDMODEL\x10\x01\x121\n" +
	"-COMMERCIAL_MODEL_TYPE_M_W_N_L_PAYASYOUGOMODEL\x10\x02\x123\n" +
	"/COMMERCIAL_MODEL_TYPE_M_W_N_L_SUBSCRIPTIONMODEL\x10\x03*\xac\x01\n" +
	"\x0fCompilationType\x12 \n" +
	"\x1cCOMPILATION_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$COMPILATION_TYPE_INTERNALCOMPILATION\x10\x01\x12+\n" +
	"'COMPILATION_TYPE_NONINTERNALCOMPILATION\x10\x02\x12 \n" +
	"\x1cCOMPILATION_TYPE_NOTCOMPILED\x10\x03*\xc3\x01\n" +
	"\x18CompositeMusicalWorkType\x12+\n" +
	"'COMPOSITE_MUSICAL_WORK_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"COMPOSITE_MUSICAL_WORK_TYPE_MEDLEY\x10\x01\x12'\n" +
	"#COMPOSITE_MUSICAL_WORK_TYPE_NEITHER\x10\x02\x12)\n" +
	"%COMPOSITE_MUSICAL_WORK_TYPE_POTPOURRI\x10\x03*s\n" +
	"\x0fConfidentiality\x12\x1f\n" +
	"\x1bCONFIDENTIALITY_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aCONFIDENTIALITY_DONOTSHARE\x10\x01\x12\x1f\n" +
	"\x1bCONFIDENTIALITY_MAYBESHARED\x10\x02*\xfc\x01\n" +
	"\x1dConsumerEngagementAnomalyType\x120\n" +
	",CONSUMER_ENGAGEMENT_ANOMALY_TYPE_UNSPECIFIED\x10\x00\x12>\n" +
	":CONSUMER_ENGAGEMENT_ANOMALY_TYPE_CONSUMERENGAGEMENTANOMALY\x10\x01\x127\n" +
	"3CONSUMER_ENGAGEMENT_ANOMALY_TYPE_USERACCOUNTANOMALY\x10\x02\x120\n" +
	",CONSUMER_ENGAGEMENT_ANOMALY_TYPE_USERDEFINED\x10\x03*\xb2\x02\n" +
	"\x0fContainerFormat\x12 \n" +
	"\x1cCONTAINER_FORMAT_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15CONTAINER_FORMAT_AIFF\x10\x01\x12\x18\n" +
	"\x14CONTAINER_FORMAT_AVI\x10\x02\x12\x18\n" +
	"\x14CONTAINER_FORMAT_MP4\x10\x03\x12\x18\n" +
	"\x14CONTAINER_FORMAT_OGG\x10\x04\x12\x1e\n" +
	"\x1aCONTAINER_FORMAT_QUICKTIME\x10\x05\x12\x1e\n" +
	"\x1aCONTAINER_FORMAT_REALMEDIA\x10\x06\x12\x18\n" +
	"\x14CONTAINER_FORMAT_RMF\x10\a\x12 \n" +
	"\x1cCONTAINER_FORMAT_USERDEFINED\x10\b\x12\x18\n" +
	"\x14CONTAINER_FORMAT_WAV\x10\t*p\n" +
	"\n" +
	"ContainsAI\x12\x1c\n" +
	"\x18CONTAINS_A_I_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10CONTAINS_A_I_ALL\x10\x01\x12\x15\n" +
	"\x11CONTAINS_A_I_NONE\x10\x02\x12\x17\n" +
	"\x13CONTAINS_A_I_PARTLY\x10\x03*\xe1\x02\n" +
	"\x16ContributorClaimStatus\x12(\n" +
	"$CONTRIBUTOR_CLAIM_STATUS_UNSPECIFIED\x10\x00\x12%\n" +
	"!CONTRIBUTOR_CLAIM_STATUS_ACCEPTED\x10\x01\x12%\n" +
	"!CONTRIBUTOR_CLAIM_STATUS_CONFLICT\x10\x02\x12-\n" +
	")CONTRIBUTOR_CLAIM_STATUS_DATAINCONSISTENT\x10\x03\x12'\n" +
	"#CONTRIBUTOR_CLAIM_STATUS_NOCONFLICT\x10\x04\x12*\n" +
	"&CONTRIBUTOR_CLAIM_STATUS_PENDINGREVIEW\x10\x05\x12%\n" +
	"!CONTRIBUTOR_CLAIM_STATUS_REJECTED\x10\x06\x12$\n" +
	" CONTRIBUTOR_CLAIM_STATUS_REVOKED\x10\a*\xb3[\n" +
	"\x0fContributorRole\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18CONTRIBUTOR_ROLE_ADAPTER\x10\x01\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_ARCHITECT\x10\x02\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_ARRANGER\x10\x03\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_AUTHOR\x10\x04\x12'\n" +
	"#CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS\x10\x05\x12&\n" +
	"\"CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD\x10\x06\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_COMPILER\x10\a\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_COMPOSER\x10\b\x12%\n" +
	"!CONTRIBUTOR_ROLE_COMPOSERLYRICIST\x10\t\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_CONCEPTOR\x10\n" +
	"\x12\x1c\n" +
	"\x18CONTRIBUTOR_ROLE_CREATOR\x10\v\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_DIALOGUEAUTHOR\x10\f\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_DISSERTANT\x10\r\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_ENGRAVER\x10\x0e\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_ETCHER\x10\x0f\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_JOURNALIST\x10\x10\x12'\n" +
	"#CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT\x10\x11\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_LIBRETTIST\x10\x12\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_LITHOGRAPHER\x10\x13\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_LYRICIST\x10\x14\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_METALENGRAVER\x10\x15\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_NONLYRICAUTHOR\x10\x16\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_PLATEMAKER\x10\x17\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_PLAYWRIGHT\x10\x18\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_REPORTER\x10\x19\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_REVIEWER\x10\x1a\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_RUBRICATOR\x10\x1b\x12%\n" +
	"!CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR\x10\x1c\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_SCULPTOR\x10\x1d\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_SUBARRANGER\x10\x1e\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_SUBLYRICIST\x10\x1f\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_TRANSLATOR\x10 \x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_WOODCUTTER\x10!\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_WOODENGRAVER\x10\"\x121\n" +
	"-CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL\x10#\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_BOOKPUBLISHER\x10$\x12&\n" +
	"\"CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT\x10%\x12$\n" +
	" CONTRIBUTOR_ROLE_COPYRIGHTHOLDER\x10&\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_MUSICPUBLISHER\x10'\x12'\n" +
	"#CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER\x10(\x12&\n" +
	"\"CONTRIBUTOR_ROLE_ORIGINALPUBLISHER\x10)\x12(\n" +
	"$CONTRIBUTOR_ROLE_PERIODICALPUBLISHER\x10*\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_SUBPUBLISHER\x10+\x12)\n" +
	"%CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER\x10,\x12\x1c\n" +
	"\x18CONTRIBUTOR_ROLE_UNKNOWN\x10-\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_USERDEFINED\x10.\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_ACCOMPANYIST\x10/\x12\x1a\n" +
	"\x16CONTRIBUTOR_ROLE_ACTOR\x100\x12'\n" +
	"#CONTRIBUTOR_ROLE_ADDITIONALENGINEER\x101\x12-\n" +
	")CONTRIBUTOR_ROLE_ADDITIONALMIXINGENGINEER\x102\x12(\n" +
	"$CONTRIBUTOR_ROLE_ADDITIONALPERFORMER\x103\x122\n" +
	".CONTRIBUTOR_ROLE_ADDITIONALPROGRAMMINGENGINEER\x104\x12-\n" +
	")CONTRIBUTOR_ROLE_ADDITIONALSTUDIOPRODUCER\x105\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_ANCHORPERSON\x106\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_ANIMALTRAINER\x107\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_ANIMATOR\x108\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_ANNOTATOR\x109\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_ANNOUNCER\x10:\x12'\n" +
	"#CONTRIBUTOR_ROLE_AANDRADMINISTRATOR\x10;\x12%\n" +
	"!CONTRIBUTOR_ROLE_AANDRCOORDINATOR\x10<\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_ARMOURER\x10=\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_ARTCOPYIST\x10>\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_ARTDIRECTOR\x10?\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_ARTIST\x10@\x122\n" +
	".CONTRIBUTOR_ROLE_ARTISTBACKGROUNDVOCALENGINEER\x10A\x12(\n" +
	"$CONTRIBUTOR_ROLE_ARTISTVOCALENGINEER\x10B\x12.\n" +
	"*CONTRIBUTOR_ROLE_ARTISTVOCALSECONDENGINEER\x10C\x12,\n" +
	"(CONTRIBUTOR_ROLE_ASSISTANTCAMERAOPERATOR\x10D\x125\n" +
	"1CONTRIBUTOR_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN\x10E\x12'\n" +
	"#CONTRIBUTOR_ROLE_ASSISTANTCONDUCTOR\x10F\x12&\n" +
	"\"CONTRIBUTOR_ROLE_ASSISTANTDIRECTOR\x10G\x12$\n" +
	" CONTRIBUTOR_ROLE_ASSISTANTEDITOR\x10H\x12&\n" +
	"\"CONTRIBUTOR_ROLE_ASSISTANTENGINEER\x10I\x12&\n" +
	"\"CONTRIBUTOR_ROLE_ASSISTANTPRODUCER\x10J\x12*\n" +
	"&CONTRIBUTOR_ROLE_ASSISTANTVISUALEDITOR\x10K\x12(\n" +
	"$CONTRIBUTOR_ROLE_ASSOCIATEDPERFORMER\x10L\x12&\n" +
	"\"CONTRIBUTOR_ROLE_ASSOCIATEPRODUCER\x10M\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_AURALTRAINER\x10N\x12'\n" +
	"#CONTRIBUTOR_ROLE_BACKGROUNDVOCALIST\x10O\x12$\n" +
	" CONTRIBUTOR_ROLE_BALANCEENGINEER\x10P\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_BANDLEADER\x10Q\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_BINDER\x10R\x12$\n" +
	" CONTRIBUTOR_ROLE_BINDINGDESIGNER\x10S\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_BOOKDESIGNER\x10T\x12%\n" +
	"!CONTRIBUTOR_ROLE_BOOKJACKDESIGNER\x10U\x12&\n" +
	"\"CONTRIBUTOR_ROLE_BOOKPLATEDESIGNER\x10V\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_BOOKPRODUCER\x10W\x12'\n" +
	"#CONTRIBUTOR_ROLE_BROADCASTASSISTANT\x10X\x12(\n" +
	"$CONTRIBUTOR_ROLE_BROADCASTJOURNALIST\x10Y\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_CALLIGRAPHER\x10Z\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_CAMERAOPERATOR\x10[\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_CARPENTER\x10\\\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_CARTOGRAPHER\x10]\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_CARTOONIST\x10^\x12$\n" +
	" CONTRIBUTOR_ROLE_CASTINGDIRECTOR\x10_\x12\x1c\n" +
	"\x18CONTRIBUTOR_ROLE_CAUSEUR\x10`\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_CENSOR\x10a\x12,\n" +
	"(CONTRIBUTOR_ROLE_CHIEFLIGHTINGTECHNICIAN\x10b\x12\x1a\n" +
	"\x16CONTRIBUTOR_ROLE_CHOIR\x10c\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_CHOIRMEMBER\x10d\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_CHOREOGRAPHER\x10e\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_CHORUSMASTER\x10f\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_CIRCUSARTIST\x10g\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_CLAPPERLOADER\x10h\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_CLUBDJ\x10i\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_CODIRECTOR\x10j\x12(\n" +
	"$CONTRIBUTOR_ROLE_COEXECUTIVEPRODUCER\x10k\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_COLORSEPARATOR\x10l\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_COMEDIAN\x10m\x12\x1c\n" +
	"\x18CONTRIBUTOR_ROLE_COMIXER\x10n\x12%\n" +
	"!CONTRIBUTOR_ROLE_COMIXINGENGINEER\x10o\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_COMMENTATOR\x10p\x12-\n" +
	")CONTRIBUTOR_ROLE_COMMISSIONINGBROADCASTER\x10q\x12(\n" +
	"$CONTRIBUTOR_ROLE_COMPILATIONPRODUCER\x10r\x12+\n" +
	"'CONTRIBUTOR_ROLE_COMPUTERGRAPHICCREATOR\x10s\x12'\n" +
	"#CONTRIBUTOR_ROLE_COMPUTERPROGRAMMER\x10t\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_CONCERTMASTER\x10u\x12\x1e\n" +
	"\x1aCONTRIBUTOR_ROLE_CONDUCTOR\x10v\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_CONSULTANT\x10w\x12&\n" +
	"\"CONTRIBUTOR_ROLE_CONTINUITYCHECKER\x10x\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_CONTRACTOR\x10y\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_COPRODUCER\x10z\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_CORRESPONDENT\x10{\x12$\n" +
	" CONTRIBUTOR_ROLE_COSTUMEDESIGNER\x10|\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_COVERDESIGNER\x10}\x12\x1b\n" +
	"\x17CONTRIBUTOR_ROLE_DANCER\x10~\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_DELINEATOR\x10\x7f\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_DESIGNER\x10\x80\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_DIALOGUECOACH\x10\x81\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_DIALOGUEDIRECTOR\x10\x82\x01\x125\n" +
	"0CONTRIBUTOR_ROLE_DIGITALAUDIOWORKSTATIONENGINEER\x10\x83\x01\x12,\n" +
	"'CONTRIBUTOR_ROLE_DIGITALEDITINGENGINEER\x10\x84\x01\x122\n" +
	"-CONTRIBUTOR_ROLE_DIGITALEDITINGSECONDENGINEER\x10\x85\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_DIRECTOR\x10\x86\x01\x121\n" +
	",CONTRIBUTOR_ROLE_DIRECTSTREAMDIGITALENGINEER\x10\x87\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_DISTRIBUTIONCOMPANY\x10\x88\x01\x12\x18\n" +
	"\x13CONTRIBUTOR_ROLE_DJ\x10\x89\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_DRAUGHTSMAN\x10\x8a\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_DRESSER\x10\x8b\x01\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_DUBBER\x10\x8c\x01\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_EDITOR\x10\x8d\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_EDITORINCHIEF\x10\x8e\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_EDITOROFTHEDAY\x10\x8f\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_ENCODER\x10\x90\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_ENGINEER\x10\x91\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_ENSEMBLE\x10\x92\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_EXECUTIVEPRODUCER\x10\x93\x01\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_EXPERT\x10\x94\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_FACSIMILIST\x10\x95\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_FIGHTDIRECTOR\x10\x96\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_FILMDIRECTOR\x10\x97\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_FILMDISTRIBUTOR\x10\x98\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_FILMEDITOR\x10\x99\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_FILMPRODUCER\x10\x9a\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_FILMSOUNDENGINEER\x10\x9b\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_FLOORMANAGER\x10\x9c\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_FOCUSPULLER\x10\x9d\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_FOLEYARTIST\x10\x9e\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_FOLEYEDITOR\x10\x9f\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_FOLEYMIXER\x10\xa0\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_GRAPHICARTIST\x10\xa1\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_GRAPHICASSISTANT\x10\xa2\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_GRAPHICDESIGNER\x10\xa3\x01\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_GREENSMAN\x10\xa4\x01\x12\x1a\n" +
	"\x15CONTRIBUTOR_ROLE_GRIP\x10\xa5\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_GUESTCONDUCTOR\x10\xa6\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_GROUPMEMBER\x10\xa7\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_HAIRDRESSER\x10\xa8\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_ILLUSTRATOR\x10\xa9\x01\x120\n" +
	"+CONTRIBUTOR_ROLE_IMMERSIVEMASTERINGENGINEER\x10\xaa\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_IMMERSIVEMIXINGENGINEER\x10\xab\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_INITIALPRODUCER\x10\xac\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_INTERVIEWEDGUEST\x10\xad\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_INTERVIEWER\x10\xae\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_KEYCHARACTER\x10\xaf\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_KEYGRIP\x10\xb0\x01\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_KEYTALENT\x10\xb1\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_LEADMAN\x10\xb2\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_LEADPERFORMER\x10\xb3\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_LEADVOCALIST\x10\xb4\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_LIGHTINGDIRECTOR\x10\xb5\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_LIGHTINGTECHNICIAN\x10\xb6\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_LOCATIONMANAGER\x10\xb7\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_MAKEUPARTIST\x10\xb8\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_MANUFACTURER\x10\xb9\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_MASTERINGENGINEER\x10\xba\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_MASTERINGSECONDENGINEER\x10\xbb\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_MATTEARTIST\x10\xbc\x01\x12\x1a\n" +
	"\x15CONTRIBUTOR_ROLE_MIME\x10\xbd\x01\x12\x1b\n" +
	"\x16CONTRIBUTOR_ROLE_MIXER\x10\xbe\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_MIXINGENGINEER\x10\xbf\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_MIXINGSECONDENGINEER\x10\xc0\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_MUSICARRANGER\x10\xc1\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_MUSICCOPYIST\x10\xc2\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_MUSICDIRECTOR\x10\xc3\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_MUSICGROUP\x10\xc4\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_MUSICIAN\x10\xc5\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_NARRATOR\x10\xc6\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_NEWSPRODUCER\x10\xc7\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_NEWSREADER\x10\xc8\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_NOTSPECIFIED\x10\xc9\x01\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_ORCHESTRA\x10\xca\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_ORCHESTRAMEMBER\x10\xcb\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_ORIGINALARTIST\x10\xcc\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_OVERDUBENGINEER\x10\xcd\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_OVERDUBSECONDENGINEER\x10\xce\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_PAINTER\x10\xcf\x01\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_PERFORMER\x10\xd0\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_PHOTOGRAPHER\x10\xd1\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_PHOTOGRAPHYDIRECTOR\x10\xd2\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_PLAYBACKSINGER\x10\xd3\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_POSTPRODUCER\x10\xd4\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_PREPRODUCTION\x10\xd5\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_PREPRODUCTIONENGINEER\x10\xd6\x01\x121\n" +
	",CONTRIBUTOR_ROLE_PREPRODUCTIONSECONDENGINEER\x10\xd7\x01\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_PRESENTER\x10\xd8\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_PRIMARYMUSICIAN\x10\xd9\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_PRODUCTIONASSISTANT\x10\xda\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_PRODUCTIONCOMPANY\x10\xdb\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_PRODUCTIONCOORDINATOR\x10\xdc\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_PRODUCTIONDEPARTMENT\x10\xdd\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_PRODUCTIONMANAGER\x10\xde\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_PRODUCTIONSECRETARY\x10\xdf\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_PROJECTENGINEER\x10\xe0\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_PROGRAMMER\x10\xe1\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_PROGRAMMINGENGINEER\x10\xe2\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_PROGRAMPRODUCER\x10\xe3\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_PROPERTYMANAGER\x10\xe4\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_PUBLISHINGDIRECTOR\x10\xe5\x01\x12\x1f\n" +
	"\x1aCONTRIBUTOR_ROLE_PUPPETEER\x10\xe6\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_PYROTECHNICIAN\x10\xe7\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_RECORDINGENGINEER\x10\xe8\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_RECORDINGSECONDENGINEER\x10\xe9\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_REDACTOR\x10\xea\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_REISSUEPRODUCER\x10\xeb\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_REMIXEDARTIST\x10\xec\x01\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_REMIXER\x10\xed\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_REMIXINGENGINEER\x10\xee\x01\x12,\n" +
	"'CONTRIBUTOR_ROLE_REMIXINGSECONDENGINEER\x10\xef\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_REPETITEUR\x10\xf0\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_RESEARCHER\x10\xf1\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_RESEARCHTEAMHEAD\x10\xf2\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_RESEARCHTEAMMEMBER\x10\xf3\x01\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_RESTAGER\x10\xf4\x01\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_RIGGER\x10\xf5\x01\x12/\n" +
	"*CONTRIBUTOR_ROLE_RIGHTSCONTROLLERONPRODUCT\x10\xf6\x01\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_RUNNER\x10\xf7\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_SCENICOPERATIVE\x10\xf8\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_SCIENTIFICADVISOR\x10\xf9\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_SCRIPTSUPERVISOR\x10\xfa\x01\x123\n" +
	".CONTRIBUTOR_ROLE_SECONDASSISTANTCAMERAOPERATOR\x10\xfb\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_SECONDASSISTANTDIRECTOR\x10\xfc\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_SECONDCONDUCTOR\x10\xfd\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_SECONDENGINEER\x10\xfe\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_SECONDUNITDIRECTOR\x10\xff\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_SERIESPRODUCER\x10\x80\x02\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_SETDESIGNER\x10\x81\x02\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_SETDRESSER\x10\x82\x02\x12-\n" +
	"(CONTRIBUTOR_ROLE_SIGNLANGUAGEINTERPRETER\x10\x83\x02\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_SOLOIST\x10\x84\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_SOUNDDESIGNER\x10\x85\x02\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_SOUNDMIXER\x10\x86\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_SOUNDRECORDIST\x10\x87\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_SOUNDSUPERVISOR\x10\x88\x02\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_SPEAKER\x10\x89\x02\x12.\n" +
	")CONTRIBUTOR_ROLE_SPECIALEFFECTSTECHNICIAN\x10\x8a\x02\x12\x1d\n" +
	"\x18CONTRIBUTOR_ROLE_SPONSOR\x10\x8b\x02\x12,\n" +
	"'CONTRIBUTOR_ROLE_STAGEASSISTANTENGINEER\x10\x8c\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_STAGEDIRECTOR\x10\x8d\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_STAGEENGINEER\x10\x8e\x02\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_STORYTELLER\x10\x8f\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_STRINGENGINEER\x10\x90\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_STRINGPRODUCER\x10\x91\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_STRINGSDIRECTOR\x10\x92\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_STUDIOCONDUCTOR\x10\x93\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_STUDIOMUSICIAN\x10\x94\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_STUDIOPERSONNEL\x10\x95\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_STUDIOPRODUCER\x10\x96\x02\x12\x1c\n" +
	"\x17CONTRIBUTOR_ROLE_STUNTS\x10\x97\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_SUBTITLESEDITOR\x10\x98\x02\x12)\n" +
	"$CONTRIBUTOR_ROLE_SUBTITLESTRANSLATOR\x10\x99\x02\x12%\n" +
	" CONTRIBUTOR_ROLE_SUPPORTINGACTOR\x10\x9a\x02\x12,\n" +
	"'CONTRIBUTOR_ROLE_SURROUNDMIXINGENGINEER\x10\x9b\x02\x122\n" +
	"-CONTRIBUTOR_ROLE_SURROUNDMIXINGSECONDENGINEER\x10\x9c\x02\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_TAPEOPERATOR\x10\x9d\x02\x12'\n" +
	"\"CONTRIBUTOR_ROLE_TECHNICALDIRECTOR\x10\x9e\x02\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_TONMEISTER\x10\x9f\x02\x12&\n" +
	"!CONTRIBUTOR_ROLE_TRACKINGENGINEER\x10\xa0\x02\x12,\n" +
	"'CONTRIBUTOR_ROLE_TRACKINGSECONDENGINEER\x10\xa1\x02\x122\n" +
	"-CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESENGINEER\x10\xa2\x02\x128\n" +
	"3CONTRIBUTOR_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER\x10\xa3\x02\x12+\n" +
	"&CONTRIBUTOR_ROLE_TRANSPORTATIONMANAGER\x10\xa4\x02\x12/\n" +
	"*CONTRIBUTOR_ROLE_TREATMENT_PROGRAMPROPOSAL\x10\xa5\x02\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_TYPEDESIGNER\x10\xa6\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_VIDEODIRECTOR\x10\xa7\x02\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_VIDEOGRAPHER\x10\xa8\x02\x12*\n" +
	"%CONTRIBUTOR_ROLE_VIDEOMUSICALDIRECTOR\x10\xa9\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_VIDEOPRODUCER\x10\xaa\x02\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_VISIONMIXER\x10\xab\x02\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_VISUALEDITOR\x10\xac\x02\x12-\n" +
	"(CONTRIBUTOR_ROLE_VISUALEFFECTSTECHNICIAN\x10\xad\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_VOCALARRANGER\x10\xae\x02\x12*\n" +
	"%CONTRIBUTOR_ROLE_VOCALEDITINGENGINEER\x10\xaf\x02\x120\n" +
	"+CONTRIBUTOR_ROLE_VOCALEDITINGSECONDENGINEER\x10\xb0\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_VOCALENGINEER\x10\xb1\x02\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_VOCALIST\x10\xb2\x02\x12)\n" +
	"$CONTRIBUTOR_ROLE_VOCALSECONDENGINEER\x10\xb3\x02\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_VOCALPRODUCER\x10\xb4\x02\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_VOICEACTOR\x10\xb5\x02\x12\x1e\n" +
	"\x19CONTRIBUTOR_ROLE_WARDROBE\x10\xb6\x02*\xc3[\n" +
	"\x12ContributorRoleRDR\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_UNSPECIFIED\x10\x00\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_ACCOMPANYIST\x10\x01\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_R_D_R_ACTOR\x10\x02\x12-\n" +
	")CONTRIBUTOR_ROLE_R_D_R_ADDITIONALENGINEER\x10\x03\x123\n" +
	"/CONTRIBUTOR_ROLE_R_D_R_ADDITIONALMIXINGENGINEER\x10\x04\x12.\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_ADDITIONALPERFORMER\x10\x05\x128\n" +
	"4CONTRIBUTOR_ROLE_R_D_R_ADDITIONALPROGRAMMINGENGINEER\x10\x06\x123\n" +
	"/CONTRIBUTOR_ROLE_R_D_R_ADDITIONALSTUDIOPRODUCER\x10\a\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_ANCHORPERSON\x10\b\x12(\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_ANIMALTRAINER\x10\t\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_ANIMATOR\x10\n" +
	"\x12$\n" +
	" CONTRIBUTOR_ROLE_R_D_R_ANNOTATOR\x10\v\x12$\n" +
	" CONTRIBUTOR_ROLE_R_D_R_ANNOUNCER\x10\f\x12-\n" +
	")CONTRIBUTOR_ROLE_R_D_R_AANDRADMINISTRATOR\x10\r\x12+\n" +
	"'CONTRIBUTOR_ROLE_R_D_R_AANDRCOORDINATOR\x10\x0e\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_ARMOURER\x10\x0f\x12%\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_ARTCOPYIST\x10\x10\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_ARTDIRECTOR\x10\x11\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_R_D_R_ARTIST\x10\x12\x128\n" +
	"4CONTRIBUTOR_ROLE_R_D_R_ARTISTBACKGROUNDVOCALENGINEER\x10\x13\x12.\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_ARTISTVOCALENGINEER\x10\x14\x124\n" +
	"0CONTRIBUTOR_ROLE_R_D_R_ARTISTVOCALSECONDENGINEER\x10\x15\x122\n" +
	".CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCAMERAOPERATOR\x10\x16\x12;\n" +
	"7CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCHIEFLIGHTINGTECHNICIAN\x10\x17\x12-\n" +
	")CONTRIBUTOR_ROLE_R_D_R_ASSISTANTCONDUCTOR\x10\x18\x12,\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_ASSISTANTDIRECTOR\x10\x19\x12*\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_ASSISTANTEDITOR\x10\x1a\x12,\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_ASSISTANTENGINEER\x10\x1b\x12,\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_ASSISTANTPRODUCER\x10\x1c\x120\n" +
	",CONTRIBUTOR_ROLE_R_D_R_ASSISTANTVISUALEDITOR\x10\x1d\x12.\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_ASSOCIATEDPERFORMER\x10\x1e\x12,\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_ASSOCIATEPRODUCER\x10\x1f\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_AURALTRAINER\x10 \x12-\n" +
	")CONTRIBUTOR_ROLE_R_D_R_BACKGROUNDVOCALIST\x10!\x12*\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_BALANCEENGINEER\x10\"\x12%\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_BANDLEADER\x10#\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_R_D_R_BINDER\x10$\x12*\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_BINDINGDESIGNER\x10%\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_BOOKDESIGNER\x10&\x12+\n" +
	"'CONTRIBUTOR_ROLE_R_D_R_BOOKJACKDESIGNER\x10'\x12,\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_BOOKPLATEDESIGNER\x10(\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_BOOKPRODUCER\x10)\x12-\n" +
	")CONTRIBUTOR_ROLE_R_D_R_BROADCASTASSISTANT\x10*\x12.\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_BROADCASTJOURNALIST\x10+\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_CALLIGRAPHER\x10,\x12)\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_CAMERAOPERATOR\x10-\x12$\n" +
	" CONTRIBUTOR_ROLE_R_D_R_CARPENTER\x10.\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_CARTOGRAPHER\x10/\x12%\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_CARTOONIST\x100\x12*\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_CASTINGDIRECTOR\x101\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_CAUSEUR\x102\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_R_D_R_CENSOR\x103\x122\n" +
	".CONTRIBUTOR_ROLE_R_D_R_CHIEFLIGHTINGTECHNICIAN\x104\x12 \n" +
	"\x1cCONTRIBUTOR_ROLE_R_D_R_CHOIR\x105\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_CHOIRMEMBER\x106\x12(\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_CHOREOGRAPHER\x107\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_CHORUSMASTER\x108\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_CIRCUSARTIST\x109\x12(\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_CLAPPERLOADER\x10:\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_R_D_R_CLUBDJ\x10;\x12%\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_CODIRECTOR\x10<\x12.\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_COEXECUTIVEPRODUCER\x10=\x12)\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_COLORSEPARATOR\x10>\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_COMEDIAN\x10?\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_COMIXER\x10@\x12+\n" +
	"'CONTRIBUTOR_ROLE_R_D_R_COMIXINGENGINEER\x10A\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_COMMENTATOR\x10B\x123\n" +
	"/CONTRIBUTOR_ROLE_R_D_R_COMMISSIONINGBROADCASTER\x10C\x12.\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_COMPILATIONPRODUCER\x10D\x121\n" +
	"-CONTRIBUTOR_ROLE_R_D_R_COMPUTERGRAPHICCREATOR\x10E\x12-\n" +
	")CONTRIBUTOR_ROLE_R_D_R_COMPUTERPROGRAMMER\x10F\x12(\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_CONCERTMASTER\x10G\x12$\n" +
	" CONTRIBUTOR_ROLE_R_D_R_CONDUCTOR\x10H\x12%\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_CONSULTANT\x10I\x12,\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_CONTINUITYCHECKER\x10J\x12%\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_CONTRACTOR\x10K\x12%\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_COPRODUCER\x10L\x12(\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_CORRESPONDENT\x10M\x12*\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_COSTUMEDESIGNER\x10N\x12(\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_COVERDESIGNER\x10O\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_R_D_R_DANCER\x10P\x12%\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_DELINEATOR\x10Q\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_DESIGNER\x10R\x12(\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_DIALOGUECOACH\x10S\x12+\n" +
	"'CONTRIBUTOR_ROLE_R_D_R_DIALOGUEDIRECTOR\x10T\x12:\n" +
	"6CONTRIBUTOR_ROLE_R_D_R_DIGITALAUDIOWORKSTATIONENGINEER\x10U\x121\n" +
	"-CONTRIBUTOR_ROLE_R_D_R_DIGITALEDITINGENGINEER\x10V\x127\n" +
	"3CONTRIBUTOR_ROLE_R_D_R_DIGITALEDITINGSECONDENGINEER\x10W\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_DIRECTOR\x10X\x126\n" +
	"2CONTRIBUTOR_ROLE_R_D_R_DIRECTSTREAMDIGITALENGINEER\x10Y\x12.\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_DISTRIBUTIONCOMPANY\x10Z\x12\x1d\n" +
	"\x19CONTRIBUTOR_ROLE_R_D_R_DJ\x10[\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_DRAUGHTSMAN\x10\\\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_DRESSER\x10]\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_R_D_R_DUBBER\x10^\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_R_D_R_EDITOR\x10_\x12(\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_EDITORINCHIEF\x10`\x12)\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_EDITOROFTHEDAY\x10a\x12\"\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_ENCODER\x10b\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_ENGINEER\x10c\x12#\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_ENSEMBLE\x10d\x12,\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_EXECUTIVEPRODUCER\x10e\x12!\n" +
	"\x1dCONTRIBUTOR_ROLE_R_D_R_EXPERT\x10f\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_FACSIMILIST\x10g\x12(\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_FIGHTDIRECTOR\x10h\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_FILMDIRECTOR\x10i\x12*\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_FILMDISTRIBUTOR\x10j\x12%\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_FILMEDITOR\x10k\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_FILMPRODUCER\x10l\x12,\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_FILMSOUNDENGINEER\x10m\x12'\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_FLOORMANAGER\x10n\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_FOCUSPULLER\x10o\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_FOLEYARTIST\x10p\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_FOLEYEDITOR\x10q\x12%\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_FOLEYMIXER\x10r\x12(\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_GRAPHICARTIST\x10s\x12+\n" +
	"'CONTRIBUTOR_ROLE_R_D_R_GRAPHICASSISTANT\x10t\x12*\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_GRAPHICDESIGNER\x10u\x12$\n" +
	" CONTRIBUTOR_ROLE_R_D_R_GREENSMAN\x10v\x12\x1f\n" +
	"\x1bCONTRIBUTOR_ROLE_R_D_R_GRIP\x10w\x12)\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_GUESTCONDUCTOR\x10x\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_GROUPMEMBER\x10y\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_HAIRDRESSER\x10z\x12&\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_ILLUSTRATOR\x10{\x125\n" +
	"1CONTRIBUTOR_ROLE_R_D_R_IMMERSIVEMASTERINGENGINEER\x10|\x122\n" +
	".CONTRIBUTOR_ROLE_R_D_R_IMMERSIVEMIXINGENGINEER\x10}\x12*\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_INITIALPRODUCER\x10~\x12+\n" +
	"'CONTRIBUTOR_ROLE_R_D_R_INTERVIEWEDGUEST\x10\x7f\x12'\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_INTERVIEWER\x10\x80\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_KEYCHARACTER\x10\x81\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_KEYGRIP\x10\x82\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_R_D_R_KEYTALENT\x10\x83\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_LEADMAN\x10\x84\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_LEADPERFORMER\x10\x85\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_LEADVOCALIST\x10\x86\x01\x12,\n" +
	"'CONTRIBUTOR_ROLE_R_D_R_LIGHTINGDIRECTOR\x10\x87\x01\x12.\n" +
	")CONTRIBUTOR_ROLE_R_D_R_LIGHTINGTECHNICIAN\x10\x88\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_LOCATIONMANAGER\x10\x89\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_MAKEUPARTIST\x10\x8a\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_MANUFACTURER\x10\x8b\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_MASTERINGENGINEER\x10\x8c\x01\x123\n" +
	".CONTRIBUTOR_ROLE_R_D_R_MASTERINGSECONDENGINEER\x10\x8d\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_MATTEARTIST\x10\x8e\x01\x12 \n" +
	"\x1bCONTRIBUTOR_ROLE_R_D_R_MIME\x10\x8f\x01\x12!\n" +
	"\x1cCONTRIBUTOR_ROLE_R_D_R_MIXER\x10\x90\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_MIXINGENGINEER\x10\x91\x01\x120\n" +
	"+CONTRIBUTOR_ROLE_R_D_R_MIXINGSECONDENGINEER\x10\x92\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_MUSICARRANGER\x10\x93\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_MUSICCOPYIST\x10\x94\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_MUSICDIRECTOR\x10\x95\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_MUSICGROUP\x10\x96\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_MUSICIAN\x10\x97\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_NARRATOR\x10\x98\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_NEWSPRODUCER\x10\x99\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_NEWSREADER\x10\x9a\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_NOTSPECIFIED\x10\x9b\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_R_D_R_ORCHESTRA\x10\x9c\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_ORCHESTRAMEMBER\x10\x9d\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_ORIGINALARTIST\x10\x9e\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_OVERDUBENGINEER\x10\x9f\x01\x121\n" +
	",CONTRIBUTOR_ROLE_R_D_R_OVERDUBSECONDENGINEER\x10\xa0\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_PAINTER\x10\xa1\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_R_D_R_PERFORMER\x10\xa2\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_PHOTOGRAPHER\x10\xa3\x01\x12/\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_PHOTOGRAPHYDIRECTOR\x10\xa4\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_PLAYBACKSINGER\x10\xa5\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_POSTPRODUCER\x10\xa6\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTION\x10\xa7\x01\x121\n" +
	",CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTIONENGINEER\x10\xa8\x01\x127\n" +
	"2CONTRIBUTOR_ROLE_R_D_R_PREPRODUCTIONSECONDENGINEER\x10\xa9\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_R_D_R_PRESENTER\x10\xaa\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_PRIMARYMUSICIAN\x10\xab\x01\x12/\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONASSISTANT\x10\xac\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONCOMPANY\x10\xad\x01\x121\n" +
	",CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONCOORDINATOR\x10\xae\x01\x120\n" +
	"+CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONDEPARTMENT\x10\xaf\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONMANAGER\x10\xb0\x01\x12/\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_PRODUCTIONSECRETARY\x10\xb1\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_PROJECTENGINEER\x10\xb2\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_PROGRAMMER\x10\xb3\x01\x12/\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_PROGRAMMINGENGINEER\x10\xb4\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_PROGRAMPRODUCER\x10\xb5\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_PROPERTYMANAGER\x10\xb6\x01\x12.\n" +
	")CONTRIBUTOR_ROLE_R_D_R_PUBLISHINGDIRECTOR\x10\xb7\x01\x12%\n" +
	" CONTRIBUTOR_ROLE_R_D_R_PUPPETEER\x10\xb8\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_PYROTECHNICIAN\x10\xb9\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_RECORDINGENGINEER\x10\xba\x01\x123\n" +
	".CONTRIBUTOR_ROLE_R_D_R_RECORDINGSECONDENGINEER\x10\xbb\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_REDACTOR\x10\xbc\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_REISSUEPRODUCER\x10\xbd\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_REMIXEDARTIST\x10\xbe\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_REMIXER\x10\xbf\x01\x12,\n" +
	"'CONTRIBUTOR_ROLE_R_D_R_REMIXINGENGINEER\x10\xc0\x01\x122\n" +
	"-CONTRIBUTOR_ROLE_R_D_R_REMIXINGSECONDENGINEER\x10\xc1\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_REPETITEUR\x10\xc2\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_RESEARCHER\x10\xc3\x01\x12,\n" +
	"'CONTRIBUTOR_ROLE_R_D_R_RESEARCHTEAMHEAD\x10\xc4\x01\x12.\n" +
	")CONTRIBUTOR_ROLE_R_D_R_RESEARCHTEAMMEMBER\x10\xc5\x01\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_RESTAGER\x10\xc6\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_R_D_R_RIGGER\x10\xc7\x01\x125\n" +
	"0CONTRIBUTOR_ROLE_R_D_R_RIGHTSCONTROLLERONPRODUCT\x10\xc8\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_R_D_R_RUNNER\x10\xc9\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_SCENICOPERATIVE\x10\xca\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_SCIENTIFICADVISOR\x10\xcb\x01\x12,\n" +
	"'CONTRIBUTOR_ROLE_R_D_R_SCRIPTSUPERVISOR\x10\xcc\x01\x129\n" +
	"4CONTRIBUTOR_ROLE_R_D_R_SECONDASSISTANTCAMERAOPERATOR\x10\xcd\x01\x123\n" +
	".CONTRIBUTOR_ROLE_R_D_R_SECONDASSISTANTDIRECTOR\x10\xce\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_SECONDCONDUCTOR\x10\xcf\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_SECONDENGINEER\x10\xd0\x01\x12.\n" +
	")CONTRIBUTOR_ROLE_R_D_R_SECONDUNITDIRECTOR\x10\xd1\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_SERIESPRODUCER\x10\xd2\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_SETDESIGNER\x10\xd3\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_SETDRESSER\x10\xd4\x01\x123\n" +
	".CONTRIBUTOR_ROLE_R_D_R_SIGNLANGUAGEINTERPRETER\x10\xd5\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_SOLOIST\x10\xd6\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_SOUNDDESIGNER\x10\xd7\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_SOUNDMIXER\x10\xd8\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_SOUNDRECORDIST\x10\xd9\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_SOUNDSUPERVISOR\x10\xda\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_SPEAKER\x10\xdb\x01\x124\n" +
	"/CONTRIBUTOR_ROLE_R_D_R_SPECIALEFFECTSTECHNICIAN\x10\xdc\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_SPONSOR\x10\xdd\x01\x122\n" +
	"-CONTRIBUTOR_ROLE_R_D_R_STAGEASSISTANTENGINEER\x10\xde\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_STAGEDIRECTOR\x10\xdf\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_STAGEENGINEER\x10\xe0\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_STORYTELLER\x10\xe1\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_STRINGENGINEER\x10\xe2\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_STRINGPRODUCER\x10\xe3\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_STRINGSDIRECTOR\x10\xe4\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_STUDIOCONDUCTOR\x10\xe5\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_STUDIOMUSICIAN\x10\xe6\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_STUDIOPERSONNEL\x10\xe7\x01\x12*\n" +
	"%CONTRIBUTOR_ROLE_R_D_R_STUDIOPRODUCER\x10\xe8\x01\x12\"\n" +
	"\x1dCONTRIBUTOR_ROLE_R_D_R_STUNTS\x10\xe9\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_SUBTITLESEDITOR\x10\xea\x01\x12/\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_SUBTITLESTRANSLATOR\x10\xeb\x01\x12+\n" +
	"&CONTRIBUTOR_ROLE_R_D_R_SUPPORTINGACTOR\x10\xec\x01\x122\n" +
	"-CONTRIBUTOR_ROLE_R_D_R_SURROUNDMIXINGENGINEER\x10\xed\x01\x128\n" +
	"3CONTRIBUTOR_ROLE_R_D_R_SURROUNDMIXINGSECONDENGINEER\x10\xee\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_TAPEOPERATOR\x10\xef\x01\x12-\n" +
	"(CONTRIBUTOR_ROLE_R_D_R_TECHNICALDIRECTOR\x10\xf0\x01\x12&\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_TONMEISTER\x10\xf1\x01\x12,\n" +
	"'CONTRIBUTOR_ROLE_R_D_R_TRACKINGENGINEER\x10\xf2\x01\x122\n" +
	"-CONTRIBUTOR_ROLE_R_D_R_TRACKINGSECONDENGINEER\x10\xf3\x01\x128\n" +
	"3CONTRIBUTOR_ROLE_R_D_R_TRANSFERSANDSAFETIESENGINEER\x10\xf4\x01\x12>\n" +
	"9CONTRIBUTOR_ROLE_R_D_R_TRANSFERSANDSAFETIESSECONDENGINEER\x10\xf5\x01\x121\n" +
	",CONTRIBUTOR_ROLE_R_D_R_TRANSPORTATIONMANAGER\x10\xf6\x01\x125\n" +
	"0CONTRIBUTOR_ROLE_R_D_R_TREATMENT_PROGRAMPROPOSAL\x10\xf7\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_TYPEDESIGNER\x10\xf8\x01\x12#\n" +
	"\x1eCONTRIBUTOR_ROLE_R_D_R_UNKNOWN\x10\xf9\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_USERDEFINED\x10\xfa\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_VIDEODIRECTOR\x10\xfb\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_VIDEOGRAPHER\x10\xfc\x01\x120\n" +
	"+CONTRIBUTOR_ROLE_R_D_R_VIDEOMUSICALDIRECTOR\x10\xfd\x01\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_VIDEOPRODUCER\x10\xfe\x01\x12'\n" +
	"\"CONTRIBUTOR_ROLE_R_D_R_VISIONMIXER\x10\xff\x01\x12(\n" +
	"#CONTRIBUTOR_ROLE_R_D_R_VISUALEDITOR\x10\x80\x02\x123\n" +
	".CONTRIBUTOR_ROLE_R_D_R_VISUALEFFECTSTECHNICIAN\x10\x81\x02\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_VOCALARRANGER\x10\x82\x02\x120\n" +
	"+CONTRIBUTOR_ROLE_R_D_R_VOCALEDITINGENGINEER\x10\x83\x02\x126\n" +
	"1CONTRIBUTOR_ROLE_R_D_R_VOCALEDITINGSECONDENGINEER\x10\x84\x02\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_VOCALENGINEER\x10\x85\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_VOCALIST\x10\x86\x02\x12/\n" +
	"*CONTRIBUTOR_ROLE_R_D_R_VOCALSECONDENGINEER\x10\x87\x02\x12)\n" +
	"$CONTRIBUTOR_ROLE_R_D_R_VOCALPRODUCER\x10\x88\x02\x12&\n" +
	"!CONTRIBUTOR_ROLE_R_D_R_VOICEACTOR\x10\x89\x02\x12$\n" +
	"\x1fCONTRIBUTOR_ROLE_R_D_R_WARDROBE\x10\x8a\x02*\x83\x01\n" +
	"\fCreationType\x12\x1d\n" +
	"\x19CREATION_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19CREATION_TYPE_MUSICALWORK\x10\x01\x12\x19\n" +
	"\x15CREATION_TYPE_RELEASE\x10\x02\x12\x1a\n" +
	"\x16CREATION_TYPE_RESOURCE\x10\x03*\x87\x10\n" +
	"\"CreativeMusicalWorkContributorRole\x126\n" +
	"2CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x122\n" +
	".CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER\x10\x01\x124\n" +
	"0CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT\x10\x02\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER\x10\x03\x121\n" +
	"-CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR\x10\x04\x12=\n" +
	"9CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS\x10\x05\x12<\n" +
	"8CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD\x10\x06\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER\x10\a\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER\x10\b\x12;\n" +
	"7CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST\x10\t\x124\n" +
	"0CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR\x10\n" +
	"\x122\n" +
	".CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR\x10\v\x129\n" +
	"5CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR\x10\f\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT\x10\r\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER\x10\x0e\x121\n" +
	"-CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER\x10\x0f\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST\x10\x10\x12=\n" +
	"9CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT\x10\x11\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST\x10\x12\x127\n" +
	"3CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER\x10\x13\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST\x10\x14\x128\n" +
	"4CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER\x10\x15\x129\n" +
	"5CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR\x10\x16\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER\x10\x17\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT\x10\x18\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER\x10\x19\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER\x10\x1a\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR\x10\x1b\x12;\n" +
	"7CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR\x10\x1c\x123\n" +
	"/CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR\x10\x1d\x126\n" +
	"2CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER\x10\x1e\x126\n" +
	"2CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST\x10\x1f\x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR\x10 \x125\n" +
	"1CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER\x10!\x127\n" +
	"3CREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER\x10\"\x12G\n" +
	"CCREATIVE_MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL\x10#*\x9a\x01\n" +
	"\x14CtProposedActionType\x12'\n" +
	"#CT_PROPOSED_ACTION_TYPE_UNSPECIFIED\x10\x00\x121\n" +
	"-CT_PROPOSED_ACTION_TYPE_HANDLEOUTSIDEOFTHREAD\x10\x01\x12&\n" +
	"\"CT_PROPOSED_ACTION_TYPE_SENDUPDATE\x10\x02*\xc4\x01\n" +
	"\tCueOrigin\x12\x1a\n" +
	"\x16CUE_ORIGIN_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17CUE_ORIGIN_LIBRARYMUSIC\x10\x01\x12\x1f\n" +
	"\x1bCUE_ORIGIN_PREEXISTINGMUSIC\x10\x02\x12)\n" +
	"%CUE_ORIGIN_SPECIALLYCOMMISSIONEDMUSIC\x10\x03\x12\x16\n" +
	"\x12CUE_ORIGIN_UNKNOWN\x10\x04\x12\x1a\n" +
	"\x16CUE_ORIGIN_USERDEFINED\x10\x05*\xea\x01\n" +
	"\fCueSheetType\x12\x1e\n" +
	"\x1aCUE_SHEET_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eCUE_SHEET_TYPE_AVERAGECUESHEET\x10\x01\x12$\n" +
	" CUE_SHEET_TYPE_COMPOSITECUESHEET\x10\x02\x12#\n" +
	"\x1fCUE_SHEET_TYPE_STANDARDCUESHEET\x10\x03\x12%\n" +
	"!CUE_SHEET_TYPE_SUMMARISEDCUESHEET\x10\x04\x12$\n" +
	" CUE_SHEET_TYPE_SURROGATECUESHEET\x10\x05*\xda\x02\n" +
	"\n" +
	"CueUseType\x12\x1c\n" +
	"\x18CUE_USE_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CUE_USE_TYPE_AUDIOLOGO\x10\x01\x12\x1b\n" +
	"\x17CUE_USE_TYPE_BACKGROUND\x10\x02\x12\x17\n" +
	"\x13CUE_USE_TYPE_BUMPER\x10\x03\x12\x1e\n" +
	"\x1aCUE_USE_TYPE_ESSENTIALPART\x10\x04\x12\x1a\n" +
	"\x16CUE_USE_TYPE_FILMTHEME\x10\x05\x12,\n" +
	"(CUE_USE_TYPE_INDISTINGUISHABLEBACKGROUND\x10\x06\x12\x1e\n" +
	"\x1aCUE_USE_TYPE_ONSCREENMUSIC\x10\a\x12\x1c\n" +
	"\x18CUE_USE_TYPE_ROLLEDUPCUE\x10\b\x12\x16\n" +
	"\x12CUE_USE_TYPE_THEME\x10\t\x12\x1c\n" +
	"\x18CUE_USE_TYPE_USERDEFINED\x10\n" +
	"*\xed\x01\n" +
	"\x0eCueUseTypeMWDR\x12$\n" +
	" CUE_USE_TYPE_M_W_D_R_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eCUE_USE_TYPE_M_W_D_R_AUDIOLOGO\x10\x01\x12#\n" +
	"\x1fCUE_USE_TYPE_M_W_D_R_BACKGROUND\x10\x02\x12$\n" +
	" CUE_USE_TYPE_M_W_D_R_ROLLEDUPCUE\x10\x03\x12\x1e\n" +
	"\x1aCUE_USE_TYPE_M_W_D_R_THEME\x10\x04\x12&\n" +
	"\"CUE_USE_TYPE_M_W_D_R_ONSCREENMUSIC\x10\x05*\xde \n" +
	"\fCurrencyCode\x12\x1d\n" +
	"\x19CURRENCY_CODE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11CURRENCY_CODE_AED\x10\x01\x12\x15\n" +
	"\x11CURRENCY_CODE_AFN\x10\x02\x12\x15\n" +
	"\x11CURRENCY_CODE_ALL\x10\x03\x12\x15\n" +
	"\x11CURRENCY_CODE_AMD\x10\x04\x12\x15\n" +
	"\x11CURRENCY_CODE_AOA\x10\x05\x12\x15\n" +
	"\x11CURRENCY_CODE_ARS\x10\x06\x12\x15\n" +
	"\x11CURRENCY_CODE_AUD\x10\a\x12\x15\n" +
	"\x11CURRENCY_CODE_AWG\x10\b\x12\x15\n" +
	"\x11CURRENCY_CODE_AZN\x10\t\x12\x15\n" +
	"\x11CURRENCY_CODE_BAM\x10\n" +
	"\x12\x15\n" +
	"\x11CURRENCY_CODE_BBD\x10\v\x12\x15\n" +
	"\x11CURRENCY_CODE_BDT\x10\f\x12\x15\n" +
	"\x11CURRENCY_CODE_BGN\x10\r\x12\x15\n" +
	"\x11CURRENCY_CODE_BHD\x10\x0e\x12\x15\n" +
	"\x11CURRENCY_CODE_BIF\x10\x0f\x12\x15\n" +
	"\x11CURRENCY_CODE_BMD\x10\x10\x12\x15\n" +
	"\x11CURRENCY_CODE_BND\x10\x11\x12\x15\n" +
	"\x11CURRENCY_CODE_BOB\x10\x12\x12\x15\n" +
	"\x11CURRENCY_CODE_BOV\x10\x13\x12\x15\n" +
	"\x11CURRENCY_CODE_BRL\x10\x14\x12\x15\n" +
	"\x11CURRENCY_CODE_BSD\x10\x15\x12\x15\n" +
	"\x11CURRENCY_CODE_BTN\x10\x16\x12\x15\n" +
	"\x11CURRENCY_CODE_BWP\x10\x17\x12\x15\n" +
	"\x11CURRENCY_CODE_BYR\x10\x18\x12\x15\n" +
	"\x11CURRENCY_CODE_BZD\x10\x19\x12\x15\n" +
	"\x11CURRENCY_CODE_CAD\x10\x1a\x12\x15\n" +
	"\x11CURRENCY_CODE_CDF\x10\x1b\x12\x15\n" +
	"\x11CURRENCY_CODE_CHF\x10\x1c\x12\x15\n" +
	"\x11CURRENCY_CODE_CLF\x10\x1d\x12\x15\n" +
	"\x11CURRENCY_CODE_CLP\x10\x1e\x12\x15\n" +
	"\x11CURRENCY_CODE_CNY\x10\x1f\x12\x15\n" +
	"\x11CURRENCY_CODE_COP\x10 \x12\x15\n" +
	"\x11CURRENCY_CODE_COU\x10!\x12\x15\n" +
	"\x11CURRENCY_CODE_CRC\x10\"\x12\x15\n" +
	"\x11CURRENCY_CODE_CUP\x10#\x12\x15\n" +
	"\x11CURRENCY_CODE_CVE\x10$\x12\x15\n" +
	"\x11CURRENCY_CODE_CZK\x10%\x12\x15\n" +
	"\x11CURRENCY_CODE_DJF\x10&\x12\x15\n" +
	"\x11CURRENCY_CODE_DKK\x10'\x12\x15\n" +
	"\x11CURRENCY_CODE_DOP\x10(\x12\x15\n" +
	"\x11CURRENCY_CODE_DZD\x10)\x12\x15\n" +
	"\x11CURRENCY_CODE_EGP\x10*\x12\x15\n" +
	"\x11CURRENCY_CODE_ERN\x10+\x12\x15\n" +
	"\x11CURRENCY_CODE_ETB\x10,\x12\x15\n" +
	"\x11CURRENCY_CODE_EUR\x10-\x12\x15\n" +
	"\x11CURRENCY_CODE_FJD\x10.\x12\x15\n" +
	"\x11CURRENCY_CODE_FKP\x10/\x12\x15\n" +
	"\x11CURRENCY_CODE_GBP\x100\x12\x15\n" +
	"\x11CURRENCY_CODE_GEL\x101\x12\x15\n" +
	"\x11CURRENCY_CODE_GHS\x102\x12\x15\n" +
	"\x11CURRENCY_CODE_GIP\x103\x12\x15\n" +
	"\x11CURRENCY_CODE_GMD\x104\x12\x15\n" +
	"\x11CURRENCY_CODE_GNF\x105\x12\x15\n" +
	"\x11CURRENCY_CODE_GTQ\x106\x12\x15\n" +
	"\x11CURRENCY_CODE_GYD\x107\x12\x15\n" +
	"\x11CURRENCY_CODE_HKD\x108\x12\x15\n" +
	"\x11CURRENCY_CODE_HNL\x109\x12\x15\n" +
	"\x11CURRENCY_CODE_HTG\x10:\x12\x15\n" +
	"\x11CURRENCY_CODE_HUF\x10;\x12\x15\n" +
	"\x11CURRENCY_CODE_IDR\x10<\x12\x15\n" +
	"\x11CURRENCY_CODE_ILS\x10=\x12\x15\n" +
	"\x11CURRENCY_CODE_INR\x10>\x12\x15\n" +
	"\x11CURRENCY_CODE_IQD\x10?\x12\x15\n" +
	"\x11CURRENCY_CODE_IRR\x10@\x12\x15\n" +
	"\x11CURRENCY_CODE_ISK\x10A\x12\x15\n" +
	"\x11CURRENCY_CODE_JMD\x10B\x12\x15\n" +
	"\x11CURRENCY_CODE_JOD\x10C\x12\x15\n" +
	"\x11CURRENCY_CODE_JPY\x10D\x12\x15\n" +
	"\x11CURRENCY_CODE_KES\x10E\x12\x15\n" +
	"\x11CURRENCY_CODE_KGS\x10F\x12\x15\n" +
	"\x11CURRENCY_CODE_KHR\x10G\x12\x15\n" +
	"\x11CURRENCY_CODE_KMF\x10H\x12\x15\n" +
	"\x11CURRENCY_CODE_KPW\x10I\x12\x15\n" +
	"\x11CURRENCY_CODE_KRW\x10J\x12\x15\n" +
	"\x11CURRENCY_CODE_KWD\x10K\x12\x15\n" +
	"\x11CURRENCY_CODE_KYD\x10L\x12\x15\n" +
	"\x11CURRENCY_CODE_KZT\x10M\x12\x15\n" +
	"\x11CURRENCY_CODE_LAK\x10N\x12\x15\n" +
	"\x11CURRENCY_CODE_LBP\x10O\x12\x15\n" +
	"\x11CURRENCY_CODE_LKR\x10P\x12\x15\n" +
	"\x11CURRENCY_CODE_LRD\x10Q\x12\x15\n" +
	"\x11CURRENCY_CODE_LSL\x10R\x12\x15\n" +
	"\x11CURRENCY_CODE_LYD\x10S\x12\x15\n" +
	"\x11CURRENCY_CODE_MAD\x10T\x12\x15\n" +
	"\x11CURRENCY_CODE_MDL\x10U\x12\x15\n" +
	"\x11CURRENCY_CODE_MGA\x10V\x12\x15\n" +
	"\x11CURRENCY_CODE_MKD\x10W\x12\x15\n" +
	"\x11CURRENCY_CODE_MMK\x10X\x12\x15\n" +
	"\x11CURRENCY_CODE_MNT\x10Y\x12\x15\n" +
	"\x11CURRENCY_CODE_MOP\x10Z\x12\x15\n" +
	"\x11CURRENCY_CODE_MRU\x10[\x12\x15\n" +
	"\x11CURRENCY_CODE_MUR\x10\\\x12\x15\n" +
	"\x11CURRENCY_CODE_MVR\x10]\x12\x15\n" +
	"\x11CURRENCY_CODE_MWK\x10^\x12\x15\n" +
	"\x11CURRENCY_CODE_MXN\x10_\x12\x15\n" +
	"\x11CURRENCY_CODE_MXV\x10`\x12\x15\n" +
	"\x11CURRENCY_CODE_MYR\x10a\x12\x15\n" +
	"\x11CURRENCY_CODE_MZN\x10b\x12\x15\n" +
	"\x11CURRENCY_CODE_NAD\x10c\x12\x15\n" +
	"\x11CURRENCY_CODE_NGN\x10d\x12\x15\n" +
	"\x11CURRENCY_CODE_NIO\x10e\x12\x15\n" +
	"\x11CURRENCY_CODE_NOK\x10f\x12\x15\n" +
	"\x11CURRENCY_CODE_NPR\x10g\x12\x15\n" +
	"\x11CURRENCY_CODE_NZD\x10h\x12\x15\n" +
	"\x11CURRENCY_CODE_OMR\x10i\x12\x15\n" +
	"\x11CURRENCY_CODE_PAB\x10j\x12\x15\n" +
	"\x11CURRENCY_CODE_PEN\x10k\x12\x15\n" +
	"\x11CURRENCY_CODE_PGK\x10l\x12\x15\n" +
	"\x11CURRENCY_CODE_PHP\x10m\x12\x15\n" +
	"\x11CURRENCY_CODE_PKR\x10n\x12\x15\n" +
	"\x11CURRENCY_CODE_PLN\x10o\x12\x15\n" +
	"\x11CURRENCY_CODE_PYG\x10p\x12\x15\n" +
	"\x11CURRENCY_CODE_QAR\x10q\x12\x15\n" +
	"\x11CURRENCY_CODE_RON\x10r\x12\x15\n" +
	"\x11CURRENCY_CODE_RSD\x10s\x12\x15\n" +
	"\x11CURRENCY_CODE_RUB\x10t\x12\x15\n" +
	"\x11CURRENCY_CODE_RWF\x10u\x12\x15\n" +
	"\x11CURRENCY_CODE_SAR\x10v\x12\x15\n" +
	"\x11CURRENCY_CODE_SBD\x10w\x12\x15\n" +
	"\x11CURRENCY_CODE_SCR\x10x\x12\x15\n" +
	"\x11CURRENCY_CODE_SDG\x10y\x12\x15\n" +
	"\x11CURRENCY_CODE_SEK\x10z\x12\x15\n" +
	"\x11CURRENCY_CODE_SGD\x10{\x12\x15\n" +
	"\x11CURRENCY_CODE_SHP\x10|\x12\x15\n" +
	"\x11CURRENCY_CODE_SLE\x10}\x12\x15\n" +
	"\x11CURRENCY_CODE_SOS\x10~\x12\x15\n" +
	"\x11CURRENCY_CODE_SRD\x10\x7f\x12\x16\n" +
	"\x11CURRENCY_CODE_SSP\x10\x80\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_STN\x10\x81\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SVC\x10\x82\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SYP\x10\x83\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SZL\x10\x84\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_THB\x10\x85\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TJS\x10\x86\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TMT\x10\x87\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TND\x10\x88\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TOP\x10\x89\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TRY\x10\x8a\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TTD\x10\x8b\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TWD\x10\x8c\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_TZS\x10\x8d\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UAH\x10\x8e\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UGX\x10\x8f\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_USD\x10\x90\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UYI\x10\x91\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UYU\x10\x92\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_UZS\x10\x93\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VED\x10\x94\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VES\x10\x95\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VND\x10\x96\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VUV\x10\x97\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_WST\x10\x98\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XAD\x10\x99\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XAF\x10\x9a\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XCD\x10\x9b\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XCG\x10\x9c\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XOF\x10\x9d\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_XPF\x10\x9e\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_YER\x10\x9f\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ZAR\x10\xa0\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ZMW\x10\xa1\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ZWG\x10\xa2\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ANG\x10\xa3\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_CUC\x10\xa4\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_CYP\x10\xa5\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_EEK\x10\xa6\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_HRK\x10\xa7\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_LTL\x10\xa8\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_LVL\x10\xa9\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_MTL\x10\xaa\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_MRO\x10\xab\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ROL\x10\xac\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SIT\x10\xad\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SKK\x10\xae\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_SLL\x10\xaf\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_STD\x10\xb0\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_VEF\x10\xb1\x01\x12\x16\n" +
	"\x11CURRENCY_CODE_ZWL\x10\xb2\x01*\xb8\x0e\n" +
	"\x11DataCarrierFormat\x12#\n" +
	"\x1fDATA_CARRIER_FORMAT_UNSPECIFIED\x10\x00\x12$\n" +
	" DATA_CARRIER_FORMAT_AFORMATVIDEO\x10\x01\x12\x1c\n" +
	"\x18DATA_CARRIER_FORMAT_ADAT\x10\x02\x12#\n" +
	"\x1fDATA_CARRIER_FORMAT_ANALOGAUDIO\x10\x03\x12$\n" +
	" DATA_CARRIER_FORMAT_BFORMATVIDEO\x10\x04\x12\x1f\n" +
	"\x1bDATA_CARRIER_FORMAT_BETACAM\x10\x05\x12!\n" +
	"\x1dDATA_CARRIER_FORMAT_BETACAMSP\x10\x06\x12!\n" +
	"\x1dDATA_CARRIER_FORMAT_BETACAMSX\x10\a\x12\x1f\n" +
	"\x1bDATA_CARRIER_FORMAT_BETAMAX\x10\b\x12$\n" +
	" DATA_CARRIER_FORMAT_CFORMATVIDEO\x10\t\x12/\n" +
	"+DATA_CARRIER_FORMAT_COMPACTDISKDIGITALAUDIO\x10\n" +
	"\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D1DIGITALVIDEO\x10\v\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D2DIGITALVIDEO\x10\f\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D3DIGITALVIDEO\x10\r\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D4DIGITALVIDEO\x10\x0e\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D5DIGITALVIDEO\x10\x0f\x12&\n" +
	"\"DATA_CARRIER_FORMAT_D6DIGITALVIDEO\x10\x10\x12\x1c\n" +
	"\x18DATA_CARRIER_FORMAT_DTRS\x10\x11\x12\x1d\n" +
	"\x19DATA_CARRIER_FORMAT_DVCAM\x10\x12\x12\x1e\n" +
	"\x1aDATA_CARRIER_FORMAT_DVCPRO\x10\x13\x12)\n" +
	"%DATA_CARRIER_FORMAT_DVCPROPROGRESSIVE\x10\x14\x12 \n" +
	"\x1cDATA_CARRIER_FORMAT_DVCPRO50\x10\x15\x12 \n" +
	"\x1cDATA_CARRIER_FORMAT_DVCPROHD\x10\x16\x122\n" +
	".DATA_CARRIER_FORMAT_DIGITALAUDIOSTATIONARYHEAD\x10\x17\x12(\n" +
	"$DATA_CARRIER_FORMAT_DIGITALAUDIOTAPE\x10\x18\x125\n" +
	"1DATA_CARRIER_FORMAT_DIGITALCOMPONENTVIDEOCASSETTE\x10\x19\x12.\n" +
	"*DATA_CARRIER_FORMAT_DIGITALDATASTORAGETAPE\x10\x1a\x12+\n" +
	"'DATA_CARRIER_FORMAT_DIRECTSTREAMDIGITAL\x10\x1b\x12+\n" +
	"'DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE\x10\x1c\x121\n" +
	"-DATA_CARRIER_FORMAT_FILEALLOCATIONTABLE_32BIT\x10\x1d\x12.\n" +
	"*DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEM\x10\x1e\x122\n" +
	".DATA_CARRIER_FORMAT_HIERARCHICALFILESYSTEMPLUS\x10\x1f\x12\x1f\n" +
	"\x1bDATA_CARRIER_FORMAT_ISO9660\x10 \x12%\n" +
	"!DATA_CARRIER_FORMAT_JVCPCMDIGITAL\x10!\x12,\n" +
	"(DATA_CARRIER_FORMAT_LINEARTAPEFILESYSTEM\x10\"\x12\"\n" +
	"\x1eDATA_CARRIER_FORMAT_MASTERLINK\x10#\x12/\n" +
	"+DATA_CARRIER_FORMAT_NEWTECHNOLOGYFILESYSTEM\x10$\x12%\n" +
	"!DATA_CARRIER_FORMAT_NOTAPPLICABLE\x10%\x12\"\n" +
	"\x1eDATA_CARRIER_FORMAT_PCMDIGITAL\x10&\x12\x1f\n" +
	"\x1bDATA_CARRIER_FORMAT_PRODIGI\x10'\x12#\n" +
	"\x1fDATA_CARRIER_FORMAT_PROPRIETARY\x10(\x12\x1d\n" +
	"\x19DATA_CARRIER_FORMAT_RADAR\x10)\x12\x1f\n" +
	"\x1bDATA_CARRIER_FORMAT_RADARII\x10*\x12#\n" +
	"\x1fDATA_CARRIER_FORMAT_SONYPCM1630\x10+\x12%\n" +
	"!DATA_CARRIER_FORMAT_STREAMINGDATA\x10,\x126\n" +
	"2DATA_CARRIER_FORMAT_TRANSVERSETRACKQUADRAPLEXVIDEO\x10-*\x80j\n" +
	"\x0fDataCarrierType\x12!\n" +
	"\x1dDATA_CARRIER_TYPE_UNSPECIFIED\x10\x00\x129\n" +
	"5DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_10_5INCHREEL\x10\x01\x126\n" +
	"2DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_7INCHREEL\x10\x02\x12@\n" +
	"<DATA_CARRIER_TYPE_E_1INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\x03\x126\n" +
	"2DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_LARGEREEL\x10\x04\x127\n" +
	"3DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_MEDIUMREEL\x10\x05\x126\n" +
	"2DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_SMALLREEL\x10\x06\x12@\n" +
	"<DATA_CARRIER_TYPE_E_1INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE\x10\a\x12:\n" +
	"6DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_10_5INCHREEL\x10\b\x127\n" +
	"3DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_7INCHREEL\x10\t\x12A\n" +
	"=DATA_CARRIER_TYPE_E_1INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\n" +
	"\x12;\n" +
	"7DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_10_5INCHREEL\x10\v\x128\n" +
	"4DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_7INCHREEL\x10\f\x12B\n" +
	">DATA_CARRIER_TYPE_E_1_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\r\x12<\n" +
	"8DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_10_5INCHREEL\x10\x0e\x129\n" +
	"5DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_7INCHREEL\x10\x0f\x12C\n" +
	"?DATA_CARRIER_TYPE_E_1_2INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\x10\x12=\n" +
	"9DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_LARGECASSETTE\x10\x11\x12>\n" +
	":DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE\x10\x12\x12=\n" +
	"9DATA_CARRIER_TYPE_E_1_2INCHDIGITALVIDEOTAPE_SMALLCASSETTE\x10\x13\x12;\n" +
	"7DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_10_5INCHREEL\x10\x14\x128\n" +
	"4DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_7INCHREEL\x10\x15\x12B\n" +
	">DATA_CARRIER_TYPE_E_1_4INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\x16\x12<\n" +
	"8DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_10_5INCHREEL\x10\x17\x129\n" +
	"5DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_7INCHREEL\x10\x18\x12C\n" +
	"?DATA_CARRIER_TYPE_E_1_4INCHDIGITALAUDIOTAPE_UNSPECIFIEDREELSIZE\x10\x19\x12B\n" +
	">DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_EXTRALARGECASSETTE\x10\x1a\x12=\n" +
	"9DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_LARGECASSETTE\x10\x1b\x12>\n" +
	":DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE\x10\x1c\x12=\n" +
	"9DATA_CARRIER_TYPE_E_1_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE\x10\x1d\x125\n" +
	"1DATA_CARRIER_TYPE_E_16MMSEPMAGANALOGAUDIOFILMREEL\x10\x1e\x126\n" +
	"2DATA_CARRIER_TYPE_E_16MMPICTUREANALOGVIDEOFILMREEL\x10\x1f\x129\n" +
	"5DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_10_5INCHREEL\x10 \x127\n" +
	"3DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_12INCHREEL\x10!\x127\n" +
	"3DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_14INCHREEL\x10\"\x12@\n" +
	"<DATA_CARRIER_TYPE_E_2INCHANALOGAUDIOTAPE_UNSPECIFIEDREELSIZE\x10#\x126\n" +
	"2DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_LARGEREEL\x10$\x127\n" +
	"3DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_MEDIUMREEL\x10%\x126\n" +
	"2DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_SMALLREEL\x10&\x12@\n" +
	"<DATA_CARRIER_TYPE_E_2INCHANALOGVIDEOTAPE_UNSPECIFIEDREELSIZE\x10'\x12=\n" +
	"9DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_LARGECASSETTE\x10(\x12>\n" +
	":DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_MEDIUMCASSETTE\x10)\x12=\n" +
	"9DATA_CARRIER_TYPE_E_3_4INCHDIGITALVIDEOTAPE_SMALLCASSETTE\x10*\x125\n" +
	"1DATA_CARRIER_TYPE_E_35MMSEPMAGANALOGAUDIOFILMREEL\x10+\x126\n" +
	"2DATA_CARRIER_TYPE_E_35MMPICTUREANALOGVIDEOFILMREEL\x10,\x125\n" +
	"1DATA_CARRIER_TYPE_E_8MMPICTUREANALOGVIDEOFILMREEL\x10-\x12*\n" +
	"&DATA_CARRIER_TYPE_AIT_1DIGITALDATATAPE\x10.\x12*\n" +
	"&DATA_CARRIER_TYPE_AIT_2DIGITALDATATAPE\x10/\x12*\n" +
	"&DATA_CARRIER_TYPE_AIT_3DIGITALDATATAPE\x100\x12,\n" +
	"(DATA_CARRIER_TYPE_AIT_3EXDIGITALDATATAPE\x101\x12*\n" +
	"&DATA_CARRIER_TYPE_AIT_4DIGITALDATATAPE\x102\x12*\n" +
	"&DATA_CARRIER_TYPE_AIT_5DIGITALDATATAPE\x103\x12(\n" +
	"$DATA_CARRIER_TYPE_BERNOULLIDISK_20MB\x104\x12<\n" +
	"8DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_LARGECASSETTE\x105\x12<\n" +
	"8DATA_CARRIER_TYPE_BETACAMSPANALOGVIDEOTAPE_SMALLCASSETTE\x106\x12=\n" +
	"9DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_LARGECASSETTE\x107\x12=\n" +
	"9DATA_CARRIER_TYPE_BETACAMSXDIGITALVIDEOTAPE_SMALLCASSETTE\x108\x12:\n" +
	"6DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_LARGECASSETTE\x109\x12:\n" +
	"6DATA_CARRIER_TYPE_BETACAMANALOGVIDEOTAPE_SMALLCASSETTE\x10:\x12&\n" +
	"\"DATA_CARRIER_TYPE_BINDER_1INCHRING\x10;\x12(\n" +
	"$DATA_CARRIER_TYPE_BINDER_1_5INCHRING\x10<\x12(\n" +
	"$DATA_CARRIER_TYPE_BINDER_0_5INCHRING\x10=\x12&\n" +
	"\"DATA_CARRIER_TYPE_BINDER_2INCHRING\x10>\x12M\n" +
	"IDATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM\x10?\x12M\n" +
	"IDATA_CARRIER_TYPE_BLURAYRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10@\x12J\n" +
	"FDATA_CARRIER_TYPE_CDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10A\x12*\n" +
	"&DATA_CARRIER_TYPE_CDROMDIGITALDATADISK\x10B\x12=\n" +
	"9DATA_CARRIER_TYPE_CDIINTERACTIVEMULTIMEDIADIGITALDATADISK\x10C\x124\n" +
	"0DATA_CARRIER_TYPE_COMPACTCASSETTEANALOGAUDIOTAPE\x10D\x12.\n" +
	"*DATA_CARRIER_TYPE_DAT160DIGITALSTORAGETAPE\x10E\x12.\n" +
	"*DATA_CARRIER_TYPE_DAT320DIGITALSTORAGETAPE\x10F\x12-\n" +
	")DATA_CARRIER_TYPE_DAT72DIGITALSTORAGETAPE\x10G\x12*\n" +
	"&DATA_CARRIER_TYPE_DDS_1DIGITALDATATAPE\x10H\x12*\n" +
	"&DATA_CARRIER_TYPE_DDS_2DIGITALDATATAPE\x10I\x12*\n" +
	"&DATA_CARRIER_TYPE_DDS_3DIGITALDATATAPE\x10J\x12*\n" +
	"&DATA_CARRIER_TYPE_DDS_4DIGITALDATATAPE\x10K\x12,\n" +
	"(DATA_CARRIER_TYPE_DLT_IIIDIGITALDATATAPE\x10L\x12+\n" +
	"'DATA_CARRIER_TYPE_DLT_IVDIGITALDATATAPE\x10M\x125\n" +
	"1DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_MINICASSETTE\x10N\x127\n" +
	"3DATA_CARRIER_TYPE_DVDIGITALVIDEOTAPE_NORMALCASSETTE\x10O\x12+\n" +
	"'DATA_CARRIER_TYPE_DVCAMDIGITALVIDEOTAPE\x10P\x12<\n" +
	"8DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_LARGECASSETTE\x10Q\x12=\n" +
	"9DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_MEDIUMCASSETTE\x10R\x12<\n" +
	"8DATA_CARRIER_TYPE_DVCPRO50DIGITALVIDEOTAPE_SMALLCASSETTE\x10S\x12A\n" +
	"=DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_EXTRALARGECASSETTE\x10T\x12<\n" +
	"8DATA_CARRIER_TYPE_DVCPROHDDIGITALVIDEOTAPE_LARGECASSETTE\x10U\x12Q\n" +
	"MDATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM\x10V\x12Q\n" +
	"MDATA_CARRIER_TYPE_DVD_PLUS_RRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10W\x12R\n" +
	"NDATA_CARRIER_TYPE_DVD_PLUS_RWREWRITABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10X\x12K\n" +
	"GDATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM\x10Y\x12K\n" +
	"GDATA_CARRIER_TYPE_DVDRRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10Z\x12<\n" +
	"8DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKDOUBLESIDED\x10[\x12<\n" +
	"8DATA_CARRIER_TYPE_DVDRAMRECORDABLEOPTICALDISKSINGLESIDED\x10\\\x12B\n" +
	">DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_LARGECASSETTE\x10]\x12B\n" +
	">DATA_CARRIER_TYPE_DIGITALBETACAMDIGITALVIDEOTAPE_SMALLCASSETTE\x10^\x12&\n" +
	"\"DATA_CARRIER_TYPE_DIGITALAUDIOTAPE\x10_\x12,\n" +
	"(DATA_CARRIER_TYPE_DIGITALCOMPACTCASSETTE\x10`\x12>\n" +
	":DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_COMPACTCASSETTE\x10a\x12?\n" +
	";DATA_CARRIER_TYPE_DIGITALSDIGITALVIDEOTAPE_STANDARDCASSETTE\x10b\x12K\n" +
	"GDATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH\x10c\x12L\n" +
	"HDATA_CARRIER_TYPE_DOUBLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH\x10d\x12\x1e\n" +
	"\x1aDATA_CARRIER_TYPE_ENVELOPE\x10e\x126\n" +
	"2DATA_CARRIER_TYPE_EXABYTE8500SERIESDIGITALDATATAPE\x10f\x126\n" +
	"2DATA_CARRIER_TYPE_EXABYTE8700SERIESDIGITALDATATAPE\x10g\x126\n" +
	"2DATA_CARRIER_TYPE_EXABYTE8900SERIESDIGITALDATATAPE\x10h\x123\n" +
	"/DATA_CARRIER_TYPE_EXABYTEMAMMOTHDIGITALDATATAPE\x10i\x12 \n" +
	"\x1cDATA_CARRIER_TYPE_FILESYSTEM\x10j\x12G\n" +
	"CDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH\x10k\x12G\n" +
	"CDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH\x10l\x12G\n" +
	"CDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH\x10m\x12G\n" +
	"CDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH\x10n\x12F\n" +
	"BDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH\x10o\x12P\n" +
	"LDATA_CARRIER_TYPE_GLASSBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE\x10p\x12L\n" +
	"HDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_12CM\x10q\x12K\n" +
	"GDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_DOUBLELAYER_8CM\x10r\x12L\n" +
	"HDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_12CM\x10s\x12K\n" +
	"GDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKDOUBLESIDED_SINGLELAYER_8CM\x10t\x12L\n" +
	"HDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_12CM\x10u\x12K\n" +
	"GDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_DOUBLELAYER_8CM\x10v\x12L\n" +
	"HDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_12CM\x10w\x12K\n" +
	"GDATA_CARRIER_TYPE_HDDVDRECORDABLEOPTICALDISKSINGLESIDED_SINGLELAYER_8CM\x10x\x12;\n" +
	"7DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_LARGECASSETTE\x10y\x12;\n" +
	"7DATA_CARRIER_TYPE_HDCAMSRDIGITALVIDEOTAPE_SMALLCASSETTE\x10z\x12+\n" +
	"'DATA_CARRIER_TYPE_HDCAMDIGITALVIDEOTAPE\x10{\x12-\n" +
	")DATA_CARRIER_TYPE_HDVHDTVDIGITALVIDEOTAPE\x10|\x12;\n" +
	"7DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB2_0INTERFACE\x10}\x12;\n" +
	"7DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSB3_0INTERFACE\x10~\x128\n" +
	"4DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALUSBINTERFACE\x10\x7f\x12>\n" +
	"9DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIREINTERFACE\x10\x80\x01\x12B\n" +
	"=DATA_CARRIER_TYPE_HARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE\x10\x81\x01\x12A\n" +
	"<DATA_CARRIER_TYPE_HARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\x82\x01\x129\n" +
	"4DATA_CARRIER_TYPE_HARDDISKDRIVE_UNSPECIFIEDINTERFACE\x10\x83\x01\x12*\n" +
	"%DATA_CARRIER_TYPE_HI_8ANALOGVIDEOTAPE\x10\x84\x01\x12B\n" +
	"=DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE\x10\x85\x01\x12B\n" +
	"=DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE\x10\x86\x01\x12?\n" +
	":DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALUSBINTERFACE\x10\x87\x01\x12D\n" +
	"?DATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE\x10\x88\x01\x12H\n" +
	"CDATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USBINTERFACE\x10\x89\x01\x12M\n" +
	"HDATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_EXTERNALFIREWIRE_USB_SATAINTERFACE\x10\x8a\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\x8b\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_IDEATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE\x10\x8c\x01\x12)\n" +
	"$DATA_CARRIER_TYPE_JAZDIGITALDATADISK\x10\x8d\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_1ULTRIUMDIGITALDATATAPE\x10\x8e\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_2ULTRIUMDIGITALDATATAPE\x10\x8f\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_3ULTRIUMDIGITALDATATAPE\x10\x90\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_4ULTRIUMDIGITALDATATAPE\x10\x91\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_5ULTRIUMDIGITALDATATAPE\x10\x92\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_6ULTRIUMDIGITALDATATAPE\x10\x93\x01\x122\n" +
	"-DATA_CARRIER_TYPE_LTO_7ULTRIUMDIGITALDATATAPE\x10\x94\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_10INCH\x10\x95\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_12INCH\x10\x96\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_14INCH\x10\x97\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_16INCH\x10\x98\x01\x12=\n" +
	"8DATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_7INCH\x10\x99\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_LACQUERPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE\x10\x9a\x01\x126\n" +
	"1DATA_CARRIER_TYPE_LASERDISCOPTICALDISKSINGLESIDED\x10\x9b\x01\x12\x1f\n" +
	"\x1aDATA_CARRIER_TYPE_MINIDISK\x10\x9c\x01\x12#\n" +
	"\x1eDATA_CARRIER_TYPE_MODISK_1_3GB\x10\x9d\x01\x12$\n" +
	"\x1fDATA_CARRIER_TYPE_MODISK_1200MB\x10\x9e\x01\x12#\n" +
	"\x1eDATA_CARRIER_TYPE_MODISK_2_6GB\x10\x9f\x01\x12#\n" +
	"\x1eDATA_CARRIER_TYPE_MODISK_540MB\x10\xa0\x01\x12#\n" +
	"\x1eDATA_CARRIER_TYPE_MODISK_650MB\x10\xa1\x01\x12H\n" +
	"CDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_10INCH\x10\xa2\x01\x12H\n" +
	"CDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_12INCH\x10\xa3\x01\x12H\n" +
	"CDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_14INCH\x10\xa4\x01\x12H\n" +
	"CDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_16INCH\x10\xa5\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_7INCH\x10\xa6\x01\x12Q\n" +
	"LDATA_CARRIER_TYPE_METALBASEDACETATEPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE\x10\xa7\x01\x12\"\n" +
	"\x1dDATA_CARRIER_TYPE_PREMASTERCD\x10\xa8\x01\x12A\n" +
	"<DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB2_0INTERFACE\x10\xa9\x01\x12A\n" +
	"<DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALUSB3_0INTERFACE\x10\xaa\x01\x12C\n" +
	">DATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_EXTERNALFIREWIREINTERFACE\x10\xab\x01\x12F\n" +
	"ADATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\xac\x01\x12F\n" +
	"ADATA_CARRIER_TYPE_S_ATAHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE\x10\xad\x01\x12;\n" +
	"6DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_COMPACTCASSETTE\x10\xae\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_S_VHSANALOGVIDEOTAPE_STANDARDCASSETTE\x10\xaf\x01\x12?\n" +
	":DATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE\x10\xb0\x01\x12F\n" +
	"ADATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\xb1\x01\x12F\n" +
	"ADATA_CARRIER_TYPE_SCSIIHARDDISKDRIVE_UNSPECIFIEDEXTERNALINTERFACE\x10\xb2\x01\x12A\n" +
	"<DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL50PININTERFACE\x10\xb3\x01\x12A\n" +
	"<DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNAL68PININTERFACE\x10\xb4\x01\x12E\n" +
	"@DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALCENTRONIXINTERFACE\x10\xb5\x01\x12@\n" +
	";DATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_EXTERNALDSUBINTERFACE\x10\xb6\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_SCSIIIHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\xb7\x01\x12E\n" +
	"@DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL50PININTERFACE\x10\xb8\x01\x12E\n" +
	"@DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL68PININTERFACE\x10\xb9\x01\x12E\n" +
	"@DATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_EXTERNAL80PININTERFACE\x10\xba\x01\x12K\n" +
	"FDATA_CARRIER_TYPE_SCSIIIILVDHARDDISKDRIVE_INTERNALRIBBONCABLEINTERFACE\x10\xbb\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_10INCH\x10\xbc\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_12INCH\x10\xbd\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_14INCH\x10\xbe\x01\x12>\n" +
	"9DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_16INCH\x10\xbf\x01\x12=\n" +
	"8DATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_7INCH\x10\xc0\x01\x12G\n" +
	"BDATA_CARRIER_TYPE_SHELLACPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE\x10\xc1\x01\x12L\n" +
	"GDATA_CARRIER_TYPE_SINGLESIDEDDOUBLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH\x10\xc2\x01\x12L\n" +
	"GDATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_3_5INCH\x10\xc3\x01\x12M\n" +
	"HDATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_5_25INCH\x10\xc4\x01\x12J\n" +
	"EDATA_CARRIER_TYPE_SINGLESIDEDSINGLEDENSITYFLOPPYDIGITALDATADISK_8INCH\x10\xc5\x01\x123\n" +
	".DATA_CARRIER_TYPE_SOLIDSTATEMEMORYSTORAGECARDS\x10\xc6\x01\x12.\n" +
	")DATA_CARRIER_TYPE_STORAGEBOX_1_2CUBICFEET\x10\xc7\x01\x12.\n" +
	")DATA_CARRIER_TYPE_STORAGEBOX_2_0CUBICFEET\x10\xc8\x01\x12!\n" +
	"\x1cDATA_CARRIER_TYPE_STORAGEBOX\x10\xc9\x01\x124\n" +
	"/DATA_CARRIER_TYPE_STORAGECONTAINER_1_2CUBICFEET\x10\xca\x01\x124\n" +
	"/DATA_CARRIER_TYPE_STORAGECONTAINER_2_0CUBICFEET\x10\xcb\x01\x12'\n" +
	"\"DATA_CARRIER_TYPE_STORAGECONTAINER\x10\xcc\x01\x12:\n" +
	"5DATA_CARRIER_TYPE_SUPER16MMPICTUREANALOGVIDEOFILMREEL\x10\xcd\x01\x129\n" +
	"4DATA_CARRIER_TYPE_SUPER8MMPICTUREANALOGVIDEOFILMREEL\x10\xce\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_UMATICSPANALOGVIDEOTAPE_SMALLCASSETTE\x10\xcf\x01\x12:\n" +
	"5DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_LARGECASSETTE\x10\xd0\x01\x12:\n" +
	"5DATA_CARRIER_TYPE_UMATICANALOGVIDEOTAPE_SMALLCASSETTE\x10\xd1\x01\x129\n" +
	"4DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_COMPACTCASSETTE\x10\xd2\x01\x12:\n" +
	"5DATA_CARRIER_TYPE_VHSANALOGVIDEOTAPE_STANDARDCASSETTE\x10\xd3\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_10INCH\x10\xd4\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_12INCH\x10\xd5\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_14INCH\x10\xd6\x01\x12<\n" +
	"7DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_16INCH\x10\xd7\x01\x12;\n" +
	"6DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_7INCH\x10\xd8\x01\x12E\n" +
	"@DATA_CARRIER_TYPE_VINYLPHONOGRAPHANALOGAUDIODISK_UNSPECIFIEDSIZE\x10\xd9\x01\x12+\n" +
	"&DATA_CARRIER_TYPE_VXA_1DIGITALDATATAPE\x10\xda\x01\x12+\n" +
	"&DATA_CARRIER_TYPE_VXA_2DIGITALDATATAPE\x10\xdb\x01\x12+\n" +
	"&DATA_CARRIER_TYPE_VXA_3DIGITALDATATAPE\x10\xdc\x01\x12:\n" +
	"5DATA_CARRIER_TYPE_WAXCYLINDERPHONOGRAMANALOGAUDIODISK\x10\xdd\x01\x121\n" +
	",DATA_CARRIER_TYPE_XDCAMREWRITABLEOPTICALDISK\x10\xde\x01\x12)\n" +
	"$DATA_CARRIER_TYPE_ZIPDIGITALDATADISK\x10\xdf\x01*w\n" +
	"\x11DdexTerritoryCode\x12#\n" +
	"\x1fDDEX_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16DDEX_TERRITORY_CODE_XK\x10\x01\x12!\n" +
	"\x1dDDEX_TERRITORY_CODE_WORLDWIDE\x10\x02*y\n" +
	"\x1cDdexTerritoryCodeNoWorldwide\x120\n" +
	",DDEX_TERRITORY_CODE_NO_WORLDWIDE_UNSPECIFIED\x10\x00\x12'\n" +
	"#DDEX_TERRITORY_CODE_NO_WORLDWIDE_XK\x10\x01*\xd0\x01\n" +
	"\x10DeliveryFileType\x12\"\n" +
	"\x1eDELIVERY_FILE_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cDELIVERY_FILE_TYPE_AUDIOFILE\x10\x01\x12&\n" +
	"\"DELIVERY_FILE_TYPE_AUDIOVISUALFILE\x10\x02\x12+\n" +
	"'DELIVERY_FILE_TYPE_COLORINFORMATIONFILE\x10\x03\x12!\n" +
	"\x1dDELIVERY_FILE_TYPE_VISUALFILE\x10\x04*\xe2\x04\n" +
	"\x16DeprecatedCurrencyCode\x12(\n" +
	"$DEPRECATED_CURRENCY_CODE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_ANG\x10\x01\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_CUC\x10\x02\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_CYP\x10\x03\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_EEK\x10\x04\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_HRK\x10\x05\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_LTL\x10\x06\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_LVL\x10\a\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_MTL\x10\b\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_MRO\x10\t\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_ROL\x10\n" +
	"\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_SIT\x10\v\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_SKK\x10\f\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_SLL\x10\r\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_STD\x10\x0e\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_VEF\x10\x0f\x12 \n" +
	"\x1cDEPRECATED_CURRENCY_CODE_ZWL\x10\x10*\xa3\n" +
	"\n" +
	"\x1aDeprecatedIsoTerritoryCode\x12-\n" +
	")DEPRECATED_ISO_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_AIDJ\x10\x01\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_ANHH\x10\x02\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_BQAQ\x10\x03\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_BUMM\x10\x04\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_BYAA\x10\x05\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_CSHH\x10\x06\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_CSXX\x10\a\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_CTKI\x10\b\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_DDDE\x10\t\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_DYBJ\x10\n" +
	"\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_FQHH\x10\v\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_FXFR\x10\f\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_GEHH\x10\r\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_HVBF\x10\x0e\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_JTUM\x10\x0f\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_MIUM\x10\x10\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_NHVU\x10\x11\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_NQAQ\x10\x12\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_NTHH\x10\x13\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_PCHH\x10\x14\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_PUUM\x10\x15\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_PZPA\x10\x16\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_RHZW\x10\x17\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_SKIN\x10\x18\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_SUHH\x10\x19\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_TPTL\x10\x1a\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_VDVN\x10\x1b\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_WKUM\x10\x1c\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_YDYE\x10\x1d\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_YUCS\x10\x1e\x12&\n" +
	"\"DEPRECATED_ISO_TERRITORY_CODE_ZRCD\x10\x1f*j\n" +
	"\x15DeprecatedReleaseType\x12'\n" +
	"#DEPRECATED_RELEASE_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$DEPRECATED_RELEASE_TYPE_TRACKRELEASE\x10\x01*\xa5\x01\n" +
	"\x10DigitizationMode\x12!\n" +
	"\x1dDIGITIZATION_MODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15DIGITIZATION_MODE_AAD\x10\x01\x12\x19\n" +
	"\x15DIGITIZATION_MODE_ADD\x10\x02\x12\x19\n" +
	"\x15DIGITIZATION_MODE_DDD\x10\x03\x12\x1d\n" +
	"\x19DIGITIZATION_MODE_UNKNOWN\x10\x04*\xa4\x03\n" +
	"\x0fDiscrepancyType\x12 \n" +
	"\x1cDISCREPANCY_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!DISCREPANCY_TYPE_CALCULATIONERROR\x10\x01\x12-\n" +
	")DISCREPANCY_TYPE_DUPLICATEDCLAIMINMESSAGE\x10\x02\x12\x1f\n" +
	"\x1bDISCREPANCY_TYPE_CLAIMBASIS\x10\x03\x126\n" +
	"2DISCREPANCY_TYPE_ORIGINALLYSTATEDCLAIMDOESNOTMATCH\x10\x04\x12\x1e\n" +
	"\x1aDISCREPANCY_TYPE_OVERCLAIM\x10\x05\x12,\n" +
	"(DISCREPANCY_TYPE_OVERCLAIMBYSAMELICENSOR\x10\x06\x12'\n" +
	"#DISCREPANCY_TYPE_PREVIOUSLYINVOICED\x10\a\x12'\n" +
	"#DISCREPANCY_TYPE_SALESDATAINCORRECT\x10\b\x12 \n" +
	"\x1cDISCREPANCY_TYPE_USERDEFINED\x10\t*\x8a\x02\n" +
	"\x11DisplayArtistRole\x12#\n" +
	"\x1fDISPLAY_ARTIST_ROLE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aDISPLAY_ARTIST_ROLE_ARTIST\x10\x01\x12\x1d\n" +
	"\x19DISPLAY_ARTIST_ROLE_BRAND\x10\x02\x12 \n" +
	"\x1cDISPLAY_ARTIST_ROLE_COMPOSER\x10\x03\x12&\n" +
	"\"DISPLAY_ARTIST_ROLE_FEATUREDARTIST\x10\x04\x12\"\n" +
	"\x1eDISPLAY_ARTIST_ROLE_MAINARTIST\x10\x05\x12#\n" +
	"\x1fDISPLAY_ARTIST_ROLE_USERDEFINED\x10\x06*\xe0\x02\n" +
	"\x14DisplayArtistRoleRDR\x12)\n" +
	"%DISPLAY_ARTIST_ROLE_R_D_R_UNSPECIFIED\x10\x00\x12$\n" +
	" DISPLAY_ARTIST_ROLE_R_D_R_ARTIST\x10\x01\x12#\n" +
	"\x1fDISPLAY_ARTIST_ROLE_R_D_R_BRAND\x10\x02\x12&\n" +
	"\"DISPLAY_ARTIST_ROLE_R_D_R_COMPOSER\x10\x03\x12'\n" +
	"#DISPLAY_ARTIST_ROLE_R_D_R_CONDUCTOR\x10\x04\x12,\n" +
	"(DISPLAY_ARTIST_ROLE_R_D_R_FEATUREDARTIST\x10\x05\x12(\n" +
	"$DISPLAY_ARTIST_ROLE_R_D_R_MAINARTIST\x10\x06\x12)\n" +
	"%DISPLAY_ARTIST_ROLE_R_D_R_USERDEFINED\x10\a*\xe0\x05\n" +
	"\x17DistributionChannelType\x12)\n" +
	"%DISTRIBUTION_CHANNEL_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'DISTRIBUTION_CHANNEL_TYPE_ASPERCONTRACT\x10\x01\x12'\n" +
	"#DISTRIBUTION_CHANNEL_TYPE_BROADCAST\x10\x02\x12#\n" +
	"\x1fDISTRIBUTION_CHANNEL_TYPE_CABLE\x10\x03\x12&\n" +
	"\"DISTRIBUTION_CHANNEL_TYPE_INTERNET\x10\x04\x12/\n" +
	"+DISTRIBUTION_CHANNEL_TYPE_INTERNETANDMOBILE\x10\x05\x12\"\n" +
	"\x1eDISTRIBUTION_CHANNEL_TYPE_IPTV\x10\x06\x12-\n" +
	")DISTRIBUTION_CHANNEL_TYPE_MOBILETELEPHONE\x10\a\x12(\n" +
	"$DISTRIBUTION_CHANNEL_TYPE_NARROWCAST\x10\b\x12,\n" +
	"(DISTRIBUTION_CHANNEL_TYPE_ONDEMANDSTREAM\x10\t\x12(\n" +
	"$DISTRIBUTION_CHANNEL_TYPE_PEERTOPEER\x10\n" +
	"\x12&\n" +
	"\"DISTRIBUTION_CHANNEL_TYPE_PHYSICAL\x10\v\x12'\n" +
	"#DISTRIBUTION_CHANNEL_TYPE_SATELLITE\x10\f\x12'\n" +
	"#DISTRIBUTION_CHANNEL_TYPE_SIMULCAST\x10\r\x12%\n" +
	"!DISTRIBUTION_CHANNEL_TYPE_UNKNOWN\x10\x0e\x12)\n" +
	"%DISTRIBUTION_CHANNEL_TYPE_USERDEFINED\x10\x0f\x12%\n" +
	"!DISTRIBUTION_CHANNEL_TYPE_WEBCAST\x10\x10*\xdc\x01\n" +
	"\x11DistributionClass\x12\"\n" +
	"\x1eDISTRIBUTION_CLASS_UNSPECIFIED\x10\x00\x12%\n" +
	"!DISTRIBUTION_CLASS_CLASSICALMUSIC\x10\x01\x12#\n" +
	"\x1fDISTRIBUTION_CLASS_LIBRARYMUSIC\x10\x02\x12\x1b\n" +
	"\x17DISTRIBUTION_CLASS_JAZZ\x10\x03\x12\x1a\n" +
	"\x16DISTRIBUTION_CLASS_POP\x10\x04\x12\x1e\n" +
	"\x1aDISTRIBUTION_CLASS_UNKNOWN\x10\x05*\x83\x01\n" +
	"\x0fDocumentTypeLoD\x12\"\n" +
	"\x1eDOCUMENT_TYPE_LO_D_UNSPECIFIED\x10\x00\x12(\n" +
	"$DOCUMENT_TYPE_LO_D_LETTEROFDIRECTION\x10\x01\x12\"\n" +
	"\x1eDOCUMENT_TYPE_LO_D_USERDEFINED\x10\x02*\xa6\x01\n" +
	"\x0fDocumentTypeMWL\x12#\n" +
	"\x1fDOCUMENT_TYPE_M_W_L_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cDOCUMENT_TYPE_M_W_L_CONTRACT\x10\x01\x12'\n" +
	"#DOCUMENT_TYPE_M_W_L_RATECALCULATION\x10\x02\x12#\n" +
	"\x1fDOCUMENT_TYPE_M_W_L_USERDEFINED\x10\x03*t\n" +
	"\n" +
	"DpidStatus\x12\x1b\n" +
	"\x17DPID_STATUS_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12DPID_STATUS_ACTIVE\x10\x01\x12\x17\n" +
	"\x13DPID_STATUS_DELETED\x10\x02\x12\x18\n" +
	"\x14DPID_STATUS_REPLACED\x10\x03*\x89\x01\n" +
	"\x12DrmEnforcementType\x12$\n" +
	" DRM_ENFORCEMENT_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" DRM_ENFORCEMENT_TYPE_DRMENFORCED\x10\x01\x12'\n" +
	"#DRM_ENFORCEMENT_TYPE_NOTDRMENFORCED\x10\x02*t\n" +
	"\vEditionType\x12\x1c\n" +
	"\x18EDITION_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dEDITION_TYPE_IMMERSIVEEDITION\x10\x01\x12$\n" +
	" EDITION_TYPE_NONIMMERSIVEEDITION\x10\x02*\xc3\x01\n" +
	"\"ElectroOpticalTransferFunctionType\x126\n" +
	"2ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_UNSPECIFIED\x10\x00\x122\n" +
	".ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_BT_1886\x10\x01\x121\n" +
	"-ELECTRO_OPTICAL_TRANSFER_FUNCTION_TYPE_ST2084\x10\x02*\xfc\x0f\n" +
	"\x14ElementConfiguration\x12%\n" +
	"!ELEMENT_CONFIGURATION_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_E_12TRACK\x10\x01\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_E_16TRACK\x10\x02\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_E_24TRACK\x10\x03\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_E_3TRACK\x10\x04\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_E_32TRACK\x10\x05\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_E_4TRACK\x10\x06\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_E_48TRACK\x10\a\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_E_6TRACK\x10\b\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_E_8TRACK\x10\t\x12%\n" +
	"!ELEMENT_CONFIGURATION_ABLETONLIVE\x10\n" +
	"\x12$\n" +
	" ELEMENT_CONFIGURATION_BRUARCHIVE\x10\v\x12.\n" +
	"*ELEMENT_CONFIGURATION_BANDEDDISC_INSIDEOUT\x10\f\x12.\n" +
	"*ELEMENT_CONFIGURATION_BANDEDDISC_OUTSIDEIN\x10\r\x12 \n" +
	"\x1cELEMENT_CONFIGURATION_CUBASE\x10\x0e\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_DATAFILES\x10\x0f\x12*\n" +
	"&ELEMENT_CONFIGURATION_DIGITALPERFORMER\x10\x10\x12)\n" +
	"%ELEMENT_CONFIGURATION_FINALCUTEXPRESS\x10\x11\x12%\n" +
	"!ELEMENT_CONFIGURATION_FINALCUTPRO\x10\x12\x12%\n" +
	"!ELEMENT_CONFIGURATION_FRUITYLOOPS\x10\x13\x12'\n" +
	"#ELEMENT_CONFIGURATION_FULLTRACKMONO\x10\x14\x12$\n" +
	" ELEMENT_CONFIGURATION_GARAGEBAND\x10\x15\x12'\n" +
	"#ELEMENT_CONFIGURATION_HALFTRACKMONO\x10\x16\x12)\n" +
	"%ELEMENT_CONFIGURATION_HALFTRACKSTEREO\x10\x17\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_HARDCOPY\x10\x18\x12-\n" +
	")ELEMENT_CONFIGURATION_INTERLEAVED5_1FILES\x10\x19\x120\n" +
	",ELEMENT_CONFIGURATION_INTERLEAVEDSTEREOFILES\x10\x1a\x12\x1f\n" +
	"\x1bELEMENT_CONFIGURATION_LOGIC\x10\x1b\x12%\n" +
	"!ELEMENT_CONFIGURATION_LTFSARCHIVE\x10\x1c\x12$\n" +
	" ELEMENT_CONFIGURATION_LTFSBACKUP\x10\x1d\x12&\n" +
	"\"ELEMENT_CONFIGURATION_MEZZOARCHIVE\x10\x1e\x12)\n" +
	"%ELEMENT_CONFIGURATION_MICROSOFTBACKUP\x10\x1f\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_MONOFILES\x10 \x12 \n" +
	"\x1cELEMENT_CONFIGURATION_NUENDO\x10!\x12$\n" +
	" ELEMENT_CONFIGURATION_ORANGEBOOK\x10\"\x12\x1f\n" +
	"\x1bELEMENT_CONFIGURATION_PARIS\x10#\x12\"\n" +
	"\x1eELEMENT_CONFIGURATION_PROTOOLS\x10$\x12*\n" +
	"&ELEMENT_CONFIGURATION_QUARTERTRACKMONO\x10%\x12,\n" +
	"(ELEMENT_CONFIGURATION_QUARTERTRACKSTEREO\x10&\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_QUICKTIME\x10'\x12!\n" +
	"\x1dELEMENT_CONFIGURATION_REDBOOK\x10(\x12+\n" +
	"'ELEMENT_CONFIGURATION_RETROSPECTARCHIVE\x10)\x12+\n" +
	"'ELEMENT_CONFIGURATION_RETROSPECTCATALOG\x10*\x12%\n" +
	"!ELEMENT_CONFIGURATION_SPLITSTEREO\x10+\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_STUDIOONE\x10,\x12$\n" +
	" ELEMENT_CONFIGURATION_TARARCHIVE\x10-\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_TARBACKUP\x10.\x12&\n" +
	"\"ELEMENT_CONFIGURATION_TOASTARCHIVE\x10/\x12/\n" +
	"+ELEMENT_CONFIGURATION_TRACKEDDISC_INSIDEOUT\x100\x12/\n" +
	"+ELEMENT_CONFIGURATION_TRACKEDDISC_OUTSIDEIN\x101\x12#\n" +
	"\x1fELEMENT_CONFIGURATION_TWINTRACK\x102*\x96\x03\n" +
	"\x12ElementDesignation\x12#\n" +
	"\x1fELEMENT_DESIGNATION_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aELEMENT_DESIGNATION_BACKUP\x10\x01\x12#\n" +
	"\x1fELEMENT_DESIGNATION_CONVENIENCE\x10\x02\x12\x1c\n" +
	"\x18ELEMENT_DESIGNATION_COPY\x10\x03\x12%\n" +
	"!ELEMENT_DESIGNATION_DOCUMENTATION\x10\x04\x12 \n" +
	"\x1cELEMENT_DESIGNATION_LONGTERM\x10\x05\x12\x1e\n" +
	"\x1aELEMENT_DESIGNATION_MASTER\x10\x06\x12\x1e\n" +
	"\x1aELEMENT_DESIGNATION_SAFETY\x10\a\x12(\n" +
	"$ELEMENT_DESIGNATION_STORAGECONTAINER\x10\b\x12 \n" +
	"\x1cELEMENT_DESIGNATION_TRANSFER\x10\t\x12#\n" +
	"\x1fELEMENT_DESIGNATION_WORKELEMENT\x10\n" +
	"*c\n" +
	"\fEncodingType\x12\x1d\n" +
	"\x19ENCODING_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11ENCODING_TYPE_IPA\x10\x01\x12\x1d\n" +
	"\x19ENCODING_TYPE_USERDEFINED\x10\x02*g\n" +
	"\x15EquipmentManufacturer\x12&\n" +
	"\"EQUIPMENT_MANUFACTURER_UNSPECIFIED\x10\x00\x12&\n" +
	"\"EQUIPMENT_MANUFACTURER_USERDEFINED\x10\x01*R\n" +
	"\x0eEquipmentModel\x12\x1f\n" +
	"\x1bEQUIPMENT_MODEL_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bEQUIPMENT_MODEL_USERDEFINED\x10\x01*\x8f\x02\n" +
	"\rEquipmentType\x12\x1e\n" +
	"\x1aEQUIPMENT_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17EQUIPMENT_TYPE_COMPUTER\x10\x01\x12\x1e\n" +
	"\x1aEQUIPMENT_TYPE_LOUDSPEAKER\x10\x02\x12\x1d\n" +
	"\x19EQUIPMENT_TYPE_MICROPHONE\x10\x03\x12$\n" +
	" EQUIPMENT_TYPE_MUSICALINSTRUMENT\x10\x04\x12\x1b\n" +
	"\x17EQUIPMENT_TYPE_RECORDER\x10\x05\x12\"\n" +
	"\x1eEQUIPMENT_TYPE_SIGNALPROCESSOR\x10\x06\x12\x1b\n" +
	"\x17EQUIPMENT_TYPE_SOFTWARE\x10\a*Z\n" +
	"\x0eErnMessageType\x12 \n" +
	"\x1cERN_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"ERN_MESSAGE_TYPE_NEWRELEASEMESSAGE\x10\x01*\x97\x01\n" +
	"\x12ErnTestMessageType\x12%\n" +
	"!ERN_TEST_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'ERN_TEST_MESSAGE_TYPE_NEWRELEASEMESSAGE\x10\x01\x12-\n" +
	")ERN_TEST_MESSAGE_TYPE_PURGERELEASEMESSAGE\x10\x02*\xca\a\n" +
	"\x0eErncFileStatus\x12 \n" +
	"\x1cERNC_FILE_STATUS_UNSPECIFIED\x10\x00\x12&\n" +
	"\"ERNC_FILE_STATUS_ARTISTROLEUNKNOWN\x10\x01\x121\n" +
	"-ERNC_FILE_STATUS_COMMERCIALRELEASEDATEINVALID\x10\x02\x123\n" +
	"/ERNC_FILE_STATUS_CONFLICTINGAVAILABILITYPERIODS\x10\x03\x12-\n" +
	")ERNC_FILE_STATUS_DUPLICATEDPUBLISHERNAMES\x10\x04\x12\x1f\n" +
	"\x1bERNC_FILE_STATUS_ERNMISSING\x10\x05\x12\x1b\n" +
	"\x17ERNC_FILE_STATUS_FILEOK\x10\x06\x12&\n" +
	"\"ERNC_FILE_STATUS_IDENTIFIERINVALID\x10\a\x12,\n" +
	"(ERNC_FILE_STATUS_IDENTIFIERSYNTAXINVALID\x10\b\x12\"\n" +
	"\x1eERNC_FILE_STATUS_INTERNALERROR\x10\t\x12$\n" +
	" ERNC_FILE_STATUS_METADATAMISSING\x10\n" +
	"\x12-\n" +
	")ERNC_FILE_STATUS_NEWRELEASEMESSAGEINVALID\x10\v\x12*\n" +
	"&ERNC_FILE_STATUS_NODEALFORTRACKRELEASE\x10\f\x12.\n" +
	"*ERNC_FILE_STATUS_NODEALINNEWRELEASEMESSAGE\x10\r\x12<\n" +
	"8ERNC_FILE_STATUS_ORIGINALRELEASEDATELATERTHANRELEASEDATE\x10\x0e\x12-\n" +
	")ERNC_FILE_STATUS_PRIMARYARTISTNAMEMISSING\x10\x0f\x12$\n" +
	" ERNC_FILE_STATUS_RESOURCECORRUPT\x10\x10\x12$\n" +
	" ERNC_FILE_STATUS_RESOURCEMISSING\x10\x11\x125\n" +
	"1ERNC_FILE_STATUS_RESOURCENOTMEETINGSPECIFICATIONS\x10\x12\x125\n" +
	"1ERNC_FILE_STATUS_SIGNATUREORHASHSUMWRONGORMISSING\x10\x13\x12%\n" +
	"!ERNC_FILE_STATUS_UNSUPPORTEDUSAGE\x10\x14\x12 \n" +
	"\x1cERNC_FILE_STATUS_USERDEFINED\x10\x15*\xbd\x02\n" +
	"\x16ErncProposedActionType\x12)\n" +
	"%ERNC_PROPOSED_ACTION_TYPE_UNSPECIFIED\x10\x00\x129\n" +
	"5ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDAFFECTEDRESOURCE\x10\x01\x120\n" +
	",ERNC_PROPOSED_ACTION_TYPE_DONOTRESENDRELEASE\x10\x02\x12+\n" +
	"'ERNC_PROPOSED_ACTION_TYPE_RESENDXMLONLY\x10\x03\x123\n" +
	"/ERNC_PROPOSED_ACTION_TYPE_RESENDXMLANDRESOURCES\x10\x04\x12)\n" +
	"%ERNC_PROPOSED_ACTION_TYPE_USERDEFINED\x10\x05*\x88\x01\n" +
	"\rErrorSeverity\x12\x1e\n" +
	"\x1aERROR_SEVERITY_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17ERROR_SEVERITY_CRITICAL\x10\x01\x12\x1e\n" +
	"\x1aERROR_SEVERITY_INFORMATION\x10\x02\x12\x1a\n" +
	"\x16ERROR_SEVERITY_WARNING\x10\x03*\x81\x01\n" +
	"\tErrorType\x12\x1a\n" +
	"\x16ERROR_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bERROR_TYPE_CONFORMANCEERROR\x10\x01\x12\x1b\n" +
	"\x17ERROR_TYPE_LOGICALERROR\x10\x02\x12\x1a\n" +
	"\x16ERROR_TYPE_USERDEFINED\x10\x03*\xa7\x02\n" +
	"\tEventType\x12\x1a\n" +
	"\x16EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19EVENT_TYPE_ACTIVITYPERIOD\x10\x01\x12\x14\n" +
	"\x10EVENT_TYPE_BIRTH\x10\x02\x12\x1c\n" +
	"\x18EVENT_TYPE_CONCEPTUALIZE\x10\x03\x12\x14\n" +
	"\x10EVENT_TYPE_DEATH\x10\x04\x12\x1a\n" +
	"\x16EVENT_TYPE_DISSOLUTION\x10\x05\x12\x1f\n" +
	"\x1bEVENT_TYPE_FIRSTPERFORMANCE\x10\x06\x12\x1c\n" +
	"\x18EVENT_TYPE_INCORPORATION\x10\a\x12\x1e\n" +
	"\x1aEVENT_TYPE_LASTPERFORMANCE\x10\b\x12\x1a\n" +
	"\x16EVENT_TYPE_USERDEFINED\x10\t*\xd4\x01\n" +
	"\x0fExceptionReason\x12 \n" +
	"\x1cEXCEPTION_REASON_UNSPECIFIED\x10\x00\x12'\n" +
	"#EXCEPTION_REASON_DISPUTEDBYLICENSEE\x10\x01\x125\n" +
	"1EXCEPTION_REASON_DISPUTEDBYRELINQUISHINGPUBLISHER\x10\x02\x12\x1d\n" +
	"\x19EXCEPTION_REASON_NOTFOUND\x10\x03\x12 \n" +
	"\x1cEXCEPTION_REASON_USERDEFINED\x10\x04*s\n" +
	"\x0eExpressionType\x12\x1f\n" +
	"\x1bEXPRESSION_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bEXPRESSION_TYPE_INFORMATIVE\x10\x01\x12\x1f\n" +
	"\x1bEXPRESSION_TYPE_INSTRUCTIVE\x10\x02*\xb6\x03\n" +
	"\x1cExternallyLinkedResourceType\x12/\n" +
	"+EXTERNALLY_LINKED_RESOURCE_TYPE_UNSPECIFIED\x10\x00\x126\n" +
	"2EXTERNALLY_LINKED_RESOURCE_TYPE_ADDITIONALMETADATA\x10\x01\x12(\n" +
	"$EXTERNALLY_LINKED_RESOURCE_TYPE_LOGO\x10\x02\x124\n" +
	"0EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALIMAGE\x10\x03\x12:\n" +
	"6EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALINFORMATION\x10\x04\x123\n" +
	"/EXTERNALLY_LINKED_RESOURCE_TYPE_PROMOTIONALITEM\x10\x05\x12+\n" +
	"'EXTERNALLY_LINKED_RESOURCE_TYPE_UNKNOWN\x10\x06\x12/\n" +
	"+EXTERNALLY_LINKED_RESOURCE_TYPE_USERDEFINED\x10\a*\xa4\x1e\n" +
	"\bFileType\x12\x19\n" +
	"\x15FILE_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13FILE_TYPE_E_3DMFILE\x10\x01\x12\x17\n" +
	"\x13FILE_TYPE_E_3G2FILE\x10\x02\x12\x17\n" +
	"\x13FILE_TYPE_E_3GPFILE\x10\x03\x12\x16\n" +
	"\x12FILE_TYPE_E_7ZFILE\x10\x04\x12\x17\n" +
	"\x13FILE_TYPE_E_8BIFILE\x10\x05\x12\x15\n" +
	"\x11FILE_TYPE_AACFILE\x10\x06\x12\x17\n" +
	"\x13FILE_TYPE_ACCDBFILE\x10\a\x12\x15\n" +
	"\x11FILE_TYPE_AIFFILE\x10\b\x12\x14\n" +
	"\x10FILE_TYPE_AIFILE\x10\t\x12\x15\n" +
	"\x11FILE_TYPE_ANAFILE\x10\n" +
	"\x12\x15\n" +
	"\x11FILE_TYPE_APPFILE\x10\v\x12\x15\n" +
	"\x11FILE_TYPE_ASFFILE\x10\f\x12\x15\n" +
	"\x11FILE_TYPE_ASPFILE\x10\r\x12\x15\n" +
	"\x11FILE_TYPE_ASXFILE\x10\x0e\x12\x15\n" +
	"\x11FILE_TYPE_AUDFILE\x10\x0f\x12\x15\n" +
	"\x11FILE_TYPE_AVIFILE\x10\x10\x12\x15\n" +
	"\x11FILE_TYPE_BAKFILE\x10\x11\x12\x15\n" +
	"\x11FILE_TYPE_BATFILE\x10\x12\x12\x15\n" +
	"\x11FILE_TYPE_BINFILE\x10\x13\x12\x15\n" +
	"\x11FILE_TYPE_BMPFILE\x10\x14\x12\x14\n" +
	"\x10FILE_TYPE_BTFILE\x10\x15\x12\x15\n" +
	"\x11FILE_TYPE_BWFFILE\x10\x16\x12\x15\n" +
	"\x11FILE_TYPE_CABFILE\x10\x17\x12\x15\n" +
	"\x11FILE_TYPE_CERFILE\x10\x18\x12\x15\n" +
	"\x11FILE_TYPE_CFGFILE\x10\x19\x12\x13\n" +
	"\x0fFILE_TYPE_CFILE\x10\x1a\x12\x15\n" +
	"\x11FILE_TYPE_CGIFILE\x10\x1b\x12\x17\n" +
	"\x13FILE_TYPE_CLASSFILE\x10\x1c\x12\x15\n" +
	"\x11FILE_TYPE_COMFILE\x10\x1d\x12\x15\n" +
	"\x11FILE_TYPE_CPLFILE\x10\x1e\x12\x15\n" +
	"\x11FILE_TYPE_CPPFILE\x10\x1f\x12\x14\n" +
	"\x10FILE_TYPE_CSFILE\x10 \x12\x15\n" +
	"\x11FILE_TYPE_CSRFILE\x10!\x12\x15\n" +
	"\x11FILE_TYPE_CSSFILE\x10\"\x12\x15\n" +
	"\x11FILE_TYPE_CSVFILE\x10#\x12\x15\n" +
	"\x11FILE_TYPE_CURFILE\x10$\x12\x15\n" +
	"\x11FILE_TYPE_DATFILE\x10%\x12\x14\n" +
	"\x10FILE_TYPE_DBFILE\x10&\x12\x15\n" +
	"\x11FILE_TYPE_DBXFILE\x10'\x12\x15\n" +
	"\x11FILE_TYPE_DEBFILE\x10(\x12\x15\n" +
	"\x11FILE_TYPE_DLLFILE\x10)\x12\x15\n" +
	"\x11FILE_TYPE_DMGFILE\x10*\x12\x15\n" +
	"\x11FILE_TYPE_DMPFILE\x10+\x12\x15\n" +
	"\x11FILE_TYPE_DOCFILE\x10,\x12\x16\n" +
	"\x12FILE_TYPE_DOCXFILE\x10-\x12\x15\n" +
	"\x11FILE_TYPE_DRVFILE\x10.\x12\x15\n" +
	"\x11FILE_TYPE_DRWFILE\x10/\x12\x15\n" +
	"\x11FILE_TYPE_DSDFILE\x100\x12\x15\n" +
	"\x11FILE_TYPE_DTDFILE\x101\x12\x14\n" +
	"\x10FILE_TYPE_DVFILE\x102\x12\x15\n" +
	"\x11FILE_TYPE_DWGFILE\x103\x12\x15\n" +
	"\x11FILE_TYPE_DXFFILE\x104\x12\x15\n" +
	"\x11FILE_TYPE_EFXFILE\x105\x12\x15\n" +
	"\x11FILE_TYPE_EPSFILE\x106\x12\x15\n" +
	"\x11FILE_TYPE_EXEFILE\x107\x12\x15\n" +
	"\x11FILE_TYPE_FLAFILE\x108\x12\x15\n" +
	"\x11FILE_TYPE_FLVFILE\x109\x12\x15\n" +
	"\x11FILE_TYPE_FNTFILE\x10:\x12\x15\n" +
	"\x11FILE_TYPE_FONFILE\x10;\x12\x18\n" +
	"\x14FILE_TYPE_GADGETFILE\x10<\x12\x15\n" +
	"\x11FILE_TYPE_GAMFILE\x10=\x12\x15\n" +
	"\x11FILE_TYPE_GHOFILE\x10>\x12\x15\n" +
	"\x11FILE_TYPE_GIFFILE\x10?\x12\x15\n" +
	"\x11FILE_TYPE_GPXFILE\x10@\x12\x14\n" +
	"\x10FILE_TYPE_GZFILE\x10A\x12\x15\n" +
	"\x11FILE_TYPE_HQXFILE\x10B\x12\x15\n" +
	"\x11FILE_TYPE_HTMFILE\x10C\x12\x16\n" +
	"\x12FILE_TYPE_HTMLFILE\x10D\x12\x15\n" +
	"\x11FILE_TYPE_IFFFILE\x10E\x12\x16\n" +
	"\x12FILE_TYPE_INDDFILE\x10F\x12\x15\n" +
	"\x11FILE_TYPE_INIFILE\x10G\x12\x15\n" +
	"\x11FILE_TYPE_ISOFILE\x10H\x12\x15\n" +
	"\x11FILE_TYPE_JARFILE\x10I\x12\x16\n" +
	"\x12FILE_TYPE_JAVAFILE\x10J\x12\x15\n" +
	"\x11FILE_TYPE_JPGFILE\x10K\x12\x14\n" +
	"\x10FILE_TYPE_JSFILE\x10L\x12\x15\n" +
	"\x11FILE_TYPE_JSPFILE\x10M\x12\x1a\n" +
	"\x16FILE_TYPE_KEYCHAINFILE\x10N\x12\x15\n" +
	"\x11FILE_TYPE_KEYFILE\x10O\x12\x15\n" +
	"\x11FILE_TYPE_KMLFILE\x10P\x12\x15\n" +
	"\x11FILE_TYPE_LNKFILE\x10Q\x12\x15\n" +
	"\x11FILE_TYPE_LOGFILE\x10R\x12\x15\n" +
	"\x11FILE_TYPE_M3UFILE\x10S\x12\x15\n" +
	"\x11FILE_TYPE_MAXFILE\x10T\x12\x15\n" +
	"\x11FILE_TYPE_MDBFILE\x10U\x12\x13\n" +
	"\x0fFILE_TYPE_MFILE\x10V\x12\x15\n" +
	"\x11FILE_TYPE_MIDFILE\x10W\x12\x15\n" +
	"\x11FILE_TYPE_MIMFILE\x10X\x12\x15\n" +
	"\x11FILE_TYPE_MOVFILE\x10Y\x12\x15\n" +
	"\x11FILE_TYPE_MP3FILE\x10Z\x12\x15\n" +
	"\x11FILE_TYPE_MP4FILE\x10[\x12\x15\n" +
	"\x11FILE_TYPE_MPAFILE\x10\\\x12\x15\n" +
	"\x11FILE_TYPE_MPGFILE\x10]\x12\x15\n" +
	"\x11FILE_TYPE_MSGFILE\x10^\x12\x15\n" +
	"\x11FILE_TYPE_NESFILE\x10_\x12\x15\n" +
	"\x11FILE_TYPE_NEUFILE\x10`\x12\x15\n" +
	"\x11FILE_TYPE_ORIFILE\x10a\x12\x15\n" +
	"\x11FILE_TYPE_OTFFILE\x10b\x12\x17\n" +
	"\x13FILE_TYPE_PAGESFILE\x10c\x12\x15\n" +
	"\x11FILE_TYPE_PCMFILE\x10d\x12\x15\n" +
	"\x11FILE_TYPE_PCTFILE\x10e\x12\x15\n" +
	"\x11FILE_TYPE_PDBFILE\x10f\x12\x15\n" +
	"\x11FILE_TYPE_PDFFILE\x10g\x12\x15\n" +
	"\x11FILE_TYPE_PHPFILE\x10h\x12\x15\n" +
	"\x11FILE_TYPE_PIFFILE\x10i\x12\x15\n" +
	"\x11FILE_TYPE_PKGFILE\x10j\x12\x14\n" +
	"\x10FILE_TYPE_PLFILE\x10k\x12\x15\n" +
	"\x11FILE_TYPE_PLNFILE\x10l\x12\x18\n" +
	"\x14FILE_TYPE_PLUGINFILE\x10m\x12\x15\n" +
	"\x11FILE_TYPE_PNGFILE\x10n\x12\x15\n" +
	"\x11FILE_TYPE_PPSFILE\x10o\x12\x15\n" +
	"\x11FILE_TYPE_PPTFILE\x10p\x12\x16\n" +
	"\x12FILE_TYPE_PPTXFILE\x10q\x12\x15\n" +
	"\x11FILE_TYPE_PRFFILE\x10r\x12\x15\n" +
	"\x11FILE_TYPE_PSDFILE\x10s\x12\x14\n" +
	"\x10FILE_TYPE_PSFILE\x10t\x12\x1a\n" +
	"\x16FILE_TYPE_PSPIMAGEFILE\x10u\x12\x15\n" +
	"\x11FILE_TYPE_PTSFILE\x10v\x12\x15\n" +
	"\x11FILE_TYPE_QXDFILE\x10w\x12\x15\n" +
	"\x11FILE_TYPE_QXPFILE\x10x\x12\x14\n" +
	"\x10FILE_TYPE_RAFILE\x10y\x12\x15\n" +
	"\x11FILE_TYPE_RARFILE\x10z\x12\x16\n" +
	"\x12FILE_TYPE_RELSFILE\x10{\x12\x14\n" +
	"\x10FILE_TYPE_RMFILE\x10|\x12\x15\n" +
	"\x11FILE_TYPE_ROMFILE\x10}\x12\x15\n" +
	"\x11FILE_TYPE_RSSFILE\x10~\x12\x15\n" +
	"\x11FILE_TYPE_RTFFILE\x10\x7f\x12\x16\n" +
	"\x11FILE_TYPE_SAVFILE\x10\x80\x01\x12\x16\n" +
	"\x11FILE_TYPE_SD2FILE\x10\x81\x01\x12\x16\n" +
	"\x11FILE_TYPE_SDFFILE\x10\x82\x01\x12\x16\n" +
	"\x11FILE_TYPE_SITFILE\x10\x83\x01\x12\x17\n" +
	"\x12FILE_TYPE_SITXFILE\x10\x84\x01\x12\x16\n" +
	"\x11FILE_TYPE_SQLFILE\x10\x85\x01\x12\x16\n" +
	"\x11FILE_TYPE_SVGFILE\x10\x86\x01\x12\x16\n" +
	"\x11FILE_TYPE_SWFFILE\x10\x87\x01\x12\x16\n" +
	"\x11FILE_TYPE_SYSFILE\x10\x88\x01\x12\x16\n" +
	"\x11FILE_TYPE_TARFILE\x10\x89\x01\x12\x18\n" +
	"\x13FILE_TYPE_TARGZFILE\x10\x8a\x01\x12\x16\n" +
	"\x11FILE_TYPE_THMFILE\x10\x8b\x01\x12\x16\n" +
	"\x11FILE_TYPE_TIFFILE\x10\x8c\x01\x12\x16\n" +
	"\x11FILE_TYPE_TMPFILE\x10\x8d\x01\x12\x18\n" +
	"\x13FILE_TYPE_TOASTFILE\x10\x8e\x01\x12\x16\n" +
	"\x11FILE_TYPE_TTFFILE\x10\x8f\x01\x12\x16\n" +
	"\x11FILE_TYPE_TXTFILE\x10\x90\x01\x12\x16\n" +
	"\x11FILE_TYPE_UUEFILE\x10\x91\x01\x12\x15\n" +
	"\x10FILE_TYPE_VBFILE\x10\x92\x01\x12\x16\n" +
	"\x11FILE_TYPE_VCDFILE\x10\x93\x01\x12\x16\n" +
	"\x11FILE_TYPE_VCFFILE\x10\x94\x01\x12\x16\n" +
	"\x11FILE_TYPE_VOBFILE\x10\x95\x01\x12\x16\n" +
	"\x11FILE_TYPE_WAVFILE\x10\x96\x01\x12\x16\n" +
	"\x11FILE_TYPE_WKSFILE\x10\x97\x01\x12\x16\n" +
	"\x11FILE_TYPE_WMAFILE\x10\x98\x01\x12\x16\n" +
	"\x11FILE_TYPE_WMVFILE\x10\x99\x01\x12\x16\n" +
	"\x11FILE_TYPE_WPDFILE\x10\x9a\x01\x12\x16\n" +
	"\x11FILE_TYPE_WPSFILE\x10\x9b\x01\x12\x16\n" +
	"\x11FILE_TYPE_WSFFILE\x10\x9c\x01\x12\x18\n" +
	"\x13FILE_TYPE_XHTMLFILE\x10\x9d\x01\x12\x16\n" +
	"\x11FILE_TYPE_XLLFILE\x10\x9e\x01\x12\x16\n" +
	"\x11FILE_TYPE_XLSFILE\x10\x9f\x01\x12\x17\n" +
	"\x12FILE_TYPE_XLSXFILE\x10\xa0\x01\x12\x16\n" +
	"\x11FILE_TYPE_XMLFILE\x10\xa1\x01\x12\x16\n" +
	"\x11FILE_TYPE_YUVFILE\x10\xa2\x01\x12\x16\n" +
	"\x11FILE_TYPE_ZIPFILE\x10\xa3\x01\x12\x17\n" +
	"\x12FILE_TYPE_ZIPXFILE\x10\xa4\x01*\x97\x01\n" +
	"\x18FingerprintAlgorithmType\x12*\n" +
	"&FINGERPRINT_ALGORITHM_TYPE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fFINGERPRINT_ALGORITHM_TYPE_ISCC\x10\x01\x12*\n" +
	"&FINGERPRINT_ALGORITHM_TYPE_USERDEFINED\x10\x02*~\n" +
	"\tFrameRate\x12\x1a\n" +
	"\x16FRAME_RATE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fFRAME_RATE_E_24\x10\x01\x12\x13\n" +
	"\x0fFRAME_RATE_E_25\x10\x02\x12\x16\n" +
	"\x12FRAME_RATE_E_29_97\x10\x03\x12\x13\n" +
	"\x0fFRAME_RATE_E_30\x10\x04*w\n" +
	"\x06Gender\x12\x16\n" +
	"\x12GENDER_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12GENDER_ANDROGYNOUS\x10\x01\x12\x13\n" +
	"\x0fGENDER_FEMININE\x10\x02\x12\x14\n" +
	"\x10GENDER_MASCULINE\x10\x03\x12\x12\n" +
	"\x0eGENDER_UNKNOWN\x10\x04*\x8a\x02\n" +
	"\tGenderPIE\x12\x1c\n" +
	"\x18GENDER_P_I_E_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13GENDER_P_I_E_FEMALE\x10\x01\x12\x15\n" +
	"\x11GENDER_P_I_E_MALE\x10\x02\x12\x1e\n" +
	"\x1aGENDER_P_I_E_NOTAPPLICABLE\x10\x03\x12\x1a\n" +
	"\x16GENDER_P_I_E_NONBINARY\x10\x04\x12\x1a\n" +
	"\x16GENDER_P_I_E_NOTSTATED\x10\x05\x12\x1f\n" +
	"\x1bGENDER_P_I_E_PREFERNOTTOSAY\x10\x06\x12\x18\n" +
	"\x14GENDER_P_I_E_UNKNOWN\x10\a\x12\x1c\n" +
	"\x18GENDER_P_I_E_USERDEFINED\x10\b*\xa5\x01\n" +
	"\x16GoverningAgreementType\x12(\n" +
	"$GOVERNING_AGREEMENT_TYPE_UNSPECIFIED\x10\x00\x127\n" +
	"3GOVERNING_AGREEMENT_TYPE_SESSIONMUSICUNIONAGREEMENT\x10\x01\x12(\n" +
	"$GOVERNING_AGREEMENT_TYPE_USERDEFINED\x10\x02*\xc2\x01\n" +
	"\x1bHdrVideoDynamicMetadataType\x12/\n" +
	"+HDR_VIDEO_DYNAMIC_METADATA_TYPE_UNSPECIFIED\x10\x00\x127\n" +
	"3HDR_VIDEO_DYNAMIC_METADATA_TYPE_DOLBYVISIONEMBEDDED\x10\x01\x129\n" +
	"5HDR_VIDEO_DYNAMIC_METADATA_TYPE_DOLBYVISIONSTANDALONE\x10\x02*\xa3\x01\n" +
	"\x1aHdrVideoStaticMetadataType\x12.\n" +
	"*HDR_VIDEO_STATIC_METADATA_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%HDR_VIDEO_STATIC_METADATA_TYPE_MAXCLL\x10\x01\x12*\n" +
	"&HDR_VIDEO_STATIC_METADATA_TYPE_MAXFALL\x10\x02*\xfb\x01\n" +
	"\x0eImageCodecType\x12 \n" +
	"\x1cIMAGE_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14IMAGE_CODEC_TYPE_GIF\x10\x01\x12\x19\n" +
	"\x15IMAGE_CODEC_TYPE_JPEG\x10\x02\x12\x1d\n" +
	"\x19IMAGE_CODEC_TYPE_JPEG2000\x10\x03\x12\x18\n" +
	"\x14IMAGE_CODEC_TYPE_PNG\x10\x04\x12\x19\n" +
	"\x15IMAGE_CODEC_TYPE_TIFF\x10\x05\x12\x1c\n" +
	"\x18IMAGE_CODEC_TYPE_UNKNOWN\x10\x06\x12 \n" +
	"\x1cIMAGE_CODEC_TYPE_USERDEFINED\x10\a*j\n" +
	"\x16InstrumentManufacturer\x12'\n" +
	"#INSTRUMENT_MANUFACTURER_UNSPECIFIED\x10\x00\x12'\n" +
	"#INSTRUMENT_MANUFACTURER_USERDEFINED\x10\x01*U\n" +
	"\x0fInstrumentModel\x12 \n" +
	"\x1cINSTRUMENT_MODEL_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cINSTRUMENT_MODEL_USERDEFINED\x10\x01*ڶ\x01\n" +
	"\x0eInstrumentType\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_ACCORDION\x10\x01\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_BANDONEON\x10\x02\x12,\n" +
	"(INSTRUMENT_TYPE_CHROMATICBUTTONACCORDION\x10\x03\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_CONCERTINA\x10\x04\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CORDOVOX\x10\x05\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_MELODEON\x10\x06\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_MUSETTE\x10\a\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_PIANOACCORDION\x10\b\x12 \n" +
	"\x1cINSTRUMENT_TYPE_TOYACCORDION\x10\t\x12&\n" +
	"\"INSTRUMENT_TYPE_ACOUSTICBASSGUITAR\x10\n" +
	"\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_BABYBASS\x10\v\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_BASS\x10\f\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_BASSGUITAR\x10\r\x12&\n" +
	"\"INSTRUMENT_TYPE_ELECTRICBASSGUITAR\x10\x0e\x12&\n" +
	"\"INSTRUMENT_TYPE_FRETLESSBASSGUITAR\x10\x0f\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_PICCOLOBASS\x10\x10\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_UPRIGHTBASS\x10\x11\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_WASHTUBBASS\x10\x12\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_DRUMMACHINE\x10\x13\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_BREAKBEAT\x10\x14\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_DRUMKIT\x10\x15\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_DRUMSAMPLE\x10\x16\x12-\n" +
	")INSTRUMENT_TYPE_E_12_STRINGELECTRICGUITAR\x10\x17\x12%\n" +
	"!INSTRUMENT_TYPE_E_12_STRINGGUITAR\x10\x18\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_ACOUSTICGUITAR\x10\x19\x12 \n" +
	"\x1cINSTRUMENT_TYPE_BAHIANGUITAR\x10\x1a\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_BAJOSEXTO\x10\x1b\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_BARITONEGUITAR\x10\x1c\x12!\n" +
	"\x1dINSTRUMENT_TYPE_BAROQUEGUITAR\x10\x1d\x12 \n" +
	"\x1cINSTRUMENT_TYPE_CHAPMANSTICK\x10\x1e\x12%\n" +
	"!INSTRUMENT_TYPE_NYLONSTRINGGUITAR\x10\x1f\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_DOBROGUITAR\x10 \x12\"\n" +
	"\x1eINSTRUMENT_TYPE_ELECTRICGUITAR\x10!\x12!\n" +
	"\x1dINSTRUMENT_TYPE_ELECTRICSITAR\x10\"\x12#\n" +
	"\x1fINSTRUMENT_TYPE_FRYINGPANGUITAR\x10#\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_GUITAR\x10$\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_GUITARRON\x10%\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_LAPSTEELGUITAR\x10&\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_PEDABRO\x10'\x12$\n" +
	" INSTRUMENT_TYPE_PEDALSTEELGUITAR\x10(\x12$\n" +
	" INSTRUMENT_TYPE_PORTUGUESEGUITAR\x10)\x12%\n" +
	"!INSTRUMENT_TYPE_RENAISSANCEGUITAR\x10*\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_ROMANTICGUITAR\x10+\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_TENORGUITAR\x10,\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_TIPLE\x10-\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_TOUCHGUITAR\x10.\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_TRES\x10/\x12 \n" +
	"\x1cINSTRUMENT_TYPE_VIOLACAIPIRA\x100\x12$\n" +
	" INSTRUMENT_TYPE_ACOUSTICKEYBOARD\x101\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_CELESTA\x102\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_CHAMBERLIN\x103\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_CLAVICHORD\x104\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CLAVINET\x105\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_DULCITONE\x106\x12!\n" +
	"\x1dINSTRUMENT_TYPE_ELECTRICPIANO\x107\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_HARPSICHORD\x108\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_KEYBOARD\x109\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_KLAVIER\x10:\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_MELLOTRON\x10;\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_OPTIGAN\x10<\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_PIANET\x10=\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_RHODES\x10>\x12#\n" +
	"\x1fINSTRUMENT_TYPE_SAMPLEDKEYBOARD\x10?\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_SPINET\x10@\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_VAKOORCHESTRON\x10A\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_VIRGINALS\x10B\x12!\n" +
	"\x1dINSTRUMENT_TYPE_ELECTRICORGAN\x10C\x12 \n" +
	"\x1cINSTRUMENT_TYPE_HAMMONDORGAN\x10D\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_LOWREYORGAN\x10E\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_ORGAN\x10F\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_PIPEORGAN\x10G\x12!\n" +
	"\x1dINSTRUMENT_TYPE_POSITIVEORGAN\x10H\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_PUMPORGAN\x10I\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_BARRELORGAN\x10J\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_BICYCLEPUMP\x10K\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_CHURCHBELLS\x10L\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_COMB\x10M\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_DICTOPHONE\x10N\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_HOHNERGUITARET\x10O\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_JEWSHARP\x10P\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_KAZOO\x10Q\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_MUSICBOX\x10R\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_OMNICHORD\x10S\x12#\n" +
	"\x1fINSTRUMENT_TYPE_OTHERINSTRUMENT\x10T\x12+\n" +
	"'INSTRUMENT_TYPE_SPECTRASONICSOMNISPHERE\x10U\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_TOYPIANO\x10V\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_TURNTABLE\x10W\x12%\n" +
	"!INSTRUMENT_TYPE_AFRICANPERCUSSION\x10X\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_AGOGOBELLS\x10Y\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_ANGKLUNG\x10Z\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_ANVIL\x10[\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_ATUMPAN\x10\\\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_BALAFON\x10]\x12$\n" +
	" INSTRUMENT_TYPE_BASSDRUM_CONCERT\x10^\x12!\n" +
	"\x1dINSTRUMENT_TYPE_BASSDRUM_KICK\x10_\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_BATA\x10`\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_BELLS\x10a\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_BELLTREE\x10b\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_BENDIR\x10c\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_BERIMBAU\x10d\x12\x1e\n" +
	"\x1aINSTRUMENT_TYPE_BINGHIDRUM\x10e\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_BODHRAN\x10f\x12\"\n" +
	"\x1eINSTRUMENT_TYPE_BODYPERCUSSION\x10g\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_BOMBO\x10h\x12 \n" +
	"\x1cINSTRUMENT_TYPE_BOMBOLEGUERO\x10i\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_BONES\x10j\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_BONGOS\x10k\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_BOTTLES\x10l\x12'\n" +
	"#INSTRUMENT_TYPE_BRAZILIANPERCUSSION\x10m\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_CABASA\x10n\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_CAIXA\x10o\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_CAJA\x10p\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_CAJON\x10q\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CALABASH\x10r\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CARILLON\x10s\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CASTANET\x10t\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_CAXIXI\x10u\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_CHIMES\x10v\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CHOCALHO\x10w\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_CLAPSTICK\x10x\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_CLAVES\x10y\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_CLAYPOT\x10z\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_CONGAS\x10{\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_COWBELL\x10|\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CROTALES\x10}\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_CUICA\x10~\x12 \n" +
	"\x1cINSTRUMENT_TYPE_CYMBAL_CRASH\x10\x7f\x12 \n" +
	"\x1bINSTRUMENT_TYPE_CYMBAL_RIDE\x10\x80\x01\x12%\n" +
	" INSTRUMENT_TYPE_CYMBAL_SUSPENDED\x10\x81\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_CYMBALS\x10\x82\x01\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_DAF\x10\x83\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_DAMARU\x10\x84\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DAVUL\x10\x85\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DAYEREH\x10\x86\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_DEFI\x10\x87\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_DHOL\x10\x88\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_DHOLAK\x10\x89\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_DJEMBE\x10\x8a\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DOHOL\x10\x8b\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DOUMBEK\x10\x8c\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_DRUM\x10\x8d\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_DRUMSTICKS\x10\x8e\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DUGGI\x10\x8f\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DUNUN\x10\x90\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ELEPHANTBELL\x10\x91\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_FINGERCLICKS\x10\x92\x01\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_FINGERCYMBALS\x10\x93\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_FINGERSNAPS\x10\x94\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_FLEXATONE\x10\x95\x01\x12(\n" +
	"#INSTRUMENT_TYPE_FOLKLORICPERCUSSION\x10\x96\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_FOOTSTOMP\x10\x97\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_FROG\x10\x98\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GAMBANG\x10\x99\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GAMELAN\x10\x9a\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GANGA\x10\x9b\x01\x12#\n" +
	"\x1eINSTRUMENT_TYPE_GLASSHARMONICA\x10\x9c\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_GLASSHARP\x10\x9d\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_GLOCKENSPIEL\x10\x9e\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_GONG\x10\x9f\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_GUACHARACA\x10\xa0\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_GUACHE\x10\xa1\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GUIRA\x10\xa2\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GUIRO\x10\xa3\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_HANDBELLS\x10\xa4\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_HANDCHIMES\x10\xa5\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_HANDCLAPS\x10\xa6\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_HIHATCYMBAL\x10\xa7\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_JAMBLOCK\x10\xa8\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_JAWBONE\x10\xa9\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_JAWHARP\x10\xaa\x01\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_JUG\x10\xab\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_KALIMBA\x10\xac\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_KANJIRA\x10\xad\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_KATSA\x10\xae\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_KENDANG\x10\xaf\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_KHAMAK\x10\xb0\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_KHARTAL\x10\xb1\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_KHOL\x10\xb2\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_KHONGWONGLEK\x10\xb3\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_KHONGWONGYAI\x10\xb4\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_KNUCKLES\x10\xb5\x01\x12$\n" +
	"\x1fINSTRUMENT_TYPE_LATINPERCUSSION\x10\xb6\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_LITHOPHONE\x10\xb7\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_LOKOLE\x10\xb8\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_MADAL\x10\xb9\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_MARACAS\x10\xba\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_MARIMBA\x10\xbb\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_MARIMBAPHONE\x10\xbc\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MARIMBULA\x10\xbd\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_MAZHAR\x10\xbe\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_MBIRA\x10\xbf\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_METALCANS\x10\xc0\x01\x12$\n" +
	"\x1fINSTRUMENT_TYPE_MOUTHPERCUSSION\x10\xc1\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MRIDANGAM\x10\xc2\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MUHARSING\x10\xc3\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_NAAL\x10\xc4\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_NAGARA\x10\xc5\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_OBOROMDRUM\x10\xc6\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_OCTOBAN\x10\xc7\x01\x12)\n" +
	"$INSTRUMENT_TYPE_ORCHESTRALPERCUSSION\x10\xc8\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_PADDLEDRUMS\x10\xc9\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_PANDEIRO\x10\xca\x01\x12)\n" +
	"$INSTRUMENT_TYPE_PERCUSSIONINSTRUMENT\x10\xcb\x01\x120\n" +
	"+INSTRUMENT_TYPE_PITCHEDPERCUSSIONINSTRUMENT\x10\xcc\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_PONGLANG\x10\xcd\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_POTSANDPANS\x10\xce\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_QARKABEB\x10\xcf\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_RAINSTICK\x10\xd0\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_RANAT\x10\xd1\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_RATCHET\x10\xd2\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_RATTLE\x10\xd3\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_RECORECO\x10\xd4\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_REPINIQUE\x10\xd5\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_RHYTHMSTICK\x10\xd6\x01\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_RIQ\x10\xd7\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_RNGA\x10\xd8\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_ROLMO\x10\xd9\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_ROTOTOMS\x10\xda\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SABAR\x10\xdb\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SANDBLOCKS\x10\xdc\x01\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_SAW\x10\xdd\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SCRATCHER\x10\xde\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SHAKER\x10\xdf\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SHEKERE\x10\xe0\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SINGINGBOWLS\x10\xe1\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SISTRUM\x10\xe2\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SLAPSTICK\x10\xe3\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_SLEIGHBELLS\x10\xe4\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SNAREDRUM\x10\xe5\x01\x12'\n" +
	"\"INSTRUMENT_TYPE_SNAREDRUM_MARCHING\x10\xe6\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SPOONS\x10\xe7\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SPRINGDRUM\x10\xe8\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_STEELDRUMS\x10\xe9\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_STICKS\x10\xea\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SURDO\x10\xeb\x01\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_TAAL\x10\xec\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TAARIJA\x10\xed\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TABLA\x10\xee\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TABOR\x10\xef\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TAIKO\x10\xf0\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_TALKINGDRUM\x10\xf1\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TAMBORA\x10\xf2\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_TAMBORIM\x10\xf3\x01\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TAMBOUR\x10\xf4\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TAMBOURINE\x10\xf5\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_TAMTAM\x10\xf6\x01\x12 \n" +
	"\x1bINSTRUMENT_TYPE_TAONGAPUORO\x10\xf7\x01\x12#\n" +
	"\x1eINSTRUMENT_TYPE_TAR_PERCUSSION\x10\xf8\x01\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TAROL\x10\xf9\x01\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TEMPLEBELL\x10\xfa\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TEMPLEBLOCKS\x10\xfb\x01\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_TENORDRUM\x10\xfc\x01\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_THAVIL\x10\xfd\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_THUNDERSHEET\x10\xfe\x01\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TIBETANBELLS\x10\xff\x01\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_TIMBALES\x10\x80\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_TIMBAU\x10\x81\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TIMPANI\x10\x82\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TINGSHA\x10\x83\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_TOMPAK\x10\x84\x02\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_TOMS\x10\x85\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TONGUEDRUM\x10\x86\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_TRIANGLE\x10\x87\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TXALAPARTA\x10\x88\x02\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_UDU\x10\x89\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_ULIULI\x10\x8a\x02\x122\n" +
	"-INSTRUMENT_TYPE_UNPITCHEDPERCUSSIONINSTRUMENT\x10\x8b\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_URUMEE\x10\x8c\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_VIBRAPHONE\x10\x8d\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_VIBRASLAP\x10\x8e\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_WASHBOARD\x10\x8f\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_WATERPHONE\x10\x90\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_WINDCHIMES\x10\x91\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_WINDMACHINE\x10\x92\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_WOBBLEBOARD\x10\x93\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_WOODBLOCK\x10\x94\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_XYLOPHONE\x10\x95\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_XYLORIMBA\x10\x96\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_ZERBAGHALI\x10\x97\x02\x12#\n" +
	"\x1eINSTRUMENT_TYPE_ZYDECORUBBOARD\x10\x98\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_FORTEPIANO\x10\x99\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_GRANDPIANO\x10\x9a\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_LUTHEAL\x10\x9b\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_PIANO\x10\x9c\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_PIANOHARP\x10\x9d\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_PIANOLA\x10\x9e\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_PREPAREDPIANO\x10\x9f\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_SQUAREPIANO\x10\xa0\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_TACKPIANO\x10\xa1\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_UPRIGHTPIANO\x10\xa2\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ANIMALSOUNDS\x10\xa3\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_APPLAUSE\x10\xa4\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BIRDSONG\x10\xa5\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_CARSOUNDS\x10\xa6\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_CHATTER\x10\xa7\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_CHEWINGSOUNDS\x10\xa8\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GIZMO\x10\xa9\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_GUNSHOTS\x10\xaa\x02\x12+\n" +
	"&INSTRUMENT_TYPE_MAGNETICTAPETREATMENTS\x10\xab\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_ORCHESTRALHIT\x10\xac\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_RECORDNOISE\x10\xad\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SIREN\x10\xae\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_SOUNDDESIGN\x10\xaf\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SOUNDEFFECTS\x10\xb0\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_TRAINSOUNDS\x10\xb1\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TREATMENTS\x10\xb2\x02\x12(\n" +
	"#INSTRUMENT_TYPE_UNINTENDEDARTIFACTS\x10\xb3\x02\x12$\n" +
	"\x1fINSTRUMENT_TYPE_E_5_STRINGBANJO\x10\xb4\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_AFRICANHARP\x10\xb5\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_ALTOVIOL\x10\xb6\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_ANDEANHARP\x10\xb7\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_ARCHLUTE\x10\xb8\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_AUTOHARP\x10\xb9\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BAGLAMA\x10\xba\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BALALAIKA\x10\xbb\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BANDURA\x10\xbc\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BANDURRIA\x10\xbd\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_BANHU\x10\xbe\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_BANJO\x10\xbf\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BANJOGUITAR\x10\xc0\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BANJOLIN\x10\xc1\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BAROQUECELLO\x10\xc2\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BAROQUEVIOLA\x10\xc3\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_BAROQUEVIOLIN\x10\xc4\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BARYTON\x10\xc5\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BASSBANJO\x10\xc6\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BASSCITTERN\x10\xc7\x02\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BASSREBEC\x10\xc8\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BASSVIOL\x10\xc9\x02\x12#\n" +
	"\x1eINSTRUMENT_TYPE_BASSODABRACCIO\x10\xca\x02\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_BIWA\x10\xcb\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BOUZOUKI\x10\xcc\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BOWEDSTRINGS\x10\xcd\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_BOZOQ\x10\xce\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BUFOBASS\x10\xcf\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_CAVAQUINHO\x10\xd0\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_CELLO\x10\xd1\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_CELLOBANJO\x10\xd2\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_CELTICHARP\x10\xd3\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CHARANGO\x10\xd4\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CIMBALOM\x10\xd5\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_CITOLE\x10\xd6\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_CITTERN\x10\xd7\x02\x12 \n" +
	"\x1bINSTRUMENT_TYPE_CONCERTHARP\x10\xd8\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CRAVIOLA\x10\xd9\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_CRWTH\x10\xda\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_CUATRO\x10\xdb\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_CUMBUS\x10\xdc\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_DANBAU\x10\xdd\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_DANTRANH\x10\xde\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DILRUBA\x10\xdf\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_DOMBRA\x10\xe0\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DOMRA\x10\xe1\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_DOUBLEBASS\x10\xe2\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_DOUBLEHARP\x10\xe3\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_DOUBLEVIOLIN\x10\xe4\x02\x12#\n" +
	"\x1eINSTRUMENT_TYPE_DOUBLEBASSVIOL\x10\xe5\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DRANYEN\x10\xe6\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DUTAR\x10\xe7\x02\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_DZUDDAHORD\x10\xe8\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_EKTARA\x10\xe9\x02\x12*\n" +
	"%INSTRUMENT_TYPE_ELECTRIC6STRINGVIOLIN\x10\xea\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_ELECTRICCELLO\x10\xeb\x02\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ELECTRICHARP\x10\xec\x02\x12%\n" +
	" INSTRUMENT_TYPE_ELECTRICMANDOLIN\x10\xed\x02\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_ELECTRICVIOLA\x10\xee\x02\x12#\n" +
	"\x1eINSTRUMENT_TYPE_ELECTRICVIOLIN\x10\xef\x02\x12.\n" +
	")INSTRUMENT_TYPE_ELECTROACOUSTICHURDYGURDY\x10\xf0\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_ENNANGA\x10\xf1\x02\x12&\n" +
	"!INSTRUMENT_TYPE_EPINETTEDESVOSGES\x10\xf2\x02\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_ERHU\x10\xf3\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_ESRAJ\x10\xf4\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_FIDDLE\x10\xf5\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_FOLKHARP\x10\xf6\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GADULKA\x10\xf7\x02\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_GARDON\x10\xf8\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_GAYAGEUM\x10\xf9\x02\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_GHAYCHAK\x10\xfa\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GITTERN\x10\xfb\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GUQIN\x10\xfc\x02\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GUSLI\x10\xfd\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GUZHENG\x10\xfe\x02\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_HAEGEUM\x10\xff\x02\x12%\n" +
	" INSTRUMENT_TYPE_HAMMEREDDULCIMER\x10\x80\x03\x12$\n" +
	"\x1fINSTRUMENT_TYPE_HAMMEREDSTRINGS\x10\x81\x03\x12$\n" +
	"\x1fINSTRUMENT_TYPE_HARDANGERFIDDLE\x10\x82\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_HARP\x10\x83\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_HUAPANGUERA\x10\x84\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_HURDYGURDY\x10\x85\x03\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_IRISHBOUZOUKI\x10\x86\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_JAKHAY\x10\x87\x03\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_JARANAJAROCHA\x10\x88\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_JINGHU\x10\x89\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_KACAPI\x10\x8a\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_KANTELE\x10\x8b\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_KANUN\x10\x8c\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_KEMENCHE\x10\x8d\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_KHIM\x10\x8e\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_KORA\x10\x8f\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_KOTO\x10\x90\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_KUGO\x10\x91\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_LANGELEIK\x10\x92\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_LAOUTO\x10\x93\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_LEONA\x10\x94\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_LIRONE\x10\x95\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_LUTE\x10\x96\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_LYRAVIOL\x10\x97\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_LYRE\x10\x98\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MANDOCELLO\x10\x99\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_MANDOLA\x10\x9a\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MANDOLELE\x10\x9b\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_MANDOLIN\x10\x9c\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MANDOLINO\x10\x9d\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_MANDORE\x10\x9e\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MARXOPHONE\x10\x9f\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_MEDIEVALFIDDLE\x10\xa0\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_MEDIEVALHARP\x10\xa1\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MOHANVEENA\x10\xa2\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MUSICALBOW\x10\xa3\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_NGONI\x10\xa4\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_NJARKA\x10\xa5\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_NYATITI\x10\xa6\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_NYCKELHARPA\x10\xa7\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_ORGANISTRUM\x10\xa8\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_ORPHARION\x10\xa9\x03\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_OUD\x10\xaa\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_PANDURA\x10\xab\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_PARAGUAYANHARP\x10\xac\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_PHIN\x10\xad\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_PHONOFIDDLE\x10\xae\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_PIPA\x10\xaf\x03\x12$\n" +
	"\x1fINSTRUMENT_TYPE_PLUCKEDDULCIMER\x10\xb0\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_PLUCKEDSTRINGS\x10\xb1\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_PSALTERY\x10\xb2\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_RABEL\x10\xb3\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_REBAB\x10\xb4\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_REBEC\x10\xb5\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_RUAN\x10\xb6\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SANTOOR\x10\xb7\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SARANGI\x10\xb8\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SAROD\x10\xb9\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SAUNG\x10\xba\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_SAWDUANG\x10\xbb\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_SHAMISEN\x10\xbc\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SIMSIMIYYA\x10\xbd\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SINTIR\x10\xbe\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SITAR\x10\xbf\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SOPRANODOMRA\x10\xc0\x03\x12%\n" +
	" INSTRUMENT_TYPE_STRINGINSTRUMENT\x10\xc1\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_STROHLVIOLIN\x10\xc2\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_SURBAHAR\x10\xc3\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SWARMANDAL\x10\xc4\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TAMBURA\x10\xc5\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TANBOUR\x10\xc6\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TANPURA\x10\xc7\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TAR_STRING\x10\xc8\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TENORBANJO\x10\xc9\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TENORREBEC\x10\xca\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_TENORVIOL\x10\xcb\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_THEORBO\x10\xcc\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_TIMPLE\x10\xcd\x03\x12&\n" +
	"!INSTRUMENT_TYPE_TOGAMANGUITARVIOL\x10\xce\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_TREBLEREBEC\x10\xcf\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TREBLEVIOL\x10\xd0\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TROMBAMARINA\x10\xd1\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TUMBI\x10\xd2\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TZOURAS\x10\xd3\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_UKULELE\x10\xd4\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_VALIHA\x10\xd5\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_VEENA\x10\xd6\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_VENEZUELANHARP\x10\xd7\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_VERACRUZHARP\x10\xd8\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_VITAR\x10\xd9\x03\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_VICHITRAVEENA\x10\xda\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_VIELLE\x10\xdb\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_VIHUELA\x10\xdc\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_VIOL\x10\xdd\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_VIOLA\x10\xde\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_VIOLADAMORE\x10\xdf\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_VIOLADAGAMBA\x10\xe0\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_VIOLAPOMPOSA\x10\xe1\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_VIOLIN\x10\xe2\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_VIOLINOPICCOLO\x10\xe3\x03\x12$\n" +
	"\x1fINSTRUMENT_TYPE_WELSHTRIPLEHARP\x10\xe4\x03\x12#\n" +
	"\x1eINSTRUMENT_TYPE_WIRESTRUNGHARP\x10\xe5\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_XALAM\x10\xe6\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_YANGQIN\x10\xe7\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_YAYLITAMBUR\x10\xe8\x03\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_YOKIN\x10\xe9\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_YUEQIN\x10\xea\x03\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_ZEZE\x10\xeb\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_ZHONGHU\x10\xec\x03\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_ZITHER\x10\xed\x03\x12&\n" +
	"!INSTRUMENT_TYPE_ARPEGGIATINGSYNTH\x10\xee\x03\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_ONDESMARTENOT\x10\xef\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SAMPLER\x10\xf0\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SYNTHBASS\x10\xf1\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SYNTHBRASS\x10\xf2\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SYNTHCHOIR\x10\xf3\x03\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SYNTHFX\x10\xf4\x03\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SYNTHLEAD\x10\xf5\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_SYNTHPAD\x10\xf6\x03\x12$\n" +
	"\x1fINSTRUMENT_TYPE_SYNTHSTEELDRUMS\x10\xf7\x03\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SYNTHSTRINGS\x10\xf8\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_SYNTHESIZER\x10\xf9\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_THEREMIN\x10\xfa\x03\x12-\n" +
	"(INSTRUMENT_TYPE_GROUPBACKGROUNDVOCALISTS\x10\xfb\x03\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BOYVOICE\x10\xfc\x03\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_CHILDVOICE\x10\xfd\x03\x120\n" +
	"+INSTRUMENT_TYPE_CHILDRENSBACKGROUNDVOCALIST\x10\xfe\x03\x12 \n" +
	"\x1bINSTRUMENT_TYPE_FEMALEVOICE\x10\xff\x03\x12-\n" +
	"(INSTRUMENT_TYPE_FEMALEBACKGROUNDVOCALIST\x10\x80\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_GIRLVOICE\x10\x81\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_LEADVOCALIST\x10\x82\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_MALEVOICE\x10\x83\x04\x12+\n" +
	"&INSTRUMENT_TYPE_MALEBACKGROUNDVOCALIST\x10\x84\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MIXEDVOICE\x10\x85\x04\x12,\n" +
	"'INSTRUMENT_TYPE_MIXEDBACKGROUNDVOCALIST\x10\x86\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_NEUTRALVOICE\x10\x87\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_VOICE\x10\x88\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_ALBOKA\x10\x89\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_ALPENHORN\x10\x8a\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ALTOCLARINET\x10\x8b\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ALTOCRUMHORN\x10\x8c\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_ALTOFLUTE\x10\x8d\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_ALTOHORN\x10\x8e\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ALTORECORDER\x10\x8f\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_ALTOSACKBUT\x10\x90\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_ALTOSAXOPHONE\x10\x91\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_ALTOSHAWM\x10\x92\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_ALTOTROMBONE\x10\x93\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_APITO\x10\x94\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_ARGHUL\x10\x95\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_AULOCHROME\x10\x96\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BAGPIPES\x10\x97\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BANSURI\x10\x98\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BARITONEHORN\x10\x99\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BARITONEOBOE\x10\x9a\x04\x12&\n" +
	"!INSTRUMENT_TYPE_BARITONESAXOPHONE\x10\x9b\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_BAROQUEBASSOON\x10\x9c\x04\x12$\n" +
	"\x1fINSTRUMENT_TYPE_BAROQUECLARINET\x10\x9d\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BAROQUEFLUTE\x10\x9e\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BAROQUEOBOE\x10\x9f\x04\x12$\n" +
	"\x1fINSTRUMENT_TYPE_BAROQUERECORDER\x10\xa0\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BASSCLARINET\x10\xa1\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BASSDULCIAN\x10\xa2\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BASSFLUTE\x10\xa3\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_BASSHARMONICA\x10\xa4\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BASSOBOE\x10\xa5\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BASSRECORDER\x10\xa6\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BASSSACKBUT\x10\xa7\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_BASSSAXOPHONE\x10\xa8\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_BASSSHAWM\x10\xa9\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_BASSTROMBONE\x10\xaa\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BASSTRUMPET\x10\xab\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_BASSTUBA\x10\xac\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_BASSETCLARINET\x10\xad\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_BASSETHORN\x10\xae\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BASSOON\x10\xaf\x04\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_BAWU\x10\xb0\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_BIRDWHISTLE\x10\xb1\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_BOMBARD\x10\xb2\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_BOSUNSWHISTLE\x10\xb3\x04\x12$\n" +
	"\x1fINSTRUMENT_TYPE_BRASSINSTRUMENT\x10\xb4\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_BUGLE\x10\xb5\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CALLIOPE\x10\xb6\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_CHALUMEAU\x10\xb7\x04\x12'\n" +
	"\"INSTRUMENT_TYPE_CHROMATICHARMONICA\x10\xb8\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CIMBASSO\x10\xb9\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CLARINET\x10\xba\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_CLARINOTRUMPET\x10\xbb\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_CONCHSHELL\x10\xbc\x04\x12'\n" +
	"\"INSTRUMENT_TYPE_CONTRAALTOCLARINET\x10\xbd\x04\x12'\n" +
	"\"INSTRUMENT_TYPE_CONTRABASSCLARINET\x10\xbe\x04\x12'\n" +
	"\"INSTRUMENT_TYPE_CONTRABASSRECORDER\x10\xbf\x04\x12+\n" +
	"&INSTRUMENT_TYPE_CONTRABASSSARRUSOPHONE\x10\xc0\x04\x12(\n" +
	"#INSTRUMENT_TYPE_CONTRABASSSAXOPHONE\x10\xc1\x04\x12'\n" +
	"\"INSTRUMENT_TYPE_CONTRABASSTROMBONE\x10\xc2\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_CONTRABASSOON\x10\xc3\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_CORNET\x10\xc4\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CORNETTO\x10\xc5\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_CRUMHORN\x10\xc6\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DAEGEUM\x10\xc7\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_DIDGERIDOO\x10\xc8\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DIPLE\x10\xc9\x04\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_DIZI\x10\xca\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_DUDUK\x10\xcb\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_DULCIAN\x10\xcc\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_DUNGCHEN\x10\xcd\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_ENGLISHHORN\x10\xce\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_EUPHONIUM\x10\xcf\x04\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_FIFE\x10\xd0\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_FISCORN\x10\xd1\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_FLABIOL\x10\xd2\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_FLAGEOLET\x10\xd3\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_FLOYERA\x10\xd4\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_FLUGELHORN\x10\xd5\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_FLUTE\x10\xd6\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_FRENCHHORN\x10\xd7\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_FUJARA\x10\xd8\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_GASBA\x10\xd9\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_GEMSHORN\x10\xda\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_GERMANFLUTE\x10\xdb\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_GHAITA\x10\xdc\x04\x12&\n" +
	"!INSTRUMENT_TYPE_GREATBASSRECORDER\x10\xdd\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_GUANZI\x10\xde\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_GYALING\x10\xdf\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_HARMONICA\x10\xe0\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_HARMONIUM\x10\xe1\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_HECKELPHONE\x10\xe2\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_HELICON\x10\xe3\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_HERALDTRUMPET\x10\xe4\x04\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_HIGHLANDPIPES\x10\xe5\x04\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_HORN\x10\xe6\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_HOTFOUNTAINPEN\x10\xe7\x04\x12$\n" +
	"\x1fINSTRUMENT_TYPE_IRISHLOWWHISTLE\x10\xe8\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_JAGDHORN\x10\xe9\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_KAVAL\x10\xea\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_KEYEDTRUMPET\x10\xeb\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_KHENE\x10\xec\x04\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_KHLUI\x10\xed\x04\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_LAUNEDDAS\x10\xee\x04\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_LUR\x10\xef\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MELLOPHONE\x10\xf0\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_MELODICA\x10\xf1\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_MIJWIZ\x10\xf2\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_MINIATUREKHENE\x10\xf3\x04\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_MIZMAR\x10\xf4\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_MOUTHORGAN\x10\xf5\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_NADASWARAM\x10\xf6\x04\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_NAI\x10\xf7\x04\x12(\n" +
	"#INSTRUMENT_TYPE_NATIVEAMERICANFLUTE\x10\xf8\x04\x12 \n" +
	"\x1bINSTRUMENT_TYPE_NATURALHORN\x10\xf9\x04\x12#\n" +
	"\x1eINSTRUMENT_TYPE_NATURALTRUMPET\x10\xfa\x04\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_NEYFLUTE\x10\xfb\x04\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_OBOE\x10\xfc\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_OBOEDAMORE\x10\xfd\x04\x12!\n" +
	"\x1cINSTRUMENT_TYPE_OBOEDACACCIA\x10\xfe\x04\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_OCARINA\x10\xff\x04\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_OPHICLEIDE\x10\x80\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_PAIXIAO\x10\x81\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_PANFLUTE\x10\x82\x05\x12\x17\n" +
	"\x12INSTRUMENT_TYPE_PI\x10\x83\x05\x12$\n" +
	"\x1fINSTRUMENT_TYPE_PICCOLOCLARINET\x10\x84\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_PICCOLOFLUTE\x10\x85\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_PICCOLOTRUMPET\x10\x86\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_PINKILLU\x10\x87\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_POCKETTRUMPET\x10\x88\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_POLICEWHISTLE\x10\x89\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_POSTHORN\x10\x8a\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_PUNGI\x10\x8b\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_QUENA\x10\x8c\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_QUENACHO\x10\x8d\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_RACKETT\x10\x8e\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_RAUSCHPFEIFE\x10\x8f\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_RECORDER\x10\x90\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_REEDINSTRUMENT\x10\x91\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_REGAL\x10\x92\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_RONDADOR\x10\x93\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SACKBUT\x10\x94\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SARRUSOPHONE\x10\x95\x05\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SAXOPHONE\x10\x96\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_SERPENT\x10\x97\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SHAKUHACHI\x10\x98\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SHAWM\x10\x99\x05\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SHENAI\x10\x9a\x05\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SHELLTONE\x10\x9b\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SHENG\x10\x9c\x05\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_SHO\x10\x9d\x05\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SHOFAR\x10\x9e\x05\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_SHRUTIBOX\x10\x9f\x05\x12 \n" +
	"\x1bINSTRUMENT_TYPE_SHVIWHISTLE\x10\xa0\x05\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_SIKU\x10\xa1\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_SLIDESAXOPHONE\x10\xa2\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SLIDETRUMPET\x10\xa3\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SLIDEWHISTLE\x10\xa4\x05\x12&\n" +
	"!INSTRUMENT_TYPE_SOPRANINORECORDER\x10\xa5\x05\x12'\n" +
	"\"INSTRUMENT_TYPE_SOPRANINOSAXOPHONE\x10\xa6\x05\x12$\n" +
	"\x1fINSTRUMENT_TYPE_SOPRANOCLARINET\x10\xa7\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_SOPRANOCORNET\x10\xa8\x05\x12$\n" +
	"\x1fINSTRUMENT_TYPE_SOPRANOCRUMHORN\x10\xa9\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_SOPRANODULCIAN\x10\xaa\x05\x12$\n" +
	"\x1fINSTRUMENT_TYPE_SOPRANORECORDER\x10\xab\x05\x12%\n" +
	" INSTRUMENT_TYPE_SOPRANOSAXOPHONE\x10\xac\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_SOPRANOSHAWM\x10\xad\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_SOPRANOTRUMPET\x10\xae\x05\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SORDUN\x10\xaf\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_SOUSAPHONE\x10\xb0\x05\x12\x1b\n" +
	"\x16INSTRUMENT_TYPE_SULING\x10\xb1\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_SUONA\x10\xb2\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_TARKA\x10\xb3\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_TAROGATO\x10\xb4\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_TENORCRUMHORN\x10\xb5\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TENORDULCIAN\x10\xb6\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TENORFLUTE\x10\xb7\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_TENORRECORDER\x10\xb8\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TENORSACKBUT\x10\xb9\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_TENORSAXOPHONE\x10\xba\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TENORSHAWM\x10\xbb\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_TENORTROMBONE\x10\xbc\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_TINWHISTLE\x10\xbd\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_TROMBONE\x10\xbe\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_TRUMPET\x10\xbf\x05\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_TUBA\x10\xc0\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_TUSSELFLOYTE\x10\xc1\x05\x12!\n" +
	"\x1cINSTRUMENT_TYPE_UILLEANPIPES\x10\xc2\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_VALVETROMBONE\x10\xc3\x05\x12\x1d\n" +
	"\x18INSTRUMENT_TYPE_VUVUZELA\x10\xc4\x05\x12\x1f\n" +
	"\x1aINSTRUMENT_TYPE_WAGNERTUBA\x10\xc5\x05\x12 \n" +
	"\x1bINSTRUMENT_TYPE_WILLOWFLUTE\x10\xc6\x05\x12#\n" +
	"\x1eINSTRUMENT_TYPE_WINDINSTRUMENT\x10\xc7\x05\x12\x1e\n" +
	"\x19INSTRUMENT_TYPE_WOODFLUTE\x10\xc8\x05\x12 \n" +
	"\x1bINSTRUMENT_TYPE_WOODTRUMPET\x10\xc9\x05\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_WOT\x10\xca\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_XAPHOON\x10\xcb\x05\x12\x19\n" +
	"\x14INSTRUMENT_TYPE_XIAO\x10\xcc\x05\x12\x18\n" +
	"\x13INSTRUMENT_TYPE_XUN\x10\xcd\x05\x12\x1c\n" +
	"\x17INSTRUMENT_TYPE_ZUMMARA\x10\xce\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_ZURNA\x10\xcf\x05\x12\x1a\n" +
	"\x15INSTRUMENT_TYPE_CHOIR\x10\xd0\x05\x12&\n" +
	"!INSTRUMENT_TYPE_PERCUSSIONSECTION\x10\xd1\x05\x12\"\n" +
	"\x1dINSTRUMENT_TYPE_STRINGSECTION\x10\xd2\x05\x12 \n" +
	"\x1bINSTRUMENT_TYPE_WINDSECTION\x10\xd3\x05\x12 \n" +
	"\x1bINSTRUMENT_TYPE_USERDEFINED\x10\xd4\x05*\x9c@\n" +
	"\x15Iso31661TerritoryCode\x12'\n" +
	"#ISO31661_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AD\x10\x01\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AE\x10\x02\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AF\x10\x03\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AG\x10\x04\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AI\x10\x05\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AL\x10\x06\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AM\x10\a\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AN\x10\b\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AO\x10\t\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AQ\x10\n" +
	"\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AR\x10\v\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AS\x10\f\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AT\x10\r\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AU\x10\x0e\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AW\x10\x0f\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AX\x10\x10\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_AZ\x10\x11\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BA\x10\x12\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BB\x10\x13\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BD\x10\x14\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BE\x10\x15\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BF\x10\x16\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BG\x10\x17\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BH\x10\x18\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BI\x10\x19\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BJ\x10\x1a\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BL\x10\x1b\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BM\x10\x1c\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BN\x10\x1d\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BO\x10\x1e\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BQ\x10\x1f\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BR\x10 \x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BS\x10!\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BT\x10\"\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BV\x10#\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BW\x10$\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BY\x10%\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_BZ\x10&\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CA\x10'\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CC\x10(\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CD\x10)\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CF\x10*\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CG\x10+\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CH\x10,\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CI\x10-\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CK\x10.\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CL\x10/\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CM\x100\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CN\x101\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CO\x102\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CR\x103\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CS\x104\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CU\x105\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CV\x106\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CW\x107\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CX\x108\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CY\x109\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_CZ\x10:\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_DE\x10;\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_DJ\x10<\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_DK\x10=\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_DM\x10>\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_DO\x10?\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_DZ\x10@\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_EC\x10A\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_EE\x10B\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_EG\x10C\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_EH\x10D\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_ER\x10E\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_ES\x10F\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_ET\x10G\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_FI\x10H\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_FJ\x10I\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_FK\x10J\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_FM\x10K\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_FO\x10L\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_FR\x10M\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GA\x10N\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GB\x10O\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GD\x10P\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GE\x10Q\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GF\x10R\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GG\x10S\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GH\x10T\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GI\x10U\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GL\x10V\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GM\x10W\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GN\x10X\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GP\x10Y\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GQ\x10Z\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GR\x10[\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GS\x10\\\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GT\x10]\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GU\x10^\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GW\x10_\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_GY\x10`\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_HK\x10a\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_HM\x10b\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_HN\x10c\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_HR\x10d\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_HT\x10e\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_HU\x10f\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_ID\x10g\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_IE\x10h\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_IL\x10i\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_IM\x10j\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_IN\x10k\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_IO\x10l\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_IQ\x10m\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_IR\x10n\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_IS\x10o\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_IT\x10p\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_JE\x10q\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_JM\x10r\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_JO\x10s\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_JP\x10t\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_KE\x10u\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_KG\x10v\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_KH\x10w\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_KI\x10x\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_KM\x10y\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_KN\x10z\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_KP\x10{\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_KR\x10|\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_KW\x10}\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_KY\x10~\x12\x1e\n" +
	"\x1aISO31661_TERRITORY_CODE_KZ\x10\x7f\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_LA\x10\x80\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_LB\x10\x81\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_LC\x10\x82\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_LI\x10\x83\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_LK\x10\x84\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_LR\x10\x85\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_LS\x10\x86\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_LT\x10\x87\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_LU\x10\x88\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_LV\x10\x89\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_LY\x10\x8a\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MA\x10\x8b\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MC\x10\x8c\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MD\x10\x8d\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_ME\x10\x8e\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MF\x10\x8f\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MG\x10\x90\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MH\x10\x91\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MK\x10\x92\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_ML\x10\x93\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MM\x10\x94\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MN\x10\x95\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MO\x10\x96\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MP\x10\x97\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MQ\x10\x98\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MR\x10\x99\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MS\x10\x9a\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MT\x10\x9b\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MU\x10\x9c\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MV\x10\x9d\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MW\x10\x9e\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MX\x10\x9f\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MY\x10\xa0\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_MZ\x10\xa1\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NA\x10\xa2\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NC\x10\xa3\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NE\x10\xa4\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NF\x10\xa5\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NG\x10\xa6\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NI\x10\xa7\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NL\x10\xa8\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NO\x10\xa9\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NP\x10\xaa\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NR\x10\xab\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NU\x10\xac\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_NZ\x10\xad\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_OM\x10\xae\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PA\x10\xaf\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PE\x10\xb0\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PF\x10\xb1\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PG\x10\xb2\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PH\x10\xb3\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PK\x10\xb4\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PL\x10\xb5\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PM\x10\xb6\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PN\x10\xb7\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PR\x10\xb8\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PS\x10\xb9\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PT\x10\xba\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PW\x10\xbb\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_PY\x10\xbc\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_QA\x10\xbd\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_RE\x10\xbe\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_RO\x10\xbf\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_RS\x10\xc0\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_RU\x10\xc1\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_RW\x10\xc2\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SA\x10\xc3\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SB\x10\xc4\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SC\x10\xc5\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SD\x10\xc6\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SE\x10\xc7\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SG\x10\xc8\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SH\x10\xc9\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SI\x10\xca\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SJ\x10\xcb\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SK\x10\xcc\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SL\x10\xcd\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SM\x10\xce\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SN\x10\xcf\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SO\x10\xd0\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SR\x10\xd1\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SS\x10\xd2\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_ST\x10\xd3\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SV\x10\xd4\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SX\x10\xd5\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SY\x10\xd6\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_SZ\x10\xd7\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TC\x10\xd8\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TD\x10\xd9\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TF\x10\xda\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TG\x10\xdb\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TH\x10\xdc\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TJ\x10\xdd\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TK\x10\xde\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TL\x10\xdf\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TM\x10\xe0\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TN\x10\xe1\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TO\x10\xe2\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TR\x10\xe3\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TT\x10\xe4\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TV\x10\xe5\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TW\x10\xe6\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_TZ\x10\xe7\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_UA\x10\xe8\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_UG\x10\xe9\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_UM\x10\xea\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_US\x10\xeb\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_UY\x10\xec\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_UZ\x10\xed\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_VA\x10\xee\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_VC\x10\xef\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_VE\x10\xf0\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_VG\x10\xf1\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_VI\x10\xf2\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_VN\x10\xf3\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_VU\x10\xf4\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_WF\x10\xf5\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_WS\x10\xf6\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_YE\x10\xf7\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_YT\x10\xf8\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_ZA\x10\xf9\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_ZM\x10\xfa\x01\x12\x1f\n" +
	"\x1aISO31661_TERRITORY_CODE_ZW\x10\xfb\x01*\xcb\xc8\x01\n" +
	"\x18Iso639Part12LanguageCode\x12+\n" +
	"'ISO639_PART12_LANGUAGE_CODE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AA\x10\x01\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AAR\x10\x02\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AB\x10\x03\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ABK\x10\x04\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AE\x10\x05\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AVE\x10\x06\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AF\x10\a\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AFR\x10\b\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AK\x10\t\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AKA\x10\n" +
	"\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AM\x10\v\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AMH\x10\f\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AN\x10\r\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARG\x10\x0e\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AR\x10\x0f\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARA\x10\x10\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AS\x10\x11\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ASM\x10\x12\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AV\x10\x13\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AVA\x10\x14\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AY\x10\x15\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AYM\x10\x16\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_AZ\x10\x17\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AZE\x10\x18\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BA\x10\x19\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAK\x10\x1a\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BE\x10\x1b\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BEL\x10\x1c\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BG\x10\x1d\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BUL\x10\x1e\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BH\x10\x1f\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BIH\x10 \x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BI\x10!\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BIS\x10\"\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BM\x10#\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAM\x10$\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BN\x10%\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BEN\x10&\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BO\x10'\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BOD\x10(\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BR\x10)\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BRE\x10*\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_BS\x10+\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BOS\x10,\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CA\x10-\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CAT\x10.\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CE\x10/\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHE\x100\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CH\x101\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHA\x102\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CO\x103\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_COS\x104\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CR\x105\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CRE\x106\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CS\x107\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CES\x108\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CU\x109\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHU\x10:\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CV\x10;\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHV\x10<\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_CY\x10=\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CYM\x10>\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_DA\x10?\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DAN\x10@\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_DE\x10A\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DEU\x10B\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_DV\x10C\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DIV\x10D\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_DZ\x10E\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DZO\x10F\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_EE\x10G\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EWE\x10H\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_EL\x10I\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ELL\x10J\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_EN\x10K\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ENG\x10L\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_EO\x10M\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EPO\x10N\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ES\x10O\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SPA\x10P\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ET\x10Q\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EST\x10R\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_EU\x10S\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EUS\x10T\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FA\x10U\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FAS\x10V\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FF\x10W\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FUL\x10X\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FI\x10Y\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FIN\x10Z\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FJ\x10[\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FIJ\x10\\\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FO\x10]\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FAO\x10^\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FR\x10_\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRA\x10`\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_FY\x10a\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRY\x10b\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GA\x10c\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GLE\x10d\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GD\x10e\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GLA\x10f\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GL\x10g\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GLG\x10h\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GN\x10i\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GRN\x10j\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GU\x10k\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GUJ\x10l\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_GV\x10m\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GLV\x10n\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HA\x10o\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HAU\x10p\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HE\x10q\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HEB\x10r\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HI\x10s\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HIN\x10t\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HO\x10u\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HMO\x10v\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HR\x10w\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HRV\x10x\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HT\x10y\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HAT\x10z\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HU\x10{\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HUN\x10|\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HY\x10}\x12#\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HYE\x10~\x12\"\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_HZ\x10\x7f\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HER\x10\x80\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IA\x10\x81\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_INA\x10\x82\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ID\x10\x83\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IND\x10\x84\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IE\x10\x85\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ILE\x10\x86\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IG\x10\x87\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IBO\x10\x88\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_II\x10\x89\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_III\x10\x8a\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IK\x10\x8b\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IPK\x10\x8c\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IO\x10\x8d\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IDO\x10\x8e\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IS\x10\x8f\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ISL\x10\x90\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IT\x10\x91\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ITA\x10\x92\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_IU\x10\x93\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IKU\x10\x94\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_JA\x10\x95\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_JPN\x10\x96\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_JV\x10\x97\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_JAV\x10\x98\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KA\x10\x99\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAT\x10\x9a\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KG\x10\x9b\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KON\x10\x9c\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KI\x10\x9d\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KIK\x10\x9e\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KJ\x10\x9f\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KUA\x10\xa0\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KK\x10\xa1\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAZ\x10\xa2\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KL\x10\xa3\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAL\x10\xa4\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KM\x10\xa5\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KHM\x10\xa6\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KN\x10\xa7\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAN\x10\xa8\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KO\x10\xa9\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KOR\x10\xaa\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KR\x10\xab\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAU\x10\xac\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KS\x10\xad\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAS\x10\xae\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KU\x10\xaf\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KUR\x10\xb0\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KV\x10\xb1\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KOM\x10\xb2\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KW\x10\xb3\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_COR\x10\xb4\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_KY\x10\xb5\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KIR\x10\xb6\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LA\x10\xb7\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAT\x10\xb8\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LB\x10\xb9\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LTZ\x10\xba\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LG\x10\xbb\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUG\x10\xbc\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LI\x10\xbd\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LIM\x10\xbe\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LN\x10\xbf\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LIN\x10\xc0\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LO\x10\xc1\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAO\x10\xc2\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LT\x10\xc3\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LIT\x10\xc4\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LU\x10\xc5\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUB\x10\xc6\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_LV\x10\xc7\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAV\x10\xc8\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MG\x10\xc9\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MLG\x10\xca\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MH\x10\xcb\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAH\x10\xcc\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MI\x10\xcd\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MRI\x10\xce\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MK\x10\xcf\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MKD\x10\xd0\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ML\x10\xd1\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAL\x10\xd2\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MN\x10\xd3\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MON\x10\xd4\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MO\x10\xd5\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MR\x10\xd6\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAR\x10\xd7\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MS\x10\xd8\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MSA\x10\xd9\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MT\x10\xda\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MLT\x10\xdb\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_MY\x10\xdc\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MYA\x10\xdd\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NA\x10\xde\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NAU\x10\xdf\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NB\x10\xe0\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NOB\x10\xe1\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ND\x10\xe2\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NDE\x10\xe3\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NE\x10\xe4\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NEP\x10\xe5\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NG\x10\xe6\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NDO\x10\xe7\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NL\x10\xe8\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NLD\x10\xe9\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NN\x10\xea\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NNO\x10\xeb\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NO\x10\xec\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NOR\x10\xed\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NR\x10\xee\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NBL\x10\xef\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NV\x10\xf0\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NAV\x10\xf1\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_NY\x10\xf2\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NYA\x10\xf3\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_OC\x10\xf4\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OCI\x10\xf5\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_OJ\x10\xf6\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OJI\x10\xf7\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_OM\x10\xf8\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ORM\x10\xf9\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_OR\x10\xfa\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ORI\x10\xfb\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_OS\x10\xfc\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OSS\x10\xfd\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_PA\x10\xfe\x01\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAN\x10\xff\x01\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_PI\x10\x80\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PLI\x10\x81\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_PL\x10\x82\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_POL\x10\x83\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_PS\x10\x84\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PUS\x10\x85\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_PT\x10\x86\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_POR\x10\x87\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_QU\x10\x88\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QUE\x10\x89\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_RM\x10\x8a\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ROH\x10\x8b\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_RN\x10\x8c\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RUN\x10\x8d\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_RO\x10\x8e\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RON\x10\x8f\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_RU\x10\x90\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RUS\x10\x91\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_RW\x10\x92\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KIN\x10\x93\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SA\x10\x94\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAN\x10\x95\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SC\x10\x96\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SRD\x10\x97\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SD\x10\x98\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SND\x10\x99\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SE\x10\x9a\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SME\x10\x9b\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SG\x10\x9c\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAG\x10\x9d\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SI\x10\x9e\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SIN\x10\x9f\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SK\x10\xa0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SLK\x10\xa1\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SL\x10\xa2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SLV\x10\xa3\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SM\x10\xa4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMO\x10\xa5\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SN\x10\xa6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SNA\x10\xa7\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SO\x10\xa8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SOM\x10\xa9\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SQ\x10\xaa\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SQI\x10\xab\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SR\x10\xac\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SRP\x10\xad\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SS\x10\xae\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SSW\x10\xaf\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ST\x10\xb0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SOT\x10\xb1\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SU\x10\xb2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SUN\x10\xb3\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SV\x10\xb4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SWE\x10\xb5\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_SW\x10\xb6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SWA\x10\xb7\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TA\x10\xb8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TAM\x10\xb9\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TE\x10\xba\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TEL\x10\xbb\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TG\x10\xbc\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TGK\x10\xbd\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TH\x10\xbe\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_THA\x10\xbf\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TI\x10\xc0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TIR\x10\xc1\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TK\x10\xc2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TUK\x10\xc3\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TL\x10\xc4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TGL\x10\xc5\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TN\x10\xc6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TSN\x10\xc7\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TO\x10\xc8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TON\x10\xc9\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TR\x10\xca\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TUR\x10\xcb\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TS\x10\xcc\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TSO\x10\xcd\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TT\x10\xce\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TAT\x10\xcf\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TW\x10\xd0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TWI\x10\xd1\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_TY\x10\xd2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TAH\x10\xd3\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_UG\x10\xd4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UIG\x10\xd5\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_UK\x10\xd6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UKR\x10\xd7\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_UR\x10\xd8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_URD\x10\xd9\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_UZ\x10\xda\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UZB\x10\xdb\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_VE\x10\xdc\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_VEN\x10\xdd\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_VI\x10\xde\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_VIE\x10\xdf\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_VO\x10\xe0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_VOL\x10\xe1\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_WA\x10\xe2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WLN\x10\xe3\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_WO\x10\xe4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WOL\x10\xe5\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_XH\x10\xe6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_XHO\x10\xe7\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_YI\x10\xe8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_YID\x10\xe9\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_YO\x10\xea\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_YOR\x10\xeb\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ZA\x10\xec\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZHA\x10\xed\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ZH\x10\xee\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZHO\x10\xef\x02\x12#\n" +
	"\x1eISO639_PART12_LANGUAGE_CODE_ZU\x10\xf0\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZUL\x10\xf1\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ACE\x10\xf2\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ACH\x10\xf3\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ADA\x10\xf4\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ADY\x10\xf5\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AFA\x10\xf6\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AFH\x10\xf7\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AIN\x10\xf8\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AKK\x10\xf9\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ALE\x10\xfa\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ALG\x10\xfb\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ALT\x10\xfc\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ANG\x10\xfd\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ANP\x10\xfe\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_APA\x10\xff\x02\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARC\x10\x80\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARN\x10\x81\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARP\x10\x82\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ART\x10\x83\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ARW\x10\x84\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AST\x10\x85\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ATH\x10\x86\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AUS\x10\x87\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_AWA\x10\x88\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAD\x10\x89\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAI\x10\x8a\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAL\x10\x8b\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAN\x10\x8c\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAS\x10\x8d\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BAT\x10\x8e\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BEJ\x10\x8f\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BEM\x10\x90\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BER\x10\x91\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BGC\x10\x92\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BHO\x10\x93\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BIK\x10\x94\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BIN\x10\x95\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BLA\x10\x96\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BNT\x10\x97\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BRA\x10\x98\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BTK\x10\x99\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BUA\x10\x9a\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BUG\x10\x9b\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_BYN\x10\x9c\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CAD\x10\x9d\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CAI\x10\x9e\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CAR\x10\x9f\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CAU\x10\xa0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CEB\x10\xa1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CEL\x10\xa2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHB\x10\xa3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHG\x10\xa4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHK\x10\xa5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHM\x10\xa6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHN\x10\xa7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHO\x10\xa8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHP\x10\xa9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHR\x10\xaa\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CHY\x10\xab\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CMC\x10\xac\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CNR\x10\xad\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_COP\x10\xae\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CPE\x10\xaf\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CPF\x10\xb0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CPP\x10\xb1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CRH\x10\xb2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CRP\x10\xb3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CSB\x10\xb4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_CUS\x10\xb5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DAK\x10\xb6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DAR\x10\xb7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DAY\x10\xb8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DEL\x10\xb9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DEN\x10\xba\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DGR\x10\xbb\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DIN\x10\xbc\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DOI\x10\xbd\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DRA\x10\xbe\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DSB\x10\xbf\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DUA\x10\xc0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DUM\x10\xc1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_DYU\x10\xc2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EFI\x10\xc3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EGY\x10\xc4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EKA\x10\xc5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ELX\x10\xc6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ENM\x10\xc7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_EWO\x10\xc8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FAN\x10\xc9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FAT\x10\xca\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FIL\x10\xcb\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FIU\x10\xcc\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FON\x10\xcd\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRM\x10\xce\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRO\x10\xcf\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRR\x10\xd0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FRS\x10\xd1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_FUR\x10\xd2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GAA\x10\xd3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GAY\x10\xd4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GBA\x10\xd5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GEM\x10\xd6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GEZ\x10\xd7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GIL\x10\xd8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GMH\x10\xd9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GOH\x10\xda\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GON\x10\xdb\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GOR\x10\xdc\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GOT\x10\xdd\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GRB\x10\xde\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GRC\x10\xdf\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GSW\x10\xe0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_GWI\x10\xe1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HAI\x10\xe2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HAW\x10\xe3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HIL\x10\xe4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HIM\x10\xe5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HIT\x10\xe6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HMN\x10\xe7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HSB\x10\xe8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_HUP\x10\xe9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IBA\x10\xea\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IJO\x10\xeb\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ILO\x10\xec\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_INC\x10\xed\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_INE\x10\xee\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_INH\x10\xef\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IRA\x10\xf0\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_IRO\x10\xf1\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_JBO\x10\xf2\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_JPR\x10\xf3\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_JRB\x10\xf4\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAA\x10\xf5\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAB\x10\xf6\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAC\x10\xf7\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAM\x10\xf8\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAR\x10\xf9\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KAW\x10\xfa\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KBD\x10\xfb\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KHA\x10\xfc\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KHI\x10\xfd\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KHO\x10\xfe\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KMB\x10\xff\x03\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KOK\x10\x80\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KOS\x10\x81\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KPE\x10\x82\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KRC\x10\x83\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KRL\x10\x84\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KRO\x10\x85\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KRU\x10\x86\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KUM\x10\x87\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_KUT\x10\x88\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAD\x10\x89\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAH\x10\x8a\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LAM\x10\x8b\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LEZ\x10\x8c\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LOL\x10\x8d\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LOZ\x10\x8e\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUA\x10\x8f\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUI\x10\x90\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUN\x10\x91\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUO\x10\x92\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_LUS\x10\x93\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAD\x10\x94\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAG\x10\x95\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAI\x10\x96\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAK\x10\x97\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAN\x10\x98\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAP\x10\x99\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MAS\x10\x9a\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MDF\x10\x9b\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MDR\x10\x9c\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MEN\x10\x9d\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MGA\x10\x9e\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MIC\x10\x9f\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MIN\x10\xa0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MIS\x10\xa1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MKH\x10\xa2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MNC\x10\xa3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MNI\x10\xa4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MNO\x10\xa5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MOH\x10\xa6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MOS\x10\xa7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MUL\x10\xa8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MUN\x10\xa9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MUS\x10\xaa\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MWL\x10\xab\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MWR\x10\xac\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MYN\x10\xad\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_MYV\x10\xae\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NAH\x10\xaf\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NAI\x10\xb0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NAP\x10\xb1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NDS\x10\xb2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NEW\x10\xb3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NIA\x10\xb4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NIC\x10\xb5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NIU\x10\xb6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NOG\x10\xb7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NON\x10\xb8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NQO\x10\xb9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NSO\x10\xba\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NUB\x10\xbb\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NWC\x10\xbc\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NYM\x10\xbd\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NYN\x10\xbe\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NYO\x10\xbf\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_NZI\x10\xc0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OSA\x10\xc1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OTA\x10\xc2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_OTO\x10\xc3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAA\x10\xc4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAG\x10\xc5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAL\x10\xc6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAM\x10\xc7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAP\x10\xc8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PAU\x10\xc9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PEO\x10\xca\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PHI\x10\xcb\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PHN\x10\xcc\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PON\x10\xcd\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PRA\x10\xce\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_PRO\x10\xcf\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQA\x10\xd0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQB\x10\xd1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQC\x10\xd2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQD\x10\xd3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQE\x10\xd4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQF\x10\xd5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQG\x10\xd6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQH\x10\xd7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQI\x10\xd8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_QQJ\x10\xd9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RAJ\x10\xda\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RAP\x10\xdb\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RAR\x10\xdc\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ROA\x10\xdd\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ROM\x10\xde\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_RUP\x10\xdf\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAD\x10\xe0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAH\x10\xe1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAI\x10\xe2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAL\x10\xe3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAM\x10\xe4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAS\x10\xe5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SAT\x10\xe6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SCN\x10\xe7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SCO\x10\xe8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SEL\x10\xe9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SEM\x10\xea\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SGA\x10\xeb\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SGN\x10\xec\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SHN\x10\xed\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SID\x10\xee\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SIO\x10\xef\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SIT\x10\xf0\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SLA\x10\xf1\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMA\x10\xf2\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMI\x10\xf3\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMJ\x10\xf4\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMN\x10\xf5\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SMS\x10\xf6\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SNK\x10\xf7\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SOG\x10\xf8\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SON\x10\xf9\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SRN\x10\xfa\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SRR\x10\xfb\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SSA\x10\xfc\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SUK\x10\xfd\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SUS\x10\xfe\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SUX\x10\xff\x04\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SYC\x10\x80\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_SYR\x10\x81\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TAI\x10\x82\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TEM\x10\x83\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TER\x10\x84\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TET\x10\x85\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TIG\x10\x86\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TIV\x10\x87\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TKL\x10\x88\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TLH\x10\x89\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TLI\x10\x8a\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TMH\x10\x8b\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TOG\x10\x8c\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TPI\x10\x8d\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TSI\x10\x8e\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TUM\x10\x8f\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TUP\x10\x90\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TUT\x10\x91\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TVL\x10\x92\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_TYV\x10\x93\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UDM\x10\x94\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UGA\x10\x95\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UMB\x10\x96\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_UND\x10\x97\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_VAI\x10\x98\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_VOT\x10\x99\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WAK\x10\x9a\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WAL\x10\x9b\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WAR\x10\x9c\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WAS\x10\x9d\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_WEN\x10\x9e\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_XAL\x10\x9f\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_YAO\x10\xa0\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_YAP\x10\xa1\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_YPK\x10\xa2\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZAP\x10\xa3\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZBL\x10\xa4\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZEN\x10\xa5\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZGH\x10\xa6\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZND\x10\xa7\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZUN\x10\xa8\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZXX\x10\xa9\x05\x12$\n" +
	"\x1fISO639_PART12_LANGUAGE_CODE_ZZA\x10\xaa\x05*\xe1\x04\n" +
	"\x17Iso639Part3LanguageCode\x12*\n" +
	"&ISO639_PART3_LANGUAGE_CODE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_AAA\x10\x01\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_CMN\x10\x02\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_GBM\x10\x03\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_GCF\x10\x04\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_HNE\x10\x05\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_JAM\x10\x06\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_KFY\x10\a\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_KHW\x10\b\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_MCM\x10\t\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_MUP\x10\n" +
	"\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_SCK\x10\v\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_SCL\x10\f\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_SPV\x10\r\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_TCY\x10\x0e\x12\"\n" +
	"\x1eISO639_PART3_LANGUAGE_CODE_YUE\x10\x0f*\xed\"\n" +
	"\x0fIsoCurrencyCode\x12!\n" +
	"\x1dISO_CURRENCY_CODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AED\x10\x01\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AFN\x10\x02\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ALL\x10\x03\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AMD\x10\x04\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AOA\x10\x05\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ARS\x10\x06\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AUD\x10\a\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AWG\x10\b\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_AZN\x10\t\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BAM\x10\n" +
	"\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BBD\x10\v\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BDT\x10\f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BGN\x10\r\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BHD\x10\x0e\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BIF\x10\x0f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BMD\x10\x10\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BND\x10\x11\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BOB\x10\x12\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BOV\x10\x13\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BRL\x10\x14\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BSD\x10\x15\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BTN\x10\x16\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BWP\x10\x17\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BYR\x10\x18\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_BZD\x10\x19\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CAD\x10\x1a\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CDF\x10\x1b\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CHF\x10\x1c\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CLF\x10\x1d\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CLP\x10\x1e\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CNY\x10\x1f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_COP\x10 \x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_COU\x10!\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CRC\x10\"\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CUP\x10#\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CVE\x10$\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_CZK\x10%\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DJF\x10&\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DKK\x10'\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DOP\x10(\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_DZD\x10)\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_EGP\x10*\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ERN\x10+\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ETB\x10,\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_EUR\x10-\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_FJD\x10.\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_FKP\x10/\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GBP\x100\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GEL\x101\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GHS\x102\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GIP\x103\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GMD\x104\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GNF\x105\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GTQ\x106\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_GYD\x107\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HKD\x108\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HNL\x109\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HTG\x10:\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_HUF\x10;\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_IDR\x10<\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ILS\x10=\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_INR\x10>\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_IQD\x10?\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_IRR\x10@\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_ISK\x10A\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_JMD\x10B\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_JOD\x10C\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_JPY\x10D\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KES\x10E\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KGS\x10F\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KHR\x10G\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KMF\x10H\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KPW\x10I\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KRW\x10J\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KWD\x10K\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KYD\x10L\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_KZT\x10M\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LAK\x10N\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LBP\x10O\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LKR\x10P\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LRD\x10Q\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LSL\x10R\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_LYD\x10S\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MAD\x10T\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MDL\x10U\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MGA\x10V\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MKD\x10W\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MMK\x10X\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MNT\x10Y\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MOP\x10Z\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MRU\x10[\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MUR\x10\\\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MVR\x10]\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MWK\x10^\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MXN\x10_\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MXV\x10`\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MYR\x10a\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_MZN\x10b\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NAD\x10c\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NGN\x10d\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NIO\x10e\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NOK\x10f\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NPR\x10g\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_NZD\x10h\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_OMR\x10i\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PAB\x10j\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PEN\x10k\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PGK\x10l\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PHP\x10m\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PKR\x10n\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PLN\x10o\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_PYG\x10p\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_QAR\x10q\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RON\x10r\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RSD\x10s\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RUB\x10t\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_RWF\x10u\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SAR\x10v\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SBD\x10w\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SCR\x10x\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SDG\x10y\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SEK\x10z\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SGD\x10{\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SHP\x10|\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SLE\x10}\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SOS\x10~\x12\x19\n" +
	"\x15ISO_CURRENCY_CODE_SRD\x10\x7f\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SSP\x10\x80\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_STN\x10\x81\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SVC\x10\x82\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SYP\x10\x83\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_SZL\x10\x84\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_THB\x10\x85\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TJS\x10\x86\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TMT\x10\x87\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TND\x10\x88\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TOP\x10\x89\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TRY\x10\x8a\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TTD\x10\x8b\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TWD\x10\x8c\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_TZS\x10\x8d\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UAH\x10\x8e\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UGX\x10\x8f\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_USD\x10\x90\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UYI\x10\x91\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UYU\x10\x92\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_UZS\x10\x93\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_VED\x10\x94\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_VES\x10\x95\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_VND\x10\x96\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_VUV\x10\x97\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_WST\x10\x98\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XAD\x10\x99\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XAF\x10\x9a\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XCD\x10\x9b\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XCG\x10\x9c\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XOF\x10\x9d\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_XPF\x10\x9e\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_YER\x10\x9f\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_ZAR\x10\xa0\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_ZMW\x10\xa1\x01\x12\x1a\n" +
	"\x15ISO_CURRENCY_CODE_ZWG\x10\xa2\x01*\xb8\x96\x01\n" +
	"\x0fIsoLanguageCode\x12!\n" +
	"\x1dISO_LANGUAGE_CODE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AA\x10\x01\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AAR\x10\x02\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AB\x10\x03\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ABK\x10\x04\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AE\x10\x05\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AVE\x10\x06\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AF\x10\a\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AFR\x10\b\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AK\x10\t\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AKA\x10\n" +
	"\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AM\x10\v\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AMH\x10\f\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AN\x10\r\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ARG\x10\x0e\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AR\x10\x0f\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ARA\x10\x10\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AS\x10\x11\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ASM\x10\x12\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AV\x10\x13\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AVA\x10\x14\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AY\x10\x15\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AYM\x10\x16\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_AZ\x10\x17\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_AZE\x10\x18\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BA\x10\x19\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BAK\x10\x1a\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BE\x10\x1b\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BEL\x10\x1c\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BG\x10\x1d\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BUL\x10\x1e\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BH\x10\x1f\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BIH\x10 \x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BI\x10!\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BIS\x10\"\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BM\x10#\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BAM\x10$\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BN\x10%\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BEN\x10&\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BO\x10'\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BOD\x10(\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BR\x10)\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BRE\x10*\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_BS\x10+\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_BOS\x10,\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CA\x10-\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CAT\x10.\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CE\x10/\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CHE\x100\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CH\x101\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CHA\x102\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CO\x103\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_COS\x104\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CR\x105\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CRE\x106\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CS\x107\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CES\x108\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CU\x109\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CHU\x10:\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CV\x10;\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CHV\x10<\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_CY\x10=\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_CYM\x10>\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DA\x10?\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_DAN\x10@\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DE\x10A\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_DEU\x10B\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DV\x10C\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_DIV\x10D\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_DZ\x10E\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_DZO\x10F\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EE\x10G\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_EWE\x10H\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EL\x10I\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ELL\x10J\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EN\x10K\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_ENG\x10L\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EO\x10M\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_EPO\x10N\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_ES\x10O\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_SPA\x10P\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_ET\x10Q\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_EST\x10R\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_EU\x10S\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_EUS\x10T\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FA\x10U\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FAS\x10V\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FF\x10W\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FUL\x10X\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FI\x10Y\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FIN\x10Z\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FJ\x10[\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FIJ\x10\\\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FO\x10]\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FAO\x10^\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FR\x10_\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FRA\x10`\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_FY\x10a\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_FRY\x10b\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GA\x10c\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GLE\x10d\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GD\x10e\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GLA\x10f\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GL\x10g\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GLG\x10h\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GN\x10i\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GRN\x10j\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GU\x10k\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GUJ\x10l\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_GV\x10m\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_GLV\x10n\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HA\x10o\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HAU\x10p\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HE\x10q\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HEB\x10r\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HI\x10s\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HIN\x10t\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HO\x10u\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HMO\x10v\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HR\x10w\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HRV\x10x\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HT\x10y\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HAT\x10z\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HU\x10{\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HUN\x10|\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HY\x10}\x12\x19\n" +
	"\x15ISO_LANGUAGE_CODE_HYE\x10~\x12\x18\n" +
	"\x14ISO_LANGUAGE_CODE_HZ\x10\x7f\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HER\x10\x80\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IA\x10\x81\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INA\x10\x82\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ID\x10\x83\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IND\x10\x84\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IE\x10\x85\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ILE\x10\x86\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IG\x10\x87\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IBO\x10\x88\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_II\x10\x89\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_III\x10\x8a\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IK\x10\x8b\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IPK\x10\x8c\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IO\x10\x8d\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IDO\x10\x8e\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IS\x10\x8f\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ISL\x10\x90\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IT\x10\x91\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ITA\x10\x92\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_IU\x10\x93\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IKU\x10\x94\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_JA\x10\x95\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JPN\x10\x96\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_JV\x10\x97\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JAV\x10\x98\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KA\x10\x99\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAT\x10\x9a\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KG\x10\x9b\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KON\x10\x9c\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KI\x10\x9d\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KIK\x10\x9e\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KJ\x10\x9f\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUA\x10\xa0\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KK\x10\xa1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAZ\x10\xa2\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KL\x10\xa3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAL\x10\xa4\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KM\x10\xa5\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHM\x10\xa6\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KN\x10\xa7\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAN\x10\xa8\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KO\x10\xa9\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOR\x10\xaa\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KR\x10\xab\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAU\x10\xac\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KS\x10\xad\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAS\x10\xae\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KU\x10\xaf\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUR\x10\xb0\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KV\x10\xb1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOM\x10\xb2\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KW\x10\xb3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_COR\x10\xb4\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_KY\x10\xb5\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KIR\x10\xb6\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LA\x10\xb7\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAT\x10\xb8\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LB\x10\xb9\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LTZ\x10\xba\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LG\x10\xbb\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUG\x10\xbc\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LI\x10\xbd\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LIM\x10\xbe\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LN\x10\xbf\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LIN\x10\xc0\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LO\x10\xc1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAO\x10\xc2\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LT\x10\xc3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LIT\x10\xc4\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LU\x10\xc5\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUB\x10\xc6\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_LV\x10\xc7\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAV\x10\xc8\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MG\x10\xc9\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MLG\x10\xca\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MH\x10\xcb\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAH\x10\xcc\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MI\x10\xcd\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MRI\x10\xce\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MK\x10\xcf\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MKD\x10\xd0\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ML\x10\xd1\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAL\x10\xd2\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MN\x10\xd3\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MON\x10\xd4\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MO\x10\xd5\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MR\x10\xd6\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAR\x10\xd7\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MS\x10\xd8\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MSA\x10\xd9\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MT\x10\xda\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MLT\x10\xdb\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_MY\x10\xdc\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MYA\x10\xdd\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NA\x10\xde\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAU\x10\xdf\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NB\x10\xe0\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NOB\x10\xe1\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ND\x10\xe2\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NDE\x10\xe3\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NE\x10\xe4\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NEP\x10\xe5\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NG\x10\xe6\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NDO\x10\xe7\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NL\x10\xe8\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NLD\x10\xe9\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NN\x10\xea\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NNO\x10\xeb\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NO\x10\xec\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NOR\x10\xed\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NR\x10\xee\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NBL\x10\xef\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NV\x10\xf0\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAV\x10\xf1\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_NY\x10\xf2\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYA\x10\xf3\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OC\x10\xf4\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OCI\x10\xf5\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OJ\x10\xf6\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OJI\x10\xf7\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OM\x10\xf8\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ORM\x10\xf9\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OR\x10\xfa\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ORI\x10\xfb\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_OS\x10\xfc\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OSS\x10\xfd\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PA\x10\xfe\x01\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAN\x10\xff\x01\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PI\x10\x80\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PLI\x10\x81\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PL\x10\x82\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_POL\x10\x83\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PS\x10\x84\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PUS\x10\x85\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_PT\x10\x86\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_POR\x10\x87\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_QU\x10\x88\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QUE\x10\x89\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RM\x10\x8a\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ROH\x10\x8b\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RN\x10\x8c\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RUN\x10\x8d\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RO\x10\x8e\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RON\x10\x8f\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RU\x10\x90\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RUS\x10\x91\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_RW\x10\x92\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KIN\x10\x93\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SA\x10\x94\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAN\x10\x95\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SC\x10\x96\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRD\x10\x97\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SD\x10\x98\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SND\x10\x99\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SE\x10\x9a\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SME\x10\x9b\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SG\x10\x9c\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAG\x10\x9d\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SI\x10\x9e\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SIN\x10\x9f\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SK\x10\xa0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SLK\x10\xa1\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SL\x10\xa2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SLV\x10\xa3\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SM\x10\xa4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMO\x10\xa5\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SN\x10\xa6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SNA\x10\xa7\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SO\x10\xa8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SOM\x10\xa9\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SQ\x10\xaa\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SQI\x10\xab\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SR\x10\xac\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRP\x10\xad\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SS\x10\xae\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SSW\x10\xaf\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ST\x10\xb0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SOT\x10\xb1\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SU\x10\xb2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUN\x10\xb3\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SV\x10\xb4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SWE\x10\xb5\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_SW\x10\xb6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SWA\x10\xb7\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TA\x10\xb8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAM\x10\xb9\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TE\x10\xba\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TEL\x10\xbb\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TG\x10\xbc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TGK\x10\xbd\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TH\x10\xbe\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_THA\x10\xbf\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TI\x10\xc0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TIR\x10\xc1\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TK\x10\xc2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUK\x10\xc3\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TL\x10\xc4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TGL\x10\xc5\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TN\x10\xc6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TSN\x10\xc7\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TO\x10\xc8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TON\x10\xc9\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TR\x10\xca\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUR\x10\xcb\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TS\x10\xcc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TSO\x10\xcd\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TT\x10\xce\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAT\x10\xcf\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TW\x10\xd0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TWI\x10\xd1\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_TY\x10\xd2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAH\x10\xd3\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UG\x10\xd4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UIG\x10\xd5\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UK\x10\xd6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UKR\x10\xd7\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UR\x10\xd8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_URD\x10\xd9\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_UZ\x10\xda\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UZB\x10\xdb\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_VE\x10\xdc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VEN\x10\xdd\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_VI\x10\xde\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VIE\x10\xdf\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_VO\x10\xe0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VOL\x10\xe1\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_WA\x10\xe2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WLN\x10\xe3\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_WO\x10\xe4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WOL\x10\xe5\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_XH\x10\xe6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_XHO\x10\xe7\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_YI\x10\xe8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YID\x10\xe9\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_YO\x10\xea\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YOR\x10\xeb\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ZA\x10\xec\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZHA\x10\xed\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ZH\x10\xee\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZHO\x10\xef\x02\x12\x19\n" +
	"\x14ISO_LANGUAGE_CODE_ZU\x10\xf0\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZUL\x10\xf1\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ACE\x10\xf2\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ACH\x10\xf3\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ADA\x10\xf4\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ADY\x10\xf5\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AFA\x10\xf6\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AFH\x10\xf7\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AIN\x10\xf8\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AKK\x10\xf9\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ALE\x10\xfa\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ALG\x10\xfb\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ALT\x10\xfc\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ANG\x10\xfd\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ANP\x10\xfe\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_APA\x10\xff\x02\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARC\x10\x80\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARN\x10\x81\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARP\x10\x82\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ART\x10\x83\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ARW\x10\x84\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AST\x10\x85\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ATH\x10\x86\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AUS\x10\x87\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AWA\x10\x88\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAD\x10\x89\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAI\x10\x8a\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAL\x10\x8b\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAN\x10\x8c\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAS\x10\x8d\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BAT\x10\x8e\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BEJ\x10\x8f\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BEM\x10\x90\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BER\x10\x91\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BGC\x10\x92\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BHO\x10\x93\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BIK\x10\x94\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BIN\x10\x95\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BLA\x10\x96\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BNT\x10\x97\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BRA\x10\x98\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BTK\x10\x99\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BUA\x10\x9a\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BUG\x10\x9b\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_BYN\x10\x9c\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAD\x10\x9d\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAI\x10\x9e\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAR\x10\x9f\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CAU\x10\xa0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CEB\x10\xa1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CEL\x10\xa2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHB\x10\xa3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHG\x10\xa4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHK\x10\xa5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHM\x10\xa6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHN\x10\xa7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHO\x10\xa8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHP\x10\xa9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHR\x10\xaa\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CHY\x10\xab\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CMC\x10\xac\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CNR\x10\xad\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_COP\x10\xae\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CPE\x10\xaf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CPF\x10\xb0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CPP\x10\xb1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CRH\x10\xb2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CRP\x10\xb3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CSB\x10\xb4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CUS\x10\xb5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DAK\x10\xb6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DAR\x10\xb7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DAY\x10\xb8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DEL\x10\xb9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DEN\x10\xba\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DGR\x10\xbb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DIN\x10\xbc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DOI\x10\xbd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DRA\x10\xbe\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DSB\x10\xbf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DUA\x10\xc0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DUM\x10\xc1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_DYU\x10\xc2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EFI\x10\xc3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EGY\x10\xc4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EKA\x10\xc5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ELX\x10\xc6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ENM\x10\xc7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_EWO\x10\xc8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FAN\x10\xc9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FAT\x10\xca\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FIL\x10\xcb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FIU\x10\xcc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FON\x10\xcd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRM\x10\xce\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRO\x10\xcf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRR\x10\xd0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FRS\x10\xd1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_FUR\x10\xd2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GAA\x10\xd3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GAY\x10\xd4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GBA\x10\xd5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GEM\x10\xd6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GEZ\x10\xd7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GIL\x10\xd8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GMH\x10\xd9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GOH\x10\xda\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GON\x10\xdb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GOR\x10\xdc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GOT\x10\xdd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GRB\x10\xde\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GRC\x10\xdf\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GSW\x10\xe0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GWI\x10\xe1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HAI\x10\xe2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HAW\x10\xe3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HIL\x10\xe4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HIM\x10\xe5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HIT\x10\xe6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HMN\x10\xe7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HSB\x10\xe8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HUP\x10\xe9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IBA\x10\xea\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IJO\x10\xeb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ILO\x10\xec\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INC\x10\xed\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INE\x10\xee\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_INH\x10\xef\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IRA\x10\xf0\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_IRO\x10\xf1\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JBO\x10\xf2\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JPR\x10\xf3\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JRB\x10\xf4\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAA\x10\xf5\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAB\x10\xf6\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAC\x10\xf7\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAM\x10\xf8\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAR\x10\xf9\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KAW\x10\xfa\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KBD\x10\xfb\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHA\x10\xfc\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHI\x10\xfd\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHO\x10\xfe\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KMB\x10\xff\x03\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOK\x10\x80\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KOS\x10\x81\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KPE\x10\x82\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRC\x10\x83\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRL\x10\x84\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRO\x10\x85\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KRU\x10\x86\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUM\x10\x87\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KUT\x10\x88\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAD\x10\x89\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAH\x10\x8a\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LAM\x10\x8b\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LEZ\x10\x8c\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LOL\x10\x8d\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LOZ\x10\x8e\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUA\x10\x8f\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUI\x10\x90\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUN\x10\x91\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUO\x10\x92\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_LUS\x10\x93\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAD\x10\x94\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAG\x10\x95\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAI\x10\x96\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAK\x10\x97\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAN\x10\x98\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAP\x10\x99\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MAS\x10\x9a\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MDF\x10\x9b\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MDR\x10\x9c\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MEN\x10\x9d\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MGA\x10\x9e\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MIC\x10\x9f\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MIN\x10\xa0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MIS\x10\xa1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MKH\x10\xa2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MNC\x10\xa3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MNI\x10\xa4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MNO\x10\xa5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MOH\x10\xa6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MOS\x10\xa7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MUL\x10\xa8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MUN\x10\xa9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MUS\x10\xaa\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MWL\x10\xab\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MWR\x10\xac\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MYN\x10\xad\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MYV\x10\xae\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAH\x10\xaf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAI\x10\xb0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NAP\x10\xb1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NDS\x10\xb2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NEW\x10\xb3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NIA\x10\xb4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NIC\x10\xb5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NIU\x10\xb6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NOG\x10\xb7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NON\x10\xb8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NQO\x10\xb9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NSO\x10\xba\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NUB\x10\xbb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NWC\x10\xbc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYM\x10\xbd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYN\x10\xbe\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NYO\x10\xbf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_NZI\x10\xc0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OSA\x10\xc1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OTA\x10\xc2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_OTO\x10\xc3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAA\x10\xc4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAG\x10\xc5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAL\x10\xc6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAM\x10\xc7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAP\x10\xc8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PAU\x10\xc9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PEO\x10\xca\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PHI\x10\xcb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PHN\x10\xcc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PON\x10\xcd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PRA\x10\xce\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_PRO\x10\xcf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQA\x10\xd0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQB\x10\xd1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQC\x10\xd2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQD\x10\xd3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQE\x10\xd4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQF\x10\xd5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQG\x10\xd6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQH\x10\xd7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQI\x10\xd8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_QQJ\x10\xd9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RAJ\x10\xda\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RAP\x10\xdb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RAR\x10\xdc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ROA\x10\xdd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ROM\x10\xde\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_RUP\x10\xdf\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAD\x10\xe0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAH\x10\xe1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAI\x10\xe2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAL\x10\xe3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAM\x10\xe4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAS\x10\xe5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SAT\x10\xe6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SCN\x10\xe7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SCO\x10\xe8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SEL\x10\xe9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SEM\x10\xea\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SGA\x10\xeb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SGN\x10\xec\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SHN\x10\xed\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SID\x10\xee\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SIO\x10\xef\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SIT\x10\xf0\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SLA\x10\xf1\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMA\x10\xf2\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMI\x10\xf3\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMJ\x10\xf4\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMN\x10\xf5\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SMS\x10\xf6\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SNK\x10\xf7\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SOG\x10\xf8\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SON\x10\xf9\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRN\x10\xfa\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SRR\x10\xfb\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SSA\x10\xfc\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUK\x10\xfd\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUS\x10\xfe\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SUX\x10\xff\x04\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SYC\x10\x80\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SYR\x10\x81\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TAI\x10\x82\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TEM\x10\x83\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TER\x10\x84\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TET\x10\x85\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TIG\x10\x86\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TIV\x10\x87\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TKL\x10\x88\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TLH\x10\x89\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TLI\x10\x8a\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TMH\x10\x8b\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TOG\x10\x8c\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TPI\x10\x8d\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TSI\x10\x8e\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUM\x10\x8f\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUP\x10\x90\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TUT\x10\x91\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TVL\x10\x92\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TYV\x10\x93\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UDM\x10\x94\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UGA\x10\x95\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UMB\x10\x96\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_UND\x10\x97\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VAI\x10\x98\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_VOT\x10\x99\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAK\x10\x9a\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAL\x10\x9b\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAR\x10\x9c\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WAS\x10\x9d\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_WEN\x10\x9e\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_XAL\x10\x9f\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YAO\x10\xa0\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YAP\x10\xa1\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YPK\x10\xa2\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZAP\x10\xa3\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZBL\x10\xa4\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZEN\x10\xa5\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZGH\x10\xa6\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZND\x10\xa7\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZUN\x10\xa8\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZXX\x10\xa9\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_ZZA\x10\xaa\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_AAA\x10\xab\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_CMN\x10\xac\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GBM\x10\xad\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_GCF\x10\xae\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_HNE\x10\xaf\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_JAM\x10\xb0\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KFY\x10\xb1\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_KHW\x10\xb2\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MCM\x10\xb3\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_MUP\x10\xb4\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SCK\x10\xb5\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SCL\x10\xb6\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_SPV\x10\xb7\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_TCY\x10\xb8\x05\x12\x1a\n" +
	"\x15ISO_LANGUAGE_CODE_YUE\x10\xb9\x05*\x887\n" +
	"\x10IsoTerritoryCode\x12\"\n" +
	"\x1eISO_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AD\x10\x01\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AE\x10\x02\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AF\x10\x03\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AG\x10\x04\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AI\x10\x05\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AL\x10\x06\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AM\x10\a\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AN\x10\b\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AO\x10\t\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AQ\x10\n" +
	"\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AR\x10\v\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AS\x10\f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AT\x10\r\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AU\x10\x0e\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AW\x10\x0f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AX\x10\x10\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_AZ\x10\x11\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BA\x10\x12\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BB\x10\x13\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BD\x10\x14\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BE\x10\x15\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BF\x10\x16\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BG\x10\x17\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BH\x10\x18\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BI\x10\x19\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BJ\x10\x1a\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BL\x10\x1b\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BM\x10\x1c\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BN\x10\x1d\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BO\x10\x1e\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BQ\x10\x1f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BR\x10 \x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BS\x10!\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BT\x10\"\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BV\x10#\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BW\x10$\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BY\x10%\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_BZ\x10&\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CA\x10'\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CC\x10(\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CD\x10)\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CF\x10*\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CG\x10+\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CH\x10,\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CI\x10-\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CK\x10.\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CL\x10/\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CM\x100\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CN\x101\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CO\x102\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CR\x103\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CS\x104\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CU\x105\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CV\x106\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CW\x107\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CX\x108\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CY\x109\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_CZ\x10:\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DE\x10;\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DJ\x10<\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DK\x10=\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DM\x10>\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DO\x10?\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_DZ\x10@\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EC\x10A\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EE\x10B\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EG\x10C\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_EH\x10D\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ER\x10E\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ES\x10F\x12\x1c\n" +
	"\x18ISO_TERRITORY_CODE_ES_CE\x10G\x12\x1c\n" +
	"\x18ISO_TERRITORY_CODE_ES_CN\x10H\x12\x1c\n" +
	"\x18ISO_TERRITORY_CODE_ES_ML\x10I\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ET\x10J\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FI\x10K\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FJ\x10L\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FK\x10M\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FM\x10N\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FO\x10O\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_FR\x10P\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GA\x10Q\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GB\x10R\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GD\x10S\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GE\x10T\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GF\x10U\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GG\x10V\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GH\x10W\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GI\x10X\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GL\x10Y\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GM\x10Z\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GN\x10[\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GP\x10\\\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GQ\x10]\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GR\x10^\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GS\x10_\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GT\x10`\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GU\x10a\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GW\x10b\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_GY\x10c\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HK\x10d\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HM\x10e\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HN\x10f\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HR\x10g\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HT\x10h\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_HU\x10i\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_ID\x10j\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IE\x10k\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IL\x10l\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IM\x10m\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IN\x10n\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IO\x10o\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IQ\x10p\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IR\x10q\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IS\x10r\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_IT\x10s\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JE\x10t\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JM\x10u\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JO\x10v\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_JP\x10w\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KE\x10x\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KG\x10y\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KH\x10z\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KI\x10{\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KM\x10|\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KN\x10}\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KP\x10~\x12\x19\n" +
	"\x15ISO_TERRITORY_CODE_KR\x10\x7f\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_KW\x10\x80\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_KY\x10\x81\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_KZ\x10\x82\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LA\x10\x83\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LB\x10\x84\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LC\x10\x85\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LI\x10\x86\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LK\x10\x87\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LR\x10\x88\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LS\x10\x89\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LT\x10\x8a\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LU\x10\x8b\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LV\x10\x8c\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_LY\x10\x8d\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MA\x10\x8e\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MC\x10\x8f\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MD\x10\x90\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ME\x10\x91\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MF\x10\x92\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MG\x10\x93\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MH\x10\x94\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MK\x10\x95\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ML\x10\x96\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MM\x10\x97\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MN\x10\x98\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MO\x10\x99\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MP\x10\x9a\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MQ\x10\x9b\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MR\x10\x9c\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MS\x10\x9d\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MT\x10\x9e\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MU\x10\x9f\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MV\x10\xa0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MW\x10\xa1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MX\x10\xa2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MY\x10\xa3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_MZ\x10\xa4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NA\x10\xa5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NC\x10\xa6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NE\x10\xa7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NF\x10\xa8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NG\x10\xa9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NI\x10\xaa\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NL\x10\xab\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NO\x10\xac\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NP\x10\xad\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NR\x10\xae\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NU\x10\xaf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_NZ\x10\xb0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_OM\x10\xb1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PA\x10\xb2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PE\x10\xb3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PF\x10\xb4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PG\x10\xb5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PH\x10\xb6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PK\x10\xb7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PL\x10\xb8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PM\x10\xb9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PN\x10\xba\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PR\x10\xbb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PS\x10\xbc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PT\x10\xbd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PW\x10\xbe\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_PY\x10\xbf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_QA\x10\xc0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RE\x10\xc1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RO\x10\xc2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RS\x10\xc3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RU\x10\xc4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_RW\x10\xc5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SA\x10\xc6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SB\x10\xc7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SC\x10\xc8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SD\x10\xc9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SE\x10\xca\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SG\x10\xcb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SH\x10\xcc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SI\x10\xcd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SJ\x10\xce\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SK\x10\xcf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SL\x10\xd0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SM\x10\xd1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SN\x10\xd2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SO\x10\xd3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SR\x10\xd4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SS\x10\xd5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ST\x10\xd6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SV\x10\xd7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SX\x10\xd8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SY\x10\xd9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_SZ\x10\xda\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TC\x10\xdb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TD\x10\xdc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TF\x10\xdd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TG\x10\xde\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TH\x10\xdf\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TJ\x10\xe0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TK\x10\xe1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TL\x10\xe2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TM\x10\xe3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TN\x10\xe4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TO\x10\xe5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TR\x10\xe6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TT\x10\xe7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TV\x10\xe8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TW\x10\xe9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_TZ\x10\xea\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UA\x10\xeb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UG\x10\xec\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UM\x10\xed\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_US\x10\xee\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UY\x10\xef\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_UZ\x10\xf0\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VA\x10\xf1\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VC\x10\xf2\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VE\x10\xf3\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VG\x10\xf4\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VI\x10\xf5\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VN\x10\xf6\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_VU\x10\xf7\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_WF\x10\xf8\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_WS\x10\xf9\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_YE\x10\xfa\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_YT\x10\xfb\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ZA\x10\xfc\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ZM\x10\xfd\x01\x12\x1a\n" +
	"\x15ISO_TERRITORY_CODE_ZW\x10\xfe\x01*{\n" +
	"\n" +
	"IswcStatus\x12\x1b\n" +
	"\x17ISWC_STATUS_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14ISWC_STATUS_ARCHIVED\x10\x01\x12\x19\n" +
	"\x15ISWC_STATUS_PREFERRED\x10\x02\x12\x1b\n" +
	"\x17ISWC_STATUS_PROVISIONAL\x10\x03*w\n" +
	"\rLabelNameType\x12\x1f\n" +
	"\x1bLABEL_NAME_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" LABEL_NAME_TYPE_DISPLAYLABELNAME\x10\x01\x12\x1f\n" +
	"\x1bLABEL_NAME_TYPE_USERDEFINED\x10\x02*`\n" +
	"\tLabelType\x12\x1a\n" +
	"\x16LABEL_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17LABEL_TYPE_DISPLAYLABEL\x10\x01\x12\x1a\n" +
	"\x16LABEL_TYPE_USERDEFINED\x10\x02*\xed\x01\n" +
	"\x18LanguageLocalizationType\x12*\n" +
	"&LANGUAGE_LOCALIZATION_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!LANGUAGE_LOCALIZATION_TYPE_DUBBED\x10\x01\x12(\n" +
	"$LANGUAGE_LOCALIZATION_TYPE_SUBTITLED\x10\x02\x12+\n" +
	"'LANGUAGE_LOCALIZATION_TYPE_MULTILINGUAL\x10\x03\x12'\n" +
	"#LANGUAGE_LOCALIZATION_TYPE_ORIGINAL\x10\x04*\x8b\x01\n" +
	"\rLicenseRecord\x12\x1e\n" +
	"\x1aLICENSE_RECORD_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19LICENSE_RECORD_HASLICENSE\x10\x01\x12\x1f\n" +
	"\x1bLICENSE_RECORD_HASNOLICENSE\x10\x02\x12\x1a\n" +
	"\x16LICENSE_RECORD_UNKNOWN\x10\x03*\x95\x01\n" +
	"\x14LicenseRefusalReason\x12&\n" +
	"\"LICENSE_REFUSAL_REASON_UNSPECIFIED\x10\x00\x12&\n" +
	"\"LICENSE_REFUSAL_REASON_USERDEFINED\x10\x01\x12-\n" +
	")LICENSE_REFUSAL_REASON_WORKINPUBLICDOMAIN\x10\x02*\x9f\x05\n" +
	"\x16LicenseRejectionReason\x12(\n" +
	"$LICENSE_REJECTION_REASON_UNSPECIFIED\x10\x00\x126\n" +
	"2LICENSE_REJECTION_REASON_DISAGREEMENTOVERROYALTIES\x10\x01\x12;\n" +
	"7LICENSE_REJECTION_REASON_DISAGREEMENTOVERSCOPEOFLICENSE\x10\x02\x12:\n" +
	"6LICENSE_REJECTION_REASON_DUPLICATELICENSEREQUESTNUMBER\x10\x03\x12+\n" +
	"'LICENSE_REJECTION_REASON_LICENSEBLOCKED\x10\x04\x12*\n" +
	"&LICENSE_REJECTION_REASON_LICENSEEXISTS\x10\x05\x12-\n" +
	")LICENSE_REJECTION_REASON_LICENSENOTNEEDED\x10\x06\x126\n" +
	"2LICENSE_REJECTION_REASON_REFERENCEDDOCUMENTMISSING\x10\a\x12.\n" +
	"*LICENSE_REJECTION_REASON_SHARESPLITSDIFFER\x10\b\x12/\n" +
	"+LICENSE_REJECTION_REASON_WORKINPUBLICDOMAIN\x10\t\x122\n" +
	".LICENSE_REJECTION_REASON_WORKUSEDMULTIPLETIMES\x10\n" +
	"\x12+\n" +
	"'LICENSE_REJECTION_REASON_WRONGADDRESSEE\x10\v\x12(\n" +
	"$LICENSE_REJECTION_REASON_USERDEFINED\x10\f*\xf7\x01\n" +
	"\x19LinkAcknowledgementStatus\x12+\n" +
	"'LINK_ACKNOWLEDGEMENT_STATUS_UNSPECIFIED\x10\x00\x12(\n" +
	"$LINK_ACKNOWLEDGEMENT_STATUS_ACCEPTED\x10\x01\x12,\n" +
	"(LINK_ACKNOWLEDGEMENT_STATUS_ACKNOWLEDGED\x10\x02\x12(\n" +
	"$LINK_ACKNOWLEDGEMENT_STATUS_CONFLICT\x10\x03\x12+\n" +
	"'LINK_ACKNOWLEDGEMENT_STATUS_USERDEFINED\x10\x04*\xb8\x02\n" +
	"\x0fLinkDescription\x12 \n" +
	"\x1cLINK_DESCRIPTION_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18LINK_DESCRIPTION_BOOKLET\x10\x01\x12\x1c\n" +
	"\x18LINK_DESCRIPTION_CAPTION\x10\x02\x12!\n" +
	"\x1dLINK_DESCRIPTION_CHAPTERIMAGE\x10\x03\x12\x1d\n" +
	"\x19LINK_DESCRIPTION_COVERART\x10\x04\x12\x1b\n" +
	"\x17LINK_DESCRIPTION_LYRICS\x10\x05\x12\x1d\n" +
	"\x19LINK_DESCRIPTION_SUBTITLE\x10\x06\x12'\n" +
	"#LINK_DESCRIPTION_VIDEOSCREENCAPTURE\x10\a\x12 \n" +
	"\x1cLINK_DESCRIPTION_USERDEFINED\x10\b*\xb2\x02\n" +
	"\n" +
	"LyricsType\x12\x1b\n" +
	"\x17LYRICS_TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12LYRICS_TYPE_CHORUS\x10\x01\x12\x1e\n" +
	"\x1aLYRICS_TYPE_CHORUSANDVERSE\x10\x02\x12\x18\n" +
	"\x14LYRICS_TYPE_COMPLETE\x10\x03\x12\x1f\n" +
	"\x1bLYRICS_TYPE_FIRSTLINEOFTEXT\x10\x04\x12\x14\n" +
	"\x10LYRICS_TYPE_HOOK\x10\x05\x12\x19\n" +
	"\x15LYRICS_TYPE_JAZZSCATS\x10\x06\x12\x16\n" +
	"\x12LYRICS_TYPE_STANZA\x10\a\x12\x17\n" +
	"\x13LYRICS_TYPE_UNKNOWN\x10\b\x12\x1b\n" +
	"\x17LYRICS_TYPE_USERDEFINED\x10\t\x12\x15\n" +
	"\x11LYRICS_TYPE_VERSE\x10\n" +
	"*\xbc\x01\n" +
	"\x0fMeasurementType\x12 \n" +
	"\x1cMEASUREMENT_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"MEASUREMENT_TYPE_BOTHAUDIOANDVIDEO\x10\x01\x12'\n" +
	"#MEASUREMENT_TYPE_EITHERAUDIOORVIDEO\x10\x02\x12\x1a\n" +
	"\x16MEASUREMENT_TYPE_AUDIO\x10\x03\x12\x1a\n" +
	"\x16MEASUREMENT_TYPE_VIDEO\x10\x04*\x9e\x01\n" +
	"\x0eMembershipType\x12\x1f\n" +
	"\x1bMEMBERSHIP_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eMEMBERSHIP_TYPE_NATIONALMEMBER\x10\x01\x12\"\n" +
	"\x1eMEMBERSHIP_TYPE_REGIONALMEMBER\x10\x02\x12#\n" +
	"\x1fMEMBERSHIP_TYPE_WORLDWIDEMEMBER\x10\x03*\xaa\x02\n" +
	"\x11MessageActionType\x12#\n" +
	"\x1fMESSAGE_ACTION_TYPE_UNSPECIFIED\x10\x00\x12+\n" +
	"'MESSAGE_ACTION_TYPE_BACKCATALOGDELIVERY\x10\x01\x12,\n" +
	"(MESSAGE_ACTION_TYPE_HIGHPRIORITYDELIVERY\x10\x02\x12*\n" +
	"&MESSAGE_ACTION_TYPE_NEWRELEASEDELIVERY\x10\x03\x12\"\n" +
	"\x1eMESSAGE_ACTION_TYPE_REDELIVERY\x10\x04\x12 \n" +
	"\x1cMESSAGE_ACTION_TYPE_TAKEDOWN\x10\x05\x12#\n" +
	"\x1fMESSAGE_ACTION_TYPE_USERDEFINED\x10\x06*\x86\x01\n" +
	"\x12MessageControlType\x12$\n" +
	" MESSAGE_CONTROL_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" MESSAGE_CONTROL_TYPE_LIVEMESSAGE\x10\x01\x12$\n" +
	" MESSAGE_CONTROL_TYPE_TESTMESSAGE\x10\x02*\x94\x01\n" +
	"\x0eMessagePurpose\x12\x1f\n" +
	"\x1bMESSAGE_PURPOSE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17MESSAGE_PURPOSE_LICENSE\x10\x01\x12\x1f\n" +
	"\x1bMESSAGE_PURPOSE_NDMALICENSE\x10\x02\x12#\n" +
	"\x1fMESSAGE_PURPOSE_ACKNOWLEDGEMENT\x10\x03*\xbf\x03\n" +
	"\vMessageType\x12\x1c\n" +
	"\x18MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bMESSAGE_TYPE_LICENSEMESSAGE\x10\x01\x12&\n" +
	"\"MESSAGE_TYPE_LICENSEREQUESTMESSAGE\x10\x02\x12)\n" +
	"%MESSAGE_TYPE_LICENSEREVOCATIONMESSAGE\x10\x03\x12'\n" +
	"#MESSAGE_TYPE_LODCONFIRMATIONMESSAGE\x10\x04\x12\x1b\n" +
	"\x17MESSAGE_TYPE_LODMESSAGE\x10\x05\x124\n" +
	"0MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONMESSAGE\x10\x06\x12/\n" +
	"+MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTMESSAGE\x10\a\x12:\n" +
	"6MESSAGE_TYPE_MUSICALWORKCLAIMNOTIFICATIONRECALLMESSAGE\x10\b\x125\n" +
	"1MESSAGE_TYPE_MUSICALWORKCLAIMREQUESTRECALLMESSAGE\x10\t*\xa8\x01\n" +
	"\x11MissingLinkReason\x12#\n" +
	"\x1fMISSING_LINK_REASON_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fMISSING_LINK_REASON_NOLINKFOUND\x10\x01\x12$\n" +
	" MISSING_LINK_REASON_NOMATCHFOUND\x10\x02\x12#\n" +
	"\x1fMISSING_LINK_REASON_USERDEFINED\x10\x03*\x9b\x01\n" +
	"\x0fMoodOrThemeType\x12\"\n" +
	"\x1eMOOD_OR_THEME_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19MOOD_OR_THEME_TYPE_LYRICS\x10\x01\x12&\n" +
	"\"MOOD_OR_THEME_TYPE_LYRICSANDMELODY\x10\x02\x12\x1d\n" +
	"\x19MOOD_OR_THEME_TYPE_MELODY\x10\x03*\xea\x11\n" +
	"\x1aMusicalWorkContributorRole\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_UNSPECIFIED\x10\x00\x12)\n" +
	"%MUSICAL_WORK_CONTRIBUTOR_ROLE_ADAPTER\x10\x01\x12+\n" +
	"'MUSICAL_WORK_CONTRIBUTOR_ROLE_ARCHITECT\x10\x02\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_ARRANGER\x10\x03\x12(\n" +
	"$MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOR\x10\x04\x124\n" +
	"0MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHORINQUOTATIONS\x10\x05\x123\n" +
	"/MUSICAL_WORK_CONTRIBUTOR_ROLE_AUTHOROFAFTERWORD\x10\x06\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPILER\x10\a\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSER\x10\b\x122\n" +
	".MUSICAL_WORK_CONTRIBUTOR_ROLE_COMPOSERLYRICIST\x10\t\x12+\n" +
	"'MUSICAL_WORK_CONTRIBUTOR_ROLE_CONCEPTOR\x10\n" +
	"\x12)\n" +
	"%MUSICAL_WORK_CONTRIBUTOR_ROLE_CREATOR\x10\v\x120\n" +
	",MUSICAL_WORK_CONTRIBUTOR_ROLE_DIALOGUEAUTHOR\x10\f\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_DISSERTANT\x10\r\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_ENGRAVER\x10\x0e\x12(\n" +
	"$MUSICAL_WORK_CONTRIBUTOR_ROLE_ETCHER\x10\x0f\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_JOURNALIST\x10\x10\x124\n" +
	"0MUSICAL_WORK_CONTRIBUTOR_ROLE_LANDSCAPEARCHITECT\x10\x11\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_LIBRETTIST\x10\x12\x12.\n" +
	"*MUSICAL_WORK_CONTRIBUTOR_ROLE_LITHOGRAPHER\x10\x13\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_LYRICIST\x10\x14\x12/\n" +
	"+MUSICAL_WORK_CONTRIBUTOR_ROLE_METALENGRAVER\x10\x15\x120\n" +
	",MUSICAL_WORK_CONTRIBUTOR_ROLE_NONLYRICAUTHOR\x10\x16\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_PLATEMAKER\x10\x17\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_PLAYWRIGHT\x10\x18\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_REPORTER\x10\x19\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_REVIEWER\x10\x1a\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_RUBRICATOR\x10\x1b\x122\n" +
	".MUSICAL_WORK_CONTRIBUTOR_ROLE_SCREENPLAYAUTHOR\x10\x1c\x12*\n" +
	"&MUSICAL_WORK_CONTRIBUTOR_ROLE_SCULPTOR\x10\x1d\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBARRANGER\x10\x1e\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBLYRICIST\x10\x1f\x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_TRANSLATOR\x10 \x12,\n" +
	"(MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODCUTTER\x10!\x12.\n" +
	"*MUSICAL_WORK_CONTRIBUTOR_ROLE_WOODENGRAVER\x10\"\x12>\n" +
	":MUSICAL_WORK_CONTRIBUTOR_ROLE_WRITEROFACCOMPANYINGMATERIAL\x10#\x12/\n" +
	"+MUSICAL_WORK_CONTRIBUTOR_ROLE_BOOKPUBLISHER\x10$\x123\n" +
	"/MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTCLAIMANT\x10%\x121\n" +
	"-MUSICAL_WORK_CONTRIBUTOR_ROLE_COPYRIGHTHOLDER\x10&\x120\n" +
	",MUSICAL_WORK_CONTRIBUTOR_ROLE_MUSICPUBLISHER\x10'\x124\n" +
	"0MUSICAL_WORK_CONTRIBUTOR_ROLE_NEWSPAPERPUBLISHER\x10(\x123\n" +
	"/MUSICAL_WORK_CONTRIBUTOR_ROLE_ORIGINALPUBLISHER\x10)\x125\n" +
	"1MUSICAL_WORK_CONTRIBUTOR_ROLE_PERIODICALPUBLISHER\x10*\x12.\n" +
	"*MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBPUBLISHER\x10+\x126\n" +
	"2MUSICAL_WORK_CONTRIBUTOR_ROLE_SUBSTITUTEDPUBLISHER\x10,\x12)\n" +
	"%MUSICAL_WORK_CONTRIBUTOR_ROLE_UNKNOWN\x10-\x12-\n" +
	")MUSICAL_WORK_CONTRIBUTOR_ROLE_USERDEFINED\x10.*\xfb\n" +
	"\n" +
	"\x0fMusicalWorkType\x12!\n" +
	"\x1dMUSICAL_WORK_TYPE_UNSPECIFIED\x10\x00\x12/\n" +
	"+MUSICAL_WORK_TYPE_ADAPTEDINORIGINALLANGUAGE\x10\x01\x12-\n" +
	")MUSICAL_WORK_TYPE_ADAPTEDINSTRUMENTALWORK\x10\x02\x12*\n" +
	"&MUSICAL_WORK_TYPE_ADAPTEDWITHNEWLYRICS\x10\x03\x12*\n" +
	"&MUSICAL_WORK_TYPE_ARRANGEDWITHNEWMUSIC\x10\x04\x12*\n" +
	"&MUSICAL_WORK_TYPE_COMPOSITEMUSICALWORK\x10\x05\x12*\n" +
	"&MUSICAL_WORK_TYPE_DRAMATICOMUSICALWORK\x10\x06\x12(\n" +
	"$MUSICAL_WORK_TYPE_FILMPRODUCTIONWORK\x10\a\x12\x1c\n" +
	"\x18MUSICAL_WORK_TYPE_JINGLE\x10\b\x12\"\n" +
	"\x1eMUSICAL_WORK_TYPE_LYRICREMOVAL\x10\t\x12&\n" +
	"\"MUSICAL_WORK_TYPE_LYRICREPLACEMENT\x10\n" +
	"\x12&\n" +
	"\"MUSICAL_WORK_TYPE_LYRICTRANSLATION\x10\v\x12\x1c\n" +
	"\x18MUSICAL_WORK_TYPE_MASHUP\x10\f\x12\x1c\n" +
	"\x18MUSICAL_WORK_TYPE_MEDLEY\x10\r\x12.\n" +
	"*MUSICAL_WORK_TYPE_MULTIMEDIAPRODUCTIONWORK\x10\x0e\x12)\n" +
	"%MUSICAL_WORK_TYPE_MUSICALWORKMOVEMENT\x10\x0f\x12,\n" +
	"(MUSICAL_WORK_TYPE_MUSICALWORKWITHSAMPLES\x10\x10\x12&\n" +
	"\"MUSICAL_WORK_TYPE_MUSICARRANGEMENT\x10\x11\x12,\n" +
	"(MUSICAL_WORK_TYPE_MUSICARRANGEMENTOFTEXT\x10\x12\x12/\n" +
	"+MUSICAL_WORK_TYPE_ORIGINALLYRICSARRANGEMENT\x10\x13\x12-\n" +
	")MUSICAL_WORK_TYPE_ORIGINALMUSICADAPTATION\x10\x14\x12)\n" +
	"%MUSICAL_WORK_TYPE_ORIGINALMUSICALWORK\x10\x15\x12\x1f\n" +
	"\x1bMUSICAL_WORK_TYPE_POTPOURRI\x10\x16\x120\n" +
	",MUSICAL_WORK_TYPE_PRODUCTIONMUSICLIBRARYWORK\x10\x17\x12)\n" +
	"%MUSICAL_WORK_TYPE_RADIOPRODUCTIONWORK\x10\x18\x12+\n" +
	"'MUSICAL_WORK_TYPE_THEATERPRODUCTIONWORK\x10\x19\x12&\n" +
	"\"MUSICAL_WORK_TYPE_TVPRODUCTIONWORK\x10\x1a\x12\x1d\n" +
	"\x19MUSICAL_WORK_TYPE_UNKNOWN\x10\x1b\x12,\n" +
	"(MUSICAL_WORK_TYPE_UNSPECIFIEDARRANGEMENT\x10\x1c\x120\n" +
	",MUSICAL_WORK_TYPE_UNSPECIFIEDLYRICADAPTATION\x10\x1d\x123\n" +
	"/MUSICAL_WORK_TYPE_UNSPECIFIEDMUSICALWORKEXCERPT\x10\x1e\x12!\n" +
	"\x1dMUSICAL_WORK_TYPE_USERDEFINED\x10\x1f\x12)\n" +
	"%MUSICAL_WORK_TYPE_VIDEOPRODUCTIONWORK\x10 *q\n" +
	"\x0eMwnlFileStatus\x12 \n" +
	"\x1cMWNL_FILE_STATUS_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17MWNL_FILE_STATUS_FILEOK\x10\x01\x12 \n" +
	"\x1cMWNL_FILE_STATUS_USERDEFINED\x10\x02*\x96\x01\n" +
	"\x16MwnlProposedActionType\x12)\n" +
	"%MWNL_PROPOSED_ACTION_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"MWNL_PROPOSED_ACTION_TYPE_RESUBMIT\x10\x01\x12)\n" +
	"%MWNL_PROPOSED_ACTION_TYPE_USERDEFINED\x10\x02*\xc4.\n" +
	"\rNewStudioRole\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"NEW_STUDIO_ROLE_ADDITIONALENGINEER\x10\x01\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_ANIMALTRAINER\x10\x02\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_ANIMATOR\x10\x03\x12\x1d\n" +
	"\x19NEW_STUDIO_ROLE_ANNOTATOR\x10\x04\x12$\n" +
	" NEW_STUDIO_ROLE_AANDRCOORDINATOR\x10\x05\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_ARMOURER\x10\x06\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_ARTDIRECTOR\x10\a\x121\n" +
	"-NEW_STUDIO_ROLE_ARTISTBACKGROUNDVOCALENGINEER\x10\b\x12'\n" +
	"#NEW_STUDIO_ROLE_ARTISTVOCALENGINEER\x10\t\x12-\n" +
	")NEW_STUDIO_ROLE_ARTISTVOCALSECONDENGINEER\x10\n" +
	"\x12+\n" +
	"'NEW_STUDIO_ROLE_ASSISTANTCAMERAOPERATOR\x10\v\x124\n" +
	"0NEW_STUDIO_ROLE_ASSISTANTCHIEFLIGHTINGTECHNICIAN\x10\f\x12%\n" +
	"!NEW_STUDIO_ROLE_ASSISTANTDIRECTOR\x10\r\x12%\n" +
	"!NEW_STUDIO_ROLE_ASSISTANTPRODUCER\x10\x0e\x12)\n" +
	"%NEW_STUDIO_ROLE_ASSISTANTVISUALEDITOR\x10\x0f\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_AURALTRAINER\x10\x10\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_BINDER\x10\x11\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_BINDINGDESIGNER\x10\x12\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_BOOKDESIGNER\x10\x13\x12$\n" +
	" NEW_STUDIO_ROLE_BOOKJACKDESIGNER\x10\x14\x12%\n" +
	"!NEW_STUDIO_ROLE_BOOKPLATEDESIGNER\x10\x15\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_BOOKPRODUCER\x10\x16\x12&\n" +
	"\"NEW_STUDIO_ROLE_BROADCASTASSISTANT\x10\x17\x12'\n" +
	"#NEW_STUDIO_ROLE_BROADCASTJOURNALIST\x10\x18\x12\"\n" +
	"\x1eNEW_STUDIO_ROLE_CAMERAOPERATOR\x10\x19\x12\x1d\n" +
	"\x19NEW_STUDIO_ROLE_CARPENTER\x10\x1a\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_CASTINGDIRECTOR\x10\x1b\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_CENSOR\x10\x1c\x12+\n" +
	"'NEW_STUDIO_ROLE_CHIEFLIGHTINGTECHNICIAN\x10\x1d\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_CHOREOGRAPHER\x10\x1e\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_CLAPPERLOADER\x10\x1f\x12'\n" +
	"#NEW_STUDIO_ROLE_COEXECUTIVEPRODUCER\x10 \x12,\n" +
	"(NEW_STUDIO_ROLE_COMMISSIONINGBROADCASTER\x10!\x12'\n" +
	"#NEW_STUDIO_ROLE_COMPILATIONPRODUCER\x10\"\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_CONSULTANT\x10#\x12%\n" +
	"!NEW_STUDIO_ROLE_CONTINUITYCHECKER\x10$\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_CONTRACTOR\x10%\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_COPRODUCER\x10&\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_CORRESPONDENT\x10'\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_COSTUMEDESIGNER\x10(\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_COVERDESIGNER\x10)\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_DESIGNER\x10*\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_DIALOGUECOACH\x10+\x123\n" +
	"/NEW_STUDIO_ROLE_DIGITALAUDIOWORKSTATIONENGINEER\x10,\x12*\n" +
	"&NEW_STUDIO_ROLE_DIGITALEDITINGENGINEER\x10-\x120\n" +
	",NEW_STUDIO_ROLE_DIGITALEDITINGSECONDENGINEER\x10.\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_DIRECTOR\x10/\x12/\n" +
	"+NEW_STUDIO_ROLE_DIRECTSTREAMDIGITALENGINEER\x100\x12'\n" +
	"#NEW_STUDIO_ROLE_DISTRIBUTIONCOMPANY\x101\x12\x1b\n" +
	"\x17NEW_STUDIO_ROLE_DRESSER\x102\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_DUBBER\x103\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_EDITOR\x104\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_EDITORINCHIEF\x105\x12\"\n" +
	"\x1eNEW_STUDIO_ROLE_EDITOROFTHEDAY\x106\x12\x1b\n" +
	"\x17NEW_STUDIO_ROLE_ENCODER\x107\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_ENGINEER\x108\x12%\n" +
	"!NEW_STUDIO_ROLE_EXECUTIVEPRODUCER\x109\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_EXPERT\x10:\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_FIGHTDIRECTOR\x10;\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_FILMDIRECTOR\x10<\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_FILMDISTRIBUTOR\x10=\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_FILMEDITOR\x10>\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_FILMPRODUCER\x10?\x12%\n" +
	"!NEW_STUDIO_ROLE_FILMSOUNDENGINEER\x10@\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_FLOORMANAGER\x10A\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_FOCUSPULLER\x10B\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_FOLEYARTIST\x10C\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_FOLEYEDITOR\x10D\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_FOLEYMIXER\x10E\x12$\n" +
	" NEW_STUDIO_ROLE_GRAPHICASSISTANT\x10F\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_GRAPHICDESIGNER\x10G\x12\x1d\n" +
	"\x19NEW_STUDIO_ROLE_GREENSMAN\x10H\x12\x18\n" +
	"\x14NEW_STUDIO_ROLE_GRIP\x10I\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_HAIRDRESSER\x10J\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_INITIALPRODUCER\x10K\x12\x1b\n" +
	"\x17NEW_STUDIO_ROLE_KEYGRIP\x10L\x12\x1b\n" +
	"\x17NEW_STUDIO_ROLE_LEADMAN\x10M\x12$\n" +
	" NEW_STUDIO_ROLE_LIGHTINGDIRECTOR\x10N\x12&\n" +
	"\"NEW_STUDIO_ROLE_LIGHTINGTECHNICIAN\x10O\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_LOCATIONMANAGER\x10P\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_MAKEUPARTIST\x10Q\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_MANUFACTURER\x10R\x12%\n" +
	"!NEW_STUDIO_ROLE_MASTERINGENGINEER\x10S\x12+\n" +
	"'NEW_STUDIO_ROLE_MASTERINGSECONDENGINEER\x10T\x12\x1f\n" +
	"\x1bNEW_STUDIO_ROLE_MATTEARTIST\x10U\x12\"\n" +
	"\x1eNEW_STUDIO_ROLE_MIXINGENGINEER\x10V\x12(\n" +
	"$NEW_STUDIO_ROLE_MIXINGSECONDENGINEER\x10W\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_MUSICDIRECTOR\x10X\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_MUSICIAN\x10Y\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_NEWSPRODUCER\x10Z\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_OVERDUBENGINEER\x10[\x12)\n" +
	"%NEW_STUDIO_ROLE_OVERDUBSECONDENGINEER\x10\\\x12'\n" +
	"#NEW_STUDIO_ROLE_PHOTOGRAPHYDIRECTOR\x10]\x12 \n" +
	"\x1cNEW_STUDIO_ROLE_POSTPRODUCER\x10^\x12'\n" +
	"#NEW_STUDIO_ROLE_PROGRAMMINGENGINEER\x10_\x12!\n" +
	"\x1dNEW_STUDIO_ROLE_PREPRODUCTION\x10`\x12)\n" +
	"%NEW_STUDIO_ROLE_PREPRODUCTIONENGINEER\x10a\x12%\n" +
	"!NEW_STUDIO_ROLE_PRODUCTIONCOMPANY\x10b\x12(\n" +
	"$NEW_STUDIO_ROLE_PRODUCTIONDEPARTMENT\x10c\x12%\n" +
	"!NEW_STUDIO_ROLE_PRODUCTIONMANAGER\x10d\x12'\n" +
	"#NEW_STUDIO_ROLE_PRODUCTIONSECRETARY\x10e\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_PROGRAMPRODUCER\x10f\x12)\n" +
	"%NEW_STUDIO_ROLE_PROGRAMPROPOSALWRITER\x10g\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_PROPERTYMANAGER\x10h\x12&\n" +
	"\"NEW_STUDIO_ROLE_PUBLISHINGDIRECTOR\x10i\x12\"\n" +
	"\x1eNEW_STUDIO_ROLE_PYROTECHNICIAN\x10j\x12%\n" +
	"!NEW_STUDIO_ROLE_RECORDINGENGINEER\x10k\x12+\n" +
	"'NEW_STUDIO_ROLE_RECORDINGSECONDENGINEER\x10l\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_REDACTOR\x10m\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_REISSUEPRODUCER\x10n\x12$\n" +
	" NEW_STUDIO_ROLE_REMIXINGENGINEER\x10o\x12*\n" +
	"&NEW_STUDIO_ROLE_REMIXINGSECONDENGINEER\x10p\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_REPETITEUR\x10q\x12\x1e\n" +
	"\x1aNEW_STUDIO_ROLE_RESEARCHER\x10r\x12$\n" +
	" NEW_STUDIO_ROLE_RESEARCHTEAMHEAD\x10s\x12&\n" +
	"\"NEW_STUDIO_ROLE_RESEARCHTEAMMEMBER\x10t\x12\x1c\n" +
	"\x18NEW_STUDIO_ROLE_RESTAGER\x10u\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_RIGGER\x10v\x12-\n" +
	")NEW_STUDIO_ROLE_RIGHTSCONTROLLERONPRODUCT\x10w\x12\x1a\n" +
	"\x16NEW_STUDIO_ROLE_RUNNER\x10x\x12#\n" +
	"\x1fNEW_STUDIO_ROLE_SCENICOPERATIVE\x10y\x12%\n" +
	"!NEW_STUDIO_ROLE_SCIENTIFICADVISOR\x10z\x12$\n" +
	" NEW_STUDIO_ROLE_SCRIPTSUPERVISOR\x10{\x121\n" +
	"-NEW_STUDIO_ROLE_SECONDASSISTANTCAMERAOPERATOR\x10|\x12+\n" +
	"'NEW_STUDIO_ROLE_SECONDASSISTANTDIRECTOR\x10}\x12\"\n" +
	"\x1eNEW_STUDIO_ROLE_SECONDENGINEER\x10~\x12&\n" +
	"\"NEW_STUDIO_ROLE_SECONDUNITDIRECTOR\x10\x7f\x12#\n" +
	"\x1eNEW_STUDIO_ROLE_SERIESPRODUCER\x10\x80\x01\x12 \n" +
	"\x1bNEW_STUDIO_ROLE_SETDESIGNER\x10\x81\x01\x12\x1f\n" +
	"\x1aNEW_STUDIO_ROLE_SETDRESSER\x10\x82\x01\x12\"\n" +
	"\x1dNEW_STUDIO_ROLE_SOUNDDESIGNER\x10\x83\x01\x12\x1f\n" +
	"\x1aNEW_STUDIO_ROLE_SOUNDMIXER\x10\x84\x01\x12#\n" +
	"\x1eNEW_STUDIO_ROLE_SOUNDRECORDIST\x10\x85\x01\x12-\n" +
	"(NEW_STUDIO_ROLE_SPECIALEFFECTSTECHNICIAN\x10\x86\x01\x12\x1c\n" +
	"\x17NEW_STUDIO_ROLE_SPONSOR\x10\x87\x01\x12\"\n" +
	"\x1dNEW_STUDIO_ROLE_STAGEDIRECTOR\x10\x88\x01\x12#\n" +
	"\x1eNEW_STUDIO_ROLE_STRINGENGINEER\x10\x89\x01\x12#\n" +
	"\x1eNEW_STUDIO_ROLE_STRINGPRODUCER\x10\x8a\x01\x12$\n" +
	"\x1fNEW_STUDIO_ROLE_STUDIOCONDUCTOR\x10\x8b\x01\x12$\n" +
	"\x1fNEW_STUDIO_ROLE_STUDIOPERSONNEL\x10\x8c\x01\x12#\n" +
	"\x1eNEW_STUDIO_ROLE_STUDIOPRODUCER\x10\x8d\x01\x12$\n" +
	"\x1fNEW_STUDIO_ROLE_SUBTITLESEDITOR\x10\x8e\x01\x12(\n" +
	"#NEW_STUDIO_ROLE_SUBTITLESTRANSLATOR\x10\x8f\x01\x12!\n" +
	"\x1cNEW_STUDIO_ROLE_TAPEOPERATOR\x10\x90\x01\x12&\n" +
	"!NEW_STUDIO_ROLE_TECHNICALDIRECTOR\x10\x91\x01\x12\x1f\n" +
	"\x1aNEW_STUDIO_ROLE_TONMEISTER\x10\x92\x01\x12%\n" +
	" NEW_STUDIO_ROLE_TRACKINGENGINEER\x10\x93\x01\x12+\n" +
	"&NEW_STUDIO_ROLE_TRACKINGSECONDENGINEER\x10\x94\x01\x121\n" +
	",NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESENGINEER\x10\x95\x01\x127\n" +
	"2NEW_STUDIO_ROLE_TRANSFERSANDSAFETIESSECONDENGINEER\x10\x96\x01\x12*\n" +
	"%NEW_STUDIO_ROLE_TRANSPORTATIONMANAGER\x10\x97\x01\x12!\n" +
	"\x1cNEW_STUDIO_ROLE_VIDEOGRAPHER\x10\x98\x01\x12 \n" +
	"\x1bNEW_STUDIO_ROLE_USERDEFINED\x10\x99\x01\x12\"\n" +
	"\x1dNEW_STUDIO_ROLE_VIDEOPRODUCER\x10\x9a\x01\x12 \n" +
	"\x1bNEW_STUDIO_ROLE_VISIONMIXER\x10\x9b\x01\x12!\n" +
	"\x1cNEW_STUDIO_ROLE_VISUALEDITOR\x10\x9c\x01\x12,\n" +
	"'NEW_STUDIO_ROLE_VISUALEFFECTSTECHNICIAN\x10\x9d\x01\x12\"\n" +
	"\x1dNEW_STUDIO_ROLE_VOCALPRODUCER\x10\x9e\x01\x12\x1d\n" +
	"\x18NEW_STUDIO_ROLE_WARDROBE\x10\x9f\x01*\x8c\x01\n" +
	"\x15NftConfirmationStatus\x12'\n" +
	"#NFT_CONFIRMATION_STATUS_UNSPECIFIED\x10\x00\x12$\n" +
	" NFT_CONFIRMATION_STATUS_VERIFIED\x10\x01\x12$\n" +
	" NFT_CONFIRMATION_STATUS_REJECTED\x10\x02*\xc8\x01\n" +
	"\x13OperatingSystemType\x12%\n" +
	"!OPERATING_SYSTEM_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bOPERATING_SYSTEM_TYPE_MACOS\x10\x01\x12#\n" +
	"\x1fOPERATING_SYSTEM_TYPE_MSWINDOWS\x10\x02\x12!\n" +
	"\x1dOPERATING_SYSTEM_TYPE_SYMBIAN\x10\x03\x12!\n" +
	"\x1dOPERATING_SYSTEM_TYPE_UNKNOWN\x10\x04*\x8d\x02\n" +
	"\x0fOriginalPurpose\x12 \n" +
	"\x1cORIGINAL_PURPOSE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"ORIGINAL_PURPOSE_COMMERCIALRELEASE\x10\x01\x12\x1c\n" +
	"\x18ORIGINAL_PURPOSE_KARAOKE\x10\x02\x12!\n" +
	"\x1dORIGINAL_PURPOSE_LIBRARYMUSIC\x10\x03\x12/\n" +
	"+ORIGINAL_PURPOSE_SPECIALLYCOMMISSIONEDMUSIC\x10\x04\x12\x1c\n" +
	"\x18ORIGINAL_PURPOSE_UNKNOWN\x10\x05\x12 \n" +
	"\x1cORIGINAL_PURPOSE_USERDEFINED\x10\x06*i\n" +
	"\tPLineType\x12\x1b\n" +
	"\x17P_LINE_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19P_LINE_TYPE_ORIGINALPLINE\x10\x01\x12 \n" +
	"\x1cP_LINE_TYPE_REMASTERINGPLINE\x10\x02*\x96\x01\n" +
	"\x17ParentalWarningStandard\x12)\n" +
	"%PARENTAL_WARNING_STANDARD_UNSPECIFIED\x10\x00\x12%\n" +
	"!PARENTAL_WARNING_STANDARD_RIAAPAL\x10\x01\x12)\n" +
	"%PARENTAL_WARNING_STANDARD_USERDEFINED\x10\x02*\xaf\x02\n" +
	"\x13ParentalWarningType\x12%\n" +
	"!PARENTAL_WARNING_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1ePARENTAL_WARNING_TYPE_EXPLICIT\x10\x01\x12/\n" +
	"+PARENTAL_WARNING_TYPE_EXPLICITCONTENTEDITED\x10\x02\x12+\n" +
	"'PARENTAL_WARNING_TYPE_NOADVICEAVAILABLE\x10\x03\x12%\n" +
	"!PARENTAL_WARNING_TYPE_NOTEXPLICIT\x10\x04\x12!\n" +
	"\x1dPARENTAL_WARNING_TYPE_UNKNOWN\x10\x05\x12%\n" +
	"!PARENTAL_WARNING_TYPE_USERDEFINED\x10\x06*\x92\x02\n" +
	"\x0fPartyNameFormat\x12!\n" +
	"\x1dPARTY_NAME_FORMAT_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1ePARTY_NAME_FORMAT_ABBREVIATION\x10\x01\x12&\n" +
	"\"PARTY_NAME_FORMAT_ASCIITRANSCRIBED\x10\x02\x12$\n" +
	" PARTY_NAME_FORMAT_MISSPELLEDNAME\x10\x03\x12!\n" +
	"\x1dPARTY_NAME_FORMAT_NAMEINDEXED\x10\x04\x12$\n" +
	" PARTY_NAME_FORMAT_TRANSLATEDNAME\x10\x05\x12!\n" +
	"\x1dPARTY_NAME_FORMAT_USERDEFINED\x10\x06*\xe5\x02\n" +
	"\x10PartyNamePurpose\x12\"\n" +
	"\x1ePARTY_NAME_PURPOSE_UNSPECIFIED\x10\x00\x12%\n" +
	"!PARTY_NAME_PURPOSE_CORRESPONDENCE\x10\x01\x12\x1f\n" +
	"\x1bPARTY_NAME_PURPOSE_CONTRACT\x10\x02\x12&\n" +
	"\"PARTY_NAME_PURPOSE_LYRICISTCREDITS\x10\x03\x12\x1e\n" +
	"\x1aPARTY_NAME_PURPOSE_PAYMENT\x10\x04\x12*\n" +
	"&PARTY_NAME_PURPOSE_PUBLICCOMMUNICATION\x10\x05\x12'\n" +
	"#PARTY_NAME_PURPOSE_RECORDINGCREDITS\x10\x06\x12\"\n" +
	"\x1ePARTY_NAME_PURPOSE_USERDEFINED\x10\a\x12$\n" +
	" PARTY_NAME_PURPOSE_WRITERCREDITS\x10\b*\x90\x02\n" +
	"\rPartyNameType\x12\x1f\n" +
	"\x1bPARTY_NAME_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dPARTY_NAME_TYPE_INCORRECTNAME\x10\x01\x12\x1d\n" +
	"\x19PARTY_NAME_TYPE_LEGALNAME\x10\x02\x12\x1c\n" +
	"\x18PARTY_NAME_TYPE_NICKNAME\x10\x03\x12\x1d\n" +
	"\x19PARTY_NAME_TYPE_PSEUDONYM\x10\x04\x12\x1d\n" +
	"\x19PARTY_NAME_TYPE_STAGENAME\x10\x05\x12\x1f\n" +
	"\x1bPARTY_NAME_TYPE_TRADINGNAME\x10\x06\x12\x1f\n" +
	"\x1bPARTY_NAME_TYPE_USERDEFINED\x10\a*\xd2\x02\n" +
	"\x15PartyRelationshipType\x12'\n" +
	"#PARTY_RELATIONSHIP_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!PARTY_RELATIONSHIP_TYPE_HASMEMBER\x10\x01\x12#\n" +
	"\x1fPARTY_RELATIONSHIP_TYPE_HASPART\x10\x02\x12%\n" +
	"!PARTY_RELATIONSHIP_TYPE_ISCHILDOF\x10\x03\x12&\n" +
	"\"PARTY_RELATIONSHIP_TYPE_ISMEMBEROF\x10\x04\x12&\n" +
	"\"PARTY_RELATIONSHIP_TYPE_ISPARENTOF\x10\x05\x12$\n" +
	" PARTY_RELATIONSHIP_TYPE_ISPARTOF\x10\x06\x12'\n" +
	"#PARTY_RELATIONSHIP_TYPE_USERDEFINED\x10\a*\xfd\v\n" +
	"\x18PartyRelationshipTypePIE\x12-\n" +
	")PARTY_RELATIONSHIP_TYPE_P_I_E_UNSPECIFIED\x10\x00\x124\n" +
	"0PARTY_RELATIONSHIP_TYPE_P_I_E_HASAFFILIATEMEMBER\x10\x01\x12/\n" +
	"+PARTY_RELATIONSHIP_TYPE_P_I_E_HASFULLMEMBER\x10\x02\x12+\n" +
	"'PARTY_RELATIONSHIP_TYPE_P_I_E_HASMEMBER\x10\x03\x12)\n" +
	"%PARTY_RELATIONSHIP_TYPE_P_I_E_HASPART\x10\x04\x125\n" +
	"1PARTY_RELATIONSHIP_TYPE_P_I_E_ISAFFILIATEMEMBEROF\x10\x05\x125\n" +
	"1PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHARACTERPLAYEDBY\x10\x06\x12+\n" +
	"'PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHILDOF\x10\a\x127\n" +
	"3PARTY_RELATIONSHIP_TYPE_P_I_E_ISCHILDORGANIZATIONOF\x10\b\x12.\n" +
	"*PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOAUTHOROF\x10\t\x123\n" +
	"/PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOCONTRIBUTOROF\x10\n" +
	"\x127\n" +
	"3PARTY_RELATIONSHIP_TYPE_P_I_E_ISCONSIDEREDTHESAMEAS\x10\v\x121\n" +
	"-PARTY_RELATIONSHIP_TYPE_P_I_E_ISCOPERFORMEROF\x10\f\x12/\n" +
	"+PARTY_RELATIONSHIP_TYPE_P_I_E_ISDUPLICATEOF\x10\r\x120\n" +
	",PARTY_RELATIONSHIP_TYPE_P_I_E_ISFULLMEMBEROF\x10\x0e\x12-\n" +
	")PARTY_RELATIONSHIP_TYPE_P_I_E_ISHOMONYMOF\x10\x0f\x120\n" +
	",PARTY_RELATIONSHIP_TYPE_P_I_E_ISINFLUENCEDBY\x10\x10\x120\n" +
	",PARTY_RELATIONSHIP_TYPE_P_I_E_ISINFLUENCEROF\x10\x11\x12-\n" +
	")PARTY_RELATIONSHIP_TYPE_P_I_E_ISMARRIEDTO\x10\x12\x12,\n" +
	"(PARTY_RELATIONSHIP_TYPE_P_I_E_ISMEMBEROF\x10\x13\x123\n" +
	"/PARTY_RELATIONSHIP_TYPE_P_I_E_ISNATURALPERSONOF\x10\x14\x12,\n" +
	"(PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARENTOF\x10\x15\x128\n" +
	"4PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARENTORGANIZATIONOF\x10\x16\x12*\n" +
	"&PARTY_RELATIONSHIP_TYPE_P_I_E_ISPARTOF\x10\x17\x124\n" +
	"0PARTY_RELATIONSHIP_TYPE_P_I_E_ISPLAYINGCHARACTER\x10\x18\x12/\n" +
	"+PARTY_RELATIONSHIP_TYPE_P_I_E_ISPSEUDONYMOF\x10\x19\x12-\n" +
	")PARTY_RELATIONSHIP_TYPE_P_I_E_ISRELATEDTO\x10\x1a\x129\n" +
	"5PARTY_RELATIONSHIP_TYPE_P_I_E_ISRELATEDSTAGEPERSONAOF\x10\x1b\x122\n" +
	".PARTY_RELATIONSHIP_TYPE_P_I_E_ISSTAGEPERSONAOF\x10\x1c\x12-\n" +
	")PARTY_RELATIONSHIP_TYPE_P_I_E_USERDEFINED\x10\x1d*\xbd\x03\n" +
	"\tPartyRole\x12\x1a\n" +
	"\x16PARTY_ROLE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12PARTY_ROLE_ADAPTER\x10\x01\x12\x17\n" +
	"\x13PARTY_ROLE_ARRANGER\x10\x02\x12\x17\n" +
	"\x13PARTY_ROLE_COMPOSER\x10\x03\x12\x1f\n" +
	"\x1bPARTY_ROLE_COMPOSERLYRICIST\x10\x04\x12\x16\n" +
	"\x12PARTY_ROLE_CREATOR\x10\x05\x12\x17\n" +
	"\x13PARTY_ROLE_LYRICIST\x10\x06\x12\x1d\n" +
	"\x19PARTY_ROLE_MUSICPUBLISHER\x10\a\x12 \n" +
	"\x1cPARTY_ROLE_ORIGINALPUBLISHER\x10\b\x12\"\n" +
	"\x1ePARTY_ROLE_RIGHTSADMINISTRATOR\x10\t\x12\x1a\n" +
	"\x16PARTY_ROLE_SUBARRANGER\x10\n" +
	"\x12\x1a\n" +
	"\x16PARTY_ROLE_SUBLYRICIST\x10\v\x12\x1b\n" +
	"\x17PARTY_ROLE_SUBPUBLISHER\x10\f\x12#\n" +
	"\x1fPARTY_ROLE_SUBSTITUTEDPUBLISHER\x10\r\x12\x19\n" +
	"\x15PARTY_ROLE_TRANSLATOR\x10\x0e*\xf6\x02\n" +
	"\tPartyType\x12\x1a\n" +
	"\x16PARTY_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18PARTY_TYPE_ANTHROPOMORPH\x10\x01\x12\x1c\n" +
	"\x18PARTY_TYPE_AUTHORPERSONA\x10\x02\x12\x14\n" +
	"\x10PARTY_TYPE_BRAND\x10\x03\x12\x18\n" +
	"\x14PARTY_TYPE_CHARACTER\x10\x04\x12\x1f\n" +
	"\x1bPARTY_TYPE_COMPOSINGPERSONA\x10\x05\x12\x19\n" +
	"\x15PARTY_TYPE_DEPARTMENT\x10\x06\x12\x14\n" +
	"\x10PARTY_TYPE_GROUP\x10\a\x12 \n" +
	"\x1cPARTY_TYPE_LEGALORGANIZATION\x10\b\x12\x1c\n" +
	"\x18PARTY_TYPE_NATURALPERSON\x10\t\x12\x16\n" +
	"\x12PARTY_TYPE_PERSONA\x10\n" +
	"\x12\x1b\n" +
	"\x17PARTY_TYPE_STAGEPERSONA\x10\v\x12\x1a\n" +
	"\x16PARTY_TYPE_USERDEFINED\x10\f*\xb8\x01\n" +
	"\rPendingReason\x12\x1e\n" +
	"\x1aPENDING_REASON_UNSPECIFIED\x10\x00\x12'\n" +
	"#PENDING_REASON_NOTYETPROCESSEDBYDSP\x10\x01\x12>\n" +
	":PENDING_REASON_NOTYETPROCESSEDBYRELINQUISHINGRECORDCOMPANY\x10\x02\x12\x1e\n" +
	"\x1aPENDING_REASON_USERDEFINED\x10\x03*\xd2\x02\n" +
	"\x0ePercentageType\x12\x1f\n" +
	"\x1bPERCENTAGE_TYPE_UNSPECIFIED\x10\x00\x122\n" +
	".PERCENTAGE_TYPE_PERCENTAGEOFFREEGOODSPERMITTED\x10\x01\x12,\n" +
	"(PERCENTAGE_TYPE_PERCENTAGEOFGROSSREVENUE\x10\x02\x12*\n" +
	"&PERCENTAGE_TYPE_PERCENTAGEOFNETREVENUE\x10\x03\x12(\n" +
	"$PERCENTAGE_TYPE_PERCENTAGEOFNETSALES\x10\x04\x121\n" +
	"-PERCENTAGE_TYPE_PERCENTAGEOFPRICECONSUMERPAID\x10\x05\x124\n" +
	"0PERCENTAGE_TYPE_PERCENTAGEOFSTATUTORYROYALTYRATE\x10\x06*\xcc\x03\n" +
	"\x13PhysicalCarrierType\x12%\n" +
	"!PHYSICAL_CARRIER_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cPHYSICAL_CARRIER_TYPE_BLURAY\x10\x01\x12\x1c\n" +
	"\x18PHYSICAL_CARRIER_TYPE_CD\x10\x02\x12#\n" +
	"\x1fPHYSICAL_CARRIER_TYPE_COMBIPACK\x10\x03\x12)\n" +
	"%PHYSICAL_CARRIER_TYPE_COMPACTCASSETTE\x10\x04\x12\"\n" +
	"\x1ePHYSICAL_CARRIER_TYPE_DUALDISC\x10\x05\x12\x1d\n" +
	"\x19PHYSICAL_CARRIER_TYPE_DVD\x10\x06\x12&\n" +
	"\"PHYSICAL_CARRIER_TYPE_MEMORYDEVICE\x10\a\x12\x1e\n" +
	"\x1aPHYSICAL_CARRIER_TYPE_SACD\x10\b\x12%\n" +
	"!PHYSICAL_CARRIER_TYPE_USERDEFINED\x10\t\x12'\n" +
	"#PHYSICAL_CARRIER_TYPE_VIDEOCASSETTE\x10\n" +
	"\x12#\n" +
	"\x1fPHYSICAL_CARRIER_TYPE_VINYLDISK\x10\v*\xc0\x01\n" +
	"\x14PriceInformationType\x12&\n" +
	"\"PRICE_INFORMATION_TYPE_UNSPECIFIED\x10\x00\x12.\n" +
	"*PRICE_INFORMATION_TYPE_STANDARDRETAILPRICE\x10\x01\x12(\n" +
	"$PRICE_INFORMATION_TYPE_PREORDERPRICE\x10\x02\x12&\n" +
	"\"PRICE_INFORMATION_TYPE_USERDEFINED\x10\x03*\x94\x01\n" +
	"\x10PrimaryColorType\x12\"\n" +
	"\x1ePRIMARY_COLOR_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19PRIMARY_COLOR_TYPE_BT_601\x10\x01\x12\x1d\n" +
	"\x19PRIMARY_COLOR_TYPE_BT_709\x10\x02\x12\x1e\n" +
	"\x1aPRIMARY_COLOR_TYPE_BT_2020\x10\x03*\xf3\x01\n" +
	"\vProductType\x12\x1c\n" +
	"\x18PRODUCT_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19PRODUCT_TYPE_AUDIOPRODUCT\x10\x01\x12 \n" +
	"\x1cPRODUCT_TYPE_GRAPHICSPRODUCT\x10\x02\x12(\n" +
	"$PRODUCT_TYPE_MIXEDMEDIABUNDLEPRODUCT\x10\x03\x12\x1e\n" +
	"\x1aPRODUCT_TYPE_MOBILEPRODUCT\x10\x04\x12\x1c\n" +
	"\x18PRODUCT_TYPE_USERDEFINED\x10\x05\x12\x1d\n" +
	"\x19PRODUCT_TYPE_VIDEOPRODUCT\x10\x06*\xe8\x03\n" +
	"\tProfileId\x12\x1a\n" +
	"\x16PROFILE_ID_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cPROFILE_ID_BASICAUDIOPROFILE\x10\x01\x12#\n" +
	"\x1fPROFILE_ID_BASICAUDIOPROFILEMLC\x10\x02\x12#\n" +
	"\x1fPROFILE_ID_BASICAUDIOPROFILESRB\x10\x03\x12\x19\n" +
	"\x15PROFILE_ID_UGCPROFILE\x10\x04\x12\x1c\n" +
	"\x18PROFILE_ID_UGCPROFILESRB\x10\x05\x12!\n" +
	"\x1dPROFILE_ID_AUDIOVISUALPROFILE\x10\x06\x12$\n" +
	" PROFILE_ID_AUDIOVISUALPROFILESRB\x10\a\x12&\n" +
	"\"PROFILE_ID_ROYALTYREPORTINGPROFILE\x10\b\x12$\n" +
	" PROFILE_ID_RADIOBROADCASTPROFILE\x10\t\x12<\n" +
	"8PROFILE_ID_FINANCIALREPORTINGTORECORDCOMPANIESPROFILESRB\x10\n" +
	"\x12 \n" +
	"\x1cPROFILE_ID_MASTERLISTPROFILE\x10\v\x12#\n" +
	"\x1fPROFILE_ID_MASTERLISTPROFILESRB\x10\f*\x9d\x02\n" +
	"\fProfileIdCDM\x12 \n" +
	"\x1cPROFILE_ID_C_D_M_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17PROFILE_ID_C_D_M_CLAIMS\x10\x01\x12\"\n" +
	"\x1ePROFILE_ID_C_D_M_CLAIMSAMOUNTS\x10\x02\x12&\n" +
	"\"PROFILE_ID_C_D_M_DATADISCREPANCIES\x10\x03\x12+\n" +
	"'PROFILE_ID_C_D_M_OVERCLAIMDISCREPANCIES\x10\x04\x12-\n" +
	")PROFILE_ID_C_D_M_CLAIMSAMOUNTSCORRECTIONS\x10\x05\x12&\n" +
	"\"PROFILE_ID_C_D_M_CLAIMSCORRECTIONS\x10\x06*\xd6\x01\n" +
	"\rProfileIdMWDR\x12\"\n" +
	"\x1ePROFILE_ID_M_W_D_R_UNSPECIFIED\x10\x00\x12+\n" +
	"'PROFILE_ID_M_W_D_R_CONFLICTNOTIFICATION\x10\x01\x12'\n" +
	"#PROFILE_ID_M_W_D_R_LINKNOTIFICATION\x10\x02\x12!\n" +
	"\x1dPROFILE_ID_M_W_D_R_REVOCATION\x10\x03\x12(\n" +
	"$PROFILE_ID_M_W_D_R_SHARENOTIFICATION\x10\x04*q\n" +
	"\vProfileType\x12\x1c\n" +
	"\x18PROFILE_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dPROFILE_TYPE_IMMUTABLEPROFILE\x10\x01\x12!\n" +
	"\x1dPROFILE_TYPE_UPDATABLEPROFILE\x10\x02*\xe3\x01\n" +
	"\aPurpose\x12\x17\n" +
	"\x13PURPOSE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17PURPOSE_BACKGROUNDMUSIC\x10\x01\x12\x1f\n" +
	"\x1bPURPOSE_CHANNELTRAILERMUSIC\x10\x02\x12\x13\n" +
	"\x0fPURPOSE_EXTRACT\x10\x03\x12\x1c\n" +
	"\x18PURPOSE_FILMTRAILERMUSIC\x10\x04\x12\x1b\n" +
	"\x17PURPOSE_FOREGROUNDMUSIC\x10\x05\x12\x18\n" +
	"\x14PURPOSE_TRAILERMUSIC\x10\x06\x12\x17\n" +
	"\x13PURPOSE_USERDEFINED\x10\a*\xa4\x11\n" +
	"\fRatingAgency\x12\x1d\n" +
	"\x19RATING_AGENCY_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12RATING_AGENCY_ACMA\x10\x01\x12\x15\n" +
	"\x11RATING_AGENCY_AFR\x10\x02\x12\x17\n" +
	"\x13RATING_AGENCY_AGCOM\x10\x03\x12\x18\n" +
	"\x14RATING_AGENCY_ANATEL\x10\x04\x12\x16\n" +
	"\x12RATING_AGENCY_BBFC\x10\x05\x12\x16\n" +
	"\x12RATING_AGENCY_BFCO\x10\x06\x12\x16\n" +
	"\x12RATING_AGENCY_BFSC\x10\a\x12\x16\n" +
	"\x12RATING_AGENCY_BFVC\x10\b\x12\x17\n" +
	"\x13RATING_AGENCY_BMUKK\x10\t\x12\x16\n" +
	"\x12RATING_AGENCY_CBFC\x10\n" +
	"\x12\x16\n" +
	"\x12RATING_AGENCY_CBSC\x10\v\x12\x18\n" +
	"\x14RATING_AGENCY_CBSC_F\x10\f\x12\x15\n" +
	"\x11RATING_AGENCY_CCC\x10\r\x12\x15\n" +
	"\x11RATING_AGENCY_CCE\x10\x0e\x12\x17\n" +
	"\x13RATING_AGENCY_CHVRS\x10\x0f\x12\x16\n" +
	"\x12RATING_AGENCY_CICF\x10\x10\x12\x15\n" +
	"\x11RATING_AGENCY_CNA\x10\x11\x12\x15\n" +
	"\x11RATING_AGENCY_CNC\x10\x12\x12\x16\n" +
	"\x12RATING_AGENCY_CPBC\x10\x13\x12\x15\n" +
	"\x11RATING_AGENCY_CSA\x10\x14\x12\x16\n" +
	"\x12RATING_AGENCY_CSCF\x10\x15\x12\x17\n" +
	"\x13RATING_AGENCY_DJCTQ\x10\x16\x12\x17\n" +
	"\x13RATING_AGENCY_EIRIN\x10\x17\x12\x16\n" +
	"\x12RATING_AGENCY_ESRB\x10\x18\x12\x15\n" +
	"\x11RATING_AGENCY_FAB\x10\x19\x12\x15\n" +
	"\x11RATING_AGENCY_FCB\x10\x1a\x12\x15\n" +
	"\x11RATING_AGENCY_FCO\x10\x1b\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_CH\x10\x1c\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_CZ\x10\x1d\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_EG\x10\x1e\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_EE\x10\x1f\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_GR\x10 \x12\x19\n" +
	"\x15RATING_AGENCY_FILM_PE\x10!\x12\x19\n" +
	"\x15RATING_AGENCY_FILM_SK\x10\"\x12\x1e\n" +
	"\x1aRATING_AGENCY_FILMTILSYNET\x10#\x12\x15\n" +
	"\x11RATING_AGENCY_FPB\x10$\x12\x15\n" +
	"\x11RATING_AGENCY_FRB\x10%\x12\x15\n" +
	"\x11RATING_AGENCY_FSK\x10&\x12\x16\n" +
	"\x12RATING_AGENCY_ICAA\x10'\x12\x16\n" +
	"\x12RATING_AGENCY_IFCO\x10(\x12\x17\n" +
	"\x13RATING_AGENCY_IFCOF\x10)\x12\x17\n" +
	"\x13RATING_AGENCY_INCAA\x10*\x12\x16\n" +
	"\x12RATING_AGENCY_KFCB\x10+\x12\x1c\n" +
	"\x18RATING_AGENCY_KIJKWIJZER\x10,\x12\x16\n" +
	"\x12RATING_AGENCY_KMRB\x10-\x12\x14\n" +
	"\x10RATING_AGENCY_KR\x10.\x12\x17\n" +
	"\x13RATING_AGENCY_KRRIT\x10/\x12\x15\n" +
	"\x11RATING_AGENCY_LSF\x100\x12\x17\n" +
	"\x13RATING_AGENCY_MBACT\x101\x12\x15\n" +
	"\x11RATING_AGENCY_MBU\x102\x12\x17\n" +
	"\x13RATING_AGENCY_MCCAA\x103\x12\x15\n" +
	"\x11RATING_AGENCY_MDA\x104\x12\x16\n" +
	"\x12RATING_AGENCY_MDCB\x105\x12\x1f\n" +
	"\x1bRATING_AGENCY_MEDIETILSYNET\x106\x12\x16\n" +
	"\x12RATING_AGENCY_MEKU\x107\x12\x16\n" +
	"\x12RATING_AGENCY_MFCB\x108\x12\x15\n" +
	"\x11RATING_AGENCY_MIC\x109\x12\x16\n" +
	"\x12RATING_AGENCY_MKRF\x10:\x12\x15\n" +
	"\x11RATING_AGENCY_MOC\x10;\x12\x18\n" +
	"\x14RATING_AGENCY_MOC_TW\x10<\x12\x16\n" +
	"\x12RATING_AGENCY_MPAA\x10=\x12\x17\n" +
	"\x13RATING_AGENCY_MPAAT\x10>\x12\x17\n" +
	"\x13RATING_AGENCY_MTRCB\x10?\x12\x15\n" +
	"\x11RATING_AGENCY_NBC\x10@\x12\x15\n" +
	"\x11RATING_AGENCY_NCS\x10A\x12\x16\n" +
	"\x12RATING_AGENCY_NFRC\x10B\x12\x17\n" +
	"\x13RATING_AGENCY_NFVCB\x10C\x12\x17\n" +
	"\x13RATING_AGENCY_NICAM\x10D\x12\x15\n" +
	"\x11RATING_AGENCY_NKC\x10E\x12\x16\n" +
	"\x12RATING_AGENCY_OFLC\x10F\x12\x19\n" +
	"\x15RATING_AGENCY_OFLC_NZ\x10G\x12\x16\n" +
	"\x12RATING_AGENCY_OFRB\x10H\x12\x16\n" +
	"\x12RATING_AGENCY_PEGI\x10I\x12\x17\n" +
	"\x13RATING_AGENCY_RCNOF\x10J\x12\x16\n" +
	"\x12RATING_AGENCY_RDCQ\x10K\x12\x16\n" +
	"\x12RATING_AGENCY_RIAA\x10L\x12\x15\n" +
	"\x11RATING_AGENCY_RTC\x10M\x12\x15\n" +
	"\x11RATING_AGENCY_RTE\x10N\x12\x15\n" +
	"\x11RATING_AGENCY_SBB\x10O\x12\x17\n" +
	"\x13RATING_AGENCY_SIBCI\x10P\x12\x17\n" +
	"\x13RATING_AGENCY_SMAIS\x10Q\x12\x17\n" +
	"\x13RATING_AGENCY_SM_SA\x10R\x12\x19\n" +
	"\x15RATING_AGENCY_SPIO_JK\x10S\x12\x16\n" +
	"\x12RATING_AGENCY_USFA\x10T\x12\x16\n" +
	"\x12RATING_AGENCY_TELA\x10U\x12\x16\n" +
	"\x12RATING_AGENCY_TVPG\x10V\x12\x1d\n" +
	"\x19RATING_AGENCY_USERDEFINED\x10W\x12\x15\n" +
	"\x11RATING_AGENCY_VET\x10X*\xe7\x04\n" +
	"\fRatingReason\x12\x1d\n" +
	"\x19RATING_REASON_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17RATING_REASON_BEHAVIOUR\x10\x01\x12\x1b\n" +
	"\x17RATING_REASON_BLASPHEMY\x10\x02\x12\x17\n" +
	"\x13RATING_REASON_CRIME\x10\x03\x12+\n" +
	"'RATING_REASON_DISCRIMINATIONORPREJUDICE\x10\x04\x12\x17\n" +
	"\x13RATING_REASON_DRUGS\x10\x05\x12\x1d\n" +
	"\x19RATING_REASON_EXPLICITSEX\x10\x06\x12!\n" +
	"\x1dRATING_REASON_EXTREMEVIOLENCE\x10\a\x12\x1e\n" +
	"\x1aRATING_REASON_FEARORHORROR\x10\b\x12\x1a\n" +
	"\x16RATING_REASON_GAMBLING\x10\t\x12\x1e\n" +
	"\x1aRATING_REASON_ILLEGALDRUGS\x10\n" +
	"\x12\x1a\n" +
	"\x16RATING_REASON_LANGUAGE\x10\v\x12\x1c\n" +
	"\x18RATING_REASON_LEGALDRUGS\x10\f\x12\x18\n" +
	"\x14RATING_REASON_NUDITY\x10\r\x12 \n" +
	"\x1cRATING_REASON_ONLINEGAMEPLAY\x10\x0e\x12\x15\n" +
	"\x11RATING_REASON_SEX\x10\x0f\x12 \n" +
	"\x1cRATING_REASON_SEXUALVIOLENCE\x10\x10\x12\x17\n" +
	"\x13RATING_REASON_THEME\x10\x11\x12\x1d\n" +
	"\x19RATING_REASON_USERDEFINED\x10\x12\x12\x1a\n" +
	"\x16RATING_REASON_VIOLENCE\x10\x13*\xe6\x04\n" +
	"\x0eRdrMessageType\x12 \n" +
	"\x1cRDR_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12B\n" +
	">RDR_MESSAGE_TYPE_DECLARATIONOFSOUNDRECORDINGRIGHTSCLAIMMESSAGE\x10\x01\x12<\n" +
	"8RDR_MESSAGE_TYPE_REQUESTSOUNDRECORDINGRIGHTSCLAIMMESSAGE\x10\x02\x12;\n" +
	"7RDR_MESSAGE_TYPE_REVOKESOUNDRECORDINGRIGHTSCLAIMMESSAGE\x10\x03\x12'\n" +
	"#RDR_MESSAGE_TYPE_SALESREPORTMESSAGE\x10\x04\x120\n" +
	",RDR_MESSAGE_TYPE_DECLARATIONOFREVENUEMESSAGE\x10\x05\x123\n" +
	"/RDR_MESSAGE_TYPE_RIGHTSCLAIMSTATUSUPDATEMESSAGE\x10\x06\x128\n" +
	"4RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATEMESSAGE\x10\a\x12D\n" +
	"@RDR_MESSAGE_TYPE_ASSERTIONOFCOLLECTIONMANDATESTATUSUPDATEMESSAGE\x10\b\x123\n" +
	"/RDR_MESSAGE_TYPE_REVOKECOLLECTIONMANDATEMESSAGE\x10\t\x12.\n" +
	"*RDR_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE\x10\n" +
	"*v\n" +
	"\x0fRdrcBatchStatus\x12!\n" +
	"\x1dRDRC_BATCH_STATUS_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19RDRC_BATCH_STATUS_BATCHOK\x10\x01\x12!\n" +
	"\x1dRDRC_BATCH_STATUS_USERDEFINED\x10\x02*\xb3\x01\n" +
	"\x0eRdrcFileStatus\x12 \n" +
	"\x1cRDRC_FILE_STATUS_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16RDRC_FILE_STATUS_ERROR\x10\x01\x12!\n" +
	"\x1dRDRC_FILE_STATUS_FILERECEIVED\x10\x02\x12\x1e\n" +
	"\x1aRDRC_FILE_STATUS_FILEVALID\x10\x03\x12 \n" +
	"\x1cRDRC_FILE_STATUS_USERDEFINED\x10\x04*\xf6\x01\n" +
	"\x13ReasonForNameChange\x12&\n" +
	"\"REASON_FOR_NAME_CHANGE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bREASON_FOR_NAME_CHANGE_DEED\x10\x01\x12#\n" +
	"\x1fREASON_FOR_NAME_CHANGE_MARRIAGE\x10\x02\x12#\n" +
	"\x1fREASON_FOR_NAME_CHANGE_RELIGION\x10\x03\x12$\n" +
	" REASON_FOR_NAME_CHANGE_SEXCHANGE\x10\x04\x12&\n" +
	"\"REASON_FOR_NAME_CHANGE_USERDEFINED\x10\x05*\xcf\x01\n" +
	"\x14RecipientRevenueType\x12&\n" +
	"\"RECIPIENT_REVENUE_TYPE_UNSPECIFIED\x10\x00\x126\n" +
	"2RECIPIENT_REVENUE_TYPE_PERFORMERANDPRODUCERREVENUE\x10\x01\x12+\n" +
	"'RECIPIENT_REVENUE_TYPE_PERFORMERREVENUE\x10\x02\x12*\n" +
	"&RECIPIENT_REVENUE_TYPE_PRODUCERREVENUE\x10\x03*\xde\x01\n" +
	"\x17RecipientRevenueTypeRDR\x12,\n" +
	"(RECIPIENT_REVENUE_TYPE_R_D_R_UNSPECIFIED\x10\x00\x125\n" +
	"1RECIPIENT_REVENUE_TYPE_R_D_R_PERFORMERONLYREVENUE\x10\x01\x124\n" +
	"0RECIPIENT_REVENUE_TYPE_R_D_R_PRODUCERONLYREVENUE\x10\x02\x12(\n" +
	"$RECIPIENT_REVENUE_TYPE_R_D_R_REVENUE\x10\x03*\xdb\x19\n" +
	"\x0fRecordingFormat\x12 \n" +
	"\x1cRECORDING_FORMAT_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bRECORDING_FORMAT_E_360VIDEO\x10\x01\x12\x1d\n" +
	"\x19RECORDING_FORMAT_ACOUSTIC\x10\x02\x12!\n" +
	"\x1dRECORDING_FORMAT_ADULTCONTENT\x10\x03\x12'\n" +
	"#RECORDING_FORMAT_ADVERTISEMENTVIDEO\x10\x04\x12#\n" +
	"\x1fRECORDING_FORMAT_ADVICEMAGAZINE\x10\x05\x12\x1e\n" +
	"\x1aRECORDING_FORMAT_ANIMATION\x10\x06\x12\x1e\n" +
	"\x1aRECORDING_FORMAT_AWARDSHOW\x10\a\x12 \n" +
	"\x1cRECORDING_FORMAT_BALLETVIDEO\x10\b\x12#\n" +
	"\x1fRECORDING_FORMAT_BEHINDTHEMUSIC\x10\t\x12$\n" +
	" RECORDING_FORMAT_BEHINDTHESCENES\x10\n" +
	"\x12'\n" +
	"#RECORDING_FORMAT_BLACKANDWHITEVIDEO\x10\v\x12*\n" +
	"&RECORDING_FORMAT_CAUSERELATEDRECORDING\x10\f\x12\"\n" +
	"\x1eRECORDING_FORMAT_CHILDRENSFILM\x10\r\x12#\n" +
	"\x1fRECORDING_FORMAT_COLORIZEDVIDEO\x10\x0e\x12 \n" +
	"\x1cRECORDING_FORMAT_COLUMNVIDEO\x10\x0f\x12 \n" +
	"\x1cRECORDING_FORMAT_CONCERTCLIP\x10\x10\x12!\n" +
	"\x1dRECORDING_FORMAT_CONCERTVIDEO\x10\x11\x12-\n" +
	")RECORDING_FORMAT_CONTENTPROVIDERORIGINALS\x10\x12\x12\"\n" +
	"\x1eRECORDING_FORMAT_CORPORATEFILM\x10\x13\x12\x1c\n" +
	"\x18RECORDING_FORMAT_CREDITS\x10\x14\x12\x1f\n" +
	"\x1bRECORDING_FORMAT_DANCEVIDEO\x10\x15\x12 \n" +
	"\x1cRECORDING_FORMAT_DOCUMENTARY\x10\x16\x12\x1a\n" +
	"\x16RECORDING_FORMAT_DRAMA\x10\x17\x12*\n" +
	"&RECORDING_FORMAT_DRAMATICOMUSICALVIDEO\x10\x18\x12%\n" +
	"!RECORDING_FORMAT_EDUCATIONALVIDEO\x10\x19\x12\x1c\n" +
	"\x18RECORDING_FORMAT_EPISODE\x10\x1a\x12 \n" +
	"\x1cRECORDING_FORMAT_FEATUREFILM\x10\x1b\x12\x1c\n" +
	"\x18RECORDING_FORMAT_FICTION\x10\x1c\x12%\n" +
	"!RECORDING_FORMAT_INFOMERCIALVIDEO\x10\x1d\x12(\n" +
	"$RECORDING_FORMAT_INTERACTIVERESOURCE\x10\x1e\x12\x1e\n" +
	"\x1aRECORDING_FORMAT_INTERVIEW\x10\x1f\x12\x1c\n" +
	"\x18RECORDING_FORMAT_KARAOKE\x10 \x12'\n" +
	"#RECORDING_FORMAT_LIVEEVENTRECORDING\x10!\x12/\n" +
	"+RECORDING_FORMAT_LIVEEVENTRECORDINGINSTUDIO\x10\"\x12#\n" +
	"\x1fRECORDING_FORMAT_LIVEEVENTVIDEO\x10#\x12\x1f\n" +
	"\x1bRECORDING_FORMAT_LIVESTREAM\x10$\x12'\n" +
	"#RECORDING_FORMAT_LOWCOMPLEXITYVIDEO\x10%\x12\x1f\n" +
	"\x1bRECORDING_FORMAT_LYRICVIDEO\x10&\x12\x1d\n" +
	"\x19RECORDING_FORMAT_MAGAZINE\x10'\x12\x19\n" +
	"\x15RECORDING_FORMAT_MENU\x10(\x12$\n" +
	" RECORDING_FORMAT_MULTIMEDIAVIDEO\x10)\x12$\n" +
	" RECORDING_FORMAT_MUSICALWORKCLIP\x10*\x12.\n" +
	"*RECORDING_FORMAT_MUSICALWORKREADALONGVIDEO\x10+\x12'\n" +
	"#RECORDING_FORMAT_MUSICALWORKTRAILER\x10,\x12,\n" +
	"(RECORDING_FORMAT_MUSICALWORKVIDEOCHAPTER\x10-\x12\x19\n" +
	"\x15RECORDING_FORMAT_NEWS\x10.\x12'\n" +
	"#RECORDING_FORMAT_NONMUSICALWORKCLIP\x10/\x121\n" +
	"-RECORDING_FORMAT_NONMUSICALWORKREADALONGVIDEO\x100\x12*\n" +
	"&RECORDING_FORMAT_NONMUSICALWORKTRAILER\x101\x12/\n" +
	"+RECORDING_FORMAT_NONMUSICALWORKVIDEOCHAPTER\x102\x122\n" +
	".RECORDING_FORMAT_NONSERIALAUDIOVISUALRECORDING\x103\x12'\n" +
	"#RECORDING_FORMAT_OFFICIALMUSICVIDEO\x104\x12\x1f\n" +
	"\x1bRECORDING_FORMAT_OPERAVIDEO\x105\x12 \n" +
	"\x1cRECORDING_FORMAT_PERFORMANCE\x106\x12\x1f\n" +
	"\x1bRECORDING_FORMAT_RAWFOOTAGE\x107\x12#\n" +
	"\x1fRECORDING_FORMAT_READALONGVIDEO\x108\x12'\n" +
	"#RECORDING_FORMAT_REALITYTVSHOWVIDEO\x109\x12\x1c\n" +
	"\x18RECORDING_FORMAT_EXCERPT\x10:\x12\x1b\n" +
	"\x17RECORDING_FORMAT_SEASON\x10;\x12/\n" +
	"+RECORDING_FORMAT_SERIALAUDIOVISUALRECORDING\x10<\x12\x1b\n" +
	"\x17RECORDING_FORMAT_SERIES\x10=\x12\x1c\n" +
	"\x18RECORDING_FORMAT_SESSION\x10>\x12\x1e\n" +
	"\x1aRECORDING_FORMAT_SHORTFILM\x10?\x12 \n" +
	"\x1cRECORDING_FORMAT_SILENTVIDEO\x10@\x12 \n" +
	"\x1cRECORDING_FORMAT_SKETCHVIDEO\x10A\x12\x1f\n" +
	"\x1bRECORDING_FORMAT_SOAPSITCOM\x10B\x12!\n" +
	"\x1dRECORDING_FORMAT_SPECIALEVENT\x10C\x12\x1a\n" +
	"\x16RECORDING_FORMAT_SPORT\x10D\x12 \n" +
	"\x1cRECORDING_FORMAT_STATICVIDEO\x10E\x12$\n" +
	" RECORDING_FORMAT_STUDIORECORDING\x10F\x12(\n" +
	"$RECORDING_FORMAT_THEATRICALWORKVIDEO\x10G\x12\x1e\n" +
	"\x1aRECORDING_FORMAT_TOURDIARY\x10H\x12!\n" +
	"\x1dRECORDING_FORMAT_TRAILERVIDEO\x10I\x12\x1d\n" +
	"\x19RECORDING_FORMAT_TUTORIAL\x10J\x12\x1b\n" +
	"\x17RECORDING_FORMAT_TVFILM\x10K\x12&\n" +
	"\"RECORDING_FORMAT_TVFILMPERFORMANCE\x10L\x12\x1e\n" +
	"\x1aRECORDING_FORMAT_TVPROGRAM\x10M\x12 \n" +
	"\x1cRECORDING_FORMAT_TVSHOWVIDEO\x10N\x12\x1c\n" +
	"\x18RECORDING_FORMAT_UNKNOWN\x10O\x12 \n" +
	"\x1cRECORDING_FORMAT_USERDEFINED\x10P\x12\"\n" +
	"\x1eRECORDING_FORMAT_VERTICALVIDEO\x10Q\x12!\n" +
	"\x1dRECORDING_FORMAT_VIDEOCHAPTER\x10R\x12\x1e\n" +
	"\x1aRECORDING_FORMAT_VIDEOCLIP\x10S\x12 \n" +
	"\x1cRECORDING_FORMAT_VIDEOREPORT\x10T\x12\x1e\n" +
	"\x1aRECORDING_FORMAT_VIDEOSTEM\x10U\x12-\n" +
	")RECORDING_FORMAT_VIRTUALREALITYEXPERIENCE\x10V\x12\x1f\n" +
	"\x1bRECORDING_FORMAT_VISUALIZER\x10W\x12\x19\n" +
	"\x15RECORDING_FORMAT_VLOG\x10X\x12\x1d\n" +
	"\x19RECORDING_FORMAT_WEBISODE\x10Y\x12 \n" +
	"\x1cRECORDING_FORMAT_WEBRESOURCE\x10Z*\xf6\x02\n" +
	"\rRecordingMode\x12\x1e\n" +
	"\x1aRECORDING_MODE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cRECORDING_MODE_BINAURALAUDIO\x10\x01\x12!\n" +
	"\x1dRECORDING_MODE_IMMERSIVEAUDIO\x10\x02\x12\x16\n" +
	"\x12RECORDING_MODE_LCR\x10\x03\x12\x17\n" +
	"\x13RECORDING_MODE_MONO\x10\x04\x12$\n" +
	" RECORDING_MODE_MULTICHANNELAUDIO\x10\x05\x12\x1d\n" +
	"\x19RECORDING_MODE_MULTITRACK\x10\x06\x12\x17\n" +
	"\x13RECORDING_MODE_QUAD\x10\a\x12\x18\n" +
	"\x14RECORDING_MODE_STEMS\x10\b\x12\x19\n" +
	"\x15RECORDING_MODE_STEREO\x10\t\x12 \n" +
	"\x1cRECORDING_MODE_SURROUNDSOUND\x10\n" +
	"\x12\x1a\n" +
	"\x16RECORDING_MODE_UNKNOWN\x10\v*\x8a\x01\n" +
	"\x11ReferenceCreation\x12\"\n" +
	"\x1eREFERENCE_CREATION_UNSPECIFIED\x10\x00\x12(\n" +
	"$REFERENCE_CREATION_REFERENCERESOURCE\x10\x01\x12'\n" +
	"#REFERENCE_CREATION_CONSUMERRESOURCE\x10\x02*i\n" +
	"\rReferenceUnit\x12\x1e\n" +
	"\x1aREFERENCE_UNIT_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19REFERENCE_UNIT_PERLICENSE\x10\x01\x12\x19\n" +
	"\x15REFERENCE_UNIT_PERUSE\x10\x02*\xdb\x02\n" +
	"\x12RegistrationStatus\x12#\n" +
	"\x1fREGISTRATION_STATUS_UNSPECIFIED\x10\x00\x121\n" +
	"-REGISTRATION_STATUS_CLAIMMEETSCOREDATAPROFILE\x10\x01\x124\n" +
	"0REGISTRATION_STATUS_CLAIMMEETSRECOMMENDEDPROFILE\x10\x02\x12%\n" +
	"!REGISTRATION_STATUS_PENDINGREVIEW\x10\x03\x121\n" +
	"-REGISTRATION_STATUS_RESOURCEREGISTEREDINVALID\x10\x04\x12/\n" +
	"+REGISTRATION_STATUS_RESOURCEREGISTEREDVALID\x10\x05\x12,\n" +
	"(REGISTRATION_STATUS_REGISTRATIONREJECTED\x10\x06*\xef\x01\n" +
	"\x0fRejectionReason\x12 \n" +
	"\x1cREJECTION_REASON_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eREJECTION_REASON_NOTFOUNDBYDSP\x10\x01\x129\n" +
	"5REJECTION_REASON_NOTFOUNDBYRELINQUISHINGRECORDCOMPANY\x10\x02\x129\n" +
	"5REJECTION_REASON_REJECTEDBYRELINQUISHINGRECORDCOMPANY\x10\x03\x12 \n" +
	"\x1cREJECTION_REASON_USERDEFINED\x10\x04*\x90\x02\n" +
	"\x11RelationalRelator\x12\"\n" +
	"\x1eRELATIONAL_RELATOR_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aRELATIONAL_RELATOR_EQUALTO\x10\x01\x12\x1f\n" +
	"\x1bRELATIONAL_RELATOR_LESSTHAN\x10\x02\x12(\n" +
	"$RELATIONAL_RELATOR_LESSTHANOREQUALTO\x10\x03\x12\x1f\n" +
	"\x1bRELATIONAL_RELATOR_MORETHAN\x10\x04\x12(\n" +
	"$RELATIONAL_RELATOR_MORETHANOREQUALTO\x10\x05\x12!\n" +
	"\x1dRELATIONAL_RELATOR_NOTEQUALTO\x10\x06*\xf2\x01\n" +
	"\x1eReleaseProfileVariantVersionId\x122\n" +
	".RELEASE_PROFILE_VARIANT_VERSION_ID_UNSPECIFIED\x10\x00\x12/\n" +
	"+RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET\x10\x01\x129\n" +
	"5RELEASE_PROFILE_VARIANT_VERSION_ID_BOXEDSET_CLASSICAL\x10\x02\x120\n" +
	",RELEASE_PROFILE_VARIANT_VERSION_ID_CLASSICAL\x10\x03*\xa8\x03\n" +
	"\x17ReleaseProfileVersionId\x12*\n" +
	"&RELEASE_PROFILE_VERSION_ID_UNSPECIFIED\x10\x00\x12$\n" +
	" RELEASE_PROFILE_VERSION_ID_AUDIO\x10\x01\x12$\n" +
	" RELEASE_PROFILE_VERSION_ID_DJMIX\x10\x02\x127\n" +
	"3RELEASE_PROFILE_VERSION_ID_LONGFORMMUSICALWORKVIDEO\x10\x03\x12)\n" +
	"%RELEASE_PROFILE_VERSION_ID_MIXEDMEDIA\x10\x04\x12'\n" +
	"#RELEASE_PROFILE_VERSION_ID_RINGTONE\x10\x05\x120\n" +
	",RELEASE_PROFILE_VERSION_ID_SIMPLEAUDIOSINGLE\x10\x06\x120\n" +
	",RELEASE_PROFILE_VERSION_ID_SIMPLEVIDEOSINGLE\x10\a\x12$\n" +
	" RELEASE_PROFILE_VERSION_ID_VIDEO\x10\b*\xb6\v\n" +
	"\x17ReleaseRelationshipType\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_UNSPECIFIED\x10\x00\x123\n" +
	"/RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMENSEMBLE\x10\x01\x127\n" +
	"3RELEASE_RELATIONSHIP_TYPE_HASARTISTFROMSAMEENSEMBLE\x10\x02\x12,\n" +
	"(RELEASE_RELATIONSHIP_TYPE_HASCONTENTFROM\x10\x03\x123\n" +
	"/RELEASE_RELATIONSHIP_TYPE_HASENSEMBLEWITHARTIST\x10\x04\x12+\n" +
	"'RELEASE_RELATIONSHIP_TYPE_HASSAMEARTIST\x10\x05\x125\n" +
	"1RELEASE_RELATIONSHIP_TYPE_HASSAMERECORDINGPROJECT\x10\x06\x12/\n" +
	"+RELEASE_RELATIONSHIP_TYPE_HASSIMILARCONTENT\x10\a\x12,\n" +
	"(RELEASE_RELATIONSHIP_TYPE_ISAUDIOUSEDFOR\x10\b\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISDIFFERENTENCODING\x10\t\x12;\n" +
	"7RELEASE_RELATIONSHIP_TYPE_ISDIGITALEQUIVALENTTOPHYSICAL\x10\n" +
	"\x12/\n" +
	"+RELEASE_RELATIONSHIP_TYPE_ISEDITEDVERSIONOF\x10\v\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOAUDIO\x10\f\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISEQUIVALENTTOVIDEO\x10\r\x121\n" +
	"-RELEASE_RELATIONSHIP_TYPE_ISEXTENDEDFROMALBUM\x10\x0e\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_ISFROMAUDIO\x10\x0f\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_ISFROMVIDEO\x10\x10\x122\n" +
	".RELEASE_RELATIONSHIP_TYPE_ISIMMERSIVEEDITIONOF\x10\x11\x125\n" +
	"1RELEASE_RELATIONSHIP_TYPE_ISNONIMMERSIVEEDITIONOF\x10\x12\x12-\n" +
	")RELEASE_RELATIONSHIP_TYPE_ISPARENTRELEASE\x10\x13\x12;\n" +
	"7RELEASE_RELATIONSHIP_TYPE_ISPHYSICALEQUIVALENTTODIGITAL\x10\x14\x122\n" +
	".RELEASE_RELATIONSHIP_TYPE_ISRELEASEFROMRELEASE\x10\x15\x122\n" +
	".RELEASE_RELATIONSHIP_TYPE_ISSHORTENEDFROMALBUM\x10\x16\x12,\n" +
	"(RELEASE_RELATIONSHIP_TYPE_ISSLOWEDDOWNOF\x10\x17\x125\n" +
	"1RELEASE_RELATIONSHIP_TYPE_ISSOURCEOFEDITEDVERSION\x10\x18\x12(\n" +
	"$RELEASE_RELATIONSHIP_TYPE_ISSPEDUPOF\x10\x19\x12,\n" +
	"(RELEASE_RELATIONSHIP_TYPE_ISVIDEOUSEDFOR\x10\x1a\x12%\n" +
	"!RELEASE_RELATIONSHIP_TYPE_UNKNOWN\x10\x1b\x12)\n" +
	"%RELEASE_RELATIONSHIP_TYPE_USERDEFINED\x10\x1c*\x94\x01\n" +
	"\x13ReleaseResourceType\x12%\n" +
	"!RELEASE_RESOURCE_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%RELEASE_RESOURCE_TYPE_PRIMARYRESOURCE\x10\x01\x12+\n" +
	"'RELEASE_RESOURCE_TYPE_SECONDARYRESOURCE\x10\x02*\xdc\r\n" +
	"\vReleaseType\x12\x1c\n" +
	"\x18RELEASE_TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12RELEASE_TYPE_ALBUM\x10\x01\x12!\n" +
	"\x1dRELEASE_TYPE_ALERTTONERELEASE\x10\x02\x12\x1e\n" +
	"\x1aRELEASE_TYPE_ASPERCONTRACT\x10\x03\x12!\n" +
	"\x1dRELEASE_TYPE_AUDIOBOOKRELEASE\x10\x04\x12\"\n" +
	"\x1eRELEASE_TYPE_AUDIODRAMARELEASE\x10\x05\x12&\n" +
	"\"RELEASE_TYPE_BACKCOVERIMAGERELEASE\x10\x06\x12(\n" +
	"$RELEASE_TYPE_BOOKLETBACKIMAGERELEASE\x10\a\x12)\n" +
	"%RELEASE_TYPE_BOOKLETFRONTIMAGERELEASE\x10\b\x12\x1f\n" +
	"\x1bRELEASE_TYPE_BOOKLETRELEASE\x10\t\x12\x17\n" +
	"\x13RELEASE_TYPE_BUNDLE\x10\n" +
	"\x12\x1f\n" +
	"\x1bRELEASE_TYPE_CLASSICALALBUM\x10\v\x12)\n" +
	"%RELEASE_TYPE_CLASSICALDIGITALBOXEDSET\x10\f\x12)\n" +
	"%RELEASE_TYPE_CLASSICALMULTIMEDIAALBUM\x10\r\x12\x1d\n" +
	"\x19RELEASE_TYPE_CONCERTVIDEO\x10\x0e\x12%\n" +
	"!RELEASE_TYPE_DIGITALBOXSETRELEASE\x10\x0f\x12\x16\n" +
	"\x12RELEASE_TYPE_DJMIX\x10\x10\x12\x1c\n" +
	"\x18RELEASE_TYPE_DOCUMENTARY\x10\x11\x12\x16\n" +
	"\x12RELEASE_TYPE_DRAMA\x10\x12\x12-\n" +
	")RELEASE_TYPE_DRAMATICOMUSICALVIDEORELEASE\x10\x13\x12\x1d\n" +
	"\x19RELEASE_TYPE_EBOOKRELEASE\x10\x14\x12\x13\n" +
	"\x0fRELEASE_TYPE_EP\x10\x15\x12\x18\n" +
	"\x14RELEASE_TYPE_EPISODE\x10\x16\x12\x1c\n" +
	"\x18RELEASE_TYPE_FEATUREFILM\x10\x17\x12\x1f\n" +
	"\x1bRELEASE_TYPE_KARAOKERELEASE\x10\x18\x12\x1f\n" +
	"\x1bRELEASE_TYPE_LIVEEVENTVIDEO\x10\x19\x12\x1c\n" +
	"\x18RELEASE_TYPE_LOGORELEASE\x10\x1a\x120\n" +
	",RELEASE_TYPE_LONGFORMMUSICALWORKVIDEORELEASE\x10\x1b\x123\n" +
	"/RELEASE_TYPE_LONGFORMNONMUSICALWORKVIDEORELEASE\x10\x1c\x12\"\n" +
	"\x1eRELEASE_TYPE_LYRICSHEETRELEASE\x10\x1d\x12 \n" +
	"\x1cRELEASE_TYPE_MULTIMEDIAALBUM\x10\x1e\x12*\n" +
	"&RELEASE_TYPE_MULTIMEDIADIGITALBOXEDSET\x10\x1f\x12!\n" +
	"\x1dRELEASE_TYPE_MULTIMEDIASINGLE\x10 \x12,\n" +
	"(RELEASE_TYPE_MUSICALWORKBASEDGAMERELEASE\x10!\x12/\n" +
	"+RELEASE_TYPE_NONMUSICALWORKBASEDGAMERELEASE\x10\"\x12\x19\n" +
	"\x15RELEASE_TYPE_PLAYLIST\x10#\x12$\n" +
	" RELEASE_TYPE_RINGBACKTONERELEASE\x10$\x12 \n" +
	"\x1cRELEASE_TYPE_RINGTONERELEASE\x10%\x12\x17\n" +
	"\x13RELEASE_TYPE_SEASON\x10&\x12\x17\n" +
	"\x13RELEASE_TYPE_SERIES\x10'\x12\"\n" +
	"\x1eRELEASE_TYPE_SHEETMUSICRELEASE\x10(\x12\x1a\n" +
	"\x16RELEASE_TYPE_SHORTFILM\x10)\x12\x17\n" +
	"\x13RELEASE_TYPE_SINGLE\x10*\x12&\n" +
	"\"RELEASE_TYPE_SINGLERESOURCERELEASE\x10+\x12\x1b\n" +
	"\x17RELEASE_TYPE_STEMBUNDLE\x10,\x12\x1c\n" +
	"\x18RELEASE_TYPE_USERDEFINED\x10-\x12\x1b\n" +
	"\x17RELEASE_TYPE_VIDEOALBUM\x10.\x12'\n" +
	"#RELEASE_TYPE_VIDEOMASTERTONERELEASE\x10/\x12\x1c\n" +
	"\x18RELEASE_TYPE_VIDEOSINGLE\x100\x12!\n" +
	"\x1dRELEASE_TYPE_WALLPAPERRELEASE\x101\x12\x1d\n" +
	"\x19RELEASE_TYPE_TRACKRELEASE\x102*\xf0\x17\n" +
	"\x0eReleaseTypeDSR\x12\"\n" +
	"\x1eRELEASE_TYPE_D_S_R_UNSPECIFIED\x10\x00\x12)\n" +
	"%RELEASE_TYPE_D_S_R_ADVERTISEMENTVIDEO\x10\x01\x12\x1c\n" +
	"\x18RELEASE_TYPE_D_S_R_ALBUM\x10\x02\x12'\n" +
	"#RELEASE_TYPE_D_S_R_ALERTTONERELEASE\x10\x03\x12 \n" +
	"\x1cRELEASE_TYPE_D_S_R_ANIMATION\x10\x04\x12$\n" +
	" RELEASE_TYPE_D_S_R_ASPERCONTRACT\x10\x05\x12'\n" +
	"#RELEASE_TYPE_D_S_R_AUDIOBOOKRELEASE\x10\x06\x12'\n" +
	"#RELEASE_TYPE_D_S_R_AUDIOCLIPRELEASE\x10\a\x12,\n" +
	"(RELEASE_TYPE_D_S_R_BACKCOVERIMAGERELEASE\x10\b\x12.\n" +
	"*RELEASE_TYPE_D_S_R_BOOKLETBACKIMAGERELEASE\x10\t\x12/\n" +
	"+RELEASE_TYPE_D_S_R_BOOKLETFRONTIMAGERELEASE\x10\n" +
	"\x12%\n" +
	"!RELEASE_TYPE_D_S_R_BOOKLETRELEASE\x10\v\x12\x1d\n" +
	"\x19RELEASE_TYPE_D_S_R_BUNDLE\x10\f\x12%\n" +
	"!RELEASE_TYPE_D_S_R_CLASSICALALBUM\x10\r\x12#\n" +
	"\x1fRELEASE_TYPE_D_S_R_CONCERTVIDEO\x10\x0e\x12$\n" +
	" RELEASE_TYPE_D_S_R_CORPORATEFILM\x10\x0f\x12+\n" +
	"'RELEASE_TYPE_D_S_R_DIGITALBOXSETRELEASE\x10\x10\x12\"\n" +
	"\x1eRELEASE_TYPE_D_S_R_DOCUMENTARY\x10\x11\x12+\n" +
	"'RELEASE_TYPE_D_S_R_DOCUMENTIMAGERELEASE\x10\x12\x12#\n" +
	"\x1fRELEASE_TYPE_D_S_R_EBOOKRELEASE\x10\x13\x12\x1e\n" +
	"\x1aRELEASE_TYPE_D_S_R_EPISODE\x10\x14\x12\"\n" +
	"\x1eRELEASE_TYPE_D_S_R_FEATUREFILM\x10\x15\x12!\n" +
	"\x1dRELEASE_TYPE_D_S_R_FILMBUNDLE\x10\x16\x12-\n" +
	")RELEASE_TYPE_D_S_R_FRONTCOVERIMAGERELEASE\x10\x17\x12\"\n" +
	"\x1eRELEASE_TYPE_D_S_R_ICONRELEASE\x10\x18\x12'\n" +
	"#RELEASE_TYPE_D_S_R_INFOMERCIALVIDEO\x10\x19\x120\n" +
	",RELEASE_TYPE_D_S_R_INTERACTIVEBOOKLETRELEASE\x10\x1a\x12%\n" +
	"!RELEASE_TYPE_D_S_R_KARAOKERELEASE\x10\x1b\x12%\n" +
	"!RELEASE_TYPE_D_S_R_LIVEEVENTVIDEO\x10\x1c\x12\"\n" +
	"\x1eRELEASE_TYPE_D_S_R_LOGORELEASE\x10\x1d\x126\n" +
	"2RELEASE_TYPE_D_S_R_LONGFORMMUSICALWORKVIDEORELEASE\x10\x1e\x129\n" +
	"5RELEASE_TYPE_D_S_R_LONGFORMNONMUSICALWORKVIDEORELEASE\x10\x1f\x12(\n" +
	"$RELEASE_TYPE_D_S_R_LYRICSHEETRELEASE\x10 \x12&\n" +
	"\"RELEASE_TYPE_D_S_R_MULTIMEDIAALBUM\x10!\x12'\n" +
	"#RELEASE_TYPE_D_S_R_MULTIMEDIASINGLE\x10\"\x122\n" +
	".RELEASE_TYPE_D_S_R_MUSICALWORKBASEDGAMERELEASE\x10#\x12-\n" +
	")RELEASE_TYPE_D_S_R_MUSICALWORKCLIPRELEASE\x10$\x127\n" +
	"3RELEASE_TYPE_D_S_R_MUSICALWORKREADALONGVIDEORELEASE\x10%\x120\n" +
	",RELEASE_TYPE_D_S_R_MUSICALWORKTRAILERRELEASE\x10&\x125\n" +
	"1RELEASE_TYPE_D_S_R_MUSICALWORKVIDEOCHAPTERRELEASE\x10'\x12\x1b\n" +
	"\x17RELEASE_TYPE_D_S_R_NEWS\x10(\x125\n" +
	"1RELEASE_TYPE_D_S_R_NONMUSICALWORKBASEDGAMERELEASE\x10)\x120\n" +
	",RELEASE_TYPE_D_S_R_NONMUSICALWORKCLIPRELEASE\x10*\x12:\n" +
	"6RELEASE_TYPE_D_S_R_NONMUSICALWORKREADALONGVIDEORELEASE\x10+\x123\n" +
	"/RELEASE_TYPE_D_S_R_NONMUSICALWORKTRAILERRELEASE\x10,\x128\n" +
	"4RELEASE_TYPE_D_S_R_NONMUSICALWORKVIDEOCHAPTERRELEASE\x10-\x124\n" +
	"0RELEASE_TYPE_D_S_R_NONSERIALAUDIOVISUALRECORDING\x10.\x12(\n" +
	"$RELEASE_TYPE_D_S_R_PHOTOGRAPHRELEASE\x10/\x12*\n" +
	"&RELEASE_TYPE_D_S_R_RINGBACKTONERELEASE\x100\x12&\n" +
	"\"RELEASE_TYPE_D_S_R_RINGTONERELEASE\x101\x12)\n" +
	"%RELEASE_TYPE_D_S_R_SCREENSAVERRELEASE\x102\x12\x1d\n" +
	"\x19RELEASE_TYPE_D_S_R_SEASON\x103\x12\x1d\n" +
	"\x19RELEASE_TYPE_D_S_R_SERIES\x104\x12(\n" +
	"$RELEASE_TYPE_D_S_R_SHEETMUSICRELEASE\x105\x127\n" +
	"3RELEASE_TYPE_D_S_R_SHORTFORMMUSICALWORKVIDEORELEASE\x106\x12:\n" +
	"6RELEASE_TYPE_D_S_R_SHORTFORMNONMUSICALWORKVIDEORELEASE\x107\x12\x1d\n" +
	"\x19RELEASE_TYPE_D_S_R_SINGLE\x108\x12,\n" +
	"(RELEASE_TYPE_D_S_R_SINGLERESOURCERELEASE\x109\x128\n" +
	"4RELEASE_TYPE_D_S_R_SINGLERESOURCERELEASEWITHCOVERART\x10:\x12#\n" +
	"\x1fRELEASE_TYPE_D_S_R_TRACKRELEASE\x10;\x12#\n" +
	"\x1fRELEASE_TYPE_D_S_R_TRAILERVIDEO\x10<\x12'\n" +
	"#RELEASE_TYPE_D_S_R_TRAYIMAGERELEASE\x10=\x12\x1e\n" +
	"\x1aRELEASE_TYPE_D_S_R_UNKNOWN\x10>\x12\"\n" +
	"\x1eRELEASE_TYPE_D_S_R_USERDEFINED\x10?\x12!\n" +
	"\x1dRELEASE_TYPE_D_S_R_VIDEOALBUM\x10@\x12*\n" +
	"&RELEASE_TYPE_D_S_R_VIDEOCHAPTERRELEASE\x10A\x12'\n" +
	"#RELEASE_TYPE_D_S_R_VIDEOCLIPRELEASE\x10B\x120\n" +
	",RELEASE_TYPE_D_S_R_VIDEOSCREENCAPTURERELEASE\x10C\x12\"\n" +
	"\x1eRELEASE_TYPE_D_S_R_VIDEOSINGLE\x10D\x12(\n" +
	"$RELEASE_TYPE_D_S_R_VIDEOTRACKRELEASE\x10E\x12'\n" +
	"#RELEASE_TYPE_D_S_R_WALLPAPERRELEASE\x10F*\x9f\x10\n" +
	"\x0fReleaseTypeERN4\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19RELEASE_TYPE_E_R_N4_ALBUM\x10\x01\x12(\n" +
	"$RELEASE_TYPE_E_R_N4_ALERTTONERELEASE\x10\x02\x12%\n" +
	"!RELEASE_TYPE_E_R_N4_ASPERCONTRACT\x10\x03\x12(\n" +
	"$RELEASE_TYPE_E_R_N4_AUDIOBOOKRELEASE\x10\x04\x12)\n" +
	"%RELEASE_TYPE_E_R_N4_AUDIODRAMARELEASE\x10\x05\x12-\n" +
	")RELEASE_TYPE_E_R_N4_BACKCOVERIMAGERELEASE\x10\x06\x12/\n" +
	"+RELEASE_TYPE_E_R_N4_BOOKLETBACKIMAGERELEASE\x10\a\x120\n" +
	",RELEASE_TYPE_E_R_N4_BOOKLETFRONTIMAGERELEASE\x10\b\x12&\n" +
	"\"RELEASE_TYPE_E_R_N4_BOOKLETRELEASE\x10\t\x12\x1e\n" +
	"\x1aRELEASE_TYPE_E_R_N4_BUNDLE\x10\n" +
	"\x12&\n" +
	"\"RELEASE_TYPE_E_R_N4_CLASSICALALBUM\x10\v\x120\n" +
	",RELEASE_TYPE_E_R_N4_CLASSICALDIGITALBOXEDSET\x10\f\x120\n" +
	",RELEASE_TYPE_E_R_N4_CLASSICALMULTIMEDIAALBUM\x10\r\x12$\n" +
	" RELEASE_TYPE_E_R_N4_CONCERTVIDEO\x10\x0e\x12,\n" +
	"(RELEASE_TYPE_E_R_N4_DIGITALBOXSETRELEASE\x10\x0f\x12\x1d\n" +
	"\x19RELEASE_TYPE_E_R_N4_DJMIX\x10\x10\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_DOCUMENTARY\x10\x11\x12\x1d\n" +
	"\x19RELEASE_TYPE_E_R_N4_DRAMA\x10\x12\x124\n" +
	"0RELEASE_TYPE_E_R_N4_DRAMATICOMUSICALVIDEORELEASE\x10\x13\x12$\n" +
	" RELEASE_TYPE_E_R_N4_EBOOKRELEASE\x10\x14\x12\x1a\n" +
	"\x16RELEASE_TYPE_E_R_N4_EP\x10\x15\x12\x1f\n" +
	"\x1bRELEASE_TYPE_E_R_N4_EPISODE\x10\x16\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_FEATUREFILM\x10\x17\x12&\n" +
	"\"RELEASE_TYPE_E_R_N4_KARAOKERELEASE\x10\x18\x12&\n" +
	"\"RELEASE_TYPE_E_R_N4_LIVEEVENTVIDEO\x10\x19\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_LOGORELEASE\x10\x1a\x127\n" +
	"3RELEASE_TYPE_E_R_N4_LONGFORMMUSICALWORKVIDEORELEASE\x10\x1b\x12:\n" +
	"6RELEASE_TYPE_E_R_N4_LONGFORMNONMUSICALWORKVIDEORELEASE\x10\x1c\x12)\n" +
	"%RELEASE_TYPE_E_R_N4_LYRICSHEETRELEASE\x10\x1d\x12'\n" +
	"#RELEASE_TYPE_E_R_N4_MULTIMEDIAALBUM\x10\x1e\x121\n" +
	"-RELEASE_TYPE_E_R_N4_MULTIMEDIADIGITALBOXEDSET\x10\x1f\x12(\n" +
	"$RELEASE_TYPE_E_R_N4_MULTIMEDIASINGLE\x10 \x123\n" +
	"/RELEASE_TYPE_E_R_N4_MUSICALWORKBASEDGAMERELEASE\x10!\x126\n" +
	"2RELEASE_TYPE_E_R_N4_NONMUSICALWORKBASEDGAMERELEASE\x10\"\x12 \n" +
	"\x1cRELEASE_TYPE_E_R_N4_PLAYLIST\x10#\x12+\n" +
	"'RELEASE_TYPE_E_R_N4_RINGBACKTONERELEASE\x10$\x12'\n" +
	"#RELEASE_TYPE_E_R_N4_RINGTONERELEASE\x10%\x12\x1e\n" +
	"\x1aRELEASE_TYPE_E_R_N4_SEASON\x10&\x12\x1e\n" +
	"\x1aRELEASE_TYPE_E_R_N4_SERIES\x10'\x12)\n" +
	"%RELEASE_TYPE_E_R_N4_SHEETMUSICRELEASE\x10(\x12!\n" +
	"\x1dRELEASE_TYPE_E_R_N4_SHORTFILM\x10)\x12\x1e\n" +
	"\x1aRELEASE_TYPE_E_R_N4_SINGLE\x10*\x12-\n" +
	")RELEASE_TYPE_E_R_N4_SINGLERESOURCERELEASE\x10+\x12\"\n" +
	"\x1eRELEASE_TYPE_E_R_N4_STEMBUNDLE\x10,\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_USERDEFINED\x10-\x12\"\n" +
	"\x1eRELEASE_TYPE_E_R_N4_VIDEOALBUM\x10.\x12.\n" +
	"*RELEASE_TYPE_E_R_N4_VIDEOMASTERTONERELEASE\x10/\x12#\n" +
	"\x1fRELEASE_TYPE_E_R_N4_VIDEOSINGLE\x100\x12(\n" +
	"$RELEASE_TYPE_E_R_N4_WALLPAPERRELEASE\x101*\xeb\x02\n" +
	"\x12ReleaseTypeMCNOTIF\x12*\n" +
	"&RELEASE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED\x10\x00\x12$\n" +
	" RELEASE_TYPE_M_C_N_O_T_I_F_ALBUM\x10\x01\x12!\n" +
	"\x1dRELEASE_TYPE_M_C_N_O_T_I_F_EP\x10\x02\x122\n" +
	".RELEASE_TYPE_M_C_N_O_T_I_F_RINGBACKTONERELEASE\x10\x03\x12.\n" +
	"*RELEASE_TYPE_M_C_N_O_T_I_F_RINGTONERELEASE\x10\x04\x12%\n" +
	"!RELEASE_TYPE_M_C_N_O_T_I_F_SINGLE\x10\x05\x12)\n" +
	"%RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOALBUM\x10\x06\x12*\n" +
	"&RELEASE_TYPE_M_C_N_O_T_I_F_VIDEOSINGLE\x10\a*\xef\x01\n" +
	"\x11ReportMessageType\x12#\n" +
	"\x1fREPORT_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12-\n" +
	")REPORT_MESSAGE_TYPE_DSRSALESREPORTMESSAGE\x10\x01\x12.\n" +
	"*REPORT_MESSAGE_TYPE_RDRNSALESREPORTMESSAGE\x10\x02\x121\n" +
	"-REPORT_MESSAGE_TYPE_REVENUEDECLARATIONMESSAGE\x10\x03\x12#\n" +
	"\x1fREPORT_MESSAGE_TYPE_USERDEFINED\x10\x04*\xc6\x01\n" +
	"\x15RequestMessagePurpose\x12'\n" +
	"#REQUEST_MESSAGE_PURPOSE_UNSPECIFIED\x10\x00\x12*\n" +
	"&REQUEST_MESSAGE_PURPOSE_LICENSEREQUEST\x10\x01\x12.\n" +
	"*REQUEST_MESSAGE_PURPOSE_NDMALICENSEREQUEST\x10\x02\x12(\n" +
	"$REQUEST_MESSAGE_PURPOSE_NOTIFICATION\x10\x03*\xd9\x03\n" +
	"\rRequestReason\x12\x1e\n" +
	"\x1aREQUEST_REASON_UNSPECIFIED\x10\x00\x12+\n" +
	"'REQUEST_REASON_DISPUTERESOLUTIONREQUEST\x10\x01\x12!\n" +
	"\x1dREQUEST_REASON_GENERALREQUEST\x10\x02\x12$\n" +
	" REQUEST_REASON_PUBLISHERADDITION\x10\x03\x12\"\n" +
	"\x1eREQUEST_REASON_PUBLISHERCHANGE\x10\x04\x12#\n" +
	"\x1fREQUEST_REASON_PUBLISHERREMOVAL\x10\x05\x12\x19\n" +
	"\x15REQUEST_REASON_RECALL\x10\x06\x12$\n" +
	" REQUEST_REASON_RELEASELISTUPDATE\x10\a\x12\"\n" +
	"\x1eREQUEST_REASON_SPECIFICREQUEST\x10\b\x12\x1e\n" +
	"\x1aREQUEST_REASON_USERDEFINED\x10\t\x12!\n" +
	"\x1dREQUEST_REASON_WRITERADDITION\x10\n" +
	"\x12\x1f\n" +
	"\x1bREQUEST_REASON_WRITERCHANGE\x10\v\x12 \n" +
	"\x1cREQUEST_REASON_WRITERREMOVAL\x10\f*\xf4\x01\n" +
	"\x11ResourceGroupType\x12#\n" +
	"\x1fRESOURCE_GROUP_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dRESOURCE_GROUP_TYPE_COMPONENT\x10\x01\x12(\n" +
	"$RESOURCE_GROUP_TYPE_COMPONENTRELEASE\x10\x02\x12%\n" +
	"!RESOURCE_GROUP_TYPE_MULTIWORKPART\x10\x03\x12(\n" +
	"$RESOURCE_GROUP_TYPE_RELEASECOMPONENT\x10\x04\x12\x1c\n" +
	"\x18RESOURCE_GROUP_TYPE_SIDE\x10\x05*\x92\x02\n" +
	"\fResourceType\x12\x1d\n" +
	"\x19RESOURCE_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13RESOURCE_TYPE_IMAGE\x10\x01\x12\x16\n" +
	"\x12RESOURCE_TYPE_MIDI\x10\x02\x12\x1c\n" +
	"\x18RESOURCE_TYPE_SHEETMUSIC\x10\x03\x12\x1a\n" +
	"\x16RESOURCE_TYPE_SOFTWARE\x10\x04\x12 \n" +
	"\x1cRESOURCE_TYPE_SOUNDRECORDING\x10\x05\x12\x16\n" +
	"\x12RESOURCE_TYPE_TEXT\x10\x06\x12%\n" +
	"!RESOURCE_TYPE_USERDEFINEDRESOURCE\x10\a\x12\x17\n" +
	"\x13RESOURCE_TYPE_VIDEO\x10\b*\x97\x01\n" +
	"\x15ResourceTypeCustomSet\x12(\n" +
	"$RESOURCE_TYPE_CUSTOM_SET_UNSPECIFIED\x10\x00\x12'\n" +
	"#RESOURCE_TYPE_CUSTOM_SET_MUSICVIDEO\x10\x01\x12+\n" +
	"'RESOURCE_TYPE_CUSTOM_SET_SOUNDRECORDING\x10\x02*\xc5\x01\n" +
	"\x13ResourceTypeMCNOTIF\x12+\n" +
	"'RESOURCE_TYPE_M_C_N_O_T_I_F_UNSPECIFIED\x10\x00\x12*\n" +
	"&RESOURCE_TYPE_M_C_N_O_T_I_F_SHEETMUSIC\x10\x01\x12.\n" +
	"*RESOURCE_TYPE_M_C_N_O_T_I_F_SOUNDRECORDING\x10\x02\x12%\n" +
	"!RESOURCE_TYPE_M_C_N_O_T_I_F_VIDEO\x10\x03*\xbf\x01\n" +
	"\x0fResourceTypeRDR\x12#\n" +
	"\x1fRESOURCE_TYPE_R_D_R_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eRESOURCE_TYPE_R_D_R_MUSICVIDEO\x10\x01\x12\x1c\n" +
	"\x18RESOURCE_TYPE_R_D_R_NONE\x10\x02\x12&\n" +
	"\"RESOURCE_TYPE_R_D_R_SOUNDRECORDING\x10\x03\x12\x1d\n" +
	"\x19RESOURCE_TYPE_R_D_R_VIDEO\x10\x04*\xdd\x02\n" +
	"\x1cResourceWorkRelationshipType\x12/\n" +
	"+RESOURCE_WORK_RELATIONSHIP_TYPE_UNSPECIFIED\x10\x00\x122\n" +
	".RESOURCE_WORK_RELATIONSHIP_TYPE_INTERPELLATION\x10\x01\x12*\n" +
	"&RESOURCE_WORK_RELATIONSHIP_TYPE_MEDLEY\x10\x02\x128\n" +
	"4RESOURCE_WORK_RELATIONSHIP_TYPE_MULTIPLEWORKRESOURCE\x10\x03\x12:\n" +
	"6RESOURCE_WORK_RELATIONSHIP_TYPE_MUSICALWORKWITHSAMPLES\x10\x04\x126\n" +
	"2RESOURCE_WORK_RELATIONSHIP_TYPE_SINGLEWORKRESOURCE\x10\x05*\x98\x01\n" +
	"\fResponseType\x12\x1d\n" +
	"\x19RESPONSE_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16RESPONSE_TYPE_MAINTAIN\x10\x01\x12\x19\n" +
	"\x15RESPONSE_TYPE_PENDING\x10\x02\x12\x18\n" +
	"\x14RESPONSE_TYPE_REVOKE\x10\x03\x12\x18\n" +
	"\x14RESPONSE_TYPE_UPDATE\x10\x04*\xd4\x01\n" +
	"\x15RevenueAllocationType\x12'\n" +
	"#REVENUE_ALLOCATION_TYPE_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fREVENUE_ALLOCATION_TYPE_EPISODE\x10\x01\x12%\n" +
	"!REVENUE_ALLOCATION_TYPE_NONSERIAL\x10\x02\x12\"\n" +
	"\x1eREVENUE_ALLOCATION_TYPE_SEASON\x10\x03\x12\"\n" +
	"\x1eREVENUE_ALLOCATION_TYPE_SERIES\x10\x04*\x8e\x02\n" +
	"\x11RevenueSourceType\x12#\n" +
	"\x1fREVENUE_SOURCE_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$REVENUE_SOURCE_TYPE_FINANCIALREVENUE\x10\x01\x12(\n" +
	"$REVENUE_SOURCE_TYPE_INDEMNITYREVENUE\x10\x02\x123\n" +
	"/REVENUE_SOURCE_TYPE_PAYMENTFROMUNCLAIMEDREVENUE\x10\x03\x12&\n" +
	"\"REVENUE_SOURCE_TYPE_ROYALTYREVENUE\x10\x04\x12#\n" +
	"\x1fREVENUE_SOURCE_TYPE_USERDEFINED\x10\x05*\xf7\x01\n" +
	"\x10RevocationReason\x12!\n" +
	"\x1dREVOCATION_REASON_UNSPECIFIED\x10\x00\x12%\n" +
	"!REVOCATION_REASON_AIGENERATEDWORK\x10\x01\x12\"\n" +
	"\x1eREVOCATION_REASON_EXISTINGWORK\x10\x02\x12%\n" +
	"!REVOCATION_REASON_NONEXISTINGWORK\x10\x03\x12$\n" +
	" REVOCATION_REASON_NONMUSICALWORK\x10\x04\x12(\n" +
	"$REVOCATION_REASON_WORKINPUBLICDOMAIN\x10\x05*\x92\x02\n" +
	"\x0eRightShareType\x12 \n" +
	"\x1cRIGHT_SHARE_TYPE_UNSPECIFIED\x10\x00\x12*\n" +
	"&RIGHT_SHARE_TYPE_COPYRIGHTCONTROLSHARE\x10\x01\x12#\n" +
	"\x1fRIGHT_SHARE_TYPE_LICENSINGSHARE\x10\x02\x12/\n" +
	"+RIGHT_SHARE_TYPE_MUSICALWORKCOLLECTIONSHARE\x10\x03\x12/\n" +
	"+RIGHT_SHARE_TYPE_MUSICALWORKMANUSCRIPTSHARE\x10\x04\x12+\n" +
	"'RIGHT_SHARE_TYPE_ORIGINALPUBLISHERSHARE\x10\x05*\x92\x02\n" +
	"\x12RightShareTypeMWDR\x12(\n" +
	"$RIGHT_SHARE_TYPE_M_W_D_R_UNSPECIFIED\x10\x00\x12+\n" +
	"'RIGHT_SHARE_TYPE_M_W_D_R_LICENSINGSHARE\x10\x01\x127\n" +
	"3RIGHT_SHARE_TYPE_M_W_D_R_MUSICALWORKCOLLECTIONSHARE\x10\x02\x127\n" +
	"3RIGHT_SHARE_TYPE_M_W_D_R_MUSICALWORKMANUSCRIPTSHARE\x10\x03\x123\n" +
	"/RIGHT_SHARE_TYPE_M_W_D_R_ORIGINALPUBLISHERSHARE\x10\x04*\xd2\x01\n" +
	"\x17RightsClaimPolicyReason\x12*\n" +
	"&RIGHTS_CLAIM_POLICY_REASON_UNSPECIFIED\x10\x00\x12-\n" +
	")RIGHTS_CLAIM_POLICY_REASON_PRERELEASETIME\x10\x01\x120\n" +
	",RIGHTS_CLAIM_POLICY_REASON_THIRDPARTYREQUEST\x10\x02\x12*\n" +
	"&RIGHTS_CLAIM_POLICY_REASON_USERDEFINED\x10\x03*\xbc\x01\n" +
	"\x15RightsClaimPolicyType\x12(\n" +
	"$RIGHTS_CLAIM_POLICY_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$RIGHTS_CLAIM_POLICY_TYPE_BLOCKACCESS\x10\x01\x12%\n" +
	"!RIGHTS_CLAIM_POLICY_TYPE_MONETIZE\x10\x02\x12(\n" +
	"$RIGHTS_CLAIM_POLICY_TYPE_REPORTUSAGE\x10\x03*\x92\x02\n" +
	"\x11RightsClaimStatus\x12#\n" +
	"\x1fRIGHTS_CLAIM_STATUS_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cRIGHTS_CLAIM_STATUS_CONFLICT\x10\x01\x12(\n" +
	"$RIGHTS_CLAIM_STATUS_DATAINCONSISTENT\x10\x02\x12\"\n" +
	"\x1eRIGHTS_CLAIM_STATUS_NOCONFLICT\x10\x03\x12%\n" +
	"!RIGHTS_CLAIM_STATUS_PENDINGREVIEW\x10\x04\x12 \n" +
	"\x1cRIGHTS_CLAIM_STATUS_REJECTED\x10\x05\x12\x1f\n" +
	"\x1bRIGHTS_CLAIM_STATUS_REVOKED\x10\x06*\x85\x02\n" +
	"\x11RightsControlType\x12#\n" +
	"\x1fRIGHTS_CONTROL_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%RIGHTS_CONTROL_TYPE_EXCLUSIVELICENSEE\x10\x01\x12\"\n" +
	"\x1eRIGHTS_CONTROL_TYPE_LOCALPAYEE\x10\x02\x12%\n" +
	"!RIGHTS_CONTROL_TYPE_ORIGINALOWNER\x10\x03\x12+\n" +
	"'RIGHTS_CONTROL_TYPE_RIGHTSADMINISTRATOR\x10\x04\x12(\n" +
	"$RIGHTS_CONTROL_TYPE_SUCCESSORINTITLE\x10\x05*\xf8\x02\n" +
	"\x14RightsControllerRole\x12&\n" +
	"\"RIGHTS_CONTROLLER_ROLE_UNSPECIFIED\x10\x00\x126\n" +
	"2RIGHTS_CONTROLLER_ROLE_ADMINISTRATINGRECORDCOMPANY\x10\x01\x12%\n" +
	"!RIGHTS_CONTROLLER_ROLE_LOCALPAYEE\x10\x02\x12.\n" +
	"*RIGHTS_CONTROLLER_ROLE_RIGHTSADMINISTRATOR\x10\x03\x12+\n" +
	"'RIGHTS_CONTROLLER_ROLE_RIGHTSCONTROLLER\x10\x04\x12'\n" +
	"#RIGHTS_CONTROLLER_ROLE_RIGHTSHOLDER\x10\x05\x12/\n" +
	"+RIGHTS_CONTROLLER_ROLE_ROYALTYADMINISTRATOR\x10\x06\x12\"\n" +
	"\x1eRIGHTS_CONTROLLER_ROLE_UNKNOWN\x10\a*\xc3\x01\n" +
	"\x14RightsControllerType\x12&\n" +
	"\"RIGHTS_CONTROLLER_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$RIGHTS_CONTROLLER_TYPE_ORIGINALOWNER\x10\x01\x12+\n" +
	"'RIGHTS_CONTROLLER_TYPE_SUCCESSORINTITLE\x10\x02\x12,\n" +
	"(RIGHTS_CONTROLLER_TYPE_EXCLUSIVELICENSEE\x10\x03*\xb5\x02\n" +
	"\x0eRightsCoverage\x12\x1f\n" +
	"\x1bRIGHTS_COVERAGE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"RIGHTS_COVERAGE_MAKEAVAILABLERIGHT\x10\x01\x12#\n" +
	"\x1fRIGHTS_COVERAGE_MECHANICALRIGHT\x10\x02\x12#\n" +
	"\x1fRIGHTS_COVERAGE_PERFORMINGRIGHT\x10\x03\x12\x1e\n" +
	"\x1aRIGHTS_COVERAGE_PRINTRIGHT\x10\x04\x12%\n" +
	"!RIGHTS_COVERAGE_REPRODUCTIONRIGHT\x10\x05\x12(\n" +
	"$RIGHTS_COVERAGE_SYNCHRONIZATIONRIGHT\x10\x06\x12\x1f\n" +
	"\x1bRIGHTS_COVERAGE_USERDEFINED\x10\a*\xa6\x03\n" +
	"\x12RightsCoverageMWDR\x12'\n" +
	"#RIGHTS_COVERAGE_M_W_D_R_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bRIGHTS_COVERAGE_M_W_D_R_ALL\x10\x01\x12@\n" +
	"<RIGHTS_COVERAGE_M_W_D_R_INFORMATIONNETWORKDISSEMINATIONRIGHT\x10\x02\x12'\n" +
	"#RIGHTS_COVERAGE_M_W_D_R_LYRICSRIGHT\x10\x03\x12+\n" +
	"'RIGHTS_COVERAGE_M_W_D_R_MECHANICALRIGHT\x10\x04\x12+\n" +
	"'RIGHTS_COVERAGE_M_W_D_R_PERFORMINGRIGHT\x10\x05\x12&\n" +
	"\"RIGHTS_COVERAGE_M_W_D_R_PRINTRIGHT\x10\x06\x12'\n" +
	"#RIGHTS_COVERAGE_M_W_D_R_RENTALRIGHT\x10\a\x120\n" +
	",RIGHTS_COVERAGE_M_W_D_R_SYNCHRONIZATIONRIGHT\x10\b*\xa2\x01\n" +
	"\x16RightsStatementProfile\x12(\n" +
	"$RIGHTS_STATEMENT_PROFILE_UNSPECIFIED\x10\x00\x120\n" +
	",RIGHTS_STATEMENT_PROFILE_MANDATEDUSAGERIGHTS\x10\x01\x12,\n" +
	"(RIGHTS_STATEMENT_PROFILE_RIGHTSSTATEMENT\x10\x02*m\n" +
	"\rRinFileStatus\x12\x1f\n" +
	"\x1bRIN_FILE_STATUS_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16RIN_FILE_STATUS_FILEOK\x10\x01\x12\x1f\n" +
	"\x1bRIN_FILE_STATUS_USERDEFINED\x10\x02*i\n" +
	"\x0eRinMessageType\x12 \n" +
	"\x1cRIN_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x125\n" +
	"1RIN_MESSAGE_TYPE_RECORDINGINFORMATIONNOTIFICATION\x10\x01*\x92\x01\n" +
	"\x15RinProposedActionType\x12(\n" +
	"$RIN_PROPOSED_ACTION_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!RIN_PROPOSED_ACTION_TYPE_RESUBMIT\x10\x01\x12(\n" +
	"$RIN_PROPOSED_ACTION_TYPE_USERDEFINED\x10\x02*\xd4\x03\n" +
	"\x1aRoyaltyRateCalculationType\x12-\n" +
	")ROYALTY_RATE_CALCULATION_TYPE_UNSPECIFIED\x10\x00\x12B\n" +
	">ROYALTY_RATE_CALCULATION_TYPE_CONTROLLEDCOMPOSITIONROYALTYRATE\x10\x01\x12=\n" +
	"9ROYALTY_RATE_CALCULATION_TYPE_MINIMUMSTATUTORYROYALTYRATE\x10\x02\x127\n" +
	"3ROYALTY_RATE_CALCULATION_TYPE_NEGOTIATEDROYALTYRATE\x10\x03\x12=\n" +
	"9ROYALTY_RATE_CALCULATION_TYPE_REDUCEDSTATUTORYROYALTYRATE\x10\x04\x126\n" +
	"2ROYALTY_RATE_CALCULATION_TYPE_STATUTORYROYALTYRATE\x10\x05\x12%\n" +
	"!ROYALTY_RATE_CALCULATION_TYPE_PPD\x10\x06\x12-\n" +
	")ROYALTY_RATE_CALCULATION_TYPE_RETAILPRICE\x10\a*\x82\x01\n" +
	"\x0fRoyaltyRateType\x12!\n" +
	"\x1dROYALTY_RATE_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bROYALTY_RATE_TYPE_PENNYRATE\x10\x01\x12+\n" +
	"'ROYALTY_RATE_TYPE_PERCENTAGEROYALTYRATE\x10\x02*e\n" +
	"\x13SheetMusicCodecType\x12&\n" +
	"\"SHEET_MUSIC_CODEC_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"SHEET_MUSIC_CODEC_TYPE_USERDEFINED\x10\x01*T\n" +
	"\x0eSheetMusicType\x12 \n" +
	"\x1cSHEET_MUSIC_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cSHEET_MUSIC_TYPE_USERDEFINED\x10\x01*\xff\x01\n" +
	"\fSoftwareType\x12\x1d\n" +
	"\x19SOFTWARE_TYPE_UNSPECIFIED\x10\x00\x12$\n" +
	" SOFTWARE_TYPE_INTERACTIVEBOOKLET\x10\x01\x12&\n" +
	"\"SOFTWARE_TYPE_MUSICALWORKBASEDGAME\x10\x02\x12)\n" +
	"%SOFTWARE_TYPE_NONMUSICALWORKBASEDGAME\x10\x03\x12\x1d\n" +
	"\x19SOFTWARE_TYPE_SCREENSAVER\x10\x04\x12\x19\n" +
	"\x15SOFTWARE_TYPE_UNKNOWN\x10\x05\x12\x1d\n" +
	"\x19SOFTWARE_TYPE_USERDEFINED\x10\x06*\xe0\x03\n" +
	"\x12SoundRecordingType\x12$\n" +
	" SOUND_RECORDING_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eSOUND_RECORDING_TYPE_AUDIOSTEM\x10\x01\x12\x1d\n" +
	"\x19SOUND_RECORDING_TYPE_CLIP\x10\x02\x12;\n" +
	"7SOUND_RECORDING_TYPE_MUSICALWORKREADALONGSOUNDRECORDING\x10\x03\x122\n" +
	".SOUND_RECORDING_TYPE_MUSICALWORKSOUNDRECORDING\x10\x04\x12>\n" +
	":SOUND_RECORDING_TYPE_NONMUSICALWORKREADALONGSOUNDRECORDING\x10\x05\x125\n" +
	"1SOUND_RECORDING_TYPE_NONMUSICALWORKSOUNDRECORDING\x10\x06\x121\n" +
	"-SOUND_RECORDING_TYPE_SPOKENWORDSOUNDRECORDING\x10\a\x12 \n" +
	"\x1cSOUND_RECORDING_TYPE_UNKNOWN\x10\b\x12$\n" +
	" SOUND_RECORDING_TYPE_USERDEFINED\x10\t*\xee\x01\n" +
	"\x16SpecialContributorType\x12(\n" +
	"$SPECIAL_CONTRIBUTOR_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%SPECIAL_CONTRIBUTOR_TYPE_GENERATIVEAI\x10\x01\x12(\n" +
	"$SPECIAL_CONTRIBUTOR_TYPE_TRADITIONAL\x10\x02\x12(\n" +
	"$SPECIAL_CONTRIBUTOR_TYPE_USERDEFINED\x10\x03\x12+\n" +
	"'SPECIAL_CONTRIBUTOR_TYPE_VARIOUSARTISTS\x10\x04*\x81\x02\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13STATUS_ASSETSNEEDED\x10\x01\x12\x1c\n" +
	"\x18STATUS_AWAITINGMATERIALS\x10\x02\x12\x13\n" +
	"\x0fSTATUS_BACKEDUP\x10\x03\x12\x13\n" +
	"\x0fSTATUS_CANCELED\x10\x04\x12\x11\n" +
	"\rSTATUS_CLOSED\x10\x05\x12\x14\n" +
	"\x10STATUS_COMPLETED\x10\x06\x12\x11\n" +
	"\rSTATUS_INWORK\x10\a\x12\x15\n" +
	"\x11STATUS_NOTSTARTED\x10\b\x12\x16\n" +
	"\x12STATUS_USERDEFINED\x10\t\x12\x13\n" +
	"\x0fSTATUS_VERIFIED\x10\n" +
	"*\xc6f\n" +
	"\bSubGenre\x12\x19\n" +
	"\x15SUB_GENRE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eSUB_GENRE_ACOUSTICCHICAGOBLUES\x10\x01\x12\x1a\n" +
	"\x16SUB_GENRE_BOOGIEWOOGIE\x10\x02\x12\x1a\n" +
	"\x16SUB_GENRE_BRITISHBLUES\x10\x03\x12\x1a\n" +
	"\x16SUB_GENRE_CHICAGOBLUES\x10\x04\x12 \n" +
	"\x1cSUB_GENRE_CLASSICFEMALEBLUES\x10\x05\x12\x1a\n" +
	"\x16SUB_GENRE_COUNTRYBLUES\x10\x06\x12\x18\n" +
	"\x14SUB_GENRE_DELTABLUES\x10\a\x12 \n" +
	"\x1cSUB_GENRE_ELECTRICTEXASBLUES\x10\b\x12\x1e\n" +
	"\x1aSUB_GENRE_HILLCOUNTRYBLUES\x10\t\x12\x17\n" +
	"\x13SUB_GENRE_JUMPBLUES\x10\n" +
	"\x12\x19\n" +
	"\x15SUB_GENRE_MODERNBLUES\x10\v\x12\x1d\n" +
	"\x19SUB_GENRE_NEWORLEANSBLUES\x10\f\x12\x18\n" +
	"\x14SUB_GENRE_PIANOBLUES\x10\r\x12\x1b\n" +
	"\x17SUB_GENRE_PIEDMONTBLUES\x10\x0e\x12\x13\n" +
	"\x0fSUB_GENRE_ROOTS\x10\x0f\x12\x18\n" +
	"\x14SUB_GENRE_SWAMPBLUES\x10\x10\x12\x18\n" +
	"\x14SUB_GENRE_TEXASBLUES\x10\x11\x12!\n" +
	"\x1dSUB_GENRE_TRADITIONALACOUSTIC\x10\x12\x12!\n" +
	"\x1dSUB_GENRE_TRADITIONALELECTRIC\x10\x13\x12\x1c\n" +
	"\x18SUB_GENRE_WESTCOASTBLUES\x10\x14\x12\x1b\n" +
	"\x17SUB_GENRE_E_20THCENTURY\x10\x15\x12\x1b\n" +
	"\x17SUB_GENRE_E_21STCENTURY\x10\x16\x12\x18\n" +
	"\x14SUB_GENRE_ACOUSMATIC\x10\x17\x12\x1c\n" +
	"\x18SUB_GENRE_AMBROSIANCHANT\x10\x18\x12\x18\n" +
	"\x14SUB_GENRE_ARSANTIQUA\x10\x19\x12\x15\n" +
	"\x11SUB_GENRE_ARSNOVA\x10\x1a\x12\x15\n" +
	"\x11SUB_GENRE_BAROQUE\x10\x1b\x12\x1c\n" +
	"\x18SUB_GENRE_BYZANTINECHANT\x10\x1c\x12\x17\n" +
	"\x13SUB_GENRE_CLASSICAL\x10\x1d\x12 \n" +
	"\x1cSUB_GENRE_CLASSICALCROSSOVER\x10\x1e\x12\x1a\n" +
	"\x16SUB_GENRE_CONTEMPORARY\x10\x1f\x12\x1e\n" +
	"\x1aSUB_GENRE_EARLY20THCENTURY\x10 \x12\x1a\n" +
	"\x16SUB_GENRE_EARLYBAROQUE\x10!\x12\x1d\n" +
	"\x19SUB_GENRE_EARLYELECTRONIC\x10\"\x12\x1e\n" +
	"\x1aSUB_GENRE_EARLYRENAISSANCE\x10#\x12\x1b\n" +
	"\x17SUB_GENRE_EARLYROMANTIC\x10$\x12#\n" +
	"\x1fSUB_GENRE_EXPERIMENTALCLASSICAL\x10%\x12\x1b\n" +
	"\x17SUB_GENRE_EXPRESSIONISM\x10&\x12!\n" +
	"\x1dSUB_GENRE_FIRSTVIENNESESCHOOL\x10'\x12\x16\n" +
	"\x12SUB_GENRE_FUTURISM\x10(\x12\x1c\n" +
	"\x18SUB_GENRE_GREGORIANCHANT\x10)\x12\x1b\n" +
	"\x17SUB_GENRE_IMPRESSIONISM\x10*\x12\x1d\n" +
	"\x19SUB_GENRE_LATE20THCENTURY\x10+\x12\x19\n" +
	"\x15SUB_GENRE_LATEBAROQUE\x10,\x12\x1d\n" +
	"\x19SUB_GENRE_LATERENAISSANCE\x10-\x12\x1a\n" +
	"\x16SUB_GENRE_LATEROMANTIC\x10.\x12\x18\n" +
	"\x14SUB_GENRE_LIGHTMUSIC\x10/\x12\x16\n" +
	"\x12SUB_GENRE_MEDIEVAL\x100\x12\x1f\n" +
	"\x1bSUB_GENRE_MIDDLE20THCENTURY\x101\x12\x1b\n" +
	"\x17SUB_GENRE_MIDDLEBAROQUE\x102\x12\x1f\n" +
	"\x1bSUB_GENRE_MIDDLERENAISSANCE\x103\x12\x1c\n" +
	"\x18SUB_GENRE_MIDDLEROMANTIC\x104\x12\x18\n" +
	"\x14SUB_GENRE_MINIMALISM\x105\x12\x17\n" +
	"\x13SUB_GENRE_MODERNISM\x106\x12\x1d\n" +
	"\x19SUB_GENRE_MUSIQUECONCRETE\x107\x12\x19\n" +
	"\x15SUB_GENRE_NATIONALIST\x108\x12\x1a\n" +
	"\x16SUB_GENRE_NEOCLASSICAL\x109\x12\x19\n" +
	"\x15SUB_GENRE_NEOROMANTIC\x10:\x12\x1e\n" +
	"\x1aSUB_GENRE_ORCHESTRALFUSION\x10;\x12\x15\n" +
	"\x11SUB_GENRE_ORGANUM\x10<\x12\x17\n" +
	"\x13SUB_GENRE_PLAINSONG\x10=\x12\x1b\n" +
	"\x17SUB_GENRE_POSTCLASSICAL\x10>\x12\x1c\n" +
	"\x18SUB_GENRE_POSTMINIMALISM\x10?\x12\x1a\n" +
	"\x16SUB_GENRE_PRECLASSICAL\x10@\x12\x19\n" +
	"\x15SUB_GENRE_RENAISSANCE\x10A\x12\x16\n" +
	"\x12SUB_GENRE_ROMANTIC\x10B\x12\x17\n" +
	"\x13SUB_GENRE_SERIALISM\x10C\x12\x19\n" +
	"\x15SUB_GENRE_SPECTRALISM\x10D\x12 \n" +
	"\x1cSUB_GENRE_ALTERNATIVECOUNTRY\x10E\x12\x17\n" +
	"\x13SUB_GENRE_AMERICANA\x10F\x12\x1e\n" +
	"\x1aSUB_GENRE_BAKERSFIELDSOUND\x10G\x12\x17\n" +
	"\x13SUB_GENRE_BLUEGRASS\x10H\x12\x18\n" +
	"\x14SUB_GENRE_COUNTRYPOP\x10I\x12\x18\n" +
	"\x14SUB_GENRE_COUNTRYRAP\x10J\x12\x19\n" +
	"\x15SUB_GENRE_COUNTRYROCK\x10K\x12\x17\n" +
	"\x13SUB_GENRE_HONKYTONK\x10L\x12\x1b\n" +
	"\x17SUB_GENRE_MODERNCOUNTRY\x10M\x12\x1c\n" +
	"\x18SUB_GENRE_NASHVILLESOUND\x10N\x12#\n" +
	"\x1fSUB_GENRE_NEOTRADITIONALCOUNTRY\x10O\x12\x1b\n" +
	"\x17SUB_GENRE_OUTLAWCOUNTRY\x10P\x12\x1a\n" +
	"\x16SUB_GENRE_TEXASCOUNTRY\x10Q\x12 \n" +
	"\x1cSUB_GENRE_TRADITIONALCOUNTRY\x10R\x12\x1a\n" +
	"\x16SUB_GENRE_WESTERNSWING\x10S\x12\x1b\n" +
	"\x17SUB_GENRE_E_2STEPGARAGE\x10T\x12\x17\n" +
	"\x13SUB_GENRE_ACIDHOUSE\x10U\x12\x18\n" +
	"\x14SUB_GENRE_ACIDTECHNO\x10V\x12\x15\n" +
	"\x11SUB_GENRE_AMBIENT\x10W\x12\x1a\n" +
	"\x16SUB_GENRE_AMBIENTHOUSE\x10X\x12\x16\n" +
	"\x12SUB_GENRE_BASSLINE\x10Y\x12\x15\n" +
	"\x11SUB_GENRE_BIGBEAT\x10Z\x12\x17\n" +
	"\x13SUB_GENRE_BREAKBEAT\x10[\x12\x18\n" +
	"\x14SUB_GENRE_BROKENBEAT\x10\\\x12\x1a\n" +
	"\x16SUB_GENRE_CHICAGOHOUSE\x10]\x12\x17\n" +
	"\x13SUB_GENRE_DEEPHOUSE\x10^\x12\x1a\n" +
	"\x16SUB_GENRE_DETROITHOUSE\x10_\x12\x1b\n" +
	"\x17SUB_GENRE_DETROITTECHNO\x10`\x12\x1d\n" +
	"\x19SUB_GENRE_DIGITALHARDCORE\x10a\x12\x17\n" +
	"\x13SUB_GENRE_DOWNTEMPO\x10b\x12\x18\n" +
	"\x14SUB_GENRE_DRILLNBASS\x10c\x12\x17\n" +
	"\x13SUB_GENRE_DRUMNBASS\x10d\x12\x16\n" +
	"\x12SUB_GENRE_DRUMSTEP\x10e\x12\x17\n" +
	"\x13SUB_GENRE_DUBSTEPUK\x10f\x12\x17\n" +
	"\x13SUB_GENRE_DUBSTEPUS\x10g\x12\x18\n" +
	"\x14SUB_GENRE_DUBTRONICA\x10h\x12\x18\n" +
	"\x14SUB_GENRE_DUTCHHOUSE\x10i\x12\x11\n" +
	"\rSUB_GENRE_EBM\x10j\x12\x15\n" +
	"\x11SUB_GENRE_ELECTRO\x10k\x12\x1a\n" +
	"\x16SUB_GENRE_ELECTROHOUSE\x10l\x12\"\n" +
	"\x1eSUB_GENRE_ELECTRONICA_ECLECTIC\x10m\x12\x17\n" +
	"\x13SUB_GENRE_EURODANCE\x10n\x12$\n" +
	" SUB_GENRE_EXPERIMENTALELECTRONIC\x10o\x12\x19\n" +
	"\x15SUB_GENRE_FRENCHHOUSE\x10p\x12\x1a\n" +
	"\x16SUB_GENRE_FUTUREGARAGE\x10q\x12\x13\n" +
	"\x0fSUB_GENRE_GABBA\x10r\x12\x19\n" +
	"\x15SUB_GENRE_GARAGEHOUSE\x10s\x12\x14\n" +
	"\x10SUB_GENRE_GLITCH\x10t\x12\x1b\n" +
	"\x17SUB_GENRE_HAPPYHARDCORE\x10u\x12\x18\n" +
	"\x14SUB_GENRE_HARDTRANCE\x10v\x12\x16\n" +
	"\x12SUB_GENRE_HARDCORE\x10w\x12\x1f\n" +
	"\x1bSUB_GENRE_HARDCOREBREAKBEAT\x10x\x12\x17\n" +
	"\x13SUB_GENRE_HARDSTYLE\x10y\x12\x16\n" +
	"\x12SUB_GENRE_HIPHOUSE\x10z\x12\x13\n" +
	"\x0fSUB_GENRE_HOUSE\x10{\x12\x11\n" +
	"\rSUB_GENRE_IDM\x10|\x12\x17\n" +
	"\x13SUB_GENRE_JAZZHOUSE\x10}\x12\x14\n" +
	"\x10SUB_GENRE_JUNGLE\x10~\x12\x14\n" +
	"\x10SUB_GENRE_KWAITO\x10\x7f\x12\x19\n" +
	"\x14SUB_GENRE_LATINHOUSE\x10\x80\x01\x12\x1b\n" +
	"\x16SUB_GENRE_MINIMALHOUSE\x10\x81\x01\x12\x1c\n" +
	"\x17SUB_GENRE_MINIMALTECHNO\x10\x82\x01\x12\x19\n" +
	"\x14SUB_GENRE_NOISEMUSIC\x10\x83\x01\x12\x16\n" +
	"\x11SUB_GENRE_NUDISCO\x10\x84\x01\x12\x1f\n" +
	"\x1aSUB_GENRE_PROGRESSIVEHOUSE\x10\x85\x01\x12 \n" +
	"\x1bSUB_GENRE_PROGRESSIVETRANCE\x10\x86\x01\x12 \n" +
	"\x1bSUB_GENRE_PSYCHEDELICTRANCE\x10\x87\x01\x12\x16\n" +
	"\x11SUB_GENRE_SCHRANZ\x10\x88\x01\x12\x1a\n" +
	"\x15SUB_GENRE_SPEEDGARAGE\x10\x89\x01\x12\x18\n" +
	"\x13SUB_GENRE_SYNTHWAVE\x10\x8a\x01\x12\x18\n" +
	"\x13SUB_GENRE_TECHHOUSE\x10\x8b\x01\x12\x15\n" +
	"\x10SUB_GENRE_TECHNO\x10\x8c\x01\x12\x15\n" +
	"\x10SUB_GENRE_TRANCE\x10\x8d\x01\x12\x1a\n" +
	"\x15SUB_GENRE_TRIBALHOUSE\x10\x8e\x01\x12\x16\n" +
	"\x11SUB_GENRE_TRIPHOP\x10\x8f\x01\x12\x16\n" +
	"\x11SUB_GENRE_UKFUNKY\x10\x90\x01\x12\x17\n" +
	"\x12SUB_GENRE_UKGARAGE\x10\x91\x01\x12\x19\n" +
	"\x14SUB_GENRE_VOCALHOUSE\x10\x92\x01\x12\x1b\n" +
	"\x16SUB_GENRE_AMERICANFOLK\x10\x93\x01\x12&\n" +
	"!SUB_GENRE_AMERICANPRIMITIVEGUITAR\x10\x94\x01\x12\x1e\n" +
	"\x19SUB_GENRE_BARBERSHOPMUSIC\x10\x95\x01\x12\x1a\n" +
	"\x15SUB_GENRE_BRITISHFOLK\x10\x96\x01\x12\x1f\n" +
	"\x1aSUB_GENRE_CANADIANFIDDLING\x10\x97\x01\x12\x1b\n" +
	"\x16SUB_GENRE_CANADIANFOLK\x10\x98\x01\x12\x15\n" +
	"\x10SUB_GENRE_CELTIC\x10\x99\x01\x12\x1b\n" +
	"\x16SUB_GENRE_ELECTRICFOLK\x10\x9a\x01\x12\x1a\n" +
	"\x15SUB_GENRE_ENGLISHFOLK\x10\x9b\x01\x12\x1a\n" +
	"\x15SUB_GENRE_FOLKBAROQUE\x10\x9c\x01\x12\x1a\n" +
	"\x15SUB_GENRE_FOLKREVIVAL\x10\x9d\x01\x12\x18\n" +
	"\x13SUB_GENRE_INDIEFOLK\x10\x9e\x01\x12\x18\n" +
	"\x13SUB_GENRE_IRISHFOLK\x10\x9f\x01\x12 \n" +
	"\x1bSUB_GENRE_NORTHAMERICANFOLK\x10\xa0\x01\x12\x16\n" +
	"\x11SUB_GENRE_OLDTIME\x10\xa1\x01\x12\x1b\n" +
	"\x16SUB_GENRE_SCOTTISHFOLK\x10\xa2\x01\x12\x1a\n" +
	"\x15SUB_GENRE_SEASHANTIES\x10\xa3\x01\x12\x18\n" +
	"\x13SUB_GENRE_WELSHFOLK\x10\xa4\x01\x12\x15\n" +
	"\x10SUB_GENRE_ZYDECO\x10\xa5\x01\x12\x1c\n" +
	"\x17SUB_GENRE_CLASSICGOSPEL\x10\xa6\x01\x12\x1d\n" +
	"\x18SUB_GENRE_SOUTHERNGOSPEL\x10\xa7\x01\x12\x1d\n" +
	"\x18SUB_GENRE_ALTERNATIVERAP\x10\xa8\x01\x12\x1b\n" +
	"\x16SUB_GENRE_CHRISTIANRAP\x10\xa9\x01\x12\x1c\n" +
	"\x17SUB_GENRE_CLASSICHIPHOP\x10\xaa\x01\x12\x1b\n" +
	"\x16SUB_GENRE_CONSCIOUSRAP\x10\xab\x01\x12\x14\n" +
	"\x0fSUB_GENRE_CRUNK\x10\xac\x01\x12\x17\n" +
	"\x12SUB_GENRE_DIRTYRAP\x10\xad\x01\x12\x1e\n" +
	"\x19SUB_GENRE_EASTCOASTHIPHOP\x10\xae\x01\x12!\n" +
	"\x1cSUB_GENRE_EXPERIMENTALHIPHOP\x10\xaf\x01\x12\x1a\n" +
	"\x15SUB_GENRE_FUNKCARIOCA\x10\xb0\x01\x12\x14\n" +
	"\x0fSUB_GENRE_GFUNK\x10\xb1\x01\x12\x19\n" +
	"\x14SUB_GENRE_GANGSTARAP\x10\xb2\x01\x12\x18\n" +
	"\x13SUB_GENRE_GOLDENAGE\x10\xb3\x01\x12\x14\n" +
	"\x0fSUB_GENRE_GRIME\x10\xb4\x01\x12\x1a\n" +
	"\x15SUB_GENRE_HARDCORERAP\x10\xb5\x01\x12!\n" +
	"\x1cSUB_GENRE_INSTRUMENTALHIPHOP\x10\xb6\x01\x12\x18\n" +
	"\x13SUB_GENRE_MIAMIBASS\x10\xb7\x01\x12\x15\n" +
	"\x10SUB_GENRE_POPRAP\x10\xb8\x01\x12\x1a\n" +
	"\x15SUB_GENRE_SOUTHERNRAP\x10\xb9\x01\x12\x13\n" +
	"\x0eSUB_GENRE_TRAP\x10\xba\x01\x12\x1e\n" +
	"\x19SUB_GENRE_WESTCOASTHIPHOP\x10\xbb\x01\x12\x17\n" +
	"\x12SUB_GENRE_ACIDJAZZ\x10\xbc\x01\x12\x1a\n" +
	"\x15SUB_GENRE_AFRICANJAZZ\x10\xbd\x01\x12\x1d\n" +
	"\x18SUB_GENRE_AVANTGARDEJAZZ\x10\xbe\x01\x12\x14\n" +
	"\x0fSUB_GENRE_BEBOP\x10\xbf\x01\x12\x18\n" +
	"\x13SUB_GENRE_BOSSANOVA\x10\xc0\x01\x12\x1f\n" +
	"\x1aSUB_GENRE_BRITISHDANCEBAND\x10\xc1\x01\x12\x17\n" +
	"\x12SUB_GENRE_CAPEJAZZ\x10\xc2\x01\x12\x17\n" +
	"\x12SUB_GENRE_COOLJAZZ\x10\xc3\x01\x12\x18\n" +
	"\x13SUB_GENRE_DIXIELAND\x10\xc4\x01\x12\x1c\n" +
	"\x17SUB_GENRE_ETHIOPIANJAZZ\x10\xc5\x01\x12\x17\n" +
	"\x12SUB_GENRE_FREEJAZZ\x10\xc6\x01\x12\x18\n" +
	"\x13SUB_GENRE_GYPSYJAZZ\x10\xc7\x01\x12\x16\n" +
	"\x11SUB_GENRE_HARDBOP\x10\xc8\x01\x12\x18\n" +
	"\x13SUB_GENRE_JAZZBLUES\x10\xc9\x01\x12\x17\n" +
	"\x12SUB_GENRE_JAZZFUNK\x10\xca\x01\x12\x19\n" +
	"\x14SUB_GENRE_JAZZFUSION\x10\xcb\x01\x12\x17\n" +
	"\x12SUB_GENRE_JAZZROCK\x10\xcc\x01\x12\x16\n" +
	"\x11SUB_GENRE_JAZZPOP\x10\xcd\x01\x12\x18\n" +
	"\x13SUB_GENRE_LATINJAZZ\x10\xce\x01\x12\x18\n" +
	"\x13SUB_GENRE_MODALJAZZ\x10\xcf\x01\x12\x1d\n" +
	"\x18SUB_GENRE_MODERNCREATIVE\x10\xd0\x01\x12\x19\n" +
	"\x14SUB_GENRE_MODERNJAZZ\x10\xd1\x01\x12\x16\n" +
	"\x11SUB_GENRE_POSTBOP\x10\xd2\x01\x12\x19\n" +
	"\x14SUB_GENRE_SMOOTHJAZZ\x10\xd3\x01\x12\x17\n" +
	"\x12SUB_GENRE_SOULJAZZ\x10\xd4\x01\x12\x14\n" +
	"\x0fSUB_GENRE_SWING\x10\xd5\x01\x12\x1b\n" +
	"\x16SUB_GENRE_SWINGREVIVAL\x10\xd6\x01\x12\x1e\n" +
	"\x19SUB_GENRE_TRADITIONALJAZZ\x10\xd7\x01\x12\x1d\n" +
	"\x18SUB_GENRE_TRADITIONALPOP\x10\xd8\x01\x12\x16\n" +
	"\x11SUB_GENRE_BACHATA\x10\xd9\x01\x12\x14\n" +
	"\x0fSUB_GENRE_BANDA\x10\xda\x01\x12\x17\n" +
	"\x12SUB_GENRE_BOOGALOO\x10\xdb\x01\x12\x18\n" +
	"\x13SUB_GENRE_BRAZILIAN\x10\xdc\x01\x12\x17\n" +
	"\x12SUB_GENRE_CONJUNTO\x10\xdd\x01\x12\x17\n" +
	"\x12SUB_GENRE_CORRIDOS\x10\xde\x01\x12\x1a\n" +
	"\x15SUB_GENRE_DURANGUENSE\x10\xdf\x01\x12\x16\n" +
	"\x11SUB_GENRE_GRUPERA\x10\xe0\x01\x12\x16\n" +
	"\x11SUB_GENRE_HUPANGO\x10\xe1\x01\x12\x17\n" +
	"\x12SUB_GENRE_MARIACHI\x10\xe2\x01\x12\x1d\n" +
	"\x18SUB_GENRE_NEWMEXICOMUSIC\x10\xe3\x01\x12\x16\n" +
	"\x11SUB_GENRE_NORTENO\x10\xe4\x01\x12\x17\n" +
	"\x12SUB_GENRE_RANCHERA\x10\xe5\x01\x12\x18\n" +
	"\x13SUB_GENRE_REGGAETON\x10\xe6\x01\x12\x1e\n" +
	"\x19SUB_GENRE_REGIONALMEXICAN\x10\xe7\x01\x12\x14\n" +
	"\x0fSUB_GENRE_SALSA\x10\xe8\x01\x12\x18\n" +
	"\x13SUB_GENRE_SERTANEJO\x10\xe9\x01\x12\x15\n" +
	"\x10SUB_GENRE_TEJANO\x10\xea\x01\x12\x19\n" +
	"\x14SUB_GENRE_AFRICANPOP\x10\xeb\x01\x12\x17\n" +
	"\x12SUB_GENRE_AFROBEAT\x10\xec\x01\x12\x1f\n" +
	"\x1aSUB_GENRE_ALTERNATIVEDANCE\x10\xed\x01\x12\x1d\n" +
	"\x18SUB_GENRE_ALTERNATIVEPOP\x10\xee\x01\x12\x12\n" +
	"\rSUB_GENRE_AXE\x10\xef\x01\x12\x16\n" +
	"\x11SUB_GENRE_BIKUTSI\x10\xf0\x01\x12\x18\n" +
	"\x13SUB_GENRE_BOLLYWOOD\x10\xf1\x01\x12\x1b\n" +
	"\x16SUB_GENRE_BRAZILIANPOP\x10\xf2\x01\x12\x14\n" +
	"\x0fSUB_GENRE_BREGA\x10\xf3\x01\x12\x17\n" +
	"\x12SUB_GENRE_CANTOPOP\x10\xf4\x01\x12\x1b\n" +
	"\x16SUB_GENRE_CARIBBEANPOP\x10\xf5\x01\x12\x19\n" +
	"\x14SUB_GENRE_CHAMBERPOP\x10\xf6\x01\x12\x19\n" +
	"\x14SUB_GENRE_CHIMURENGA\x10\xf7\x01\x12\x19\n" +
	"\x14SUB_GENRE_CHINESEPOP\x10\xf8\x01\x12\x17\n" +
	"\x12SUB_GENRE_DREAMPOP\x10\xf9\x01\x12\x1b\n" +
	"\x16SUB_GENRE_ELECTROCLASH\x10\xfa\x01\x12\x1c\n" +
	"\x17SUB_GENRE_ELECTRONICPOP\x10\xfb\x01\x12\x13\n" +
	"\x0eSUB_GENRE_ENKA\x10\xfc\x01\x12\x1a\n" +
	"\x15SUB_GENRE_FILIPINOPOP\x10\xfd\x01\x12\x1a\n" +
	"\x15SUB_GENRE_FOLKTRONICA\x10\xfe\x01\x12\x18\n" +
	"\x13SUB_GENRE_FRENCHPOP\x10\xff\x01\x12\x18\n" +
	"\x13SUB_GENRE_GERMANPOP\x10\x80\x02\x12\x17\n" +
	"\x12SUB_GENRE_GREEKPOP\x10\x81\x02\x12\x17\n" +
	"\x12SUB_GENRE_HIGHLIFE\x10\x82\x02\x12\x16\n" +
	"\x11SUB_GENRE_HIPLIFE\x10\x83\x02\x12\x19\n" +
	"\x14SUB_GENRE_HOKKIENPOP\x10\x84\x02\x12\x18\n" +
	"\x13SUB_GENRE_INDIANPOP\x10\x85\x02\x12\x17\n" +
	"\x12SUB_GENRE_INDIEPOP\x10\x86\x02\x12\x1b\n" +
	"\x16SUB_GENRE_INDIETRONICA\x10\x87\x02\x12\x1c\n" +
	"\x17SUB_GENRE_INDONESIANPOP\x10\x88\x02\x12\x1a\n" +
	"\x15SUB_GENRE_JAPANESEPOP\x10\x89\x02\x12\x18\n" +
	"\x13SUB_GENRE_KAYOKYOKU\x10\x8a\x02\x12\x16\n" +
	"\x11SUB_GENRE_KIZOMBA\x10\x8b\x02\x12\x18\n" +
	"\x13SUB_GENRE_KOREANPOP\x10\x8c\x02\x12\x15\n" +
	"\x10SUB_GENRE_KUDURO\x10\x8d\x02\x12\x1d\n" +
	"\x18SUB_GENRE_LATINFREESTYLE\x10\x8e\x02\x12\x19\n" +
	"\x14SUB_GENRE_MADCHESTER\x10\x8f\x02\x12\x16\n" +
	"\x11SUB_GENRE_MAKOSSA\x10\x90\x02\x12\x17\n" +
	"\x12SUB_GENRE_MANDOPOP\x10\x91\x02\x12\x15\n" +
	"\x10SUB_GENRE_MBALAX\x10\x92\x02\x12\x17\n" +
	"\x12SUB_GENRE_MBAQANGA\x10\x93\x02\x12\x1a\n" +
	"\x15SUB_GENRE_MODERNLAIKO\x10\x94\x02\x12\x18\n" +
	"\x13SUB_GENRE_MODERNPOP\x10\x95\x02\x12\x12\n" +
	"\rSUB_GENRE_MPB\x10\x96\x02\x12$\n" +
	"\x1fSUB_GENRE_MUSICOFTHEPHILIPPINES\x10\x97\x02\x12\x12\n" +
	"\rSUB_GENRE_NDW\x10\x98\x02\x12\x1d\n" +
	"\x18SUB_GENRE_NEOPSYCHEDELIA\x10\x99\x02\x12\x1a\n" +
	"\x15SUB_GENRE_NEWROMANTIC\x10\x9a\x02\x12\x16\n" +
	"\x11SUB_GENRE_NEWWAVE\x10\x9b\x02\x12\x17\n" +
	"\x12SUB_GENRE_NOISEPOP\x10\x9c\x02\x12\x1e\n" +
	"\x19SUB_GENRE_NOUVELLECHANSON\x10\x9d\x02\x12\x16\n" +
	"\x11SUB_GENRE_POPROCK\x10\x9e\x02\x12\x1d\n" +
	"\x18SUB_GENRE_PSYCHEDELICPOP\x10\x9f\x02\x12\x17\n" +
	"\x12SUB_GENRE_SCHLAGER\x10\xa0\x02\x12\x13\n" +
	"\x0eSUB_GENRE_SOCA\x10\xa1\x02\x12\x16\n" +
	"\x11SUB_GENRE_SOUKOUS\x10\xa2\x02\x12\x17\n" +
	"\x12SUB_GENRE_SYNTHPOP\x10\xa3\x02\x12\x15\n" +
	"\x10SUB_GENRE_TELUGU\x10\xa4\x02\x12\x16\n" +
	"\x11SUB_GENRE_TWEEPOP\x10\xa5\x02\x12\x17\n" +
	"\x12SUB_GENRE_AFROFUNK\x10\xa6\x02\x12\x1f\n" +
	"\x1aSUB_GENRE_ALTERNATIVER_N_B\x10\xa7\x02\x12\x1b\n" +
	"\x16SUB_GENRE_BLUEEYEDSOUL\x10\xa8\x02\x12\x15\n" +
	"\x10SUB_GENRE_BOOGIE\x10\xa9\x02\x12\x1a\n" +
	"\x15SUB_GENRE_CHICAGOSOUL\x10\xaa\x02\x12\x1b\n" +
	"\x16SUB_GENRE_CLASSICR_N_B\x10\xab\x02\x12 \n" +
	"\x1bSUB_GENRE_CONTEMPORARYR_N_B\x10\xac\x02\x12\x17\n" +
	"\x12SUB_GENRE_DEEPSOUL\x10\xad\x02\x12\x14\n" +
	"\x0fSUB_GENRE_DISCO\x10\xae\x02\x12\x15\n" +
	"\x10SUB_GENRE_DOOWOP\x10\xaf\x02\x12\x13\n" +
	"\x0eSUB_GENRE_FUNK\x10\xb0\x02\x12\x13\n" +
	"\x0eSUB_GENRE_GOGO\x10\xb1\x02\x12\x14\n" +
	"\x0fSUB_GENRE_HINRG\x10\xb2\x02\x12\x19\n" +
	"\x14SUB_GENRE_ITALODISCO\x10\xb3\x02\x12\x1a\n" +
	"\x15SUB_GENRE_MEMPHISSOUL\x10\xb4\x02\x12\x1e\n" +
	"\x19SUB_GENRE_MINNEAPOLISFUNK\x10\xb5\x02\x12\x1a\n" +
	"\x15SUB_GENRE_MODERNR_N_B\x10\xb6\x02\x12\x1a\n" +
	"\x15SUB_GENRE_MOTOWNSOUND\x10\xb7\x02\x12\x16\n" +
	"\x11SUB_GENRE_NEOSOUL\x10\xb8\x02\x12\x1b\n" +
	"\x16SUB_GENRE_NEWJACKSWING\x10\xb9\x02\x12\x1e\n" +
	"\x19SUB_GENRE_NEWORLEANSR_N_B\x10\xba\x02\x12\x15\n" +
	"\x10SUB_GENRE_OGFUNK\x10\xbb\x02\x12\x14\n" +
	"\x0fSUB_GENRE_PFUNK\x10\xbc\x02\x12\x1a\n" +
	"\x15SUB_GENRE_PHILLYSOUND\x10\xbd\x02\x12\x16\n" +
	"\x11SUB_GENRE_POPFUNK\x10\xbe\x02\x12\x1e\n" +
	"\x19SUB_GENRE_PSYCHEDELICSOUL\x10\xbf\x02\x12\x19\n" +
	"\x14SUB_GENRE_QUIETSTORM\x10\xc0\x02\x12\x18\n" +
	"\x13SUB_GENRE_RETROSOUL\x10\xc1\x02\x12\x13\n" +
	"\x0eSUB_GENRE_SOUL\x10\xc2\x02\x12\x1b\n" +
	"\x16SUB_GENRE_SOUTHERNSOUL\x10\xc3\x02\x12\x1f\n" +
	"\x1aSUB_GENRE_TRADITIONALR_N_B\x10\xc4\x02\x12&\n" +
	"!SUB_GENRE_URBANCONTEMPORARYGOSPEL\x10\xc5\x02\x12\x1c\n" +
	"\x17SUB_GENRE_WESTCOASTSOUL\x10\xc6\x02\x12\x18\n" +
	"\x13SUB_GENRE_DANCEHALL\x10\xc7\x02\x12\x12\n" +
	"\rSUB_GENRE_DUB\x10\xc8\x02\x12\x19\n" +
	"\x14SUB_GENRE_ROCKSTEADY\x10\xc9\x02\x12\x1a\n" +
	"\x15SUB_GENRE_ROOTSREGGAE\x10\xca\x02\x12\x12\n" +
	"\rSUB_GENRE_SKA\x10\xcb\x02\x12\x17\n" +
	"\x12SUB_GENRE_AFROROCK\x10\xcc\x02\x12\x17\n" +
	"\x12SUB_GENRE_ALTMETAL\x10\xcd\x02\x12\x1e\n" +
	"\x19SUB_GENRE_ALTERNATIVEROCK\x10\xce\x02\x12\x16\n" +
	"\x11SUB_GENRE_ARTROCK\x10\xcf\x02\x12\x19\n" +
	"\x14SUB_GENRE_BLACKMETAL\x10\xd0\x02\x12\x19\n" +
	"\x14SUB_GENRE_BOOGIEROCK\x10\xd1\x02\x12\x17\n" +
	"\x12SUB_GENRE_BRITROCK\x10\xd2\x02\x12\x1e\n" +
	"\x19SUB_GENRE_BRITISHINVASION\x10\xd3\x02\x12\x16\n" +
	"\x11SUB_GENRE_BRITPOP\x10\xd4\x02\x12\x1a\n" +
	"\x15SUB_GENRE_CLASSICROCK\x10\xd5\x02\x12\x17\n" +
	"\x12SUB_GENRE_DARKWAVE\x10\xd6\x02\x12\x19\n" +
	"\x14SUB_GENRE_DEATHMETAL\x10\xd7\x02\x12\x18\n" +
	"\x13SUB_GENRE_DOOMMETAL\x10\xd8\x02\x12\x18\n" +
	"\x13SUB_GENRE_EARLYROCK\x10\xd9\x02\x12\x1a\n" +
	"\x15SUB_GENRE_ELECTROGOTH\x10\xda\x02\x12\x16\n" +
	"\x11SUB_GENRE_EMOROCK\x10\xdb\x02\x12\x1f\n" +
	"\x1aSUB_GENRE_EXPERIMENTALROCK\x10\xdc\x02\x12\x18\n" +
	"\x13SUB_GENRE_FUNKMETAL\x10\xdd\x02\x12\x19\n" +
	"\x14SUB_GENRE_GARAGEROCK\x10\xde\x02\x12\x17\n" +
	"\x12SUB_GENRE_GLAMROCK\x10\xdf\x02\x12\x1a\n" +
	"\x15SUB_GENRE_GOTHICMETAL\x10\xe0\x02\x12\x19\n" +
	"\x14SUB_GENRE_GOTHICROCK\x10\xe1\x02\x12\x18\n" +
	"\x13SUB_GENRE_GRINDCORE\x10\xe2\x02\x12\x15\n" +
	"\x10SUB_GENRE_GRUNGE\x10\xe3\x02\x12\x18\n" +
	"\x13SUB_GENRE_HAIRMETAL\x10\xe4\x02\x12\x17\n" +
	"\x12SUB_GENRE_HARDROCK\x10\xe5\x02\x12\x1b\n" +
	"\x16SUB_GENRE_HARDCOREPUNK\x10\xe6\x02\x12\x1c\n" +
	"\x17SUB_GENRE_HEARTLANDROCK\x10\xe7\x02\x12\x18\n" +
	"\x13SUB_GENRE_INDIEROCK\x10\xe8\x02\x12\x19\n" +
	"\x14SUB_GENRE_INDUSTRIAL\x10\xe9\x02\x12\x1e\n" +
	"\x19SUB_GENRE_INDUSTRIALMETAL\x10\xea\x02\x12\x1a\n" +
	"\x15SUB_GENRE_JOVEMGUARDA\x10\xeb\x02\x12\x18\n" +
	"\x13SUB_GENRE_KRAUTROCK\x10\xec\x02\x12\x17\n" +
	"\x12SUB_GENRE_MATHROCK\x10\xed\x02\x12\x19\n" +
	"\x14SUB_GENRE_MERSEYBEAT\x10\xee\x02\x12\x14\n" +
	"\x0fSUB_GENRE_METAL\x10\xef\x02\x12\x18\n" +
	"\x13SUB_GENRE_METALCORE\x10\xf0\x02\x12\x15\n" +
	"\x10SUB_GENRE_NOWAVE\x10\xf1\x02\x12\x18\n" +
	"\x13SUB_GENRE_NOISEROCK\x10\xf2\x02\x12\x16\n" +
	"\x11SUB_GENRE_NUMETAL\x10\xf3\x02\x12\x11\n" +
	"\fSUB_GENRE_OI\x10\xf4\x02\x12\x16\n" +
	"\x11SUB_GENRE_POPPUNK\x10\xf5\x02\x12\x19\n" +
	"\x14SUB_GENRE_POSTGRUNGE\x10\xf6\x02\x12\x17\n" +
	"\x12SUB_GENRE_POSTROCK\x10\xf7\x02\x12\x1b\n" +
	"\x16SUB_GENRE_POSTHARDCORE\x10\xf8\x02\x12\x17\n" +
	"\x12SUB_GENRE_POSTPUNK\x10\xf9\x02\x12\x17\n" +
	"\x12SUB_GENRE_POWERPOP\x10\xfa\x02\x12\x1f\n" +
	"\x1aSUB_GENRE_PROGRESSIVEMETAL\x10\xfb\x02\x12\x1e\n" +
	"\x19SUB_GENRE_PROGRESSIVEROCK\x10\xfc\x02\x12\x18\n" +
	"\x13SUB_GENRE_PROTOPUNK\x10\xfd\x02\x12\x1e\n" +
	"\x19SUB_GENRE_PSYCHEDELICROCK\x10\xfe\x02\x12\x1a\n" +
	"\x15SUB_GENRE_PSYCHOBILLY\x10\xff\x02\x12\x13\n" +
	"\x0eSUB_GENRE_PUNK\x10\x80\x03\x12\x18\n" +
	"\x13SUB_GENRE_RIOTGRRRL\x10\x81\x03\x12\x18\n" +
	"\x13SUB_GENRE_ROCKNROLL\x10\x82\x03\x12\x19\n" +
	"\x14SUB_GENRE_ROCKABILLY\x10\x83\x03\x12\x18\n" +
	"\x13SUB_GENRE_SAMBAROCK\x10\x84\x03\x12\x16\n" +
	"\x11SUB_GENRE_SCREAMO\x10\x85\x03\x12\x17\n" +
	"\x12SUB_GENRE_SHOEGAZE\x10\x86\x03\x12\x17\n" +
	"\x12SUB_GENRE_SOFTROCK\x10\x87\x03\x12 \n" +
	"\x1bSUB_GENRE_SOUTHAMERICANROCK\x10\x88\x03\x12\x1b\n" +
	"\x16SUB_GENRE_SOUTHERNROCK\x10\x89\x03\x12\x18\n" +
	"\x13SUB_GENRE_SPACEROCK\x10\x8a\x03\x12\x19\n" +
	"\x14SUB_GENRE_SPEEDMETAL\x10\x8b\x03\x12\x19\n" +
	"\x14SUB_GENRE_STONERROCK\x10\x8c\x03\x12\x13\n" +
	"\x0eSUB_GENRE_SURF\x10\x8d\x03\x12\x18\n" +
	"\x13SUB_GENRE_SWAMPROCK\x10\x8e\x03\x12\x1b\n" +
	"\x16SUB_GENRE_THIRDWAVESKA\x10\x8f\x03\x12\x1a\n" +
	"\x15SUB_GENRE_THRASHMETAL\x10\x90\x03\x12\x19\n" +
	"\x14SUB_GENRE_TROPICALIA\x10\x91\x03\x12\x16\n" +
	"\x11SUB_GENRE_TWOTONE\x10\x92\x03\x12\x1a\n" +
	"\x15SUB_GENRE_UNDERGROUND\x10\x93\x03\x12\x19\n" +
	"\x14SUB_GENRE_COMMENTARY\x10\x94\x03\x12\x1b\n" +
	"\x16SUB_GENRE_CONVERSATION\x10\x95\x03\x12\x18\n" +
	"\x13SUB_GENRE_INTERVIEW\x10\x96\x03\x12\x18\n" +
	"\x13SUB_GENRE_MONOLOGUE\x10\x97\x03\x12\x15\n" +
	"\x10SUB_GENRE_POETRY\x10\x98\x03\x12\x13\n" +
	"\x0eSUB_GENRE_SKIT\x10\x99\x03\x12\x1c\n" +
	"\x17SUB_GENRE_STANDUPCOMEDY\x10\x9a\x03\x12\x14\n" +
	"\x0fSUB_GENRE_AFOXE\x10\x9b\x03\x12\x1b\n" +
	"\x16SUB_GENRE_AFRICANMUSIC\x10\x9c\x03\x12\x1f\n" +
	"\x1aSUB_GENRE_ARGENTINIANMUSIC\x10\x9d\x03\x12\x1c\n" +
	"\x17SUB_GENRE_BALINESEMUSIC\x10\x9e\x03\x12\x1d\n" +
	"\x18SUB_GENRE_BRAZILIANMUSIC\x10\x9f\x03\x12\x16\n" +
	"\x11SUB_GENRE_CALYPSO\x10\xa0\x03\x12\x1c\n" +
	"\x17SUB_GENRE_CAPOEIRAMUSIC\x10\xa1\x03\x12\x1d\n" +
	"\x18SUB_GENRE_CARIBBEANMUSIC\x10\xa2\x03\x12\x1c\n" +
	"\x17SUB_GENRE_CARNATICMUSIC\x10\xa3\x03\x12\x18\n" +
	"\x13SUB_GENRE_CHACHACHA\x10\xa4\x03\x12\x1b\n" +
	"\x16SUB_GENRE_CHILEANMUSIC\x10\xa5\x03\x12\x14\n" +
	"\x0fSUB_GENRE_CHORO\x10\xa6\x03\x12\x1d\n" +
	"\x18SUB_GENRE_COLOMBIANMUSIC\x10\xa7\x03\x12\x1a\n" +
	"\x15SUB_GENRE_CONTRADANZA\x10\xa8\x03\x12\x19\n" +
	"\x14SUB_GENRE_CUBANMUSIC\x10\xa9\x03\x12\x14\n" +
	"\x0fSUB_GENRE_CUECA\x10\xaa\x03\x12\x15\n" +
	"\x10SUB_GENRE_CUMBIA\x10\xab\x03\x12\x19\n" +
	"\x14SUB_GENRE_CZECHMUSIC\x10\xac\x03\x12\x15\n" +
	"\x10SUB_GENRE_DANZON\x10\xad\x03\x12\x17\n" +
	"\x12SUB_GENRE_DIMOTIKO\x10\xae\x03\x12\x1d\n" +
	"\x18SUB_GENRE_DOMINICANMUSIC\x10\xaf\x03\x12\x13\n" +
	"\x0eSUB_GENRE_FADO\x10\xb0\x03\x12\x17\n" +
	"\x12SUB_GENRE_FLAMENCO\x10\xb1\x03\x12\x1a\n" +
	"\x15SUB_GENRE_FRENCHMUSIC\x10\xb2\x03\x12\x1a\n" +
	"\x15SUB_GENRE_GAUCHOMUSIC\x10\xb3\x03\x12\x1a\n" +
	"\x15SUB_GENRE_GERMANMUSIC\x10\xb4\x03\x12\x19\n" +
	"\x14SUB_GENRE_GREEKMUSIC\x10\xb5\x03\x12\x17\n" +
	"\x12SUB_GENRE_GUARACHA\x10\xb6\x03\x12'\n" +
	"\"SUB_GENRE_HINDUSTANICLASSICALMUSIC\x10\xb7\x03\x12\x1a\n" +
	"\x15SUB_GENRE_INDIANMUSIC\x10\xb8\x03\x12\x1e\n" +
	"\x19SUB_GENRE_INDONESIANMUSIC\x10\xb9\x03\x12\x19\n" +
	"\x14SUB_GENRE_IRISHMUSIC\x10\xba\x03\x12\x1b\n" +
	"\x16SUB_GENRE_ITALIANMUSIC\x10\xbb\x03\x12\x1c\n" +
	"\x17SUB_GENRE_JAMAICANMUSIC\x10\xbc\x03\x12\x1c\n" +
	"\x17SUB_GENRE_JAVANESEMUSIC\x10\xbd\x03\x12\x1a\n" +
	"\x15SUB_GENRE_JEWISHMUSIC\x10\xbe\x03\x12\x1a\n" +
	"\x15SUB_GENRE_JUGENSEMBLE\x10\xbf\x03\x12\x16\n" +
	"\x11SUB_GENRE_KLEZMER\x10\xc0\x03\x12\x14\n" +
	"\x0fSUB_GENRE_MAMBO\x10\xc1\x03\x12\x17\n" +
	"\x12SUB_GENRE_MARACATU\x10\xc2\x03\x12\x17\n" +
	"\x12SUB_GENRE_MERENGUE\x10\xc3\x03\x12\x1b\n" +
	"\x16SUB_GENRE_MEXICANMUSIC\x10\xc4\x03\x12!\n" +
	"\x1cSUB_GENRE_MIDDLEEASTERNMUSIC\x10\xc5\x03\x12\x1d\n" +
	"\x18SUB_GENRE_NEAPOLITANSONG\x10\xc6\x03\x12!\n" +
	"\x1cSUB_GENRE_NORTHAMERICANMUSIC\x10\xc7\x03\x12\x1d\n" +
	"\x18SUB_GENRE_PAKISTANIMUSIC\x10\xc8\x03\x12\x13\n" +
	"\x0eSUB_GENRE_PALO\x10\xc9\x03\x12\x14\n" +
	"\x0fSUB_GENRE_PILON\x10\xca\x03\x12\x14\n" +
	"\x0fSUB_GENRE_POLKA\x10\xcb\x03\x12\x1e\n" +
	"\x19SUB_GENRE_PORTUGUESEMUSIC\x10\xcc\x03\x12\x1f\n" +
	"\x1aSUB_GENRE_PUERTORICANMUSIC\x10\xcd\x03\x12\x1b\n" +
	"\x16SUB_GENRE_PUNJABIMUSIC\x10\xce\x03\x12\x16\n" +
	"\x11SUB_GENRE_RAGTIME\x10\xcf\x03\x12\x16\n" +
	"\x11SUB_GENRE_REPENTE\x10\xd0\x03\x12\x1c\n" +
	"\x17SUB_GENRE_ROMANIANMUSIC\x10\xd1\x03\x12\x15\n" +
	"\x10SUB_GENRE_SALVES\x10\xd2\x03\x12\x14\n" +
	"\x0fSUB_GENRE_SAMBA\x10\xd3\x03\x12\x12\n" +
	"\rSUB_GENRE_SON\x10\xd4\x03\x12!\n" +
	"\x1cSUB_GENRE_SOUTHAMERICANMUSIC\x10\xd5\x03\x12\x1b\n" +
	"\x16SUB_GENRE_SPANISHMUSIC\x10\xd6\x03\x12\x18\n" +
	"\x13SUB_GENRE_SPIRITUAL\x10\xd7\x03\x12\x14\n" +
	"\x0fSUB_GENRE_TANGO\x10\xd8\x03\x12\x1b\n" +
	"\x16SUB_GENRE_TIBETANMUSIC\x10\xd9\x03\x12\x15\n" +
	"\x10SUB_GENRE_TONADA\x10\xda\x03\x12\x1b\n" +
	"\x16SUB_GENRE_TURKISHMUSIC\x10\xdb\x03\x12$\n" +
	"\x1fSUB_GENRE_TURKISHCLASSICALMUSIC\x10\xdc\x03\x12\x18\n" +
	"\x13SUB_GENRE_WORKSONGS\x10\xdd\x03\x12\x16\n" +
	"\x11SUB_GENRE_EXOTICA\x10\xde\x03\x12\x15\n" +
	"\x10SUB_GENRE_NEWAGE\x10\xdf\x03\x12\x1a\n" +
	"\x15SUB_GENRE_NEWFLAMENCO\x10\xe0\x03\x12\x1e\n" +
	"\x19SUB_GENRE_WORLDFUSIONJAZZ\x10\xe1\x03\x12\x18\n" +
	"\x13SUB_GENRE_WORLDBEAT\x10\xe2\x03\x12\x1a\n" +
	"\x15SUB_GENRE_USERDEFINED\x10\xe3\x03*g\n" +
	"\fSubTitleType\x12\x1e\n" +
	"\x1aSUB_TITLE_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17SUB_TITLE_TYPE_LOCATION\x10\x01\x12\x1a\n" +
	"\x16SUB_TITLE_TYPE_VERSION\x10\x02*l\n" +
	"\vSummaryType\x12\x1c\n" +
	"\x18SUMMARY_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18SUMMARY_TYPE_CONTRIBUTOR\x10\x01\x12!\n" +
	"\x1dSUMMARY_TYPE_RIGHTSCONTROLLER\x10\x02*\xbb\x06\n" +
	"\x11SupplyChainStatus\x12#\n" +
	"\x1fSUPPLY_CHAIN_STATUS_UNSPECIFIED\x10\x00\x125\n" +
	"1SUPPLY_CHAIN_STATUS_DELIVEREDTORELEASEDISTRIBUTOR\x10\x01\x126\n" +
	"2SUPPLY_CHAIN_STATUS_INDELIVERYTORELEASEDISTRIBUTOR\x10\x02\x12D\n" +
	"@SUPPLY_CHAIN_STATUS_INPREPARATIONFORDELIVERYTORELEASEDISTRIBUTOR\x10\x03\x128\n" +
	"4SUPPLY_CHAIN_STATUS_ORDERPLACEDFORRELEASEDISTRIBUTOR\x10\x04\x127\n" +
	"3SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASECREATOR\x10\x05\x12;\n" +
	"7SUPPLY_CHAIN_STATUS_PROCESSINGERRORATRELEASEDISTRIBUTOR\x10\x06\x127\n" +
	"3SUPPLY_CHAIN_STATUS_RELEASEMADEAVAILABLETOCONSUMERS\x10\a\x12+\n" +
	"'SUPPLY_CHAIN_STATUS_RELEASENOTAVAILABLE\x10\b\x12;\n" +
	"7SUPPLY_CHAIN_STATUS_RELEASERECEIVEDBYRELEASEDISTRIBUTOR\x10\t\x123\n" +
	"/SUPPLY_CHAIN_STATUS_RELEASESTAGEDFORPUBLICATION\x10\n" +
	"\x125\n" +
	"1SUPPLY_CHAIN_STATUS_RELEASEVIOLATESTERMSOFSERVICE\x10\v\x12&\n" +
	"\"SUPPLY_CHAIN_STATUS_RIGHTSCONFLICT\x10\f\x12@\n" +
	"<SUPPLY_CHAIN_STATUS_SUCCESSFULLYINGESTEDBYRELEASEDISTRIBUTOR\x10\r\x12#\n" +
	"\x1fSUPPLY_CHAIN_STATUS_USERDEFINED\x10\x0e*\xf0\x03\n" +
	"\x05Tempo\x12\x15\n" +
	"\x11TEMPO_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fTEMPO_ADAGIETTO\x10\x01\x12\x10\n" +
	"\fTEMPO_ADAGIO\x10\x02\x12\x14\n" +
	"\x10TEMPO_ADAGISSIMO\x10\x03\x12\x14\n" +
	"\x10TEMPO_ALLEGRETTO\x10\x04\x12\x16\n" +
	"\x12TEMPO_ALLEGRISSIMO\x10\x05\x12\x11\n" +
	"\rTEMPO_ALLEGRO\x10\x06\x12\x19\n" +
	"\x15TEMPO_ALLEGROMODERATO\x10\a\x12\x11\n" +
	"\rTEMPO_ANDANTE\x10\b\x12\x19\n" +
	"\x15TEMPO_ANDANTEMODERATO\x10\t\x12\x13\n" +
	"\x0fTEMPO_ANDANTINO\x10\n" +
	"\x12\x0f\n" +
	"\vTEMPO_GRAVE\x10\v\x12\x13\n" +
	"\x0fTEMPO_LARGHETTO\x10\f\x12\x15\n" +
	"\x11TEMPO_LARGHISSIMO\x10\r\x12\x0f\n" +
	"\vTEMPO_LARGO\x10\x0e\x12\x0f\n" +
	"\vTEMPO_LENTO\x10\x0f\x12\x18\n" +
	"\x14TEMPO_MARCIAMODERATO\x10\x10\x12\x12\n" +
	"\x0eTEMPO_MODERATO\x10\x11\x12\x15\n" +
	"\x11TEMPO_PRESTISSIMO\x10\x12\x12\x10\n" +
	"\fTEMPO_PRESTO\x10\x13\x12\x15\n" +
	"\x11TEMPO_USERDEFINED\x10\x14\x12\x10\n" +
	"\fTEMPO_VIVACE\x10\x15\x12\x15\n" +
	"\x11TEMPO_VIVACISSIMO\x10\x16*\x89/\n" +
	"\rTerritoryCode\x12\x1e\n" +
	"\x1aTERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TERRITORY_CODE_AD\x10\x01\x12\x15\n" +
	"\x11TERRITORY_CODE_AE\x10\x02\x12\x15\n" +
	"\x11TERRITORY_CODE_AF\x10\x03\x12\x15\n" +
	"\x11TERRITORY_CODE_AG\x10\x04\x12\x15\n" +
	"\x11TERRITORY_CODE_AI\x10\x05\x12\x15\n" +
	"\x11TERRITORY_CODE_AL\x10\x06\x12\x15\n" +
	"\x11TERRITORY_CODE_AM\x10\a\x12\x15\n" +
	"\x11TERRITORY_CODE_AN\x10\b\x12\x15\n" +
	"\x11TERRITORY_CODE_AO\x10\t\x12\x15\n" +
	"\x11TERRITORY_CODE_AQ\x10\n" +
	"\x12\x15\n" +
	"\x11TERRITORY_CODE_AR\x10\v\x12\x15\n" +
	"\x11TERRITORY_CODE_AS\x10\f\x12\x15\n" +
	"\x11TERRITORY_CODE_AT\x10\r\x12\x15\n" +
	"\x11TERRITORY_CODE_AU\x10\x0e\x12\x15\n" +
	"\x11TERRITORY_CODE_AW\x10\x0f\x12\x15\n" +
	"\x11TERRITORY_CODE_AX\x10\x10\x12\x15\n" +
	"\x11TERRITORY_CODE_AZ\x10\x11\x12\x15\n" +
	"\x11TERRITORY_CODE_BA\x10\x12\x12\x15\n" +
	"\x11TERRITORY_CODE_BB\x10\x13\x12\x15\n" +
	"\x11TERRITORY_CODE_BD\x10\x14\x12\x15\n" +
	"\x11TERRITORY_CODE_BE\x10\x15\x12\x15\n" +
	"\x11TERRITORY_CODE_BF\x10\x16\x12\x15\n" +
	"\x11TERRITORY_CODE_BG\x10\x17\x12\x15\n" +
	"\x11TERRITORY_CODE_BH\x10\x18\x12\x15\n" +
	"\x11TERRITORY_CODE_BI\x10\x19\x12\x15\n" +
	"\x11TERRITORY_CODE_BJ\x10\x1a\x12\x15\n" +
	"\x11TERRITORY_CODE_BL\x10\x1b\x12\x15\n" +
	"\x11TERRITORY_CODE_BM\x10\x1c\x12\x15\n" +
	"\x11TERRITORY_CODE_BN\x10\x1d\x12\x15\n" +
	"\x11TERRITORY_CODE_BO\x10\x1e\x12\x15\n" +
	"\x11TERRITORY_CODE_BQ\x10\x1f\x12\x15\n" +
	"\x11TERRITORY_CODE_BR\x10 \x12\x15\n" +
	"\x11TERRITORY_CODE_BS\x10!\x12\x15\n" +
	"\x11TERRITORY_CODE_BT\x10\"\x12\x15\n" +
	"\x11TERRITORY_CODE_BV\x10#\x12\x15\n" +
	"\x11TERRITORY_CODE_BW\x10$\x12\x15\n" +
	"\x11TERRITORY_CODE_BY\x10%\x12\x15\n" +
	"\x11TERRITORY_CODE_BZ\x10&\x12\x15\n" +
	"\x11TERRITORY_CODE_CA\x10'\x12\x15\n" +
	"\x11TERRITORY_CODE_CC\x10(\x12\x15\n" +
	"\x11TERRITORY_CODE_CD\x10)\x12\x15\n" +
	"\x11TERRITORY_CODE_CF\x10*\x12\x15\n" +
	"\x11TERRITORY_CODE_CG\x10+\x12\x15\n" +
	"\x11TERRITORY_CODE_CH\x10,\x12\x15\n" +
	"\x11TERRITORY_CODE_CI\x10-\x12\x15\n" +
	"\x11TERRITORY_CODE_CK\x10.\x12\x15\n" +
	"\x11TERRITORY_CODE_CL\x10/\x12\x15\n" +
	"\x11TERRITORY_CODE_CM\x100\x12\x15\n" +
	"\x11TERRITORY_CODE_CN\x101\x12\x15\n" +
	"\x11TERRITORY_CODE_CO\x102\x12\x15\n" +
	"\x11TERRITORY_CODE_CR\x103\x12\x15\n" +
	"\x11TERRITORY_CODE_CS\x104\x12\x15\n" +
	"\x11TERRITORY_CODE_CU\x105\x12\x15\n" +
	"\x11TERRITORY_CODE_CV\x106\x12\x15\n" +
	"\x11TERRITORY_CODE_CW\x107\x12\x15\n" +
	"\x11TERRITORY_CODE_CX\x108\x12\x15\n" +
	"\x11TERRITORY_CODE_CY\x109\x12\x15\n" +
	"\x11TERRITORY_CODE_CZ\x10:\x12\x15\n" +
	"\x11TERRITORY_CODE_DE\x10;\x12\x15\n" +
	"\x11TERRITORY_CODE_DJ\x10<\x12\x15\n" +
	"\x11TERRITORY_CODE_DK\x10=\x12\x15\n" +
	"\x11TERRITORY_CODE_DM\x10>\x12\x15\n" +
	"\x11TERRITORY_CODE_DO\x10?\x12\x15\n" +
	"\x11TERRITORY_CODE_DZ\x10@\x12\x15\n" +
	"\x11TERRITORY_CODE_EC\x10A\x12\x15\n" +
	"\x11TERRITORY_CODE_EE\x10B\x12\x15\n" +
	"\x11TERRITORY_CODE_EG\x10C\x12\x15\n" +
	"\x11TERRITORY_CODE_EH\x10D\x12\x15\n" +
	"\x11TERRITORY_CODE_ER\x10E\x12\x15\n" +
	"\x11TERRITORY_CODE_ES\x10F\x12\x18\n" +
	"\x14TERRITORY_CODE_ES_CE\x10G\x12\x18\n" +
	"\x14TERRITORY_CODE_ES_CN\x10H\x12\x18\n" +
	"\x14TERRITORY_CODE_ES_ML\x10I\x12\x15\n" +
	"\x11TERRITORY_CODE_ET\x10J\x12\x15\n" +
	"\x11TERRITORY_CODE_FI\x10K\x12\x15\n" +
	"\x11TERRITORY_CODE_FJ\x10L\x12\x15\n" +
	"\x11TERRITORY_CODE_FK\x10M\x12\x15\n" +
	"\x11TERRITORY_CODE_FM\x10N\x12\x15\n" +
	"\x11TERRITORY_CODE_FO\x10O\x12\x15\n" +
	"\x11TERRITORY_CODE_FR\x10P\x12\x15\n" +
	"\x11TERRITORY_CODE_GA\x10Q\x12\x15\n" +
	"\x11TERRITORY_CODE_GB\x10R\x12\x15\n" +
	"\x11TERRITORY_CODE_GD\x10S\x12\x15\n" +
	"\x11TERRITORY_CODE_GE\x10T\x12\x15\n" +
	"\x11TERRITORY_CODE_GF\x10U\x12\x15\n" +
	"\x11TERRITORY_CODE_GG\x10V\x12\x15\n" +
	"\x11TERRITORY_CODE_GH\x10W\x12\x15\n" +
	"\x11TERRITORY_CODE_GI\x10X\x12\x15\n" +
	"\x11TERRITORY_CODE_GL\x10Y\x12\x15\n" +
	"\x11TERRITORY_CODE_GM\x10Z\x12\x15\n" +
	"\x11TERRITORY_CODE_GN\x10[\x12\x15\n" +
	"\x11TERRITORY_CODE_GP\x10\\\x12\x15\n" +
	"\x11TERRITORY_CODE_GQ\x10]\x12\x15\n" +
	"\x11TERRITORY_CODE_GR\x10^\x12\x15\n" +
	"\x11TERRITORY_CODE_GS\x10_\x12\x15\n" +
	"\x11TERRITORY_CODE_GT\x10`\x12\x15\n" +
	"\x11TERRITORY_CODE_GU\x10a\x12\x15\n" +
	"\x11TERRITORY_CODE_GW\x10b\x12\x15\n" +
	"\x11TERRITORY_CODE_GY\x10c\x12\x15\n" +
	"\x11TERRITORY_CODE_HK\x10d\x12\x15\n" +
	"\x11TERRITORY_CODE_HM\x10e\x12\x15\n" +
	"\x11TERRITORY_CODE_HN\x10f\x12\x15\n" +
	"\x11TERRITORY_CODE_HR\x10g\x12\x15\n" +
	"\x11TERRITORY_CODE_HT\x10h\x12\x15\n" +
	"\x11TERRITORY_CODE_HU\x10i\x12\x15\n" +
	"\x11TERRITORY_CODE_ID\x10j\x12\x15\n" +
	"\x11TERRITORY_CODE_IE\x10k\x12\x15\n" +
	"\x11TERRITORY_CODE_IL\x10l\x12\x15\n" +
	"\x11TERRITORY_CODE_IM\x10m\x12\x15\n" +
	"\x11TERRITORY_CODE_IN\x10n\x12\x15\n" +
	"\x11TERRITORY_CODE_IO\x10o\x12\x15\n" +
	"\x11TERRITORY_CODE_IQ\x10p\x12\x15\n" +
	"\x11TERRITORY_CODE_IR\x10q\x12\x15\n" +
	"\x11TERRITORY_CODE_IS\x10r\x12\x15\n" +
	"\x11TERRITORY_CODE_IT\x10s\x12\x15\n" +
	"\x11TERRITORY_CODE_JE\x10t\x12\x15\n" +
	"\x11TERRITORY_CODE_JM\x10u\x12\x15\n" +
	"\x11TERRITORY_CODE_JO\x10v\x12\x15\n" +
	"\x11TERRITORY_CODE_JP\x10w\x12\x15\n" +
	"\x11TERRITORY_CODE_KE\x10x\x12\x15\n" +
	"\x11TERRITORY_CODE_KG\x10y\x12\x15\n" +
	"\x11TERRITORY_CODE_KH\x10z\x12\x15\n" +
	"\x11TERRITORY_CODE_KI\x10{\x12\x15\n" +
	"\x11TERRITORY_CODE_KM\x10|\x12\x15\n" +
	"\x11TERRITORY_CODE_KN\x10}\x12\x15\n" +
	"\x11TERRITORY_CODE_KP\x10~\x12\x15\n" +
	"\x11TERRITORY_CODE_KR\x10\x7f\x12\x16\n" +
	"\x11TERRITORY_CODE_KW\x10\x80\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_KY\x10\x81\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_KZ\x10\x82\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LA\x10\x83\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LB\x10\x84\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LC\x10\x85\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LI\x10\x86\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LK\x10\x87\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LR\x10\x88\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LS\x10\x89\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LT\x10\x8a\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LU\x10\x8b\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LV\x10\x8c\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_LY\x10\x8d\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MA\x10\x8e\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MC\x10\x8f\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MD\x10\x90\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ME\x10\x91\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MF\x10\x92\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MG\x10\x93\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MH\x10\x94\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MK\x10\x95\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ML\x10\x96\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MM\x10\x97\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MN\x10\x98\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MO\x10\x99\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MP\x10\x9a\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MQ\x10\x9b\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MR\x10\x9c\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MS\x10\x9d\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MT\x10\x9e\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MU\x10\x9f\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MV\x10\xa0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MW\x10\xa1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MX\x10\xa2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MY\x10\xa3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_MZ\x10\xa4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NA\x10\xa5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NC\x10\xa6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NE\x10\xa7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NF\x10\xa8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NG\x10\xa9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NI\x10\xaa\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NL\x10\xab\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NO\x10\xac\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NP\x10\xad\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NR\x10\xae\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NU\x10\xaf\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_NZ\x10\xb0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_OM\x10\xb1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PA\x10\xb2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PE\x10\xb3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PF\x10\xb4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PG\x10\xb5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PH\x10\xb6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PK\x10\xb7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PL\x10\xb8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PM\x10\xb9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PN\x10\xba\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PR\x10\xbb\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PS\x10\xbc\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PT\x10\xbd\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PW\x10\xbe\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_PY\x10\xbf\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_QA\x10\xc0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_RE\x10\xc1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_RO\x10\xc2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_RS\x10\xc3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_RU\x10\xc4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_RW\x10\xc5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SA\x10\xc6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SB\x10\xc7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SC\x10\xc8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SD\x10\xc9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SE\x10\xca\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SG\x10\xcb\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SH\x10\xcc\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SI\x10\xcd\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SJ\x10\xce\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SK\x10\xcf\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SL\x10\xd0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SM\x10\xd1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SN\x10\xd2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SO\x10\xd3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SR\x10\xd4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SS\x10\xd5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ST\x10\xd6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SV\x10\xd7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SX\x10\xd8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SY\x10\xd9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_SZ\x10\xda\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TC\x10\xdb\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TD\x10\xdc\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TF\x10\xdd\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TG\x10\xde\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TH\x10\xdf\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TJ\x10\xe0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TK\x10\xe1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TL\x10\xe2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TM\x10\xe3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TN\x10\xe4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TO\x10\xe5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TR\x10\xe6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TT\x10\xe7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TV\x10\xe8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TW\x10\xe9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_TZ\x10\xea\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_UA\x10\xeb\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_UG\x10\xec\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_UM\x10\xed\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_US\x10\xee\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_UY\x10\xef\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_UZ\x10\xf0\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VA\x10\xf1\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VC\x10\xf2\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VE\x10\xf3\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VG\x10\xf4\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VI\x10\xf5\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VN\x10\xf6\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_VU\x10\xf7\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_WF\x10\xf8\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_WS\x10\xf9\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_YE\x10\xfa\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_YT\x10\xfb\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ZA\x10\xfc\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ZM\x10\xfd\x01\x12\x16\n" +
	"\x11TERRITORY_CODE_ZW\x10\xfe\x01*r\n" +
	"\x11TerritoryCodeType\x12#\n" +
	"\x1fTERRITORY_CODE_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17TERRITORY_CODE_TYPE_ISO\x10\x01\x12\x1b\n" +
	"\x17TERRITORY_CODE_TYPE_TIS\x10\x02*\x9d\x02\n" +
	")TerritoryCodeTypeIncludingDeprecatedCodes\x12>\n" +
	":TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_UNSPECIFIED\x10\x00\x12@\n" +
	"<TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_DEPRECATEDISO\x10\x01\x126\n" +
	"2TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_ISO\x10\x02\x126\n" +
	"2TERRITORY_CODE_TYPE_INCLUDING_DEPRECATED_CODES_TIS\x10\x03*\xf4\x05\n" +
	"\rTextCodecType\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15TEXT_CODEC_TYPE_ASCII\x10\x01\x12'\n" +
	"#TEXT_CODEC_TYPE_ASCIIORISO8859NTEXT\x10\x02\x12\"\n" +
	"\x1eTEXT_CODEC_TYPE_DDEXLYRICSFILE\x10\x03\x12\x1a\n" +
	"\x16TEXT_CODEC_TYPE_EBU_TT\x10\x04\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_ENHANCEDLRC\x10\x05\x12\x18\n" +
	"\x14TEXT_CODEC_TYPE_EPUB\x10\x06\x12\x18\n" +
	"\x14TEXT_CODEC_TYPE_HTML\x10\a\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_LRC\x10\b\x12!\n" +
	"\x1dTEXT_CODEC_TYPE_MICROSOFTWORD\x10\t\x12$\n" +
	" TEXT_CODEC_TYPE_OPENDOCUMENTTEXT\x10\n" +
	"\x12\x19\n" +
	"\x15TEXT_CODEC_TYPE_OOXML\x10\v\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_PDF\x10\f\x12\x1e\n" +
	"\x1aTEXT_CODEC_TYPE_POSTSCRIPT\x10\r\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_RTF\x10\x0e\x12\x1d\n" +
	"\x19TEXT_CODEC_TYPE_SIMPLELRC\x10\x0f\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_SRT\x10\x10\x12\x18\n" +
	"\x14TEXT_CODEC_TYPE_TTML\x10\x11\x12\x1b\n" +
	"\x17TEXT_CODEC_TYPE_UNKNOWN\x10\x12\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_USERDEFINED\x10\x13\x12\x1c\n" +
	"\x18TEXT_CODEC_TYPE_UTF8TEXT\x10\x14\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_VTT\x10\x15\x12\x1f\n" +
	"\x1bTEXT_CODEC_TYPE_WINDOWSTEXT\x10\x16\x12\x19\n" +
	"\x15TEXT_CODEC_TYPE_XHTML\x10\x17\x12\x17\n" +
	"\x13TEXT_CODEC_TYPE_XML\x10\x18*\x82\x02\n" +
	"\x19TextMusicRelationshipType\x12,\n" +
	"(TEXT_MUSIC_RELATIONSHIP_TYPE_UNSPECIFIED\x10\x00\x12)\n" +
	"%TEXT_MUSIC_RELATIONSHIP_TYPE_TEXTONLY\x10\x01\x12-\n" +
	")TEXT_MUSIC_RELATIONSHIP_TYPE_SAMECREATION\x10\x02\x121\n" +
	"-TEXT_MUSIC_RELATIONSHIP_TYPE_SEPARATECREATION\x10\x03\x12*\n" +
	"&TEXT_MUSIC_RELATIONSHIP_TYPE_MUSICONLY\x10\x04*\xac\x02\n" +
	"\bTextType\x12\x19\n" +
	"\x15TEXT_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TEXT_TYPE_CAPTION\x10\x01\x12\x1b\n" +
	"\x17TEXT_TYPE_CLOSEDCAPTION\x10\x02\x12\x13\n" +
	"\x0fTEXT_TYPE_EBOOK\x10\x03\x12\x18\n" +
	"\x14TEXT_TYPE_LINERNOTES\x10\x04\x12\x17\n" +
	"\x13TEXT_TYPE_LYRICTEXT\x10\x05\x12#\n" +
	"\x1fTEXT_TYPE_NONINTERACTIVEBOOKLET\x10\x06\x12\x16\n" +
	"\x12TEXT_TYPE_SUBTITLE\x10\a\x12\x1a\n" +
	"\x16TEXT_TYPE_TEXTDOCUMENT\x10\b\x12\x15\n" +
	"\x11TEXT_TYPE_UNKNOWN\x10\t\x12\x19\n" +
	"\x15TEXT_TYPE_USERDEFINED\x10\n" +
	"*\x86\x01\n" +
	"\fTextTypeATOM\x12!\n" +
	"\x1dTEXT_TYPE_A_T_O_M_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16TEXT_TYPE_A_T_O_M_TEXT\x10\x01\x12\x1a\n" +
	"\x16TEXT_TYPE_A_T_O_M_HTML\x10\x02\x12\x1b\n" +
	"\x17TEXT_TYPE_A_T_O_M_XHTML\x10\x03*\xcf\x01\n" +
	"\tThemeType\x12\x1a\n" +
	"\x16THEME_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17THEME_TYPE_CLOSINGTHEME\x10\x01\x12\x18\n" +
	"\x14THEME_TYPE_MAINTHEME\x10\x02\x12\x1b\n" +
	"\x17THEME_TYPE_OPENINGTHEME\x10\x03\x12\x1b\n" +
	"\x17THEME_TYPE_SEGMENTTHEME\x10\x04\x12\x19\n" +
	"\x15THEME_TYPE_TITLETHEME\x10\x05\x12\x1a\n" +
	"\x16THEME_TYPE_USERDEFINED\x10\x06*\x8d\x01\n" +
	"\fTimecodeType\x12\x1d\n" +
	"\x19TIMECODE_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11TIMECODE_TYPE_FSK\x10\x01\x12\x16\n" +
	"\x12TIMECODE_TYPE_MIDI\x10\x02\x12\x17\n" +
	"\x13TIMECODE_TYPE_SMPTE\x10\x03\x12\x16\n" +
	"\x12TIMECODE_TYPE_VITC\x10\x04*\xaa;\n" +
	"\x10TisTerritoryCode\x12\"\n" +
	"\x1eTIS_TERRITORY_CODE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16TIS_TERRITORY_CODE_E_4\x10\x01\x12\x1a\n" +
	"\x16TIS_TERRITORY_CODE_E_8\x10\x02\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_12\x10\x03\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_20\x10\x04\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_24\x10\x05\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_28\x10\x06\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_31\x10\a\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_32\x10\b\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_36\x10\t\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_40\x10\n" +
	"\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_44\x10\v\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_48\x10\f\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_50\x10\r\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_51\x10\x0e\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_52\x10\x0f\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_56\x10\x10\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_64\x10\x11\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_68\x10\x12\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_70\x10\x13\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_72\x10\x14\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_76\x10\x15\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_84\x10\x16\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_90\x10\x17\x12\x1b\n" +
	"\x17TIS_TERRITORY_CODE_E_96\x10\x18\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_100\x10\x19\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_104\x10\x1a\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_108\x10\x1b\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_112\x10\x1c\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_116\x10\x1d\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_120\x10\x1e\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_124\x10\x1f\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_132\x10 \x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_140\x10!\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_144\x10\"\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_148\x10#\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_152\x10$\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_156\x10%\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_158\x10&\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_170\x10'\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_174\x10(\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_178\x10)\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_180\x10*\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_188\x10+\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_191\x10,\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_192\x10-\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_196\x10.\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_200\x10/\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_203\x100\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_204\x101\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_208\x102\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_212\x103\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_214\x104\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_218\x105\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_222\x106\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_226\x107\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_230\x108\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_231\x109\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_232\x10:\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_233\x10;\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_242\x10<\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_246\x10=\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_250\x10>\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_258\x10?\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_262\x10@\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_266\x10A\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_268\x10B\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_270\x10C\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_276\x10D\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_278\x10E\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_280\x10F\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_288\x10G\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_296\x10H\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_300\x10I\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_308\x10J\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_320\x10K\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_324\x10L\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_328\x10M\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_332\x10N\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_336\x10O\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_340\x10P\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_344\x10Q\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_348\x10R\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_352\x10S\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_356\x10T\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_360\x10U\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_364\x10V\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_368\x10W\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_372\x10X\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_376\x10Y\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_380\x10Z\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_384\x10[\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_388\x10\\\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_392\x10]\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_398\x10^\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_400\x10_\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_404\x10`\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_408\x10a\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_410\x10b\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_414\x10c\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_417\x10d\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_418\x10e\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_422\x10f\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_426\x10g\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_428\x10h\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_430\x10i\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_434\x10j\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_438\x10k\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_440\x10l\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_442\x10m\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_446\x10n\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_450\x10o\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_454\x10p\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_458\x10q\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_462\x10r\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_466\x10s\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_470\x10t\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_478\x10u\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_480\x10v\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_484\x10w\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_492\x10x\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_496\x10y\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_498\x10z\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_499\x10{\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_504\x10|\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_508\x10}\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_512\x10~\x12\x1c\n" +
	"\x18TIS_TERRITORY_CODE_E_516\x10\x7f\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_520\x10\x80\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_524\x10\x81\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_528\x10\x82\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_540\x10\x83\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_548\x10\x84\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_554\x10\x85\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_558\x10\x86\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_562\x10\x87\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_566\x10\x88\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_578\x10\x89\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_583\x10\x8a\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_584\x10\x8b\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_585\x10\x8c\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_586\x10\x8d\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_591\x10\x8e\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_598\x10\x8f\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_600\x10\x90\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_604\x10\x91\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_608\x10\x92\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_616\x10\x93\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_620\x10\x94\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_624\x10\x95\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_626\x10\x96\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_630\x10\x97\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_634\x10\x98\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_642\x10\x99\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_643\x10\x9a\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_646\x10\x9b\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_659\x10\x9c\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_662\x10\x9d\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_670\x10\x9e\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_674\x10\x9f\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_678\x10\xa0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_682\x10\xa1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_686\x10\xa2\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_688\x10\xa3\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_690\x10\xa4\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_694\x10\xa5\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_702\x10\xa6\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_703\x10\xa7\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_704\x10\xa8\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_705\x10\xa9\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_706\x10\xaa\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_710\x10\xab\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_716\x10\xac\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_720\x10\xad\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_724\x10\xae\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_728\x10\xaf\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_729\x10\xb0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_732\x10\xb1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_736\x10\xb2\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_740\x10\xb3\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_748\x10\xb4\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_752\x10\xb5\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_756\x10\xb6\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_760\x10\xb7\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_762\x10\xb8\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_764\x10\xb9\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_768\x10\xba\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_776\x10\xbb\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_780\x10\xbc\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_784\x10\xbd\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_788\x10\xbe\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_792\x10\xbf\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_795\x10\xc0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_798\x10\xc1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_800\x10\xc2\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_804\x10\xc3\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_807\x10\xc4\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_810\x10\xc5\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_818\x10\xc6\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_826\x10\xc7\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_834\x10\xc8\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_840\x10\xc9\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_854\x10\xca\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_858\x10\xcb\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_860\x10\xcc\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_862\x10\xcd\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_882\x10\xce\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_886\x10\xcf\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_887\x10\xd0\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_890\x10\xd1\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_891\x10\xd2\x01\x12\x1d\n" +
	"\x18TIS_TERRITORY_CODE_E_894\x10\xd3\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2100\x10\xd4\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2101\x10\xd5\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2102\x10\xd6\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2103\x10\xd7\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2104\x10\xd8\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2105\x10\xd9\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2106\x10\xda\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2107\x10\xdb\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2108\x10\xdc\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2109\x10\xdd\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2110\x10\xde\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2111\x10\xdf\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2112\x10\xe0\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2113\x10\xe1\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2114\x10\xe2\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2115\x10\xe3\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2116\x10\xe4\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2117\x10\xe5\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2118\x10\xe6\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2119\x10\xe7\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2120\x10\xe8\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2121\x10\xe9\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2122\x10\xea\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2123\x10\xeb\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2124\x10\xec\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2125\x10\xed\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2126\x10\xee\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2127\x10\xef\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2128\x10\xf0\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2129\x10\xf1\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2130\x10\xf2\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2131\x10\xf3\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2132\x10\xf4\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2133\x10\xf5\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2134\x10\xf6\x01\x12\x1e\n" +
	"\x19TIS_TERRITORY_CODE_E_2136\x10\xf7\x01*\xda\x04\n" +
	"\tTitleType\x12\x1a\n" +
	"\x16TITLE_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"TITLE_TYPE_ABBREVIATEDDISPLAYTITLE\x10\x01\x12\x1f\n" +
	"\x1bTITLE_TYPE_ALTERNATIVETITLE\x10\x02\x12\x1b\n" +
	"\x17TITLE_TYPE_DISPLAYTITLE\x10\x03\x12\x1e\n" +
	"\x1aTITLE_TYPE_FIRSTLINEOFTEXT\x10\x04\x12\x1a\n" +
	"\x16TITLE_TYPE_FORMALTITLE\x10\x05\x12\x1c\n" +
	"\x18TITLE_TYPE_GROUPINGTITLE\x10\x06\x12\x1d\n" +
	"\x19TITLE_TYPE_INCORRECTTITLE\x10\a\x12\x1e\n" +
	"\x1aTITLE_TYPE_MISSPELLEDTITLE\x10\b\x12\x1f\n" +
	"\x1bTITLE_TYPE_MUSICALWORKTITLE\x10\t\x12\x1c\n" +
	"\x18TITLE_TYPE_ORIGINALTITLE\x10\n" +
	"\x12\x1a\n" +
	"\x16TITLE_TYPE_SEARCHTITLE\x10\v\x12\x1b\n" +
	"\x17TITLE_TYPE_SORTINGTITLE\x10\f\x12\x1a\n" +
	"\x16TITLE_TYPE_TITLEASPART\x10\r\x12&\n" +
	"\"TITLE_TYPE_TITLEWITHOUTPUNCTUATION\x10\x0e\x12\x1e\n" +
	"\x1aTITLE_TYPE_TRANSLATEDTITLE\x10\x0f\x12\"\n" +
	"\x1eTITLE_TYPE_TRANSLITERATEDTITLE\x10\x10\x12\x16\n" +
	"\x12TITLE_TYPE_UNKNOWN\x10\x11\x12\x1a\n" +
	"\x16TITLE_TYPE_USERDEFINED\x10\x12*\xff\t\n" +
	"\x10TransferCategory\x12!\n" +
	"\x1dTRANSFER_CATEGORY_UNSPECIFIED\x10\x00\x12$\n" +
	" TRANSFER_CATEGORY_ALIGNMENTTONES\x10\x01\x12.\n" +
	"*TRANSFER_CATEGORY_ANALOGTODIGITALCONVERTER\x10\x02\x12\x1e\n" +
	"\x1aTRANSFER_CATEGORY_BITDEPTH\x10\x03\x12\x1f\n" +
	"\x1bTRANSFER_CATEGORY_CARTRIDGE\x10\x04\x12!\n" +
	"\x1dTRANSFER_CATEGORY_CLOCKSOURCE\x10\x05\x12.\n" +
	"*TRANSFER_CATEGORY_CONVERSIONREFERENCELEVEL\x10\x06\x12\x1e\n" +
	"\x1aTRANSFER_CATEGORY_EMPHASIS\x10\a\x12'\n" +
	"#TRANSFER_CATEGORY_MATERIALCONDITION\x10\b\x12\x1f\n" +
	"\x1bTRANSFER_CATEGORY_MICPREAMP\x10\t\x12$\n" +
	" TRANSFER_CATEGORY_NOISEREDUCTION\x10\n" +
	"\x12&\n" +
	"\"TRANSFER_CATEGORY_NUMBEROFCHANNELS\x10\v\x12#\n" +
	"\x1fTRANSFER_CATEGORY_NUMBEROFSIDES\x10\f\x12$\n" +
	" TRANSFER_CATEGORY_NUMBEROFTRACKS\x10\r\x12!\n" +
	"\x1dTRANSFER_CATEGORY_PHONOPREAMP\x10\x0e\x12$\n" +
	" TRANSFER_CATEGORY_REFERENCECLOCK\x10\x0f\x12$\n" +
	" TRANSFER_CATEGORY_REFERENCETONES\x10\x10\x12\"\n" +
	"\x1eTRANSFER_CATEGORY_SAMPLINGRATE\x10\x11\x12$\n" +
	" TRANSFER_CATEGORY_SIDE1CONDITION\x10\x12\x12$\n" +
	" TRANSFER_CATEGORY_SIDE2CONDITION\x10\x13\x12$\n" +
	" TRANSFER_CATEGORY_SMPTEFRAMERATE\x10\x14\x12#\n" +
	"\x1fTRANSFER_CATEGORY_SOURCEMACHINE\x10\x15\x12\x1b\n" +
	"\x17TRANSFER_CATEGORY_SPEED\x10\x16\x12\x1d\n" +
	"\x19TRANSFER_CATEGORY_STORAGE\x10\x17\x12\x1c\n" +
	"\x18TRANSFER_CATEGORY_STYLUS\x10\x18\x12 \n" +
	"\x1cTRANSFER_CATEGORY_STYLUSSIZE\x10\x19\x12#\n" +
	"\x1fTRANSFER_CATEGORY_TAPEBAKEDDATE\x10\x1a\x12(\n" +
	"$TRANSFER_CATEGORY_TAPEBAKEDEQUIPMENT\x10\x1b\x12$\n" +
	" TRANSFER_CATEGORY_TAPEBAKEDHOURS\x10\x1c\x12*\n" +
	"&TRANSFER_CATEGORY_TAPEBAKEDTEMPERATURE\x10\x1d\x12#\n" +
	"\x1fTRANSFER_CATEGORY_TAPECOOLHOURS\x10\x1e\x12\x1d\n" +
	"\x19TRANSFER_CATEGORY_TONEARM\x10\x1f\x12(\n" +
	"$TRANSFER_CATEGORY_TRACKCONFIGURATION\x10 \x12&\n" +
	"\"TRANSFER_CATEGORY_TRANSFERSOFTWARE\x10!*\xd8\x01\n" +
	"\fTransferType\x12\x1d\n" +
	"\x19TRANSFER_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cTRANSFER_TYPE_ANALOGTOANALOG\x10\x01\x12!\n" +
	"\x1dTRANSFER_TYPE_ANALOGTODIGITAL\x10\x02\x12\x1d\n" +
	"\x19TRANSFER_TYPE_DIGITALCOPY\x10\x03\x12!\n" +
	"\x1dTRANSFER_TYPE_DIGITALTOANALOG\x10\x04\x12\"\n" +
	"\x1eTRANSFER_TYPE_DIGITALTODIGITAL\x10\x05*\x9c\x01\n" +
	"\rUnitOfBitRate\x12 \n" +
	"\x1cUNIT_OF_BIT_RATE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14UNIT_OF_BIT_RATE_BPS\x10\x01\x12\x19\n" +
	"\x15UNIT_OF_BIT_RATE_GBPS\x10\x02\x12\x19\n" +
	"\x15UNIT_OF_BIT_RATE_KBPS\x10\x03\x12\x19\n" +
	"\x15UNIT_OF_BIT_RATE_MBPS\x10\x04*\xf8\x01\n" +
	"\x14UnitOfConditionValue\x12'\n" +
	"#UNIT_OF_CONDITION_VALUE_UNSPECIFIED\x10\x00\x12'\n" +
	"#UNIT_OF_CONDITION_VALUE_MILLISECOND\x10\x01\x12\"\n" +
	"\x1eUNIT_OF_CONDITION_VALUE_MINUTE\x10\x02\x12#\n" +
	"\x1fUNIT_OF_CONDITION_VALUE_PERCENT\x10\x03\x12!\n" +
	"\x1dUNIT_OF_CONDITION_VALUE_PIXEL\x10\x04\x12\"\n" +
	"\x1eUNIT_OF_CONDITION_VALUE_SECOND\x10\x05*x\n" +
	"\x0fUnitOfCuePoints\x12\"\n" +
	"\x1eUNIT_OF_CUE_POINTS_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eUNIT_OF_CUE_POINTS_MILLISECOND\x10\x01\x12\x1d\n" +
	"\x19UNIT_OF_CUE_POINTS_SECOND\x10\x02*\xa5\x01\n" +
	"\x0eUnitOfDuration\x12 \n" +
	"\x1cUNIT_OF_DURATION_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14UNIT_OF_DURATION_DAY\x10\x01\x12\x1a\n" +
	"\x16UNIT_OF_DURATION_MONTH\x10\x02\x12 \n" +
	"\x1cUNIT_OF_DURATION_USERDEFINED\x10\x03\x12\x19\n" +
	"\x15UNIT_OF_DURATION_WEEK\x10\x04*\xb3\x01\n" +
	"\fUnitOfExtent\x12\x1e\n" +
	"\x1aUNIT_OF_EXTENT_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11UNIT_OF_EXTENT_CM\x10\x01\x12\x17\n" +
	"\x13UNIT_OF_EXTENT_INCH\x10\x02\x12\x15\n" +
	"\x11UNIT_OF_EXTENT_MM\x10\x03\x12\"\n" +
	"\x1eUNIT_OF_EXTENT_PERCENTOFSCREEN\x10\x04\x12\x18\n" +
	"\x14UNIT_OF_EXTENT_PIXEL\x10\x05*\x85\x01\n" +
	"\x0fUnitOfFrameRate\x12\"\n" +
	"\x1eUNIT_OF_FRAME_RATE_UNSPECIFIED\x10\x00\x12$\n" +
	" UNIT_OF_FRAME_RATE_HZ_INTERLACED\x10\x01\x12(\n" +
	"$UNIT_OF_FRAME_RATE_HZ_NON_INTERLACED\x10\x02*\x9f\x01\n" +
	"\x0fUnitOfFrequency\x12!\n" +
	"\x1dUNIT_OF_FREQUENCY_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15UNIT_OF_FREQUENCY_GHZ\x10\x01\x12\x18\n" +
	"\x14UNIT_OF_FREQUENCY_HZ\x10\x02\x12\x19\n" +
	"\x15UNIT_OF_FREQUENCY_KHZ\x10\x03\x12\x19\n" +
	"\x15UNIT_OF_FREQUENCY_MHZ\x10\x04*\xcb\x02\n" +
	"\x1cUnitTypeForRevenueAllocation\x120\n" +
	",UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNSPECIFIED\x10\x00\x125\n" +
	"1UNIT_TYPE_FOR_REVENUE_ALLOCATION_INDIVIDUALUSAGES\x10\x01\x12,\n" +
	"(UNIT_TYPE_FOR_REVENUE_ALLOCATION_SECONDS\x10\x02\x125\n" +
	"1UNIT_TYPE_FOR_REVENUE_ALLOCATION_UNITOFACCOUNTING\x10\x03\x12+\n" +
	"'UNIT_TYPE_FOR_REVENUE_ALLOCATION_USAGES\x10\x04\x120\n" +
	",UNIT_TYPE_FOR_REVENUE_ALLOCATION_USERDEFINED\x10\x05*\xd7\r\n" +
	"\aUseType\x12\x18\n" +
	"\x14USE_TYPE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16USE_TYPE_ASPERCONTRACT\x10\x01\x12\x16\n" +
	"\x12USE_TYPE_BROADCAST\x10\x02\x12\x12\n" +
	"\x0eUSE_TYPE_CABLE\x10\x03\x12 \n" +
	"\x1cUSE_TYPE_CONDITIONALDOWNLOAD\x10\x04\x12$\n" +
	" USE_TYPE_CONTENTINFLUENCEDSTREAM\x10\x05\x12\x14\n" +
	"\x10USE_TYPE_DISPLAY\x10\x06\x12\x15\n" +
	"\x11USE_TYPE_DOWNLOAD\x10\a\x12\x10\n" +
	"\fUSE_TYPE_DUB\x10\b\x12$\n" +
	" USE_TYPE_DUBFORONDEMANDSTREAMING\x10\t\x12\"\n" +
	"\x1eUSE_TYPE_DUBFORLIVEPERFORMANCE\x10\n" +
	"\x12\x19\n" +
	"\x15USE_TYPE_DUBFORMOVIES\x10\v\x12\x1e\n" +
	"\x1aUSE_TYPE_DUBFORMUSICONHOLD\x10\f\x12$\n" +
	" USE_TYPE_DUBFORPUBLICPERFORMANCE\x10\r\x12\x18\n" +
	"\x14USE_TYPE_DUBFORRADIO\x10\x0e\x12\x15\n" +
	"\x11USE_TYPE_DUBFORTV\x10\x0f\x12\x1f\n" +
	"\x1bUSE_TYPE_EXTRACTFORINTERNET\x10\x10\x12\x1a\n" +
	"\x16USE_TYPE_KIOSKDOWNLOAD\x10\x11\x12\x17\n" +
	"\x13USE_TYPE_NARROWCAST\x10\x12\x12!\n" +
	"\x1dUSE_TYPE_NONINTERACTIVESTREAM\x10\x13\x12\x1b\n" +
	"\x17USE_TYPE_ONDEMANDSTREAM\x10\x14\x12\x14\n" +
	"\x10USE_TYPE_PERFORM\x10\x15\x12!\n" +
	"\x1dUSE_TYPE_PERFORMASMUSICONHOLD\x10\x16\x12%\n" +
	"!USE_TYPE_PERFORMINLIVEPERFORMANCE\x10\x17\x12\x1c\n" +
	"\x18USE_TYPE_PERFORMINPUBLIC\x10\x18\x12\x1e\n" +
	"\x1aUSE_TYPE_PERMANENTDOWNLOAD\x10\x19\x12\x15\n" +
	"\x11USE_TYPE_PLAYBACK\x10\x1a\x12\x19\n" +
	"\x15USE_TYPE_PLAYINPUBLIC\x10\x1b\x12\x14\n" +
	"\x10USE_TYPE_PODCAST\x10\x1c\x12\x12\n" +
	"\x0eUSE_TYPE_PRINT\x10\x1d\x12\x18\n" +
	"\x14USE_TYPE_PRIVATECOPY\x10\x1e\x12&\n" +
	"\"USE_TYPE_PURCHASEASPHYSICALPRODUCT\x10\x1f\x12\x11\n" +
	"\rUSE_TYPE_RENT\x10 \x12\x16\n" +
	"\x12USE_TYPE_SIMULCAST\x10!\x12\x13\n" +
	"\x0fUSE_TYPE_STREAM\x10\"\x12\x1d\n" +
	"\x19USE_TYPE_TETHEREDDOWNLOAD\x10#\x12!\n" +
	"\x1dUSE_TYPE_TIMEINFLUENCEDSTREAM\x10$\x12\x14\n" +
	"\x10USE_TYPE_UNKNOWN\x10%\x12\x10\n" +
	"\fUSE_TYPE_USE\x10&\x12\x1b\n" +
	"\x17USE_TYPE_USEASALERTTONE\x10'\x12\x18\n" +
	"\x14USE_TYPE_USEASDEVICE\x10(\x12\x19\n" +
	"\x15USE_TYPE_USEASKARAOKE\x10)\x12\x1e\n" +
	"\x1aUSE_TYPE_USEASRINGBACKTONE\x10*\x12\x1e\n" +
	"\x1aUSE_TYPE_USEASRINGBACKTUNE\x10+\x12\x1a\n" +
	"\x16USE_TYPE_USEASRINGTONE\x10,\x12\x1a\n" +
	"\x16USE_TYPE_USEASRINGTUNE\x10-\x12\x1d\n" +
	"\x19USE_TYPE_USEASSCREENSAVER\x10.\x12\x1b\n" +
	"\x17USE_TYPE_USEASVOICEMAIL\x10/\x12\x1b\n" +
	"\x17USE_TYPE_USEASWALLPAPER\x100\x12\x1d\n" +
	"\x19USE_TYPE_USEFORDATAMINING\x101\x12'\n" +
	"#USE_TYPE_USEFORTRAININGGENERATIVEAI\x102\x12!\n" +
	"\x1dUSE_TYPE_USEFORIDENTIFICATION\x103\x12*\n" +
	"&USE_TYPE_USEFORTRAININGNONGENERATIVEAI\x104\x12&\n" +
	"\"USE_TYPE_USEINMOBILEPHONEMESSAGING\x105\x12 \n" +
	"\x1cUSE_TYPE_USEINPHONELISTENING\x106\x12\x18\n" +
	"\x14USE_TYPE_USERDEFINED\x107\x12+\n" +
	"'USE_TYPE_USERMAKEAVAILABLELABELPROVIDED\x108\x12*\n" +
	"&USE_TYPE_USERMAKEAVAILABLEUSERPROVIDED\x109\x12\x14\n" +
	"\x10USE_TYPE_WEBCAST\x10:*\x9b\x01\n" +
	"\tUseTypeAR\x12\x1c\n" +
	"\x18USE_TYPE_A_R_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15USE_TYPE_A_R_DOWNLOAD\x10\x01\x12\x17\n" +
	"\x13USE_TYPE_A_R_STREAM\x10\x02\x12\x1e\n" +
	"\x1aUSE_TYPE_A_R_USEINPLAYLIST\x10\x03\x12\x1c\n" +
	"\x18USE_TYPE_A_R_USERDEFINED\x10\x04*\xb7\x11\n" +
	"\fUseTypeBWARM\x12\"\n" +
	"\x1eUSE_TYPE_B_W_A_R_M_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16USE_TYPE_B_W_A_R_M_ALL\x10\x01\x12$\n" +
	" USE_TYPE_B_W_A_R_M_ASPERCONTRACT\x10\x02\x12 \n" +
	"\x1cUSE_TYPE_B_W_A_R_M_BROADCAST\x10\x03\x12*\n" +
	"&USE_TYPE_B_W_A_R_M_CONDITIONALDOWNLOAD\x10\x04\x12.\n" +
	"*USE_TYPE_B_W_A_R_M_CONTENTINFLUENCEDSTREAM\x10\x05\x12\x1e\n" +
	"\x1aUSE_TYPE_B_W_A_R_M_DISPLAY\x10\x06\x12\x1f\n" +
	"\x1bUSE_TYPE_B_W_A_R_M_DOWNLOAD\x10\a\x12*\n" +
	"&USE_TYPE_B_W_A_R_M_DUBFORADVERTISEMENT\x10\b\x12,\n" +
	"(USE_TYPE_B_W_A_R_M_DUBFORLIVEPERFORMANCE\x10\t\x12#\n" +
	"\x1fUSE_TYPE_B_W_A_R_M_DUBFORMOVIES\x10\n" +
	"\x12(\n" +
	"$USE_TYPE_B_W_A_R_M_DUBFORMUSICONHOLD\x10\v\x12.\n" +
	"*USE_TYPE_B_W_A_R_M_DUBFORPUBLICPERFORMANCE\x10\f\x12\"\n" +
	"\x1eUSE_TYPE_B_W_A_R_M_DUBFORRADIO\x10\r\x12\x1f\n" +
	"\x1bUSE_TYPE_B_W_A_R_M_DUBFORTV\x10\x0e\x12)\n" +
	"%USE_TYPE_B_W_A_R_M_EXTRACTFORINTERNET\x10\x0f\x12$\n" +
	" USE_TYPE_B_W_A_R_M_KIOSKDOWNLOAD\x10\x10\x12!\n" +
	"\x1dUSE_TYPE_B_W_A_R_M_LIVESTREAM\x10\x11\x12!\n" +
	"\x1dUSE_TYPE_B_W_A_R_M_NARROWCAST\x10\x12\x12+\n" +
	"'USE_TYPE_B_W_A_R_M_NONINTERACTIVESTREAM\x10\x13\x12%\n" +
	"!USE_TYPE_B_W_A_R_M_ONDEMANDSTREAM\x10\x14\x12+\n" +
	"'USE_TYPE_B_W_A_R_M_PERFORMASMUSICONHOLD\x10\x15\x12/\n" +
	"+USE_TYPE_B_W_A_R_M_PERFORMINLIVEPERFORMANCE\x10\x16\x12&\n" +
	"\"USE_TYPE_B_W_A_R_M_PERFORMINPUBLIC\x10\x17\x12(\n" +
	"$USE_TYPE_B_W_A_R_M_PERMANENTDOWNLOAD\x10\x18\x12\x1f\n" +
	"\x1bUSE_TYPE_B_W_A_R_M_PLAYBACK\x10\x19\x12#\n" +
	"\x1fUSE_TYPE_B_W_A_R_M_PLAYINPUBLIC\x10\x1a\x12\x1e\n" +
	"\x1aUSE_TYPE_B_W_A_R_M_PODCAST\x10\x1b\x12\x1c\n" +
	"\x18USE_TYPE_B_W_A_R_M_PRINT\x10\x1c\x12\"\n" +
	"\x1eUSE_TYPE_B_W_A_R_M_PRIVATECOPY\x10\x1d\x12.\n" +
	"*USE_TYPE_B_W_A_R_M_PROGRAMMEDCONTENTSTREAM\x10\x1e\x120\n" +
	",USE_TYPE_B_W_A_R_M_PURCHASEASPHYSICALPRODUCT\x10\x1f\x12\x1b\n" +
	"\x17USE_TYPE_B_W_A_R_M_RENT\x10 \x12 \n" +
	"\x1cUSE_TYPE_B_W_A_R_M_SIMULCAST\x10!\x12\x1d\n" +
	"\x19USE_TYPE_B_W_A_R_M_STREAM\x10\"\x12'\n" +
	"#USE_TYPE_B_W_A_R_M_TETHEREDDOWNLOAD\x10#\x12+\n" +
	"'USE_TYPE_B_W_A_R_M_TIMEINFLUENCEDSTREAM\x10$\x12\x1e\n" +
	"\x1aUSE_TYPE_B_W_A_R_M_UNKNOWN\x10%\x12%\n" +
	"!USE_TYPE_B_W_A_R_M_USEASALERTTONE\x10&\x12\"\n" +
	"\x1eUSE_TYPE_B_W_A_R_M_USEASDEVICE\x10'\x12#\n" +
	"\x1fUSE_TYPE_B_W_A_R_M_USEASKARAOKE\x10(\x12(\n" +
	"$USE_TYPE_B_W_A_R_M_USEASRINGBACKTONE\x10)\x12(\n" +
	"$USE_TYPE_B_W_A_R_M_USEASRINGBACKTUNE\x10*\x12$\n" +
	" USE_TYPE_B_W_A_R_M_USEASRINGTONE\x10+\x12$\n" +
	" USE_TYPE_B_W_A_R_M_USEASRINGTUNE\x10,\x12'\n" +
	"#USE_TYPE_B_W_A_R_M_USEASSCREENSAVER\x10-\x12%\n" +
	"!USE_TYPE_B_W_A_R_M_USEASVOICEMAIL\x10.\x12%\n" +
	"!USE_TYPE_B_W_A_R_M_USEASWALLPAPER\x10/\x12+\n" +
	"'USE_TYPE_B_W_A_R_M_USEFORIDENTIFICATION\x100\x12(\n" +
	"$USE_TYPE_B_W_A_R_M_USEFORUGCCREATION\x101\x120\n" +
	",USE_TYPE_B_W_A_R_M_USEINMOBILEPHONEMESSAGING\x102\x12*\n" +
	"&USE_TYPE_B_W_A_R_M_USEINPHONELISTENING\x103\x12\"\n" +
	"\x1eUSE_TYPE_B_W_A_R_M_USERDEFINED\x104\x125\n" +
	"1USE_TYPE_B_W_A_R_M_USERMAKEAVAILABLELABELPROVIDED\x105\x124\n" +
	"0USE_TYPE_B_W_A_R_M_USERMAKEAVAILABLEUSERPROVIDED\x106\x12\x1e\n" +
	"\x1aUSE_TYPE_B_W_A_R_M_WEBCAST\x107*\xbd\x0f\n" +
	"\n" +
	"UseTypeDSR\x12\x1e\n" +
	"\x1aUSE_TYPE_D_S_R_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cUSE_TYPE_D_S_R_ASPERCONTRACT\x10\x01\x12\x1c\n" +
	"\x18USE_TYPE_D_S_R_BROADCAST\x10\x02\x12&\n" +
	"\"USE_TYPE_D_S_R_CONDITIONALDOWNLOAD\x10\x03\x12*\n" +
	"&USE_TYPE_D_S_R_CONTENTINFLUENCEDSTREAM\x10\x04\x12\x1a\n" +
	"\x16USE_TYPE_D_S_R_DISPLAY\x10\x05\x12\x1b\n" +
	"\x17USE_TYPE_D_S_R_DOWNLOAD\x10\x06\x12&\n" +
	"\"USE_TYPE_D_S_R_DUBFORADVERTISEMENT\x10\a\x12(\n" +
	"$USE_TYPE_D_S_R_DUBFORLIVEPERFORMANCE\x10\b\x12\x1f\n" +
	"\x1bUSE_TYPE_D_S_R_DUBFORMOVIES\x10\t\x12$\n" +
	" USE_TYPE_D_S_R_DUBFORMUSICONHOLD\x10\n" +
	"\x12*\n" +
	"&USE_TYPE_D_S_R_DUBFORPUBLICPERFORMANCE\x10\v\x12\x1e\n" +
	"\x1aUSE_TYPE_D_S_R_DUBFORRADIO\x10\f\x12\x1b\n" +
	"\x17USE_TYPE_D_S_R_DUBFORTV\x10\r\x12%\n" +
	"!USE_TYPE_D_S_R_EXTRACTFORINTERNET\x10\x0e\x12 \n" +
	"\x1cUSE_TYPE_D_S_R_KIOSKDOWNLOAD\x10\x0f\x12\x1d\n" +
	"\x19USE_TYPE_D_S_R_LIVESTREAM\x10\x10\x12\x1d\n" +
	"\x19USE_TYPE_D_S_R_NARROWCAST\x10\x11\x12'\n" +
	"#USE_TYPE_D_S_R_NONINTERACTIVESTREAM\x10\x12\x12!\n" +
	"\x1dUSE_TYPE_D_S_R_ONDEMANDSTREAM\x10\x13\x12'\n" +
	"#USE_TYPE_D_S_R_PERFORMASMUSICONHOLD\x10\x14\x12+\n" +
	"'USE_TYPE_D_S_R_PERFORMINLIVEPERFORMANCE\x10\x15\x12\"\n" +
	"\x1eUSE_TYPE_D_S_R_PERFORMINPUBLIC\x10\x16\x12$\n" +
	" USE_TYPE_D_S_R_PERMANENTDOWNLOAD\x10\x17\x12\x1b\n" +
	"\x17USE_TYPE_D_S_R_PLAYBACK\x10\x18\x12\x1f\n" +
	"\x1bUSE_TYPE_D_S_R_PLAYINPUBLIC\x10\x19\x12\x1a\n" +
	"\x16USE_TYPE_D_S_R_PODCAST\x10\x1a\x12\x18\n" +
	"\x14USE_TYPE_D_S_R_PRINT\x10\x1b\x12\x1e\n" +
	"\x1aUSE_TYPE_D_S_R_PRIVATECOPY\x10\x1c\x12*\n" +
	"&USE_TYPE_D_S_R_PROGRAMMEDCONTENTSTREAM\x10\x1d\x12,\n" +
	"(USE_TYPE_D_S_R_PURCHASEASPHYSICALPRODUCT\x10\x1e\x12\x17\n" +
	"\x13USE_TYPE_D_S_R_RENT\x10\x1f\x12\x1c\n" +
	"\x18USE_TYPE_D_S_R_SIMULCAST\x10 \x12\x19\n" +
	"\x15USE_TYPE_D_S_R_STREAM\x10!\x12#\n" +
	"\x1fUSE_TYPE_D_S_R_TETHEREDDOWNLOAD\x10\"\x12'\n" +
	"#USE_TYPE_D_S_R_TIMEINFLUENCEDSTREAM\x10#\x12\x1a\n" +
	"\x16USE_TYPE_D_S_R_UNKNOWN\x10$\x12!\n" +
	"\x1dUSE_TYPE_D_S_R_USEASALERTTONE\x10%\x12\x1e\n" +
	"\x1aUSE_TYPE_D_S_R_USEASDEVICE\x10&\x12\x1f\n" +
	"\x1bUSE_TYPE_D_S_R_USEASKARAOKE\x10'\x12$\n" +
	" USE_TYPE_D_S_R_USEASRINGBACKTONE\x10(\x12$\n" +
	" USE_TYPE_D_S_R_USEASRINGBACKTUNE\x10)\x12 \n" +
	"\x1cUSE_TYPE_D_S_R_USEASRINGTONE\x10*\x12 \n" +
	"\x1cUSE_TYPE_D_S_R_USEASRINGTUNE\x10+\x12#\n" +
	"\x1fUSE_TYPE_D_S_R_USEASSCREENSAVER\x10,\x12!\n" +
	"\x1dUSE_TYPE_D_S_R_USEASVOICEMAIL\x10-\x12!\n" +
	"\x1dUSE_TYPE_D_S_R_USEASWALLPAPER\x10.\x12'\n" +
	"#USE_TYPE_D_S_R_USEFORIDENTIFICATION\x10/\x12$\n" +
	" USE_TYPE_D_S_R_USEFORUGCCREATION\x100\x12,\n" +
	"(USE_TYPE_D_S_R_USEINMOBILEPHONEMESSAGING\x101\x12&\n" +
	"\"USE_TYPE_D_S_R_USEINPHONELISTENING\x102\x12\x1e\n" +
	"\x1aUSE_TYPE_D_S_R_USERDEFINED\x103\x121\n" +
	"-USE_TYPE_D_S_R_USERMAKEAVAILABLELABELPROVIDED\x104\x120\n" +
	",USE_TYPE_D_S_R_USERMAKEAVAILABLEUSERPROVIDED\x105\x12\x1a\n" +
	"\x16USE_TYPE_D_S_R_WEBCAST\x106*\xfe\x0f\n" +
	"\n" +
	"UseTypeERN\x12\x1e\n" +
	"\x1aUSE_TYPE_E_R_N_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18USE_TYPE_E_R_N_BROADCAST\x10\x01\x12\x18\n" +
	"\x14USE_TYPE_E_R_N_CABLE\x10\x02\x12&\n" +
	"\"USE_TYPE_E_R_N_CONDITIONALDOWNLOAD\x10\x03\x12*\n" +
	"&USE_TYPE_E_R_N_CONTENTINFLUENCEDSTREAM\x10\x04\x12\x1a\n" +
	"\x16USE_TYPE_E_R_N_DISPLAY\x10\x05\x12\x1b\n" +
	"\x17USE_TYPE_E_R_N_DOWNLOAD\x10\x06\x12\x16\n" +
	"\x12USE_TYPE_E_R_N_DUB\x10\a\x12*\n" +
	"&USE_TYPE_E_R_N_DUBFORONDEMANDSTREAMING\x10\b\x12(\n" +
	"$USE_TYPE_E_R_N_DUBFORLIVEPERFORMANCE\x10\t\x12\x1f\n" +
	"\x1bUSE_TYPE_E_R_N_DUBFORMOVIES\x10\n" +
	"\x12$\n" +
	" USE_TYPE_E_R_N_DUBFORMUSICONHOLD\x10\v\x12*\n" +
	"&USE_TYPE_E_R_N_DUBFORPUBLICPERFORMANCE\x10\f\x12\x1e\n" +
	"\x1aUSE_TYPE_E_R_N_DUBFORRADIO\x10\r\x12\x1b\n" +
	"\x17USE_TYPE_E_R_N_DUBFORTV\x10\x0e\x12%\n" +
	"!USE_TYPE_E_R_N_EXTRACTFORINTERNET\x10\x0f\x12 \n" +
	"\x1cUSE_TYPE_E_R_N_KIOSKDOWNLOAD\x10\x10\x12\x1d\n" +
	"\x19USE_TYPE_E_R_N_NARROWCAST\x10\x11\x12'\n" +
	"#USE_TYPE_E_R_N_NONINTERACTIVESTREAM\x10\x12\x12!\n" +
	"\x1dUSE_TYPE_E_R_N_ONDEMANDSTREAM\x10\x13\x12\x1a\n" +
	"\x16USE_TYPE_E_R_N_PERFORM\x10\x14\x12'\n" +
	"#USE_TYPE_E_R_N_PERFORMASMUSICONHOLD\x10\x15\x12+\n" +
	"'USE_TYPE_E_R_N_PERFORMINLIVEPERFORMANCE\x10\x16\x12\"\n" +
	"\x1eUSE_TYPE_E_R_N_PERFORMINPUBLIC\x10\x17\x12$\n" +
	" USE_TYPE_E_R_N_PERMANENTDOWNLOAD\x10\x18\x12\x1b\n" +
	"\x17USE_TYPE_E_R_N_PLAYBACK\x10\x19\x12\x1f\n" +
	"\x1bUSE_TYPE_E_R_N_PLAYINPUBLIC\x10\x1a\x12\x1a\n" +
	"\x16USE_TYPE_E_R_N_PODCAST\x10\x1b\x12\x18\n" +
	"\x14USE_TYPE_E_R_N_PRINT\x10\x1c\x12\x1e\n" +
	"\x1aUSE_TYPE_E_R_N_PRIVATECOPY\x10\x1d\x12,\n" +
	"(USE_TYPE_E_R_N_PURCHASEASPHYSICALPRODUCT\x10\x1e\x12\x17\n" +
	"\x13USE_TYPE_E_R_N_RENT\x10\x1f\x12\x1c\n" +
	"\x18USE_TYPE_E_R_N_SIMULCAST\x10 \x12\x19\n" +
	"\x15USE_TYPE_E_R_N_STREAM\x10!\x12#\n" +
	"\x1fUSE_TYPE_E_R_N_TETHEREDDOWNLOAD\x10\"\x12'\n" +
	"#USE_TYPE_E_R_N_TIMEINFLUENCEDSTREAM\x10#\x12\x16\n" +
	"\x12USE_TYPE_E_R_N_USE\x10$\x12!\n" +
	"\x1dUSE_TYPE_E_R_N_USEASALERTTONE\x10%\x12\x1e\n" +
	"\x1aUSE_TYPE_E_R_N_USEASDEVICE\x10&\x12\x1f\n" +
	"\x1bUSE_TYPE_E_R_N_USEASKARAOKE\x10'\x12$\n" +
	" USE_TYPE_E_R_N_USEASRINGBACKTONE\x10(\x12$\n" +
	" USE_TYPE_E_R_N_USEASRINGBACKTUNE\x10)\x12 \n" +
	"\x1cUSE_TYPE_E_R_N_USEASRINGTONE\x10*\x12 \n" +
	"\x1cUSE_TYPE_E_R_N_USEASRINGTUNE\x10+\x12#\n" +
	"\x1fUSE_TYPE_E_R_N_USEASSCREENSAVER\x10,\x12!\n" +
	"\x1dUSE_TYPE_E_R_N_USEASVOICEMAIL\x10-\x12!\n" +
	"\x1dUSE_TYPE_E_R_N_USEASWALLPAPER\x10.\x12#\n" +
	"\x1fUSE_TYPE_E_R_N_USEFORDATAMINING\x10/\x12-\n" +
	")USE_TYPE_E_R_N_USEFORTRAININGGENERATIVEAI\x100\x12'\n" +
	"#USE_TYPE_E_R_N_USEFORIDENTIFICATION\x101\x120\n" +
	",USE_TYPE_E_R_N_USEFORTRAININGNONGENERATIVEAI\x102\x12,\n" +
	"(USE_TYPE_E_R_N_USEINMOBILEPHONEMESSAGING\x103\x12&\n" +
	"\"USE_TYPE_E_R_N_USEINPHONELISTENING\x104\x12\x1e\n" +
	"\x1aUSE_TYPE_E_R_N_USERDEFINED\x105\x121\n" +
	"-USE_TYPE_E_R_N_USERMAKEAVAILABLELABELPROVIDED\x106\x120\n" +
	",USE_TYPE_E_R_N_USERMAKEAVAILABLEUSERPROVIDED\x107\x12\x1a\n" +
	"\x16USE_TYPE_E_R_N_WEBCAST\x108*\xd0\x01\n" +
	"\vUseTypeMWNL\x12 \n" +
	"\x1cUSE_TYPE_M_W_N_L_UNSPECIFIED\x10\x00\x12#\n" +
	"\x1fUSE_TYPE_M_W_N_L_ONDEMANDSTREAM\x10\x01\x12&\n" +
	"\"USE_TYPE_M_W_N_L_PERMANENTDOWNLOAD\x10\x02\x12.\n" +
	"*USE_TYPE_M_W_N_L_PURCHASEASPHYSICALPRODUCT\x10\x03\x12\"\n" +
	"\x1eUSE_TYPE_M_W_N_L_USEASRINGTONE\x10\x04*\x88\v\n" +
	"\n" +
	"UseTypeRDR\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12USE_TYPE_R_D_R_ALL\x10\x01\x12\x1c\n" +
	"\x18USE_TYPE_R_D_R_BROADCAST\x10\x02\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_BROADCASTRADIO\x10\x03\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_BROADCASTTV\x10\x04\x12&\n" +
	"\"USE_TYPE_R_D_R_CABLERETRANSMISSION\x10\x05\x12+\n" +
	"'USE_TYPE_R_D_R_CABLERETRANSMISSIONRADIO\x10\x06\x12(\n" +
	"$USE_TYPE_R_D_R_CABLERETRANSMISSIONTV\x10\a\x12\x1a\n" +
	"\x16USE_TYPE_R_D_R_CATCHUP\x10\b\x12\x1f\n" +
	"\x1bUSE_TYPE_R_D_R_CATCHUPRADIO\x10\t\x12\x1c\n" +
	"\x18USE_TYPE_R_D_R_CATCHUPTV\x10\n" +
	"\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_COMMERCIALRENT\x10\v\x12&\n" +
	"\"USE_TYPE_R_D_R_CONDITIONALDOWNLOAD\x10\f\x12\x1b\n" +
	"\x17USE_TYPE_R_D_R_DOWNLOAD\x10\r\x12\x16\n" +
	"\x12USE_TYPE_R_D_R_DUB\x10\x0e\x12%\n" +
	"!USE_TYPE_R_D_R_DUBFORDISTRIBUTION\x10\x0f\x12*\n" +
	"&USE_TYPE_R_D_R_DUBFORONDEMANDSTREAMING\x10\x10\x12*\n" +
	"&USE_TYPE_R_D_R_DUBFORPUBLICPERFORMANCE\x10\x11\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_DUBFORRADIO\x10\x12\x12\x1b\n" +
	"\x17USE_TYPE_R_D_R_DUBFORTV\x10\x13\x12\x17\n" +
	"\x13USE_TYPE_R_D_R_LEND\x10\x14\x12'\n" +
	"#USE_TYPE_R_D_R_NONINTERACTIVESTREAM\x10\x15\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_ONDEMANDSTREAM\x10\x16\x12\"\n" +
	"\x1eUSE_TYPE_R_D_R_PERFORMINPUBLIC\x10\x17\x12$\n" +
	" USE_TYPE_R_D_R_PERMANENTDOWNLOAD\x10\x18\x12\x1a\n" +
	"\x16USE_TYPE_R_D_R_PODCAST\x10\x19\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_PRIVATECOPY\x10\x1a\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_RETRANSMISSION\x10\x1b\x12\x1f\n" +
	"\x1bUSE_TYPE_R_D_R_RINGBACKTONE\x10\x1c\x12\x1c\n" +
	"\x18USE_TYPE_R_D_R_SIMULCAST\x10\x1d\x12!\n" +
	"\x1dUSE_TYPE_R_D_R_SIMULCASTRADIO\x10\x1e\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_SIMULCASTTV\x10\x1f\x12\x19\n" +
	"\x15USE_TYPE_R_D_R_STREAM\x10 \x12#\n" +
	"\x1fUSE_TYPE_R_D_R_USEFORDATAMINING\x10!\x125\n" +
	"1USE_TYPE_R_D_R_USEFOREDUCATIONANDORSOCIALPURPOSES\x10\"\x12-\n" +
	")USE_TYPE_R_D_R_USEFORTRAININGGENERATIVEAI\x10#\x12'\n" +
	"#USE_TYPE_R_D_R_USEFORIDENTIFICATION\x10$\x120\n" +
	",USE_TYPE_R_D_R_USEFORTRAININGNONGENERATIVEAI\x10%\x12\x1e\n" +
	"\x1aUSE_TYPE_R_D_R_USERDEFINED\x10&\x12\x1a\n" +
	"\x16USE_TYPE_R_D_R_WEBCAST\x10'*\xdc\x04\n" +
	"\x11UserInterfaceType\x12#\n" +
	"\x1fUSER_INTERFACE_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!USER_INTERFACE_TYPE_ASPERCONTRACT\x10\x01\x12'\n" +
	"#USER_INTERFACE_TYPE_CONNECTEDDEVICE\x10\x02\x12#\n" +
	"\x1fUSER_INTERFACE_TYPE_GAMECONSOLE\x10\x03\x12\x1f\n" +
	"\x1bUSER_INTERFACE_TYPE_JUKEBOX\x10\x04\x12&\n" +
	"\"USER_INTERFACE_TYPE_KARAOKEMACHINE\x10\x05\x12\x1d\n" +
	"\x19USER_INTERFACE_TYPE_KIOSK\x10\x06\x12+\n" +
	"'USER_INTERFACE_TYPE_LOCALSTORAGEJUKEBOX\x10\a\x12(\n" +
	"$USER_INTERFACE_TYPE_PERSONALCOMPUTER\x10\b\x12+\n" +
	"'USER_INTERFACE_TYPE_PHYSICALMEDIAWRITER\x10\t\x12&\n" +
	"\"USER_INTERFACE_TYPE_PORTABLEDEVICE\x10\n" +
	"\x12,\n" +
	"(USER_INTERFACE_TYPE_REMOTESTORAGEJUKEBOX\x10\v\x12%\n" +
	"!USER_INTERFACE_TYPE_SMARTSPEAKERS\x10\f\x12\x1f\n" +
	"\x1bUSER_INTERFACE_TYPE_UNKNOWN\x10\r\x12#\n" +
	"\x1fUSER_INTERFACE_TYPE_USERDEFINED\x10\x0e*\xe5\x04\n" +
	"\x14UserInterfaceTypeERN\x12)\n" +
	"%USER_INTERFACE_TYPE_E_R_N_UNSPECIFIED\x10\x00\x12-\n" +
	")USER_INTERFACE_TYPE_E_R_N_CONNECTEDDEVICE\x10\x01\x12)\n" +
	"%USER_INTERFACE_TYPE_E_R_N_GAMECONSOLE\x10\x02\x12%\n" +
	"!USER_INTERFACE_TYPE_E_R_N_JUKEBOX\x10\x03\x12,\n" +
	"(USER_INTERFACE_TYPE_E_R_N_KARAOKEMACHINE\x10\x04\x12#\n" +
	"\x1fUSER_INTERFACE_TYPE_E_R_N_KIOSK\x10\x05\x121\n" +
	"-USER_INTERFACE_TYPE_E_R_N_LOCALSTORAGEJUKEBOX\x10\x06\x12.\n" +
	"*USER_INTERFACE_TYPE_E_R_N_PERSONALCOMPUTER\x10\a\x121\n" +
	"-USER_INTERFACE_TYPE_E_R_N_PHYSICALMEDIAWRITER\x10\b\x12,\n" +
	"(USER_INTERFACE_TYPE_E_R_N_PORTABLEDEVICE\x10\t\x122\n" +
	".USER_INTERFACE_TYPE_E_R_N_REMOTESTORAGEJUKEBOX\x10\n" +
	"\x12+\n" +
	"'USER_INTERFACE_TYPE_E_R_N_SMARTSPEAKERS\x10\v\x12)\n" +
	"%USER_INTERFACE_TYPE_E_R_N_USERDEFINED\x10\f*\xcc\x04\n" +
	"\vVersionType\x12\x1c\n" +
	"\x18VERSION_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dVERSION_TYPE_ACAPPELLAVERSION\x10\x01\x12\x1d\n" +
	"\x19VERSION_TYPE_ALBUMVERSION\x10\x02\x12#\n" +
	"\x1fVERSION_TYPE_ALTERNATIVEVERSION\x10\x03\x12\x1d\n" +
	"\x19VERSION_TYPE_CLEANVERSION\x10\x04\x12\x1c\n" +
	"\x18VERSION_TYPE_DEMOVERSION\x10\x05\x12\x1e\n" +
	"\x1aVERSION_TYPE_EDITEDVERSION\x10\x06\x12$\n" +
	" VERSION_TYPE_INSTRUMENTALVERSION\x10\a\x12\x1f\n" +
	"\x1bVERSION_TYPE_KARAOKEVERSION\x10\b\x12\x1c\n" +
	"\x18VERSION_TYPE_LIVEVERSION\x10\t\x12\x1b\n" +
	"\x17VERSION_TYPE_MIXVERSION\x10\n" +
	"\x12\x1c\n" +
	"\x18VERSION_TYPE_MONOVERSION\x10\v\x12\x1d\n" +
	"\x19VERSION_TYPE_RADIOVERSION\x10\f\x12\x1d\n" +
	"\x19VERSION_TYPE_REMIXVERSION\x10\r\x12\x1f\n" +
	"\x1bVERSION_TYPE_SESSIONVERSION\x10\x0e\x12\x1e\n" +
	"\x1aVERSION_TYPE_SINGLEVERSION\x10\x0f\x12\x1e\n" +
	"\x1aVERSION_TYPE_STEREOVERSION\x10\x10\x12\x1c\n" +
	"\x18VERSION_TYPE_USERDEFINED\x10\x11*\x89\a\n" +
	"\x0fVersionTypeMWDR\x12$\n" +
	" VERSION_TYPE_M_W_D_R_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19VERSION_TYPE_M_W_D_R_E_3D\x10\x01\x12 \n" +
	"\x1cVERSION_TYPE_M_W_D_R_AIRLINE\x10\x02\x12\x1c\n" +
	"\x18VERSION_TYPE_M_W_D_R_APP\x10\x03\x12&\n" +
	"\"VERSION_TYPE_M_W_D_R_BLACKANDWHITE\x10\x04\x12\x1e\n" +
	"\x1aVERSION_TYPE_M_W_D_R_CABLE\x10\x05\x12\"\n" +
	"\x1eVERSION_TYPE_M_W_D_R_COLORIZED\x10\x06\x12%\n" +
	"!VERSION_TYPE_M_W_D_R_DIRECTORSCUT\x10\a\x12\x1c\n" +
	"\x18VERSION_TYPE_M_W_D_R_DSP\x10\b\x12!\n" +
	"\x1dVERSION_TYPE_M_W_D_R_DOMESTIC\x10\t\x12!\n" +
	"\x1dVERSION_TYPE_M_W_D_R_EXTENDED\x10\n" +
	"\x12\"\n" +
	"\x1eVERSION_TYPE_M_W_D_R_HOMEVIDEO\x10\v\x12!\n" +
	"\x1dVERSION_TYPE_M_W_D_R_INTERNET\x10\f\x12&\n" +
	"\"VERSION_TYPE_M_W_D_R_INTERNATIONAL\x10\r\x12#\n" +
	"\x1fVERSION_TYPE_M_W_D_R_MUSICVIDEO\x10\x0e\x12 \n" +
	"\x1cVERSION_TYPE_M_W_D_R_NETWORK\x10\x0f\x12#\n" +
	"\x1fVERSION_TYPE_M_W_D_R_NEWDUBBING\x10\x10\x12!\n" +
	"\x1dVERSION_TYPE_M_W_D_R_NEWMUSIC\x10\x11\x12!\n" +
	"\x1dVERSION_TYPE_M_W_D_R_ORIGINAL\x10\x12\x12!\n" +
	"\x1dVERSION_TYPE_M_W_D_R_RESTORED\x10\x13\x12\"\n" +
	"\x1eVERSION_TYPE_M_W_D_R_SHORTENED\x10\x14\x12$\n" +
	" VERSION_TYPE_M_W_D_R_SILENTMOVIE\x10\x15\x12#\n" +
	"\x1fVERSION_TYPE_M_W_D_R_SYNDICATED\x10\x16\x12#\n" +
	"\x1fVERSION_TYPE_M_W_D_R_THEATRICAL\x10\x17\x12\"\n" +
	"\x1eVERSION_TYPE_M_W_D_R_THEMEPARK\x10\x18*\xe7\x04\n" +
	"\x0eVideoCodecType\x12 \n" +
	"\x1cVIDEO_CODEC_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14VIDEO_CODEC_TYPE_AVC\x10\x01\x12\x1a\n" +
	"\x16VIDEO_CODEC_TYPE_H_261\x10\x02\x12\x1a\n" +
	"\x16VIDEO_CODEC_TYPE_H_263\x10\x03\x12\x19\n" +
	"\x15VIDEO_CODEC_TYPE_HEVC\x10\x04\x12\x1b\n" +
	"\x17VIDEO_CODEC_TYPE_MPEG_1\x10\x05\x12\x1b\n" +
	"\x17VIDEO_CODEC_TYPE_MPEG_2\x10\x06\x12\x1b\n" +
	"\x17VIDEO_CODEC_TYPE_MPEG_4\x10\a\x12\x1f\n" +
	"\x1bVIDEO_CODEC_TYPE_PRORES_422\x10\b\x12\"\n" +
	"\x1eVIDEO_CODEC_TYPE_PRORES_422_HQ\x10\t\x12\"\n" +
	"\x1eVIDEO_CODEC_TYPE_PRORES_422_LT\x10\n" +
	"\x12%\n" +
	"!VIDEO_CODEC_TYPE_PRORES_422_PROXY\x10\v\x12 \n" +
	"\x1cVIDEO_CODEC_TYPE_PRORES_4444\x10\f\x12#\n" +
	"\x1fVIDEO_CODEC_TYPE_PRORES_4444_XQ\x10\r\x12\x1e\n" +
	"\x1aVIDEO_CODEC_TYPE_REALVIDEO\x10\x0e\x12\x1e\n" +
	"\x1aVIDEO_CODEC_TYPE_SHOCKWAVE\x10\x0f\x12\x1c\n" +
	"\x18VIDEO_CODEC_TYPE_UNKNOWN\x10\x10\x12 \n" +
	"\x1cVIDEO_CODEC_TYPE_USERDEFINED\x10\x11\x12\x18\n" +
	"\x14VIDEO_CODEC_TYPE_WMV\x10\x12*\xbb\x01\n" +
	"\x13VideoDefinitionType\x12%\n" +
	"!VIDEO_DEFINITION_TYPE_UNSPECIFIED\x10\x00\x12(\n" +
	"$VIDEO_DEFINITION_TYPE_HIGHDEFINITION\x10\x01\x12,\n" +
	"(VIDEO_DEFINITION_TYPE_STANDARDDEFINITION\x10\x02\x12%\n" +
	"!VIDEO_DEFINITION_TYPE_USERDEFINED\x10\x03*\xa9\x01\n" +
	"\x16VideoDefinitionTypeDSR\x12+\n" +
	"'VIDEO_DEFINITION_TYPE_D_S_R_UNSPECIFIED\x10\x00\x12.\n" +
	"*VIDEO_DEFINITION_TYPE_D_S_R_HIGHDEFINITION\x10\x01\x122\n" +
	".VIDEO_DEFINITION_TYPE_D_S_R_STANDARDDEFINITION\x10\x02*\xed\x10\n" +
	"\tVideoType\x12\x1a\n" +
	"\x16VIDEO_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17VIDEO_TYPE_ADULTCONTENT\x10\x01\x12!\n" +
	"\x1dVIDEO_TYPE_ADVERTISEMENTVIDEO\x10\x02\x12\x1d\n" +
	"\x19VIDEO_TYPE_ADVICEMAGAZINE\x10\x03\x12\x18\n" +
	"\x14VIDEO_TYPE_ANIMATION\x10\x04\x12\x1a\n" +
	"\x16VIDEO_TYPE_BALLETVIDEO\x10\x05\x12\x1e\n" +
	"\x1aVIDEO_TYPE_BEHINDTHESCENES\x10\x06\x12!\n" +
	"\x1dVIDEO_TYPE_BLACKANDWHITEVIDEO\x10\a\x12\x1c\n" +
	"\x18VIDEO_TYPE_CHILDRENSFILM\x10\b\x12\x1d\n" +
	"\x19VIDEO_TYPE_COLORIZEDVIDEO\x10\t\x12\x1a\n" +
	"\x16VIDEO_TYPE_COLUMNVIDEO\x10\n" +
	"\x12\x1a\n" +
	"\x16VIDEO_TYPE_CONCERTCLIP\x10\v\x12\x1b\n" +
	"\x17VIDEO_TYPE_CONCERTVIDEO\x10\f\x12\x1c\n" +
	"\x18VIDEO_TYPE_CORPORATEFILM\x10\r\x12\x16\n" +
	"\x12VIDEO_TYPE_CREDITS\x10\x0e\x12\x1a\n" +
	"\x16VIDEO_TYPE_DOCUMENTARY\x10\x0f\x12\x1f\n" +
	"\x1bVIDEO_TYPE_EDUCATIONALVIDEO\x10\x10\x12\x16\n" +
	"\x12VIDEO_TYPE_EPISODE\x10\x11\x12\x1a\n" +
	"\x16VIDEO_TYPE_FEATUREFILM\x10\x12\x12\x16\n" +
	"\x12VIDEO_TYPE_FICTION\x10\x13\x12\x1f\n" +
	"\x1bVIDEO_TYPE_INFOMERCIALVIDEO\x10\x14\x12\x18\n" +
	"\x14VIDEO_TYPE_INTERVIEW\x10\x15\x12\x16\n" +
	"\x12VIDEO_TYPE_KARAOKE\x10\x16\x12\x1d\n" +
	"\x19VIDEO_TYPE_LIVEEVENTVIDEO\x10\x17\x12'\n" +
	"#VIDEO_TYPE_LONGFORMMUSICALWORKVIDEO\x10\x18\x12*\n" +
	"&VIDEO_TYPE_LONGFORMNONMUSICALWORKVIDEO\x10\x19\x12\x19\n" +
	"\x15VIDEO_TYPE_LYRICVIDEO\x10\x1a\x12\x17\n" +
	"\x13VIDEO_TYPE_MAGAZINE\x10\x1b\x12\x13\n" +
	"\x0fVIDEO_TYPE_MENU\x10\x1c\x12\x1e\n" +
	"\x1aVIDEO_TYPE_MULTIMEDIAVIDEO\x10\x1d\x12\x1e\n" +
	"\x1aVIDEO_TYPE_MUSICALWORKCLIP\x10\x1e\x12(\n" +
	"$VIDEO_TYPE_MUSICALWORKREADALONGVIDEO\x10\x1f\x12!\n" +
	"\x1dVIDEO_TYPE_MUSICALWORKTRAILER\x10 \x12&\n" +
	"\"VIDEO_TYPE_MUSICALWORKVIDEOCHAPTER\x10!\x12\x13\n" +
	"\x0fVIDEO_TYPE_NEWS\x10\"\x12!\n" +
	"\x1dVIDEO_TYPE_NONMUSICALWORKCLIP\x10#\x12+\n" +
	"'VIDEO_TYPE_NONMUSICALWORKREADALONGVIDEO\x10$\x12$\n" +
	" VIDEO_TYPE_NONMUSICALWORKTRAILER\x10%\x12)\n" +
	"%VIDEO_TYPE_NONMUSICALWORKVIDEOCHAPTER\x10&\x12,\n" +
	"(VIDEO_TYPE_NONSERIALAUDIOVISUALRECORDING\x10'\x12\x19\n" +
	"\x15VIDEO_TYPE_OPERAVIDEO\x10(\x12\x1a\n" +
	"\x16VIDEO_TYPE_PERFORMANCE\x10)\x12\x1d\n" +
	"\x19VIDEO_TYPE_READALONGVIDEO\x10*\x12!\n" +
	"\x1dVIDEO_TYPE_REALITYTVSHOWVIDEO\x10+\x12\x15\n" +
	"\x11VIDEO_TYPE_SEASON\x10,\x12)\n" +
	"%VIDEO_TYPE_SERIALAUDIOVISUALRECORDING\x10-\x12\x15\n" +
	"\x11VIDEO_TYPE_SERIES\x10.\x12\x18\n" +
	"\x14VIDEO_TYPE_SHORTFILM\x10/\x12\x1a\n" +
	"\x16VIDEO_TYPE_SILENTVIDEO\x100\x12\x1a\n" +
	"\x16VIDEO_TYPE_SKETCHVIDEO\x101\x12\x19\n" +
	"\x15VIDEO_TYPE_SOAPSITCOM\x102\x12\x1b\n" +
	"\x17VIDEO_TYPE_SPECIALEVENT\x103\x12\x14\n" +
	"\x10VIDEO_TYPE_SPORT\x104\x12\"\n" +
	"\x1eVIDEO_TYPE_THEATRICALWORKVIDEO\x105\x12\x1b\n" +
	"\x17VIDEO_TYPE_TRAILERVIDEO\x106\x12\x15\n" +
	"\x11VIDEO_TYPE_TVFILM\x107\x12\x18\n" +
	"\x14VIDEO_TYPE_TVPROGRAM\x108\x12\x1a\n" +
	"\x16VIDEO_TYPE_TVSHOWVIDEO\x109\x12\x16\n" +
	"\x12VIDEO_TYPE_UNKNOWN\x10:\x12\x1b\n" +
	"\x17VIDEO_TYPE_VIDEOCHAPTER\x10;\x12\x18\n" +
	"\x14VIDEO_TYPE_VIDEOCLIP\x10<\x12\x1a\n" +
	"\x16VIDEO_TYPE_VIDEOREPORT\x10=\x12\x18\n" +
	"\x14VIDEO_TYPE_VIDEOSTEM\x10>\x12\x14\n" +
	"\x10VIDEO_TYPE_DRAMA\x10?\x12$\n" +
	" VIDEO_TYPE_DRAMATICOMUSICALVIDEO\x10@\x12\"\n" +
	"\x1eVIDEO_TYPE_INTERACTIVERESOURCE\x10A\x12(\n" +
	"$VIDEO_TYPE_SHORTFORMMUSICALWORKVIDEO\x10B\x12+\n" +
	"'VIDEO_TYPE_SHORTFORMNONMUSICALWORKVIDEO\x10C\x12\x1a\n" +
	"\x16VIDEO_TYPE_USERDEFINED\x10D\x12\x1a\n" +
	"\x16VIDEO_TYPE_WEBRESOURCE\x10E*\xfb\x11\n" +
	"\fVideoTypeDSR\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dVIDEO_TYPE_D_S_R_ADULTCONTENT\x10\x01\x12'\n" +
	"#VIDEO_TYPE_D_S_R_ADVERTISEMENTVIDEO\x10\x02\x12#\n" +
	"\x1fVIDEO_TYPE_D_S_R_ADVICEMAGAZINE\x10\x03\x12\x1e\n" +
	"\x1aVIDEO_TYPE_D_S_R_ANIMATION\x10\x04\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_BALLETVIDEO\x10\x05\x12$\n" +
	" VIDEO_TYPE_D_S_R_BEHINDTHESCENES\x10\x06\x12'\n" +
	"#VIDEO_TYPE_D_S_R_BLACKANDWHITEVIDEO\x10\a\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_CHILDRENSFILM\x10\b\x12#\n" +
	"\x1fVIDEO_TYPE_D_S_R_COLORIZEDVIDEO\x10\t\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_COLUMNVIDEO\x10\n" +
	"\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_CONCERTCLIP\x10\v\x12!\n" +
	"\x1dVIDEO_TYPE_D_S_R_CONCERTVIDEO\x10\f\x12\"\n" +
	"\x1eVIDEO_TYPE_D_S_R_CORPORATEFILM\x10\r\x12\x1c\n" +
	"\x18VIDEO_TYPE_D_S_R_CREDITS\x10\x0e\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_DOCUMENTARY\x10\x0f\x12%\n" +
	"!VIDEO_TYPE_D_S_R_EDUCATIONALVIDEO\x10\x10\x12\x1c\n" +
	"\x18VIDEO_TYPE_D_S_R_EPISODE\x10\x11\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_FEATUREFILM\x10\x12\x12\x1c\n" +
	"\x18VIDEO_TYPE_D_S_R_FICTION\x10\x13\x12%\n" +
	"!VIDEO_TYPE_D_S_R_INFOMERCIALVIDEO\x10\x14\x12\x1e\n" +
	"\x1aVIDEO_TYPE_D_S_R_INTERVIEW\x10\x15\x12\x1c\n" +
	"\x18VIDEO_TYPE_D_S_R_KARAOKE\x10\x16\x12#\n" +
	"\x1fVIDEO_TYPE_D_S_R_LIVEEVENTVIDEO\x10\x17\x12-\n" +
	")VIDEO_TYPE_D_S_R_LONGFORMMUSICALWORKVIDEO\x10\x18\x120\n" +
	",VIDEO_TYPE_D_S_R_LONGFORMNONMUSICALWORKVIDEO\x10\x19\x12\x1f\n" +
	"\x1bVIDEO_TYPE_D_S_R_LYRICVIDEO\x10\x1a\x12\x1d\n" +
	"\x19VIDEO_TYPE_D_S_R_MAGAZINE\x10\x1b\x12\x19\n" +
	"\x15VIDEO_TYPE_D_S_R_MENU\x10\x1c\x12$\n" +
	" VIDEO_TYPE_D_S_R_MULTIMEDIAVIDEO\x10\x1d\x12$\n" +
	" VIDEO_TYPE_D_S_R_MUSICALWORKCLIP\x10\x1e\x12.\n" +
	"*VIDEO_TYPE_D_S_R_MUSICALWORKREADALONGVIDEO\x10\x1f\x12'\n" +
	"#VIDEO_TYPE_D_S_R_MUSICALWORKTRAILER\x10 \x12,\n" +
	"(VIDEO_TYPE_D_S_R_MUSICALWORKVIDEOCHAPTER\x10!\x12\x19\n" +
	"\x15VIDEO_TYPE_D_S_R_NEWS\x10\"\x12'\n" +
	"#VIDEO_TYPE_D_S_R_NONMUSICALWORKCLIP\x10#\x121\n" +
	"-VIDEO_TYPE_D_S_R_NONMUSICALWORKREADALONGVIDEO\x10$\x12*\n" +
	"&VIDEO_TYPE_D_S_R_NONMUSICALWORKTRAILER\x10%\x12/\n" +
	"+VIDEO_TYPE_D_S_R_NONMUSICALWORKVIDEOCHAPTER\x10&\x122\n" +
	".VIDEO_TYPE_D_S_R_NONSERIALAUDIOVISUALRECORDING\x10'\x12\x1f\n" +
	"\x1bVIDEO_TYPE_D_S_R_OPERAVIDEO\x10(\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_PERFORMANCE\x10)\x12#\n" +
	"\x1fVIDEO_TYPE_D_S_R_READALONGVIDEO\x10*\x12'\n" +
	"#VIDEO_TYPE_D_S_R_REALITYTVSHOWVIDEO\x10+\x12\x1b\n" +
	"\x17VIDEO_TYPE_D_S_R_SEASON\x10,\x12/\n" +
	"+VIDEO_TYPE_D_S_R_SERIALAUDIOVISUALRECORDING\x10-\x12\x1b\n" +
	"\x17VIDEO_TYPE_D_S_R_SERIES\x10.\x12\x1e\n" +
	"\x1aVIDEO_TYPE_D_S_R_SHORTFILM\x10/\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_SILENTVIDEO\x100\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_SKETCHVIDEO\x101\x12\x1f\n" +
	"\x1bVIDEO_TYPE_D_S_R_SOAPSITCOM\x102\x12!\n" +
	"\x1dVIDEO_TYPE_D_S_R_SPECIALEVENT\x103\x12\x1a\n" +
	"\x16VIDEO_TYPE_D_S_R_SPORT\x104\x12(\n" +
	"$VIDEO_TYPE_D_S_R_THEATRICALWORKVIDEO\x105\x12!\n" +
	"\x1dVIDEO_TYPE_D_S_R_TRAILERVIDEO\x106\x12\x1b\n" +
	"\x17VIDEO_TYPE_D_S_R_TVFILM\x107\x12\x1e\n" +
	"\x1aVIDEO_TYPE_D_S_R_TVPROGRAM\x108\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_TVSHOWVIDEO\x109\x12\x1c\n" +
	"\x18VIDEO_TYPE_D_S_R_UNKNOWN\x10:\x12!\n" +
	"\x1dVIDEO_TYPE_D_S_R_VIDEOCHAPTER\x10;\x12\x1e\n" +
	"\x1aVIDEO_TYPE_D_S_R_VIDEOCLIP\x10<\x12 \n" +
	"\x1cVIDEO_TYPE_D_S_R_VIDEOREPORT\x10=\x12\x1e\n" +
	"\x1aVIDEO_TYPE_D_S_R_VIDEOSTEM\x10>*\xe9\x02\n" +
	"\x0eVideoTypeERN43\x12\"\n" +
	"\x1eVIDEO_TYPE_E_R_N43_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17VIDEO_TYPE_E_R_N43_CLIP\x10\x01\x12&\n" +
	"\"VIDEO_TYPE_E_R_N43_FRONTCOVERVIDEO\x10\x02\x12/\n" +
	"+VIDEO_TYPE_E_R_N43_LONGFORMMUSICALWORKVIDEO\x10\x03\x122\n" +
	".VIDEO_TYPE_E_R_N43_LONGFORMNONMUSICALWORKVIDEO\x10\x04\x120\n" +
	",VIDEO_TYPE_E_R_N43_SHORTFORMMUSICALWORKVIDEO\x10\x05\x123\n" +
	"/VIDEO_TYPE_E_R_N43_SHORTFORMNONMUSICALWORKVIDEO\x10\x06\x12\"\n" +
	"\x1eVIDEO_TYPE_E_R_N43_USERDEFINED\x10\a*\xb0\x01\n" +
	"\x14VisualPerceptionType\x12&\n" +
	"\"VISUAL_PERCEPTION_TYPE_UNSPECIFIED\x10\x00\x12%\n" +
	"!VISUAL_PERCEPTION_TYPE_BACKGROUND\x10\x01\x12&\n" +
	"\"VISUAL_PERCEPTION_TYPE_USERDEFINED\x10\x02\x12!\n" +
	"\x1dVISUAL_PERCEPTION_TYPE_VISUAL\x10\x03*v\n" +
	"\tVocalType\x12\x1a\n" +
	"\x16VOCAL_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17VOCAL_TYPE_INSTRUMENTAL\x10\x01\x12\x1a\n" +
	"\x16VOCAL_TYPE_USERDEFINED\x10\x02\x12\x14\n" +
	"\x10VOCAL_TYPE_VOCAL\x10\x03*p\n" +
	"\bWorkPart\x12\x19\n" +
	"\x15WORK_PART_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10WORK_PART_LYRICS\x10\x01\x12\x1d\n" +
	"\x19WORK_PART_LYRICSANDMELODY\x10\x02\x12\x14\n" +
	"\x10WORK_PART_MELODY\x10\x03*\x85\x02\n" +
	"\x18WorkRelationshipTypeMWDR\x12.\n" +
	"*WORK_RELATIONSHIP_TYPE_M_W_D_R_UNSPECIFIED\x10\x00\x12+\n" +
	"'WORK_RELATIONSHIP_TYPE_M_W_D_R_CONTAINS\x10\x01\x120\n" +
	",WORK_RELATIONSHIP_TYPE_M_W_D_R_ISCONTAINEDIN\x10\x02\x12*\n" +
	"&WORK_RELATIONSHIP_TYPE_M_W_D_R_UNKNOWN\x10\x03\x12.\n" +
	"*WORK_RELATIONSHIP_TYPE_M_W_D_R_USERDEFINED\x10\x04*^\n" +
	"\bWorkType\x12\x19\n" +
	"\x15WORK_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17WORK_TYPE_GRAPHICALWORK\x10\x01\x12\x1a\n" +
	"\x16WORK_TYPE_LITERARYWORK\x10\x02B\x9e\x01\n" +
	"\x11com.ddex.mead.v11B\tMeadProtoP\x01Z(github.com/alecsavvy/ddex-go/gen/meadv11\xa2\x02\x03DMX\xaa\x02\rDdex.Mead.V11\xca\x02\rDdex\\Mead\\V11\xe2\x02\x19Ddex\\Mead\\V11\\GPBMetadata\xea\x02\x0fDdex::Mead::V11b\x06proto3"

var (
	file_meadv11_mead_proto_rawDescOnce sync.Once
	file_meadv11_mead_proto_rawDescData []byte
)

func file_meadv11_mead_proto_rawDescGZIP() []byte {
	file_meadv11_mead_proto_rawDescOnce.Do(func() {
		file_meadv11_mead_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meadv11_mead_proto_rawDesc), len(file_meadv11_mead_proto_rawDesc)))
	})
	return file_meadv11_mead_proto_rawDescData
}

var file_meadv11_mead_proto_enumTypes = make([]protoimpl.EnumInfo, 261)
var file_meadv11_mead_proto_msgTypes = make([]protoimpl.MessageInfo, 152)
var file_meadv11_mead_proto_goTypes = []any{
	(AdditionalContributorRole)(0),                 // 0: ddex.mead.v11.AdditionalContributorRole
	(AdditionalRightsClaimStatus)(0),               // 1: ddex.mead.v11.AdditionalRightsClaimStatus
	(AdditionalTitleType)(0),                       // 2: ddex.mead.v11.AdditionalTitleType
	(AdditionalVideoType)(0),                       // 3: ddex.mead.v11.AdditionalVideoType
	(AdministratingRecordCompanyRole)(0),           // 4: ddex.mead.v11.AdministratingRecordCompanyRole
	(AffiliationType)(0),                           // 5: ddex.mead.v11.AffiliationType
	(AllIsoTerritoryCode)(0),                       // 6: ddex.mead.v11.AllIsoTerritoryCode
	(AllTerritoryCodeNoWorldwide)(0),               // 7: ddex.mead.v11.AllTerritoryCodeNoWorldwide
	(ArAcknowledgementStatus)(0),                   // 8: ddex.mead.v11.ArAcknowledgementStatus
	(ArActionType)(0),                              // 9: ddex.mead.v11.ArActionType
	(ArtistRole)(0),                                // 10: ddex.mead.v11.ArtistRole
	(ArtistType)(0),                                // 11: ddex.mead.v11.ArtistType
	(AspectRatioType)(0),                           // 12: ddex.mead.v11.AspectRatioType
	(AsserterType)(0),                              // 13: ddex.mead.v11.AsserterType
	(AssertionStatus)(0),                           // 14: ddex.mead.v11.AssertionStatus
	(AudioCodecType)(0),                            // 15: ddex.mead.v11.AudioCodecType
	(AudioVisualType)(0),                           // 16: ddex.mead.v11.AudioVisualType
	(BasisForRevenueAllocation)(0),                 // 17: ddex.mead.v11.BasisForRevenueAllocation
	(BinaryDataType)(0),                            // 18: ddex.mead.v11.BinaryDataType
	(Blockchain)(0),                                // 19: ddex.mead.v11.Blockchain
	(BusinessMusicalWorkContributorRole)(0),        // 20: ddex.mead.v11.BusinessMusicalWorkContributorRole
	(CarrierType)(0),                               // 21: ddex.mead.v11.CarrierType
	(CatalogTransferAcknowledgementStatus)(0),      // 22: ddex.mead.v11.CatalogTransferAcknowledgementStatus
	(CatalogTransferStatus)(0),                     // 23: ddex.mead.v11.CatalogTransferStatus
	(CatalogTransferType)(0),                       // 24: ddex.mead.v11.CatalogTransferType
	(CdProtectionType)(0),                          // 25: ddex.mead.v11.CdProtectionType
	(CharacterType)(0),                             // 26: ddex.mead.v11.CharacterType
	(ClaimBasis)(0),                                // 27: ddex.mead.v11.ClaimBasis
	(ClaimImpact)(0),                               // 28: ddex.mead.v11.ClaimImpact
	(ClaimStatus)(0),                               // 29: ddex.mead.v11.ClaimStatus
	(ClassifiedGenre)(0),                           // 30: ddex.mead.v11.ClassifiedGenre
	(ClipType)(0),                                  // 31: ddex.mead.v11.ClipType
	(CodingType)(0),                                // 32: ddex.mead.v11.CodingType
	(CollectionMandateType)(0),                     // 33: ddex.mead.v11.CollectionMandateType
	(CommercialModelType)(0),                       // 34: ddex.mead.v11.CommercialModelType
	(CommercialModelTypeERN)(0),                    // 35: ddex.mead.v11.CommercialModelTypeERN
	(CommercialModelTypeMWNL)(0),                   // 36: ddex.mead.v11.CommercialModelTypeMWNL
	(CompilationType)(0),                           // 37: ddex.mead.v11.CompilationType
	(CompositeMusicalWorkType)(0),                  // 38: ddex.mead.v11.CompositeMusicalWorkType
	(Confidentiality)(0),                           // 39: ddex.mead.v11.Confidentiality
	(ConsumerEngagementAnomalyType)(0),             // 40: ddex.mead.v11.ConsumerEngagementAnomalyType
	(ContainerFormat)(0),                           // 41: ddex.mead.v11.ContainerFormat
	(ContainsAI)(0),                                // 42: ddex.mead.v11.ContainsAI
	(ContributorClaimStatus)(0),                    // 43: ddex.mead.v11.ContributorClaimStatus
	(ContributorRole)(0),                           // 44: ddex.mead.v11.ContributorRole
	(ContributorRoleRDR)(0),                        // 45: ddex.mead.v11.ContributorRoleRDR
	(CreationType)(0),                              // 46: ddex.mead.v11.CreationType
	(CreativeMusicalWorkContributorRole)(0),        // 47: ddex.mead.v11.CreativeMusicalWorkContributorRole
	(CtProposedActionType)(0),                      // 48: ddex.mead.v11.CtProposedActionType
	(CueOrigin)(0),                                 // 49: ddex.mead.v11.CueOrigin
	(CueSheetType)(0),                              // 50: ddex.mead.v11.CueSheetType
	(CueUseType)(0),                                // 51: ddex.mead.v11.CueUseType
	(CueUseTypeMWDR)(0),                            // 52: ddex.mead.v11.CueUseTypeMWDR
	(CurrencyCode)(0),                              // 53: ddex.mead.v11.CurrencyCode
	(DataCarrierFormat)(0),                         // 54: ddex.mead.v11.DataCarrierFormat
	(DataCarrierType)(0),                           // 55: ddex.mead.v11.DataCarrierType
	(DdexTerritoryCode)(0),                         // 56: ddex.mead.v11.DdexTerritoryCode
	(DdexTerritoryCodeNoWorldwide)(0),              // 57: ddex.mead.v11.DdexTerritoryCodeNoWorldwide
	(DeliveryFileType)(0),                          // 58: ddex.mead.v11.DeliveryFileType
	(DeprecatedCurrencyCode)(0),                    // 59: ddex.mead.v11.DeprecatedCurrencyCode
	(DeprecatedIsoTerritoryCode)(0),                // 60: ddex.mead.v11.DeprecatedIsoTerritoryCode
	(DeprecatedReleaseType)(0),                     // 61: ddex.mead.v11.DeprecatedReleaseType
	(DigitizationMode)(0),                          // 62: ddex.mead.v11.DigitizationMode
	(DiscrepancyType)(0),                           // 63: ddex.mead.v11.DiscrepancyType
	(DisplayArtistRole)(0),                         // 64: ddex.mead.v11.DisplayArtistRole
	(DisplayArtistRoleRDR)(0),                      // 65: ddex.mead.v11.DisplayArtistRoleRDR
	(DistributionChannelType)(0),                   // 66: ddex.mead.v11.DistributionChannelType
	(DistributionClass)(0),                         // 67: ddex.mead.v11.DistributionClass
	(DocumentTypeLoD)(0),                           // 68: ddex.mead.v11.DocumentTypeLoD
	(DocumentTypeMWL)(0),                           // 69: ddex.mead.v11.DocumentTypeMWL
	(DpidStatus)(0),                                // 70: ddex.mead.v11.DpidStatus
	(DrmEnforcementType)(0),                        // 71: ddex.mead.v11.DrmEnforcementType
	(EditionType)(0),                               // 72: ddex.mead.v11.EditionType
	(ElectroOpticalTransferFunctionType)(0),        // 73: ddex.mead.v11.ElectroOpticalTransferFunctionType
	(ElementConfiguration)(0),                      // 74: ddex.mead.v11.ElementConfiguration
	(ElementDesignation)(0),                        // 75: ddex.mead.v11.ElementDesignation
	(EncodingType)(0),                              // 76: ddex.mead.v11.EncodingType
	(EquipmentManufacturer)(0),                     // 77: ddex.mead.v11.EquipmentManufacturer
	(EquipmentModel)(0),                            // 78: ddex.mead.v11.EquipmentModel
	(EquipmentType)(0),                             // 79: ddex.mead.v11.EquipmentType
	(ErnMessageType)(0),                            // 80: ddex.mead.v11.ErnMessageType
	(ErnTestMessageType)(0),                        // 81: ddex.mead.v11.ErnTestMessageType
	(ErncFileStatus)(0),                            // 82: ddex.mead.v11.ErncFileStatus
	(ErncProposedActionType)(0),                    // 83: ddex.mead.v11.ErncProposedActionType
	(ErrorSeverity)(0),                             // 84: ddex.mead.v11.ErrorSeverity
	(ErrorType)(0),                                 // 85: ddex.mead.v11.ErrorType
	(EventType)(0),                                 // 86: ddex.mead.v11.EventType
	(ExceptionReason)(0),                           // 87: ddex.mead.v11.ExceptionReason
	(ExpressionType)(0),                            // 88: ddex.mead.v11.ExpressionType
	(ExternallyLinkedResourceType)(0),              // 89: ddex.mead.v11.ExternallyLinkedResourceType
	(FileType)(0),                                  // 90: ddex.mead.v11.FileType
	(FingerprintAlgorithmType)(0),                  // 91: ddex.mead.v11.FingerprintAlgorithmType
	(FrameRate)(0),                                 // 92: ddex.mead.v11.FrameRate
	(Gender)(0),                                    // 93: ddex.mead.v11.Gender
	(GenderPIE)(0),                                 // 94: ddex.mead.v11.GenderPIE
	(GoverningAgreementType)(0),                    // 95: ddex.mead.v11.GoverningAgreementType
	(HdrVideoDynamicMetadataType)(0),               // 96: ddex.mead.v11.HdrVideoDynamicMetadataType
	(HdrVideoStaticMetadataType)(0),                // 97: ddex.mead.v11.HdrVideoStaticMetadataType
	(ImageCodecType)(0),                            // 98: ddex.mead.v11.ImageCodecType
	(InstrumentManufacturer)(0),                    // 99: ddex.mead.v11.InstrumentManufacturer
	(InstrumentModel)(0),                           // 100: ddex.mead.v11.InstrumentModel
	(InstrumentType)(0),                            // 101: ddex.mead.v11.InstrumentType
	(Iso31661TerritoryCode)(0),                     // 102: ddex.mead.v11.Iso31661TerritoryCode
	(Iso639Part12LanguageCode)(0),                  // 103: ddex.mead.v11.Iso639Part12LanguageCode
	(Iso639Part3LanguageCode)(0),                   // 104: ddex.mead.v11.Iso639Part3LanguageCode
	(IsoCurrencyCode)(0),                           // 105: ddex.mead.v11.IsoCurrencyCode
	(IsoLanguageCode)(0),                           // 106: ddex.mead.v11.IsoLanguageCode
	(IsoTerritoryCode)(0),                          // 107: ddex.mead.v11.IsoTerritoryCode
	(IswcStatus)(0),                                // 108: ddex.mead.v11.IswcStatus
	(LabelNameType)(0),                             // 109: ddex.mead.v11.LabelNameType
	(LabelType)(0),                                 // 110: ddex.mead.v11.LabelType
	(LanguageLocalizationType)(0),                  // 111: ddex.mead.v11.LanguageLocalizationType
	(LicenseRecord)(0),                             // 112: ddex.mead.v11.LicenseRecord
	(LicenseRefusalReason)(0),                      // 113: ddex.mead.v11.LicenseRefusalReason
	(LicenseRejectionReason)(0),                    // 114: ddex.mead.v11.LicenseRejectionReason
	(LinkAcknowledgementStatus)(0),                 // 115: ddex.mead.v11.LinkAcknowledgementStatus
	(LinkDescription)(0),                           // 116: ddex.mead.v11.LinkDescription
	(LyricsType)(0),                                // 117: ddex.mead.v11.LyricsType
	(MeasurementType)(0),                           // 118: ddex.mead.v11.MeasurementType
	(MembershipType)(0),                            // 119: ddex.mead.v11.MembershipType
	(MessageActionType)(0),                         // 120: ddex.mead.v11.MessageActionType
	(MessageControlType)(0),                        // 121: ddex.mead.v11.MessageControlType
	(MessagePurpose)(0),                            // 122: ddex.mead.v11.MessagePurpose
	(MessageType)(0),                               // 123: ddex.mead.v11.MessageType
	(MissingLinkReason)(0),                         // 124: ddex.mead.v11.MissingLinkReason
	(MoodOrThemeType)(0),                           // 125: ddex.mead.v11.MoodOrThemeType
	(MusicalWorkContributorRole)(0),                // 126: ddex.mead.v11.MusicalWorkContributorRole
	(MusicalWorkType)(0),                           // 127: ddex.mead.v11.MusicalWorkType
	(MwnlFileStatus)(0),                            // 128: ddex.mead.v11.MwnlFileStatus
	(MwnlProposedActionType)(0),                    // 129: ddex.mead.v11.MwnlProposedActionType
	(NewStudioRole)(0),                             // 130: ddex.mead.v11.NewStudioRole
	(NftConfirmationStatus)(0),                     // 131: ddex.mead.v11.NftConfirmationStatus
	(OperatingSystemType)(0),                       // 132: ddex.mead.v11.OperatingSystemType
	(OriginalPurpose)(0),                           // 133: ddex.mead.v11.OriginalPurpose
	(PLineType)(0),                                 // 134: ddex.mead.v11.PLineType
	(ParentalWarningStandard)(0),                   // 135: ddex.mead.v11.ParentalWarningStandard
	(ParentalWarningType)(0),                       // 136: ddex.mead.v11.ParentalWarningType
	(PartyNameFormat)(0),                           // 137: ddex.mead.v11.PartyNameFormat
	(PartyNamePurpose)(0),                          // 138: ddex.mead.v11.PartyNamePurpose
	(PartyNameType)(0),                             // 139: ddex.mead.v11.PartyNameType
	(PartyRelationshipType)(0),                     // 140: ddex.mead.v11.PartyRelationshipType
	(PartyRelationshipTypePIE)(0),                  // 141: ddex.mead.v11.PartyRelationshipTypePIE
	(PartyRole)(0),                                 // 142: ddex.mead.v11.PartyRole
	(PartyType)(0),                                 // 143: ddex.mead.v11.PartyType
	(PendingReason)(0),                             // 144: ddex.mead.v11.PendingReason
	(PercentageType)(0),                            // 145: ddex.mead.v11.PercentageType
	(PhysicalCarrierType)(0),                       // 146: ddex.mead.v11.PhysicalCarrierType
	(PriceInformationType)(0),                      // 147: ddex.mead.v11.PriceInformationType
	(PrimaryColorType)(0),                          // 148: ddex.mead.v11.PrimaryColorType
	(ProductType)(0),                               // 149: ddex.mead.v11.ProductType
	(ProfileId)(0),                                 // 150: ddex.mead.v11.ProfileId
	(ProfileIdCDM)(0),                              // 151: ddex.mead.v11.ProfileIdCDM
	(ProfileIdMWDR)(0),                             // 152: ddex.mead.v11.ProfileIdMWDR
	(ProfileType)(0),                               // 153: ddex.mead.v11.ProfileType
	(Purpose)(0),                                   // 154: ddex.mead.v11.Purpose
	(RatingAgency)(0),                              // 155: ddex.mead.v11.RatingAgency
	(RatingReason)(0),                              // 156: ddex.mead.v11.RatingReason
	(RdrMessageType)(0),                            // 157: ddex.mead.v11.RdrMessageType
	(RdrcBatchStatus)(0),                           // 158: ddex.mead.v11.RdrcBatchStatus
	(RdrcFileStatus)(0),                            // 159: ddex.mead.v11.RdrcFileStatus
	(ReasonForNameChange)(0),                       // 160: ddex.mead.v11.ReasonForNameChange
	(RecipientRevenueType)(0),                      // 161: ddex.mead.v11.RecipientRevenueType
	(RecipientRevenueTypeRDR)(0),                   // 162: ddex.mead.v11.RecipientRevenueTypeRDR
	(RecordingFormat)(0),                           // 163: ddex.mead.v11.RecordingFormat
	(RecordingMode)(0),                             // 164: ddex.mead.v11.RecordingMode
	(ReferenceCreation)(0),                         // 165: ddex.mead.v11.ReferenceCreation
	(ReferenceUnit)(0),                             // 166: ddex.mead.v11.ReferenceUnit
	(RegistrationStatus)(0),                        // 167: ddex.mead.v11.RegistrationStatus
	(RejectionReason)(0),                           // 168: ddex.mead.v11.RejectionReason
	(RelationalRelator)(0),                         // 169: ddex.mead.v11.RelationalRelator
	(ReleaseProfileVariantVersionId)(0),            // 170: ddex.mead.v11.ReleaseProfileVariantVersionId
	(ReleaseProfileVersionId)(0),                   // 171: ddex.mead.v11.ReleaseProfileVersionId
	(ReleaseRelationshipType)(0),                   // 172: ddex.mead.v11.ReleaseRelationshipType
	(ReleaseResourceType)(0),                       // 173: ddex.mead.v11.ReleaseResourceType
	(ReleaseType)(0),                               // 174: ddex.mead.v11.ReleaseType
	(ReleaseTypeDSR)(0),                            // 175: ddex.mead.v11.ReleaseTypeDSR
	(ReleaseTypeERN4)(0),                           // 176: ddex.mead.v11.ReleaseTypeERN4
	(ReleaseTypeMCNOTIF)(0),                        // 177: ddex.mead.v11.ReleaseTypeMCNOTIF
	(ReportMessageType)(0),                         // 178: ddex.mead.v11.ReportMessageType
	(RequestMessagePurpose)(0),                     // 179: ddex.mead.v11.RequestMessagePurpose
	(RequestReason)(0),                             // 180: ddex.mead.v11.RequestReason
	(ResourceGroupType)(0),                         // 181: ddex.mead.v11.ResourceGroupType
	(ResourceType)(0),                              // 182: ddex.mead.v11.ResourceType
	(ResourceTypeCustomSet)(0),                     // 183: ddex.mead.v11.ResourceTypeCustomSet
	(ResourceTypeMCNOTIF)(0),                       // 184: ddex.mead.v11.ResourceTypeMCNOTIF
	(ResourceTypeRDR)(0),                           // 185: ddex.mead.v11.ResourceTypeRDR
	(ResourceWorkRelationshipType)(0),              // 186: ddex.mead.v11.ResourceWorkRelationshipType
	(ResponseType)(0),                              // 187: ddex.mead.v11.ResponseType
	(RevenueAllocationType)(0),                     // 188: ddex.mead.v11.RevenueAllocationType
	(RevenueSourceType)(0),                         // 189: ddex.mead.v11.RevenueSourceType
	(RevocationReason)(0),                          // 190: ddex.mead.v11.RevocationReason
	(RightShareType)(0),                            // 191: ddex.mead.v11.RightShareType
	(RightShareTypeMWDR)(0),                        // 192: ddex.mead.v11.RightShareTypeMWDR
	(RightsClaimPolicyReason)(0),                   // 193: ddex.mead.v11.RightsClaimPolicyReason
	(RightsClaimPolicyType)(0),                     // 194: ddex.mead.v11.RightsClaimPolicyType
	(RightsClaimStatus)(0),                         // 195: ddex.mead.v11.RightsClaimStatus
	(RightsControlType)(0),                         // 196: ddex.mead.v11.RightsControlType
	(RightsControllerRole)(0),                      // 197: ddex.mead.v11.RightsControllerRole
	(RightsControllerType)(0),                      // 198: ddex.mead.v11.RightsControllerType
	(RightsCoverage)(0),                            // 199: ddex.mead.v11.RightsCoverage
	(RightsCoverageMWDR)(0),                        // 200: ddex.mead.v11.RightsCoverageMWDR
	(RightsStatementProfile)(0),                    // 201: ddex.mead.v11.RightsStatementProfile
	(RinFileStatus)(0),                             // 202: ddex.mead.v11.RinFileStatus
	(RinMessageType)(0),                            // 203: ddex.mead.v11.RinMessageType
	(RinProposedActionType)(0),                     // 204: ddex.mead.v11.RinProposedActionType
	(RoyaltyRateCalculationType)(0),                // 205: ddex.mead.v11.RoyaltyRateCalculationType
	(RoyaltyRateType)(0),                           // 206: ddex.mead.v11.RoyaltyRateType
	(SheetMusicCodecType)(0),                       // 207: ddex.mead.v11.SheetMusicCodecType
	(SheetMusicType)(0),                            // 208: ddex.mead.v11.SheetMusicType
	(SoftwareType)(0),                              // 209: ddex.mead.v11.SoftwareType
	(SoundRecordingType)(0),                        // 210: ddex.mead.v11.SoundRecordingType
	(SpecialContributorType)(0),                    // 211: ddex.mead.v11.SpecialContributorType
	(Status)(0),                                    // 212: ddex.mead.v11.Status
	(SubGenre)(0),                                  // 213: ddex.mead.v11.SubGenre
	(SubTitleType)(0),                              // 214: ddex.mead.v11.SubTitleType
	(SummaryType)(0),                               // 215: ddex.mead.v11.SummaryType
	(SupplyChainStatus)(0),                         // 216: ddex.mead.v11.SupplyChainStatus
	(Tempo)(0),                                     // 217: ddex.mead.v11.Tempo
	(TerritoryCode)(0),                             // 218: ddex.mead.v11.TerritoryCode
	(TerritoryCodeType)(0),                         // 219: ddex.mead.v11.TerritoryCodeType
	(TerritoryCodeTypeIncludingDeprecatedCodes)(0), // 220: ddex.mead.v11.TerritoryCodeTypeIncludingDeprecatedCodes
	(TextCodecType)(0),                             // 221: ddex.mead.v11.TextCodecType
	(TextMusicRelationshipType)(0),                 // 222: ddex.mead.v11.TextMusicRelationshipType
	(TextType)(0),                                  // 223: ddex.mead.v11.TextType
	(TextTypeATOM)(0),                              // 224: ddex.mead.v11.TextTypeATOM
	(ThemeType)(0),                                 // 225: ddex.mead.v11.ThemeType
	(TimecodeType)(0),                              // 226: ddex.mead.v11.TimecodeType
	(TisTerritoryCode)(0),                          // 227: ddex.mead.v11.TisTerritoryCode
	(TitleType)(0),                                 // 228: ddex.mead.v11.TitleType
	(TransferCategory)(0),                          // 229: ddex.mead.v11.TransferCategory
	(TransferType)(0),                              // 230: ddex.mead.v11.TransferType
	(UnitOfBitRate)(0),                             // 231: ddex.mead.v11.UnitOfBitRate
	(UnitOfConditionValue)(0),                      // 232: ddex.mead.v11.UnitOfConditionValue
	(UnitOfCuePoints)(0),                           // 233: ddex.mead.v11.UnitOfCuePoints
	(UnitOfDuration)(0),                            // 234: ddex.mead.v11.UnitOfDuration
	(UnitOfExtent)(0),                              // 235: ddex.mead.v11.UnitOfExtent
	(UnitOfFrameRate)(0),                           // 236: ddex.mead.v11.UnitOfFrameRate
	(UnitOfFrequency)(0),                           // 237: ddex.mead.v11.UnitOfFrequency
	(UnitTypeForRevenueAllocation)(0),              // 238: ddex.mead.v11.UnitTypeForRevenueAllocation
	(UseType)(0),                                   // 239: ddex.mead.v11.UseType
	(UseTypeAR)(0),                                 // 240: ddex.mead.v11.UseTypeAR
	(UseTypeBWARM)(0),                              // 241: ddex.mead.v11.UseTypeBWARM
	(UseTypeDSR)(0),                                // 242: ddex.mead.v11.UseTypeDSR
	(UseTypeERN)(0),                                // 243: ddex.mead.v11.UseTypeERN
	(UseTypeMWNL)(0),                               // 244: ddex.mead.v11.UseTypeMWNL
	(UseTypeRDR)(0),                                // 245: ddex.mead.v11.UseTypeRDR
	(UserInterfaceType)(0),                         // 246: ddex.mead.v11.UserInterfaceType
	(UserInterfaceTypeERN)(0),                      // 247: ddex.mead.v11.UserInterfaceTypeERN
	(VersionType)(0),                               // 248: ddex.mead.v11.VersionType
	(VersionTypeMWDR)(0),                           // 249: ddex.mead.v11.VersionTypeMWDR
	(VideoCodecType)(0),                            // 250: ddex.mead.v11.VideoCodecType
	(VideoDefinitionType)(0),                       // 251: ddex.mead.v11.VideoDefinitionType
	(VideoDefinitionTypeDSR)(0),                    // 252: ddex.mead.v11.VideoDefinitionTypeDSR
	(VideoType)(0),                                 // 253: ddex.mead.v11.VideoType
	(VideoTypeDSR)(0),                              // 254: ddex.mead.v11.VideoTypeDSR
	(VideoTypeERN43)(0),                            // 255: ddex.mead.v11.VideoTypeERN43
	(VisualPerceptionType)(0),                      // 256: ddex.mead.v11.VisualPerceptionType
	(VocalType)(0),                                 // 257: ddex.mead.v11.VocalType
	(WorkPart)(0),                                  // 258: ddex.mead.v11.WorkPart
	(WorkRelationshipTypeMWDR)(0),                  // 259: ddex.mead.v11.WorkRelationshipTypeMWDR
	(WorkType)(0),                                  // 260: ddex.mead.v11.WorkType
	(*MeadMessage)(nil),                            // 261: ddex.mead.v11.MeadMessage
	(*Feed)(nil),                                   // 262: ddex.mead.v11.Feed
	(*AbsolutePitch)(nil),                          // 263: ddex.mead.v11.AbsolutePitch
	(*Activity)(nil),                               // 264: ddex.mead.v11.Activity
	(*ActivityValue)(nil),                          // 265: ddex.mead.v11.ActivityValue
	(*AlternativeTitle)(nil),                       // 266: ddex.mead.v11.AlternativeTitle
	(*Annotation)(nil),                             // 267: ddex.mead.v11.Annotation
	(*ArtisticStyle)(nil),                          // 268: ddex.mead.v11.ArtisticStyle
	(*BeatsPerMinute)(nil),                         // 269: ddex.mead.v11.BeatsPerMinute
	(*ChildWorkHierarchy)(nil),                     // 270: ddex.mead.v11.ChildWorkHierarchy
	(*Contributor)(nil),                            // 271: ddex.mead.v11.Contributor
	(*DanceStyle)(nil),                             // 272: ddex.mead.v11.DanceStyle
	(*DanceStyleValue)(nil),                        // 273: ddex.mead.v11.DanceStyleValue
	(*DerivedRecording)(nil),                       // 274: ddex.mead.v11.DerivedRecording
	(*DisplaySubTitle)(nil),                        // 275: ddex.mead.v11.DisplaySubTitle
	(*DisplayTitle)(nil),                           // 276: ddex.mead.v11.DisplayTitle
	(*Entry)(nil),                                  // 277: ddex.mead.v11.Entry
	(*Flag)(nil),                                   // 278: ddex.mead.v11.Flag
	(*Form)(nil),                                   // 279: ddex.mead.v11.Form
	(*FormValue)(nil),                              // 280: ddex.mead.v11.FormValue
	(*GenreCategory)(nil),                          // 281: ddex.mead.v11.GenreCategory
	(*Harmony)(nil),                                // 282: ddex.mead.v11.Harmony
	(*HarmonyModulation)(nil),                      // 283: ddex.mead.v11.HarmonyModulation
	(*ImpactDate)(nil),                             // 284: ddex.mead.v11.ImpactDate
	(*Instrument)(nil),                             // 285: ddex.mead.v11.Instrument
	(*InstrumentUsed)(nil),                         // 286: ddex.mead.v11.InstrumentUsed
	(*InstrumentValue)(nil),                        // 287: ddex.mead.v11.InstrumentValue
	(*Intensity)(nil),                              // 288: ddex.mead.v11.Intensity
	(*IntensityValue)(nil),                         // 289: ddex.mead.v11.IntensityValue
	(*LocationAndDateOfSession)(nil),               // 290: ddex.mead.v11.LocationAndDateOfSession
	(*Lyrics)(nil),                                 // 291: ddex.mead.v11.Lyrics
	(*LyricsText)(nil),                             // 292: ddex.mead.v11.LyricsText
	(*Meter)(nil),                                  // 293: ddex.mead.v11.Meter
	(*Mode)(nil),                                   // 294: ddex.mead.v11.Mode
	(*Modulation)(nil),                             // 295: ddex.mead.v11.Modulation
	(*Mood)(nil),                                   // 296: ddex.mead.v11.Mood
	(*MoodValue)(nil),                              // 297: ddex.mead.v11.MoodValue
	(*Party)(nil),                                  // 298: ddex.mead.v11.Party
	(*RecordingPart)(nil),                          // 299: ddex.mead.v11.RecordingPart
	(*RelatedWork)(nil),                            // 300: ddex.mead.v11.RelatedWork
	(*ReleaseInformation)(nil),                     // 301: ddex.mead.v11.ReleaseInformation
	(*ReleaseInformationList)(nil),                 // 302: ddex.mead.v11.ReleaseInformationList
	(*ReleaseSummary)(nil),                         // 303: ddex.mead.v11.ReleaseSummary
	(*RelevantResource)(nil),                       // 304: ddex.mead.v11.RelevantResource
	(*ResourceInformation)(nil),                    // 305: ddex.mead.v11.ResourceInformation
	(*ResourceInformationList)(nil),                // 306: ddex.mead.v11.ResourceInformationList
	(*ResourceRelationship)(nil),                   // 307: ddex.mead.v11.ResourceRelationship
	(*ResourceSummary)(nil),                        // 308: ddex.mead.v11.ResourceSummary
	(*RhythmStyle)(nil),                            // 309: ddex.mead.v11.RhythmStyle
	(*RhythmStyleValue)(nil),                       // 310: ddex.mead.v11.RhythmStyleValue
	(*RootChordNote)(nil),                          // 311: ddex.mead.v11.RootChordNote
	(*RootChordQuality)(nil),                       // 312: ddex.mead.v11.RootChordQuality
	(*Sample)(nil),                                 // 313: ddex.mead.v11.Sample
	(*SampleFeature)(nil),                          // 314: ddex.mead.v11.SampleFeature
	(*SimilarRelease)(nil),                         // 315: ddex.mead.v11.SimilarRelease
	(*SimilarResource)(nil),                        // 316: ddex.mead.v11.SimilarResource
	(*SimilarWork)(nil),                            // 317: ddex.mead.v11.SimilarWork
	(*SubGenreCategory)(nil),                       // 318: ddex.mead.v11.SubGenreCategory
	(*TempoValue)(nil),                             // 319: ddex.mead.v11.TempoValue
	(*Theme)(nil),                                  // 320: ddex.mead.v11.Theme
	(*ThemeValue)(nil),                             // 321: ddex.mead.v11.ThemeValue
	(*TimeSignature)(nil),                          // 322: ddex.mead.v11.TimeSignature
	(*TimeSignatureModulation)(nil),                // 323: ddex.mead.v11.TimeSignatureModulation
	(*Usage)(nil),                                  // 324: ddex.mead.v11.Usage
	(*UsagePeriod)(nil),                            // 325: ddex.mead.v11.UsagePeriod
	(*UsedMusicalWork)(nil),                        // 326: ddex.mead.v11.UsedMusicalWork
	(*WorkHierarchy)(nil),                          // 327: ddex.mead.v11.WorkHierarchy
	(*WorkInformation)(nil),                        // 328: ddex.mead.v11.WorkInformation
	(*WorkInformationList)(nil),                    // 329: ddex.mead.v11.WorkInformationList
	(*WorkSummary)(nil),                            // 330: ddex.mead.v11.WorkSummary
	(*Category)(nil),                               // 331: ddex.mead.v11.Category
	(*Content)(nil),                                // 332: ddex.mead.v11.Content
	(*DateTime)(nil),                               // 333: ddex.mead.v11.DateTime
	(*Generator)(nil),                              // 334: ddex.mead.v11.Generator
	(*Icon)(nil),                                   // 335: ddex.mead.v11.Icon
	(*Id)(nil),                                     // 336: ddex.mead.v11.Id
	(*Link)(nil),                                   // 337: ddex.mead.v11.Link
	(*Logo)(nil),                                   // 338: ddex.mead.v11.Logo
	(*Person)(nil),                                 // 339: ddex.mead.v11.Person
	(*Source)(nil),                                 // 340: ddex.mead.v11.Source
	(*Text)(nil),                                   // 341: ddex.mead.v11.Text
	(*URI)(nil),                                    // 342: ddex.mead.v11.URI
	(*AllTerritoryCode)(nil),                       // 343: ddex.mead.v11.AllTerritoryCode
	(*ArtistTypeValue)(nil),                        // 344: ddex.mead.v11.ArtistTypeValue
	(*ArtisticInfluence)(nil),                      // 345: ddex.mead.v11.ArtisticInfluence
	(*Award)(nil),                                  // 346: ddex.mead.v11.Award
	(*CatalogNumber)(nil),                          // 347: ddex.mead.v11.CatalogNumber
	(*ChartEntry)(nil),                             // 348: ddex.mead.v11.ChartEntry
	(*ClassicalPeriod)(nil),                        // 349: ddex.mead.v11.ClassicalPeriod
	(*CommentaryNote)(nil),                         // 350: ddex.mead.v11.CommentaryNote
	(*CommentaryNoteType)(nil),                     // 351: ddex.mead.v11.CommentaryNoteType
	(*CurrentTerritoryCode)(nil),                   // 352: ddex.mead.v11.CurrentTerritoryCode
	(*Date)(nil),                                   // 353: ddex.mead.v11.Date
	(*DetailedHashSum)(nil),                        // 354: ddex.mead.v11.DetailedHashSum
	(*DetailedPartyId)(nil),                        // 355: ddex.mead.v11.DetailedPartyId
	(*DisplayArtistNameWithDefault)(nil),           // 356: ddex.mead.v11.DisplayArtistNameWithDefault
	(*DisplayArtistNameWithPronunciation)(nil),     // 357: ddex.mead.v11.DisplayArtistNameWithPronunciation
	(*Duration)(nil),                               // 358: ddex.mead.v11.Duration
	(*Epoch)(nil),                                  // 359: ddex.mead.v11.Epoch
	(*EventDate)(nil),                              // 360: ddex.mead.v11.EventDate
	(*EventDateTime)(nil),                          // 361: ddex.mead.v11.EventDateTime
	(*File)(nil),                                   // 362: ddex.mead.v11.File
	(*Focus)(nil),                                  // 363: ddex.mead.v11.Focus
	(*GenreCategoryValue)(nil),                     // 364: ddex.mead.v11.GenreCategoryValue
	(*HashSumAlgorithmType)(nil),                   // 365: ddex.mead.v11.HashSumAlgorithmType
	(*HistoricChartingInformation)(nil),            // 366: ddex.mead.v11.HistoricChartingInformation
	(*Image)(nil),                                  // 367: ddex.mead.v11.Image
	(*ImageType)(nil),                              // 368: ddex.mead.v11.ImageType
	(*MessageAuditTrail)(nil),                      // 369: ddex.mead.v11.MessageAuditTrail
	(*MessageAuditTrailEvent)(nil),                 // 370: ddex.mead.v11.MessageAuditTrailEvent
	(*MessageHeader)(nil),                          // 371: ddex.mead.v11.MessageHeader
	(*MessagingPartyWithoutCode)(nil),              // 372: ddex.mead.v11.MessagingPartyWithoutCode
	(*MetadataSource)(nil),                         // 373: ddex.mead.v11.MetadataSource
	(*MetadataSourceList)(nil),                     // 374: ddex.mead.v11.MetadataSourceList
	(*MetadataSourceReference)(nil),                // 375: ddex.mead.v11.MetadataSourceReference
	(*MetadataSourceType)(nil),                     // 376: ddex.mead.v11.MetadataSourceType
	(*MusicalWorkIdWithoutFlag)(nil),               // 377: ddex.mead.v11.MusicalWorkIdWithoutFlag
	(*Name)(nil),                                   // 378: ddex.mead.v11.Name
	(*NameWithPronunciationAndScriptCode)(nil),     // 379: ddex.mead.v11.NameWithPronunciationAndScriptCode
	(*PartyDescriptorWithPronunciation)(nil),       // 380: ddex.mead.v11.PartyDescriptorWithPronunciation
	(*PartyNameWithPronunciation)(nil),             // 381: ddex.mead.v11.PartyNameWithPronunciation
	(*PartyNameWithoutCode)(nil),                   // 382: ddex.mead.v11.PartyNameWithoutCode
	(*Period)(nil),                                 // 383: ddex.mead.v11.Period
	(*PeriodValue)(nil),                            // 384: ddex.mead.v11.PeriodValue
	(*PeriodWithTime)(nil),                         // 385: ddex.mead.v11.PeriodWithTime
	(*Pronunciation)(nil),                          // 386: ddex.mead.v11.Pronunciation
	(*ProprietaryId)(nil),                          // 387: ddex.mead.v11.ProprietaryId
	(*RecordingPartType)(nil),                      // 388: ddex.mead.v11.RecordingPartType
	(*RelatedCreation)(nil),                        // 389: ddex.mead.v11.RelatedCreation
	(*RelatedResourceType)(nil),                    // 390: ddex.mead.v11.RelatedResourceType
	(*Release)(nil),                                // 391: ddex.mead.v11.Release
	(*ReleaseId)(nil),                              // 392: ddex.mead.v11.ReleaseId
	(*ReleaseTitle)(nil),                           // 393: ddex.mead.v11.ReleaseTitle
	(*Resource)(nil),                               // 394: ddex.mead.v11.Resource
	(*ResourceContributorRole)(nil),                // 395: ddex.mead.v11.ResourceContributorRole
	(*ResourceIdWithoutFlag)(nil),                  // 396: ddex.mead.v11.ResourceIdWithoutFlag
	(*ResourceRelationshipType)(nil),               // 397: ddex.mead.v11.ResourceRelationshipType
	(*ResourceTitle)(nil),                          // 398: ddex.mead.v11.ResourceTitle
	(*SessionType)(nil),                            // 399: ddex.mead.v11.SessionType
	(*SubGenreCategoryValue)(nil),                  // 400: ddex.mead.v11.SubGenreCategoryValue
	(*TextWithFormat)(nil),                         // 401: ddex.mead.v11.TextWithFormat
	(*TextWithoutTerritory)(nil),                   // 402: ddex.mead.v11.TextWithoutTerritory
	(*TitleText)(nil),                              // 403: ddex.mead.v11.TitleText
	(*TitleWithPronunciation)(nil),                 // 404: ddex.mead.v11.TitleWithPronunciation
	(*Venue)(nil),                                  // 405: ddex.mead.v11.Venue
	(*VocalRegister)(nil),                          // 406: ddex.mead.v11.VocalRegister
	(*VocalRegisterValue)(nil),                     // 407: ddex.mead.v11.VocalRegisterValue
	(*Work)(nil),                                   // 408: ddex.mead.v11.Work
	(*WorkRelationshipType)(nil),                   // 409: ddex.mead.v11.WorkRelationshipType
	(*WorkTitle)(nil),                              // 410: ddex.mead.v11.WorkTitle
	(*EventDateWithoutFlags)(nil),                  // 411: ddex.mead.v11.EventDateWithoutFlags
	(*Timing)(nil),                                 // 412: ddex.mead.v11.Timing
}
var file_meadv11_mead_proto_depIdxs = []int32{
	371, // 0: ddex.mead.v11.MeadMessage.message_header:type_name -> ddex.mead.v11.MessageHeader
	374, // 1: ddex.mead.v11.MeadMessage.metadata_source_list:type_name -> ddex.mead.v11.MetadataSourceList
	329, // 2: ddex.mead.v11.MeadMessage.work_information_list:type_name -> ddex.mead.v11.WorkInformationList
	306, // 3: ddex.mead.v11.MeadMessage.resource_information_list:type_name -> ddex.mead.v11.ResourceInformationList
	302, // 4: ddex.mead.v11.MeadMessage.release_information_list:type_name -> ddex.mead.v11.ReleaseInformationList
	339, // 5: ddex.mead.v11.Feed.author:type_name -> ddex.mead.v11.Person
	331, // 6: ddex.mead.v11.Feed.category:type_name -> ddex.mead.v11.Category
	339, // 7: ddex.mead.v11.Feed.contributor:type_name -> ddex.mead.v11.Person
	334, // 8: ddex.mead.v11.Feed.generator:type_name -> ddex.mead.v11.Generator
	335, // 9: ddex.mead.v11.Feed.icon:type_name -> ddex.mead.v11.Icon
	336, // 10: ddex.mead.v11.Feed.id:type_name -> ddex.mead.v11.Id
	337, // 11: ddex.mead.v11.Feed.link:type_name -> ddex.mead.v11.Link
	338, // 12: ddex.mead.v11.Feed.logo:type_name -> ddex.mead.v11.Logo
	341, // 13: ddex.mead.v11.Feed.rights:type_name -> ddex.mead.v11.Text
	341, // 14: ddex.mead.v11.Feed.subtitle:type_name -> ddex.mead.v11.Text
	341, // 15: ddex.mead.v11.Feed.title:type_name -> ddex.mead.v11.Text
	333, // 16: ddex.mead.v11.Feed.updated:type_name -> ddex.mead.v11.DateTime
	277, // 17: ddex.mead.v11.Feed.entry:type_name -> ddex.mead.v11.Entry
	375, // 18: ddex.mead.v11.AbsolutePitch.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	295, // 19: ddex.mead.v11.AbsolutePitch.modulation:type_name -> ddex.mead.v11.Modulation
	375, // 20: ddex.mead.v11.Activity.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	265, // 21: ddex.mead.v11.Activity.value:type_name -> ddex.mead.v11.ActivityValue
	402, // 22: ddex.mead.v11.Activity.description:type_name -> ddex.mead.v11.TextWithoutTerritory
	352, // 23: ddex.mead.v11.Activity.territory_of_activity_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	375, // 24: ddex.mead.v11.AlternativeTitle.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	403, // 25: ddex.mead.v11.AlternativeTitle.title_text:type_name -> ddex.mead.v11.TitleText
	403, // 26: ddex.mead.v11.AlternativeTitle.sub_title:type_name -> ddex.mead.v11.TitleText
	228, // 27: ddex.mead.v11.AlternativeTitle.title_type:type_name -> ddex.mead.v11.TitleType
	375, // 28: ddex.mead.v11.Annotation.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	401, // 29: ddex.mead.v11.Annotation.text:type_name -> ddex.mead.v11.TextWithFormat
	375, // 30: ddex.mead.v11.ArtisticStyle.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	344, // 31: ddex.mead.v11.ArtisticStyle.value:type_name -> ddex.mead.v11.ArtistTypeValue
	352, // 32: ddex.mead.v11.ArtisticStyle.territory_of_artistic_style_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	375, // 33: ddex.mead.v11.BeatsPerMinute.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	295, // 34: ddex.mead.v11.BeatsPerMinute.modulation:type_name -> ddex.mead.v11.Modulation
	377, // 35: ddex.mead.v11.ChildWorkHierarchy.work_id:type_name -> ddex.mead.v11.MusicalWorkIdWithoutFlag
	410, // 36: ddex.mead.v11.ChildWorkHierarchy.work_title:type_name -> ddex.mead.v11.WorkTitle
	270, // 37: ddex.mead.v11.ChildWorkHierarchy.child:type_name -> ddex.mead.v11.ChildWorkHierarchy
	279, // 38: ddex.mead.v11.ChildWorkHierarchy.form:type_name -> ddex.mead.v11.Form
	355, // 39: ddex.mead.v11.Contributor.identifier:type_name -> ddex.mead.v11.DetailedPartyId
	381, // 40: ddex.mead.v11.Contributor.name:type_name -> ddex.mead.v11.PartyNameWithPronunciation
	395, // 41: ddex.mead.v11.Contributor.role:type_name -> ddex.mead.v11.ResourceContributorRole
	375, // 42: ddex.mead.v11.DanceStyle.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	273, // 43: ddex.mead.v11.DanceStyle.value:type_name -> ddex.mead.v11.DanceStyleValue
	402, // 44: ddex.mead.v11.DanceStyle.description:type_name -> ddex.mead.v11.TextWithoutTerritory
	352, // 45: ddex.mead.v11.DanceStyle.territory_of_dance_style_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	375, // 46: ddex.mead.v11.DerivedRecording.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	396, // 47: ddex.mead.v11.DerivedRecording.resource_id:type_name -> ddex.mead.v11.ResourceIdWithoutFlag
	390, // 48: ddex.mead.v11.DerivedRecording.related_resource_type:type_name -> ddex.mead.v11.RelatedResourceType
	404, // 49: ddex.mead.v11.DerivedRecording.title:type_name -> ddex.mead.v11.TitleWithPronunciation
	357, // 50: ddex.mead.v11.DerivedRecording.display_artist_name:type_name -> ddex.mead.v11.DisplayArtistNameWithPronunciation
	380, // 51: ddex.mead.v11.DerivedRecording.display_artist:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	386, // 52: ddex.mead.v11.DisplaySubTitle.pronunciation:type_name -> ddex.mead.v11.Pronunciation
	403, // 53: ddex.mead.v11.DisplayTitle.title_text:type_name -> ddex.mead.v11.TitleText
	275, // 54: ddex.mead.v11.DisplayTitle.sub_title:type_name -> ddex.mead.v11.DisplaySubTitle
	352, // 55: ddex.mead.v11.DisplayTitle.applicable_territory_code:type_name -> ddex.mead.v11.CurrentTerritoryCode
	339, // 56: ddex.mead.v11.Entry.author:type_name -> ddex.mead.v11.Person
	331, // 57: ddex.mead.v11.Entry.category:type_name -> ddex.mead.v11.Category
	332, // 58: ddex.mead.v11.Entry.content:type_name -> ddex.mead.v11.Content
	339, // 59: ddex.mead.v11.Entry.contributor:type_name -> ddex.mead.v11.Person
	336, // 60: ddex.mead.v11.Entry.id:type_name -> ddex.mead.v11.Id
	337, // 61: ddex.mead.v11.Entry.link:type_name -> ddex.mead.v11.Link
	333, // 62: ddex.mead.v11.Entry.published:type_name -> ddex.mead.v11.DateTime
	341, // 63: ddex.mead.v11.Entry.rights:type_name -> ddex.mead.v11.Text
	340, // 64: ddex.mead.v11.Entry.source:type_name -> ddex.mead.v11.Source
	341, // 65: ddex.mead.v11.Entry.summary:type_name -> ddex.mead.v11.Text
	341, // 66: ddex.mead.v11.Entry.title:type_name -> ddex.mead.v11.Text
	333, // 67: ddex.mead.v11.Entry.updated:type_name -> ddex.mead.v11.DateTime
	375, // 68: ddex.mead.v11.Flag.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	375, // 69: ddex.mead.v11.Form.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	280, // 70: ddex.mead.v11.Form.value:type_name -> ddex.mead.v11.FormValue
	375, // 71: ddex.mead.v11.GenreCategory.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	352, // 72: ddex.mead.v11.GenreCategory.territory_of_genre_category_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	364, // 73: ddex.mead.v11.GenreCategory.value:type_name -> ddex.mead.v11.GenreCategoryValue
	402, // 74: ddex.mead.v11.GenreCategory.description:type_name -> ddex.mead.v11.TextWithoutTerritory
	375, // 75: ddex.mead.v11.Harmony.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	311, // 76: ddex.mead.v11.Harmony.root_chord_note:type_name -> ddex.mead.v11.RootChordNote
	312, // 77: ddex.mead.v11.Harmony.root_chord_quality:type_name -> ddex.mead.v11.RootChordQuality
	294, // 78: ddex.mead.v11.Harmony.mode:type_name -> ddex.mead.v11.Mode
	283, // 79: ddex.mead.v11.Harmony.modulation:type_name -> ddex.mead.v11.HarmonyModulation
	311, // 80: ddex.mead.v11.HarmonyModulation.root_chord_note:type_name -> ddex.mead.v11.RootChordNote
	312, // 81: ddex.mead.v11.HarmonyModulation.root_chord_quality:type_name -> ddex.mead.v11.RootChordQuality
	294, // 82: ddex.mead.v11.HarmonyModulation.mode:type_name -> ddex.mead.v11.Mode
	352, // 83: ddex.mead.v11.ImpactDate.territory_code:type_name -> ddex.mead.v11.CurrentTerritoryCode
	375, // 84: ddex.mead.v11.Instrument.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	287, // 85: ddex.mead.v11.Instrument.value:type_name -> ddex.mead.v11.InstrumentValue
	375, // 86: ddex.mead.v11.InstrumentUsed.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	287, // 87: ddex.mead.v11.InstrumentUsed.value:type_name -> ddex.mead.v11.InstrumentValue
	375, // 88: ddex.mead.v11.Intensity.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	289, // 89: ddex.mead.v11.Intensity.value:type_name -> ddex.mead.v11.IntensityValue
	375, // 90: ddex.mead.v11.LocationAndDateOfSession.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	399, // 91: ddex.mead.v11.LocationAndDateOfSession.session_type:type_name -> ddex.mead.v11.SessionType
	383, // 92: ddex.mead.v11.LocationAndDateOfSession.period:type_name -> ddex.mead.v11.Period
	405, // 93: ddex.mead.v11.LocationAndDateOfSession.venue:type_name -> ddex.mead.v11.Venue
	401, // 94: ddex.mead.v11.LocationAndDateOfSession.comment:type_name -> ddex.mead.v11.TextWithFormat
	271, // 95: ddex.mead.v11.LocationAndDateOfSession.contributor:type_name -> ddex.mead.v11.Contributor
	375, // 96: ddex.mead.v11.Lyrics.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	292, // 97: ddex.mead.v11.Lyrics.text:type_name -> ddex.mead.v11.LyricsText
	352, // 98: ddex.mead.v11.Lyrics.territory_of_lyrics_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	386, // 99: ddex.mead.v11.Lyrics.pronunciation:type_name -> ddex.mead.v11.Pronunciation
	117, // 100: ddex.mead.v11.Lyrics.lyrics_type:type_name -> ddex.mead.v11.LyricsType
	221, // 101: ddex.mead.v11.LyricsText.format:type_name -> ddex.mead.v11.TextCodecType
	375, // 102: ddex.mead.v11.Mood.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	297, // 103: ddex.mead.v11.Mood.value:type_name -> ddex.mead.v11.MoodValue
	402, // 104: ddex.mead.v11.Mood.description:type_name -> ddex.mead.v11.TextWithoutTerritory
	352, // 105: ddex.mead.v11.Mood.territory_of_mood_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	125, // 106: ddex.mead.v11.Mood.mood_type:type_name -> ddex.mead.v11.MoodOrThemeType
	387, // 107: ddex.mead.v11.Party.proprietary_id:type_name -> ddex.mead.v11.ProprietaryId
	375, // 108: ddex.mead.v11.RecordingPart.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	233, // 109: ddex.mead.v11.RecordingPart.unit:type_name -> ddex.mead.v11.UnitOfCuePoints
	388, // 110: ddex.mead.v11.RecordingPart.recording_part_type:type_name -> ddex.mead.v11.RecordingPartType
	267, // 111: ddex.mead.v11.RecordingPart.comment:type_name -> ddex.mead.v11.Annotation
	401, // 112: ddex.mead.v11.RecordingPart.usage_information:type_name -> ddex.mead.v11.TextWithFormat
	375, // 113: ddex.mead.v11.RelatedWork.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	377, // 114: ddex.mead.v11.RelatedWork.work_id:type_name -> ddex.mead.v11.MusicalWorkIdWithoutFlag
	410, // 115: ddex.mead.v11.RelatedWork.work_title:type_name -> ddex.mead.v11.WorkTitle
	409, // 116: ddex.mead.v11.RelatedWork.work_relationship_type:type_name -> ddex.mead.v11.WorkRelationshipType
	380, // 117: ddex.mead.v11.RelatedWork.writer:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	303, // 118: ddex.mead.v11.ReleaseInformation.release_summary:type_name -> ddex.mead.v11.ReleaseSummary
	281, // 119: ddex.mead.v11.ReleaseInformation.genre_category:type_name -> ddex.mead.v11.GenreCategory
	318, // 120: ddex.mead.v11.ReleaseInformation.sub_genre_category:type_name -> ddex.mead.v11.SubGenreCategory
	363, // 121: ddex.mead.v11.ReleaseInformation.focus:type_name -> ddex.mead.v11.Focus
	296, // 122: ddex.mead.v11.ReleaseInformation.mood:type_name -> ddex.mead.v11.Mood
	268, // 123: ddex.mead.v11.ReleaseInformation.artistic_style:type_name -> ddex.mead.v11.ArtisticStyle
	320, // 124: ddex.mead.v11.ReleaseInformation.theme:type_name -> ddex.mead.v11.Theme
	264, // 125: ddex.mead.v11.ReleaseInformation.activity:type_name -> ddex.mead.v11.Activity
	350, // 126: ddex.mead.v11.ReleaseInformation.commentary_note:type_name -> ddex.mead.v11.CommentaryNote
	359, // 127: ddex.mead.v11.ReleaseInformation.epoch:type_name -> ddex.mead.v11.Epoch
	345, // 128: ddex.mead.v11.ReleaseInformation.artistic_influence:type_name -> ddex.mead.v11.ArtisticInfluence
	315, // 129: ddex.mead.v11.ReleaseInformation.is_similar:type_name -> ddex.mead.v11.SimilarRelease
	366, // 130: ddex.mead.v11.ReleaseInformation.historic_charting_information:type_name -> ddex.mead.v11.HistoricChartingInformation
	346, // 131: ddex.mead.v11.ReleaseInformation.award:type_name -> ddex.mead.v11.Award
	266, // 132: ddex.mead.v11.ReleaseInformation.alternative_title:type_name -> ddex.mead.v11.AlternativeTitle
	367, // 133: ddex.mead.v11.ReleaseInformation.image:type_name -> ddex.mead.v11.Image
	352, // 134: ddex.mead.v11.ReleaseInformation.applicable_territory_code:type_name -> ddex.mead.v11.CurrentTerritoryCode
	301, // 135: ddex.mead.v11.ReleaseInformationList.release_information:type_name -> ddex.mead.v11.ReleaseInformation
	392, // 136: ddex.mead.v11.ReleaseSummary.release_id:type_name -> ddex.mead.v11.ReleaseId
	276, // 137: ddex.mead.v11.ReleaseSummary.display_title:type_name -> ddex.mead.v11.DisplayTitle
	357, // 138: ddex.mead.v11.ReleaseSummary.display_artist_name:type_name -> ddex.mead.v11.DisplayArtistNameWithPronunciation
	380, // 139: ddex.mead.v11.ReleaseSummary.display_artist:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	396, // 140: ddex.mead.v11.RelevantResource.resource_id:type_name -> ddex.mead.v11.ResourceIdWithoutFlag
	397, // 141: ddex.mead.v11.RelevantResource.resource_relationship_type:type_name -> ddex.mead.v11.ResourceRelationshipType
	308, // 142: ddex.mead.v11.ResourceInformation.resource_summary:type_name -> ddex.mead.v11.ResourceSummary
	281, // 143: ddex.mead.v11.ResourceInformation.genre_category:type_name -> ddex.mead.v11.GenreCategory
	318, // 144: ddex.mead.v11.ResourceInformation.sub_genre_category:type_name -> ddex.mead.v11.SubGenreCategory
	279, // 145: ddex.mead.v11.ResourceInformation.form:type_name -> ddex.mead.v11.Form
	406, // 146: ddex.mead.v11.ResourceInformation.vocal_register:type_name -> ddex.mead.v11.VocalRegister
	363, // 147: ddex.mead.v11.ResourceInformation.focus:type_name -> ddex.mead.v11.Focus
	263, // 148: ddex.mead.v11.ResourceInformation.absolute_pitch:type_name -> ddex.mead.v11.AbsolutePitch
	322, // 149: ddex.mead.v11.ResourceInformation.time_signature:type_name -> ddex.mead.v11.TimeSignature
	319, // 150: ddex.mead.v11.ResourceInformation.tempo:type_name -> ddex.mead.v11.TempoValue
	269, // 151: ddex.mead.v11.ResourceInformation.beats_per_minute:type_name -> ddex.mead.v11.BeatsPerMinute
	288, // 152: ddex.mead.v11.ResourceInformation.intensity:type_name -> ddex.mead.v11.Intensity
	286, // 153: ddex.mead.v11.ResourceInformation.instrument_used:type_name -> ddex.mead.v11.InstrumentUsed
	282, // 154: ddex.mead.v11.ResourceInformation.harmony:type_name -> ddex.mead.v11.Harmony
	296, // 155: ddex.mead.v11.ResourceInformation.mood:type_name -> ddex.mead.v11.Mood
	272, // 156: ddex.mead.v11.ResourceInformation.dance_style:type_name -> ddex.mead.v11.DanceStyle
	309, // 157: ddex.mead.v11.ResourceInformation.rhythm_style:type_name -> ddex.mead.v11.RhythmStyle
	268, // 158: ddex.mead.v11.ResourceInformation.artistic_style:type_name -> ddex.mead.v11.ArtisticStyle
	320, // 159: ddex.mead.v11.ResourceInformation.theme:type_name -> ddex.mead.v11.Theme
	264, // 160: ddex.mead.v11.ResourceInformation.activity:type_name -> ddex.mead.v11.Activity
	326, // 161: ddex.mead.v11.ResourceInformation.used_musical_work:type_name -> ddex.mead.v11.UsedMusicalWork
	307, // 162: ddex.mead.v11.ResourceInformation.related_resource:type_name -> ddex.mead.v11.ResourceRelationship
	291, // 163: ddex.mead.v11.ResourceInformation.lyrics:type_name -> ddex.mead.v11.Lyrics
	350, // 164: ddex.mead.v11.ResourceInformation.commentary_note:type_name -> ddex.mead.v11.CommentaryNote
	313, // 165: ddex.mead.v11.ResourceInformation.sample:type_name -> ddex.mead.v11.Sample
	299, // 166: ddex.mead.v11.ResourceInformation.recording_part:type_name -> ddex.mead.v11.RecordingPart
	324, // 167: ddex.mead.v11.ResourceInformation.usage:type_name -> ddex.mead.v11.Usage
	284, // 168: ddex.mead.v11.ResourceInformation.impact_date:type_name -> ddex.mead.v11.ImpactDate
	349, // 169: ddex.mead.v11.ResourceInformation.classical_period:type_name -> ddex.mead.v11.ClassicalPeriod
	359, // 170: ddex.mead.v11.ResourceInformation.epoch:type_name -> ddex.mead.v11.Epoch
	345, // 171: ddex.mead.v11.ResourceInformation.artistic_influence:type_name -> ddex.mead.v11.ArtisticInfluence
	316, // 172: ddex.mead.v11.ResourceInformation.is_similar:type_name -> ddex.mead.v11.SimilarResource
	366, // 173: ddex.mead.v11.ResourceInformation.historic_charting_information:type_name -> ddex.mead.v11.HistoricChartingInformation
	346, // 174: ddex.mead.v11.ResourceInformation.award:type_name -> ddex.mead.v11.Award
	290, // 175: ddex.mead.v11.ResourceInformation.location_and_date_of_session:type_name -> ddex.mead.v11.LocationAndDateOfSession
	266, // 176: ddex.mead.v11.ResourceInformation.alternative_title:type_name -> ddex.mead.v11.AlternativeTitle
	367, // 177: ddex.mead.v11.ResourceInformation.image:type_name -> ddex.mead.v11.Image
	352, // 178: ddex.mead.v11.ResourceInformation.applicable_territory_code:type_name -> ddex.mead.v11.CurrentTerritoryCode
	305, // 179: ddex.mead.v11.ResourceInformationList.resource_information:type_name -> ddex.mead.v11.ResourceInformation
	375, // 180: ddex.mead.v11.ResourceRelationship.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	396, // 181: ddex.mead.v11.ResourceRelationship.resource_id:type_name -> ddex.mead.v11.ResourceIdWithoutFlag
	390, // 182: ddex.mead.v11.ResourceRelationship.related_resource_type:type_name -> ddex.mead.v11.RelatedResourceType
	404, // 183: ddex.mead.v11.ResourceRelationship.title:type_name -> ddex.mead.v11.TitleWithPronunciation
	357, // 184: ddex.mead.v11.ResourceRelationship.display_artist_name:type_name -> ddex.mead.v11.DisplayArtistNameWithPronunciation
	380, // 185: ddex.mead.v11.ResourceRelationship.display_artist:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	396, // 186: ddex.mead.v11.ResourceSummary.resource_id:type_name -> ddex.mead.v11.ResourceIdWithoutFlag
	276, // 187: ddex.mead.v11.ResourceSummary.display_title:type_name -> ddex.mead.v11.DisplayTitle
	357, // 188: ddex.mead.v11.ResourceSummary.display_artist_name:type_name -> ddex.mead.v11.DisplayArtistNameWithPronunciation
	380, // 189: ddex.mead.v11.ResourceSummary.display_artist:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	375, // 190: ddex.mead.v11.RhythmStyle.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	310, // 191: ddex.mead.v11.RhythmStyle.value:type_name -> ddex.mead.v11.RhythmStyleValue
	402, // 192: ddex.mead.v11.RhythmStyle.description:type_name -> ddex.mead.v11.TextWithoutTerritory
	352, // 193: ddex.mead.v11.RhythmStyle.territory_of_rhythm_style_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	375, // 194: ddex.mead.v11.Sample.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	308, // 195: ddex.mead.v11.Sample.related_resource:type_name -> ddex.mead.v11.ResourceSummary
	314, // 196: ddex.mead.v11.Sample.sample_feature:type_name -> ddex.mead.v11.SampleFeature
	401, // 197: ddex.mead.v11.Sample.description:type_name -> ddex.mead.v11.TextWithFormat
	375, // 198: ddex.mead.v11.SimilarRelease.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	391, // 199: ddex.mead.v11.SimilarRelease.release:type_name -> ddex.mead.v11.Release
	267, // 200: ddex.mead.v11.SimilarRelease.description:type_name -> ddex.mead.v11.Annotation
	375, // 201: ddex.mead.v11.SimilarResource.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	394, // 202: ddex.mead.v11.SimilarResource.resource:type_name -> ddex.mead.v11.Resource
	267, // 203: ddex.mead.v11.SimilarResource.description:type_name -> ddex.mead.v11.Annotation
	375, // 204: ddex.mead.v11.SimilarWork.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	408, // 205: ddex.mead.v11.SimilarWork.work:type_name -> ddex.mead.v11.Work
	267, // 206: ddex.mead.v11.SimilarWork.description:type_name -> ddex.mead.v11.Annotation
	375, // 207: ddex.mead.v11.SubGenreCategory.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	400, // 208: ddex.mead.v11.SubGenreCategory.value:type_name -> ddex.mead.v11.SubGenreCategoryValue
	375, // 209: ddex.mead.v11.Theme.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	321, // 210: ddex.mead.v11.Theme.value:type_name -> ddex.mead.v11.ThemeValue
	402, // 211: ddex.mead.v11.Theme.description:type_name -> ddex.mead.v11.TextWithoutTerritory
	352, // 212: ddex.mead.v11.Theme.territory_of_theme_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	125, // 213: ddex.mead.v11.Theme.theme_type:type_name -> ddex.mead.v11.MoodOrThemeType
	375, // 214: ddex.mead.v11.TimeSignature.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	323, // 215: ddex.mead.v11.TimeSignature.modulation:type_name -> ddex.mead.v11.TimeSignatureModulation
	375, // 216: ddex.mead.v11.Usage.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	401, // 217: ddex.mead.v11.Usage.description:type_name -> ddex.mead.v11.TextWithFormat
	352, // 218: ddex.mead.v11.Usage.territory_of_usage_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	304, // 219: ddex.mead.v11.Usage.relevant_resource:type_name -> ddex.mead.v11.RelevantResource
	411, // 220: ddex.mead.v11.UsagePeriod.start_date:type_name -> ddex.mead.v11.EventDateWithoutFlags
	411, // 221: ddex.mead.v11.UsagePeriod.end_date:type_name -> ddex.mead.v11.EventDateWithoutFlags
	375, // 222: ddex.mead.v11.UsedMusicalWork.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	375, // 223: ddex.mead.v11.WorkHierarchy.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	377, // 224: ddex.mead.v11.WorkHierarchy.work_id:type_name -> ddex.mead.v11.MusicalWorkIdWithoutFlag
	410, // 225: ddex.mead.v11.WorkHierarchy.work_title:type_name -> ddex.mead.v11.WorkTitle
	270, // 226: ddex.mead.v11.WorkHierarchy.child:type_name -> ddex.mead.v11.ChildWorkHierarchy
	279, // 227: ddex.mead.v11.WorkHierarchy.form:type_name -> ddex.mead.v11.Form
	330, // 228: ddex.mead.v11.WorkInformation.work_summary:type_name -> ddex.mead.v11.WorkSummary
	281, // 229: ddex.mead.v11.WorkInformation.genre_category:type_name -> ddex.mead.v11.GenreCategory
	318, // 230: ddex.mead.v11.WorkInformation.sub_genre_category:type_name -> ddex.mead.v11.SubGenreCategory
	279, // 231: ddex.mead.v11.WorkInformation.form:type_name -> ddex.mead.v11.Form
	406, // 232: ddex.mead.v11.WorkInformation.vocal_register:type_name -> ddex.mead.v11.VocalRegister
	363, // 233: ddex.mead.v11.WorkInformation.focus:type_name -> ddex.mead.v11.Focus
	322, // 234: ddex.mead.v11.WorkInformation.time_signature:type_name -> ddex.mead.v11.TimeSignature
	319, // 235: ddex.mead.v11.WorkInformation.tempo:type_name -> ddex.mead.v11.TempoValue
	285, // 236: ddex.mead.v11.WorkInformation.target_instrument:type_name -> ddex.mead.v11.Instrument
	282, // 237: ddex.mead.v11.WorkInformation.harmony:type_name -> ddex.mead.v11.Harmony
	296, // 238: ddex.mead.v11.WorkInformation.mood:type_name -> ddex.mead.v11.Mood
	272, // 239: ddex.mead.v11.WorkInformation.dance_style:type_name -> ddex.mead.v11.DanceStyle
	309, // 240: ddex.mead.v11.WorkInformation.rhythm_style:type_name -> ddex.mead.v11.RhythmStyle
	320, // 241: ddex.mead.v11.WorkInformation.theme:type_name -> ddex.mead.v11.Theme
	264, // 242: ddex.mead.v11.WorkInformation.activity:type_name -> ddex.mead.v11.Activity
	327, // 243: ddex.mead.v11.WorkInformation.work_hierarchy:type_name -> ddex.mead.v11.WorkHierarchy
	300, // 244: ddex.mead.v11.WorkInformation.related_work:type_name -> ddex.mead.v11.RelatedWork
	274, // 245: ddex.mead.v11.WorkInformation.derived_recording:type_name -> ddex.mead.v11.DerivedRecording
	291, // 246: ddex.mead.v11.WorkInformation.lyrics:type_name -> ddex.mead.v11.Lyrics
	350, // 247: ddex.mead.v11.WorkInformation.commentary_note:type_name -> ddex.mead.v11.CommentaryNote
	349, // 248: ddex.mead.v11.WorkInformation.classical_period:type_name -> ddex.mead.v11.ClassicalPeriod
	359, // 249: ddex.mead.v11.WorkInformation.epoch:type_name -> ddex.mead.v11.Epoch
	345, // 250: ddex.mead.v11.WorkInformation.artistic_influence:type_name -> ddex.mead.v11.ArtisticInfluence
	317, // 251: ddex.mead.v11.WorkInformation.is_similar:type_name -> ddex.mead.v11.SimilarWork
	346, // 252: ddex.mead.v11.WorkInformation.award:type_name -> ddex.mead.v11.Award
	266, // 253: ddex.mead.v11.WorkInformation.alternative_title:type_name -> ddex.mead.v11.AlternativeTitle
	328, // 254: ddex.mead.v11.WorkInformationList.work_information:type_name -> ddex.mead.v11.WorkInformation
	377, // 255: ddex.mead.v11.WorkSummary.musical_work_id:type_name -> ddex.mead.v11.MusicalWorkIdWithoutFlag
	404, // 256: ddex.mead.v11.WorkSummary.work_title:type_name -> ddex.mead.v11.TitleWithPronunciation
	380, // 257: ddex.mead.v11.WorkSummary.writer:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	342, // 258: ddex.mead.v11.Person.uri:type_name -> ddex.mead.v11.URI
	339, // 259: ddex.mead.v11.Source.author:type_name -> ddex.mead.v11.Person
	331, // 260: ddex.mead.v11.Source.category:type_name -> ddex.mead.v11.Category
	339, // 261: ddex.mead.v11.Source.contributor:type_name -> ddex.mead.v11.Person
	334, // 262: ddex.mead.v11.Source.generator:type_name -> ddex.mead.v11.Generator
	335, // 263: ddex.mead.v11.Source.icon:type_name -> ddex.mead.v11.Icon
	336, // 264: ddex.mead.v11.Source.id:type_name -> ddex.mead.v11.Id
	337, // 265: ddex.mead.v11.Source.link:type_name -> ddex.mead.v11.Link
	338, // 266: ddex.mead.v11.Source.logo:type_name -> ddex.mead.v11.Logo
	341, // 267: ddex.mead.v11.Source.rights:type_name -> ddex.mead.v11.Text
	341, // 268: ddex.mead.v11.Source.subtitle:type_name -> ddex.mead.v11.Text
	341, // 269: ddex.mead.v11.Source.title:type_name -> ddex.mead.v11.Text
	333, // 270: ddex.mead.v11.Source.updated:type_name -> ddex.mead.v11.DateTime
	224, // 271: ddex.mead.v11.Text.type:type_name -> ddex.mead.v11.TextTypeATOM
	220, // 272: ddex.mead.v11.AllTerritoryCode.identifier_type:type_name -> ddex.mead.v11.TerritoryCodeTypeIncludingDeprecatedCodes
	375, // 273: ddex.mead.v11.ArtisticInfluence.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	380, // 274: ddex.mead.v11.ArtisticInfluence.party:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	408, // 275: ddex.mead.v11.ArtisticInfluence.work:type_name -> ddex.mead.v11.Work
	394, // 276: ddex.mead.v11.ArtisticInfluence.resource:type_name -> ddex.mead.v11.Resource
	391, // 277: ddex.mead.v11.ArtisticInfluence.release:type_name -> ddex.mead.v11.Release
	401, // 278: ddex.mead.v11.ArtisticInfluence.description:type_name -> ddex.mead.v11.TextWithFormat
	375, // 279: ddex.mead.v11.Award.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	380, // 280: ddex.mead.v11.Award.awarding_body:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	380, // 281: ddex.mead.v11.Award.awarded_party:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	379, // 282: ddex.mead.v11.Award.award_name:type_name -> ddex.mead.v11.NameWithPronunciationAndScriptCode
	360, // 283: ddex.mead.v11.Award.date:type_name -> ddex.mead.v11.EventDate
	401, // 284: ddex.mead.v11.Award.comment:type_name -> ddex.mead.v11.TextWithFormat
	358, // 285: ddex.mead.v11.ChartEntry.duration:type_name -> ddex.mead.v11.Duration
	401, // 286: ddex.mead.v11.ChartEntry.comment:type_name -> ddex.mead.v11.TextWithFormat
	375, // 287: ddex.mead.v11.ClassicalPeriod.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	384, // 288: ddex.mead.v11.ClassicalPeriod.name:type_name -> ddex.mead.v11.PeriodValue
	352, // 289: ddex.mead.v11.ClassicalPeriod.territory_of_classical_period_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	375, // 290: ddex.mead.v11.CommentaryNote.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	402, // 291: ddex.mead.v11.CommentaryNote.text:type_name -> ddex.mead.v11.TextWithoutTerritory
	351, // 292: ddex.mead.v11.CommentaryNote.commentary_note_type:type_name -> ddex.mead.v11.CommentaryNoteType
	352, // 293: ddex.mead.v11.CommentaryNote.territory_of_commentary_note_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	380, // 294: ddex.mead.v11.CommentaryNote.author:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	219, // 295: ddex.mead.v11.CurrentTerritoryCode.identifier_type:type_name -> ddex.mead.v11.TerritoryCodeType
	365, // 296: ddex.mead.v11.DetailedHashSum.algorithm:type_name -> ddex.mead.v11.HashSumAlgorithmType
	18,  // 297: ddex.mead.v11.DetailedHashSum.data_type:type_name -> ddex.mead.v11.BinaryDataType
	387, // 298: ddex.mead.v11.DetailedPartyId.proprietary_id:type_name -> ddex.mead.v11.ProprietaryId
	352, // 299: ddex.mead.v11.DisplayArtistNameWithDefault.applicable_territory_code:type_name -> ddex.mead.v11.CurrentTerritoryCode
	356, // 300: ddex.mead.v11.DisplayArtistNameWithPronunciation.name:type_name -> ddex.mead.v11.DisplayArtistNameWithDefault
	386, // 301: ddex.mead.v11.DisplayArtistNameWithPronunciation.pronunciation:type_name -> ddex.mead.v11.Pronunciation
	234, // 302: ddex.mead.v11.Duration.unit_of_duration:type_name -> ddex.mead.v11.UnitOfDuration
	375, // 303: ddex.mead.v11.Epoch.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	378, // 304: ddex.mead.v11.Epoch.value:type_name -> ddex.mead.v11.Name
	380, // 305: ddex.mead.v11.Epoch.related_artist:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	389, // 306: ddex.mead.v11.Epoch.related_creation:type_name -> ddex.mead.v11.RelatedCreation
	353, // 307: ddex.mead.v11.Epoch.start_date:type_name -> ddex.mead.v11.Date
	353, // 308: ddex.mead.v11.Epoch.end_date:type_name -> ddex.mead.v11.Date
	352, // 309: ddex.mead.v11.Epoch.territory_of_epoch_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	343, // 310: ddex.mead.v11.EventDate.applicable_territory_code:type_name -> ddex.mead.v11.AllTerritoryCode
	343, // 311: ddex.mead.v11.EventDateTime.territory_code:type_name -> ddex.mead.v11.AllTerritoryCode
	354, // 312: ddex.mead.v11.File.hash_sum:type_name -> ddex.mead.v11.DetailedHashSum
	375, // 313: ddex.mead.v11.Focus.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	380, // 314: ddex.mead.v11.Focus.party:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	357, // 315: ddex.mead.v11.Focus.display_artist_name:type_name -> ddex.mead.v11.DisplayArtistNameWithPronunciation
	380, // 316: ddex.mead.v11.Focus.display_artist:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	380, // 317: ddex.mead.v11.Focus.writer:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	385, // 318: ddex.mead.v11.Focus.period_of_being_focus:type_name -> ddex.mead.v11.PeriodWithTime
	352, // 319: ddex.mead.v11.Focus.territory_of_being_focus_track_description:type_name -> ddex.mead.v11.CurrentTerritoryCode
	402, // 320: ddex.mead.v11.Focus.comment:type_name -> ddex.mead.v11.TextWithoutTerritory
	375, // 321: ddex.mead.v11.HistoricChartingInformation.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	352, // 322: ddex.mead.v11.HistoricChartingInformation.territory_code:type_name -> ddex.mead.v11.CurrentTerritoryCode
	379, // 323: ddex.mead.v11.HistoricChartingInformation.chart_name:type_name -> ddex.mead.v11.NameWithPronunciationAndScriptCode
	358, // 324: ddex.mead.v11.HistoricChartingInformation.duration_in_charts:type_name -> ddex.mead.v11.Duration
	348, // 325: ddex.mead.v11.HistoricChartingInformation.chart_entry:type_name -> ddex.mead.v11.ChartEntry
	401, // 326: ddex.mead.v11.HistoricChartingInformation.comment:type_name -> ddex.mead.v11.TextWithFormat
	375, // 327: ddex.mead.v11.Image.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	362, // 328: ddex.mead.v11.Image.file:type_name -> ddex.mead.v11.File
	368, // 329: ddex.mead.v11.Image.image_type:type_name -> ddex.mead.v11.ImageType
	370, // 330: ddex.mead.v11.MessageAuditTrail.message_audit_trail_event:type_name -> ddex.mead.v11.MessageAuditTrailEvent
	372, // 331: ddex.mead.v11.MessageAuditTrailEvent.messaging_party_descriptor:type_name -> ddex.mead.v11.MessagingPartyWithoutCode
	372, // 332: ddex.mead.v11.MessageHeader.message_sender:type_name -> ddex.mead.v11.MessagingPartyWithoutCode
	372, // 333: ddex.mead.v11.MessageHeader.sent_on_behalf_of:type_name -> ddex.mead.v11.MessagingPartyWithoutCode
	372, // 334: ddex.mead.v11.MessageHeader.message_recipient:type_name -> ddex.mead.v11.MessagingPartyWithoutCode
	369, // 335: ddex.mead.v11.MessageHeader.message_audit_trail:type_name -> ddex.mead.v11.MessageAuditTrail
	121, // 336: ddex.mead.v11.MessageHeader.message_control_type:type_name -> ddex.mead.v11.MessageControlType
	382, // 337: ddex.mead.v11.MessagingPartyWithoutCode.party_name:type_name -> ddex.mead.v11.PartyNameWithoutCode
	376, // 338: ddex.mead.v11.MetadataSource.metadata_source_type:type_name -> ddex.mead.v11.MetadataSourceType
	373, // 339: ddex.mead.v11.MetadataSourceList.metadata_source:type_name -> ddex.mead.v11.MetadataSource
	14,  // 340: ddex.mead.v11.MetadataSourceReference.status:type_name -> ddex.mead.v11.AssertionStatus
	387, // 341: ddex.mead.v11.MusicalWorkIdWithoutFlag.proprietary_id:type_name -> ddex.mead.v11.ProprietaryId
	378, // 342: ddex.mead.v11.NameWithPronunciationAndScriptCode.name:type_name -> ddex.mead.v11.Name
	386, // 343: ddex.mead.v11.NameWithPronunciationAndScriptCode.pronunciation:type_name -> ddex.mead.v11.Pronunciation
	355, // 344: ddex.mead.v11.PartyDescriptorWithPronunciation.party_id:type_name -> ddex.mead.v11.DetailedPartyId
	379, // 345: ddex.mead.v11.PartyNameWithPronunciation.full_name:type_name -> ddex.mead.v11.NameWithPronunciationAndScriptCode
	379, // 346: ddex.mead.v11.PartyNameWithPronunciation.full_name_ascii_transcribed:type_name -> ddex.mead.v11.NameWithPronunciationAndScriptCode
	379, // 347: ddex.mead.v11.PartyNameWithPronunciation.full_name_indexed:type_name -> ddex.mead.v11.NameWithPronunciationAndScriptCode
	379, // 348: ddex.mead.v11.PartyNameWithPronunciation.names_before_key_name:type_name -> ddex.mead.v11.NameWithPronunciationAndScriptCode
	379, // 349: ddex.mead.v11.PartyNameWithPronunciation.key_name:type_name -> ddex.mead.v11.NameWithPronunciationAndScriptCode
	379, // 350: ddex.mead.v11.PartyNameWithPronunciation.names_after_key_name:type_name -> ddex.mead.v11.NameWithPronunciationAndScriptCode
	379, // 351: ddex.mead.v11.PartyNameWithPronunciation.abbreviated_name:type_name -> ddex.mead.v11.NameWithPronunciationAndScriptCode
	352, // 352: ddex.mead.v11.PartyNameWithPronunciation.applicable_territory_code:type_name -> ddex.mead.v11.CurrentTerritoryCode
	76,  // 353: ddex.mead.v11.Pronunciation.encoding_type:type_name -> ddex.mead.v11.EncodingType
	404, // 354: ddex.mead.v11.RelatedCreation.title:type_name -> ddex.mead.v11.TitleWithPronunciation
	393, // 355: ddex.mead.v11.Release.release_title:type_name -> ddex.mead.v11.ReleaseTitle
	357, // 356: ddex.mead.v11.Release.display_artist_name:type_name -> ddex.mead.v11.DisplayArtistNameWithPronunciation
	380, // 357: ddex.mead.v11.Release.display_artist:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	347, // 358: ddex.mead.v11.ReleaseId.catalog_number:type_name -> ddex.mead.v11.CatalogNumber
	387, // 359: ddex.mead.v11.ReleaseId.proprietary_id:type_name -> ddex.mead.v11.ProprietaryId
	398, // 360: ddex.mead.v11.Resource.resource_title:type_name -> ddex.mead.v11.ResourceTitle
	357, // 361: ddex.mead.v11.Resource.display_artist_name:type_name -> ddex.mead.v11.DisplayArtistNameWithPronunciation
	380, // 362: ddex.mead.v11.Resource.display_artist:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	347, // 363: ddex.mead.v11.ResourceIdWithoutFlag.catalog_number:type_name -> ddex.mead.v11.CatalogNumber
	387, // 364: ddex.mead.v11.ResourceIdWithoutFlag.proprietary_id:type_name -> ddex.mead.v11.ProprietaryId
	352, // 365: ddex.mead.v11.TextWithFormat.applicable_territory_code:type_name -> ddex.mead.v11.CurrentTerritoryCode
	221, // 366: ddex.mead.v11.TextWithFormat.format:type_name -> ddex.mead.v11.TextCodecType
	352, // 367: ddex.mead.v11.TextWithoutTerritory.applicable_territory_code:type_name -> ddex.mead.v11.CurrentTerritoryCode
	221, // 368: ddex.mead.v11.TextWithoutTerritory.format:type_name -> ddex.mead.v11.TextCodecType
	386, // 369: ddex.mead.v11.TitleText.pronunciation:type_name -> ddex.mead.v11.Pronunciation
	403, // 370: ddex.mead.v11.TitleWithPronunciation.title_text:type_name -> ddex.mead.v11.TitleText
	403, // 371: ddex.mead.v11.TitleWithPronunciation.sub_title:type_name -> ddex.mead.v11.TitleText
	228, // 372: ddex.mead.v11.TitleWithPronunciation.title_type:type_name -> ddex.mead.v11.TitleType
	343, // 373: ddex.mead.v11.Venue.territory_code:type_name -> ddex.mead.v11.AllTerritoryCode
	375, // 374: ddex.mead.v11.VocalRegister.metadata_source_reference:type_name -> ddex.mead.v11.MetadataSourceReference
	407, // 375: ddex.mead.v11.VocalRegister.value:type_name -> ddex.mead.v11.VocalRegisterValue
	410, // 376: ddex.mead.v11.Work.work_title:type_name -> ddex.mead.v11.WorkTitle
	380, // 377: ddex.mead.v11.Work.writer:type_name -> ddex.mead.v11.PartyDescriptorWithPronunciation
	343, // 378: ddex.mead.v11.EventDateWithoutFlags.applicable_territory_code:type_name -> ddex.mead.v11.AllTerritoryCode
	379, // [379:379] is the sub-list for method output_type
	379, // [379:379] is the sub-list for method input_type
	379, // [379:379] is the sub-list for extension type_name
	379, // [379:379] is the sub-list for extension extendee
	0,   // [0:379] is the sub-list for field type_name
}

func init() { file_meadv11_mead_proto_init() }
func file_meadv11_mead_proto_init() {
	if File_meadv11_mead_proto != nil {
		return
	}
	file_meadv11_mead_proto_msgTypes[1].OneofWrappers = []any{
		(*Feed_Author)(nil),
		(*Feed_Category)(nil),
		(*Feed_Contributor)(nil),
		(*Feed_Generator)(nil),
		(*Feed_Icon)(nil),
		(*Feed_Id)(nil),
		(*Feed_Link)(nil),
		(*Feed_Logo)(nil),
		(*Feed_Rights)(nil),
		(*Feed_Subtitle)(nil),
		(*Feed_Title)(nil),
		(*Feed_Updated)(nil),
		(*Feed_Entry)(nil),
	}
	file_meadv11_mead_proto_msgTypes[16].OneofWrappers = []any{
		(*Entry_Author)(nil),
		(*Entry_Category)(nil),
		(*Entry_Content)(nil),
		(*Entry_Contributor)(nil),
		(*Entry_Id)(nil),
		(*Entry_Link)(nil),
		(*Entry_Published)(nil),
		(*Entry_Rights)(nil),
		(*Entry_Source)(nil),
		(*Entry_Summary)(nil),
		(*Entry_Title)(nil),
		(*Entry_Updated)(nil),
		(*Entry_SubscriptionId)(nil),
	}
	file_meadv11_mead_proto_msgTypes[78].OneofWrappers = []any{
		(*Person_Name)(nil),
		(*Person_Uri)(nil),
		(*Person_Email)(nil),
	}
	file_meadv11_mead_proto_msgTypes[79].OneofWrappers = []any{
		(*Source_Author)(nil),
		(*Source_Category)(nil),
		(*Source_Contributor)(nil),
		(*Source_Generator)(nil),
		(*Source_Icon)(nil),
		(*Source_Id)(nil),
		(*Source_Link)(nil),
		(*Source_Logo)(nil),
		(*Source_Rights)(nil),
		(*Source_Subtitle)(nil),
		(*Source_Title)(nil),
		(*Source_Updated)(nil),
	}
	file_meadv11_mead_proto_msgTypes[119].OneofWrappers = []any{
		(*PartyDescriptorWithPronunciation_PartyId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meadv11_mead_proto_rawDesc), len(file_meadv11_mead_proto_rawDesc)),
			NumEnums:      261,
			NumMessages:   152,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meadv11_mead_proto_goTypes,
		DependencyIndexes: file_meadv11_mead_proto_depIdxs,
		EnumInfos:         file_meadv11_mead_proto_enumTypes,
		MessageInfos:      file_meadv11_mead_proto_msgTypes,
	}.Build()
	File_meadv11_mead_proto = out.File
	file_meadv11_mead_proto_goTypes = nil
	file_meadv11_mead_proto_depIdxs = nil
}
